
PneuDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014278  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  08014478  08014478  00024478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b9c  08014b9c  00030a3c  2**0
                  CONTENTS
  4 .ARM          00000008  08014b9c  08014b9c  00024b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ba4  08014ba4  00030a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014ba4  08014ba4  00024ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014bac  08014bac  00024bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a3c  20000000  08014bb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e278  20000a3c  080155ec  00030a3c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ecb4  080155ec  0003ecb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030a3c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041ad2  00000000  00000000  00030a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007eba  00000000  00000000  0007253c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020f0  00000000  00000000  0007a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d78  00000000  00000000  0007c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032b29  00000000  00000000  0007e260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026529  00000000  00000000  000b0d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010cbde  00000000  00000000  000d72b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3e90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c58  00000000  00000000  001e3f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  001edb64  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001edc18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000a3c 	.word	0x20000a3c
 800021c:	00000000 	.word	0x00000000
 8000220:	08014460 	.word	0x08014460

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000a40 	.word	0x20000a40
 800023c:	08014460 	.word	0x08014460

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000610:	b480      	push	{r7}
 8000612:	b091      	sub	sp, #68	; 0x44
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	885b      	ldrh	r3, [r3, #2]
 8000638:	fb03 f302 	mul.w	r3, r3, r2
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000644:	e052      	b.n	80006ec <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800064c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000658:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800065c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000664:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800066e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000674:	ed97 7a07 	vldr	s14, [r7, #28]
 8000678:	edd7 7a05 	vldr	s15, [r7, #20]
 800067c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000680:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000692:	3304      	adds	r3, #4
 8000694:	693a      	ldr	r2, [r7, #16]
 8000696:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800069e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 80006a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80006ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b0:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 80006b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80006b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80006bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c6:	3308      	adds	r3, #8
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ce:	330c      	adds	r3, #12
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d6:	3310      	adds	r3, #16
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006dc:	3310      	adds	r3, #16
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e2:	3310      	adds	r3, #16
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e8:	3b01      	subs	r3, #1
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1a9      	bne.n	8000646 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f4:	f003 0303 	and.w	r3, r3, #3
 80006f8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006fa:	e013      	b.n	8000724 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fe:	1d1a      	adds	r2, r3, #4
 8000700:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000702:	ed93 7a00 	vldr	s14, [r3]
 8000706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000708:	1d1a      	adds	r2, r3, #4
 800070a:	63ba      	str	r2, [r7, #56]	; 0x38
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000712:	1d1a      	adds	r2, r3, #4
 8000714:	637a      	str	r2, [r7, #52]	; 0x34
 8000716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800071a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 800071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000720:	3b01      	subs	r3, #1
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1e8      	bne.n	80006fc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800072a:	2300      	movs	r3, #0
 800072c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000730:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000734:	4618      	mov	r0, r3
 8000736:	3744      	adds	r7, #68	; 0x44
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	817b      	strh	r3, [r7, #10]
 800074e:	4613      	mov	r3, r2
 8000750:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	897a      	ldrh	r2, [r7, #10]
 8000756:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	893a      	ldrh	r2, [r7, #8]
 800075c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	605a      	str	r2, [r3, #4]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000770:	b480      	push	{r7}
 8000772:	b09b      	sub	sp, #108	; 0x6c
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	885b      	ldrh	r3, [r3, #2]
 8000790:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800079c:	6a3b      	ldr	r3, [r7, #32]
 800079e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80007a4:	e029      	b.n	80007fa <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80007a6:	69fa      	ldr	r2, [r7, #28]
 80007a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ae:	e008      	b.n	80007c2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 80007b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007b2:	1d1a      	adds	r2, r3, #4
 80007b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
        j--;
 80007bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007be:	3b01      	subs	r3, #1
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f3      	bne.n	80007b0 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007ca:	1d1a      	adds	r2, r3, #4
 80007cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007d2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007da:	e008      	b.n	80007ee <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007de:	1d1a      	adds	r2, r3, #4
 80007e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007e2:	f04f 0200 	mov.w	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
        j--;
 80007e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ea:	3b01      	subs	r3, #1
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f3      	bne.n	80007dc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007f6:	3b01      	subs	r3, #1
 80007f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1d2      	bne.n	80007a6 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 8000808:	e1aa      	b.n	8000b60 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 800080a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000816:	4413      	add	r3, r2
 8000818:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 800081a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	fb02 f303 	mul.w	r3, r2, r3
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	6a3a      	ldr	r2, [r7, #32]
 8000826:	4413      	add	r3, r2
 8000828:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800082a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	643b      	str	r3, [r7, #64]	; 0x40
 800083a:	e036      	b.n	80008aa <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800083c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800083e:	edd3 7a00 	vldr	s15, [r3]
 8000842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084a:	dd10      	ble.n	800086e <arm_mat_inverse_f32+0xfe>
 800084c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800084e:	edd3 7a00 	vldr	s15, [r3]
 8000852:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000856:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800085a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085e:	d503      	bpl.n	8000868 <arm_mat_inverse_f32+0xf8>
 8000860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000862:	edd3 7a00 	vldr	s15, [r3]
 8000866:	e016      	b.n	8000896 <arm_mat_inverse_f32+0x126>
 8000868:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800086c:	e013      	b.n	8000896 <arm_mat_inverse_f32+0x126>
 800086e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000870:	edd3 7a00 	vldr	s15, [r3]
 8000874:	eef1 7a67 	vneg.f32	s15, s15
 8000878:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800087c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000884:	d505      	bpl.n	8000892 <arm_mat_inverse_f32+0x122>
 8000886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000888:	edd3 7a00 	vldr	s15, [r3]
 800088c:	eef1 7a67 	vneg.f32	s15, s15
 8000890:	e001      	b.n	8000896 <arm_mat_inverse_f32+0x126>
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008a0:	4413      	add	r3, r2
 80008a2:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 80008a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008a6:	3301      	adds	r3, #1
 80008a8:	643b      	str	r3, [r7, #64]	; 0x40
 80008aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d3c4      	bcc.n	800083c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 80008b2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80008b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008be:	d102      	bne.n	80008c6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008c0:	f06f 0304 	mvn.w	r3, #4
 80008c4:	e186      	b.n	8000bd4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008c8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008ca:	2301      	movs	r3, #1
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008da:	dd02      	ble.n	80008e2 <arm_mat_inverse_f32+0x172>
 80008dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008e0:	e003      	b.n	80008ea <arm_mat_inverse_f32+0x17a>
 80008e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008e6:	eef1 7a67 	vneg.f32	s15, s15
 80008ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ee:	eef4 7a47 	vcmp.f32	s15, s14
 80008f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f6:	d069      	beq.n	80009cc <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008f8:	69fa      	ldr	r2, [r7, #28]
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	3b01      	subs	r3, #1
 8000900:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 8000902:	e060      	b.n	80009c6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000910:	4413      	add	r3, r2
 8000912:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000918:	fb02 f303 	mul.w	r3, r2, r3
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000920:	4413      	add	r3, r2
 8000922:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000926:	edd3 7a00 	vldr	s15, [r3]
 800092a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	dd03      	ble.n	800093c <arm_mat_inverse_f32+0x1cc>
 8000934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000936:	edd3 7a00 	vldr	s15, [r3]
 800093a:	e004      	b.n	8000946 <arm_mat_inverse_f32+0x1d6>
 800093c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800093e:	edd3 7a00 	vldr	s15, [r3]
 8000942:	eef1 7a67 	vneg.f32	s15, s15
 8000946:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800094a:	eef4 7a47 	vcmp.f32	s15, s14
 800094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000952:	d132      	bne.n	80009ba <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800095c:	e010      	b.n	8000980 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800095e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000966:	1d1a      	adds	r2, r3, #4
 8000968:	65fa      	str	r2, [r7, #92]	; 0x5c
 800096a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000972:	1d1a      	adds	r2, r3, #4
 8000974:	663a      	str	r2, [r7, #96]	; 0x60
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800097a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097c:	3b01      	subs	r3, #1
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1eb      	bne.n	800095e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800098a:	e010      	b.n	80009ae <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800098c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000994:	1d1a      	adds	r2, r3, #4
 8000996:	657a      	str	r2, [r7, #84]	; 0x54
 8000998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800099e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009a0:	1d1a      	adds	r2, r3, #4
 80009a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 80009a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009aa:	3b01      	subs	r3, #1
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 80009ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1eb      	bne.n	800098c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80009b4:	2301      	movs	r3, #1
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 80009b8:	e008      	b.n	80009cc <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	3301      	adds	r3, #1
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009c2:	3b01      	subs	r3, #1
 80009c4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d19b      	bne.n	8000904 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d009      	beq.n	80009e6 <arm_mat_inverse_f32+0x276>
 80009d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009de:	d102      	bne.n	80009e6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009e0:	f06f 0304 	mvn.w	r3, #4
 80009e4:	e0f6      	b.n	8000bd4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	fb02 f303 	mul.w	r3, r2, r3
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009f2:	4413      	add	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	fb02 f303 	mul.w	r3, r2, r3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	6a3a      	ldr	r2, [r7, #32]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a1c:	e010      	b.n	8000a40 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 8000a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a26:	1d1a      	adds	r2, r3, #4
 8000a28:	663a      	str	r2, [r7, #96]	; 0x60
 8000a2a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a2e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a36:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1eb      	bne.n	8000a1e <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a4a:	e010      	b.n	8000a6e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a54:	1d1a      	adds	r2, r3, #4
 8000a56:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a58:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a5c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a64:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1eb      	bne.n	8000a4c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a76:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a84:	e060      	b.n	8000b48 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d10c      	bne.n	8000aa8 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a98:	4413      	add	r3, r2
 8000a9a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000aa2:	4413      	add	r3, r2
 8000aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000aa6:	e044      	b.n	8000b32 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000abe:	e017      	b.n	8000af0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ac8:	1d1a      	adds	r2, r3, #4
 8000aca:	653a      	str	r2, [r7, #80]	; 0x50
 8000acc:	ed93 7a00 	vldr	s14, [r3]
 8000ad0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ada:	1d1a      	adds	r2, r3, #4
 8000adc:	663a      	str	r2, [r7, #96]	; 0x60
 8000ade:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aec:	3b01      	subs	r3, #1
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1e4      	bne.n	8000ac0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000afa:	e017      	b.n	8000b2c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b04:	1d1a      	adds	r2, r3, #4
 8000b06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000b08:	ed93 7a00 	vldr	s14, [r3]
 8000b0c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b16:	1d1a      	adds	r2, r3, #4
 8000b18:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000b1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b22:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1e4      	bne.n	8000afc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b38:	4413      	add	r3, r2
 8000b3a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b44:	3301      	adds	r3, #1
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d19b      	bne.n	8000a86 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b50:	3304      	adds	r3, #4
 8000b52:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b56:	3b01      	subs	r3, #1
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f47f ae51 	bne.w	800080a <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d02d      	beq.n	8000bd0 <arm_mat_inverse_f32+0x460>
 8000b74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b80:	d126      	bne.n	8000bd0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8c:	e00d      	b.n	8000baa <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b94:	4413      	add	r3, r2
 8000b96:	edd3 7a00 	vldr	s15, [r3]
 8000b9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba2:	d10a      	bne.n	8000bba <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3ea      	bcc.n	8000b8e <arm_mat_inverse_f32+0x41e>
 8000bb8:	e000      	b.n	8000bbc <arm_mat_inverse_f32+0x44c>
            break;
 8000bba:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d102      	bne.n	8000bd0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000bca:	23fb      	movs	r3, #251	; 0xfb
 8000bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	376c      	adds	r7, #108	; 0x6c
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b095      	sub	sp, #84	; 0x54
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	885b      	ldrh	r3, [r3, #2]
 8000c0e:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	885b      	ldrh	r3, [r3, #2]
 8000c14:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000c16:	2300      	movs	r3, #0
 8000c18:	873b      	strh	r3, [r7, #56]	; 0x38
 8000c1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c1c:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000c1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c24:	4413      	add	r3, r2
 8000c26:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c2a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c46:	e061      	b.n	8000d0c <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c54:	4413      	add	r3, r2
 8000c56:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c64:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c68:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c70:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c88:	4413      	add	r3, r2
 8000c8a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c98:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000caa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cb0:	4413      	add	r3, r2
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000cc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000cc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ccc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ce4:	4413      	add	r3, r2
 8000ce6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000ce8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d02:	3310      	adds	r3, #16
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000d06:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d19a      	bne.n	8000c48 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000d1a:	e017      	b.n	8000d4c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d1e:	1d1a      	adds	r2, r3, #4
 8000d20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d22:	ed93 7a00 	vldr	s14, [r3]
 8000d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d28:	edd3 7a00 	vldr	s15, [r3]
 8000d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d30:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d38:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d42:	4413      	add	r3, r2
 8000d44:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d4c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1e4      	bne.n	8000d1c <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d54:	1d1a      	adds	r2, r3, #4
 8000d56:	643a      	str	r2, [r7, #64]	; 0x40
 8000d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d5a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d5e:	3301      	adds	r3, #1
 8000d60:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d70:	3b01      	subs	r3, #1
 8000d72:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af5d 	bne.w	8000c36 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d7c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d80:	4413      	add	r3, r2
 8000d82:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d8a:	4413      	add	r3, r2
 8000d8c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d90:	3b01      	subs	r3, #1
 8000d92:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f47f af41 	bne.w	8000c1e <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000da2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3754      	adds	r7, #84	; 0x54
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b091      	sub	sp, #68	; 0x44
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	885b      	ldrh	r3, [r3, #2]
 8000dda:	fb03 f302 	mul.w	r3, r3, r2
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000de6:	e052      	b.n	8000e8e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dfa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e06:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e16:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e22:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e34:	3304      	adds	r3, #4
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e46:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e52:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e56:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e62:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3308      	adds	r3, #8
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e70:	330c      	adds	r3, #12
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e78:	3310      	adds	r3, #16
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e7e:	3310      	adds	r3, #16
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e84:	3310      	adds	r3, #16
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1a9      	bne.n	8000de8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e9c:	e013      	b.n	8000ec6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea0:	1d1a      	adds	r2, r3, #4
 8000ea2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000ea4:	ed93 7a00 	vldr	s14, [r3]
 8000ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eaa:	1d1a      	adds	r2, r3, #4
 8000eac:	63ba      	str	r2, [r7, #56]	; 0x38
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb4:	1d1a      	adds	r2, r3, #4
 8000eb6:	637a      	str	r2, [r7, #52]	; 0x34
 8000eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ebc:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e8      	bne.n	8000e9e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000ed2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3744      	adds	r7, #68	; 0x44
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b08b      	sub	sp, #44	; 0x2c
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	885b      	ldrh	r3, [r3, #2]
 8000f02:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000f04:	2300      	movs	r3, #0
 8000f06:	83bb      	strh	r3, [r7, #28]
 8000f08:	8a7b      	ldrh	r3, [r7, #18]
 8000f0a:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000f0c:	8a3b      	ldrh	r3, [r7, #16]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000f12:	8bbb      	ldrh	r3, [r7, #28]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4413      	add	r3, r2
 8000f1a:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000f1c:	e02e      	b.n	8000f7c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	1d1a      	adds	r2, r3, #4
 8000f22:	627a      	str	r2, [r7, #36]	; 0x24
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f2a:	8a7b      	ldrh	r3, [r7, #18]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	6a3a      	ldr	r2, [r7, #32]
 8000f30:	4413      	add	r3, r2
 8000f32:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	1d1a      	adds	r2, r3, #4
 8000f38:	627a      	str	r2, [r7, #36]	; 0x24
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f40:	8a7b      	ldrh	r3, [r7, #18]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	6a3a      	ldr	r2, [r7, #32]
 8000f46:	4413      	add	r3, r2
 8000f48:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	1d1a      	adds	r2, r3, #4
 8000f4e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f56:	8a7b      	ldrh	r3, [r7, #18]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	6a3a      	ldr	r2, [r7, #32]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	1d1a      	adds	r2, r3, #4
 8000f64:	627a      	str	r2, [r7, #36]	; 0x24
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f6c:	8a7b      	ldrh	r3, [r7, #18]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	6a3a      	ldr	r2, [r7, #32]
 8000f72:	4413      	add	r3, r2
 8000f74:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f76:	8bfb      	ldrh	r3, [r7, #30]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f7c:	8bfb      	ldrh	r3, [r7, #30]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1cd      	bne.n	8000f1e <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f82:	8a3b      	ldrh	r3, [r7, #16]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f8a:	e00d      	b.n	8000fa8 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	1d1a      	adds	r2, r3, #4
 8000f90:	627a      	str	r2, [r7, #36]	; 0x24
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f98:	8a7b      	ldrh	r3, [r7, #18]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	6a3a      	ldr	r2, [r7, #32]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000fa2:	8bfb      	ldrh	r3, [r7, #30]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000fa8:	8bfb      	ldrh	r3, [r7, #30]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ee      	bne.n	8000f8c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000fae:	8bbb      	ldrh	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000fb4:	8b7b      	ldrh	r3, [r7, #26]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000fba:	8b7b      	ldrh	r3, [r7, #26]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1a5      	bne.n	8000f0c <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	372c      	adds	r7, #44	; 0x2c
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 fcd6 	bl	800198a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f007 fe96 	bl	8008d10 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f007 fe6c 	bl	8008cc0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000000 	.word	0x20000000
 8001014:	200019b4 	.word	0x200019b4

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200019b4 	.word	0x200019b4

08001030 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e031      	b.n	80010aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 fda6 	bl	8007ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	2b00      	cmp	r3, #0
 800106c:	d116      	bne.n	800109c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_ADC_Init+0x84>)
 8001074:	4013      	ands	r3, r2
 8001076:	f043 0202 	orr.w	r2, r3, #2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fa5a 	bl	8001538 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f023 0303 	bic.w	r3, r3, #3
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
 800109a:	e001      	b.n	80010a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	ffffeefd 	.word	0xffffeefd

080010b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x1e>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e0c7      	b.n	8001266 <HAL_ADC_Start_DMA+0x1ae>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d018      	beq.n	800111e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010fc:	4b5c      	ldr	r3, [pc, #368]	; (8001270 <HAL_ADC_Start_DMA+0x1b8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a5c      	ldr	r2, [pc, #368]	; (8001274 <HAL_ADC_Start_DMA+0x1bc>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9a      	lsrs	r2, r3, #18
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001110:	e002      	b.n	8001118 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3b01      	subs	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f9      	bne.n	8001112 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b01      	cmp	r3, #1
 800112a:	f040 809b 	bne.w	8001264 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001132:	4b51      	ldr	r3, [pc, #324]	; (8001278 <HAL_ADC_Start_DMA+0x1c0>)
 8001134:	4013      	ands	r3, r2
 8001136:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001154:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001168:	d106      	bne.n	8001178 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f023 0206 	bic.w	r2, r3, #6
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
 8001176:	e002      	b.n	800117e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118a:	4a3c      	ldr	r2, [pc, #240]	; (800127c <HAL_ADC_Start_DMA+0x1c4>)
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001192:	4a3b      	ldr	r2, [pc, #236]	; (8001280 <HAL_ADC_Start_DMA+0x1c8>)
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <HAL_ADC_Start_DMA+0x1cc>)
 800119c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	334c      	adds	r3, #76	; 0x4c
 80011d2:	4619      	mov	r1, r3
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f000 fcba 	bl	8001b50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_ADC_Start_DMA+0x1d0>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10f      	bne.n	8001208 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d136      	bne.n	8001264 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	e02d      	b.n	8001264 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1f      	ldr	r2, [pc, #124]	; (800128c <HAL_ADC_Start_DMA+0x1d4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10e      	bne.n	8001230 <HAL_ADC_Start_DMA+0x178>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800122e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_ADC_Start_DMA+0x1d0>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d113      	bne.n	8001264 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a13      	ldr	r2, [pc, #76]	; (8001290 <HAL_ADC_Start_DMA+0x1d8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10e      	bne.n	8001264 <HAL_ADC_Start_DMA+0x1ac>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d107      	bne.n	8001264 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001262:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	431bde83 	.word	0x431bde83
 8001278:	fffff8fe 	.word	0xfffff8fe
 800127c:	0800172d 	.word	0x0800172d
 8001280:	080017e7 	.word	0x080017e7
 8001284:	08001803 	.word	0x08001803
 8001288:	40012300 	.word	0x40012300
 800128c:	40012000 	.word	0x40012000
 8001290:	40012200 	.word	0x40012200

08001294 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x1c>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e115      	b.n	8001518 <HAL_ADC_ConfigChannel+0x248>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	d935      	bls.n	8001368 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68d9      	ldr	r1, [r3, #12]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	3b1e      	subs	r3, #30
 8001312:	2207      	movs	r2, #7
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43da      	mvns	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	400a      	ands	r2, r1
 8001320:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7f      	ldr	r2, [pc, #508]	; (8001524 <HAL_ADC_ConfigChannel+0x254>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d10a      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68d9      	ldr	r1, [r3, #12]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	061a      	lsls	r2, r3, #24
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	e035      	b.n	80013ae <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68d9      	ldr	r1, [r3, #12]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	4603      	mov	r3, r0
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4403      	add	r3, r0
 800135a:	3b1e      	subs	r3, #30
 800135c:	409a      	lsls	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	e022      	b.n	80013ae <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6919      	ldr	r1, [r3, #16]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	2207      	movs	r2, #7
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6919      	ldr	r1, [r3, #16]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	4603      	mov	r3, r0
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4403      	add	r3, r0
 80013a4:	409a      	lsls	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d824      	bhi.n	8001400 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3b05      	subs	r3, #5
 80013c8:	221f      	movs	r2, #31
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	400a      	ands	r2, r1
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	3b05      	subs	r3, #5
 80013f2:	fa00 f203 	lsl.w	r2, r0, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
 80013fe:	e04c      	b.n	800149a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	d824      	bhi.n	8001452 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b23      	subs	r3, #35	; 0x23
 800141a:	221f      	movs	r2, #31
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43da      	mvns	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	400a      	ands	r2, r1
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b23      	subs	r3, #35	; 0x23
 8001444:	fa00 f203 	lsl.w	r2, r0, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
 8001450:	e023      	b.n	800149a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b41      	subs	r3, #65	; 0x41
 8001464:	221f      	movs	r2, #31
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	400a      	ands	r2, r1
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b41      	subs	r3, #65	; 0x41
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a22      	ldr	r2, [pc, #136]	; (8001528 <HAL_ADC_ConfigChannel+0x258>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d109      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1e8>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b12      	cmp	r3, #18
 80014aa:	d105      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_ADC_ConfigChannel+0x25c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_ADC_ConfigChannel+0x25c>)
 80014b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <HAL_ADC_ConfigChannel+0x258>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d125      	bne.n	800150e <HAL_ADC_ConfigChannel+0x23e>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_ADC_ConfigChannel+0x254>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d003      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x204>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b11      	cmp	r3, #17
 80014d2:	d11c      	bne.n	800150e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_ADC_ConfigChannel+0x25c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_ADC_ConfigChannel+0x25c>)
 80014da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014de:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_ADC_ConfigChannel+0x254>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d111      	bne.n	800150e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_ADC_ConfigChannel+0x260>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_ADC_ConfigChannel+0x264>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	0c9a      	lsrs	r2, r3, #18
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001500:	e002      	b.n	8001508 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3b01      	subs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f9      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	10000012 	.word	0x10000012
 8001528:	40012000 	.word	0x40012000
 800152c:	40012300 	.word	0x40012300
 8001530:	20000008 	.word	0x20000008
 8001534:	431bde83 	.word	0x431bde83

08001538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001540:	4b78      	ldr	r3, [pc, #480]	; (8001724 <ADC_Init+0x1ec>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a77      	ldr	r2, [pc, #476]	; (8001724 <ADC_Init+0x1ec>)
 8001546:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800154a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800154c:	4b75      	ldr	r3, [pc, #468]	; (8001724 <ADC_Init+0x1ec>)
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4973      	ldr	r1, [pc, #460]	; (8001724 <ADC_Init+0x1ec>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	021a      	lsls	r2, r3, #8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800158c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6899      	ldr	r1, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	4a58      	ldr	r2, [pc, #352]	; (8001728 <ADC_Init+0x1f0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d022      	beq.n	8001612 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6899      	ldr	r1, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6899      	ldr	r1, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	e00f      	b.n	8001632 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001630:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0202 	bic.w	r2, r2, #2
 8001640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6899      	ldr	r1, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	005a      	lsls	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01b      	beq.n	8001698 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800166e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800167e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	3b01      	subs	r3, #1
 800168c:	035a      	lsls	r2, r3, #13
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	e007      	b.n	80016a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	051a      	lsls	r2, r3, #20
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016ea:	025a      	lsls	r2, r3, #9
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	029a      	lsls	r2, r3, #10
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	609a      	str	r2, [r3, #8]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40012300 	.word	0x40012300
 8001728:	0f000001 	.word	0x0f000001

0800172c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001738:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001742:	2b00      	cmp	r3, #0
 8001744:	d13c      	bne.n	80017c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d12b      	bne.n	80017b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001764:	2b00      	cmp	r3, #0
 8001766:	d127      	bne.n	80017b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001780:	2b00      	cmp	r3, #0
 8001782:	d119      	bne.n	80017b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0220 	bic.w	r2, r2, #32
 8001792:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff fd6b 	bl	8001294 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017be:	e00e      	b.n	80017de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7ff fd75 	bl	80012bc <HAL_ADC_ErrorCallback>
}
 80017d2:	e004      	b.n	80017de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7ff fd57 	bl	80012a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f043 0204 	orr.w	r2, r3, #4
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fd4a 	bl	80012bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <__NVIC_SetPriorityGrouping+0x40>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	4313      	orrs	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x40>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	05fa0000 	.word	0x05fa0000

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ff4c 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b2:	f7ff ff61 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	f7ff ffb1 	bl	8001924 <NVIC_EncodePriority>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff80 	bl	80018d0 <__NVIC_SetPriority>
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff54 	bl	8001894 <__NVIC_EnableIRQ>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff fb0a 	bl	8001018 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e099      	b.n	8001b44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a30:	e00f      	b.n	8001a52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a32:	f7ff faf1 	bl	8001018 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d908      	bls.n	8001a52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2203      	movs	r2, #3
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e078      	b.n	8001b44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1e8      	bne.n	8001a32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_DMA_Init+0x158>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d107      	bne.n	8001abc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f023 0307 	bic.w	r3, r3, #7
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d117      	bne.n	8001b16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00e      	beq.n	8001b16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fb09 	bl	8002110 <DMA_CheckFifoParam>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2240      	movs	r2, #64	; 0x40
 8001b08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b12:	2301      	movs	r3, #1
 8001b14:	e016      	b.n	8001b44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fac0 	bl	80020a4 <DMA_CalcBaseAndBitshift>
 8001b24:	4603      	mov	r3, r0
 8001b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	223f      	movs	r2, #63	; 0x3f
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	e010803f 	.word	0xe010803f

08001b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_DMA_Start_IT+0x26>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e048      	b.n	8001c08 <HAL_DMA_Start_IT+0xb8>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d137      	bne.n	8001bfa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa52 	bl	8002048 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	223f      	movs	r2, #63	; 0x3f
 8001baa:	409a      	lsls	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0216 	orr.w	r2, r2, #22
 8001bbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0208 	orr.w	r2, r2, #8
 8001be6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e005      	b.n	8001c06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
 8001c04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c1e:	f7ff f9fb 	bl	8001018 <HAL_GetTick>
 8001c22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d008      	beq.n	8001c42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e052      	b.n	8001ce8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0216 	bic.w	r2, r2, #22
 8001c50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <HAL_DMA_Abort+0x62>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0208 	bic.w	r2, r2, #8
 8001c80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c92:	e013      	b.n	8001cbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c94:	f7ff f9c0 	bl	8001018 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d90c      	bls.n	8001cbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e015      	b.n	8001ce8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1e4      	bne.n	8001c94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	223f      	movs	r2, #63	; 0x3f
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d004      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00c      	b.n	8001d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2205      	movs	r2, #5
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d40:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_DMA_IRQHandler+0x258>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_DMA_IRQHandler+0x25c>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2208      	movs	r2, #8
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2201      	movs	r2, #1
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2204      	movs	r2, #4
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2204      	movs	r2, #4
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2210      	movs	r2, #16
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d043      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03c      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2210      	movs	r2, #16
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d018      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d024      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e01f      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e016      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 808e 	beq.w	8001fd2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8086 	beq.w	8001fd2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	2220      	movs	r2, #32
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d136      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0216 	bic.w	r2, r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x1da>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	223f      	movs	r2, #63	; 0x3f
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d07d      	beq.n	800203e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
        }
        return;
 8001f4a:	e078      	b.n	800203e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01c      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d108      	bne.n	8001f7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d030      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e02b      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d027      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
 8001f8a:	e022      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0210 	bic.w	r2, r2, #16
 8001fb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d032      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d022      	beq.n	800202c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2205      	movs	r2, #5
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3301      	adds	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	429a      	cmp	r2, r3
 8002008:	d307      	bcc.n	800201a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f2      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x2ca>
 8002018:	e000      	b.n	800201c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800201a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e000      	b.n	8002040 <HAL_DMA_IRQHandler+0x30c>
        return;
 800203e:	bf00      	nop
    }
  }
}
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop

08002048 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002064:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	d108      	bne.n	8002088 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002086:	e007      	b.n	8002098 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3b10      	subs	r3, #16
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <DMA_CalcBaseAndBitshift+0x60>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <DMA_CalcBaseAndBitshift+0x64>)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d908      	bls.n	80020e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <DMA_CalcBaseAndBitshift+0x68>)
 80020da:	4013      	ands	r3, r2
 80020dc:	1d1a      	adds	r2, r3, #4
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	659a      	str	r2, [r3, #88]	; 0x58
 80020e2:	e006      	b.n	80020f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <DMA_CalcBaseAndBitshift+0x68>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	aaaaaaab 	.word	0xaaaaaaab
 8002108:	0801465c 	.word	0x0801465c
 800210c:	fffffc00 	.word	0xfffffc00

08002110 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11f      	bne.n	800216a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d855      	bhi.n	80021dc <DMA_CheckFifoParam+0xcc>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <DMA_CheckFifoParam+0x28>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002149 	.word	0x08002149
 800213c:	0800215b 	.word	0x0800215b
 8002140:	08002149 	.word	0x08002149
 8002144:	080021dd 	.word	0x080021dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d045      	beq.n	80021e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002158:	e042      	b.n	80021e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002162:	d13f      	bne.n	80021e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002168:	e03c      	b.n	80021e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002172:	d121      	bne.n	80021b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d836      	bhi.n	80021e8 <DMA_CheckFifoParam+0xd8>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <DMA_CheckFifoParam+0x70>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002191 	.word	0x08002191
 8002184:	08002197 	.word	0x08002197
 8002188:	08002191 	.word	0x08002191
 800218c:	080021a9 	.word	0x080021a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e02f      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d024      	beq.n	80021ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a6:	e021      	b.n	80021ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b0:	d11e      	bne.n	80021f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021b6:	e01b      	b.n	80021f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d902      	bls.n	80021c4 <DMA_CheckFifoParam+0xb4>
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d003      	beq.n	80021ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021c2:	e018      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
      break;
 80021c8:	e015      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00e      	beq.n	80021f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      break;
 80021da:	e00b      	b.n	80021f4 <DMA_CheckFifoParam+0xe4>
      break;
 80021dc:	bf00      	nop
 80021de:	e00a      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021e0:	bf00      	nop
 80021e2:	e008      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021e4:	bf00      	nop
 80021e6:	e006      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021e8:	bf00      	nop
 80021ea:	e004      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021ec:	bf00      	nop
 80021ee:	e002      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80021f0:	bf00      	nop
 80021f2:	e000      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021f4:	bf00      	nop
    }
  } 
  
  return status; 
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e175      	b.n	8002510 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8164 	bne.w	800250a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x4e>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b12      	cmp	r3, #18
 8002250:	d123      	bne.n	800229a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	69b9      	ldr	r1, [r7, #24]
 8002296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0203 	and.w	r2, r3, #3
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d00b      	beq.n	80022ee <HAL_GPIO_Init+0xea>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e2:	2b11      	cmp	r3, #17
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b12      	cmp	r3, #18
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80be 	beq.w	800250a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	4b65      	ldr	r3, [pc, #404]	; (8002524 <HAL_GPIO_Init+0x320>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a64      	ldr	r2, [pc, #400]	; (8002524 <HAL_GPIO_Init+0x320>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b62      	ldr	r3, [pc, #392]	; (8002524 <HAL_GPIO_Init+0x320>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023a6:	4a60      	ldr	r2, [pc, #384]	; (8002528 <HAL_GPIO_Init+0x324>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_GPIO_Init+0x328>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d037      	beq.n	8002442 <HAL_GPIO_Init+0x23e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a56      	ldr	r2, [pc, #344]	; (8002530 <HAL_GPIO_Init+0x32c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d031      	beq.n	800243e <HAL_GPIO_Init+0x23a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a55      	ldr	r2, [pc, #340]	; (8002534 <HAL_GPIO_Init+0x330>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02b      	beq.n	800243a <HAL_GPIO_Init+0x236>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_GPIO_Init+0x334>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d025      	beq.n	8002436 <HAL_GPIO_Init+0x232>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a53      	ldr	r2, [pc, #332]	; (800253c <HAL_GPIO_Init+0x338>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x22e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_GPIO_Init+0x33c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x22a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a51      	ldr	r2, [pc, #324]	; (8002544 <HAL_GPIO_Init+0x340>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x226>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <HAL_GPIO_Init+0x344>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x222>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4f      	ldr	r2, [pc, #316]	; (800254c <HAL_GPIO_Init+0x348>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x21e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <HAL_GPIO_Init+0x34c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x21a>
 800241a:	2309      	movs	r3, #9
 800241c:	e012      	b.n	8002444 <HAL_GPIO_Init+0x240>
 800241e:	230a      	movs	r3, #10
 8002420:	e010      	b.n	8002444 <HAL_GPIO_Init+0x240>
 8002422:	2308      	movs	r3, #8
 8002424:	e00e      	b.n	8002444 <HAL_GPIO_Init+0x240>
 8002426:	2307      	movs	r3, #7
 8002428:	e00c      	b.n	8002444 <HAL_GPIO_Init+0x240>
 800242a:	2306      	movs	r3, #6
 800242c:	e00a      	b.n	8002444 <HAL_GPIO_Init+0x240>
 800242e:	2305      	movs	r3, #5
 8002430:	e008      	b.n	8002444 <HAL_GPIO_Init+0x240>
 8002432:	2304      	movs	r3, #4
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x240>
 8002436:	2303      	movs	r3, #3
 8002438:	e004      	b.n	8002444 <HAL_GPIO_Init+0x240>
 800243a:	2302      	movs	r3, #2
 800243c:	e002      	b.n	8002444 <HAL_GPIO_Init+0x240>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x240>
 8002442:	2300      	movs	r3, #0
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f002 0203 	and.w	r2, r2, #3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4093      	lsls	r3, r2
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002454:	4934      	ldr	r1, [pc, #208]	; (8002528 <HAL_GPIO_Init+0x324>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <HAL_GPIO_Init+0x350>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002486:	4a33      	ldr	r2, [pc, #204]	; (8002554 <HAL_GPIO_Init+0x350>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800248c:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_GPIO_Init+0x350>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b0:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_GPIO_Init+0x350>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b6:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_GPIO_Init+0x350>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_GPIO_Init+0x350>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_GPIO_Init+0x350>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002504:	4a13      	ldr	r2, [pc, #76]	; (8002554 <HAL_GPIO_Init+0x350>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	f67f ae86 	bls.w	8002224 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002518:	bf00      	nop
 800251a:	3724      	adds	r7, #36	; 0x24
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40021c00 	.word	0x40021c00
 800254c:	40022000 	.word	0x40022000
 8002550:	40022400 	.word	0x40022400
 8002554:	40013c00 	.word	0x40013c00

08002558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002568:	787b      	ldrb	r3, [r7, #1]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002574:	e003      	b.n	800257e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002576:	887b      	ldrh	r3, [r7, #2]
 8002578:	041a      	lsls	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f005 fff6 	bl	800859c <HAL_GPIO_EXTI_Callback>
  }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40013c00 	.word	0x40013c00

080025bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07f      	b.n	80026ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f005 fe18 	bl	8008218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	; 0x24
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800260c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800261c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e006      	b.n	8002644 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002642:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d104      	bne.n	8002656 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_I2C_Init+0x11c>)
 8002662:	430b      	orrs	r3, r1
 8002664:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	ea42 0103 	orr.w	r1, r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	021a      	lsls	r2, r3, #8
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69d9      	ldr	r1, [r3, #28]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	02008000 	.word	0x02008000

080026dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d138      	bne.n	8002764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e032      	b.n	8002766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2224      	movs	r2, #36	; 0x24
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800272e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b20      	cmp	r3, #32
 8002786:	d139      	bne.n	80027fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002792:	2302      	movs	r3, #2
 8002794:	e033      	b.n	80027fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2224      	movs	r2, #36	; 0x24
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283a:	f7fe fbed 	bl	8001018 <HAL_GetTick>
 800283e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002840:	e009      	b.n	8002856 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002842:	f7fe fbe9 	bl	8001018 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002850:	d901      	bls.n	8002856 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e022      	b.n	800289c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002862:	d1ee      	bne.n	8002842 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800286a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002870:	f7fe fbd2 	bl	8001018 <HAL_GetTick>
 8002874:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002876:	e009      	b.n	800288c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002878:	f7fe fbce 	bl	8001018 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002886:	d901      	bls.n	800288c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e007      	b.n	800289c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002898:	d1ee      	bne.n	8002878 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40007000 	.word	0x40007000

080028ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e25e      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d0:	4b96      	ldr	r3, [pc, #600]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d00c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028dc:	4b93      	ldr	r3, [pc, #588]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d112      	bne.n	800290e <HAL_RCC_OscConfig+0x62>
 80028e8:	4b90      	ldr	r3, [pc, #576]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f4:	d10b      	bne.n	800290e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f6:	4b8d      	ldr	r3, [pc, #564]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d06c      	beq.n	80029dc <HAL_RCC_OscConfig+0x130>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d168      	bne.n	80029dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e238      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x7a>
 8002918:	4b84      	ldr	r3, [pc, #528]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a83      	ldr	r2, [pc, #524]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e02e      	b.n	8002984 <HAL_RCC_OscConfig+0xd8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x9c>
 800292e:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7e      	ldr	r2, [pc, #504]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b7c      	ldr	r3, [pc, #496]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7b      	ldr	r2, [pc, #492]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e01d      	b.n	8002984 <HAL_RCC_OscConfig+0xd8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0xc0>
 8002952:	4b76      	ldr	r3, [pc, #472]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a75      	ldr	r2, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b73      	ldr	r3, [pc, #460]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a72      	ldr	r2, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xd8>
 800296c:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b6c      	ldr	r3, [pc, #432]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6b      	ldr	r2, [pc, #428]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fb44 	bl	8001018 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002994:	f7fe fb40 	bl	8001018 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1ec      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xe8>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fb30 	bl	8001018 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fb2c 	bl	8001018 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1d8      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x110>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d069      	beq.n	8002abe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ea:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x190>
 8002a02:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1ac      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	493d      	ldr	r1, [pc, #244]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e040      	b.n	8002abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d023      	beq.n	8002a8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a38      	ldr	r2, [pc, #224]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fae2 	bl	8001018 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fade 	bl	8001018 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e18a      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4929      	ldr	r1, [pc, #164]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
 8002a8a:	e018      	b.n	8002abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8c:	4b27      	ldr	r3, [pc, #156]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a26      	ldr	r2, [pc, #152]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fabe 	bl	8001018 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe faba 	bl	8001018 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e166      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d038      	beq.n	8002b3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d019      	beq.n	8002b06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe fa9b 	bl	8001018 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fa97 	bl	8001018 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e143      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x23a>
 8002b04:	e01a      	b.n	8002b3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_RCC_OscConfig+0x280>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7fe fa81 	bl	8001018 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fa7d 	bl	8001018 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d903      	bls.n	8002b30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e129      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
 8002b2c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b30:	4b95      	ldr	r3, [pc, #596]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ee      	bne.n	8002b1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a4 	beq.w	8002c92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b8f      	ldr	r3, [pc, #572]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b8c      	ldr	r3, [pc, #560]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a8b      	ldr	r2, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b89      	ldr	r3, [pc, #548]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b72:	4b86      	ldr	r3, [pc, #536]	; (8002d8c <HAL_RCC_OscConfig+0x4e0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b7e:	4b83      	ldr	r3, [pc, #524]	; (8002d8c <HAL_RCC_OscConfig+0x4e0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a82      	ldr	r2, [pc, #520]	; (8002d8c <HAL_RCC_OscConfig+0x4e0>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fa45 	bl	8001018 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe fa41 	bl	8001018 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	; 0x64
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0ed      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	4b79      	ldr	r3, [pc, #484]	; (8002d8c <HAL_RCC_OscConfig+0x4e0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x31a>
 8002bb8:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a72      	ldr	r2, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	e02d      	b.n	8002c22 <HAL_RCC_OscConfig+0x376>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x33c>
 8002bce:	4b6e      	ldr	r3, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a6d      	ldr	r2, [pc, #436]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	e01c      	b.n	8002c22 <HAL_RCC_OscConfig+0x376>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d10c      	bne.n	8002c0a <HAL_RCC_OscConfig+0x35e>
 8002bf0:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	4a64      	ldr	r2, [pc, #400]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002bf6:	f043 0304 	orr.w	r3, r3, #4
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfc:	4b62      	ldr	r3, [pc, #392]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a61      	ldr	r2, [pc, #388]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	e00b      	b.n	8002c22 <HAL_RCC_OscConfig+0x376>
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a5e      	ldr	r2, [pc, #376]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
 8002c16:	4b5c      	ldr	r3, [pc, #368]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a5b      	ldr	r2, [pc, #364]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c1c:	f023 0304 	bic.w	r3, r3, #4
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d015      	beq.n	8002c56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7fe f9f5 	bl	8001018 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f7fe f9f1 	bl	8001018 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e09b      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c48:	4b4f      	ldr	r3, [pc, #316]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0ee      	beq.n	8002c32 <HAL_RCC_OscConfig+0x386>
 8002c54:	e014      	b.n	8002c80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe f9df 	bl	8001018 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe f9db 	bl	8001018 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e085      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c74:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c86:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a3f      	ldr	r2, [pc, #252]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d071      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d069      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d14b      	bne.n	8002d46 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a35      	ldr	r2, [pc, #212]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe f9ad 	bl	8001018 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe f9a9 	bl	8001018 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e055      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd4:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	019b      	lsls	r3, r3, #6
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	071b      	lsls	r3, r3, #28
 8002d0c:	491e      	ldr	r1, [pc, #120]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe f97b 	bl	8001018 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fe f977 	bl	8001018 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e023      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x47a>
 8002d44:	e01b      	b.n	8002d7e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe f961 	bl	8001018 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe f95d 	bl	8001018 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e009      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_RCC_OscConfig+0x4dc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x4ae>
 8002d78:	e001      	b.n	8002d7e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40007000 	.word	0x40007000

08002d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0ce      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b69      	ldr	r3, [pc, #420]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	4964      	ldr	r1, [pc, #400]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0b6      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df0:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e08:	4b52      	ldr	r3, [pc, #328]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b4f      	ldr	r3, [pc, #316]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	494c      	ldr	r1, [pc, #304]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d040      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b46      	ldr	r3, [pc, #280]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d115      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07d      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b40      	ldr	r3, [pc, #256]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e071      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	4b3c      	ldr	r3, [pc, #240]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e069      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e72:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4935      	ldr	r1, [pc, #212]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e84:	f7fe f8c8 	bl	8001018 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f7fe f8c4 	bl	8001018 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e051      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 020c 	and.w	r2, r3, #12
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1eb      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d210      	bcs.n	8002ee4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 020f 	bic.w	r2, r3, #15
 8002eca:	4921      	ldr	r1, [pc, #132]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e030      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4915      	ldr	r1, [pc, #84]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	490d      	ldr	r1, [pc, #52]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f22:	f000 f81d 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002f26:	4601      	mov	r1, r0
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
 8002f36:	fa21 f303 	lsr.w	r3, r1, r3
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_RCC_ClockConfig+0x1cc>)
 8002f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f005 fee6 	bl	8008d10 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08014664 	.word	0x08014664
 8002f5c:	20000008 	.word	0x20000008

08002f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f76:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d007      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x32>
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d008      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x38>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 808d 	bne.w	80030a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f8e:	60bb      	str	r3, [r7, #8]
       break;
 8002f90:	e08c      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f92:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f94:	60bb      	str	r3, [r7, #8]
      break;
 8002f96:	e089      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f98:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fa2:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d023      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fae:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	f04f 0400 	mov.w	r4, #0
 8002fb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	ea03 0501 	and.w	r5, r3, r1
 8002fc4:	ea04 0602 	and.w	r6, r4, r2
 8002fc8:	4a3d      	ldr	r2, [pc, #244]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fca:	fb02 f106 	mul.w	r1, r2, r6
 8002fce:	2200      	movs	r2, #0
 8002fd0:	fb02 f205 	mul.w	r2, r2, r5
 8002fd4:	440a      	add	r2, r1
 8002fd6:	493a      	ldr	r1, [pc, #232]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fd8:	fba5 0101 	umull	r0, r1, r5, r1
 8002fdc:	1853      	adds	r3, r2, r1
 8002fde:	4619      	mov	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4623      	mov	r3, r4
 8002fea:	f7fd f991 	bl	8000310 <__aeabi_uldivmod>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e049      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff6:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	f04f 0400 	mov.w	r4, #0
 8003000:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	ea03 0501 	and.w	r5, r3, r1
 800300c:	ea04 0602 	and.w	r6, r4, r2
 8003010:	4629      	mov	r1, r5
 8003012:	4632      	mov	r2, r6
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	f04f 0400 	mov.w	r4, #0
 800301c:	0154      	lsls	r4, r2, #5
 800301e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003022:	014b      	lsls	r3, r1, #5
 8003024:	4619      	mov	r1, r3
 8003026:	4622      	mov	r2, r4
 8003028:	1b49      	subs	r1, r1, r5
 800302a:	eb62 0206 	sbc.w	r2, r2, r6
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	f04f 0400 	mov.w	r4, #0
 8003036:	0194      	lsls	r4, r2, #6
 8003038:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800303c:	018b      	lsls	r3, r1, #6
 800303e:	1a5b      	subs	r3, r3, r1
 8003040:	eb64 0402 	sbc.w	r4, r4, r2
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	00e2      	lsls	r2, r4, #3
 800304e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003052:	00d9      	lsls	r1, r3, #3
 8003054:	460b      	mov	r3, r1
 8003056:	4614      	mov	r4, r2
 8003058:	195b      	adds	r3, r3, r5
 800305a:	eb44 0406 	adc.w	r4, r4, r6
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	02a2      	lsls	r2, r4, #10
 8003068:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800306c:	0299      	lsls	r1, r3, #10
 800306e:	460b      	mov	r3, r1
 8003070:	4614      	mov	r4, r2
 8003072:	4618      	mov	r0, r3
 8003074:	4621      	mov	r1, r4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f04f 0400 	mov.w	r4, #0
 800307c:	461a      	mov	r2, r3
 800307e:	4623      	mov	r3, r4
 8003080:	f7fd f946 	bl	8000310 <__aeabi_uldivmod>
 8003084:	4603      	mov	r3, r0
 8003086:	460c      	mov	r4, r1
 8003088:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	3301      	adds	r3, #1
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	60bb      	str	r3, [r7, #8]
      break;
 80030a4:	e002      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80030a8:	60bb      	str	r3, [r7, #8]
      break;
 80030aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ac:	68bb      	ldr	r3, [r7, #8]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	017d7840 	.word	0x017d7840

080030c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000008 	.word	0x20000008

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e4:	4601      	mov	r1, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4a03      	ldr	r2, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	08014674 	.word	0x08014674

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003108:	f7ff ffdc 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 800310c:	4601      	mov	r1, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0b5b      	lsrs	r3, r3, #13
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4a03      	ldr	r2, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	08014674 	.word	0x08014674

0800312c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	220f      	movs	r2, #15
 800313a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCC_GetClockConfig+0x60>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 020f 	and.w	r2, r3, #15
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	40023c00 	.word	0x40023c00

08003190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031b8:	4b69      	ldr	r3, [pc, #420]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a68      	ldr	r2, [pc, #416]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031c2:	6093      	str	r3, [r2, #8]
 80031c4:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	4964      	ldr	r1, [pc, #400]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d017      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ea:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	4959      	ldr	r1, [pc, #356]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003208:	d101      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800320a:	2301      	movs	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d017      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003226:	4b4e      	ldr	r3, [pc, #312]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800322c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	494a      	ldr	r1, [pc, #296]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003244:	d101      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 808b 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a39      	ldr	r2, [pc, #228]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
 8003280:	4b37      	ldr	r3, [pc, #220]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800328c:	4b35      	ldr	r3, [pc, #212]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a34      	ldr	r2, [pc, #208]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003298:	f7fd febe 	bl	8001018 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fd feba 	bl	8001018 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e38d      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032be:	4b28      	ldr	r3, [pc, #160]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d035      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d02e      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032dc:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a1a      	ldr	r2, [pc, #104]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032fe:	4a18      	ldr	r2, [pc, #96]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003304:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d114      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fd fe82 	bl	8001018 <HAL_GetTick>
 8003314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	e00a      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fd fe7e 	bl	8001018 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e34f      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332e:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0ee      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003346:	d111      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003356:	400b      	ands	r3, r1
 8003358:	4901      	ldr	r1, [pc, #4]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
 800335e:	e00b      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003360:	40023800 	.word	0x40023800
 8003364:	40007000 	.word	0x40007000
 8003368:	0ffffcff 	.word	0x0ffffcff
 800336c:	4bb3      	ldr	r3, [pc, #716]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4ab2      	ldr	r2, [pc, #712]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003372:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003376:	6093      	str	r3, [r2, #8]
 8003378:	4bb0      	ldr	r3, [pc, #704]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	49ad      	ldr	r1, [pc, #692]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003386:	4313      	orrs	r3, r2
 8003388:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003396:	4ba9      	ldr	r3, [pc, #676]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339c:	4aa7      	ldr	r2, [pc, #668]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033a6:	4ba5      	ldr	r3, [pc, #660]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	49a2      	ldr	r1, [pc, #648]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c4:	4b9d      	ldr	r3, [pc, #628]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d2:	499a      	ldr	r1, [pc, #616]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033e6:	4b95      	ldr	r3, [pc, #596]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f4:	4991      	ldr	r1, [pc, #580]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003408:	4b8c      	ldr	r3, [pc, #560]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003416:	4989      	ldr	r1, [pc, #548]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800342a:	4b84      	ldr	r3, [pc, #528]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4980      	ldr	r1, [pc, #512]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800344c:	4b7b      	ldr	r3, [pc, #492]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	4978      	ldr	r1, [pc, #480]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800346e:	4b73      	ldr	r3, [pc, #460]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	f023 020c 	bic.w	r2, r3, #12
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347c:	496f      	ldr	r1, [pc, #444]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003490:	4b6a      	ldr	r3, [pc, #424]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	4967      	ldr	r1, [pc, #412]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b2:	4b62      	ldr	r3, [pc, #392]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c0:	495e      	ldr	r1, [pc, #376]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034d4:	4b59      	ldr	r3, [pc, #356]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	4956      	ldr	r1, [pc, #344]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034f6:	4b51      	ldr	r3, [pc, #324]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	494d      	ldr	r1, [pc, #308]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003518:	4b48      	ldr	r3, [pc, #288]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	4945      	ldr	r1, [pc, #276]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800353a:	4b40      	ldr	r3, [pc, #256]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003548:	493c      	ldr	r1, [pc, #240]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800355c:	4b37      	ldr	r3, [pc, #220]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356a:	4934      	ldr	r1, [pc, #208]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d011      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358c:	492b      	ldr	r1, [pc, #172]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f0:	4912      	ldr	r1, [pc, #72]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003614:	4909      	ldr	r1, [pc, #36]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00f      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800362a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
 8003640:	4985      	ldr	r1, [pc, #532]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00b      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003654:	4b80      	ldr	r3, [pc, #512]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003664:	497c      	ldr	r1, [pc, #496]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d005      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800367a:	f040 80d6 	bne.w	800382a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800367e:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a75      	ldr	r2, [pc, #468]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003684:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368a:	f7fd fcc5 	bl	8001018 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003692:	f7fd fcc1 	bl	8001018 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	; 0x64
 800369e:	d901      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e194      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036a4:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d021      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11d      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036c4:	4b64      	ldr	r3, [pc, #400]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036d2:	4b61      	ldr	r3, [pc, #388]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d8:	0e1b      	lsrs	r3, r3, #24
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	019a      	lsls	r2, r3, #6
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	071b      	lsls	r3, r3, #28
 80036f8:	4957      	ldr	r1, [pc, #348]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02e      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372a:	d129      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800372c:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800373c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003740:	0f1b      	lsrs	r3, r3, #28
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	019a      	lsls	r2, r3, #6
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	431a      	orrs	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	071b      	lsls	r3, r3, #28
 8003760:	493d      	ldr	r1, [pc, #244]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003768:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800376a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376e:	f023 021f 	bic.w	r2, r3, #31
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	3b01      	subs	r3, #1
 8003778:	4937      	ldr	r1, [pc, #220]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01d      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800378c:	4b32      	ldr	r3, [pc, #200]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003792:	0e1b      	lsrs	r3, r3, #24
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800379a:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800379c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a0:	0f1b      	lsrs	r3, r3, #28
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	019a      	lsls	r2, r3, #6
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	431a      	orrs	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	431a      	orrs	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	071b      	lsls	r3, r3, #28
 80037c0:	4925      	ldr	r1, [pc, #148]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d011      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	019a      	lsls	r2, r3, #6
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	071b      	lsls	r3, r3, #28
 80037f0:	4919      	ldr	r1, [pc, #100]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037f8:	4b17      	ldr	r3, [pc, #92]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fd fc08 	bl	8001018 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800380c:	f7fd fc04 	bl	8001018 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0d7      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b01      	cmp	r3, #1
 800382e:	f040 80cd 	bne.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a08      	ldr	r2, [pc, #32]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383e:	f7fd fbeb 	bl	8001018 <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003846:	f7fd fbe7 	bl	8001018 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b64      	cmp	r3, #100	; 0x64
 8003852:	d903      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0ba      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003858:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800385c:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003868:	d0ed      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003886:	2b00      	cmp	r3, #0
 8003888:	d02e      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d12a      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003892:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	0f1b      	lsrs	r3, r3, #28
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	019a      	lsls	r2, r3, #6
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	041b      	lsls	r3, r3, #16
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	061b      	lsls	r3, r3, #24
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	071b      	lsls	r3, r3, #28
 80038c6:	4944      	ldr	r1, [pc, #272]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038ce:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	3b01      	subs	r3, #1
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	493d      	ldr	r1, [pc, #244]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d022      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038fc:	d11d      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	0e1b      	lsrs	r3, r3, #24
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800390c:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	0f1b      	lsrs	r3, r3, #28
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	019a      	lsls	r2, r3, #6
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	431a      	orrs	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	071b      	lsls	r3, r3, #28
 8003932:	4929      	ldr	r1, [pc, #164]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d028      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	0e1b      	lsrs	r3, r3, #24
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	019a      	lsls	r2, r3, #6
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	041b      	lsls	r3, r3, #16
 800396c:	431a      	orrs	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	071b      	lsls	r3, r3, #28
 800397a:	4917      	ldr	r1, [pc, #92]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4911      	ldr	r1, [pc, #68]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a4:	f7fd fb38 	bl	8001018 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039ac:	f7fd fb34 	bl	8001018 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e007      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ca:	d1ef      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e084      	b.n	8003af8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f004 fef1 	bl	80087f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a24:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a2e:	d902      	bls.n	8003a36 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e002      	b.n	8003a3c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a44:	d007      	beq.n	8003a56 <HAL_SPI_Init+0x7a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a4e:	d002      	beq.n	8003a56 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a66:	d903      	bls.n	8003a70 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a6e:	e002      	b.n	8003a76 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	ea42 0103 	orr.w	r1, r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	f003 0204 	and.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x26>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e1fb      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x41e>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b2e:	f7fd fa73 	bl	8001018 <HAL_GetTick>
 8003b32:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b3a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b42:	887b      	ldrh	r3, [r7, #2]
 8003b44:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b4a:	7efb      	ldrb	r3, [r7, #27]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d00e      	beq.n	8003b6e <HAL_SPI_TransmitReceive+0x6e>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b56:	d106      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x66>
 8003b60:	7efb      	ldrb	r3, [r7, #27]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d003      	beq.n	8003b6e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b6c:	e1cd      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x80>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x80>
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b86:	e1c0      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d003      	beq.n	8003b9c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2205      	movs	r2, #5
 8003b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	887a      	ldrh	r2, [r7, #2]
 8003bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bde:	d802      	bhi.n	8003be6 <HAL_SPI_TransmitReceive+0xe6>
 8003be0:	8a3b      	ldrh	r3, [r7, #16]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d908      	bls.n	8003bf8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	e007      	b.n	8003c08 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d007      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c2e:	d97c      	bls.n	8003d2a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x13e>
 8003c38:	8a7b      	ldrh	r3, [r7, #18]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d169      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c62:	e056      	b.n	8003d12 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d11b      	bne.n	8003caa <HAL_SPI_TransmitReceive+0x1aa>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d016      	beq.n	8003caa <HAL_SPI_TransmitReceive+0x1aa>
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d113      	bne.n	8003caa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	1c9a      	adds	r2, r3, #2
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d11c      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x1f2>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d016      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	1c9a      	adds	r2, r3, #2
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cf2:	f7fd f991 	bl	8001018 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d807      	bhi.n	8003d12 <HAL_SPI_TransmitReceive+0x212>
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d003      	beq.n	8003d12 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d10:	e0fb      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1a3      	bne.n	8003c64 <HAL_SPI_TransmitReceive+0x164>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d19d      	bne.n	8003c64 <HAL_SPI_TransmitReceive+0x164>
 8003d28:	e0df      	b.n	8003eea <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x23a>
 8003d32:	8a7b      	ldrh	r3, [r7, #18]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f040 80cb 	bne.w	8003ed0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d912      	bls.n	8003d6a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	881a      	ldrh	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	1c9a      	adds	r2, r3, #2
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b02      	subs	r3, #2
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d68:	e0b2      	b.n	8003ed0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d90:	e09e      	b.n	8003ed0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d134      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x30a>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d02f      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x30a>
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d12c      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d912      	bls.n	8003de0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b02      	subs	r3, #2
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dde:	e012      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d148      	bne.n	8003eaa <HAL_SPI_TransmitReceive+0x3aa>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d042      	beq.n	8003eaa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d923      	bls.n	8003e78 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	b292      	uxth	r2, r2
 8003e3c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b02      	subs	r3, #2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d81f      	bhi.n	8003ea6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	e016      	b.n	8003ea6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f103 020c 	add.w	r2, r3, #12
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003eaa:	f7fd f8b5 	bl	8001018 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d803      	bhi.n	8003ec2 <HAL_SPI_TransmitReceive+0x3c2>
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d102      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x3c8>
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ece:	e01c      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f47f af5b 	bne.w	8003d92 <HAL_SPI_TransmitReceive+0x292>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af54 	bne.w	8003d92 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fcda 	bl	80048a8 <SPI_EndRxTxTransaction>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60
 8003f06:	e000      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3728      	adds	r7, #40	; 0x28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e16c      	b.n	8004222 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f56:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003f5e:	7dbb      	ldrb	r3, [r7, #22]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d00d      	beq.n	8003f80 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6a:	d106      	bne.n	8003f7a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <HAL_SPI_TransmitReceive_DMA+0x52>
 8003f74:	7dbb      	ldrb	r3, [r7, #22]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d002      	beq.n	8003f80 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f7e:	e14b      	b.n	8004218 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f96:	e13f      	b.n	8004218 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d003      	beq.n	8003fac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2205      	movs	r2, #5
 8003fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	887a      	ldrh	r2, [r7, #2]
 8003fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	887a      	ldrh	r2, [r7, #2]
 8003fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003ff4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ffe:	d908      	bls.n	8004012 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	e06f      	b.n	80040f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004020:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402c:	d126      	bne.n	800407c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004048:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404e:	b29b      	uxth	r3, r3
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004058:	e010      	b.n	800407c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004068:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406e:	b29b      	uxth	r3, r3
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	3301      	adds	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004086:	d134      	bne.n	80040f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004096:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d111      	bne.n	80040cc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040be:	b29b      	uxth	r3, r3
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040ca:	e012      	b.n	80040f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d108      	bne.n	8004110 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	4a4a      	ldr	r2, [pc, #296]	; (800422c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4a49      	ldr	r2, [pc, #292]	; (8004230 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c
 800410e:	e007      	b.n	8004120 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	4a47      	ldr	r2, [pc, #284]	; (8004234 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	4a46      	ldr	r2, [pc, #280]	; (8004238 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800411e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	4a45      	ldr	r2, [pc, #276]	; (800423c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8004126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412c:	2200      	movs	r2, #0
 800412e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	4619      	mov	r1, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	461a      	mov	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004148:	b29b      	uxth	r3, r3
 800414a:	f7fd fd01 	bl	8001b50 <HAL_DMA_Start_IT>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004158:	f043 0210 	orr.w	r2, r3, #16
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800416c:	e054      	b.n	8004218 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	2200      	movs	r2, #0
 800418c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	2200      	movs	r2, #0
 8004194:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	2200      	movs	r2, #0
 800419c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	4619      	mov	r1, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f7fd fccb 	bl	8001b50 <HAL_DMA_Start_IT>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c4:	f043 0210 	orr.w	r2, r3, #16
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80041d8:	e01e      	b.n	8004218 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d007      	beq.n	80041f8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0220 	orr.w	r2, r2, #32
 8004206:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0202 	orr.w	r2, r2, #2
 8004216:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	080045a9 	.word	0x080045a9
 8004230:	08004491 	.word	0x08004491
 8004234:	080045c5 	.word	0x080045c5
 8004238:	08004517 	.word	0x08004517
 800423c:	080045e1 	.word	0x080045e1

08004240 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10f      	bne.n	8004284 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	099b      	lsrs	r3, r3, #6
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
    return;
 8004282:	e0d8      	b.n	8004436 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_SPI_IRQHandler+0x66>
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	09db      	lsrs	r3, r3, #7
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
    return;
 80042a4:	e0c7      	b.n	8004436 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_SPI_IRQHandler+0x8c>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_SPI_IRQHandler+0x8c>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80b5 	beq.w	8004436 <HAL_SPI_IRQHandler+0x1f6>
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80ae 	beq.w	8004436 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d023      	beq.n	800432e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d011      	beq.n	8004316 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	f043 0204 	orr.w	r2, r3, #4
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	e00b      	b.n	800432e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	693b      	ldr	r3, [r7, #16]
        return;
 800432c:	e083      	b.n	8004436 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d014      	beq.n	8004364 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433e:	f043 0201 	orr.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004374:	f043 0208 	orr.w	r2, r3, #8
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438e:	2b00      	cmp	r3, #0
 8004390:	d050      	beq.n	8004434 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d104      	bne.n	80043be <HAL_SPI_IRQHandler+0x17e>
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d034      	beq.n	8004428 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0203 	bic.w	r2, r2, #3
 80043cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	4a18      	ldr	r2, [pc, #96]	; (800443c <HAL_SPI_IRQHandler+0x1fc>)
 80043dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fd fc84 	bl	8001cf0 <HAL_DMA_Abort_IT>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d016      	beq.n	8004430 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	4a0d      	ldr	r2, [pc, #52]	; (800443c <HAL_SPI_IRQHandler+0x1fc>)
 8004408:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd fc6e 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004426:	e003      	b.n	8004430 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f827 	bl	800447c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800442e:	e000      	b.n	8004432 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004430:	bf00      	nop
    return;
 8004432:	bf00      	nop
 8004434:	bf00      	nop
  }
}
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	08004621 	.word	0x08004621

08004440 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800449e:	f7fc fdbb 	bl	8001018 <HAL_GetTick>
 80044a2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d02a      	beq.n	800450a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0220 	bic.w	r2, r2, #32
 80044c2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0203 	bic.w	r2, r2, #3
 80044d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	2164      	movs	r1, #100	; 0x64
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f98d 	bl	80047f8 <SPI_EndRxTransaction>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff ffba 	bl	800447c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004508:	e002      	b.n	8004510 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff ff98 	bl	8004440 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004524:	f7fc fd78 	bl	8001018 <HAL_GetTick>
 8004528:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004538:	d030      	beq.n	800459c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0220 	bic.w	r2, r2, #32
 8004548:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	2164      	movs	r1, #100	; 0x64
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f9aa 	bl	80048a8 <SPI_EndRxTxTransaction>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0203 	bic.w	r2, r2, #3
 8004574:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff ff71 	bl	800447c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800459a:	e002      	b.n	80045a2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f003 ffef 	bl	8008580 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff ff4c 	bl	8004454 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff ff48 	bl	8004468 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0203 	bic.w	r2, r2, #3
 80045fc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	f043 0210 	orr.w	r2, r3, #16
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff ff32 	bl	800447c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff ff1d 	bl	800447c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465a:	e04c      	b.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d048      	beq.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004664:	f7fc fcd8 	bl	8001018 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d902      	bls.n	800467a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d13d      	bne.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004688:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004692:	d111      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	d004      	beq.n	80046a8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a6:	d107      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c0:	d10f      	bne.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e00f      	b.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4013      	ands	r3, r2
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	bf0c      	ite	eq
 8004706:	2301      	moveq	r3, #1
 8004708:	2300      	movne	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	429a      	cmp	r2, r3
 8004712:	d1a3      	bne.n	800465c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800472c:	e057      	b.n	80047de <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004734:	d106      	bne.n	8004744 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d048      	beq.n	80047de <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800474c:	f7fc fc64 	bl	8001018 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d902      	bls.n	8004762 <SPI_WaitFifoStateUntilTimeout+0x44>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13d      	bne.n	80047de <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477a:	d111      	bne.n	80047a0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004784:	d004      	beq.n	8004790 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d107      	bne.n	80047a0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a8:	d10f      	bne.n	80047ca <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e008      	b.n	80047f0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4013      	ands	r3, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d19f      	bne.n	800472e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480c:	d111      	bne.n	8004832 <SPI_EndRxTransaction+0x3a>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d004      	beq.n	8004822 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004820:	d107      	bne.n	8004832 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff ff04 	bl	800464a <SPI_WaitFlagStateUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484c:	f043 0220 	orr.w	r2, r3, #32
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e023      	b.n	80048a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004860:	d11d      	bne.n	800489e <SPI_EndRxTransaction+0xa6>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d004      	beq.n	8004876 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d113      	bne.n	800489e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2200      	movs	r2, #0
 800487e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff ff4b 	bl	800471e <SPI_WaitFifoStateUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e000      	b.n	80048a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff ff2c 	bl	800471e <SPI_WaitFifoStateUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e027      	b.n	800492c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff feaf 	bl	800464a <SPI_WaitFlagStateUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e014      	b.n	800492c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2200      	movs	r2, #0
 800490a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff ff05 	bl	800471e <SPI_WaitFifoStateUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e000      	b.n	800492c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e01d      	b.n	8004982 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f005 f8e4 	bl	8009b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 fbbe 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <HAL_TIM_Base_Start_IT+0x50>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d00b      	beq.n	80049ce <HAL_TIM_Base_Start_IT+0x42>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d007      	beq.n	80049ce <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	00010007 	.word	0x00010007

080049e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e01d      	b.n	8004a2e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f005 f96e 	bl	8009ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f000 fb68 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2201      	movs	r2, #1
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 feea 	bl	8005824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_TIM_PWM_Start+0x7c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_TIM_PWM_Start+0x2c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_TIM_PWM_Start+0x80>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <HAL_TIM_PWM_Start+0x30>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <HAL_TIM_PWM_Start+0x32>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <HAL_TIM_PWM_Start+0x84>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d00b      	beq.n	8004aa8 <HAL_TIM_PWM_Start+0x70>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a96:	d007      	beq.n	8004aa8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400
 8004abc:	00010007 	.word	0x00010007

08004ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d122      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d11b      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0202 	mvn.w	r2, #2
 8004aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fad8 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 faca 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fadb 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d122      	bne.n	8004b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d11b      	bne.n	8004b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0204 	mvn.w	r2, #4
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 faae 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 faa0 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fab1 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0208 	mvn.w	r2, #8
 8004b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa84 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa76 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fa87 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0210 	mvn.w	r2, #16
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2208      	movs	r2, #8
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa5a 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa4c 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa5d 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d10e      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d107      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0201 	mvn.w	r2, #1
 8004c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f003 fcc4 	bl	80085cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d10e      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b80      	cmp	r3, #128	; 0x80
 8004c5e:	d107      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fee4 	bl	8005a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7e:	d10e      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d107      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fed7 	bl	8005a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d10e      	bne.n	8004cca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d107      	bne.n	8004cca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa0b 	bl	80050e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d10e      	bne.n	8004cf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d107      	bne.n	8004cf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f06f 0220 	mvn.w	r2, #32
 8004cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fe97 	bl	8005a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e105      	b.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b14      	cmp	r3, #20
 8004d2e:	f200 80f0 	bhi.w	8004f12 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d8d 	.word	0x08004d8d
 8004d3c:	08004f13 	.word	0x08004f13
 8004d40:	08004f13 	.word	0x08004f13
 8004d44:	08004f13 	.word	0x08004f13
 8004d48:	08004dcd 	.word	0x08004dcd
 8004d4c:	08004f13 	.word	0x08004f13
 8004d50:	08004f13 	.word	0x08004f13
 8004d54:	08004f13 	.word	0x08004f13
 8004d58:	08004e0f 	.word	0x08004e0f
 8004d5c:	08004f13 	.word	0x08004f13
 8004d60:	08004f13 	.word	0x08004f13
 8004d64:	08004f13 	.word	0x08004f13
 8004d68:	08004e4f 	.word	0x08004e4f
 8004d6c:	08004f13 	.word	0x08004f13
 8004d70:	08004f13 	.word	0x08004f13
 8004d74:	08004f13 	.word	0x08004f13
 8004d78:	08004e91 	.word	0x08004e91
 8004d7c:	08004f13 	.word	0x08004f13
 8004d80:	08004f13 	.word	0x08004f13
 8004d84:	08004f13 	.word	0x08004f13
 8004d88:	08004ed1 	.word	0x08004ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fa4e 	bl	8005234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0208 	orr.w	r2, r2, #8
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0204 	bic.w	r2, r2, #4
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	619a      	str	r2, [r3, #24]
      break;
 8004dca:	e0a3      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 faa0 	bl	8005318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6999      	ldr	r1, [r3, #24]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	021a      	lsls	r2, r3, #8
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	619a      	str	r2, [r3, #24]
      break;
 8004e0c:	e082      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 faf7 	bl	8005408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0208 	orr.w	r2, r2, #8
 8004e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0204 	bic.w	r2, r2, #4
 8004e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	61da      	str	r2, [r3, #28]
      break;
 8004e4c:	e062      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fb4d 	bl	80054f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69d9      	ldr	r1, [r3, #28]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	021a      	lsls	r2, r3, #8
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	61da      	str	r2, [r3, #28]
      break;
 8004e8e:	e041      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fb84 	bl	80055a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ece:	e021      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fbb6 	bl	8005648 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	021a      	lsls	r2, r3, #8
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f10:	e000      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004f12:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop

08004f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_ConfigClockSource+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e0a6      	b.n	8005096 <HAL_TIM_ConfigClockSource+0x166>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <HAL_TIM_ConfigClockSource+0x170>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d067      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x120>
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d80b      	bhi.n	8004f9c <HAL_TIM_ConfigClockSource+0x6c>
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d073      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0x140>
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d802      	bhi.n	8004f92 <HAL_TIM_ConfigClockSource+0x62>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d06f      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f90:	e078      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d06c      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0x140>
 8004f96:	2b30      	cmp	r3, #48	; 0x30
 8004f98:	d06a      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f9a:	e073      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f9c:	2b70      	cmp	r3, #112	; 0x70
 8004f9e:	d00d      	beq.n	8004fbc <HAL_TIM_ConfigClockSource+0x8c>
 8004fa0:	2b70      	cmp	r3, #112	; 0x70
 8004fa2:	d804      	bhi.n	8004fae <HAL_TIM_ConfigClockSource+0x7e>
 8004fa4:	2b50      	cmp	r3, #80	; 0x50
 8004fa6:	d033      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0xe0>
 8004fa8:	2b60      	cmp	r3, #96	; 0x60
 8004faa:	d041      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004fac:	e06a      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb2:	d066      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0x152>
 8004fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb8:	d017      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004fba:	e063      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6899      	ldr	r1, [r3, #8]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f000 fc0a 	bl	80057e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fde:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	609a      	str	r2, [r3, #8]
      break;
 8004fe8:	e04c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6899      	ldr	r1, [r3, #8]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f000 fbf3 	bl	80057e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500c:	609a      	str	r2, [r3, #8]
      break;
 800500e:	e039      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	461a      	mov	r2, r3
 800501e:	f000 fb67 	bl	80056f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2150      	movs	r1, #80	; 0x50
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fbc0 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 800502e:	e029      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	461a      	mov	r2, r3
 800503e:	f000 fb86 	bl	800574e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2160      	movs	r1, #96	; 0x60
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fbb0 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 800504e:	e019      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6859      	ldr	r1, [r3, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	461a      	mov	r2, r3
 800505e:	f000 fb47 	bl	80056f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2140      	movs	r1, #64	; 0x40
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fba0 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 800506e:	e009      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 fb97 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 8005080:	e000      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	fffeff88 	.word	0xfffeff88

080050a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a40      	ldr	r2, [pc, #256]	; (8005208 <TIM_Base_SetConfig+0x114>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d00f      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3d      	ldr	r2, [pc, #244]	; (800520c <TIM_Base_SetConfig+0x118>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3c      	ldr	r2, [pc, #240]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <TIM_Base_SetConfig+0x120>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d108      	bne.n	8005146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <TIM_Base_SetConfig+0x114>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d027      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2c      	ldr	r2, [pc, #176]	; (800520c <TIM_Base_SetConfig+0x118>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d023      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <TIM_Base_SetConfig+0x120>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a28      	ldr	r2, [pc, #160]	; (800521c <TIM_Base_SetConfig+0x128>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <TIM_Base_SetConfig+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <TIM_Base_SetConfig+0x130>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <TIM_Base_SetConfig+0x134>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a24      	ldr	r2, [pc, #144]	; (800522c <TIM_Base_SetConfig+0x138>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a23      	ldr	r2, [pc, #140]	; (8005230 <TIM_Base_SetConfig+0x13c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <TIM_Base_SetConfig+0x114>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40010400 	.word	0x40010400
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800
 8005228:	40001800 	.word	0x40001800
 800522c:	40001c00 	.word	0x40001c00
 8005230:	40002000 	.word	0x40002000

08005234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f023 0201 	bic.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4b2b      	ldr	r3, [pc, #172]	; (800530c <TIM_OC1_SetConfig+0xd8>)
 8005260:	4013      	ands	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0303 	bic.w	r3, r3, #3
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 0302 	bic.w	r3, r3, #2
 800527c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a21      	ldr	r2, [pc, #132]	; (8005310 <TIM_OC1_SetConfig+0xdc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC1_SetConfig+0x64>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a20      	ldr	r2, [pc, #128]	; (8005314 <TIM_OC1_SetConfig+0xe0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d10c      	bne.n	80052b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0308 	bic.w	r3, r3, #8
 800529e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0304 	bic.w	r3, r3, #4
 80052b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <TIM_OC1_SetConfig+0xdc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_OC1_SetConfig+0x8e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a15      	ldr	r2, [pc, #84]	; (8005314 <TIM_OC1_SetConfig+0xe0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	fffeff8f 	.word	0xfffeff8f
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400

08005318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f023 0210 	bic.w	r2, r3, #16
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <TIM_OC2_SetConfig+0xe4>)
 8005344:	4013      	ands	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0320 	bic.w	r3, r3, #32
 8005362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a23      	ldr	r2, [pc, #140]	; (8005400 <TIM_OC2_SetConfig+0xe8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC2_SetConfig+0x68>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a22      	ldr	r2, [pc, #136]	; (8005404 <TIM_OC2_SetConfig+0xec>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10d      	bne.n	800539c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a18      	ldr	r2, [pc, #96]	; (8005400 <TIM_OC2_SetConfig+0xe8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_OC2_SetConfig+0x94>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <TIM_OC2_SetConfig+0xec>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d113      	bne.n	80053d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	feff8fff 	.word	0xfeff8fff
 8005400:	40010000 	.word	0x40010000
 8005404:	40010400 	.word	0x40010400

08005408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4b2d      	ldr	r3, [pc, #180]	; (80054e8 <TIM_OC3_SetConfig+0xe0>)
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a22      	ldr	r2, [pc, #136]	; (80054ec <TIM_OC3_SetConfig+0xe4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_OC3_SetConfig+0x66>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a21      	ldr	r2, [pc, #132]	; (80054f0 <TIM_OC3_SetConfig+0xe8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d10d      	bne.n	800548a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a17      	ldr	r2, [pc, #92]	; (80054ec <TIM_OC3_SetConfig+0xe4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d003      	beq.n	800549a <TIM_OC3_SetConfig+0x92>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <TIM_OC3_SetConfig+0xe8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d113      	bne.n	80054c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	fffeff8f 	.word	0xfffeff8f
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40010400 	.word	0x40010400

080054f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4b1e      	ldr	r3, [pc, #120]	; (8005598 <TIM_OC4_SetConfig+0xa4>)
 8005520:	4013      	ands	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800553e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a13      	ldr	r2, [pc, #76]	; (800559c <TIM_OC4_SetConfig+0xa8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_OC4_SetConfig+0x68>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <TIM_OC4_SetConfig+0xac>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d109      	bne.n	8005570 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	019b      	lsls	r3, r3, #6
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	feff8fff 	.word	0xfeff8fff
 800559c:	40010000 	.word	0x40010000
 80055a0:	40010400 	.word	0x40010400

080055a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4b1b      	ldr	r3, [pc, #108]	; (800563c <TIM_OC5_SetConfig+0x98>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	041b      	lsls	r3, r3, #16
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a12      	ldr	r2, [pc, #72]	; (8005640 <TIM_OC5_SetConfig+0x9c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_OC5_SetConfig+0x5e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a11      	ldr	r2, [pc, #68]	; (8005644 <TIM_OC5_SetConfig+0xa0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d109      	bne.n	8005616 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	621a      	str	r2, [r3, #32]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	fffeff8f 	.word	0xfffeff8f
 8005640:	40010000 	.word	0x40010000
 8005644:	40010400 	.word	0x40010400

08005648 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <TIM_OC6_SetConfig+0x9c>)
 8005674:	4013      	ands	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800568a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	051b      	lsls	r3, r3, #20
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <TIM_OC6_SetConfig+0xa0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_OC6_SetConfig+0x60>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a12      	ldr	r2, [pc, #72]	; (80056ec <TIM_OC6_SetConfig+0xa4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d109      	bne.n	80056bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	029b      	lsls	r3, r3, #10
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	feff8fff 	.word	0xfeff8fff
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40010400 	.word	0x40010400

080056f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f023 0201 	bic.w	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800571a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 030a 	bic.w	r3, r3, #10
 800572c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0210 	bic.w	r2, r3, #16
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	031b      	lsls	r3, r3, #12
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800578a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f043 0307 	orr.w	r3, r3, #7
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	021a      	lsls	r2, r3, #8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	431a      	orrs	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4313      	orrs	r3, r2
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2201      	movs	r2, #1
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	43db      	mvns	r3, r3
 8005846:	401a      	ands	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005884:	2302      	movs	r3, #2
 8005886:	e045      	b.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1b      	ldr	r2, [pc, #108]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d108      	bne.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	40010000 	.word	0x40010000
 8005924:	40010400 	.word	0x40010400

08005928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005940:	2302      	movs	r3, #2
 8005942:	e065      	b.n	8005a10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d115      	bne.n	80059fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	051b      	lsls	r3, r3, #20
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40010400 	.word	0x40010400

08005a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e040      	b.n	8005af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f004 fbfe 	bl	800a284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2224      	movs	r2, #36	; 0x24
 8005a8c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0201 	bic.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa66 	bl	8005f70 <UART_SetConfig>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e022      	b.n	8005af4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fcfe 	bl	80064b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ada:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fd85 	bl	80065fc <UART_CheckIdleState>
 8005af2:	4603      	mov	r3, r0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d164      	bne.n	8005bdc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_UART_Transmit_DMA+0x22>
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e05d      	b.n	8005bde <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_UART_Transmit_DMA+0x34>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e056      	b.n	8005bde <HAL_UART_Transmit_DMA+0xe2>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	88fa      	ldrh	r2, [r7, #6]
 8005b42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2221      	movs	r2, #33	; 0x21
 8005b58:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02a      	beq.n	8005bb8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b66:	4a20      	ldr	r2, [pc, #128]	; (8005be8 <HAL_UART_Transmit_DMA+0xec>)
 8005b68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b6e:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <HAL_UART_Transmit_DMA+0xf0>)
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b76:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <HAL_UART_Transmit_DMA+0xf4>)
 8005b78:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7e:	2200      	movs	r2, #0
 8005b80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3328      	adds	r3, #40	; 0x28
 8005b92:	461a      	mov	r2, r3
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	f7fb ffdb 	bl	8001b50 <HAL_DMA_Start_IT>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e012      	b.n	8005bde <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2240      	movs	r2, #64	; 0x40
 8005bbe:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bd6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e000      	b.n	8005bde <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005bdc:	2302      	movs	r3, #2
  }
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	08006755 	.word	0x08006755
 8005bec:	080067a5 	.word	0x080067a5
 8005bf0:	08006841 	.word	0x08006841

08005bf4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d16c      	bne.n	8005ce4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_UART_Receive_DMA+0x22>
 8005c10:	88fb      	ldrh	r3, [r7, #6]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e065      	b.n	8005ce6 <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_UART_Receive_DMA+0x34>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e05e      	b.n	8005ce6 <HAL_UART_Receive_DMA+0xf2>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	88fa      	ldrh	r2, [r7, #6]
 8005c3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2222      	movs	r2, #34	; 0x22
 8005c48:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d02a      	beq.n	8005ca8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c56:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <HAL_UART_Receive_DMA+0xfc>)
 8005c58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c5e:	4a25      	ldr	r2, [pc, #148]	; (8005cf4 <HAL_UART_Receive_DMA+0x100>)
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c66:	4a24      	ldr	r2, [pc, #144]	; (8005cf8 <HAL_UART_Receive_DMA+0x104>)
 8005c68:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	2200      	movs	r2, #0
 8005c70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3324      	adds	r3, #36	; 0x24
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	461a      	mov	r2, r3
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	f7fb ff63 	bl	8001b50 <HAL_DMA_Start_IT>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2210      	movs	r2, #16
 8005c94:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e01e      	b.n	8005ce6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cbe:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cde:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	080067c1 	.word	0x080067c1
 8005cf4:	08006825 	.word	0x08006825
 8005cf8:	08006841 	.word	0x08006841

08005cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d113      	bne.n	8005d52 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00e      	beq.n	8005d52 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80eb 	beq.w	8005f1e <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
      }
      return;
 8005d50:	e0e5      	b.n	8005f1e <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 80c0 	beq.w	8005eda <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80b5 	beq.w	8005eda <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00e      	beq.n	8005d98 <HAL_UART_IRQHandler+0x9c>
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d90:	f043 0201 	orr.w	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <HAL_UART_IRQHandler+0xc4>
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d009      	beq.n	8005dc0 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2202      	movs	r2, #2
 8005db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db8:	f043 0204 	orr.w	r2, r3, #4
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00e      	beq.n	8005de8 <HAL_UART_IRQHandler+0xec>
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de0:	f043 0202 	orr.w	r2, r3, #2
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d013      	beq.n	8005e1a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d07f      	beq.n	8005f22 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00c      	beq.n	8005e46 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e4a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	d004      	beq.n	8005e64 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d031      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc55 	bl	8006714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d123      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e94:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <HAL_UART_IRQHandler+0x234>)
 8005e96:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fb ff27 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d016      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb6:	e00e      	b.n	8005ed6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f84f 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebe:	e00a      	b.n	8005ed6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f84b 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec6:	e006      	b.n	8005ed6 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f847 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005ed4:	e025      	b.n	8005f22 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed6:	bf00      	nop
    return;
 8005ed8:	e023      	b.n	8005f22 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d008      	beq.n	8005f00 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d017      	beq.n	8005f26 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4798      	blx	r3
    }
    return;
 8005efe:	e012      	b.n	8005f26 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <HAL_UART_IRQHandler+0x22c>
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d009      	beq.n	8005f28 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fce5 	bl	80068e4 <UART_EndTransmit_IT>
    return;
 8005f1a:	bf00      	nop
 8005f1c:	e004      	b.n	8005f28 <HAL_UART_IRQHandler+0x22c>
      return;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <HAL_UART_IRQHandler+0x22c>
    return;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_UART_IRQHandler+0x22c>
    return;
 8005f26:	bf00      	nop
  }

}
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	080068b9 	.word	0x080068b9

08005f34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4bb1      	ldr	r3, [pc, #708]	; (8006264 <UART_SetConfig+0x2f4>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	6939      	ldr	r1, [r7, #16]
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a9f      	ldr	r2, [pc, #636]	; (8006268 <UART_SetConfig+0x2f8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d121      	bne.n	8006034 <UART_SetConfig+0xc4>
 8005ff0:	4b9e      	ldr	r3, [pc, #632]	; (800626c <UART_SetConfig+0x2fc>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d816      	bhi.n	800602c <UART_SetConfig+0xbc>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <UART_SetConfig+0x94>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006015 	.word	0x08006015
 8006008:	08006021 	.word	0x08006021
 800600c:	0800601b 	.word	0x0800601b
 8006010:	08006027 	.word	0x08006027
 8006014:	2301      	movs	r3, #1
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	e151      	b.n	80062be <UART_SetConfig+0x34e>
 800601a:	2302      	movs	r3, #2
 800601c:	77fb      	strb	r3, [r7, #31]
 800601e:	e14e      	b.n	80062be <UART_SetConfig+0x34e>
 8006020:	2304      	movs	r3, #4
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e14b      	b.n	80062be <UART_SetConfig+0x34e>
 8006026:	2308      	movs	r3, #8
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e148      	b.n	80062be <UART_SetConfig+0x34e>
 800602c:	2310      	movs	r3, #16
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	bf00      	nop
 8006032:	e144      	b.n	80062be <UART_SetConfig+0x34e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a8d      	ldr	r2, [pc, #564]	; (8006270 <UART_SetConfig+0x300>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d134      	bne.n	80060a8 <UART_SetConfig+0x138>
 800603e:	4b8b      	ldr	r3, [pc, #556]	; (800626c <UART_SetConfig+0x2fc>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f003 030c 	and.w	r3, r3, #12
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d829      	bhi.n	80060a0 <UART_SetConfig+0x130>
 800604c:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0xe4>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006089 	.word	0x08006089
 8006058:	080060a1 	.word	0x080060a1
 800605c:	080060a1 	.word	0x080060a1
 8006060:	080060a1 	.word	0x080060a1
 8006064:	08006095 	.word	0x08006095
 8006068:	080060a1 	.word	0x080060a1
 800606c:	080060a1 	.word	0x080060a1
 8006070:	080060a1 	.word	0x080060a1
 8006074:	0800608f 	.word	0x0800608f
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a1 	.word	0x080060a1
 8006084:	0800609b 	.word	0x0800609b
 8006088:	2300      	movs	r3, #0
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e117      	b.n	80062be <UART_SetConfig+0x34e>
 800608e:	2302      	movs	r3, #2
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e114      	b.n	80062be <UART_SetConfig+0x34e>
 8006094:	2304      	movs	r3, #4
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e111      	b.n	80062be <UART_SetConfig+0x34e>
 800609a:	2308      	movs	r3, #8
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e10e      	b.n	80062be <UART_SetConfig+0x34e>
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	bf00      	nop
 80060a6:	e10a      	b.n	80062be <UART_SetConfig+0x34e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a71      	ldr	r2, [pc, #452]	; (8006274 <UART_SetConfig+0x304>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d120      	bne.n	80060f4 <UART_SetConfig+0x184>
 80060b2:	4b6e      	ldr	r3, [pc, #440]	; (800626c <UART_SetConfig+0x2fc>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d00f      	beq.n	80060e0 <UART_SetConfig+0x170>
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d802      	bhi.n	80060ca <UART_SetConfig+0x15a>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <UART_SetConfig+0x164>
 80060c8:	e010      	b.n	80060ec <UART_SetConfig+0x17c>
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d005      	beq.n	80060da <UART_SetConfig+0x16a>
 80060ce:	2b30      	cmp	r3, #48	; 0x30
 80060d0:	d009      	beq.n	80060e6 <UART_SetConfig+0x176>
 80060d2:	e00b      	b.n	80060ec <UART_SetConfig+0x17c>
 80060d4:	2300      	movs	r3, #0
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e0f1      	b.n	80062be <UART_SetConfig+0x34e>
 80060da:	2302      	movs	r3, #2
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e0ee      	b.n	80062be <UART_SetConfig+0x34e>
 80060e0:	2304      	movs	r3, #4
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e0eb      	b.n	80062be <UART_SetConfig+0x34e>
 80060e6:	2308      	movs	r3, #8
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e0e8      	b.n	80062be <UART_SetConfig+0x34e>
 80060ec:	2310      	movs	r3, #16
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	bf00      	nop
 80060f2:	e0e4      	b.n	80062be <UART_SetConfig+0x34e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a5f      	ldr	r2, [pc, #380]	; (8006278 <UART_SetConfig+0x308>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d120      	bne.n	8006140 <UART_SetConfig+0x1d0>
 80060fe:	4b5b      	ldr	r3, [pc, #364]	; (800626c <UART_SetConfig+0x2fc>)
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006104:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006108:	2b40      	cmp	r3, #64	; 0x40
 800610a:	d00f      	beq.n	800612c <UART_SetConfig+0x1bc>
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d802      	bhi.n	8006116 <UART_SetConfig+0x1a6>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <UART_SetConfig+0x1b0>
 8006114:	e010      	b.n	8006138 <UART_SetConfig+0x1c8>
 8006116:	2b80      	cmp	r3, #128	; 0x80
 8006118:	d005      	beq.n	8006126 <UART_SetConfig+0x1b6>
 800611a:	2bc0      	cmp	r3, #192	; 0xc0
 800611c:	d009      	beq.n	8006132 <UART_SetConfig+0x1c2>
 800611e:	e00b      	b.n	8006138 <UART_SetConfig+0x1c8>
 8006120:	2300      	movs	r3, #0
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e0cb      	b.n	80062be <UART_SetConfig+0x34e>
 8006126:	2302      	movs	r3, #2
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e0c8      	b.n	80062be <UART_SetConfig+0x34e>
 800612c:	2304      	movs	r3, #4
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e0c5      	b.n	80062be <UART_SetConfig+0x34e>
 8006132:	2308      	movs	r3, #8
 8006134:	77fb      	strb	r3, [r7, #31]
 8006136:	e0c2      	b.n	80062be <UART_SetConfig+0x34e>
 8006138:	2310      	movs	r3, #16
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	bf00      	nop
 800613e:	e0be      	b.n	80062be <UART_SetConfig+0x34e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a4d      	ldr	r2, [pc, #308]	; (800627c <UART_SetConfig+0x30c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d124      	bne.n	8006194 <UART_SetConfig+0x224>
 800614a:	4b48      	ldr	r3, [pc, #288]	; (800626c <UART_SetConfig+0x2fc>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006158:	d012      	beq.n	8006180 <UART_SetConfig+0x210>
 800615a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800615e:	d802      	bhi.n	8006166 <UART_SetConfig+0x1f6>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <UART_SetConfig+0x204>
 8006164:	e012      	b.n	800618c <UART_SetConfig+0x21c>
 8006166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616a:	d006      	beq.n	800617a <UART_SetConfig+0x20a>
 800616c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006170:	d009      	beq.n	8006186 <UART_SetConfig+0x216>
 8006172:	e00b      	b.n	800618c <UART_SetConfig+0x21c>
 8006174:	2300      	movs	r3, #0
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e0a1      	b.n	80062be <UART_SetConfig+0x34e>
 800617a:	2302      	movs	r3, #2
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e09e      	b.n	80062be <UART_SetConfig+0x34e>
 8006180:	2304      	movs	r3, #4
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e09b      	b.n	80062be <UART_SetConfig+0x34e>
 8006186:	2308      	movs	r3, #8
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e098      	b.n	80062be <UART_SetConfig+0x34e>
 800618c:	2310      	movs	r3, #16
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	bf00      	nop
 8006192:	e094      	b.n	80062be <UART_SetConfig+0x34e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a39      	ldr	r2, [pc, #228]	; (8006280 <UART_SetConfig+0x310>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d124      	bne.n	80061e8 <UART_SetConfig+0x278>
 800619e:	4b33      	ldr	r3, [pc, #204]	; (800626c <UART_SetConfig+0x2fc>)
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ac:	d012      	beq.n	80061d4 <UART_SetConfig+0x264>
 80061ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b2:	d802      	bhi.n	80061ba <UART_SetConfig+0x24a>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <UART_SetConfig+0x258>
 80061b8:	e012      	b.n	80061e0 <UART_SetConfig+0x270>
 80061ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061be:	d006      	beq.n	80061ce <UART_SetConfig+0x25e>
 80061c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c4:	d009      	beq.n	80061da <UART_SetConfig+0x26a>
 80061c6:	e00b      	b.n	80061e0 <UART_SetConfig+0x270>
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e077      	b.n	80062be <UART_SetConfig+0x34e>
 80061ce:	2302      	movs	r3, #2
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e074      	b.n	80062be <UART_SetConfig+0x34e>
 80061d4:	2304      	movs	r3, #4
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e071      	b.n	80062be <UART_SetConfig+0x34e>
 80061da:	2308      	movs	r3, #8
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e06e      	b.n	80062be <UART_SetConfig+0x34e>
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	bf00      	nop
 80061e6:	e06a      	b.n	80062be <UART_SetConfig+0x34e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a25      	ldr	r2, [pc, #148]	; (8006284 <UART_SetConfig+0x314>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d124      	bne.n	800623c <UART_SetConfig+0x2cc>
 80061f2:	4b1e      	ldr	r3, [pc, #120]	; (800626c <UART_SetConfig+0x2fc>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006200:	d012      	beq.n	8006228 <UART_SetConfig+0x2b8>
 8006202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006206:	d802      	bhi.n	800620e <UART_SetConfig+0x29e>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <UART_SetConfig+0x2ac>
 800620c:	e012      	b.n	8006234 <UART_SetConfig+0x2c4>
 800620e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006212:	d006      	beq.n	8006222 <UART_SetConfig+0x2b2>
 8006214:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006218:	d009      	beq.n	800622e <UART_SetConfig+0x2be>
 800621a:	e00b      	b.n	8006234 <UART_SetConfig+0x2c4>
 800621c:	2300      	movs	r3, #0
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e04d      	b.n	80062be <UART_SetConfig+0x34e>
 8006222:	2302      	movs	r3, #2
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e04a      	b.n	80062be <UART_SetConfig+0x34e>
 8006228:	2304      	movs	r3, #4
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e047      	b.n	80062be <UART_SetConfig+0x34e>
 800622e:	2308      	movs	r3, #8
 8006230:	77fb      	strb	r3, [r7, #31]
 8006232:	e044      	b.n	80062be <UART_SetConfig+0x34e>
 8006234:	2310      	movs	r3, #16
 8006236:	77fb      	strb	r3, [r7, #31]
 8006238:	bf00      	nop
 800623a:	e040      	b.n	80062be <UART_SetConfig+0x34e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a11      	ldr	r2, [pc, #68]	; (8006288 <UART_SetConfig+0x318>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d139      	bne.n	80062ba <UART_SetConfig+0x34a>
 8006246:	4b09      	ldr	r3, [pc, #36]	; (800626c <UART_SetConfig+0x2fc>)
 8006248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006254:	d027      	beq.n	80062a6 <UART_SetConfig+0x336>
 8006256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800625a:	d817      	bhi.n	800628c <UART_SetConfig+0x31c>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01c      	beq.n	800629a <UART_SetConfig+0x32a>
 8006260:	e027      	b.n	80062b2 <UART_SetConfig+0x342>
 8006262:	bf00      	nop
 8006264:	efff69f3 	.word	0xefff69f3
 8006268:	40011000 	.word	0x40011000
 800626c:	40023800 	.word	0x40023800
 8006270:	40004400 	.word	0x40004400
 8006274:	40004800 	.word	0x40004800
 8006278:	40004c00 	.word	0x40004c00
 800627c:	40005000 	.word	0x40005000
 8006280:	40011400 	.word	0x40011400
 8006284:	40007800 	.word	0x40007800
 8006288:	40007c00 	.word	0x40007c00
 800628c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006290:	d006      	beq.n	80062a0 <UART_SetConfig+0x330>
 8006292:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006296:	d009      	beq.n	80062ac <UART_SetConfig+0x33c>
 8006298:	e00b      	b.n	80062b2 <UART_SetConfig+0x342>
 800629a:	2300      	movs	r3, #0
 800629c:	77fb      	strb	r3, [r7, #31]
 800629e:	e00e      	b.n	80062be <UART_SetConfig+0x34e>
 80062a0:	2302      	movs	r3, #2
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e00b      	b.n	80062be <UART_SetConfig+0x34e>
 80062a6:	2304      	movs	r3, #4
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e008      	b.n	80062be <UART_SetConfig+0x34e>
 80062ac:	2308      	movs	r3, #8
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e005      	b.n	80062be <UART_SetConfig+0x34e>
 80062b2:	2310      	movs	r3, #16
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	bf00      	nop
 80062b8:	e001      	b.n	80062be <UART_SetConfig+0x34e>
 80062ba:	2310      	movs	r3, #16
 80062bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c6:	d17c      	bne.n	80063c2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d859      	bhi.n	8006382 <UART_SetConfig+0x412>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x364>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	08006317 	.word	0x08006317
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006383 	.word	0x08006383
 80062e4:	0800634d 	.word	0x0800634d
 80062e8:	08006383 	.word	0x08006383
 80062ec:	08006383 	.word	0x08006383
 80062f0:	08006383 	.word	0x08006383
 80062f4:	0800636b 	.word	0x0800636b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80062f8:	f7fc fef0 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 80062fc:	4603      	mov	r3, r0
 80062fe:	005a      	lsls	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	b29b      	uxth	r3, r3
 8006312:	61bb      	str	r3, [r7, #24]
        break;
 8006314:	e038      	b.n	8006388 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006316:	f7fc fef5 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 800631a:	4603      	mov	r3, r0
 800631c:	005a      	lsls	r2, r3, #1
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	fbb2 f3f3 	udiv	r3, r2, r3
 800632e:	b29b      	uxth	r3, r3
 8006330:	61bb      	str	r3, [r7, #24]
        break;
 8006332:	e029      	b.n	8006388 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	085a      	lsrs	r2, r3, #1
 800633a:	4b5d      	ldr	r3, [pc, #372]	; (80064b0 <UART_SetConfig+0x540>)
 800633c:	4413      	add	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6852      	ldr	r2, [r2, #4]
 8006342:	fbb3 f3f2 	udiv	r3, r3, r2
 8006346:	b29b      	uxth	r3, r3
 8006348:	61bb      	str	r3, [r7, #24]
        break;
 800634a:	e01d      	b.n	8006388 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800634c:	f7fc fe08 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8006350:	4603      	mov	r3, r0
 8006352:	005a      	lsls	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	441a      	add	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	b29b      	uxth	r3, r3
 8006366:	61bb      	str	r3, [r7, #24]
        break;
 8006368:	e00e      	b.n	8006388 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	b29b      	uxth	r3, r3
 800637e:	61bb      	str	r3, [r7, #24]
        break;
 8006380:	e002      	b.n	8006388 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
        break;
 8006386:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	d916      	bls.n	80063bc <UART_SetConfig+0x44c>
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	d212      	bcs.n	80063bc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f023 030f 	bic.w	r3, r3, #15
 800639e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	89fb      	ldrh	r3, [r7, #14]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	89fa      	ldrh	r2, [r7, #14]
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	e06e      	b.n	800649a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	75fb      	strb	r3, [r7, #23]
 80063c0:	e06b      	b.n	800649a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80063c2:	7ffb      	ldrb	r3, [r7, #31]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d857      	bhi.n	8006478 <UART_SetConfig+0x508>
 80063c8:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <UART_SetConfig+0x460>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	080063f5 	.word	0x080063f5
 80063d4:	08006411 	.word	0x08006411
 80063d8:	0800642d 	.word	0x0800642d
 80063dc:	08006479 	.word	0x08006479
 80063e0:	08006445 	.word	0x08006445
 80063e4:	08006479 	.word	0x08006479
 80063e8:	08006479 	.word	0x08006479
 80063ec:	08006479 	.word	0x08006479
 80063f0:	08006461 	.word	0x08006461
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80063f4:	f7fc fe72 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 80063f8:	4602      	mov	r2, r0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	441a      	add	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	fbb2 f3f3 	udiv	r3, r2, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	61bb      	str	r3, [r7, #24]
        break;
 800640e:	e036      	b.n	800647e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006410:	f7fc fe78 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8006414:	4602      	mov	r2, r0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	441a      	add	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	61bb      	str	r3, [r7, #24]
        break;
 800642a:	e028      	b.n	800647e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	085a      	lsrs	r2, r3, #1
 8006432:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <UART_SetConfig+0x544>)
 8006434:	4413      	add	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6852      	ldr	r2, [r2, #4]
 800643a:	fbb3 f3f2 	udiv	r3, r3, r2
 800643e:	b29b      	uxth	r3, r3
 8006440:	61bb      	str	r3, [r7, #24]
        break;
 8006442:	e01c      	b.n	800647e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006444:	f7fc fd8c 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8006448:	4602      	mov	r2, r0
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	441a      	add	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	fbb2 f3f3 	udiv	r3, r2, r3
 800645a:	b29b      	uxth	r3, r3
 800645c:	61bb      	str	r3, [r7, #24]
        break;
 800645e:	e00e      	b.n	800647e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	b29b      	uxth	r3, r3
 8006474:	61bb      	str	r3, [r7, #24]
        break;
 8006476:	e002      	b.n	800647e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	75fb      	strb	r3, [r7, #23]
        break;
 800647c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b0f      	cmp	r3, #15
 8006482:	d908      	bls.n	8006496 <UART_SetConfig+0x526>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648a:	d204      	bcs.n	8006496 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	60da      	str	r2, [r3, #12]
 8006494:	e001      	b.n	800649a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	01e84800 	.word	0x01e84800
 80064b4:	00f42400 	.word	0x00f42400

080064b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01a      	beq.n	80065ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b6:	d10a      	bne.n	80065ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	605a      	str	r2, [r3, #4]
  }
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af02      	add	r7, sp, #8
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800660a:	f7fa fd05 	bl	8001018 <HAL_GetTick>
 800660e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b08      	cmp	r3, #8
 800661c:	d10e      	bne.n	800663c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800661e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f814 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e00a      	b.n	8006652 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	4613      	mov	r3, r2
 8006668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666a:	e02a      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d026      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006674:	f7fa fcd0 	bl	8001018 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <UART_WaitOnFlagUntilTimeout+0x30>
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11b      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006698:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0201 	bic.w	r2, r2, #1
 80066a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e00f      	b.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4013      	ands	r3, r2
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	bf0c      	ite	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	2300      	movne	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d0c5      	beq.n	800666c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006700:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800672a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676a:	d014      	beq.n	8006796 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006782:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006792:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006794:	e002      	b.n	800679c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f006 fe0e 	bl	800d3b8 <HAL_UART_TxCpltCallback>
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fbbe 	bl	8005f34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b8:	bf00      	nop
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d01e      	beq.n	8006816 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ee:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f006 fdc4 	bl	800d3a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff fb88 	bl	8005f48 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006852:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006858:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d109      	bne.n	800687c <UART_DMAError+0x3c>
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b21      	cmp	r3, #33	; 0x21
 800686c:	d106      	bne.n	800687c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2200      	movs	r2, #0
 8006872:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006876:	6978      	ldr	r0, [r7, #20]
 8006878:	f7ff ff37 	bl	80066ea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d109      	bne.n	800689e <UART_DMAError+0x5e>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b22      	cmp	r3, #34	; 0x22
 800688e:	d106      	bne.n	800689e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2200      	movs	r2, #0
 8006894:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006898:	6978      	ldr	r0, [r7, #20]
 800689a:	f7ff ff3b 	bl	8006714 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a2:	f043 0210 	orr.w	r2, r3, #16
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068aa:	6978      	ldr	r0, [r7, #20]
 80068ac:	f7ff fb56 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b0:	bf00      	nop
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff fb40 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f006 fd55 	bl	800d3b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	4603      	mov	r3, r0
 800691e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006928:	2b84      	cmp	r3, #132	; 0x84
 800692a:	d005      	beq.n	8006938 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800692c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	3303      	adds	r3, #3
 8006936:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006938:	68fb      	ldr	r3, [r7, #12]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800694a:	f000 faad 	bl	8006ea8 <vTaskStartScheduler>
  
  return osOK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	bd80      	pop	{r7, pc}

08006954 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006956:	b089      	sub	sp, #36	; 0x24
 8006958:	af04      	add	r7, sp, #16
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685c      	ldr	r4, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691e      	ldr	r6, [r3, #16]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff ffd0 	bl	8006916 <makeFreeRtosPriority>
 8006976:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006980:	9202      	str	r2, [sp, #8]
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	9100      	str	r1, [sp, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	4632      	mov	r2, r6
 800698a:	4629      	mov	r1, r5
 800698c:	4620      	mov	r0, r4
 800698e:	f000 f8c5 	bl	8006b1c <xTaskCreateStatic>
 8006992:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006994:	68fb      	ldr	r3, [r7, #12]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800699e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80069a2:	f000 fd6d 	bl	8007480 <xTaskGetSchedulerState>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d001      	beq.n	80069b0 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80069ac:	f000 ff84 	bl	80078b8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80069b0:	bf00      	nop
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f103 0208 	add.w	r2, r3, #8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295
 80069cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f103 0208 	add.w	r2, r3, #8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f103 0208 	add.w	r2, r3, #8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d103      	bne.n	8006a76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e00c      	b.n	8006a90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e002      	b.n	8006a84 <vListInsert+0x2e>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d2f6      	bcs.n	8006a7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6892      	ldr	r2, [r2, #8]
 8006ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6852      	ldr	r2, [r2, #4]
 8006ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d103      	bne.n	8006afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	1e5a      	subs	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08e      	sub	sp, #56	; 0x38
 8006b20:	af04      	add	r7, sp, #16
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	b672      	cpsid	i
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	b662      	cpsie	i
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	e7fe      	b.n	8006b46 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <xTaskCreateStatic+0x4a>
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	e7fe      	b.n	8006b64 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b66:	2354      	movs	r3, #84	; 0x54
 8006b68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b54      	cmp	r3, #84	; 0x54
 8006b6e:	d00b      	beq.n	8006b88 <xTaskCreateStatic+0x6c>
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	b672      	cpsid	i
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	b662      	cpsie	i
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e7fe      	b.n	8006b86 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01a      	beq.n	8006bc4 <xTaskCreateStatic+0xa8>
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d017      	beq.n	8006bc4 <xTaskCreateStatic+0xa8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9303      	str	r3, [sp, #12]
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	9302      	str	r3, [sp, #8]
 8006ba6:	f107 0314 	add.w	r3, r7, #20
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f80b 	bl	8006bd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bbe:	f000 f889 	bl	8006cd4 <prvAddNewTaskToReadyList>
 8006bc2:	e001      	b.n	8006bc8 <xTaskCreateStatic+0xac>
		}
		else
		{
			xReturn = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bc8:	697b      	ldr	r3, [r7, #20]
	}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3728      	adds	r7, #40	; 0x28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b088      	sub	sp, #32
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
 8006bde:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006bea:	440b      	add	r3, r1
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	f023 0307 	bic.w	r3, r3, #7
 8006bf8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <prvInitialiseNewTask+0x4a>
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	b672      	cpsid	i
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	b662      	cpsie	i
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e7fe      	b.n	8006c1a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e012      	b.n	8006c48 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	7819      	ldrb	r1, [r3, #0]
 8006c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	3334      	adds	r3, #52	; 0x34
 8006c32:	460a      	mov	r2, r1
 8006c34:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d006      	beq.n	8006c50 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	3301      	adds	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	2b0f      	cmp	r3, #15
 8006c4c:	d9e9      	bls.n	8006c22 <prvInitialiseNewTask+0x50>
 8006c4e:	e000      	b.n	8006c52 <prvInitialiseNewTask+0x80>
		{
			break;
 8006c50:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	2b06      	cmp	r3, #6
 8006c5e:	d901      	bls.n	8006c64 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c60:	2306      	movs	r3, #6
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	2200      	movs	r2, #0
 8006c74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff feba 	bl	80069f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	3318      	adds	r3, #24
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff feb5 	bl	80069f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	f1c3 0207 	rsb	r2, r3, #7
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	68f9      	ldr	r1, [r7, #12]
 8006cb2:	69b8      	ldr	r0, [r7, #24]
 8006cb4:	f000 fc68 	bl	8007588 <pxPortInitialiseStack>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cca:	bf00      	nop
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cdc:	f000 fd5c 	bl	8007798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ce0:	4b2a      	ldr	r3, [pc, #168]	; (8006d8c <prvAddNewTaskToReadyList+0xb8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <prvAddNewTaskToReadyList+0xb8>)
 8006ce8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cea:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <prvAddNewTaskToReadyList+0xbc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cf2:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <prvAddNewTaskToReadyList+0xbc>)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cf8:	4b24      	ldr	r3, [pc, #144]	; (8006d8c <prvAddNewTaskToReadyList+0xb8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d110      	bne.n	8006d22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d00:	f000 fb22 	bl	8007348 <prvInitialiseTaskLists>
 8006d04:	e00d      	b.n	8006d22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <prvAddNewTaskToReadyList+0xc0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d0e:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <prvAddNewTaskToReadyList+0xbc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d802      	bhi.n	8006d22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d1c:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <prvAddNewTaskToReadyList+0xbc>)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d22:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <prvAddNewTaskToReadyList+0xc4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	4a1b      	ldr	r2, [pc, #108]	; (8006d98 <prvAddNewTaskToReadyList+0xc4>)
 8006d2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	2201      	movs	r2, #1
 8006d32:	409a      	lsls	r2, r3
 8006d34:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <prvAddNewTaskToReadyList+0xc8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	4a18      	ldr	r2, [pc, #96]	; (8006d9c <prvAddNewTaskToReadyList+0xc8>)
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <prvAddNewTaskToReadyList+0xcc>)
 8006d4c:	441a      	add	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f7ff fe5a 	bl	8006a0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d5a:	f000 fd4f 	bl	80077fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <prvAddNewTaskToReadyList+0xc0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00e      	beq.n	8006d84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <prvAddNewTaskToReadyList+0xbc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d207      	bcs.n	8006d84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d74:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <prvAddNewTaskToReadyList+0xd0>)
 8006d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000b58 	.word	0x20000b58
 8006d90:	20000a58 	.word	0x20000a58
 8006d94:	20000b64 	.word	0x20000b64
 8006d98:	20000b74 	.word	0x20000b74
 8006d9c:	20000b60 	.word	0x20000b60
 8006da0:	20000a5c 	.word	0x20000a5c
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	; 0x28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <vTaskDelayUntil+0x2c>
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	b672      	cpsid	i
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	b662      	cpsie	i
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e7fe      	b.n	8006dd2 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10b      	bne.n	8006df2 <vTaskDelayUntil+0x4a>
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	b672      	cpsid	i
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	b662      	cpsie	i
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	e7fe      	b.n	8006df0 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8006df2:	4b2a      	ldr	r3, [pc, #168]	; (8006e9c <vTaskDelayUntil+0xf4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <vTaskDelayUntil+0x6a>
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	b672      	cpsid	i
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	b662      	cpsie	i
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e7fe      	b.n	8006e10 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8006e12:	f000 f8ab 	bl	8006f6c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006e16:	4b22      	ldr	r3, [pc, #136]	; (8006ea0 <vTaskDelayUntil+0xf8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	4413      	add	r3, r2
 8006e24:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a3a      	ldr	r2, [r7, #32]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d20b      	bcs.n	8006e48 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d211      	bcs.n	8006e5e <vTaskDelayUntil+0xb6>
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d90d      	bls.n	8006e5e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006e42:	2301      	movs	r3, #1
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24
 8006e46:	e00a      	b.n	8006e5e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d303      	bcc.n	8006e5a <vTaskDelayUntil+0xb2>
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d901      	bls.n	8006e5e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d006      	beq.n	8006e78 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fb22 	bl	80074bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006e78:	f000 f886 	bl	8006f88 <xTaskResumeAll>
 8006e7c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d107      	bne.n	8006e94 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006e84:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <vTaskDelayUntil+0xfc>)
 8006e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e94:	bf00      	nop
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20000b80 	.word	0x20000b80
 8006ea0:	20000b5c 	.word	0x20000b5c
 8006ea4:	e000ed04 	.word	0xe000ed04

08006ea8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006eb6:	463a      	mov	r2, r7
 8006eb8:	1d39      	adds	r1, r7, #4
 8006eba:	f107 0308 	add.w	r3, r7, #8
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 ff90 	bl	8007de4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	9202      	str	r2, [sp, #8]
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	460a      	mov	r2, r1
 8006ed6:	491f      	ldr	r1, [pc, #124]	; (8006f54 <vTaskStartScheduler+0xac>)
 8006ed8:	481f      	ldr	r0, [pc, #124]	; (8006f58 <vTaskStartScheduler+0xb0>)
 8006eda:	f7ff fe1f 	bl	8006b1c <xTaskCreateStatic>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <vTaskStartScheduler+0xb4>)
 8006ee2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <vTaskStartScheduler+0xb4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006eec:	2301      	movs	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e001      	b.n	8006ef6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d117      	bne.n	8006f2c <vTaskStartScheduler+0x84>
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	b672      	cpsid	i
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	b662      	cpsie	i
 8006f10:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <vTaskStartScheduler+0xb8>)
 8006f14:	f04f 32ff 	mov.w	r2, #4294967295
 8006f18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f1a:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <vTaskStartScheduler+0xbc>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f20:	4b11      	ldr	r3, [pc, #68]	; (8006f68 <vTaskStartScheduler+0xc0>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f26:	f000 fbbb 	bl	80076a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f2a:	e00f      	b.n	8006f4c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	d10b      	bne.n	8006f4c <vTaskStartScheduler+0xa4>
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	b672      	cpsid	i
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	b662      	cpsie	i
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e7fe      	b.n	8006f4a <vTaskStartScheduler+0xa2>
}
 8006f4c:	bf00      	nop
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	08014478 	.word	0x08014478
 8006f58:	08007319 	.word	0x08007319
 8006f5c:	20000b7c 	.word	0x20000b7c
 8006f60:	20000b78 	.word	0x20000b78
 8006f64:	20000b64 	.word	0x20000b64
 8006f68:	20000b5c 	.word	0x20000b5c

08006f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f70:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <vTaskSuspendAll+0x18>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	4a03      	ldr	r2, [pc, #12]	; (8006f84 <vTaskSuspendAll+0x18>)
 8006f78:	6013      	str	r3, [r2, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	20000b80 	.word	0x20000b80

08006f88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f96:	4b42      	ldr	r3, [pc, #264]	; (80070a0 <xTaskResumeAll+0x118>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10b      	bne.n	8006fb6 <xTaskResumeAll+0x2e>
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	b672      	cpsid	i
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	b662      	cpsie	i
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	e7fe      	b.n	8006fb4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fb6:	f000 fbef 	bl	8007798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fba:	4b39      	ldr	r3, [pc, #228]	; (80070a0 <xTaskResumeAll+0x118>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	4a37      	ldr	r2, [pc, #220]	; (80070a0 <xTaskResumeAll+0x118>)
 8006fc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc4:	4b36      	ldr	r3, [pc, #216]	; (80070a0 <xTaskResumeAll+0x118>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d161      	bne.n	8007090 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fcc:	4b35      	ldr	r3, [pc, #212]	; (80070a4 <xTaskResumeAll+0x11c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d05d      	beq.n	8007090 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fd4:	e02e      	b.n	8007034 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006fd6:	4b34      	ldr	r3, [pc, #208]	; (80070a8 <xTaskResumeAll+0x120>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3318      	adds	r3, #24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fd70 	bl	8006ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3304      	adds	r3, #4
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff fd6b 	bl	8006ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	409a      	lsls	r2, r3
 8006ffa:	4b2c      	ldr	r3, [pc, #176]	; (80070ac <xTaskResumeAll+0x124>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	4a2a      	ldr	r2, [pc, #168]	; (80070ac <xTaskResumeAll+0x124>)
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4a27      	ldr	r2, [pc, #156]	; (80070b0 <xTaskResumeAll+0x128>)
 8007012:	441a      	add	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7ff fcf7 	bl	8006a0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007024:	4b23      	ldr	r3, [pc, #140]	; (80070b4 <xTaskResumeAll+0x12c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800702e:	4b22      	ldr	r3, [pc, #136]	; (80070b8 <xTaskResumeAll+0x130>)
 8007030:	2201      	movs	r2, #1
 8007032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007034:	4b1c      	ldr	r3, [pc, #112]	; (80070a8 <xTaskResumeAll+0x120>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1cc      	bne.n	8006fd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007042:	f000 f9f7 	bl	8007434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007046:	4b1d      	ldr	r3, [pc, #116]	; (80070bc <xTaskResumeAll+0x134>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d010      	beq.n	8007074 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007052:	f000 f847 	bl	80070e4 <xTaskIncrementTick>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800705c:	4b16      	ldr	r3, [pc, #88]	; (80070b8 <xTaskResumeAll+0x130>)
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3b01      	subs	r3, #1
 8007066:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f1      	bne.n	8007052 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800706e:	4b13      	ldr	r3, [pc, #76]	; (80070bc <xTaskResumeAll+0x134>)
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <xTaskResumeAll+0x130>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007080:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <xTaskResumeAll+0x138>)
 8007082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007090:	f000 fbb4 	bl	80077fc <vPortExitCritical>

	return xAlreadyYielded;
 8007094:	68bb      	ldr	r3, [r7, #8]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000b80 	.word	0x20000b80
 80070a4:	20000b58 	.word	0x20000b58
 80070a8:	20000b18 	.word	0x20000b18
 80070ac:	20000b60 	.word	0x20000b60
 80070b0:	20000a5c 	.word	0x20000a5c
 80070b4:	20000a58 	.word	0x20000a58
 80070b8:	20000b6c 	.word	0x20000b6c
 80070bc:	20000b68 	.word	0x20000b68
 80070c0:	e000ed04 	.word	0xe000ed04

080070c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <xTaskGetTickCount+0x1c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070d0:	687b      	ldr	r3, [r7, #4]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000b5c 	.word	0x20000b5c

080070e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ee:	4b51      	ldr	r3, [pc, #324]	; (8007234 <xTaskIncrementTick+0x150>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f040 808e 	bne.w	8007214 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070f8:	4b4f      	ldr	r3, [pc, #316]	; (8007238 <xTaskIncrementTick+0x154>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007100:	4a4d      	ldr	r2, [pc, #308]	; (8007238 <xTaskIncrementTick+0x154>)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d121      	bne.n	8007150 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800710c:	4b4b      	ldr	r3, [pc, #300]	; (800723c <xTaskIncrementTick+0x158>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <xTaskIncrementTick+0x4a>
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	b672      	cpsid	i
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	b662      	cpsie	i
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	e7fe      	b.n	800712c <xTaskIncrementTick+0x48>
 800712e:	4b43      	ldr	r3, [pc, #268]	; (800723c <xTaskIncrementTick+0x158>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	4b42      	ldr	r3, [pc, #264]	; (8007240 <xTaskIncrementTick+0x15c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a40      	ldr	r2, [pc, #256]	; (800723c <xTaskIncrementTick+0x158>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	4a40      	ldr	r2, [pc, #256]	; (8007240 <xTaskIncrementTick+0x15c>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	4b40      	ldr	r3, [pc, #256]	; (8007244 <xTaskIncrementTick+0x160>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	4a3e      	ldr	r2, [pc, #248]	; (8007244 <xTaskIncrementTick+0x160>)
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	f000 f972 	bl	8007434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007150:	4b3d      	ldr	r3, [pc, #244]	; (8007248 <xTaskIncrementTick+0x164>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	429a      	cmp	r2, r3
 8007158:	d34d      	bcc.n	80071f6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800715a:	4b38      	ldr	r3, [pc, #224]	; (800723c <xTaskIncrementTick+0x158>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <xTaskIncrementTick+0x84>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <xTaskIncrementTick+0x86>
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716e:	4b36      	ldr	r3, [pc, #216]	; (8007248 <xTaskIncrementTick+0x164>)
 8007170:	f04f 32ff 	mov.w	r2, #4294967295
 8007174:	601a      	str	r2, [r3, #0]
					break;
 8007176:	e03e      	b.n	80071f6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007178:	4b30      	ldr	r3, [pc, #192]	; (800723c <xTaskIncrementTick+0x158>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	429a      	cmp	r2, r3
 800718e:	d203      	bcs.n	8007198 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007190:	4a2d      	ldr	r2, [pc, #180]	; (8007248 <xTaskIncrementTick+0x164>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6013      	str	r3, [r2, #0]
						break;
 8007196:	e02e      	b.n	80071f6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	3304      	adds	r3, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff fc93 	bl	8006ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	3318      	adds	r3, #24
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff fc8a 	bl	8006ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	2201      	movs	r2, #1
 80071ba:	409a      	lsls	r2, r3
 80071bc:	4b23      	ldr	r3, [pc, #140]	; (800724c <xTaskIncrementTick+0x168>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	4a22      	ldr	r2, [pc, #136]	; (800724c <xTaskIncrementTick+0x168>)
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4a1f      	ldr	r2, [pc, #124]	; (8007250 <xTaskIncrementTick+0x16c>)
 80071d4:	441a      	add	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	3304      	adds	r3, #4
 80071da:	4619      	mov	r1, r3
 80071dc:	4610      	mov	r0, r2
 80071de:	f7ff fc16 	bl	8006a0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e6:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <xTaskIncrementTick+0x170>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d3b4      	bcc.n	800715a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f4:	e7b1      	b.n	800715a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071f6:	4b17      	ldr	r3, [pc, #92]	; (8007254 <xTaskIncrementTick+0x170>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fc:	4914      	ldr	r1, [pc, #80]	; (8007250 <xTaskIncrementTick+0x16c>)
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d907      	bls.n	800721e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e004      	b.n	800721e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007214:	4b10      	ldr	r3, [pc, #64]	; (8007258 <xTaskIncrementTick+0x174>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	4a0f      	ldr	r2, [pc, #60]	; (8007258 <xTaskIncrementTick+0x174>)
 800721c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <xTaskIncrementTick+0x178>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007226:	2301      	movs	r3, #1
 8007228:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800722a:	697b      	ldr	r3, [r7, #20]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000b80 	.word	0x20000b80
 8007238:	20000b5c 	.word	0x20000b5c
 800723c:	20000b10 	.word	0x20000b10
 8007240:	20000b14 	.word	0x20000b14
 8007244:	20000b70 	.word	0x20000b70
 8007248:	20000b78 	.word	0x20000b78
 800724c:	20000b60 	.word	0x20000b60
 8007250:	20000a5c 	.word	0x20000a5c
 8007254:	20000a58 	.word	0x20000a58
 8007258:	20000b68 	.word	0x20000b68
 800725c:	20000b6c 	.word	0x20000b6c

08007260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007266:	4b27      	ldr	r3, [pc, #156]	; (8007304 <vTaskSwitchContext+0xa4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800726e:	4b26      	ldr	r3, [pc, #152]	; (8007308 <vTaskSwitchContext+0xa8>)
 8007270:	2201      	movs	r2, #1
 8007272:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007274:	e040      	b.n	80072f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007276:	4b24      	ldr	r3, [pc, #144]	; (8007308 <vTaskSwitchContext+0xa8>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800727c:	4b23      	ldr	r3, [pc, #140]	; (800730c <vTaskSwitchContext+0xac>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	fab3 f383 	clz	r3, r3
 8007288:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	f1c3 031f 	rsb	r3, r3, #31
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	491f      	ldr	r1, [pc, #124]	; (8007310 <vTaskSwitchContext+0xb0>)
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <vTaskSwitchContext+0x5e>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	b672      	cpsid	i
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	b662      	cpsie	i
 80072ba:	607b      	str	r3, [r7, #4]
 80072bc:	e7fe      	b.n	80072bc <vTaskSwitchContext+0x5c>
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4a11      	ldr	r2, [pc, #68]	; (8007310 <vTaskSwitchContext+0xb0>)
 80072ca:	4413      	add	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3308      	adds	r3, #8
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d104      	bne.n	80072ee <vTaskSwitchContext+0x8e>
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4a07      	ldr	r2, [pc, #28]	; (8007314 <vTaskSwitchContext+0xb4>)
 80072f6:	6013      	str	r3, [r2, #0]
}
 80072f8:	bf00      	nop
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	20000b80 	.word	0x20000b80
 8007308:	20000b6c 	.word	0x20000b6c
 800730c:	20000b60 	.word	0x20000b60
 8007310:	20000a5c 	.word	0x20000a5c
 8007314:	20000a58 	.word	0x20000a58

08007318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007320:	f000 f852 	bl	80073c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007324:	4b06      	ldr	r3, [pc, #24]	; (8007340 <prvIdleTask+0x28>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d9f9      	bls.n	8007320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <prvIdleTask+0x2c>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800733c:	e7f0      	b.n	8007320 <prvIdleTask+0x8>
 800733e:	bf00      	nop
 8007340:	20000a5c 	.word	0x20000a5c
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800734e:	2300      	movs	r3, #0
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	e00c      	b.n	800736e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a12      	ldr	r2, [pc, #72]	; (80073a8 <prvInitialiseTaskLists+0x60>)
 8007360:	4413      	add	r3, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fb26 	bl	80069b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3301      	adds	r3, #1
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d9ef      	bls.n	8007354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007374:	480d      	ldr	r0, [pc, #52]	; (80073ac <prvInitialiseTaskLists+0x64>)
 8007376:	f7ff fb1d 	bl	80069b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800737a:	480d      	ldr	r0, [pc, #52]	; (80073b0 <prvInitialiseTaskLists+0x68>)
 800737c:	f7ff fb1a 	bl	80069b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007380:	480c      	ldr	r0, [pc, #48]	; (80073b4 <prvInitialiseTaskLists+0x6c>)
 8007382:	f7ff fb17 	bl	80069b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007386:	480c      	ldr	r0, [pc, #48]	; (80073b8 <prvInitialiseTaskLists+0x70>)
 8007388:	f7ff fb14 	bl	80069b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800738c:	480b      	ldr	r0, [pc, #44]	; (80073bc <prvInitialiseTaskLists+0x74>)
 800738e:	f7ff fb11 	bl	80069b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007392:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <prvInitialiseTaskLists+0x78>)
 8007394:	4a05      	ldr	r2, [pc, #20]	; (80073ac <prvInitialiseTaskLists+0x64>)
 8007396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <prvInitialiseTaskLists+0x7c>)
 800739a:	4a05      	ldr	r2, [pc, #20]	; (80073b0 <prvInitialiseTaskLists+0x68>)
 800739c:	601a      	str	r2, [r3, #0]
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000a5c 	.word	0x20000a5c
 80073ac:	20000ae8 	.word	0x20000ae8
 80073b0:	20000afc 	.word	0x20000afc
 80073b4:	20000b18 	.word	0x20000b18
 80073b8:	20000b2c 	.word	0x20000b2c
 80073bc:	20000b44 	.word	0x20000b44
 80073c0:	20000b10 	.word	0x20000b10
 80073c4:	20000b14 	.word	0x20000b14

080073c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ce:	e019      	b.n	8007404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073d0:	f000 f9e2 	bl	8007798 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <prvCheckTasksWaitingTermination+0x4c>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3304      	adds	r3, #4
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff fb71 	bl	8006ac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <prvCheckTasksWaitingTermination+0x50>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	4a0a      	ldr	r2, [pc, #40]	; (8007418 <prvCheckTasksWaitingTermination+0x50>)
 80073ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <prvCheckTasksWaitingTermination+0x54>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4a09      	ldr	r2, [pc, #36]	; (800741c <prvCheckTasksWaitingTermination+0x54>)
 80073f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073fa:	f000 f9ff 	bl	80077fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f80e 	bl	8007420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <prvCheckTasksWaitingTermination+0x54>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e1      	bne.n	80073d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000b2c 	.word	0x20000b2c
 8007418:	20000b58 	.word	0x20000b58
 800741c:	20000b40 	.word	0x20000b40

08007420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <prvResetNextTaskUnblockTime+0x44>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <prvResetNextTaskUnblockTime+0x14>
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <prvResetNextTaskUnblockTime+0x16>
 8007448:	2300      	movs	r3, #0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800744e:	4b0b      	ldr	r3, [pc, #44]	; (800747c <prvResetNextTaskUnblockTime+0x48>)
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007456:	e008      	b.n	800746a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007458:	4b07      	ldr	r3, [pc, #28]	; (8007478 <prvResetNextTaskUnblockTime+0x44>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	4a05      	ldr	r2, [pc, #20]	; (800747c <prvResetNextTaskUnblockTime+0x48>)
 8007468:	6013      	str	r3, [r2, #0]
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000b10 	.word	0x20000b10
 800747c:	20000b78 	.word	0x20000b78

08007480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <xTaskGetSchedulerState+0x34>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d102      	bne.n	8007494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800748e:	2301      	movs	r3, #1
 8007490:	607b      	str	r3, [r7, #4]
 8007492:	e008      	b.n	80074a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007494:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <xTaskGetSchedulerState+0x38>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800749c:	2302      	movs	r3, #2
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	e001      	b.n	80074a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074a6:	687b      	ldr	r3, [r7, #4]
	}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20000b64 	.word	0x20000b64
 80074b8:	20000b80 	.word	0x20000b80

080074bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074c6:	4b29      	ldr	r3, [pc, #164]	; (800756c <prvAddCurrentTaskToDelayedList+0xb0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074cc:	4b28      	ldr	r3, [pc, #160]	; (8007570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff faf8 	bl	8006ac8 <uxListRemove>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10b      	bne.n	80074f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80074de:	4b24      	ldr	r3, [pc, #144]	; (8007570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	2201      	movs	r2, #1
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	43da      	mvns	r2, r3
 80074ec:	4b21      	ldr	r3, [pc, #132]	; (8007574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4013      	ands	r3, r2
 80074f2:	4a20      	ldr	r2, [pc, #128]	; (8007574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80074f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d10a      	bne.n	8007514 <prvAddCurrentTaskToDelayedList+0x58>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007504:	4b1a      	ldr	r3, [pc, #104]	; (8007570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	481a      	ldr	r0, [pc, #104]	; (8007578 <prvAddCurrentTaskToDelayedList+0xbc>)
 800750e:	f7ff fa7e 	bl	8006a0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007512:	e026      	b.n	8007562 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4413      	add	r3, r2
 800751a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800751c:	4b14      	ldr	r3, [pc, #80]	; (8007570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	429a      	cmp	r2, r3
 800752a:	d209      	bcs.n	8007540 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800752c:	4b13      	ldr	r3, [pc, #76]	; (800757c <prvAddCurrentTaskToDelayedList+0xc0>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f7ff fa8c 	bl	8006a56 <vListInsert>
}
 800753e:	e010      	b.n	8007562 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007540:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3304      	adds	r3, #4
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f7ff fa82 	bl	8006a56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007552:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	429a      	cmp	r2, r3
 800755a:	d202      	bcs.n	8007562 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800755c:	4a09      	ldr	r2, [pc, #36]	; (8007584 <prvAddCurrentTaskToDelayedList+0xc8>)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6013      	str	r3, [r2, #0]
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000b5c 	.word	0x20000b5c
 8007570:	20000a58 	.word	0x20000a58
 8007574:	20000b60 	.word	0x20000b60
 8007578:	20000b44 	.word	0x20000b44
 800757c:	20000b14 	.word	0x20000b14
 8007580:	20000b10 	.word	0x20000b10
 8007584:	20000b78 	.word	0x20000b78

08007588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3b04      	subs	r3, #4
 8007598:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f023 0201 	bic.w	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3b04      	subs	r3, #4
 80075b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075b8:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <pxPortInitialiseStack+0x64>)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3b14      	subs	r3, #20
 80075c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3b04      	subs	r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f06f 0202 	mvn.w	r2, #2
 80075d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3b20      	subs	r3, #32
 80075dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075de:	68fb      	ldr	r3, [r7, #12]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	080075f1 	.word	0x080075f1

080075f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075fa:	4b13      	ldr	r3, [pc, #76]	; (8007648 <prvTaskExitError+0x58>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007602:	d00b      	beq.n	800761c <prvTaskExitError+0x2c>
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	b672      	cpsid	i
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	b662      	cpsie	i
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	e7fe      	b.n	800761a <prvTaskExitError+0x2a>
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	b672      	cpsid	i
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	b662      	cpsie	i
 8007630:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007632:	bf00      	nop
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0fc      	beq.n	8007634 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000004 	.word	0x20000004
 800764c:	00000000 	.word	0x00000000

08007650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <pxCurrentTCBConst2>)
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	f380 8809 	msr	PSP, r0
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f380 8811 	msr	BASEPRI, r0
 800766a:	4770      	bx	lr
 800766c:	f3af 8000 	nop.w

08007670 <pxCurrentTCBConst2>:
 8007670:	20000a58 	.word	0x20000a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007678:	4808      	ldr	r0, [pc, #32]	; (800769c <prvPortStartFirstTask+0x24>)
 800767a:	6800      	ldr	r0, [r0, #0]
 800767c:	6800      	ldr	r0, [r0, #0]
 800767e:	f380 8808 	msr	MSP, r0
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8814 	msr	CONTROL, r0
 800768a:	b662      	cpsie	i
 800768c:	b661      	cpsie	f
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	df00      	svc	0
 8007698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800769a:	bf00      	nop
 800769c:	e000ed08 	.word	0xe000ed08

080076a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076a6:	4b36      	ldr	r3, [pc, #216]	; (8007780 <xPortStartScheduler+0xe0>)
 80076a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	22ff      	movs	r2, #255	; 0xff
 80076b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	4b2e      	ldr	r3, [pc, #184]	; (8007784 <xPortStartScheduler+0xe4>)
 80076cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076ce:	4b2e      	ldr	r3, [pc, #184]	; (8007788 <xPortStartScheduler+0xe8>)
 80076d0:	2207      	movs	r2, #7
 80076d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076d4:	e009      	b.n	80076ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80076d6:	4b2c      	ldr	r3, [pc, #176]	; (8007788 <xPortStartScheduler+0xe8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3b01      	subs	r3, #1
 80076dc:	4a2a      	ldr	r2, [pc, #168]	; (8007788 <xPortStartScheduler+0xe8>)
 80076de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	d0ef      	beq.n	80076d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <xPortStartScheduler+0xe8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f1c3 0307 	rsb	r3, r3, #7
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d00b      	beq.n	800771a <xPortStartScheduler+0x7a>
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	b672      	cpsid	i
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	b662      	cpsie	i
 8007716:	60bb      	str	r3, [r7, #8]
 8007718:	e7fe      	b.n	8007718 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800771a:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <xPortStartScheduler+0xe8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	4a19      	ldr	r2, [pc, #100]	; (8007788 <xPortStartScheduler+0xe8>)
 8007722:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007724:	4b18      	ldr	r3, [pc, #96]	; (8007788 <xPortStartScheduler+0xe8>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800772c:	4a16      	ldr	r2, [pc, #88]	; (8007788 <xPortStartScheduler+0xe8>)
 800772e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007738:	4b14      	ldr	r3, [pc, #80]	; (800778c <xPortStartScheduler+0xec>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a13      	ldr	r2, [pc, #76]	; (800778c <xPortStartScheduler+0xec>)
 800773e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007742:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <xPortStartScheduler+0xec>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a10      	ldr	r2, [pc, #64]	; (800778c <xPortStartScheduler+0xec>)
 800774a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800774e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007750:	f000 f8d4 	bl	80078fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <xPortStartScheduler+0xf0>)
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800775a:	f000 f8f3 	bl	8007944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800775e:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <xPortStartScheduler+0xf4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a0c      	ldr	r2, [pc, #48]	; (8007794 <xPortStartScheduler+0xf4>)
 8007764:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007768:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800776a:	f7ff ff85 	bl	8007678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800776e:	f7ff fd77 	bl	8007260 <vTaskSwitchContext>
	prvTaskExitError();
 8007772:	f7ff ff3d 	bl	80075f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	e000e400 	.word	0xe000e400
 8007784:	20000b84 	.word	0x20000b84
 8007788:	20000b88 	.word	0x20000b88
 800778c:	e000ed20 	.word	0xe000ed20
 8007790:	20000004 	.word	0x20000004
 8007794:	e000ef34 	.word	0xe000ef34

08007798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	b672      	cpsid	i
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	b662      	cpsie	i
 80077b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077b4:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <vPortEnterCritical+0x5c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	4a0e      	ldr	r2, [pc, #56]	; (80077f4 <vPortEnterCritical+0x5c>)
 80077bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <vPortEnterCritical+0x5c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d110      	bne.n	80077e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077c6:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <vPortEnterCritical+0x60>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <vPortEnterCritical+0x50>
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	b672      	cpsid	i
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	b662      	cpsie	i
 80077e4:	603b      	str	r3, [r7, #0]
 80077e6:	e7fe      	b.n	80077e6 <vPortEnterCritical+0x4e>
	}
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	20000004 	.word	0x20000004
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007802:	4b12      	ldr	r3, [pc, #72]	; (800784c <vPortExitCritical+0x50>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <vPortExitCritical+0x26>
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	b672      	cpsid	i
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	b662      	cpsie	i
 800781e:	607b      	str	r3, [r7, #4]
 8007820:	e7fe      	b.n	8007820 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007822:	4b0a      	ldr	r3, [pc, #40]	; (800784c <vPortExitCritical+0x50>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3b01      	subs	r3, #1
 8007828:	4a08      	ldr	r2, [pc, #32]	; (800784c <vPortExitCritical+0x50>)
 800782a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800782c:	4b07      	ldr	r3, [pc, #28]	; (800784c <vPortExitCritical+0x50>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <vPortExitCritical+0x42>
 8007834:	2300      	movs	r3, #0
 8007836:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	20000004 	.word	0x20000004

08007850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007850:	f3ef 8009 	mrs	r0, PSP
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <pxCurrentTCBConst>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	f01e 0f10 	tst.w	lr, #16
 8007860:	bf08      	it	eq
 8007862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	6010      	str	r0, [r2, #0]
 800786c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007874:	b672      	cpsid	i
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	b662      	cpsie	i
 8007884:	f7ff fcec 	bl	8007260 <vTaskSwitchContext>
 8007888:	f04f 0000 	mov.w	r0, #0
 800788c:	f380 8811 	msr	BASEPRI, r0
 8007890:	bc09      	pop	{r0, r3}
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	6808      	ldr	r0, [r1, #0]
 8007896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789a:	f01e 0f10 	tst.w	lr, #16
 800789e:	bf08      	it	eq
 80078a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078a4:	f380 8809 	msr	PSP, r0
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <pxCurrentTCBConst>:
 80078b0:	20000a58 	.word	0x20000a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop

080078b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	b672      	cpsid	i
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	b662      	cpsie	i
 80078d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078d4:	f7ff fc06 	bl	80070e4 <xTaskIncrementTick>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078de:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <xPortSysTickHandler+0x40>)
 80078e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <vPortSetupTimerInterrupt+0x34>)
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007906:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <vPortSetupTimerInterrupt+0x38>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800790c:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <vPortSetupTimerInterrupt+0x3c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a0a      	ldr	r2, [pc, #40]	; (800793c <vPortSetupTimerInterrupt+0x40>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	099b      	lsrs	r3, r3, #6
 8007918:	4a09      	ldr	r2, [pc, #36]	; (8007940 <vPortSetupTimerInterrupt+0x44>)
 800791a:	3b01      	subs	r3, #1
 800791c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800791e:	4b04      	ldr	r3, [pc, #16]	; (8007930 <vPortSetupTimerInterrupt+0x34>)
 8007920:	2207      	movs	r2, #7
 8007922:	601a      	str	r2, [r3, #0]
}
 8007924:	bf00      	nop
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	e000e010 	.word	0xe000e010
 8007934:	e000e018 	.word	0xe000e018
 8007938:	20000008 	.word	0x20000008
 800793c:	10624dd3 	.word	0x10624dd3
 8007940:	e000e014 	.word	0xe000e014

08007944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007954 <vPortEnableVFP+0x10>
 8007948:	6801      	ldr	r1, [r0, #0]
 800794a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800794e:	6001      	str	r1, [r0, #0]
 8007950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007952:	bf00      	nop
 8007954:	e000ed88 	.word	0xe000ed88

08007958 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800795e:	463b      	mov	r3, r7
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	605a      	str	r2, [r3, #4]
 8007966:	609a      	str	r2, [r3, #8]
 8007968:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800796a:	4b8a      	ldr	r3, [pc, #552]	; (8007b94 <MX_ADC1_Init+0x23c>)
 800796c:	4a8a      	ldr	r2, [pc, #552]	; (8007b98 <MX_ADC1_Init+0x240>)
 800796e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007970:	4b88      	ldr	r3, [pc, #544]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007972:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007976:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007978:	4b86      	ldr	r3, [pc, #536]	; (8007b94 <MX_ADC1_Init+0x23c>)
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800797e:	4b85      	ldr	r3, [pc, #532]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007980:	2201      	movs	r2, #1
 8007982:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007984:	4b83      	ldr	r3, [pc, #524]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007986:	2201      	movs	r2, #1
 8007988:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800798a:	4b82      	ldr	r3, [pc, #520]	; (8007b94 <MX_ADC1_Init+0x23c>)
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007992:	4b80      	ldr	r3, [pc, #512]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007994:	2200      	movs	r2, #0
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007998:	4b7e      	ldr	r3, [pc, #504]	; (8007b94 <MX_ADC1_Init+0x23c>)
 800799a:	4a80      	ldr	r2, [pc, #512]	; (8007b9c <MX_ADC1_Init+0x244>)
 800799c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800799e:	4b7d      	ldr	r3, [pc, #500]	; (8007b94 <MX_ADC1_Init+0x23c>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80079a4:	4b7b      	ldr	r3, [pc, #492]	; (8007b94 <MX_ADC1_Init+0x23c>)
 80079a6:	2210      	movs	r2, #16
 80079a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80079aa:	4b7a      	ldr	r3, [pc, #488]	; (8007b94 <MX_ADC1_Init+0x23c>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80079b2:	4b78      	ldr	r3, [pc, #480]	; (8007b94 <MX_ADC1_Init+0x23c>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80079b8:	4876      	ldr	r0, [pc, #472]	; (8007b94 <MX_ADC1_Init+0x23c>)
 80079ba:	f7f9 fb39 	bl	8001030 <HAL_ADC_Init>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80079c4:	f000 fe14 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80079cc:	2301      	movs	r3, #1
 80079ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80079d0:	2307      	movs	r3, #7
 80079d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80079d4:	463b      	mov	r3, r7
 80079d6:	4619      	mov	r1, r3
 80079d8:	486e      	ldr	r0, [pc, #440]	; (8007b94 <MX_ADC1_Init+0x23c>)
 80079da:	f7f9 fc79 	bl	80012d0 <HAL_ADC_ConfigChannel>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80079e4:	f000 fe04 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80079e8:	2301      	movs	r3, #1
 80079ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80079ec:	2302      	movs	r3, #2
 80079ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80079f0:	463b      	mov	r3, r7
 80079f2:	4619      	mov	r1, r3
 80079f4:	4867      	ldr	r0, [pc, #412]	; (8007b94 <MX_ADC1_Init+0x23c>)
 80079f6:	f7f9 fc6b 	bl	80012d0 <HAL_ADC_ConfigChannel>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007a00:	f000 fdf6 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007a04:	2302      	movs	r3, #2
 8007a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4860      	ldr	r0, [pc, #384]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007a12:	f7f9 fc5d 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8007a1c:	f000 fde8 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007a20:	2303      	movs	r3, #3
 8007a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007a24:	2304      	movs	r3, #4
 8007a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007a28:	463b      	mov	r3, r7
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4859      	ldr	r0, [pc, #356]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007a2e:	f7f9 fc4f 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8007a38:	f000 fdda 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007a40:	2305      	movs	r3, #5
 8007a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007a44:	463b      	mov	r3, r7
 8007a46:	4619      	mov	r1, r3
 8007a48:	4852      	ldr	r0, [pc, #328]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007a4a:	f7f9 fc41 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8007a54:	f000 fdcc 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007a58:	2305      	movs	r3, #5
 8007a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007a5c:	2306      	movs	r3, #6
 8007a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007a60:	463b      	mov	r3, r7
 8007a62:	4619      	mov	r1, r3
 8007a64:	484b      	ldr	r0, [pc, #300]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007a66:	f7f9 fc33 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8007a70:	f000 fdbe 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8007a74:	2306      	movs	r3, #6
 8007a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8007a78:	2307      	movs	r3, #7
 8007a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4844      	ldr	r0, [pc, #272]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007a82:	f7f9 fc25 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8007a8c:	f000 fdb0 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8007a90:	2307      	movs	r3, #7
 8007a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8007a94:	2308      	movs	r3, #8
 8007a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007a98:	463b      	mov	r3, r7
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	483d      	ldr	r0, [pc, #244]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007a9e:	f7f9 fc17 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8007aa8:	f000 fda2 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007aac:	2308      	movs	r3, #8
 8007aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8007ab0:	2309      	movs	r3, #9
 8007ab2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ab4:	463b      	mov	r3, r7
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4836      	ldr	r0, [pc, #216]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007aba:	f7f9 fc09 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8007ac4:	f000 fd94 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007ac8:	2309      	movs	r3, #9
 8007aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8007acc:	230a      	movs	r3, #10
 8007ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	482f      	ldr	r0, [pc, #188]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007ad6:	f7f9 fbfb 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8007ae0:	f000 fd86 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8007ae4:	230a      	movs	r3, #10
 8007ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8007ae8:	230b      	movs	r3, #11
 8007aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007aec:	463b      	mov	r3, r7
 8007aee:	4619      	mov	r1, r3
 8007af0:	4828      	ldr	r0, [pc, #160]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007af2:	f7f9 fbed 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8007afc:	f000 fd78 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8007b00:	230b      	movs	r3, #11
 8007b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8007b04:	230c      	movs	r3, #12
 8007b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b08:	463b      	mov	r3, r7
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4821      	ldr	r0, [pc, #132]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007b0e:	f7f9 fbdf 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8007b18:	f000 fd6a 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8007b20:	230d      	movs	r3, #13
 8007b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b24:	463b      	mov	r3, r7
 8007b26:	4619      	mov	r1, r3
 8007b28:	481a      	ldr	r0, [pc, #104]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007b2a:	f7f9 fbd1 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8007b34:	f000 fd5c 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8007b38:	230d      	movs	r3, #13
 8007b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8007b3c:	230e      	movs	r3, #14
 8007b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b40:	463b      	mov	r3, r7
 8007b42:	4619      	mov	r1, r3
 8007b44:	4813      	ldr	r0, [pc, #76]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007b46:	f7f9 fbc3 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8007b50:	f000 fd4e 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007b54:	230e      	movs	r3, #14
 8007b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8007b58:	230f      	movs	r3, #15
 8007b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	4619      	mov	r1, r3
 8007b60:	480c      	ldr	r0, [pc, #48]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007b62:	f7f9 fbb5 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8007b6c:	f000 fd40 	bl	80085f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007b70:	230f      	movs	r3, #15
 8007b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8007b74:	2310      	movs	r3, #16
 8007b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b78:	463b      	mov	r3, r7
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4805      	ldr	r0, [pc, #20]	; (8007b94 <MX_ADC1_Init+0x23c>)
 8007b7e:	f7f9 fba7 	bl	80012d0 <HAL_ADC_ConfigChannel>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8007b88:	f000 fd32 	bl	80085f0 <Error_Handler>
  }

}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	200019b8 	.word	0x200019b8
 8007b98:	40012000 	.word	0x40012000
 8007b9c:	0f000001 	.word	0x0f000001

08007ba0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08c      	sub	sp, #48	; 0x30
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ba8:	f107 031c 	add.w	r3, r7, #28
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	605a      	str	r2, [r3, #4]
 8007bb2:	609a      	str	r2, [r3, #8]
 8007bb4:	60da      	str	r2, [r3, #12]
 8007bb6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a45      	ldr	r2, [pc, #276]	; (8007cd4 <HAL_ADC_MspInit+0x134>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	f040 8084 	bne.w	8007ccc <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007bc4:	4b44      	ldr	r3, [pc, #272]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc8:	4a43      	ldr	r2, [pc, #268]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bce:	6453      	str	r3, [r2, #68]	; 0x44
 8007bd0:	4b41      	ldr	r3, [pc, #260]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bdc:	4b3e      	ldr	r3, [pc, #248]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be0:	4a3d      	ldr	r2, [pc, #244]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007be2:	f043 0304 	orr.w	r3, r3, #4
 8007be6:	6313      	str	r3, [r2, #48]	; 0x30
 8007be8:	4b3b      	ldr	r3, [pc, #236]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bf4:	4b38      	ldr	r3, [pc, #224]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf8:	4a37      	ldr	r2, [pc, #220]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007bfa:	f043 0301 	orr.w	r3, r3, #1
 8007bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8007c00:	4b35      	ldr	r3, [pc, #212]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c0c:	4b32      	ldr	r3, [pc, #200]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	4a31      	ldr	r2, [pc, #196]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007c12:	f043 0302 	orr.w	r3, r3, #2
 8007c16:	6313      	str	r3, [r2, #48]	; 0x30
 8007c18:	4b2f      	ldr	r3, [pc, #188]	; (8007cd8 <HAL_ADC_MspInit+0x138>)
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A10_Pin|A11_Pin|A12_Pin|A13_Pin 
 8007c24:	233f      	movs	r3, #63	; 0x3f
 8007c26:	61fb      	str	r3, [r7, #28]
                          |A14_Pin|A15_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c30:	f107 031c 	add.w	r3, r7, #28
 8007c34:	4619      	mov	r1, r3
 8007c36:	4829      	ldr	r0, [pc, #164]	; (8007cdc <HAL_ADC_MspInit+0x13c>)
 8007c38:	f7fa fae4 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8007c3c:	23ff      	movs	r3, #255	; 0xff
 8007c3e:	61fb      	str	r3, [r7, #28]
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c40:	2303      	movs	r3, #3
 8007c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c48:	f107 031c 	add.w	r3, r7, #28
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4824      	ldr	r0, [pc, #144]	; (8007ce0 <HAL_ADC_MspInit+0x140>)
 8007c50:	f7fa fad8 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A8_Pin|A9_Pin;
 8007c54:	2303      	movs	r3, #3
 8007c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c60:	f107 031c 	add.w	r3, r7, #28
 8007c64:	4619      	mov	r1, r3
 8007c66:	481f      	ldr	r0, [pc, #124]	; (8007ce4 <HAL_ADC_MspInit+0x144>)
 8007c68:	f7fa facc 	bl	8002204 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007c6e:	4a1f      	ldr	r2, [pc, #124]	; (8007cec <HAL_ADC_MspInit+0x14c>)
 8007c70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007c72:	4b1d      	ldr	r3, [pc, #116]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c78:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007c84:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007c8c:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007c94:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007c9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007c9c:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ca2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007ca4:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007caa:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007cb0:	480d      	ldr	r0, [pc, #52]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007cb2:	f7f9 fe9f 	bl	80019f4 <HAL_DMA_Init>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8007cbc:	f000 fc98 	bl	80085f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8007cc6:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <HAL_ADC_MspInit+0x148>)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007ccc:	bf00      	nop
 8007cce:	3730      	adds	r7, #48	; 0x30
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40012000 	.word	0x40012000
 8007cd8:	40023800 	.word	0x40023800
 8007cdc:	40020800 	.word	0x40020800
 8007ce0:	40020000 	.word	0x40020000
 8007ce4:	40020400 	.word	0x40020400
 8007ce8:	20001a00 	.word	0x20001a00
 8007cec:	40026470 	.word	0x40026470

08007cf0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007cf6:	4b3a      	ldr	r3, [pc, #232]	; (8007de0 <MX_DMA_Init+0xf0>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	4a39      	ldr	r2, [pc, #228]	; (8007de0 <MX_DMA_Init+0xf0>)
 8007cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d00:	6313      	str	r3, [r2, #48]	; 0x30
 8007d02:	4b37      	ldr	r3, [pc, #220]	; (8007de0 <MX_DMA_Init+0xf0>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d0a:	607b      	str	r3, [r7, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007d0e:	4b34      	ldr	r3, [pc, #208]	; (8007de0 <MX_DMA_Init+0xf0>)
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	4a33      	ldr	r2, [pc, #204]	; (8007de0 <MX_DMA_Init+0xf0>)
 8007d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d18:	6313      	str	r3, [r2, #48]	; 0x30
 8007d1a:	4b31      	ldr	r3, [pc, #196]	; (8007de0 <MX_DMA_Init+0xf0>)
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8007d26:	2200      	movs	r2, #0
 8007d28:	2105      	movs	r1, #5
 8007d2a:	200b      	movs	r0, #11
 8007d2c:	f7f9 fe38 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007d30:	200b      	movs	r0, #11
 8007d32:	f7f9 fe51 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8007d36:	2200      	movs	r2, #0
 8007d38:	2105      	movs	r1, #5
 8007d3a:	200c      	movs	r0, #12
 8007d3c:	f7f9 fe30 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007d40:	200c      	movs	r0, #12
 8007d42:	f7f9 fe49 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2105      	movs	r1, #5
 8007d4a:	200d      	movs	r0, #13
 8007d4c:	f7f9 fe28 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8007d50:	200d      	movs	r0, #13
 8007d52:	f7f9 fe41 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8007d56:	2200      	movs	r2, #0
 8007d58:	2105      	movs	r1, #5
 8007d5a:	200f      	movs	r0, #15
 8007d5c:	f7f9 fe20 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007d60:	200f      	movs	r0, #15
 8007d62:	f7f9 fe39 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8007d66:	2200      	movs	r2, #0
 8007d68:	2105      	movs	r1, #5
 8007d6a:	2010      	movs	r0, #16
 8007d6c:	f7f9 fe18 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007d70:	2010      	movs	r0, #16
 8007d72:	f7f9 fe31 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8007d76:	2200      	movs	r2, #0
 8007d78:	2105      	movs	r1, #5
 8007d7a:	202f      	movs	r0, #47	; 0x2f
 8007d7c:	f7f9 fe10 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8007d80:	202f      	movs	r0, #47	; 0x2f
 8007d82:	f7f9 fe29 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8007d86:	2200      	movs	r2, #0
 8007d88:	2105      	movs	r1, #5
 8007d8a:	2038      	movs	r0, #56	; 0x38
 8007d8c:	f7f9 fe08 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007d90:	2038      	movs	r0, #56	; 0x38
 8007d92:	f7f9 fe21 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8007d96:	2200      	movs	r2, #0
 8007d98:	2105      	movs	r1, #5
 8007d9a:	2039      	movs	r0, #57	; 0x39
 8007d9c:	f7f9 fe00 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007da0:	2039      	movs	r0, #57	; 0x39
 8007da2:	f7f9 fe19 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2105      	movs	r1, #5
 8007daa:	203a      	movs	r0, #58	; 0x3a
 8007dac:	f7f9 fdf8 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007db0:	203a      	movs	r0, #58	; 0x3a
 8007db2:	f7f9 fe11 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8007db6:	2200      	movs	r2, #0
 8007db8:	2105      	movs	r1, #5
 8007dba:	203b      	movs	r0, #59	; 0x3b
 8007dbc:	f7f9 fdf0 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007dc0:	203b      	movs	r0, #59	; 0x3b
 8007dc2:	f7f9 fe09 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2105      	movs	r1, #5
 8007dca:	203c      	movs	r0, #60	; 0x3c
 8007dcc:	f7f9 fde8 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8007dd0:	203c      	movs	r0, #60	; 0x3c
 8007dd2:	f7f9 fe01 	bl	80019d8 <HAL_NVIC_EnableIRQ>

}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40023800 	.word	0x40023800

08007de4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a07      	ldr	r2, [pc, #28]	; (8007e10 <vApplicationGetIdleTaskMemory+0x2c>)
 8007df4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4a06      	ldr	r2, [pc, #24]	; (8007e14 <vApplicationGetIdleTaskMemory+0x30>)
 8007dfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2280      	movs	r2, #128	; 0x80
 8007e00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8007e02:	bf00      	nop
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000b8c 	.word	0x20000b8c
 8007e14:	20000be0 	.word	0x20000be0

08007e18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007e18:	b5b0      	push	{r4, r5, r7, lr}
 8007e1a:	b08e      	sub	sp, #56	; 0x38
 8007e1c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 8007e1e:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <MX_FREERTOS_Init+0x58>)
 8007e20:	f107 041c 	add.w	r4, r7, #28
 8007e24:	461d      	mov	r5, r3
 8007e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 8007e32:	f107 031c 	add.w	r3, r7, #28
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe fd8b 	bl	8006954 <osThreadCreate>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <MX_FREERTOS_Init+0x5c>)
 8007e42:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <MX_FREERTOS_Init+0x60>)
 8007e46:	463c      	mov	r4, r7
 8007e48:	461d      	mov	r5, r3
 8007e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8007e56:	463b      	mov	r3, r7
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fd7a 	bl	8006954 <osThreadCreate>
 8007e60:	4602      	mov	r2, r0
 8007e62:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <MX_FREERTOS_Init+0x64>)
 8007e64:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007e66:	bf00      	nop
 8007e68:	3738      	adds	r7, #56	; 0x38
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	0801448c 	.word	0x0801448c
 8007e74:	20005a60 	.word	0x20005a60
 8007e78:	080144b4 	.word	0x080144b4
 8007e7c:	20005ab8 	.word	0x20005ab8

08007e80 <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    
    
    

  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8007e88:	f7ff f91c 	bl	80070c4 <xTaskGetTickCount>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 8007e90:	2301      	movs	r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <sendTaskFunc+0x44>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	4a0a      	ldr	r2, [pc, #40]	; (8007ec4 <sendTaskFunc+0x44>)
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <sendTaskFunc+0x44>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <sendTaskFunc+0x48>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	db04      	blt.n	8007eb4 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <sendTaskFunc+0x44>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 8007eb0:	f006 f8c4 	bl	800e03c <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 8007eb4:	f107 0308 	add.w	r3, r7, #8
 8007eb8:	68f9      	ldr	r1, [r7, #12]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe ff74 	bl	8006da8 <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 8007ec0:	e7e8      	b.n	8007e94 <sendTaskFunc+0x14>
 8007ec2:	bf00      	nop
 8007ec4:	20000de0 	.word	0x20000de0
 8007ec8:	20000214 	.word	0x20000214

08007ecc <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8007ed4:	f7ff f8f6 	bl	80070c4 <xTaskGetTickCount>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 8007edc:	2301      	movs	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 8007ee0:	f002 fcb6 	bl	800a850 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_TerminalHandler();
 8007ee4:	f005 fbea 	bl	800d6bc <Usart_TerminalHandler>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 8007ee8:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <controlTaskFunc+0x4c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3301      	adds	r3, #1
 8007eee:	4a0a      	ldr	r2, [pc, #40]	; (8007f18 <controlTaskFunc+0x4c>)
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	4b09      	ldr	r3, [pc, #36]	; (8007f18 <controlTaskFunc+0x4c>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <controlTaskFunc+0x50>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	db04      	blt.n	8007f08 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 8007efe:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <controlTaskFunc+0x4c>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
		loop();
 8007f04:	f005 ff38 	bl	800dd78 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 8007f08:	f107 0308 	add.w	r3, r7, #8
 8007f0c:	68f9      	ldr	r1, [r7, #12]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe ff4a 	bl	8006da8 <vTaskDelayUntil>
			ADBoard_updateVoltage();
 8007f14:	e7e4      	b.n	8007ee0 <controlTaskFunc+0x14>
 8007f16:	bf00      	nop
 8007f18:	20000de4 	.word	0x20000de4
 8007f1c:	20000210 	.word	0x20000210

08007f20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08c      	sub	sp, #48	; 0x30
 8007f24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f26:	f107 031c 	add.w	r3, r7, #28
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	605a      	str	r2, [r3, #4]
 8007f30:	609a      	str	r2, [r3, #8]
 8007f32:	60da      	str	r2, [r3, #12]
 8007f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007f36:	4b8f      	ldr	r3, [pc, #572]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	4a8e      	ldr	r2, [pc, #568]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f3c:	f043 0310 	orr.w	r3, r3, #16
 8007f40:	6313      	str	r3, [r2, #48]	; 0x30
 8007f42:	4b8c      	ldr	r3, [pc, #560]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	61bb      	str	r3, [r7, #24]
 8007f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f4e:	4b89      	ldr	r3, [pc, #548]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	4a88      	ldr	r2, [pc, #544]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f54:	f043 0304 	orr.w	r3, r3, #4
 8007f58:	6313      	str	r3, [r2, #48]	; 0x30
 8007f5a:	4b86      	ldr	r3, [pc, #536]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	f003 0304 	and.w	r3, r3, #4
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007f66:	4b83      	ldr	r3, [pc, #524]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	4a82      	ldr	r2, [pc, #520]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f6c:	f043 0320 	orr.w	r3, r3, #32
 8007f70:	6313      	str	r3, [r2, #48]	; 0x30
 8007f72:	4b80      	ldr	r3, [pc, #512]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	613b      	str	r3, [r7, #16]
 8007f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f7e:	4b7d      	ldr	r3, [pc, #500]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	4a7c      	ldr	r2, [pc, #496]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f84:	f043 0301 	orr.w	r3, r3, #1
 8007f88:	6313      	str	r3, [r2, #48]	; 0x30
 8007f8a:	4b7a      	ldr	r3, [pc, #488]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f96:	4b77      	ldr	r3, [pc, #476]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	4a76      	ldr	r2, [pc, #472]	; (8008174 <MX_GPIO_Init+0x254>)
 8007f9c:	f043 0302 	orr.w	r3, r3, #2
 8007fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8007fa2:	4b74      	ldr	r3, [pc, #464]	; (8008174 <MX_GPIO_Init+0x254>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007fae:	4b71      	ldr	r3, [pc, #452]	; (8008174 <MX_GPIO_Init+0x254>)
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	4a70      	ldr	r2, [pc, #448]	; (8008174 <MX_GPIO_Init+0x254>)
 8007fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8007fba:	4b6e      	ldr	r3, [pc, #440]	; (8008174 <MX_GPIO_Init+0x254>)
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc2:	607b      	str	r3, [r7, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fc6:	4b6b      	ldr	r3, [pc, #428]	; (8008174 <MX_GPIO_Init+0x254>)
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fca:	4a6a      	ldr	r2, [pc, #424]	; (8008174 <MX_GPIO_Init+0x254>)
 8007fcc:	f043 0308 	orr.w	r3, r3, #8
 8007fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8007fd2:	4b68      	ldr	r3, [pc, #416]	; (8008174 <MX_GPIO_Init+0x254>)
 8007fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd6:	f003 0308 	and.w	r3, r3, #8
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_6_Pin|DO_1_Pin|DO_13_Pin|DO_14_Pin 
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f249 519b 	movw	r1, #38299	; 0x959b
 8007fe4:	4864      	ldr	r0, [pc, #400]	; (8008178 <MX_GPIO_Init+0x258>)
 8007fe6:	f7fa fab7 	bl	8002558 <HAL_GPIO_WritePin>
                          |DO_15_Pin|DO_16_Pin|DO_17_Pin|DO_10_Pin 
                          |DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO_2_GPIO_Port, DO_2_Pin, GPIO_PIN_RESET);
 8007fea:	2200      	movs	r2, #0
 8007fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ff0:	4862      	ldr	r0, [pc, #392]	; (800817c <MX_GPIO_Init+0x25c>)
 8007ff2:	f7fa fab1 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_5_Pin|DO_0_Pin|DO_7_Pin|DO_8_Pin 
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f244 413c 	movw	r1, #17468	; 0x443c
 8007ffc:	4860      	ldr	r0, [pc, #384]	; (8008180 <MX_GPIO_Init+0x260>)
 8007ffe:	f7fa faab 	bl	8002558 <HAL_GPIO_WritePin>
                          |DO_9_Pin|DO_12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_18_Pin|DO_19_Pin|DO_4_Pin|DO_3_Pin, GPIO_PIN_RESET);
 8008002:	2200      	movs	r2, #0
 8008004:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8008008:	485e      	ldr	r0, [pc, #376]	; (8008184 <MX_GPIO_Init+0x264>)
 800800a:	f7fa faa5 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI4_CS_Pin|SPI6_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800800e:	2200      	movs	r2, #0
 8008010:	f640 4102 	movw	r1, #3074	; 0xc02
 8008014:	485c      	ldr	r0, [pc, #368]	; (8008188 <MX_GPIO_Init+0x268>)
 8008016:	f7fa fa9f 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800801a:	2200      	movs	r2, #0
 800801c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008020:	485a      	ldr	r0, [pc, #360]	; (800818c <MX_GPIO_Init+0x26c>)
 8008022:	f7fa fa99 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = DO_6_Pin|DO_1_Pin|DO_13_Pin|DO_14_Pin 
 8008026:	f249 539b 	movw	r3, #38299	; 0x959b
 800802a:	61fb      	str	r3, [r7, #28]
                          |DO_15_Pin|DO_16_Pin|DO_17_Pin|DO_10_Pin 
                          |DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800802c:	2301      	movs	r3, #1
 800802e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008030:	2300      	movs	r3, #0
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008034:	2300      	movs	r3, #0
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008038:	f107 031c 	add.w	r3, r7, #28
 800803c:	4619      	mov	r1, r3
 800803e:	484e      	ldr	r0, [pc, #312]	; (8008178 <MX_GPIO_Init+0x258>)
 8008040:	f7fa f8e0 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DO_2_Pin;
 8008044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800804a:	2301      	movs	r3, #1
 800804c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804e:	2300      	movs	r3, #0
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008052:	2300      	movs	r3, #0
 8008054:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DO_2_GPIO_Port, &GPIO_InitStruct);
 8008056:	f107 031c 	add.w	r3, r7, #28
 800805a:	4619      	mov	r1, r3
 800805c:	4847      	ldr	r0, [pc, #284]	; (800817c <MX_GPIO_Init+0x25c>)
 800805e:	f7fa f8d1 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_5_Pin|DO_0_Pin|DO_7_Pin|DO_8_Pin 
 8008062:	f244 433c 	movw	r3, #17468	; 0x443c
 8008066:	61fb      	str	r3, [r7, #28]
                          |DO_9_Pin|DO_12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008068:	2301      	movs	r3, #1
 800806a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806c:	2300      	movs	r3, #0
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008070:	2300      	movs	r3, #0
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008074:	f107 031c 	add.w	r3, r7, #28
 8008078:	4619      	mov	r1, r3
 800807a:	4841      	ldr	r0, [pc, #260]	; (8008180 <MX_GPIO_Init+0x260>)
 800807c:	f7fa f8c2 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 8008080:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8008084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008086:	2300      	movs	r3, #0
 8008088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800808a:	2300      	movs	r3, #0
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800808e:	f107 031c 	add.w	r3, r7, #28
 8008092:	4619      	mov	r1, r3
 8008094:	483a      	ldr	r0, [pc, #232]	; (8008180 <MX_GPIO_Init+0x260>)
 8008096:	f7fa f8b5 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 800809a:	23ff      	movs	r3, #255	; 0xff
 800809c:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin|E6_Pin|E7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800809e:	4b3c      	ldr	r3, [pc, #240]	; (8008190 <MX_GPIO_Init+0x270>)
 80080a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080a6:	f107 031c 	add.w	r3, r7, #28
 80080aa:	4619      	mov	r1, r3
 80080ac:	4839      	ldr	r0, [pc, #228]	; (8008194 <MX_GPIO_Init+0x274>)
 80080ae:	f7fa f8a9 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DO_18_Pin|DO_19_Pin|DO_4_Pin|DO_3_Pin;
 80080b2:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 80080b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080b8:	2301      	movs	r3, #1
 80080ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080c0:	2300      	movs	r3, #0
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080c4:	f107 031c 	add.w	r3, r7, #28
 80080c8:	4619      	mov	r1, r3
 80080ca:	482e      	ldr	r0, [pc, #184]	; (8008184 <MX_GPIO_Init+0x264>)
 80080cc:	f7fa f89a 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|SPI6_CS_Pin|SPI3_CS_Pin;
 80080d0:	f640 4302 	movw	r3, #3074	; 0xc02
 80080d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080d6:	2301      	movs	r3, #1
 80080d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080da:	2301      	movs	r3, #1
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080de:	2300      	movs	r3, #0
 80080e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080e2:	f107 031c 	add.w	r3, r7, #28
 80080e6:	4619      	mov	r1, r3
 80080e8:	4827      	ldr	r0, [pc, #156]	; (8008188 <MX_GPIO_Init+0x268>)
 80080ea:	f7fa f88b 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80080ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080f4:	2301      	movs	r3, #1
 80080f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080fc:	2300      	movs	r3, #0
 80080fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008100:	f107 031c 	add.w	r3, r7, #28
 8008104:	4619      	mov	r1, r3
 8008106:	4821      	ldr	r0, [pc, #132]	; (800818c <MX_GPIO_Init+0x26c>)
 8008108:	f7fa f87c 	bl	8002204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800810c:	2200      	movs	r2, #0
 800810e:	2105      	movs	r1, #5
 8008110:	2006      	movs	r0, #6
 8008112:	f7f9 fc45 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008116:	2006      	movs	r0, #6
 8008118:	f7f9 fc5e 	bl	80019d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800811c:	2200      	movs	r2, #0
 800811e:	2105      	movs	r1, #5
 8008120:	2007      	movs	r0, #7
 8008122:	f7f9 fc3d 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8008126:	2007      	movs	r0, #7
 8008128:	f7f9 fc56 	bl	80019d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800812c:	2200      	movs	r2, #0
 800812e:	2105      	movs	r1, #5
 8008130:	2008      	movs	r0, #8
 8008132:	f7f9 fc35 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8008136:	2008      	movs	r0, #8
 8008138:	f7f9 fc4e 	bl	80019d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800813c:	2200      	movs	r2, #0
 800813e:	2105      	movs	r1, #5
 8008140:	2009      	movs	r0, #9
 8008142:	f7f9 fc2d 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8008146:	2009      	movs	r0, #9
 8008148:	f7f9 fc46 	bl	80019d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800814c:	2200      	movs	r2, #0
 800814e:	2105      	movs	r1, #5
 8008150:	200a      	movs	r0, #10
 8008152:	f7f9 fc25 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8008156:	200a      	movs	r0, #10
 8008158:	f7f9 fc3e 	bl	80019d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800815c:	2200      	movs	r2, #0
 800815e:	2105      	movs	r1, #5
 8008160:	2017      	movs	r0, #23
 8008162:	f7f9 fc1d 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008166:	2017      	movs	r0, #23
 8008168:	f7f9 fc36 	bl	80019d8 <HAL_NVIC_EnableIRQ>

}
 800816c:	bf00      	nop
 800816e:	3730      	adds	r7, #48	; 0x30
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40023800 	.word	0x40023800
 8008178:	40021000 	.word	0x40021000
 800817c:	40020800 	.word	0x40020800
 8008180:	40021400 	.word	0x40021400
 8008184:	40020400 	.word	0x40020400
 8008188:	40020c00 	.word	0x40020c00
 800818c:	40020000 	.word	0x40020000
 8008190:	10210000 	.word	0x10210000
 8008194:	40021800 	.word	0x40021800

08008198 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800819c:	4b1b      	ldr	r3, [pc, #108]	; (800820c <MX_I2C2_Init+0x74>)
 800819e:	4a1c      	ldr	r2, [pc, #112]	; (8008210 <MX_I2C2_Init+0x78>)
 80081a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A01B56;
 80081a2:	4b1a      	ldr	r3, [pc, #104]	; (800820c <MX_I2C2_Init+0x74>)
 80081a4:	4a1b      	ldr	r2, [pc, #108]	; (8008214 <MX_I2C2_Init+0x7c>)
 80081a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80081a8:	4b18      	ldr	r3, [pc, #96]	; (800820c <MX_I2C2_Init+0x74>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80081ae:	4b17      	ldr	r3, [pc, #92]	; (800820c <MX_I2C2_Init+0x74>)
 80081b0:	2201      	movs	r2, #1
 80081b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80081b4:	4b15      	ldr	r3, [pc, #84]	; (800820c <MX_I2C2_Init+0x74>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80081ba:	4b14      	ldr	r3, [pc, #80]	; (800820c <MX_I2C2_Init+0x74>)
 80081bc:	2200      	movs	r2, #0
 80081be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80081c0:	4b12      	ldr	r3, [pc, #72]	; (800820c <MX_I2C2_Init+0x74>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80081c6:	4b11      	ldr	r3, [pc, #68]	; (800820c <MX_I2C2_Init+0x74>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <MX_I2C2_Init+0x74>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80081d2:	480e      	ldr	r0, [pc, #56]	; (800820c <MX_I2C2_Init+0x74>)
 80081d4:	f7fa f9f2 	bl	80025bc <HAL_I2C_Init>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80081de:	f000 fa07 	bl	80085f0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80081e2:	2100      	movs	r1, #0
 80081e4:	4809      	ldr	r0, [pc, #36]	; (800820c <MX_I2C2_Init+0x74>)
 80081e6:	f7fa fa79 	bl	80026dc <HAL_I2CEx_ConfigAnalogFilter>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80081f0:	f000 f9fe 	bl	80085f0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80081f4:	2100      	movs	r1, #0
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <MX_I2C2_Init+0x74>)
 80081f8:	f7fa fabb 	bl	8002772 <HAL_I2CEx_ConfigDigitalFilter>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008202:	f000 f9f5 	bl	80085f0 <Error_Handler>
  }

}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20009b10 	.word	0x20009b10
 8008210:	40005800 	.word	0x40005800
 8008214:	00a01b56 	.word	0x00a01b56

08008218 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08a      	sub	sp, #40	; 0x28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008220:	f107 0314 	add.w	r3, r7, #20
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	609a      	str	r2, [r3, #8]
 800822c:	60da      	str	r2, [r3, #12]
 800822e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a2e      	ldr	r2, [pc, #184]	; (80082f0 <HAL_I2C_MspInit+0xd8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d156      	bne.n	80082e8 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800823a:	4b2e      	ldr	r3, [pc, #184]	; (80082f4 <HAL_I2C_MspInit+0xdc>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	4a2d      	ldr	r2, [pc, #180]	; (80082f4 <HAL_I2C_MspInit+0xdc>)
 8008240:	f043 0320 	orr.w	r3, r3, #32
 8008244:	6313      	str	r3, [r2, #48]	; 0x30
 8008246:	4b2b      	ldr	r3, [pc, #172]	; (80082f4 <HAL_I2C_MspInit+0xdc>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008252:	2303      	movs	r3, #3
 8008254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008256:	2312      	movs	r3, #18
 8008258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800825a:	2301      	movs	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800825e:	2303      	movs	r3, #3
 8008260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008262:	2304      	movs	r3, #4
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008266:	f107 0314 	add.w	r3, r7, #20
 800826a:	4619      	mov	r1, r3
 800826c:	4822      	ldr	r0, [pc, #136]	; (80082f8 <HAL_I2C_MspInit+0xe0>)
 800826e:	f7f9 ffc9 	bl	8002204 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008272:	4b20      	ldr	r3, [pc, #128]	; (80082f4 <HAL_I2C_MspInit+0xdc>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	4a1f      	ldr	r2, [pc, #124]	; (80082f4 <HAL_I2C_MspInit+0xdc>)
 8008278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800827c:	6413      	str	r3, [r2, #64]	; 0x40
 800827e:	4b1d      	ldr	r3, [pc, #116]	; (80082f4 <HAL_I2C_MspInit+0xdc>)
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800828a:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 800828c:	4a1c      	ldr	r2, [pc, #112]	; (8008300 <HAL_I2C_MspInit+0xe8>)
 800828e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8008290:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 8008292:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8008296:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008298:	4b18      	ldr	r3, [pc, #96]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 800829a:	2240      	movs	r2, #64	; 0x40
 800829c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800829e:	4b17      	ldr	r3, [pc, #92]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80082a4:	4b15      	ldr	r3, [pc, #84]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082aa:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082ac:	4b13      	ldr	r3, [pc, #76]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80082b8:	4b10      	ldr	r3, [pc, #64]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082c4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80082c6:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80082cc:	480b      	ldr	r0, [pc, #44]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082ce:	f7f9 fb91 	bl	80019f4 <HAL_DMA_Init>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 80082d8:	f000 f98a 	bl	80085f0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a07      	ldr	r2, [pc, #28]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
 80082e2:	4a06      	ldr	r2, [pc, #24]	; (80082fc <HAL_I2C_MspInit+0xe4>)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80082e8:	bf00      	nop
 80082ea:	3728      	adds	r7, #40	; 0x28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40005800 	.word	0x40005800
 80082f4:	40023800 	.word	0x40023800
 80082f8:	40021400 	.word	0x40021400
 80082fc:	20009b5c 	.word	0x20009b5c
 8008300:	400260b8 	.word	0x400260b8

08008304 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008308:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800830c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008310:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <SCB_EnableICache+0x3c>)
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800831c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <SCB_EnableICache+0x3c>)
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	4a06      	ldr	r2, [pc, #24]	; (8008340 <SCB_EnableICache+0x3c>)
 8008326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800832a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800832c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008330:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	e000ed00 	.word	0xe000ed00

08008344 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800834a:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <SCB_EnableDCache+0x7c>)
 800834c:	2200      	movs	r2, #0
 800834e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008352:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <SCB_EnableDCache+0x7c>)
 8008358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800835c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	0b5b      	lsrs	r3, r3, #13
 8008362:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008366:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	08db      	lsrs	r3, r3, #3
 800836c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008370:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800837a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008380:	490f      	ldr	r1, [pc, #60]	; (80083c0 <SCB_EnableDCache+0x7c>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	1e5a      	subs	r2, r3, #1
 800838c:	60ba      	str	r2, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1ef      	bne.n	8008372 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	1e5a      	subs	r2, r3, #1
 8008396:	60fa      	str	r2, [r7, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e5      	bne.n	8008368 <SCB_EnableDCache+0x24>
 800839c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <SCB_EnableDCache+0x7c>)
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	4a06      	ldr	r2, [pc, #24]	; (80083c0 <SCB_EnableDCache+0x7c>)
 80083a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083aa:	6153      	str	r3, [r2, #20]
 80083ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083b0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	e000ed00 	.word	0xe000ed00

080083c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80083c8:	f7ff ff9c 	bl	8008304 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80083cc:	f7ff ffba 	bl	8008344 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80083d0:	f7f8 fe00 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80083d4:	f000 f83e 	bl	8008454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80083d8:	f7ff fda2 	bl	8007f20 <MX_GPIO_Init>
  MX_DMA_Init();
 80083dc:	f7ff fc88 	bl	8007cf0 <MX_DMA_Init>
  MX_ADC1_Init();
 80083e0:	f7ff faba 	bl	8007958 <MX_ADC1_Init>
  MX_TIM1_Init();
 80083e4:	f000 fe3a 	bl	800905c <MX_TIM1_Init>
  MX_TIM2_Init();
 80083e8:	f000 ff0a 	bl	8009200 <MX_TIM2_Init>
  MX_TIM3_Init();
 80083ec:	f000 ffa0 	bl	8009330 <MX_TIM3_Init>
  MX_TIM4_Init();
 80083f0:	f001 f81a 	bl	8009428 <MX_TIM4_Init>
  MX_TIM7_Init();
 80083f4:	f001 f894 	bl	8009520 <MX_TIM7_Init>
  MX_TIM8_Init();
 80083f8:	f001 f8c8 	bl	800958c <MX_TIM8_Init>
  MX_TIM9_Init();
 80083fc:	f001 f980 	bl	8009700 <MX_TIM9_Init>
  MX_TIM10_Init();
 8008400:	f001 f9ec 	bl	80097dc <MX_TIM10_Init>
  MX_TIM11_Init();
 8008404:	f001 fa38 	bl	8009878 <MX_TIM11_Init>
  MX_TIM12_Init();
 8008408:	f001 fa84 	bl	8009914 <MX_TIM12_Init>
  MX_TIM13_Init();
 800840c:	f001 faf0 	bl	80099f0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8008410:	f001 fb3c 	bl	8009a8c <MX_TIM14_Init>
  MX_I2C2_Init();
 8008414:	f7ff fec0 	bl	8008198 <MX_I2C2_Init>
  MX_SPI1_Init();
 8008418:	f000 f8f2 	bl	8008600 <MX_SPI1_Init>
  MX_SPI3_Init();
 800841c:	f000 f92e 	bl	800867c <MX_SPI3_Init>
  MX_SPI4_Init();
 8008420:	f000 f96a 	bl	80086f8 <MX_SPI4_Init>
  MX_SPI6_Init();
 8008424:	f000 f9a6 	bl	8008774 <MX_SPI6_Init>
  MX_UART4_Init();
 8008428:	f001 fe9c 	bl	800a164 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800842c:	f001 feca 	bl	800a1c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008430:	f001 fef8 	bl	800a224 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 8008434:	f004 fe2a 	bl	800d08c <my_UsartInit>

	/*******************************Analog init***************************/
	AnaBuiltInStart();
 8008438:	f003 fb12 	bl	800ba60 <AnaBuiltInStart>

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 800843c:	f002 fa58 	bl	800a8f0 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 8008440:	f003 fe9c 	bl	800c17c <PWMBuiltIn_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 8008444:	f005 fbee 	bl	800dc24 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008448:	f7ff fce6 	bl	8007e18 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800844c:	f7fe fa7b 	bl	8006946 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008450:	e7fe      	b.n	8008450 <main+0x8c>
	...

08008454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b0b8      	sub	sp, #224	; 0xe0
 8008458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800845a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800845e:	2234      	movs	r2, #52	; 0x34
 8008460:	2100      	movs	r1, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f007 f9cd 	bl	800f802 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008468:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	605a      	str	r2, [r3, #4]
 8008472:	609a      	str	r2, [r3, #8]
 8008474:	60da      	str	r2, [r3, #12]
 8008476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008478:	f107 0308 	add.w	r3, r7, #8
 800847c:	2290      	movs	r2, #144	; 0x90
 800847e:	2100      	movs	r1, #0
 8008480:	4618      	mov	r0, r3
 8008482:	f007 f9be 	bl	800f802 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008486:	4b3c      	ldr	r3, [pc, #240]	; (8008578 <SystemClock_Config+0x124>)
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	4a3b      	ldr	r2, [pc, #236]	; (8008578 <SystemClock_Config+0x124>)
 800848c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008490:	6413      	str	r3, [r2, #64]	; 0x40
 8008492:	4b39      	ldr	r3, [pc, #228]	; (8008578 <SystemClock_Config+0x124>)
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800849e:	4b37      	ldr	r3, [pc, #220]	; (800857c <SystemClock_Config+0x128>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a36      	ldr	r2, [pc, #216]	; (800857c <SystemClock_Config+0x128>)
 80084a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	4b34      	ldr	r3, [pc, #208]	; (800857c <SystemClock_Config+0x128>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80084b6:	2302      	movs	r3, #2
 80084b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80084bc:	2301      	movs	r3, #1
 80084be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80084c2:	2310      	movs	r3, #16
 80084c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084c8:	2302      	movs	r3, #2
 80084ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80084ce:	2300      	movs	r3, #0
 80084d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80084d4:	2308      	movs	r3, #8
 80084d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80084da:	23d8      	movs	r3, #216	; 0xd8
 80084dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80084e0:	2302      	movs	r3, #2
 80084e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80084e6:	2302      	movs	r3, #2
 80084e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fa f9db 	bl	80028ac <HAL_RCC_OscConfig>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80084fc:	f000 f878 	bl	80085f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008500:	f7fa f984 	bl	800280c <HAL_PWREx_EnableOverDrive>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800850a:	f000 f871 	bl	80085f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800850e:	230f      	movs	r3, #15
 8008510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008514:	2302      	movs	r3, #2
 8008516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800851a:	2300      	movs	r3, #0
 800851c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008520:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008524:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800852c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008530:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008534:	2107      	movs	r1, #7
 8008536:	4618      	mov	r0, r3
 8008538:	f7fa fc2a 	bl	8002d90 <HAL_RCC_ClockConfig>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008542:	f000 f855 	bl	80085f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8008546:	f248 3340 	movw	r3, #33600	; 0x8340
 800854a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800854c:	2300      	movs	r3, #0
 800854e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008550:	2300      	movs	r3, #0
 8008552:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008554:	2300      	movs	r3, #0
 8008556:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8008558:	2300      	movs	r3, #0
 800855a:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800855c:	f107 0308 	add.w	r3, r7, #8
 8008560:	4618      	mov	r0, r3
 8008562:	f7fa fe15 	bl	8003190 <HAL_RCCEx_PeriphCLKConfig>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800856c:	f000 f840 	bl	80085f0 <Error_Handler>
  }
}
 8008570:	bf00      	nop
 8008572:	37e0      	adds	r7, #224	; 0xe0
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	40023800 	.word	0x40023800
 800857c:	40007000 	.word	0x40007000

08008580 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8008588:	2301      	movs	r3, #1
 800858a:	60fb      	str	r3, [r7, #12]
#if (ADBOARD_NUM>0)
	ret=ADBoard_SPICallback(hspi);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f002 f8ab 	bl	800a6e8 <ADBoard_SPICallback>
 8008592:	60f8      	str	r0, [r7, #12]
#endif

}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 80085a6:	2301      	movs	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(GPIO_Pin);
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 f85f 	bl	800a670 <ADBoard_BUSYCallback>
 80085b2:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_GPIO_EXTI_Callback+0x26>
		interruptCallback(GPIO_Pin);
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	4618      	mov	r0, r3
 80085be:	f003 f8cd 	bl	800b75c <interruptCallback>
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a04      	ldr	r2, [pc, #16]	; (80085ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d101      	bne.n	80085e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80085de:	f7f8 fd07 	bl	8000ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40000c00 	.word	0x40000c00

080085f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80085f4:	bf00      	nop
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008604:	4b1b      	ldr	r3, [pc, #108]	; (8008674 <MX_SPI1_Init+0x74>)
 8008606:	4a1c      	ldr	r2, [pc, #112]	; (8008678 <MX_SPI1_Init+0x78>)
 8008608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800860a:	4b1a      	ldr	r3, [pc, #104]	; (8008674 <MX_SPI1_Init+0x74>)
 800860c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008612:	4b18      	ldr	r3, [pc, #96]	; (8008674 <MX_SPI1_Init+0x74>)
 8008614:	2200      	movs	r2, #0
 8008616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8008618:	4b16      	ldr	r3, [pc, #88]	; (8008674 <MX_SPI1_Init+0x74>)
 800861a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800861e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008620:	4b14      	ldr	r3, [pc, #80]	; (8008674 <MX_SPI1_Init+0x74>)
 8008622:	2202      	movs	r2, #2
 8008624:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <MX_SPI1_Init+0x74>)
 8008628:	2201      	movs	r2, #1
 800862a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800862c:	4b11      	ldr	r3, [pc, #68]	; (8008674 <MX_SPI1_Init+0x74>)
 800862e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008632:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008634:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <MX_SPI1_Init+0x74>)
 8008636:	2218      	movs	r2, #24
 8008638:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800863a:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <MX_SPI1_Init+0x74>)
 800863c:	2200      	movs	r2, #0
 800863e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008640:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <MX_SPI1_Init+0x74>)
 8008642:	2200      	movs	r2, #0
 8008644:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008646:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <MX_SPI1_Init+0x74>)
 8008648:	2200      	movs	r2, #0
 800864a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <MX_SPI1_Init+0x74>)
 800864e:	2207      	movs	r2, #7
 8008650:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008652:	4b08      	ldr	r3, [pc, #32]	; (8008674 <MX_SPI1_Init+0x74>)
 8008654:	2200      	movs	r2, #0
 8008656:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008658:	4b06      	ldr	r3, [pc, #24]	; (8008674 <MX_SPI1_Init+0x74>)
 800865a:	2200      	movs	r2, #0
 800865c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800865e:	4805      	ldr	r0, [pc, #20]	; (8008674 <MX_SPI1_Init+0x74>)
 8008660:	f7fb f9bc 	bl	80039dc <HAL_SPI_Init>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800866a:	f7ff ffc1 	bl	80085f0 <Error_Handler>
  }

}
 800866e:	bf00      	nop
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20009e08 	.word	0x20009e08
 8008678:	40013000 	.word	0x40013000

0800867c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008680:	4b1b      	ldr	r3, [pc, #108]	; (80086f0 <MX_SPI3_Init+0x74>)
 8008682:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <MX_SPI3_Init+0x78>)
 8008684:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008686:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <MX_SPI3_Init+0x74>)
 8008688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800868c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800868e:	4b18      	ldr	r3, [pc, #96]	; (80086f0 <MX_SPI3_Init+0x74>)
 8008690:	2200      	movs	r2, #0
 8008692:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8008694:	4b16      	ldr	r3, [pc, #88]	; (80086f0 <MX_SPI3_Init+0x74>)
 8008696:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800869a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800869c:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <MX_SPI3_Init+0x74>)
 800869e:	2202      	movs	r2, #2
 80086a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80086a2:	4b13      	ldr	r3, [pc, #76]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80086b0:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086b2:	2210      	movs	r2, #16
 80086b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80086bc:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086be:	2200      	movs	r2, #0
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80086c8:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086ca:	2207      	movs	r2, #7
 80086cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80086ce:	4b08      	ldr	r3, [pc, #32]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80086da:	4805      	ldr	r0, [pc, #20]	; (80086f0 <MX_SPI3_Init+0x74>)
 80086dc:	f7fb f97e 	bl	80039dc <HAL_SPI_Init>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80086e6:	f7ff ff83 	bl	80085f0 <Error_Handler>
  }

}
 80086ea:	bf00      	nop
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20009c80 	.word	0x20009c80
 80086f4:	40003c00 	.word	0x40003c00

080086f8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80086fc:	4b1b      	ldr	r3, [pc, #108]	; (800876c <MX_SPI4_Init+0x74>)
 80086fe:	4a1c      	ldr	r2, [pc, #112]	; (8008770 <MX_SPI4_Init+0x78>)
 8008700:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008702:	4b1a      	ldr	r3, [pc, #104]	; (800876c <MX_SPI4_Init+0x74>)
 8008704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008708:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800870a:	4b18      	ldr	r3, [pc, #96]	; (800876c <MX_SPI4_Init+0x74>)
 800870c:	2200      	movs	r2, #0
 800870e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8008710:	4b16      	ldr	r3, [pc, #88]	; (800876c <MX_SPI4_Init+0x74>)
 8008712:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008716:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008718:	4b14      	ldr	r3, [pc, #80]	; (800876c <MX_SPI4_Init+0x74>)
 800871a:	2200      	movs	r2, #0
 800871c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <MX_SPI4_Init+0x74>)
 8008720:	2200      	movs	r2, #0
 8008722:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008724:	4b11      	ldr	r3, [pc, #68]	; (800876c <MX_SPI4_Init+0x74>)
 8008726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800872a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800872c:	4b0f      	ldr	r3, [pc, #60]	; (800876c <MX_SPI4_Init+0x74>)
 800872e:	2208      	movs	r2, #8
 8008730:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008732:	4b0e      	ldr	r3, [pc, #56]	; (800876c <MX_SPI4_Init+0x74>)
 8008734:	2200      	movs	r2, #0
 8008736:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8008738:	4b0c      	ldr	r3, [pc, #48]	; (800876c <MX_SPI4_Init+0x74>)
 800873a:	2200      	movs	r2, #0
 800873c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800873e:	4b0b      	ldr	r3, [pc, #44]	; (800876c <MX_SPI4_Init+0x74>)
 8008740:	2200      	movs	r2, #0
 8008742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8008744:	4b09      	ldr	r3, [pc, #36]	; (800876c <MX_SPI4_Init+0x74>)
 8008746:	2207      	movs	r2, #7
 8008748:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800874a:	4b08      	ldr	r3, [pc, #32]	; (800876c <MX_SPI4_Init+0x74>)
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008750:	4b06      	ldr	r3, [pc, #24]	; (800876c <MX_SPI4_Init+0x74>)
 8008752:	2208      	movs	r2, #8
 8008754:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8008756:	4805      	ldr	r0, [pc, #20]	; (800876c <MX_SPI4_Init+0x74>)
 8008758:	f7fb f940 	bl	80039dc <HAL_SPI_Init>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8008762:	f7ff ff45 	bl	80085f0 <Error_Handler>
  }

}
 8008766:	bf00      	nop
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20009da4 	.word	0x20009da4
 8008770:	40013400 	.word	0x40013400

08008774 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <MX_SPI6_Init+0x74>)
 800877a:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <MX_SPI6_Init+0x78>)
 800877c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800877e:	4b1a      	ldr	r3, [pc, #104]	; (80087e8 <MX_SPI6_Init+0x74>)
 8008780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008784:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8008786:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <MX_SPI6_Init+0x74>)
 8008788:	2200      	movs	r2, #0
 800878a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 800878c:	4b16      	ldr	r3, [pc, #88]	; (80087e8 <MX_SPI6_Init+0x74>)
 800878e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008792:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008794:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <MX_SPI6_Init+0x74>)
 8008796:	2202      	movs	r2, #2
 8008798:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <MX_SPI6_Init+0x74>)
 800879c:	2200      	movs	r2, #0
 800879e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80087a0:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a6:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80087a8:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087aa:	2230      	movs	r2, #48	; 0x30
 80087ac:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80087ae:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80087b4:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087bc:	2200      	movs	r2, #0
 80087be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 80087c0:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087c2:	2207      	movs	r2, #7
 80087c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80087c6:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80087cc:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087ce:	2208      	movs	r2, #8
 80087d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <MX_SPI6_Init+0x74>)
 80087d4:	f7fb f902 	bl	80039dc <HAL_SPI_Init>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 80087de:	f7ff ff07 	bl	80085f0 <Error_Handler>
  }

}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20009c1c 	.word	0x20009c1c
 80087ec:	40015400 	.word	0x40015400

080087f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b092      	sub	sp, #72	; 0x48
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	605a      	str	r2, [r3, #4]
 8008802:	609a      	str	r2, [r3, #8]
 8008804:	60da      	str	r2, [r3, #12]
 8008806:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a59      	ldr	r2, [pc, #356]	; (8008974 <HAL_SPI_MspInit+0x184>)
 800880e:	4293      	cmp	r3, r2
 8008810:	f040 80c0 	bne.w	8008994 <HAL_SPI_MspInit+0x1a4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008814:	4b58      	ldr	r3, [pc, #352]	; (8008978 <HAL_SPI_MspInit+0x188>)
 8008816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008818:	4a57      	ldr	r2, [pc, #348]	; (8008978 <HAL_SPI_MspInit+0x188>)
 800881a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800881e:	6453      	str	r3, [r2, #68]	; 0x44
 8008820:	4b55      	ldr	r3, [pc, #340]	; (8008978 <HAL_SPI_MspInit+0x188>)
 8008822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008828:	633b      	str	r3, [r7, #48]	; 0x30
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800882c:	4b52      	ldr	r3, [pc, #328]	; (8008978 <HAL_SPI_MspInit+0x188>)
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	4a51      	ldr	r2, [pc, #324]	; (8008978 <HAL_SPI_MspInit+0x188>)
 8008832:	f043 0308 	orr.w	r3, r3, #8
 8008836:	6313      	str	r3, [r2, #48]	; 0x30
 8008838:	4b4f      	ldr	r3, [pc, #316]	; (8008978 <HAL_SPI_MspInit+0x188>)
 800883a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008844:	4b4c      	ldr	r3, [pc, #304]	; (8008978 <HAL_SPI_MspInit+0x188>)
 8008846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008848:	4a4b      	ldr	r2, [pc, #300]	; (8008978 <HAL_SPI_MspInit+0x188>)
 800884a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884e:	6313      	str	r3, [r2, #48]	; 0x30
 8008850:	4b49      	ldr	r3, [pc, #292]	; (8008978 <HAL_SPI_MspInit+0x188>)
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration    
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800885c:	2380      	movs	r3, #128	; 0x80
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008860:	2302      	movs	r3, #2
 8008862:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008864:	2300      	movs	r3, #0
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008868:	2303      	movs	r3, #3
 800886a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800886c:	2305      	movs	r3, #5
 800886e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008874:	4619      	mov	r1, r3
 8008876:	4841      	ldr	r0, [pc, #260]	; (800897c <HAL_SPI_MspInit+0x18c>)
 8008878:	f7f9 fcc4 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800887c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008882:	2302      	movs	r3, #2
 8008884:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008886:	2300      	movs	r3, #0
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800888a:	2303      	movs	r3, #3
 800888c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800888e:	2305      	movs	r3, #5
 8008890:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008892:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008896:	4619      	mov	r1, r3
 8008898:	4839      	ldr	r0, [pc, #228]	; (8008980 <HAL_SPI_MspInit+0x190>)
 800889a:	f7f9 fcb3 	bl	8002204 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800889e:	4b39      	ldr	r3, [pc, #228]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088a0:	4a39      	ldr	r2, [pc, #228]	; (8008988 <HAL_SPI_MspInit+0x198>)
 80088a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80088a4:	4b37      	ldr	r3, [pc, #220]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80088aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088ac:	4b35      	ldr	r3, [pc, #212]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088b2:	4b34      	ldr	r3, [pc, #208]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80088b8:	4b32      	ldr	r3, [pc, #200]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088be:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80088c0:	4b30      	ldr	r3, [pc, #192]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80088c8:	4b2e      	ldr	r3, [pc, #184]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80088ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80088d0:	4b2c      	ldr	r3, [pc, #176]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80088d6:	4b2b      	ldr	r3, [pc, #172]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80088dc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80088de:	4b29      	ldr	r3, [pc, #164]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80088e4:	4827      	ldr	r0, [pc, #156]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088e6:	f7f9 f885 	bl	80019f4 <HAL_DMA_Init>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_SPI_MspInit+0x104>
    {
      Error_Handler();
 80088f0:	f7ff fe7e 	bl	80085f0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a23      	ldr	r2, [pc, #140]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088f8:	659a      	str	r2, [r3, #88]	; 0x58
 80088fa:	4a22      	ldr	r2, [pc, #136]	; (8008984 <HAL_SPI_MspInit+0x194>)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8008900:	4b22      	ldr	r3, [pc, #136]	; (800898c <HAL_SPI_MspInit+0x19c>)
 8008902:	4a23      	ldr	r2, [pc, #140]	; (8008990 <HAL_SPI_MspInit+0x1a0>)
 8008904:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8008906:	4b21      	ldr	r3, [pc, #132]	; (800898c <HAL_SPI_MspInit+0x19c>)
 8008908:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800890c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800890e:	4b1f      	ldr	r3, [pc, #124]	; (800898c <HAL_SPI_MspInit+0x19c>)
 8008910:	2240      	movs	r2, #64	; 0x40
 8008912:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008914:	4b1d      	ldr	r3, [pc, #116]	; (800898c <HAL_SPI_MspInit+0x19c>)
 8008916:	2200      	movs	r2, #0
 8008918:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800891a:	4b1c      	ldr	r3, [pc, #112]	; (800898c <HAL_SPI_MspInit+0x19c>)
 800891c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008920:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008922:	4b1a      	ldr	r3, [pc, #104]	; (800898c <HAL_SPI_MspInit+0x19c>)
 8008924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008928:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800892a:	4b18      	ldr	r3, [pc, #96]	; (800898c <HAL_SPI_MspInit+0x19c>)
 800892c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008930:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8008932:	4b16      	ldr	r3, [pc, #88]	; (800898c <HAL_SPI_MspInit+0x19c>)
 8008934:	2200      	movs	r2, #0
 8008936:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008938:	4b14      	ldr	r3, [pc, #80]	; (800898c <HAL_SPI_MspInit+0x19c>)
 800893a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800893e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008940:	4b12      	ldr	r3, [pc, #72]	; (800898c <HAL_SPI_MspInit+0x19c>)
 8008942:	2200      	movs	r2, #0
 8008944:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008946:	4811      	ldr	r0, [pc, #68]	; (800898c <HAL_SPI_MspInit+0x19c>)
 8008948:	f7f9 f854 	bl	80019f4 <HAL_DMA_Init>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8008952:	f7ff fe4d 	bl	80085f0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a0c      	ldr	r2, [pc, #48]	; (800898c <HAL_SPI_MspInit+0x19c>)
 800895a:	655a      	str	r2, [r3, #84]	; 0x54
 800895c:	4a0b      	ldr	r2, [pc, #44]	; (800898c <HAL_SPI_MspInit+0x19c>)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8008962:	2200      	movs	r2, #0
 8008964:	2105      	movs	r1, #5
 8008966:	2023      	movs	r0, #35	; 0x23
 8008968:	f7f9 f81a 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800896c:	2023      	movs	r0, #35	; 0x23
 800896e:	f7f9 f833 	bl	80019d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8008972:	e19b      	b.n	8008cac <HAL_SPI_MspInit+0x4bc>
 8008974:	40013000 	.word	0x40013000
 8008978:	40023800 	.word	0x40023800
 800897c:	40020c00 	.word	0x40020c00
 8008980:	40021800 	.word	0x40021800
 8008984:	20009e6c 	.word	0x20009e6c
 8008988:	40026440 	.word	0x40026440
 800898c:	20009ecc 	.word	0x20009ecc
 8008990:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a9b      	ldr	r2, [pc, #620]	; (8008c08 <HAL_SPI_MspInit+0x418>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f040 80a6 	bne.w	8008aec <HAL_SPI_MspInit+0x2fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80089a0:	4b9a      	ldr	r3, [pc, #616]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	4a99      	ldr	r2, [pc, #612]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089aa:	6413      	str	r3, [r2, #64]	; 0x40
 80089ac:	4b97      	ldr	r3, [pc, #604]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089b8:	4b94      	ldr	r3, [pc, #592]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	4a93      	ldr	r2, [pc, #588]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089be:	f043 0302 	orr.w	r3, r3, #2
 80089c2:	6313      	str	r3, [r2, #48]	; 0x30
 80089c4:	4b91      	ldr	r3, [pc, #580]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	623b      	str	r3, [r7, #32]
 80089ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80089d0:	4b8e      	ldr	r3, [pc, #568]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d4:	4a8d      	ldr	r2, [pc, #564]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089d6:	f043 0304 	orr.w	r3, r3, #4
 80089da:	6313      	str	r3, [r2, #48]	; 0x30
 80089dc:	4b8b      	ldr	r3, [pc, #556]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 80089de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	61fb      	str	r3, [r7, #28]
 80089e6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80089e8:	2304      	movs	r3, #4
 80089ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ec:	2302      	movs	r3, #2
 80089ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089f4:	2303      	movs	r3, #3
 80089f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80089f8:	2307      	movs	r3, #7
 80089fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a00:	4619      	mov	r1, r3
 8008a02:	4883      	ldr	r0, [pc, #524]	; (8008c10 <HAL_SPI_MspInit+0x420>)
 8008a04:	f7f9 fbfe 	bl	8002204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008a08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a16:	2303      	movs	r3, #3
 8008a18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008a1a:	2306      	movs	r3, #6
 8008a1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a22:	4619      	mov	r1, r3
 8008a24:	487b      	ldr	r0, [pc, #492]	; (8008c14 <HAL_SPI_MspInit+0x424>)
 8008a26:	f7f9 fbed 	bl	8002204 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8008a2a:	4b7b      	ldr	r3, [pc, #492]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a2c:	4a7b      	ldr	r2, [pc, #492]	; (8008c1c <HAL_SPI_MspInit+0x42c>)
 8008a2e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8008a30:	4b79      	ldr	r3, [pc, #484]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a36:	4b78      	ldr	r3, [pc, #480]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a3c:	4b76      	ldr	r3, [pc, #472]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008a42:	4b75      	ldr	r3, [pc, #468]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a48:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008a4a:	4b73      	ldr	r3, [pc, #460]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a50:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008a52:	4b71      	ldr	r3, [pc, #452]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a58:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8008a5a:	4b6f      	ldr	r3, [pc, #444]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008a60:	4b6d      	ldr	r3, [pc, #436]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a66:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a68:	4b6b      	ldr	r3, [pc, #428]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8008a6e:	486a      	ldr	r0, [pc, #424]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a70:	f7f8 ffc0 	bl	80019f4 <HAL_DMA_Init>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <HAL_SPI_MspInit+0x28e>
      Error_Handler();
 8008a7a:	f7ff fdb9 	bl	80085f0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a65      	ldr	r2, [pc, #404]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a82:	659a      	str	r2, [r3, #88]	; 0x58
 8008a84:	4a64      	ldr	r2, [pc, #400]	; (8008c18 <HAL_SPI_MspInit+0x428>)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8008a8a:	4b65      	ldr	r3, [pc, #404]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008a8c:	4a65      	ldr	r2, [pc, #404]	; (8008c24 <HAL_SPI_MspInit+0x434>)
 8008a8e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8008a90:	4b63      	ldr	r3, [pc, #396]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a96:	4b62      	ldr	r3, [pc, #392]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008a98:	2240      	movs	r2, #64	; 0x40
 8008a9a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a9c:	4b60      	ldr	r3, [pc, #384]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008aa2:	4b5f      	ldr	r3, [pc, #380]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008aa8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008aaa:	4b5d      	ldr	r3, [pc, #372]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ab0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008ab2:	4b5b      	ldr	r3, [pc, #364]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008ab4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ab8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8008aba:	4b59      	ldr	r3, [pc, #356]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008ac0:	4b57      	ldr	r3, [pc, #348]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008ac2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ac6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ac8:	4b55      	ldr	r3, [pc, #340]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8008ace:	4854      	ldr	r0, [pc, #336]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008ad0:	f7f8 ff90 	bl	80019f4 <HAL_DMA_Init>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_SPI_MspInit+0x2ee>
      Error_Handler();
 8008ada:	f7ff fd89 	bl	80085f0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a4f      	ldr	r2, [pc, #316]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008ae2:	655a      	str	r2, [r3, #84]	; 0x54
 8008ae4:	4a4e      	ldr	r2, [pc, #312]	; (8008c20 <HAL_SPI_MspInit+0x430>)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008aea:	e0df      	b.n	8008cac <HAL_SPI_MspInit+0x4bc>
  else if(spiHandle->Instance==SPI4)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a4d      	ldr	r2, [pc, #308]	; (8008c28 <HAL_SPI_MspInit+0x438>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	f040 80a4 	bne.w	8008c40 <HAL_SPI_MspInit+0x450>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008af8:	4b44      	ldr	r3, [pc, #272]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 8008afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afc:	4a43      	ldr	r2, [pc, #268]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 8008afe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b02:	6453      	str	r3, [r2, #68]	; 0x44
 8008b04:	4b41      	ldr	r3, [pc, #260]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 8008b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008b10:	4b3e      	ldr	r3, [pc, #248]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	4a3d      	ldr	r2, [pc, #244]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 8008b16:	f043 0310 	orr.w	r3, r3, #16
 8008b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b1c:	4b3b      	ldr	r3, [pc, #236]	; (8008c0c <HAL_SPI_MspInit+0x41c>)
 8008b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 8008b28:	f246 0304 	movw	r3, #24580	; 0x6004
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b2e:	2302      	movs	r3, #2
 8008b30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b32:	2300      	movs	r3, #0
 8008b34:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b36:	2303      	movs	r3, #3
 8008b38:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008b3a:	2305      	movs	r3, #5
 8008b3c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b42:	4619      	mov	r1, r3
 8008b44:	4839      	ldr	r0, [pc, #228]	; (8008c2c <HAL_SPI_MspInit+0x43c>)
 8008b46:	f7f9 fb5d 	bl	8002204 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8008b4a:	4b39      	ldr	r3, [pc, #228]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b4c:	4a39      	ldr	r2, [pc, #228]	; (8008c34 <HAL_SPI_MspInit+0x444>)
 8008b4e:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8008b50:	4b37      	ldr	r3, [pc, #220]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b56:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b58:	4b35      	ldr	r3, [pc, #212]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b5e:	4b34      	ldr	r3, [pc, #208]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b64:	4b32      	ldr	r3, [pc, #200]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b6a:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b6c:	4b30      	ldr	r3, [pc, #192]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b72:	4b2f      	ldr	r3, [pc, #188]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8008b78:	4b2d      	ldr	r3, [pc, #180]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008b7e:	4b2c      	ldr	r3, [pc, #176]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b84:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b86:	4b2a      	ldr	r3, [pc, #168]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8008b8c:	4828      	ldr	r0, [pc, #160]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008b8e:	f7f8 ff31 	bl	80019f4 <HAL_DMA_Init>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <HAL_SPI_MspInit+0x3ac>
      Error_Handler();
 8008b98:	f7ff fd2a 	bl	80085f0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a24      	ldr	r2, [pc, #144]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008ba0:	659a      	str	r2, [r3, #88]	; 0x58
 8008ba2:	4a23      	ldr	r2, [pc, #140]	; (8008c30 <HAL_SPI_MspInit+0x440>)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8008ba8:	4b23      	ldr	r3, [pc, #140]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008baa:	4a24      	ldr	r2, [pc, #144]	; (8008c3c <HAL_SPI_MspInit+0x44c>)
 8008bac:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8008bae:	4b22      	ldr	r3, [pc, #136]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008bb4:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008bb6:	4b20      	ldr	r3, [pc, #128]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bb8:	2240      	movs	r2, #64	; 0x40
 8008bba:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008bbc:	4b1e      	ldr	r3, [pc, #120]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008bc2:	4b1d      	ldr	r3, [pc, #116]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bc8:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008bca:	4b1b      	ldr	r3, [pc, #108]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008bd0:	4b19      	ldr	r3, [pc, #100]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8008bd6:	4b18      	ldr	r3, [pc, #96]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008bdc:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008be2:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008be4:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8008bea:	4813      	ldr	r0, [pc, #76]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bec:	f7f8 ff02 	bl	80019f4 <HAL_DMA_Init>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <HAL_SPI_MspInit+0x40a>
      Error_Handler();
 8008bf6:	f7ff fcfb 	bl	80085f0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a0e      	ldr	r2, [pc, #56]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54
 8008c00:	4a0d      	ldr	r2, [pc, #52]	; (8008c38 <HAL_SPI_MspInit+0x448>)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008c06:	e051      	b.n	8008cac <HAL_SPI_MspInit+0x4bc>
 8008c08:	40003c00 	.word	0x40003c00
 8008c0c:	40023800 	.word	0x40023800
 8008c10:	40020400 	.word	0x40020400
 8008c14:	40020800 	.word	0x40020800
 8008c18:	20009f2c 	.word	0x20009f2c
 8008c1c:	40026010 	.word	0x40026010
 8008c20:	20009ce4 	.word	0x20009ce4
 8008c24:	40026088 	.word	0x40026088
 8008c28:	40013400 	.word	0x40013400
 8008c2c:	40021000 	.word	0x40021000
 8008c30:	20009bbc 	.word	0x20009bbc
 8008c34:	40026410 	.word	0x40026410
 8008c38:	20009d44 	.word	0x20009d44
 8008c3c:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a1b      	ldr	r2, [pc, #108]	; (8008cb4 <HAL_SPI_MspInit+0x4c4>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d130      	bne.n	8008cac <HAL_SPI_MspInit+0x4bc>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8008c4a:	4b1b      	ldr	r3, [pc, #108]	; (8008cb8 <HAL_SPI_MspInit+0x4c8>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4e:	4a1a      	ldr	r2, [pc, #104]	; (8008cb8 <HAL_SPI_MspInit+0x4c8>)
 8008c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c54:	6453      	str	r3, [r2, #68]	; 0x44
 8008c56:	4b18      	ldr	r3, [pc, #96]	; (8008cb8 <HAL_SPI_MspInit+0x4c8>)
 8008c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c62:	4b15      	ldr	r3, [pc, #84]	; (8008cb8 <HAL_SPI_MspInit+0x4c8>)
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c66:	4a14      	ldr	r2, [pc, #80]	; (8008cb8 <HAL_SPI_MspInit+0x4c8>)
 8008c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c6e:	4b12      	ldr	r3, [pc, #72]	; (8008cb8 <HAL_SPI_MspInit+0x4c8>)
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8008c7a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c80:	2302      	movs	r3, #2
 8008c82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8008c8c:	2305      	movs	r3, #5
 8008c8e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008c90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c94:	4619      	mov	r1, r3
 8008c96:	4809      	ldr	r0, [pc, #36]	; (8008cbc <HAL_SPI_MspInit+0x4cc>)
 8008c98:	f7f9 fab4 	bl	8002204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2105      	movs	r1, #5
 8008ca0:	2056      	movs	r0, #86	; 0x56
 8008ca2:	f7f8 fe7d 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8008ca6:	2056      	movs	r0, #86	; 0x56
 8008ca8:	f7f8 fe96 	bl	80019d8 <HAL_NVIC_EnableIRQ>
}
 8008cac:	bf00      	nop
 8008cae:	3748      	adds	r7, #72	; 0x48
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40015400 	.word	0x40015400
 8008cb8:	40023800 	.word	0x40023800
 8008cbc:	40021800 	.word	0x40021800

08008cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008cc6:	4b11      	ldr	r3, [pc, #68]	; (8008d0c <HAL_MspInit+0x4c>)
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	4a10      	ldr	r2, [pc, #64]	; (8008d0c <HAL_MspInit+0x4c>)
 8008ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8008cd2:	4b0e      	ldr	r3, [pc, #56]	; (8008d0c <HAL_MspInit+0x4c>)
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cda:	607b      	str	r3, [r7, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cde:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <HAL_MspInit+0x4c>)
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce2:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <HAL_MspInit+0x4c>)
 8008ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cea:	4b08      	ldr	r3, [pc, #32]	; (8008d0c <HAL_MspInit+0x4c>)
 8008cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cf2:	603b      	str	r3, [r7, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	210f      	movs	r1, #15
 8008cfa:	f06f 0001 	mvn.w	r0, #1
 8008cfe:	f7f8 fe4f 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d02:	bf00      	nop
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40023800 	.word	0x40023800

08008d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08c      	sub	sp, #48	; 0x30
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8008d20:	2200      	movs	r2, #0
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	2032      	movs	r0, #50	; 0x32
 8008d26:	f7f8 fe3b 	bl	80019a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8008d2a:	2032      	movs	r0, #50	; 0x32
 8008d2c:	f7f8 fe54 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8008d30:	4b1f      	ldr	r3, [pc, #124]	; (8008db0 <HAL_InitTick+0xa0>)
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	4a1e      	ldr	r2, [pc, #120]	; (8008db0 <HAL_InitTick+0xa0>)
 8008d36:	f043 0308 	orr.w	r3, r3, #8
 8008d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8008d3c:	4b1c      	ldr	r3, [pc, #112]	; (8008db0 <HAL_InitTick+0xa0>)
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d40:	f003 0308 	and.w	r3, r3, #8
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008d48:	f107 0210 	add.w	r2, r7, #16
 8008d4c:	f107 0314 	add.w	r3, r7, #20
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fa f9ea 	bl	800312c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008d58:	f7fa f9c0 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <HAL_InitTick+0xa4>)
 8008d66:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6a:	0c9b      	lsrs	r3, r3, #18
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8008d70:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <HAL_InitTick+0xa8>)
 8008d72:	4a12      	ldr	r2, [pc, #72]	; (8008dbc <HAL_InitTick+0xac>)
 8008d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8008d76:	4b10      	ldr	r3, [pc, #64]	; (8008db8 <HAL_InitTick+0xa8>)
 8008d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008d7c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8008d7e:	4a0e      	ldr	r2, [pc, #56]	; (8008db8 <HAL_InitTick+0xa8>)
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8008d84:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <HAL_InitTick+0xa8>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d8a:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <HAL_InitTick+0xa8>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8008d90:	4809      	ldr	r0, [pc, #36]	; (8008db8 <HAL_InitTick+0xa8>)
 8008d92:	f7fb fdcf 	bl	8004934 <HAL_TIM_Base_Init>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8008d9c:	4806      	ldr	r0, [pc, #24]	; (8008db8 <HAL_InitTick+0xa8>)
 8008d9e:	f7fb fdf5 	bl	800498c <HAL_TIM_Base_Start_IT>
 8008da2:	4603      	mov	r3, r0
 8008da4:	e000      	b.n	8008da8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3730      	adds	r7, #48	; 0x30
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40023800 	.word	0x40023800
 8008db4:	431bde83 	.word	0x431bde83
 8008db8:	20009f8c 	.word	0x20009f8c
 8008dbc:	40000c00 	.word	0x40000c00

08008dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008dc4:	bf00      	nop
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008dd2:	e7fe      	b.n	8008dd2 <HardFault_Handler+0x4>

08008dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008dd8:	e7fe      	b.n	8008dd8 <MemManage_Handler+0x4>

08008dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008dde:	e7fe      	b.n	8008dde <BusFault_Handler+0x4>

08008de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008de0:	b480      	push	{r7}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008de4:	e7fe      	b.n	8008de4 <UsageFault_Handler+0x4>

08008de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008de6:	b480      	push	{r7}
 8008de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008dea:	bf00      	nop
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008df8:	2001      	movs	r0, #1
 8008dfa:	f7f9 fbc7 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008dfe:	bf00      	nop
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8008e06:	2002      	movs	r0, #2
 8008e08:	f7f9 fbc0 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008e0c:	bf00      	nop
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008e14:	2004      	movs	r0, #4
 8008e16:	f7f9 fbb9 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008e1a:	bf00      	nop
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8008e22:	2008      	movs	r0, #8
 8008e24:	f7f9 fbb2 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008e28:	bf00      	nop
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008e30:	2010      	movs	r0, #16
 8008e32:	f7f9 fbab 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008e36:	bf00      	nop
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8008e40:	4802      	ldr	r0, [pc, #8]	; (8008e4c <DMA1_Stream0_IRQHandler+0x10>)
 8008e42:	f7f8 ff77 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008e46:	bf00      	nop
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20009f2c 	.word	0x20009f2c

08008e50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8008e54:	4802      	ldr	r0, [pc, #8]	; (8008e60 <DMA1_Stream1_IRQHandler+0x10>)
 8008e56:	f7f8 ff6d 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008e5a:	bf00      	nop
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	2000a32c 	.word	0x2000a32c

08008e64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8008e68:	4802      	ldr	r0, [pc, #8]	; (8008e74 <DMA1_Stream2_IRQHandler+0x10>)
 8008e6a:	f7f8 ff63 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8008e6e:	bf00      	nop
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	2000a2cc 	.word	0x2000a2cc

08008e78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8008e7c:	4802      	ldr	r0, [pc, #8]	; (8008e88 <DMA1_Stream4_IRQHandler+0x10>)
 8008e7e:	f7f8 ff59 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008e82:	bf00      	nop
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	2000a40c 	.word	0x2000a40c

08008e8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8008e90:	4802      	ldr	r0, [pc, #8]	; (8008e9c <DMA1_Stream5_IRQHandler+0x10>)
 8008e92:	f7f8 ff4f 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008e96:	bf00      	nop
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20009ce4 	.word	0x20009ce4

08008ea0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008ea4:	2020      	movs	r0, #32
 8008ea6:	f7f9 fb71 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8008eaa:	2040      	movs	r0, #64	; 0x40
 8008eac:	f7f9 fb6e 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008eb0:	2080      	movs	r0, #128	; 0x80
 8008eb2:	f7f9 fb6b 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008eb6:	bf00      	nop
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008ec0:	4803      	ldr	r0, [pc, #12]	; (8008ed0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8008ec2:	f7fb fdfd 	bl	8004ac0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8008ec6:	4803      	ldr	r0, [pc, #12]	; (8008ed4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8008ec8:	f7fb fdfa 	bl	8004ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008ecc:	bf00      	nop
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	2000a14c 	.word	0x2000a14c
 8008ed4:	2000a04c 	.word	0x2000a04c

08008ed8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008edc:	4802      	ldr	r0, [pc, #8]	; (8008ee8 <SPI1_IRQHandler+0x10>)
 8008ede:	f7fb f9af 	bl	8004240 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008ee2:	bf00      	nop
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20009e08 	.word	0x20009e08

08008eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	myUsart1IRQ();
 8008ef0:	f004 fae4 	bl	800d4bc <myUsart1IRQ>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ef4:	4806      	ldr	r0, [pc, #24]	; (8008f10 <USART1_IRQHandler+0x24>)
 8008ef6:	f7fc ff01 	bl	8005cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <USART1_IRQHandler+0x24>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	4b03      	ldr	r3, [pc, #12]	; (8008f10 <USART1_IRQHandler+0x24>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f042 0220 	orr.w	r2, r2, #32
 8008f08:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8008f0a:	bf00      	nop
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	2000a46c 	.word	0x2000a46c

08008f14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	HAL_UART_RxIdleCallback(&huart3);
 8008f18:	4803      	ldr	r0, [pc, #12]	; (8008f28 <USART3_IRQHandler+0x14>)
 8008f1a:	f004 f969 	bl	800d1f0 <HAL_UART_RxIdleCallback>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008f1e:	4802      	ldr	r0, [pc, #8]	; (8008f28 <USART3_IRQHandler+0x14>)
 8008f20:	f7fc feec 	bl	8005cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008f24:	bf00      	nop
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	2000a38c 	.word	0x2000a38c

08008f2c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8008f30:	4802      	ldr	r0, [pc, #8]	; (8008f3c <DMA1_Stream7_IRQHandler+0x10>)
 8008f32:	f7f8 feff 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8008f36:	bf00      	nop
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20009b5c 	.word	0x20009b5c

08008f40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008f44:	4802      	ldr	r0, [pc, #8]	; (8008f50 <TIM5_IRQHandler+0x10>)
 8008f46:	f7fb fdbb 	bl	8004ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008f4a:	bf00      	nop
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20009f8c 	.word	0x20009f8c

08008f54 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	HAL_UART_RxIdleCallback(&huart4);
 8008f58:	4803      	ldr	r0, [pc, #12]	; (8008f68 <UART4_IRQHandler+0x14>)
 8008f5a:	f004 f949 	bl	800d1f0 <HAL_UART_RxIdleCallback>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008f5e:	4802      	ldr	r0, [pc, #8]	; (8008f68 <UART4_IRQHandler+0x14>)
 8008f60:	f7fc fecc 	bl	8005cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8008f64:	bf00      	nop
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	2000a4ec 	.word	0x2000a4ec

08008f6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8008f70:	4802      	ldr	r0, [pc, #8]	; (8008f7c <DMA2_Stream0_IRQHandler+0x10>)
 8008f72:	f7f8 fedf 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008f76:	bf00      	nop
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20009bbc 	.word	0x20009bbc

08008f80 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8008f84:	4802      	ldr	r0, [pc, #8]	; (8008f90 <DMA2_Stream1_IRQHandler+0x10>)
 8008f86:	f7f8 fed5 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008f8a:	bf00      	nop
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20009d44 	.word	0x20009d44

08008f94 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8008f98:	4802      	ldr	r0, [pc, #8]	; (8008fa4 <DMA2_Stream2_IRQHandler+0x10>)
 8008f9a:	f7f8 fecb 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008f9e:	bf00      	nop
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20009e6c 	.word	0x20009e6c

08008fa8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8008fac:	4802      	ldr	r0, [pc, #8]	; (8008fb8 <DMA2_Stream3_IRQHandler+0x10>)
 8008fae:	f7f8 fec1 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8008fb2:	bf00      	nop
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20009ecc 	.word	0x20009ecc

08008fbc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008fc0:	4802      	ldr	r0, [pc, #8]	; (8008fcc <DMA2_Stream4_IRQHandler+0x10>)
 8008fc2:	f7f8 feb7 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20001a00 	.word	0x20001a00

08008fd0 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8008fd4:	4802      	ldr	r0, [pc, #8]	; (8008fe0 <SPI6_IRQHandler+0x10>)
 8008fd6:	f7fb f933 	bl	8004240 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8008fda:	bf00      	nop
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20009c1c 	.word	0x20009c1c

08008fe4 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8008fe8:	f7fd fcd9 	bl	800699e <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008fec:	bf00      	nop
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008ff4:	4b15      	ldr	r3, [pc, #84]	; (800904c <SystemInit+0x5c>)
 8008ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffa:	4a14      	ldr	r2, [pc, #80]	; (800904c <SystemInit+0x5c>)
 8008ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009004:	4b12      	ldr	r3, [pc, #72]	; (8009050 <SystemInit+0x60>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a11      	ldr	r2, [pc, #68]	; (8009050 <SystemInit+0x60>)
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009010:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <SystemInit+0x60>)
 8009012:	2200      	movs	r2, #0
 8009014:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009016:	4b0e      	ldr	r3, [pc, #56]	; (8009050 <SystemInit+0x60>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	490d      	ldr	r1, [pc, #52]	; (8009050 <SystemInit+0x60>)
 800901c:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <SystemInit+0x64>)
 800901e:	4013      	ands	r3, r2
 8009020:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009022:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <SystemInit+0x60>)
 8009024:	4a0c      	ldr	r2, [pc, #48]	; (8009058 <SystemInit+0x68>)
 8009026:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009028:	4b09      	ldr	r3, [pc, #36]	; (8009050 <SystemInit+0x60>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a08      	ldr	r2, [pc, #32]	; (8009050 <SystemInit+0x60>)
 800902e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009032:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009034:	4b06      	ldr	r3, [pc, #24]	; (8009050 <SystemInit+0x60>)
 8009036:	2200      	movs	r2, #0
 8009038:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800903a:	4b04      	ldr	r3, [pc, #16]	; (800904c <SystemInit+0x5c>)
 800903c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009040:	609a      	str	r2, [r3, #8]
#endif
}
 8009042:	bf00      	nop
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	e000ed00 	.word	0xe000ed00
 8009050:	40023800 	.word	0x40023800
 8009054:	fef6ffff 	.word	0xfef6ffff
 8009058:	24003010 	.word	0x24003010

0800905c <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b09a      	sub	sp, #104	; 0x68
 8009060:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009062:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	605a      	str	r2, [r3, #4]
 800906c:	609a      	str	r2, [r3, #8]
 800906e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009074:	2200      	movs	r2, #0
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	605a      	str	r2, [r3, #4]
 800907a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800907c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	605a      	str	r2, [r3, #4]
 8009086:	609a      	str	r2, [r3, #8]
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	611a      	str	r2, [r3, #16]
 800908c:	615a      	str	r2, [r3, #20]
 800908e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	222c      	movs	r2, #44	; 0x2c
 8009094:	2100      	movs	r1, #0
 8009096:	4618      	mov	r0, r3
 8009098:	f006 fbb3 	bl	800f802 <memset>

  htim1.Instance = TIM1;
 800909c:	4b56      	ldr	r3, [pc, #344]	; (80091f8 <MX_TIM1_Init+0x19c>)
 800909e:	4a57      	ldr	r2, [pc, #348]	; (80091fc <MX_TIM1_Init+0x1a0>)
 80090a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 80090a2:	4b55      	ldr	r3, [pc, #340]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090a4:	f245 425f 	movw	r2, #21599	; 0x545f
 80090a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090aa:	4b53      	ldr	r3, [pc, #332]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80090b0:	4b51      	ldr	r3, [pc, #324]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80090b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090b8:	4b4f      	ldr	r3, [pc, #316]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80090be:	4b4e      	ldr	r3, [pc, #312]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090c4:	4b4c      	ldr	r3, [pc, #304]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80090ca:	484b      	ldr	r0, [pc, #300]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090cc:	f7fb fc32 	bl	8004934 <HAL_TIM_Base_Init>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80090d6:	f7ff fa8b 	bl	80085f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090de:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80090e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80090e4:	4619      	mov	r1, r3
 80090e6:	4844      	ldr	r0, [pc, #272]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090e8:	f7fb ff22 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80090f2:	f7ff fa7d 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80090f6:	4840      	ldr	r0, [pc, #256]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80090f8:	f7fb fc72 	bl	80049e0 <HAL_TIM_PWM_Init>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8009102:	f7ff fa75 	bl	80085f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009106:	2300      	movs	r3, #0
 8009108:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800910a:	2300      	movs	r3, #0
 800910c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800910e:	2300      	movs	r3, #0
 8009110:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009112:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009116:	4619      	mov	r1, r3
 8009118:	4837      	ldr	r0, [pc, #220]	; (80091f8 <MX_TIM1_Init+0x19c>)
 800911a:	f7fc fba9 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8009124:	f7ff fa64 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009128:	2360      	movs	r3, #96	; 0x60
 800912a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009130:	2300      	movs	r3, #0
 8009132:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009134:	2300      	movs	r3, #0
 8009136:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009138:	2300      	movs	r3, #0
 800913a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800913c:	2300      	movs	r3, #0
 800913e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009140:	2300      	movs	r3, #0
 8009142:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009144:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009148:	2200      	movs	r2, #0
 800914a:	4619      	mov	r1, r3
 800914c:	482a      	ldr	r0, [pc, #168]	; (80091f8 <MX_TIM1_Init+0x19c>)
 800914e:	f7fb fdd7 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8009158:	f7ff fa4a 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800915c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009160:	2204      	movs	r2, #4
 8009162:	4619      	mov	r1, r3
 8009164:	4824      	ldr	r0, [pc, #144]	; (80091f8 <MX_TIM1_Init+0x19c>)
 8009166:	f7fb fdcb 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8009170:	f7ff fa3e 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009174:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009178:	2208      	movs	r2, #8
 800917a:	4619      	mov	r1, r3
 800917c:	481e      	ldr	r0, [pc, #120]	; (80091f8 <MX_TIM1_Init+0x19c>)
 800917e:	f7fb fdbf 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8009188:	f7ff fa32 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800918c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009190:	220c      	movs	r2, #12
 8009192:	4619      	mov	r1, r3
 8009194:	4818      	ldr	r0, [pc, #96]	; (80091f8 <MX_TIM1_Init+0x19c>)
 8009196:	f7fb fdb3 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80091a0:	f7ff fa26 	bl	80085f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80091b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80091c2:	2300      	movs	r3, #0
 80091c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80091c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80091d4:	1d3b      	adds	r3, r7, #4
 80091d6:	4619      	mov	r1, r3
 80091d8:	4807      	ldr	r0, [pc, #28]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80091da:	f7fc fba5 	bl	8005928 <HAL_TIMEx_ConfigBreakDeadTime>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80091e4:	f7ff fa04 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80091e8:	4803      	ldr	r0, [pc, #12]	; (80091f8 <MX_TIM1_Init+0x19c>)
 80091ea:	f000 fdb1 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 80091ee:	bf00      	nop
 80091f0:	3768      	adds	r7, #104	; 0x68
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	2000a14c 	.word	0x2000a14c
 80091fc:	40010000 	.word	0x40010000

08009200 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08e      	sub	sp, #56	; 0x38
 8009204:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800920a:	2200      	movs	r2, #0
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	609a      	str	r2, [r3, #8]
 8009212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009214:	f107 031c 	add.w	r3, r7, #28
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	605a      	str	r2, [r3, #4]
 800921e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009220:	463b      	mov	r3, r7
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	605a      	str	r2, [r3, #4]
 8009228:	609a      	str	r2, [r3, #8]
 800922a:	60da      	str	r2, [r3, #12]
 800922c:	611a      	str	r2, [r3, #16]
 800922e:	615a      	str	r2, [r3, #20]
 8009230:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8009232:	4b3e      	ldr	r3, [pc, #248]	; (800932c <MX_TIM2_Init+0x12c>)
 8009234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 800923a:	4b3c      	ldr	r3, [pc, #240]	; (800932c <MX_TIM2_Init+0x12c>)
 800923c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009242:	4b3a      	ldr	r3, [pc, #232]	; (800932c <MX_TIM2_Init+0x12c>)
 8009244:	2200      	movs	r2, #0
 8009246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8009248:	4b38      	ldr	r3, [pc, #224]	; (800932c <MX_TIM2_Init+0x12c>)
 800924a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800924e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009250:	4b36      	ldr	r3, [pc, #216]	; (800932c <MX_TIM2_Init+0x12c>)
 8009252:	2200      	movs	r2, #0
 8009254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009256:	4b35      	ldr	r3, [pc, #212]	; (800932c <MX_TIM2_Init+0x12c>)
 8009258:	2200      	movs	r2, #0
 800925a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800925c:	4833      	ldr	r0, [pc, #204]	; (800932c <MX_TIM2_Init+0x12c>)
 800925e:	f7fb fb69 	bl	8004934 <HAL_TIM_Base_Init>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009268:	f7ff f9c2 	bl	80085f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800926c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009270:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009276:	4619      	mov	r1, r3
 8009278:	482c      	ldr	r0, [pc, #176]	; (800932c <MX_TIM2_Init+0x12c>)
 800927a:	f7fb fe59 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009284:	f7ff f9b4 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009288:	4828      	ldr	r0, [pc, #160]	; (800932c <MX_TIM2_Init+0x12c>)
 800928a:	f7fb fba9 	bl	80049e0 <HAL_TIM_PWM_Init>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009294:	f7ff f9ac 	bl	80085f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009298:	2300      	movs	r3, #0
 800929a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800929c:	2300      	movs	r3, #0
 800929e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80092a0:	f107 031c 	add.w	r3, r7, #28
 80092a4:	4619      	mov	r1, r3
 80092a6:	4821      	ldr	r0, [pc, #132]	; (800932c <MX_TIM2_Init+0x12c>)
 80092a8:	f7fc fae2 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80092b2:	f7ff f99d 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80092b6:	2360      	movs	r3, #96	; 0x60
 80092b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80092be:	2300      	movs	r3, #0
 80092c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80092c6:	463b      	mov	r3, r7
 80092c8:	2200      	movs	r2, #0
 80092ca:	4619      	mov	r1, r3
 80092cc:	4817      	ldr	r0, [pc, #92]	; (800932c <MX_TIM2_Init+0x12c>)
 80092ce:	f7fb fd17 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80092d8:	f7ff f98a 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80092dc:	463b      	mov	r3, r7
 80092de:	2204      	movs	r2, #4
 80092e0:	4619      	mov	r1, r3
 80092e2:	4812      	ldr	r0, [pc, #72]	; (800932c <MX_TIM2_Init+0x12c>)
 80092e4:	f7fb fd0c 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80092ee:	f7ff f97f 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80092f2:	463b      	mov	r3, r7
 80092f4:	2208      	movs	r2, #8
 80092f6:	4619      	mov	r1, r3
 80092f8:	480c      	ldr	r0, [pc, #48]	; (800932c <MX_TIM2_Init+0x12c>)
 80092fa:	f7fb fd01 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8009304:	f7ff f974 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009308:	463b      	mov	r3, r7
 800930a:	220c      	movs	r2, #12
 800930c:	4619      	mov	r1, r3
 800930e:	4807      	ldr	r0, [pc, #28]	; (800932c <MX_TIM2_Init+0x12c>)
 8009310:	f7fb fcf6 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 800931a:	f7ff f969 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800931e:	4803      	ldr	r0, [pc, #12]	; (800932c <MX_TIM2_Init+0x12c>)
 8009320:	f000 fd16 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 8009324:	bf00      	nop
 8009326:	3738      	adds	r7, #56	; 0x38
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	2000a1cc 	.word	0x2000a1cc

08009330 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	; 0x28
 8009334:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009336:	f107 031c 	add.w	r3, r7, #28
 800933a:	2200      	movs	r2, #0
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	605a      	str	r2, [r3, #4]
 8009340:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009342:	463b      	mov	r3, r7
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	609a      	str	r2, [r3, #8]
 800934c:	60da      	str	r2, [r3, #12]
 800934e:	611a      	str	r2, [r3, #16]
 8009350:	615a      	str	r2, [r3, #20]
 8009352:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8009354:	4b32      	ldr	r3, [pc, #200]	; (8009420 <MX_TIM3_Init+0xf0>)
 8009356:	4a33      	ldr	r2, [pc, #204]	; (8009424 <MX_TIM3_Init+0xf4>)
 8009358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 800935a:	4b31      	ldr	r3, [pc, #196]	; (8009420 <MX_TIM3_Init+0xf0>)
 800935c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009360:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009362:	4b2f      	ldr	r3, [pc, #188]	; (8009420 <MX_TIM3_Init+0xf0>)
 8009364:	2200      	movs	r2, #0
 8009366:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8009368:	4b2d      	ldr	r3, [pc, #180]	; (8009420 <MX_TIM3_Init+0xf0>)
 800936a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800936e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009370:	4b2b      	ldr	r3, [pc, #172]	; (8009420 <MX_TIM3_Init+0xf0>)
 8009372:	2200      	movs	r2, #0
 8009374:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009376:	4b2a      	ldr	r3, [pc, #168]	; (8009420 <MX_TIM3_Init+0xf0>)
 8009378:	2200      	movs	r2, #0
 800937a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800937c:	4828      	ldr	r0, [pc, #160]	; (8009420 <MX_TIM3_Init+0xf0>)
 800937e:	f7fb fb2f 	bl	80049e0 <HAL_TIM_PWM_Init>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009388:	f7ff f932 	bl	80085f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800938c:	2300      	movs	r3, #0
 800938e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009390:	2300      	movs	r3, #0
 8009392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009394:	f107 031c 	add.w	r3, r7, #28
 8009398:	4619      	mov	r1, r3
 800939a:	4821      	ldr	r0, [pc, #132]	; (8009420 <MX_TIM3_Init+0xf0>)
 800939c:	f7fc fa68 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80093a6:	f7ff f923 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80093aa:	2360      	movs	r3, #96	; 0x60
 80093ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80093ba:	463b      	mov	r3, r7
 80093bc:	2200      	movs	r2, #0
 80093be:	4619      	mov	r1, r3
 80093c0:	4817      	ldr	r0, [pc, #92]	; (8009420 <MX_TIM3_Init+0xf0>)
 80093c2:	f7fb fc9d 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80093cc:	f7ff f910 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80093d0:	463b      	mov	r3, r7
 80093d2:	2204      	movs	r2, #4
 80093d4:	4619      	mov	r1, r3
 80093d6:	4812      	ldr	r0, [pc, #72]	; (8009420 <MX_TIM3_Init+0xf0>)
 80093d8:	f7fb fc92 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80093e2:	f7ff f905 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80093e6:	463b      	mov	r3, r7
 80093e8:	2208      	movs	r2, #8
 80093ea:	4619      	mov	r1, r3
 80093ec:	480c      	ldr	r0, [pc, #48]	; (8009420 <MX_TIM3_Init+0xf0>)
 80093ee:	f7fb fc87 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80093f8:	f7ff f8fa 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80093fc:	463b      	mov	r3, r7
 80093fe:	220c      	movs	r2, #12
 8009400:	4619      	mov	r1, r3
 8009402:	4807      	ldr	r0, [pc, #28]	; (8009420 <MX_TIM3_Init+0xf0>)
 8009404:	f7fb fc7c 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800940e:	f7ff f8ef 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8009412:	4803      	ldr	r0, [pc, #12]	; (8009420 <MX_TIM3_Init+0xf0>)
 8009414:	f000 fc9c 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 8009418:	bf00      	nop
 800941a:	3728      	adds	r7, #40	; 0x28
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	2000a08c 	.word	0x2000a08c
 8009424:	40000400 	.word	0x40000400

08009428 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	; 0x28
 800942c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800942e:	f107 031c 	add.w	r3, r7, #28
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	605a      	str	r2, [r3, #4]
 8009438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800943a:	463b      	mov	r3, r7
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	605a      	str	r2, [r3, #4]
 8009442:	609a      	str	r2, [r3, #8]
 8009444:	60da      	str	r2, [r3, #12]
 8009446:	611a      	str	r2, [r3, #16]
 8009448:	615a      	str	r2, [r3, #20]
 800944a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800944c:	4b32      	ldr	r3, [pc, #200]	; (8009518 <MX_TIM4_Init+0xf0>)
 800944e:	4a33      	ldr	r2, [pc, #204]	; (800951c <MX_TIM4_Init+0xf4>)
 8009450:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 8009452:	4b31      	ldr	r3, [pc, #196]	; (8009518 <MX_TIM4_Init+0xf0>)
 8009454:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009458:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800945a:	4b2f      	ldr	r3, [pc, #188]	; (8009518 <MX_TIM4_Init+0xf0>)
 800945c:	2200      	movs	r2, #0
 800945e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8009460:	4b2d      	ldr	r3, [pc, #180]	; (8009518 <MX_TIM4_Init+0xf0>)
 8009462:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009466:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009468:	4b2b      	ldr	r3, [pc, #172]	; (8009518 <MX_TIM4_Init+0xf0>)
 800946a:	2200      	movs	r2, #0
 800946c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800946e:	4b2a      	ldr	r3, [pc, #168]	; (8009518 <MX_TIM4_Init+0xf0>)
 8009470:	2200      	movs	r2, #0
 8009472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009474:	4828      	ldr	r0, [pc, #160]	; (8009518 <MX_TIM4_Init+0xf0>)
 8009476:	f7fb fab3 	bl	80049e0 <HAL_TIM_PWM_Init>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009480:	f7ff f8b6 	bl	80085f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009484:	2300      	movs	r3, #0
 8009486:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009488:	2300      	movs	r3, #0
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800948c:	f107 031c 	add.w	r3, r7, #28
 8009490:	4619      	mov	r1, r3
 8009492:	4821      	ldr	r0, [pc, #132]	; (8009518 <MX_TIM4_Init+0xf0>)
 8009494:	f7fc f9ec 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800949e:	f7ff f8a7 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094a2:	2360      	movs	r3, #96	; 0x60
 80094a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80094b2:	463b      	mov	r3, r7
 80094b4:	2200      	movs	r2, #0
 80094b6:	4619      	mov	r1, r3
 80094b8:	4817      	ldr	r0, [pc, #92]	; (8009518 <MX_TIM4_Init+0xf0>)
 80094ba:	f7fb fc21 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80094c4:	f7ff f894 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80094c8:	463b      	mov	r3, r7
 80094ca:	2204      	movs	r2, #4
 80094cc:	4619      	mov	r1, r3
 80094ce:	4812      	ldr	r0, [pc, #72]	; (8009518 <MX_TIM4_Init+0xf0>)
 80094d0:	f7fb fc16 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80094da:	f7ff f889 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80094de:	463b      	mov	r3, r7
 80094e0:	2208      	movs	r2, #8
 80094e2:	4619      	mov	r1, r3
 80094e4:	480c      	ldr	r0, [pc, #48]	; (8009518 <MX_TIM4_Init+0xf0>)
 80094e6:	f7fb fc0b 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 80094f0:	f7ff f87e 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80094f4:	463b      	mov	r3, r7
 80094f6:	220c      	movs	r2, #12
 80094f8:	4619      	mov	r1, r3
 80094fa:	4807      	ldr	r0, [pc, #28]	; (8009518 <MX_TIM4_Init+0xf0>)
 80094fc:	f7fb fc00 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009506:	f7ff f873 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800950a:	4803      	ldr	r0, [pc, #12]	; (8009518 <MX_TIM4_Init+0xf0>)
 800950c:	f000 fc20 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 8009510:	bf00      	nop
 8009512:	3728      	adds	r7, #40	; 0x28
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	2000a00c 	.word	0x2000a00c
 800951c:	40000800 	.word	0x40000800

08009520 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	605a      	str	r2, [r3, #4]
 800952e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009530:	4b14      	ldr	r3, [pc, #80]	; (8009584 <MX_TIM7_Init+0x64>)
 8009532:	4a15      	ldr	r2, [pc, #84]	; (8009588 <MX_TIM7_Init+0x68>)
 8009534:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009536:	4b13      	ldr	r3, [pc, #76]	; (8009584 <MX_TIM7_Init+0x64>)
 8009538:	2200      	movs	r2, #0
 800953a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800953c:	4b11      	ldr	r3, [pc, #68]	; (8009584 <MX_TIM7_Init+0x64>)
 800953e:	2200      	movs	r2, #0
 8009540:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009542:	4b10      	ldr	r3, [pc, #64]	; (8009584 <MX_TIM7_Init+0x64>)
 8009544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009548:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800954a:	4b0e      	ldr	r3, [pc, #56]	; (8009584 <MX_TIM7_Init+0x64>)
 800954c:	2200      	movs	r2, #0
 800954e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009550:	480c      	ldr	r0, [pc, #48]	; (8009584 <MX_TIM7_Init+0x64>)
 8009552:	f7fb f9ef 	bl	8004934 <HAL_TIM_Base_Init>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800955c:	f7ff f848 	bl	80085f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009560:	2300      	movs	r3, #0
 8009562:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009568:	1d3b      	adds	r3, r7, #4
 800956a:	4619      	mov	r1, r3
 800956c:	4805      	ldr	r0, [pc, #20]	; (8009584 <MX_TIM7_Init+0x64>)
 800956e:	f7fc f97f 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009578:	f7ff f83a 	bl	80085f0 <Error_Handler>
  }

}
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	2000a28c 	.word	0x2000a28c
 8009588:	40001400 	.word	0x40001400

0800958c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b09a      	sub	sp, #104	; 0x68
 8009590:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	605a      	str	r2, [r3, #4]
 800959c:	609a      	str	r2, [r3, #8]
 800959e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]
 80095a8:	605a      	str	r2, [r3, #4]
 80095aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80095ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095b0:	2200      	movs	r2, #0
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	605a      	str	r2, [r3, #4]
 80095b6:	609a      	str	r2, [r3, #8]
 80095b8:	60da      	str	r2, [r3, #12]
 80095ba:	611a      	str	r2, [r3, #16]
 80095bc:	615a      	str	r2, [r3, #20]
 80095be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80095c0:	1d3b      	adds	r3, r7, #4
 80095c2:	222c      	movs	r2, #44	; 0x2c
 80095c4:	2100      	movs	r1, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f006 f91b 	bl	800f802 <memset>

  htim8.Instance = TIM8;
 80095cc:	4b4a      	ldr	r3, [pc, #296]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80095ce:	4a4b      	ldr	r2, [pc, #300]	; (80096fc <MX_TIM8_Init+0x170>)
 80095d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 80095d2:	4b49      	ldr	r3, [pc, #292]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80095d4:	f245 425f 	movw	r2, #21599	; 0x545f
 80095d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095da:	4b47      	ldr	r3, [pc, #284]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80095dc:	2200      	movs	r2, #0
 80095de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80095e0:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80095e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80095e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095e8:	4b43      	ldr	r3, [pc, #268]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80095ee:	4b42      	ldr	r3, [pc, #264]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095f4:	4b40      	ldr	r3, [pc, #256]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80095fa:	483f      	ldr	r0, [pc, #252]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80095fc:	f7fb f99a 	bl	8004934 <HAL_TIM_Base_Init>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009606:	f7fe fff3 	bl	80085f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800960a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800960e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009614:	4619      	mov	r1, r3
 8009616:	4838      	ldr	r0, [pc, #224]	; (80096f8 <MX_TIM8_Init+0x16c>)
 8009618:	f7fb fc8a 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009622:	f7fe ffe5 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009626:	4834      	ldr	r0, [pc, #208]	; (80096f8 <MX_TIM8_Init+0x16c>)
 8009628:	f7fb f9da 	bl	80049e0 <HAL_TIM_PWM_Init>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009632:	f7fe ffdd 	bl	80085f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009636:	2300      	movs	r3, #0
 8009638:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800963a:	2300      	movs	r3, #0
 800963c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800963e:	2300      	movs	r3, #0
 8009640:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009642:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009646:	4619      	mov	r1, r3
 8009648:	482b      	ldr	r0, [pc, #172]	; (80096f8 <MX_TIM8_Init+0x16c>)
 800964a:	f7fc f911 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009654:	f7fe ffcc 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009658:	2360      	movs	r3, #96	; 0x60
 800965a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009660:	2300      	movs	r3, #0
 8009662:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009664:	2300      	movs	r3, #0
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009668:	2300      	movs	r3, #0
 800966a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800966c:	2300      	movs	r3, #0
 800966e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009670:	2300      	movs	r3, #0
 8009672:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009678:	2200      	movs	r2, #0
 800967a:	4619      	mov	r1, r3
 800967c:	481e      	ldr	r0, [pc, #120]	; (80096f8 <MX_TIM8_Init+0x16c>)
 800967e:	f7fb fb3f 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009688:	f7fe ffb2 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800968c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009690:	2204      	movs	r2, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4818      	ldr	r0, [pc, #96]	; (80096f8 <MX_TIM8_Init+0x16c>)
 8009696:	f7fb fb33 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80096a0:	f7fe ffa6 	bl	80085f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80096a4:	2300      	movs	r3, #0
 80096a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80096b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80096c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80096d4:	1d3b      	adds	r3, r7, #4
 80096d6:	4619      	mov	r1, r3
 80096d8:	4807      	ldr	r0, [pc, #28]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80096da:	f7fc f925 	bl	8005928 <HAL_TIMEx_ConfigBreakDeadTime>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 80096e4:	f7fe ff84 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80096e8:	4803      	ldr	r0, [pc, #12]	; (80096f8 <MX_TIM8_Init+0x16c>)
 80096ea:	f000 fb31 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 80096ee:	bf00      	nop
 80096f0:	3768      	adds	r7, #104	; 0x68
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20009fcc 	.word	0x20009fcc
 80096fc:	40010400 	.word	0x40010400

08009700 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08c      	sub	sp, #48	; 0x30
 8009704:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009706:	f107 0320 	add.w	r3, r7, #32
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	605a      	str	r2, [r3, #4]
 8009710:	609a      	str	r2, [r3, #8]
 8009712:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009714:	1d3b      	adds	r3, r7, #4
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	605a      	str	r2, [r3, #4]
 800971c:	609a      	str	r2, [r3, #8]
 800971e:	60da      	str	r2, [r3, #12]
 8009720:	611a      	str	r2, [r3, #16]
 8009722:	615a      	str	r2, [r3, #20]
 8009724:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8009726:	4b2b      	ldr	r3, [pc, #172]	; (80097d4 <MX_TIM9_Init+0xd4>)
 8009728:	4a2b      	ldr	r2, [pc, #172]	; (80097d8 <MX_TIM9_Init+0xd8>)
 800972a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 800972c:	4b29      	ldr	r3, [pc, #164]	; (80097d4 <MX_TIM9_Init+0xd4>)
 800972e:	f245 425f 	movw	r2, #21599	; 0x545f
 8009732:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009734:	4b27      	ldr	r3, [pc, #156]	; (80097d4 <MX_TIM9_Init+0xd4>)
 8009736:	2200      	movs	r2, #0
 8009738:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800973a:	4b26      	ldr	r3, [pc, #152]	; (80097d4 <MX_TIM9_Init+0xd4>)
 800973c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009740:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <MX_TIM9_Init+0xd4>)
 8009744:	2200      	movs	r2, #0
 8009746:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009748:	4b22      	ldr	r3, [pc, #136]	; (80097d4 <MX_TIM9_Init+0xd4>)
 800974a:	2200      	movs	r2, #0
 800974c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800974e:	4821      	ldr	r0, [pc, #132]	; (80097d4 <MX_TIM9_Init+0xd4>)
 8009750:	f7fb f8f0 	bl	8004934 <HAL_TIM_Base_Init>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800975a:	f7fe ff49 	bl	80085f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800975e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009762:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009764:	f107 0320 	add.w	r3, r7, #32
 8009768:	4619      	mov	r1, r3
 800976a:	481a      	ldr	r0, [pc, #104]	; (80097d4 <MX_TIM9_Init+0xd4>)
 800976c:	f7fb fbe0 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8009776:	f7fe ff3b 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800977a:	4816      	ldr	r0, [pc, #88]	; (80097d4 <MX_TIM9_Init+0xd4>)
 800977c:	f7fb f930 	bl	80049e0 <HAL_TIM_PWM_Init>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8009786:	f7fe ff33 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800978a:	2360      	movs	r3, #96	; 0x60
 800978c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009792:	2300      	movs	r3, #0
 8009794:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800979a:	1d3b      	adds	r3, r7, #4
 800979c:	2200      	movs	r2, #0
 800979e:	4619      	mov	r1, r3
 80097a0:	480c      	ldr	r0, [pc, #48]	; (80097d4 <MX_TIM9_Init+0xd4>)
 80097a2:	f7fb faad 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80097ac:	f7fe ff20 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80097b0:	1d3b      	adds	r3, r7, #4
 80097b2:	2204      	movs	r2, #4
 80097b4:	4619      	mov	r1, r3
 80097b6:	4807      	ldr	r0, [pc, #28]	; (80097d4 <MX_TIM9_Init+0xd4>)
 80097b8:	f7fb faa2 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 80097c2:	f7fe ff15 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 80097c6:	4803      	ldr	r0, [pc, #12]	; (80097d4 <MX_TIM9_Init+0xd4>)
 80097c8:	f000 fac2 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 80097cc:	bf00      	nop
 80097ce:	3730      	adds	r7, #48	; 0x30
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	2000a18c 	.word	0x2000a18c
 80097d8:	40014000 	.word	0x40014000

080097dc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80097e2:	1d3b      	adds	r3, r7, #4
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	609a      	str	r2, [r3, #8]
 80097ec:	60da      	str	r2, [r3, #12]
 80097ee:	611a      	str	r2, [r3, #16]
 80097f0:	615a      	str	r2, [r3, #20]
 80097f2:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 80097f4:	4b1e      	ldr	r3, [pc, #120]	; (8009870 <MX_TIM10_Init+0x94>)
 80097f6:	4a1f      	ldr	r2, [pc, #124]	; (8009874 <MX_TIM10_Init+0x98>)
 80097f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 80097fa:	4b1d      	ldr	r3, [pc, #116]	; (8009870 <MX_TIM10_Init+0x94>)
 80097fc:	f245 425f 	movw	r2, #21599	; 0x545f
 8009800:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009802:	4b1b      	ldr	r3, [pc, #108]	; (8009870 <MX_TIM10_Init+0x94>)
 8009804:	2200      	movs	r2, #0
 8009806:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8009808:	4b19      	ldr	r3, [pc, #100]	; (8009870 <MX_TIM10_Init+0x94>)
 800980a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800980e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009810:	4b17      	ldr	r3, [pc, #92]	; (8009870 <MX_TIM10_Init+0x94>)
 8009812:	2200      	movs	r2, #0
 8009814:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009816:	4b16      	ldr	r3, [pc, #88]	; (8009870 <MX_TIM10_Init+0x94>)
 8009818:	2200      	movs	r2, #0
 800981a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800981c:	4814      	ldr	r0, [pc, #80]	; (8009870 <MX_TIM10_Init+0x94>)
 800981e:	f7fb f889 	bl	8004934 <HAL_TIM_Base_Init>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8009828:	f7fe fee2 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800982c:	4810      	ldr	r0, [pc, #64]	; (8009870 <MX_TIM10_Init+0x94>)
 800982e:	f7fb f8d7 	bl	80049e0 <HAL_TIM_PWM_Init>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8009838:	f7fe feda 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800983c:	2360      	movs	r3, #96	; 0x60
 800983e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800984c:	1d3b      	adds	r3, r7, #4
 800984e:	2200      	movs	r2, #0
 8009850:	4619      	mov	r1, r3
 8009852:	4807      	ldr	r0, [pc, #28]	; (8009870 <MX_TIM10_Init+0x94>)
 8009854:	f7fb fa54 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800985e:	f7fe fec7 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8009862:	4803      	ldr	r0, [pc, #12]	; (8009870 <MX_TIM10_Init+0x94>)
 8009864:	f000 fa74 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 8009868:	bf00      	nop
 800986a:	3720      	adds	r7, #32
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	2000a04c 	.word	0x2000a04c
 8009874:	40014400 	.word	0x40014400

08009878 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800987e:	1d3b      	adds	r3, r7, #4
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	605a      	str	r2, [r3, #4]
 8009886:	609a      	str	r2, [r3, #8]
 8009888:	60da      	str	r2, [r3, #12]
 800988a:	611a      	str	r2, [r3, #16]
 800988c:	615a      	str	r2, [r3, #20]
 800988e:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8009890:	4b1e      	ldr	r3, [pc, #120]	; (800990c <MX_TIM11_Init+0x94>)
 8009892:	4a1f      	ldr	r2, [pc, #124]	; (8009910 <MX_TIM11_Init+0x98>)
 8009894:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 8009896:	4b1d      	ldr	r3, [pc, #116]	; (800990c <MX_TIM11_Init+0x94>)
 8009898:	f245 425f 	movw	r2, #21599	; 0x545f
 800989c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800989e:	4b1b      	ldr	r3, [pc, #108]	; (800990c <MX_TIM11_Init+0x94>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80098a4:	4b19      	ldr	r3, [pc, #100]	; (800990c <MX_TIM11_Init+0x94>)
 80098a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80098aa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098ac:	4b17      	ldr	r3, [pc, #92]	; (800990c <MX_TIM11_Init+0x94>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098b2:	4b16      	ldr	r3, [pc, #88]	; (800990c <MX_TIM11_Init+0x94>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80098b8:	4814      	ldr	r0, [pc, #80]	; (800990c <MX_TIM11_Init+0x94>)
 80098ba:	f7fb f83b 	bl	8004934 <HAL_TIM_Base_Init>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80098c4:	f7fe fe94 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80098c8:	4810      	ldr	r0, [pc, #64]	; (800990c <MX_TIM11_Init+0x94>)
 80098ca:	f7fb f889 	bl	80049e0 <HAL_TIM_PWM_Init>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80098d4:	f7fe fe8c 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80098d8:	2360      	movs	r3, #96	; 0x60
 80098da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80098e8:	1d3b      	adds	r3, r7, #4
 80098ea:	2200      	movs	r2, #0
 80098ec:	4619      	mov	r1, r3
 80098ee:	4807      	ldr	r0, [pc, #28]	; (800990c <MX_TIM11_Init+0x94>)
 80098f0:	f7fb fa06 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80098fa:	f7fe fe79 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 80098fe:	4803      	ldr	r0, [pc, #12]	; (800990c <MX_TIM11_Init+0x94>)
 8009900:	f000 fa26 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 8009904:	bf00      	nop
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	2000a10c 	.word	0x2000a10c
 8009910:	40014800 	.word	0x40014800

08009914 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08c      	sub	sp, #48	; 0x30
 8009918:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800991a:	f107 0320 	add.w	r3, r7, #32
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	605a      	str	r2, [r3, #4]
 8009924:	609a      	str	r2, [r3, #8]
 8009926:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009928:	1d3b      	adds	r3, r7, #4
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	605a      	str	r2, [r3, #4]
 8009930:	609a      	str	r2, [r3, #8]
 8009932:	60da      	str	r2, [r3, #12]
 8009934:	611a      	str	r2, [r3, #16]
 8009936:	615a      	str	r2, [r3, #20]
 8009938:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 800993a:	4b2b      	ldr	r3, [pc, #172]	; (80099e8 <MX_TIM12_Init+0xd4>)
 800993c:	4a2b      	ldr	r2, [pc, #172]	; (80099ec <MX_TIM12_Init+0xd8>)
 800993e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 10800-1;
 8009940:	4b29      	ldr	r3, [pc, #164]	; (80099e8 <MX_TIM12_Init+0xd4>)
 8009942:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009946:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009948:	4b27      	ldr	r3, [pc, #156]	; (80099e8 <MX_TIM12_Init+0xd4>)
 800994a:	2200      	movs	r2, #0
 800994c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800994e:	4b26      	ldr	r3, [pc, #152]	; (80099e8 <MX_TIM12_Init+0xd4>)
 8009950:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009954:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009956:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <MX_TIM12_Init+0xd4>)
 8009958:	2200      	movs	r2, #0
 800995a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800995c:	4b22      	ldr	r3, [pc, #136]	; (80099e8 <MX_TIM12_Init+0xd4>)
 800995e:	2200      	movs	r2, #0
 8009960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8009962:	4821      	ldr	r0, [pc, #132]	; (80099e8 <MX_TIM12_Init+0xd4>)
 8009964:	f7fa ffe6 	bl	8004934 <HAL_TIM_Base_Init>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800996e:	f7fe fe3f 	bl	80085f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009976:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8009978:	f107 0320 	add.w	r3, r7, #32
 800997c:	4619      	mov	r1, r3
 800997e:	481a      	ldr	r0, [pc, #104]	; (80099e8 <MX_TIM12_Init+0xd4>)
 8009980:	f7fb fad6 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800998a:	f7fe fe31 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800998e:	4816      	ldr	r0, [pc, #88]	; (80099e8 <MX_TIM12_Init+0xd4>)
 8009990:	f7fb f826 	bl	80049e0 <HAL_TIM_PWM_Init>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800999a:	f7fe fe29 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800999e:	2360      	movs	r3, #96	; 0x60
 80099a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80099ae:	1d3b      	adds	r3, r7, #4
 80099b0:	2200      	movs	r2, #0
 80099b2:	4619      	mov	r1, r3
 80099b4:	480c      	ldr	r0, [pc, #48]	; (80099e8 <MX_TIM12_Init+0xd4>)
 80099b6:	f7fb f9a3 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80099c0:	f7fe fe16 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80099c4:	1d3b      	adds	r3, r7, #4
 80099c6:	2204      	movs	r2, #4
 80099c8:	4619      	mov	r1, r3
 80099ca:	4807      	ldr	r0, [pc, #28]	; (80099e8 <MX_TIM12_Init+0xd4>)
 80099cc:	f7fb f998 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 80099d6:	f7fe fe0b 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80099da:	4803      	ldr	r0, [pc, #12]	; (80099e8 <MX_TIM12_Init+0xd4>)
 80099dc:	f000 f9b8 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 80099e0:	bf00      	nop
 80099e2:	3730      	adds	r7, #48	; 0x30
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	2000a24c 	.word	0x2000a24c
 80099ec:	40001800 	.word	0x40001800

080099f0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099f6:	1d3b      	adds	r3, r7, #4
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	605a      	str	r2, [r3, #4]
 80099fe:	609a      	str	r2, [r3, #8]
 8009a00:	60da      	str	r2, [r3, #12]
 8009a02:	611a      	str	r2, [r3, #16]
 8009a04:	615a      	str	r2, [r3, #20]
 8009a06:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 8009a08:	4b1e      	ldr	r3, [pc, #120]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a0a:	4a1f      	ldr	r2, [pc, #124]	; (8009a88 <MX_TIM13_Init+0x98>)
 8009a0c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 10800-1;
 8009a0e:	4b1d      	ldr	r3, [pc, #116]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a10:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009a14:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a16:	4b1b      	ldr	r3, [pc, #108]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8009a1c:	4b19      	ldr	r3, [pc, #100]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a22:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a24:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a2a:	4b16      	ldr	r3, [pc, #88]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8009a30:	4814      	ldr	r0, [pc, #80]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a32:	f7fa ff7f 	bl	8004934 <HAL_TIM_Base_Init>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8009a3c:	f7fe fdd8 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8009a40:	4810      	ldr	r0, [pc, #64]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a42:	f7fa ffcd 	bl	80049e0 <HAL_TIM_PWM_Init>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8009a4c:	f7fe fdd0 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a50:	2360      	movs	r3, #96	; 0x60
 8009a52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a60:	1d3b      	adds	r3, r7, #4
 8009a62:	2200      	movs	r2, #0
 8009a64:	4619      	mov	r1, r3
 8009a66:	4807      	ldr	r0, [pc, #28]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a68:	f7fb f94a 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8009a72:	f7fe fdbd 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 8009a76:	4803      	ldr	r0, [pc, #12]	; (8009a84 <MX_TIM13_Init+0x94>)
 8009a78:	f000 f96a 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 8009a7c:	bf00      	nop
 8009a7e:	3720      	adds	r7, #32
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	2000a0cc 	.word	0x2000a0cc
 8009a88:	40001c00 	.word	0x40001c00

08009a8c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a92:	1d3b      	adds	r3, r7, #4
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	605a      	str	r2, [r3, #4]
 8009a9a:	609a      	str	r2, [r3, #8]
 8009a9c:	60da      	str	r2, [r3, #12]
 8009a9e:	611a      	str	r2, [r3, #16]
 8009aa0:	615a      	str	r2, [r3, #20]
 8009aa2:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8009aa4:	4b1e      	ldr	r3, [pc, #120]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009aa6:	4a1f      	ldr	r2, [pc, #124]	; (8009b24 <MX_TIM14_Init+0x98>)
 8009aa8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 8009aaa:	4b1d      	ldr	r3, [pc, #116]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009aac:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009ab0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ab2:	4b1b      	ldr	r3, [pc, #108]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8009ab8:	4b19      	ldr	r3, [pc, #100]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009aba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009abe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ac0:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ac6:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009acc:	4814      	ldr	r0, [pc, #80]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009ace:	f7fa ff31 	bl	8004934 <HAL_TIM_Base_Init>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8009ad8:	f7fe fd8a 	bl	80085f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8009adc:	4810      	ldr	r0, [pc, #64]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009ade:	f7fa ff7f 	bl	80049e0 <HAL_TIM_PWM_Init>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8009ae8:	f7fe fd82 	bl	80085f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009aec:	2360      	movs	r3, #96	; 0x60
 8009aee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009afc:	1d3b      	adds	r3, r7, #4
 8009afe:	2200      	movs	r2, #0
 8009b00:	4619      	mov	r1, r3
 8009b02:	4807      	ldr	r0, [pc, #28]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009b04:	f7fb f8fc 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8009b0e:	f7fe fd6f 	bl	80085f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8009b12:	4803      	ldr	r0, [pc, #12]	; (8009b20 <MX_TIM14_Init+0x94>)
 8009b14:	f000 f91c 	bl	8009d50 <HAL_TIM_MspPostInit>

}
 8009b18:	bf00      	nop
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	2000a20c 	.word	0x2000a20c
 8009b24:	40002000 	.word	0x40002000

08009b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08c      	sub	sp, #48	; 0x30
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a62      	ldr	r2, [pc, #392]	; (8009cc0 <HAL_TIM_Base_MspInit+0x198>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d114      	bne.n	8009b64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009b3a:	4b62      	ldr	r3, [pc, #392]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3e:	4a61      	ldr	r2, [pc, #388]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	6453      	str	r3, [r2, #68]	; 0x44
 8009b46:	4b5f      	ldr	r3, [pc, #380]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8009b52:	2200      	movs	r2, #0
 8009b54:	2105      	movs	r1, #5
 8009b56:	2019      	movs	r0, #25
 8009b58:	f7f7 ff22 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009b5c:	2019      	movs	r0, #25
 8009b5e:	f7f7 ff3b 	bl	80019d8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8009b62:	e0a8      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM2)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b6c:	d10c      	bne.n	8009b88 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009b6e:	4b55      	ldr	r3, [pc, #340]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	4a54      	ldr	r2, [pc, #336]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009b74:	f043 0301 	orr.w	r3, r3, #1
 8009b78:	6413      	str	r3, [r2, #64]	; 0x40
 8009b7a:	4b52      	ldr	r3, [pc, #328]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009b86:	e096      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM7)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a4e      	ldr	r2, [pc, #312]	; (8009cc8 <HAL_TIM_Base_MspInit+0x1a0>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d10c      	bne.n	8009bac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009b92:	4b4c      	ldr	r3, [pc, #304]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	4a4b      	ldr	r2, [pc, #300]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009b98:	f043 0320 	orr.w	r3, r3, #32
 8009b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8009b9e:	4b49      	ldr	r3, [pc, #292]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	f003 0320 	and.w	r3, r3, #32
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009baa:	e084      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM8)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a46      	ldr	r2, [pc, #280]	; (8009ccc <HAL_TIM_Base_MspInit+0x1a4>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d10c      	bne.n	8009bd0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009bb6:	4b43      	ldr	r3, [pc, #268]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bba:	4a42      	ldr	r2, [pc, #264]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8009bc2:	4b40      	ldr	r3, [pc, #256]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	623b      	str	r3, [r7, #32]
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
}
 8009bce:	e072      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM9)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a3e      	ldr	r2, [pc, #248]	; (8009cd0 <HAL_TIM_Base_MspInit+0x1a8>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d10c      	bne.n	8009bf4 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009bda:	4b3a      	ldr	r3, [pc, #232]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bde:	4a39      	ldr	r2, [pc, #228]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009be4:	6453      	str	r3, [r2, #68]	; 0x44
 8009be6:	4b37      	ldr	r3, [pc, #220]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bee:	61fb      	str	r3, [r7, #28]
 8009bf0:	69fb      	ldr	r3, [r7, #28]
}
 8009bf2:	e060      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM10)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a36      	ldr	r2, [pc, #216]	; (8009cd4 <HAL_TIM_Base_MspInit+0x1ac>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d114      	bne.n	8009c28 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009bfe:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c02:	4a30      	ldr	r2, [pc, #192]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c08:	6453      	str	r3, [r2, #68]	; 0x44
 8009c0a:	4b2e      	ldr	r3, [pc, #184]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c12:	61bb      	str	r3, [r7, #24]
 8009c14:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8009c16:	2200      	movs	r2, #0
 8009c18:	2105      	movs	r1, #5
 8009c1a:	2019      	movs	r0, #25
 8009c1c:	f7f7 fec0 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009c20:	2019      	movs	r0, #25
 8009c22:	f7f7 fed9 	bl	80019d8 <HAL_NVIC_EnableIRQ>
}
 8009c26:	e046      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM11)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a2a      	ldr	r2, [pc, #168]	; (8009cd8 <HAL_TIM_Base_MspInit+0x1b0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d10c      	bne.n	8009c4c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009c32:	4b24      	ldr	r3, [pc, #144]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c36:	4a23      	ldr	r2, [pc, #140]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8009c3e:	4b21      	ldr	r3, [pc, #132]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	697b      	ldr	r3, [r7, #20]
}
 8009c4a:	e034      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM12)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a22      	ldr	r2, [pc, #136]	; (8009cdc <HAL_TIM_Base_MspInit+0x1b4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d10c      	bne.n	8009c70 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8009c56:	4b1b      	ldr	r3, [pc, #108]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5a:	4a1a      	ldr	r2, [pc, #104]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c60:	6413      	str	r3, [r2, #64]	; 0x40
 8009c62:	4b18      	ldr	r3, [pc, #96]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6a:	613b      	str	r3, [r7, #16]
 8009c6c:	693b      	ldr	r3, [r7, #16]
}
 8009c6e:	e022      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM13)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a1a      	ldr	r2, [pc, #104]	; (8009ce0 <HAL_TIM_Base_MspInit+0x1b8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d10c      	bne.n	8009c94 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009c7a:	4b12      	ldr	r3, [pc, #72]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	4a11      	ldr	r2, [pc, #68]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c84:	6413      	str	r3, [r2, #64]	; 0x40
 8009c86:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]
}
 8009c92:	e010      	b.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM14)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a12      	ldr	r2, [pc, #72]	; (8009ce4 <HAL_TIM_Base_MspInit+0x1bc>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d10b      	bne.n	8009cb6 <HAL_TIM_Base_MspInit+0x18e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009c9e:	4b09      	ldr	r3, [pc, #36]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	4a08      	ldr	r2, [pc, #32]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8009caa:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <HAL_TIM_Base_MspInit+0x19c>)
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb2:	60bb      	str	r3, [r7, #8]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
}
 8009cb6:	bf00      	nop
 8009cb8:	3730      	adds	r7, #48	; 0x30
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	40010000 	.word	0x40010000
 8009cc4:	40023800 	.word	0x40023800
 8009cc8:	40001400 	.word	0x40001400
 8009ccc:	40010400 	.word	0x40010400
 8009cd0:	40014000 	.word	0x40014000
 8009cd4:	40014400 	.word	0x40014400
 8009cd8:	40014800 	.word	0x40014800
 8009cdc:	40001800 	.word	0x40001800
 8009ce0:	40001c00 	.word	0x40001c00
 8009ce4:	40002000 	.word	0x40002000

08009ce8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a13      	ldr	r2, [pc, #76]	; (8009d44 <HAL_TIM_PWM_MspInit+0x5c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d10c      	bne.n	8009d14 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <HAL_TIM_PWM_MspInit+0x60>)
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	4a12      	ldr	r2, [pc, #72]	; (8009d48 <HAL_TIM_PWM_MspInit+0x60>)
 8009d00:	f043 0302 	orr.w	r3, r3, #2
 8009d04:	6413      	str	r3, [r2, #64]	; 0x40
 8009d06:	4b10      	ldr	r3, [pc, #64]	; (8009d48 <HAL_TIM_PWM_MspInit+0x60>)
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	60fb      	str	r3, [r7, #12]
 8009d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8009d12:	e010      	b.n	8009d36 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a0c      	ldr	r2, [pc, #48]	; (8009d4c <HAL_TIM_PWM_MspInit+0x64>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d10b      	bne.n	8009d36 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009d1e:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <HAL_TIM_PWM_MspInit+0x60>)
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <HAL_TIM_PWM_MspInit+0x60>)
 8009d24:	f043 0304 	orr.w	r3, r3, #4
 8009d28:	6413      	str	r3, [r2, #64]	; 0x40
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <HAL_TIM_PWM_MspInit+0x60>)
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	60bb      	str	r3, [r7, #8]
 8009d34:	68bb      	ldr	r3, [r7, #8]
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	40000400 	.word	0x40000400
 8009d48:	40023800 	.word	0x40023800
 8009d4c:	40000800 	.word	0x40000800

08009d50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b096      	sub	sp, #88	; 0x58
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	605a      	str	r2, [r3, #4]
 8009d62:	609a      	str	r2, [r3, #8]
 8009d64:	60da      	str	r2, [r3, #12]
 8009d66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4aa2      	ldr	r2, [pc, #648]	; (8009ff8 <HAL_TIM_MspPostInit+0x2a8>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d13a      	bne.n	8009de8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009d72:	4ba2      	ldr	r3, [pc, #648]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d76:	4aa1      	ldr	r2, [pc, #644]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009d78:	f043 0310 	orr.w	r3, r3, #16
 8009d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8009d7e:	4b9f      	ldr	r3, [pc, #636]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d82:	f003 0310 	and.w	r3, r3, #16
 8009d86:	643b      	str	r3, [r7, #64]	; 0x40
 8009d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d8a:	4b9c      	ldr	r3, [pc, #624]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	4a9b      	ldr	r2, [pc, #620]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009d90:	f043 0301 	orr.w	r3, r3, #1
 8009d94:	6313      	str	r3, [r2, #48]	; 0x30
 8009d96:	4b99      	ldr	r3, [pc, #612]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 8009da2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009da6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009da8:	2302      	movs	r3, #2
 8009daa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dac:	2300      	movs	r3, #0
 8009dae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009db0:	2300      	movs	r3, #0
 8009db2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009db4:	2301      	movs	r3, #1
 8009db6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009db8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4890      	ldr	r0, [pc, #576]	; (800a000 <HAL_TIM_MspPostInit+0x2b0>)
 8009dc0:	f7f8 fa20 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin|PWM_3_Pin;
 8009dc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009dc8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dca:	2302      	movs	r3, #2
 8009dcc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009dde:	4619      	mov	r1, r3
 8009de0:	4888      	ldr	r0, [pc, #544]	; (800a004 <HAL_TIM_MspPostInit+0x2b4>)
 8009de2:	f7f8 fa0f 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8009de6:	e1ab      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM2)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df0:	d13a      	bne.n	8009e68 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009df2:	4b82      	ldr	r3, [pc, #520]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	4a81      	ldr	r2, [pc, #516]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009df8:	f043 0302 	orr.w	r3, r3, #2
 8009dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8009dfe:	4b7f      	ldr	r3, [pc, #508]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e0a:	4b7c      	ldr	r3, [pc, #496]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0e:	4a7b      	ldr	r2, [pc, #492]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e10:	f043 0301 	orr.w	r3, r3, #1
 8009e14:	6313      	str	r3, [r2, #48]	; 0x30
 8009e16:	4b79      	ldr	r3, [pc, #484]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = PWM_6_Pin|PWM_7_Pin|PWM_5_Pin;
 8009e22:	f640 4308 	movw	r3, #3080	; 0xc08
 8009e26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e28:	2302      	movs	r3, #2
 8009e2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e30:	2300      	movs	r3, #0
 8009e32:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009e34:	2301      	movs	r3, #1
 8009e36:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4872      	ldr	r0, [pc, #456]	; (800a008 <HAL_TIM_MspPostInit+0x2b8>)
 8009e40:	f7f8 f9e0 	bl	8002204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_4_Pin;
 8009e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e48:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e52:	2300      	movs	r3, #0
 8009e54:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009e56:	2301      	movs	r3, #1
 8009e58:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_4_GPIO_Port, &GPIO_InitStruct);
 8009e5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4868      	ldr	r0, [pc, #416]	; (800a004 <HAL_TIM_MspPostInit+0x2b4>)
 8009e62:	f7f8 f9cf 	bl	8002204 <HAL_GPIO_Init>
}
 8009e66:	e16b      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM3)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a67      	ldr	r2, [pc, #412]	; (800a00c <HAL_TIM_MspPostInit+0x2bc>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d139      	bne.n	8009ee6 <HAL_TIM_MspPostInit+0x196>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e72:	4b62      	ldr	r3, [pc, #392]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e76:	4a61      	ldr	r2, [pc, #388]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e78:	f043 0304 	orr.w	r3, r3, #4
 8009e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e7e:	4b5f      	ldr	r3, [pc, #380]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	633b      	str	r3, [r7, #48]	; 0x30
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e8a:	4b5c      	ldr	r3, [pc, #368]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8e:	4a5b      	ldr	r2, [pc, #364]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e90:	f043 0302 	orr.w	r3, r3, #2
 8009e94:	6313      	str	r3, [r2, #48]	; 0x30
 8009e96:	4b59      	ldr	r3, [pc, #356]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = PWM_10_Pin|PWM_11_Pin;
 8009ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ea6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eac:	2300      	movs	r3, #0
 8009eae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009eb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4854      	ldr	r0, [pc, #336]	; (800a010 <HAL_TIM_MspPostInit+0x2c0>)
 8009ec0:	f7f8 f9a0 	bl	8002204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_8_Pin|PWM_9_Pin;
 8009ec4:	2330      	movs	r3, #48	; 0x30
 8009ec6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ed8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009edc:	4619      	mov	r1, r3
 8009ede:	484a      	ldr	r0, [pc, #296]	; (800a008 <HAL_TIM_MspPostInit+0x2b8>)
 8009ee0:	f7f8 f990 	bl	8002204 <HAL_GPIO_Init>
}
 8009ee4:	e12c      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM4)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a4a      	ldr	r2, [pc, #296]	; (800a014 <HAL_TIM_MspPostInit+0x2c4>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d11d      	bne.n	8009f2c <HAL_TIM_MspPostInit+0x1dc>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ef0:	4b42      	ldr	r3, [pc, #264]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef4:	4a41      	ldr	r2, [pc, #260]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009ef6:	f043 0308 	orr.w	r3, r3, #8
 8009efa:	6313      	str	r3, [r2, #48]	; 0x30
 8009efc:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f00:	f003 0308 	and.w	r3, r3, #8
 8009f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_12_Pin|PWM_13_Pin|PWM_14_Pin|PWM_15_Pin;
 8009f08:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009f0c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f0e:	2302      	movs	r3, #2
 8009f10:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f16:	2300      	movs	r3, #0
 8009f18:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009f1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009f22:	4619      	mov	r1, r3
 8009f24:	483c      	ldr	r0, [pc, #240]	; (800a018 <HAL_TIM_MspPostInit+0x2c8>)
 8009f26:	f7f8 f96d 	bl	8002204 <HAL_GPIO_Init>
}
 8009f2a:	e109      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM8)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a3a      	ldr	r2, [pc, #232]	; (800a01c <HAL_TIM_MspPostInit+0x2cc>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d11c      	bne.n	8009f70 <HAL_TIM_MspPostInit+0x220>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f36:	4b31      	ldr	r3, [pc, #196]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	4a30      	ldr	r2, [pc, #192]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009f3c:	f043 0304 	orr.w	r3, r3, #4
 8009f40:	6313      	str	r3, [r2, #48]	; 0x30
 8009f42:	4b2e      	ldr	r3, [pc, #184]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = PWM_16_Pin|PWM_17_Pin;
 8009f4e:	23c0      	movs	r3, #192	; 0xc0
 8009f50:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f52:	2302      	movs	r3, #2
 8009f54:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009f66:	4619      	mov	r1, r3
 8009f68:	4829      	ldr	r0, [pc, #164]	; (800a010 <HAL_TIM_MspPostInit+0x2c0>)
 8009f6a:	f7f8 f94b 	bl	8002204 <HAL_GPIO_Init>
}
 8009f6e:	e0e7      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM9)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a2a      	ldr	r2, [pc, #168]	; (800a020 <HAL_TIM_MspPostInit+0x2d0>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d11c      	bne.n	8009fb4 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009f7a:	4b20      	ldr	r3, [pc, #128]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7e:	4a1f      	ldr	r2, [pc, #124]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009f80:	f043 0310 	orr.w	r3, r3, #16
 8009f84:	6313      	str	r3, [r2, #48]	; 0x30
 8009f86:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	623b      	str	r3, [r7, #32]
 8009f90:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_18_Pin|PWM_19_Pin;
 8009f92:	2360      	movs	r3, #96	; 0x60
 8009f94:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f96:	2302      	movs	r3, #2
 8009f98:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009fa6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009faa:	4619      	mov	r1, r3
 8009fac:	4814      	ldr	r0, [pc, #80]	; (800a000 <HAL_TIM_MspPostInit+0x2b0>)
 8009fae:	f7f8 f929 	bl	8002204 <HAL_GPIO_Init>
}
 8009fb2:	e0c5      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM10)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a1a      	ldr	r2, [pc, #104]	; (800a024 <HAL_TIM_MspPostInit+0x2d4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d136      	bne.n	800a02c <HAL_TIM_MspPostInit+0x2dc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009fbe:	4b0f      	ldr	r3, [pc, #60]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc2:	4a0e      	ldr	r2, [pc, #56]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009fc4:	f043 0320 	orr.w	r3, r3, #32
 8009fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <HAL_TIM_MspPostInit+0x2ac>)
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	61fb      	str	r3, [r7, #28]
 8009fd4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_20_Pin;
 8009fd6:	2340      	movs	r3, #64	; 0x40
 8009fd8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fda:	2302      	movs	r3, #2
 8009fdc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_20_GPIO_Port, &GPIO_InitStruct);
 8009fea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009fee:	4619      	mov	r1, r3
 8009ff0:	480d      	ldr	r0, [pc, #52]	; (800a028 <HAL_TIM_MspPostInit+0x2d8>)
 8009ff2:	f7f8 f907 	bl	8002204 <HAL_GPIO_Init>
}
 8009ff6:	e0a3      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
 8009ff8:	40010000 	.word	0x40010000
 8009ffc:	40023800 	.word	0x40023800
 800a000:	40021000 	.word	0x40021000
 800a004:	40020000 	.word	0x40020000
 800a008:	40020400 	.word	0x40020400
 800a00c:	40000400 	.word	0x40000400
 800a010:	40020800 	.word	0x40020800
 800a014:	40000800 	.word	0x40000800
 800a018:	40020c00 	.word	0x40020c00
 800a01c:	40010400 	.word	0x40010400
 800a020:	40014000 	.word	0x40014000
 800a024:	40014400 	.word	0x40014400
 800a028:	40021400 	.word	0x40021400
  else if(timHandle->Instance==TIM11)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a45      	ldr	r2, [pc, #276]	; (800a148 <HAL_TIM_MspPostInit+0x3f8>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d11c      	bne.n	800a070 <HAL_TIM_MspPostInit+0x320>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a036:	4b45      	ldr	r3, [pc, #276]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03a:	4a44      	ldr	r2, [pc, #272]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a03c:	f043 0320 	orr.w	r3, r3, #32
 800a040:	6313      	str	r3, [r2, #48]	; 0x30
 800a042:	4b42      	ldr	r3, [pc, #264]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	61bb      	str	r3, [r7, #24]
 800a04c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_21_Pin;
 800a04e:	2380      	movs	r3, #128	; 0x80
 800a050:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a052:	2302      	movs	r3, #2
 800a054:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a056:	2300      	movs	r3, #0
 800a058:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a05a:	2300      	movs	r3, #0
 800a05c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a05e:	2303      	movs	r3, #3
 800a060:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_21_GPIO_Port, &GPIO_InitStruct);
 800a062:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a066:	4619      	mov	r1, r3
 800a068:	4839      	ldr	r0, [pc, #228]	; (800a150 <HAL_TIM_MspPostInit+0x400>)
 800a06a:	f7f8 f8cb 	bl	8002204 <HAL_GPIO_Init>
}
 800a06e:	e067      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM12)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a37      	ldr	r2, [pc, #220]	; (800a154 <HAL_TIM_MspPostInit+0x404>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d11d      	bne.n	800a0b6 <HAL_TIM_MspPostInit+0x366>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a07a:	4b34      	ldr	r3, [pc, #208]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07e:	4a33      	ldr	r2, [pc, #204]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a080:	f043 0302 	orr.w	r3, r3, #2
 800a084:	6313      	str	r3, [r2, #48]	; 0x30
 800a086:	4b31      	ldr	r3, [pc, #196]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_22_Pin|PWM_23_Pin;
 800a092:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a096:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a098:	2302      	movs	r3, #2
 800a09a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a09c:	2300      	movs	r3, #0
 800a09e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800a0a4:	2309      	movs	r3, #9
 800a0a6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	482a      	ldr	r0, [pc, #168]	; (800a158 <HAL_TIM_MspPostInit+0x408>)
 800a0b0:	f7f8 f8a8 	bl	8002204 <HAL_GPIO_Init>
}
 800a0b4:	e044      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM13)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a28      	ldr	r2, [pc, #160]	; (800a15c <HAL_TIM_MspPostInit+0x40c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d11d      	bne.n	800a0fc <HAL_TIM_MspPostInit+0x3ac>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a0c0:	4b22      	ldr	r3, [pc, #136]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c4:	4a21      	ldr	r2, [pc, #132]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a0c6:	f043 0320 	orr.w	r3, r3, #32
 800a0ca:	6313      	str	r3, [r2, #48]	; 0x30
 800a0cc:	4b1f      	ldr	r3, [pc, #124]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d0:	f003 0320 	and.w	r3, r3, #32
 800a0d4:	613b      	str	r3, [r7, #16]
 800a0d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_24_Pin;
 800a0d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0dc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0de:	2302      	movs	r3, #2
 800a0e0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800a0ea:	2309      	movs	r3, #9
 800a0ec:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_24_GPIO_Port, &GPIO_InitStruct);
 800a0ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4816      	ldr	r0, [pc, #88]	; (800a150 <HAL_TIM_MspPostInit+0x400>)
 800a0f6:	f7f8 f885 	bl	8002204 <HAL_GPIO_Init>
}
 800a0fa:	e021      	b.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM14)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a17      	ldr	r2, [pc, #92]	; (800a160 <HAL_TIM_MspPostInit+0x410>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d11c      	bne.n	800a140 <HAL_TIM_MspPostInit+0x3f0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a106:	4b11      	ldr	r3, [pc, #68]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10a:	4a10      	ldr	r2, [pc, #64]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a10c:	f043 0320 	orr.w	r3, r3, #32
 800a110:	6313      	str	r3, [r2, #48]	; 0x30
 800a112:	4b0e      	ldr	r3, [pc, #56]	; (800a14c <HAL_TIM_MspPostInit+0x3fc>)
 800a114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a116:	f003 0320 	and.w	r3, r3, #32
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM25_Pin;
 800a11e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a122:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a124:	2302      	movs	r3, #2
 800a126:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a12c:	2300      	movs	r3, #0
 800a12e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800a130:	2309      	movs	r3, #9
 800a132:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM25_GPIO_Port, &GPIO_InitStruct);
 800a134:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a138:	4619      	mov	r1, r3
 800a13a:	4805      	ldr	r0, [pc, #20]	; (800a150 <HAL_TIM_MspPostInit+0x400>)
 800a13c:	f7f8 f862 	bl	8002204 <HAL_GPIO_Init>
}
 800a140:	bf00      	nop
 800a142:	3758      	adds	r7, #88	; 0x58
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	40014800 	.word	0x40014800
 800a14c:	40023800 	.word	0x40023800
 800a150:	40021400 	.word	0x40021400
 800a154:	40001800 	.word	0x40001800
 800a158:	40020400 	.word	0x40020400
 800a15c:	40001c00 	.word	0x40001c00
 800a160:	40002000 	.word	0x40002000

0800a164 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800a168:	4b14      	ldr	r3, [pc, #80]	; (800a1bc <MX_UART4_Init+0x58>)
 800a16a:	4a15      	ldr	r2, [pc, #84]	; (800a1c0 <MX_UART4_Init+0x5c>)
 800a16c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a16e:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <MX_UART4_Init+0x58>)
 800a170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a174:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a176:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <MX_UART4_Init+0x58>)
 800a178:	2200      	movs	r2, #0
 800a17a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a17c:	4b0f      	ldr	r3, [pc, #60]	; (800a1bc <MX_UART4_Init+0x58>)
 800a17e:	2200      	movs	r2, #0
 800a180:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a182:	4b0e      	ldr	r3, [pc, #56]	; (800a1bc <MX_UART4_Init+0x58>)
 800a184:	2200      	movs	r2, #0
 800a186:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a188:	4b0c      	ldr	r3, [pc, #48]	; (800a1bc <MX_UART4_Init+0x58>)
 800a18a:	220c      	movs	r2, #12
 800a18c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a18e:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <MX_UART4_Init+0x58>)
 800a190:	2200      	movs	r2, #0
 800a192:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a194:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <MX_UART4_Init+0x58>)
 800a196:	2200      	movs	r2, #0
 800a198:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a19a:	4b08      	ldr	r3, [pc, #32]	; (800a1bc <MX_UART4_Init+0x58>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a1a0:	4b06      	ldr	r3, [pc, #24]	; (800a1bc <MX_UART4_Init+0x58>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a1a6:	4805      	ldr	r0, [pc, #20]	; (800a1bc <MX_UART4_Init+0x58>)
 800a1a8:	f7fb fc5a 	bl	8005a60 <HAL_UART_Init>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800a1b2:	f7fe fa1d 	bl	80085f0 <Error_Handler>
  }

}
 800a1b6:	bf00      	nop
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	2000a4ec 	.word	0x2000a4ec
 800a1c0:	40004c00 	.word	0x40004c00

0800a1c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a1c8:	4b14      	ldr	r3, [pc, #80]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1ca:	4a15      	ldr	r2, [pc, #84]	; (800a220 <MX_USART1_UART_Init+0x5c>)
 800a1cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a1ce:	4b13      	ldr	r3, [pc, #76]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a1d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a1d6:	4b11      	ldr	r3, [pc, #68]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a1dc:	4b0f      	ldr	r3, [pc, #60]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a1e2:	4b0e      	ldr	r3, [pc, #56]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1ea:	220c      	movs	r2, #12
 800a1ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a1fa:	4b08      	ldr	r3, [pc, #32]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a200:	4b06      	ldr	r3, [pc, #24]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a202:	2200      	movs	r2, #0
 800a204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a206:	4805      	ldr	r0, [pc, #20]	; (800a21c <MX_USART1_UART_Init+0x58>)
 800a208:	f7fb fc2a 	bl	8005a60 <HAL_UART_Init>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a212:	f7fe f9ed 	bl	80085f0 <Error_Handler>
  }

}
 800a216:	bf00      	nop
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	2000a46c 	.word	0x2000a46c
 800a220:	40011000 	.word	0x40011000

0800a224 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a228:	4b14      	ldr	r3, [pc, #80]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a22a:	4a15      	ldr	r2, [pc, #84]	; (800a280 <MX_USART3_UART_Init+0x5c>)
 800a22c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a22e:	4b13      	ldr	r3, [pc, #76]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a230:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a234:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a236:	4b11      	ldr	r3, [pc, #68]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a238:	2200      	movs	r2, #0
 800a23a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a23e:	2200      	movs	r2, #0
 800a240:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a242:	4b0e      	ldr	r3, [pc, #56]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a244:	2200      	movs	r2, #0
 800a246:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a24a:	220c      	movs	r2, #12
 800a24c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a24e:	4b0b      	ldr	r3, [pc, #44]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a250:	2200      	movs	r2, #0
 800a252:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a254:	4b09      	ldr	r3, [pc, #36]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a256:	2200      	movs	r2, #0
 800a258:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a25a:	4b08      	ldr	r3, [pc, #32]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a260:	4b06      	ldr	r3, [pc, #24]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a262:	2200      	movs	r2, #0
 800a264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a266:	4805      	ldr	r0, [pc, #20]	; (800a27c <MX_USART3_UART_Init+0x58>)
 800a268:	f7fb fbfa 	bl	8005a60 <HAL_UART_Init>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a272:	f7fe f9bd 	bl	80085f0 <Error_Handler>
  }

}
 800a276:	bf00      	nop
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	2000a38c 	.word	0x2000a38c
 800a280:	40004800 	.word	0x40004800

0800a284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b090      	sub	sp, #64	; 0x40
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a28c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	609a      	str	r2, [r3, #8]
 800a298:	60da      	str	r2, [r3, #12]
 800a29a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a68      	ldr	r2, [pc, #416]	; (800a444 <HAL_UART_MspInit+0x1c0>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d17b      	bne.n	800a39e <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a2a6:	4b68      	ldr	r3, [pc, #416]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	4a67      	ldr	r2, [pc, #412]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2b0:	6413      	str	r3, [r2, #64]	; 0x40
 800a2b2:	4b65      	ldr	r3, [pc, #404]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2be:	4b62      	ldr	r3, [pc, #392]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c2:	4a61      	ldr	r2, [pc, #388]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2c4:	f043 0301 	orr.w	r3, r3, #1
 800a2c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ca:	4b5f      	ldr	r3, [pc, #380]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a2d6:	4b5c      	ldr	r3, [pc, #368]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	4a5b      	ldr	r2, [pc, #364]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2dc:	f043 0308 	orr.w	r3, r3, #8
 800a2e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a2e2:	4b59      	ldr	r3, [pc, #356]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	623b      	str	r3, [r7, #32]
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration    
    PA12     ------> UART4_TX
    PD0     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a2ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800a300:	2306      	movs	r3, #6
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a308:	4619      	mov	r1, r3
 800a30a:	4850      	ldr	r0, [pc, #320]	; (800a44c <HAL_UART_MspInit+0x1c8>)
 800a30c:	f7f7 ff7a 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a310:	2301      	movs	r3, #1
 800a312:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a314:	2302      	movs	r3, #2
 800a316:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a31c:	2303      	movs	r3, #3
 800a31e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a320:	2308      	movs	r3, #8
 800a322:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a328:	4619      	mov	r1, r3
 800a32a:	4849      	ldr	r0, [pc, #292]	; (800a450 <HAL_UART_MspInit+0x1cc>)
 800a32c:	f7f7 ff6a 	bl	8002204 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800a330:	4b48      	ldr	r3, [pc, #288]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a332:	4a49      	ldr	r2, [pc, #292]	; (800a458 <HAL_UART_MspInit+0x1d4>)
 800a334:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800a336:	4b47      	ldr	r3, [pc, #284]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a338:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a33c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a33e:	4b45      	ldr	r3, [pc, #276]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a340:	2200      	movs	r2, #0
 800a342:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a344:	4b43      	ldr	r3, [pc, #268]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a346:	2200      	movs	r2, #0
 800a348:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a34a:	4b42      	ldr	r3, [pc, #264]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a34c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a350:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a352:	4b40      	ldr	r3, [pc, #256]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a354:	2200      	movs	r2, #0
 800a356:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a358:	4b3e      	ldr	r3, [pc, #248]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800a35e:	4b3d      	ldr	r3, [pc, #244]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a360:	2200      	movs	r2, #0
 800a362:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a364:	4b3b      	ldr	r3, [pc, #236]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a366:	2200      	movs	r2, #0
 800a368:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a36a:	4b3a      	ldr	r3, [pc, #232]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800a370:	4838      	ldr	r0, [pc, #224]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a372:	f7f7 fb3f 	bl	80019f4 <HAL_DMA_Init>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 800a37c:	f7fe f938 	bl	80085f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a34      	ldr	r2, [pc, #208]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a384:	66da      	str	r2, [r3, #108]	; 0x6c
 800a386:	4a33      	ldr	r2, [pc, #204]	; (800a454 <HAL_UART_MspInit+0x1d0>)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a38c:	2200      	movs	r2, #0
 800a38e:	2105      	movs	r1, #5
 800a390:	2034      	movs	r0, #52	; 0x34
 800a392:	f7f7 fb05 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a396:	2034      	movs	r0, #52	; 0x34
 800a398:	f7f7 fb1e 	bl	80019d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a39c:	e0f7      	b.n	800a58e <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART1)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a2e      	ldr	r2, [pc, #184]	; (800a45c <HAL_UART_MspInit+0x1d8>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d15d      	bne.n	800a464 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a3a8:	4b27      	ldr	r3, [pc, #156]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ac:	4a26      	ldr	r2, [pc, #152]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3ae:	f043 0310 	orr.w	r3, r3, #16
 800a3b2:	6453      	str	r3, [r2, #68]	; 0x44
 800a3b4:	4b24      	ldr	r3, [pc, #144]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b8:	f003 0310 	and.w	r3, r3, #16
 800a3bc:	61fb      	str	r3, [r7, #28]
 800a3be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3c0:	4b21      	ldr	r3, [pc, #132]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c4:	4a20      	ldr	r2, [pc, #128]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3c6:	f043 0301 	orr.w	r3, r3, #1
 800a3ca:	6313      	str	r3, [r2, #48]	; 0x30
 800a3cc:	4b1e      	ldr	r3, [pc, #120]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	61bb      	str	r3, [r7, #24]
 800a3d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3d8:	4b1b      	ldr	r3, [pc, #108]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3dc:	4a1a      	ldr	r2, [pc, #104]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3de:	f043 0302 	orr.w	r3, r3, #2
 800a3e2:	6313      	str	r3, [r2, #48]	; 0x30
 800a3e4:	4b18      	ldr	r3, [pc, #96]	; (800a448 <HAL_UART_MspInit+0x1c4>)
 800a3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a3f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3fe:	2303      	movs	r3, #3
 800a400:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a402:	2307      	movs	r3, #7
 800a404:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a40a:	4619      	mov	r1, r3
 800a40c:	480f      	ldr	r0, [pc, #60]	; (800a44c <HAL_UART_MspInit+0x1c8>)
 800a40e:	f7f7 fef9 	bl	8002204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a412:	2380      	movs	r3, #128	; 0x80
 800a414:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a416:	2302      	movs	r3, #2
 800a418:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a41e:	2303      	movs	r3, #3
 800a420:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a422:	2307      	movs	r3, #7
 800a424:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a42a:	4619      	mov	r1, r3
 800a42c:	480c      	ldr	r0, [pc, #48]	; (800a460 <HAL_UART_MspInit+0x1dc>)
 800a42e:	f7f7 fee9 	bl	8002204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a432:	2200      	movs	r2, #0
 800a434:	2105      	movs	r1, #5
 800a436:	2025      	movs	r0, #37	; 0x25
 800a438:	f7f7 fab2 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a43c:	2025      	movs	r0, #37	; 0x25
 800a43e:	f7f7 facb 	bl	80019d8 <HAL_NVIC_EnableIRQ>
}
 800a442:	e0a4      	b.n	800a58e <HAL_UART_MspInit+0x30a>
 800a444:	40004c00 	.word	0x40004c00
 800a448:	40023800 	.word	0x40023800
 800a44c:	40020000 	.word	0x40020000
 800a450:	40020c00 	.word	0x40020c00
 800a454:	2000a2cc 	.word	0x2000a2cc
 800a458:	40026040 	.word	0x40026040
 800a45c:	40011000 	.word	0x40011000
 800a460:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART3)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a4b      	ldr	r2, [pc, #300]	; (800a598 <HAL_UART_MspInit+0x314>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	f040 808f 	bne.w	800a58e <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a470:	4b4a      	ldr	r3, [pc, #296]	; (800a59c <HAL_UART_MspInit+0x318>)
 800a472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a474:	4a49      	ldr	r2, [pc, #292]	; (800a59c <HAL_UART_MspInit+0x318>)
 800a476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a47a:	6413      	str	r3, [r2, #64]	; 0x40
 800a47c:	4b47      	ldr	r3, [pc, #284]	; (800a59c <HAL_UART_MspInit+0x318>)
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a488:	4b44      	ldr	r3, [pc, #272]	; (800a59c <HAL_UART_MspInit+0x318>)
 800a48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48c:	4a43      	ldr	r2, [pc, #268]	; (800a59c <HAL_UART_MspInit+0x318>)
 800a48e:	f043 0308 	orr.w	r3, r3, #8
 800a492:	6313      	str	r3, [r2, #48]	; 0x30
 800a494:	4b41      	ldr	r3, [pc, #260]	; (800a59c <HAL_UART_MspInit+0x318>)
 800a496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a498:	f003 0308 	and.w	r3, r3, #8
 800a49c:	60fb      	str	r3, [r7, #12]
 800a49e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a4a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a4b2:	2307      	movs	r3, #7
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4838      	ldr	r0, [pc, #224]	; (800a5a0 <HAL_UART_MspInit+0x31c>)
 800a4be:	f7f7 fea1 	bl	8002204 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a4c2:	4b38      	ldr	r3, [pc, #224]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4c4:	4a38      	ldr	r2, [pc, #224]	; (800a5a8 <HAL_UART_MspInit+0x324>)
 800a4c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800a4c8:	4b36      	ldr	r3, [pc, #216]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a4ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a4d0:	4b34      	ldr	r3, [pc, #208]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a4d6:	4b33      	ldr	r3, [pc, #204]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a4dc:	4b31      	ldr	r3, [pc, #196]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a4e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a4e4:	4b2f      	ldr	r3, [pc, #188]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a4ea:	4b2e      	ldr	r3, [pc, #184]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800a4f0:	4b2c      	ldr	r3, [pc, #176]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a4f6:	4b2b      	ldr	r3, [pc, #172]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a4f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a4fc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a4fe:	4b29      	ldr	r3, [pc, #164]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a500:	2200      	movs	r2, #0
 800a502:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a504:	4827      	ldr	r0, [pc, #156]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a506:	f7f7 fa75 	bl	80019f4 <HAL_DMA_Init>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <HAL_UART_MspInit+0x290>
      Error_Handler();
 800a510:	f7fe f86e 	bl	80085f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a23      	ldr	r2, [pc, #140]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a518:	66da      	str	r2, [r3, #108]	; 0x6c
 800a51a:	4a22      	ldr	r2, [pc, #136]	; (800a5a4 <HAL_UART_MspInit+0x320>)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800a520:	4b22      	ldr	r3, [pc, #136]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a522:	4a23      	ldr	r2, [pc, #140]	; (800a5b0 <HAL_UART_MspInit+0x32c>)
 800a524:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800a526:	4b21      	ldr	r3, [pc, #132]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a528:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800a52c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a52e:	4b1f      	ldr	r3, [pc, #124]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a530:	2240      	movs	r2, #64	; 0x40
 800a532:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a534:	4b1d      	ldr	r3, [pc, #116]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a536:	2200      	movs	r2, #0
 800a538:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a53a:	4b1c      	ldr	r3, [pc, #112]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a53c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a540:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a542:	4b1a      	ldr	r3, [pc, #104]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a544:	2200      	movs	r2, #0
 800a546:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a548:	4b18      	ldr	r3, [pc, #96]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800a54e:	4b17      	ldr	r3, [pc, #92]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a550:	2200      	movs	r2, #0
 800a552:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a554:	4b15      	ldr	r3, [pc, #84]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a55a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a55c:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a55e:	2200      	movs	r2, #0
 800a560:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800a562:	4812      	ldr	r0, [pc, #72]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a564:	f7f7 fa46 	bl	80019f4 <HAL_DMA_Init>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 800a56e:	f7fe f83f 	bl	80085f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a0d      	ldr	r2, [pc, #52]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a576:	669a      	str	r2, [r3, #104]	; 0x68
 800a578:	4a0c      	ldr	r2, [pc, #48]	; (800a5ac <HAL_UART_MspInit+0x328>)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800a57e:	2200      	movs	r2, #0
 800a580:	2105      	movs	r1, #5
 800a582:	2027      	movs	r0, #39	; 0x27
 800a584:	f7f7 fa0c 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a588:	2027      	movs	r0, #39	; 0x27
 800a58a:	f7f7 fa25 	bl	80019d8 <HAL_NVIC_EnableIRQ>
}
 800a58e:	bf00      	nop
 800a590:	3740      	adds	r7, #64	; 0x40
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	40004800 	.word	0x40004800
 800a59c:	40023800 	.word	0x40023800
 800a5a0:	40020c00 	.word	0x40020c00
 800a5a4:	2000a32c 	.word	0x2000a32c
 800a5a8:	40026028 	.word	0x40026028
 800a5ac:	2000a40c 	.word	0x2000a40c
 800a5b0:	40026070 	.word	0x40026070

0800a5b4 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
	ptADDevice->CS_Port->BSRR=(uint32_t)ptADDevice->CS_Pin<<16U;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5c8:	0412      	lsls	r2, r2, #16
 800a5ca:	619a      	str	r2, [r3, #24]
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	ptADDevice->CS_Port->BSRR=(uint32_t)ptADDevice->CS_Pin;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5ea:	619a      	str	r2, [r3, #24]
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	ptADDevice->CONV_Port->BSRR=(uint32_t)ptADDevice->CONV_Pin<<16U;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800a606:	461a      	mov	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a60c:	0412      	lsls	r2, r2, #16
 800a60e:	619a      	str	r2, [r3, #24]
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
	ptADDevice->CONV_Port->BSRR=(uint32_t)ptADDevice->CONV_Pin;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a62e:	619a      	str	r2, [r3, #24]
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <AD7616_getVoltage>:

static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	AD_CONV_HIGH(ptADDev);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff ffe5 	bl	800a61c <AD_CONV_HIGH>
	delay_ns(200);
 800a652:	20c8      	movs	r0, #200	; 0xc8
 800a654:	f001 f8dc 	bl	800b810 <delay_ns>
	AD_CONV_LOW(ptADDev);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ffcd 	bl	800a5f8 <AD_CONV_LOW>
	ptADDev->ucDataFlag = 0;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800a666:	bf00      	nop
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t GPIO_Pin)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800a67a:	2301      	movs	r3, #1
 800a67c:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800a67e:	2300      	movs	r3, #0
 800a680:	613b      	str	r3, [r7, #16]
 800a682:	e024      	b.n	800a6ce <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a684:	4b16      	ldr	r3, [pc, #88]	; (800a6e0 <ADBoard_BUSYCallback+0x70>)
 800a686:	6819      	ldr	r1, [r3, #0]
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	4613      	mov	r3, r2
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	4413      	add	r3, r2
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	440b      	add	r3, r1
 800a694:	60fb      	str	r3, [r7, #12]
		if (GPIO_Pin == ptADDev->BUSY_Pin)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800a69c:	88fa      	ldrh	r2, [r7, #6]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d112      	bne.n	800a6c8 <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800a6a2:	4b0f      	ldr	r3, [pc, #60]	; (800a6e0 <ADBoard_BUSYCallback+0x70>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	b292      	uxth	r2, r2
 800a6aa:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				AD_CS_LOW(ptADDev);
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff ff80 	bl	800a5b4 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD7616_CHANNELNUM);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	2310      	movs	r3, #16
 800a6bc:	4909      	ldr	r1, [pc, #36]	; (800a6e4 <ADBoard_BUSYCallback+0x74>)
 800a6be:	f7f9 fc33 	bl	8003f28 <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]
				break;
 800a6c6:	e005      	b.n	800a6d4 <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	613b      	str	r3, [r7, #16]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	ddd7      	ble.n	800a684 <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800a6d4:	697b      	ldr	r3, [r7, #20]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	2000000c 	.word	0x2000000c
 800a6e4:	20000010 	.word	0x20000010

0800a6e8 <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	int ret=1;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
 800a6f8:	e085      	b.n	800a806 <ADBoard_SPICallback+0x11e>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a6fa:	4b47      	ldr	r3, [pc, #284]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a6fc:	6819      	ldr	r1, [r3, #0]
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	4613      	mov	r3, r2
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	4413      	add	r3, r2
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	440b      	add	r3, r1
 800a70a:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	429a      	cmp	r2, r3
 800a714:	d174      	bne.n	800a800 <ADBoard_SPICallback+0x118>
				{
					ptADBoardDevices->curADBoardNum=i;
 800a716:	4b40      	ldr	r3, [pc, #256]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	b292      	uxth	r2, r2
 800a71e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
					AD_CS_HIGH(ptADDev);
 800a722:	68b8      	ldr	r0, [r7, #8]
 800a724:	f7ff ff58 	bl	800a5d8 <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
					ptADDev->chosen = 0;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
					for(int j=0;j<AD7616_CHANNELNUM;j++)
 800a738:	2300      	movs	r3, #0
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	e01a      	b.n	800a774 <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800a746:	ee07 3a90 	vmov	s15, r3
 800a74a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a74e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800a81c <ADBoard_SPICallback+0x134>
 800a752:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800a75c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3308      	adds	r3, #8
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD7616_CHANNELNUM;j++)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3301      	adds	r3, #1
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b0f      	cmp	r3, #15
 800a778:	dde1      	ble.n	800a73e <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800a77a:	4b27      	ldr	r3, [pc, #156]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a782:	3301      	adds	r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	dc19      	bgt.n	800a7bc <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800a788:	4b23      	ldr	r3, [pc, #140]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 800a790:	4b21      	ldr	r3, [pc, #132]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3201      	adds	r2, #1
 800a796:	b292      	uxth	r2, r2
 800a798:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a79c:	4b1e      	ldr	r3, [pc, #120]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	4b1d      	ldr	r3, [pc, #116]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	440b      	add	r3, r1
 800a7b0:	011b      	lsls	r3, r3, #4
 800a7b2:	4413      	add	r3, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff ff41 	bl	800a63c <AD7616_getVoltage>
 800a7ba:	e01e      	b.n	800a7fa <ADBoard_SPICallback+0x112>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800a7bc:	4b16      	ldr	r3, [pc, #88]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7c4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
						ptADBoardDevices->ucDataFlag = 1;
 800a7c8:	4b13      	ldr	r3, [pc, #76]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
						ptADBoardDevices->ADTimeEnd=micros();
 800a7d2:	f000 ffed 	bl	800b7b0 <micros>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800a7e0:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800a7e8:	4b0b      	ldr	r3, [pc, #44]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a7f0:	4b09      	ldr	r3, [pc, #36]	; (800a818 <ADBoard_SPICallback+0x130>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	1a8a      	subs	r2, r1, r2
 800a7f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
					}
					ret=0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	617b      	str	r3, [r7, #20]
					break;
 800a7fe:	e006      	b.n	800a80e <ADBoard_SPICallback+0x126>
		for(int i=0;i<ADBOARD_NUM;i++)
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	3301      	adds	r3, #1
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f77f af76 	ble.w	800a6fa <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800a80e:	697b      	ldr	r3, [r7, #20]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	2000000c 	.word	0x2000000c
 800a81c:	47800000 	.word	0x47800000

0800a820 <ADBoard_Reset>:

void ADBoard_Reset()
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
	AD_RESET_HIGH();
 800a824:	4b09      	ldr	r3, [pc, #36]	; (800a84c <ADBoard_Reset+0x2c>)
 800a826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a82a:	619a      	str	r2, [r3, #24]
	delay_us(5);
 800a82c:	2005      	movs	r0, #5
 800a82e:	f000 ffd5 	bl	800b7dc <delay_us>
	AD_RESET_LOW();
 800a832:	4b06      	ldr	r3, [pc, #24]	; (800a84c <ADBoard_Reset+0x2c>)
 800a834:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a838:	619a      	str	r2, [r3, #24]
	delay_us(5);
 800a83a:	2005      	movs	r0, #5
 800a83c:	f000 ffce 	bl	800b7dc <delay_us>
	AD_RESET_HIGH();
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <ADBoard_Reset+0x2c>)
 800a842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a846:	619a      	str	r2, [r3, #24]
}
 800a848:	bf00      	nop
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	40020400 	.word	0x40020400

0800a850 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800a854:	4b10      	ldr	r3, [pc, #64]	; (800a898 <ADBoard_updateVoltage+0x48>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2200      	movs	r2, #0
 800a85a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	ptADBoardDevices->curADBoardNum = 0;
 800a85e:	4b0e      	ldr	r3, [pc, #56]	; (800a898 <ADBoard_updateVoltage+0x48>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2200      	movs	r2, #0
 800a864:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	ptADBoardDevices->ADTimeStart=micros();
 800a868:	f000 ffa2 	bl	800b7b0 <micros>
 800a86c:	4602      	mov	r2, r0
 800a86e:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <ADBoard_updateVoltage+0x48>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a876:	4b08      	ldr	r3, [pc, #32]	; (800a898 <ADBoard_updateVoltage+0x48>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	4b07      	ldr	r3, [pc, #28]	; (800a898 <ADBoard_updateVoltage+0x48>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a882:	4619      	mov	r1, r3
 800a884:	460b      	mov	r3, r1
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	440b      	add	r3, r1
 800a88a:	011b      	lsls	r3, r3, #4
 800a88c:	4413      	add	r3, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fed4 	bl	800a63c <AD7616_getVoltage>
}
 800a894:	bf00      	nop
 800a896:	bd80      	pop	{r7, pc}
 800a898:	2000000c 	.word	0x2000000c

0800a89c <AnalogRead_External>:

float AnalogRead_External(uint16_t num) {
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	80fb      	strh	r3, [r7, #6]
	if (0<=num && num<EXTERNAL_ANA_IN_NUM)
 800a8a6:	88fb      	ldrh	r3, [r7, #6]
 800a8a8:	2b0f      	cmp	r3, #15
 800a8aa:	d814      	bhi.n	800a8d6 <AnalogRead_External+0x3a>
	{
		uint16_t boardnum=num/AD7616_CHANNELNUM;
 800a8ac:	88fb      	ldrh	r3, [r7, #6]
 800a8ae:	091b      	lsrs	r3, r3, #4
 800a8b0:	81fb      	strh	r3, [r7, #14]
		uint16_t channelnum=num%AD7616_CHANNELNUM;
 800a8b2:	88fb      	ldrh	r3, [r7, #6]
 800a8b4:	f003 030f 	and.w	r3, r3, #15
 800a8b8:	81bb      	strh	r3, [r7, #12]
		return ptADBoardDevices->ADBoards[boardnum].fChannel[channelnum];
 800a8ba:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <AnalogRead_External+0x50>)
 800a8bc:	6819      	ldr	r1, [r3, #0]
 800a8be:	89fa      	ldrh	r2, [r7, #14]
 800a8c0:	89b8      	ldrh	r0, [r7, #12]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	4413      	add	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4403      	add	r3, r0
 800a8cc:	3308      	adds	r3, #8
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	440b      	add	r3, r1
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	e001      	b.n	800a8da <AnalogRead_External+0x3e>
	}
	else
		return 0;
 800a8d6:	f04f 0300 	mov.w	r3, #0
 800a8da:	ee07 3a90 	vmov	s15, r3
}
 800a8de:	eeb0 0a67 	vmov.f32	s0, s15
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	2000000c 	.word	0x2000000c

0800a8f0 <ADBoard_Init>:

void ADBoard_Init()
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0

	ptADBoardDevices->curADBoardNum=-1;
 800a8f4:	4b26      	ldr	r3, [pc, #152]	; (800a990 <ADBoard_Init+0xa0>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8fc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	ptADBoardDevices->ucDataFlag = 0;
 800a900:	4b23      	ldr	r3, [pc, #140]	; (800a990 <ADBoard_Init+0xa0>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2200      	movs	r2, #0
 800a906:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	ptADBoardDevices->ADTime=0;
 800a90a:	4b21      	ldr	r3, [pc, #132]	; (800a990 <ADBoard_Init+0xa0>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	ptADBoardDevices->ADTimeStart=0;
 800a914:	4b1e      	ldr	r3, [pc, #120]	; (800a990 <ADBoard_Init+0xa0>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2200      	movs	r2, #0
 800a91a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ptADBoardDevices->ADTimeEnd=0;
 800a91e:	4b1c      	ldr	r3, [pc, #112]	; (800a990 <ADBoard_Init+0xa0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2200      	movs	r2, #0
 800a924:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -5;
 800a928:	4b19      	ldr	r3, [pc, #100]	; (800a990 <ADBoard_Init+0xa0>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a19      	ldr	r2, [pc, #100]	; (800a994 <ADBoard_Init+0xa4>)
 800a92e:	661a      	str	r2, [r3, #96]	; 0x60
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 5;
 800a930:	4b17      	ldr	r3, [pc, #92]	; (800a990 <ADBoard_Init+0xa0>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a18      	ldr	r2, [pc, #96]	; (800a998 <ADBoard_Init+0xa8>)
 800a936:	665a      	str	r2, [r3, #100]	; 0x64
	ptADBoardDevices->ADBoards[0].fRange = 10;
 800a938:	4b15      	ldr	r3, [pc, #84]	; (800a990 <ADBoard_Init+0xa0>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a17      	ldr	r2, [pc, #92]	; (800a99c <ADBoard_Init+0xac>)
 800a93e:	669a      	str	r2, [r3, #104]	; 0x68
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi3;
 800a940:	4b13      	ldr	r3, [pc, #76]	; (800a990 <ADBoard_Init+0xa0>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a16      	ldr	r2, [pc, #88]	; (800a9a0 <ADBoard_Init+0xb0>)
 800a946:	671a      	str	r2, [r3, #112]	; 0x70
	ptADBoardDevices->ADBoards[0].CONV_Port = DO_18_GPIO_Port;
 800a948:	4b11      	ldr	r3, [pc, #68]	; (800a990 <ADBoard_Init+0xa0>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a15      	ldr	r2, [pc, #84]	; (800a9a4 <ADBoard_Init+0xb4>)
 800a94e:	675a      	str	r2, [r3, #116]	; 0x74
	ptADBoardDevices->ADBoards[0].CONV_Pin = DO_18_Pin;
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <ADBoard_Init+0xa0>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a958:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	ptADBoardDevices->ADBoards[0].CS_Port = SPI3_CS_GPIO_Port;
 800a95c:	4b0c      	ldr	r3, [pc, #48]	; (800a990 <ADBoard_Init+0xa0>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a11      	ldr	r2, [pc, #68]	; (800a9a8 <ADBoard_Init+0xb8>)
 800a962:	67da      	str	r2, [r3, #124]	; 0x7c
	ptADBoardDevices->ADBoards[0].CS_Pin = SPI3_CS_Pin;
 800a964:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <ADBoard_Init+0xa0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2202      	movs	r2, #2
 800a96a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	ptADBoardDevices->ADBoards[0].BUSY_Port = E7_GPIO_Port;
 800a96e:	4b08      	ldr	r3, [pc, #32]	; (800a990 <ADBoard_Init+0xa0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a0e      	ldr	r2, [pc, #56]	; (800a9ac <ADBoard_Init+0xbc>)
 800a974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ptADBoardDevices->ADBoards[0].BUSY_Pin = E7_Pin;
 800a978:	4b05      	ldr	r3, [pc, #20]	; (800a990 <ADBoard_Init+0xa0>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2280      	movs	r2, #128	; 0x80
 800a97e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
//




	ADBoard_Reset();
 800a982:	f7ff ff4d 	bl	800a820 <ADBoard_Reset>

	ADBoard_updateVoltage();
 800a986:	f7ff ff63 	bl	800a850 <ADBoard_updateVoltage>
}
 800a98a:	bf00      	nop
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	2000000c 	.word	0x2000000c
 800a994:	c0a00000 	.word	0xc0a00000
 800a998:	40a00000 	.word	0x40a00000
 800a99c:	41200000 	.word	0x41200000
 800a9a0:	20009c80 	.word	0x20009c80
 800a9a4:	40020400 	.word	0x40020400
 800a9a8:	40020c00 	.word	0x40020c00
 800a9ac:	40021800 	.word	0x40021800

0800a9b0 <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800a9b0:	b5b0      	push	{r4, r5, r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f000 ff8b 	bl	800b8e0 <_ZN14SOLENOID_VALVEC1Ei>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	331c      	adds	r3, #28
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 ff85 	bl	800b8e0 <_ZN14SOLENOID_VALVEC1Ei>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3334      	adds	r3, #52	; 0x34
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 fbcb 	bl	800b178 <_ZN15PRESSURE_SENSORC1Ei>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3350      	adds	r3, #80	; 0x50
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f002 fe96 	bl	800d718 <_ZN18PRESSURE_SENSORSPIC1Ev>
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	f241 0364 	movw	r3, #4196	; 0x1064
 800a9f2:	4413      	add	r3, r2
 800a9f4:	4a65      	ldr	r2, [pc, #404]	; (800ab8c <_ZN7CHAMBERC1Eiii+0x1dc>)
 800a9f6:	461c      	mov	r4, r3
 800a9f8:	4615      	mov	r5, r2
 800a9fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa06:	682b      	ldr	r3, [r5, #0]
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	f241 0398 	movw	r3, #4248	; 0x1098
 800aa10:	4413      	add	r3, r2
 800aa12:	4a5f      	ldr	r2, [pc, #380]	; (800ab90 <_ZN7CHAMBERC1Eiii+0x1e0>)
 800aa14:	461c      	mov	r4, r3
 800aa16:	4615      	mov	r5, r2
 800aa18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800aa2e:	4413      	add	r3, r2
 800aa30:	4a58      	ldr	r2, [pc, #352]	; (800ab94 <_ZN7CHAMBERC1Eiii+0x1e4>)
 800aa32:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800aa3a:	4413      	add	r3, r2
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	68f9      	ldr	r1, [r7, #12]
 800aa40:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800aa44:	440b      	add	r3, r1
 800aa46:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4a53      	ldr	r2, [pc, #332]	; (800ab98 <_ZN7CHAMBERC1Eiii+0x1e8>)
 800aa4c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressure=0;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f04f 0200 	mov.w	r2, #0
 800aa56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f04f 0200 	mov.w	r2, #0
 800aa60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f04f 0200 	mov.w	r2, #0
 800aa6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pressureDeadZone = 2000;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4a47      	ldr	r2, [pc, #284]	; (800ab9c <_ZN7CHAMBERC1Eiii+0x1ec>)
 800aa7e:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4a47      	ldr	r2, [pc, #284]	; (800aba0 <_ZN7CHAMBERC1Eiii+0x1f0>)
 800aa84:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4a46      	ldr	r2, [pc, #280]	; (800aba4 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800aa8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	f241 0354 	movw	r3, #4180	; 0x1054
 800aa94:	4413      	add	r3, r2
 800aa96:	2201      	movs	r2, #1
 800aa98:	601a      	str	r2, [r3, #0]
	opening = 0;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f04f 0200 	mov.w	r2, #0
 800aaa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	da00      	bge.n	800aab4 <_ZN7CHAMBERC1Eiii+0x104>
 800aab2:	3301      	adds	r3, #1
 800aab4:	105b      	asrs	r3, r3, #1
 800aab6:	4a3c      	ldr	r2, [pc, #240]	; (800aba8 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800aab8:	011b      	lsls	r3, r3, #4
 800aaba:	4413      	add	r3, r2
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	da00      	bge.n	800aacc <_ZN7CHAMBERC1Eiii+0x11c>
 800aaca:	3301      	adds	r3, #1
 800aacc:	105b      	asrs	r3, r3, #1
 800aace:	4a36      	ldr	r2, [pc, #216]	; (800aba8 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	4413      	add	r3, r2
 800aad4:	3304      	adds	r3, #4
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da00      	bge.n	800aae6 <_ZN7CHAMBERC1Eiii+0x136>
 800aae4:	3301      	adds	r3, #1
 800aae6:	105b      	asrs	r3, r3, #1
 800aae8:	4a2f      	ldr	r2, [pc, #188]	; (800aba8 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800aaea:	011b      	lsls	r3, r3, #4
 800aaec:	4413      	add	r3, r2
 800aaee:	3308      	adds	r3, #8
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	da00      	bge.n	800ab00 <_ZN7CHAMBERC1Eiii+0x150>
 800aafe:	3301      	adds	r3, #1
 800ab00:	105b      	asrs	r3, r3, #1
 800ab02:	4a29      	ldr	r2, [pc, #164]	; (800aba8 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	4413      	add	r3, r2
 800ab08:	330c      	adds	r3, #12
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ab18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800ab1c:	eddf 4a23 	vldr	s9, [pc, #140]	; 800abac <_ZN7CHAMBERC1Eiii+0x1fc>
 800ab20:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800abb0 <_ZN7CHAMBERC1Eiii+0x200>
 800ab24:	eddf 3a23 	vldr	s7, [pc, #140]	; 800abb4 <_ZN7CHAMBERC1Eiii+0x204>
 800ab28:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800abb4 <_ZN7CHAMBERC1Eiii+0x204>
 800ab2c:	eddf 2a22 	vldr	s5, [pc, #136]	; 800abb8 <_ZN7CHAMBERC1Eiii+0x208>
 800ab30:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800abbc <_ZN7CHAMBERC1Eiii+0x20c>
 800ab34:	eddf 1a22 	vldr	s3, [pc, #136]	; 800abc0 <_ZN7CHAMBERC1Eiii+0x210>
 800ab38:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800abc4 <_ZN7CHAMBERC1Eiii+0x214>
 800ab3c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800abb4 <_ZN7CHAMBERC1Eiii+0x204>
 800ab40:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800abc8 <_ZN7CHAMBERC1Eiii+0x218>
 800ab44:	f000 fab6 	bl	800b0b4 <NewPressureController>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	f241 035c 	movw	r3, #4188	; 0x105c
 800ab54:	4413      	add	r3, r2
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	f241 0358 	movw	r3, #4184	; 0x1058
 800ab60:	4413      	add	r3, r2
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	33b4      	adds	r3, #180	; 0xb4
 800ab74:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ab78:	2100      	movs	r1, #0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f004 fe41 	bl	800f802 <memset>

}
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bdb0      	pop	{r4, r5, r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	080144d0 	.word	0x080144d0
 800ab90:	08014504 	.word	0x08014504
 800ab94:	3e99999a 	.word	0x3e99999a
 800ab98:	3c23d70a 	.word	0x3c23d70a
 800ab9c:	44fa0000 	.word	0x44fa0000
 800aba0:	46ea6000 	.word	0x46ea6000
 800aba4:	c6ea6000 	.word	0xc6ea6000
 800aba8:	20000030 	.word	0x20000030
 800abac:	3e99999a 	.word	0x3e99999a
 800abb0:	387ba882 	.word	0x387ba882
 800abb4:	00000000 	.word	0x00000000
 800abb8:	37a7c5ac 	.word	0x37a7c5ac
 800abbc:	471c4000 	.word	0x471c4000
 800abc0:	501502f9 	.word	0x501502f9
 800abc4:	3a83126f 	.word	0x3a83126f
 800abc8:	48435000 	.word	0x48435000

0800abcc <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3304      	adds	r3, #4
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 fea7 	bl	800b934 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	331c      	adds	r3, #28
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	4618      	mov	r0, r3
 800abee:	f000 fea1 	bl	800b934 <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3334      	adds	r3, #52	; 0x34
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 fb1f 	bl	800b23c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800abfe:	bf00      	nop
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <_ZN7CHAMBER12readPressureEv>:
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}

float CHAMBER::readPressure(){
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
	pressure = pressureSensor.read();
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	3334      	adds	r3, #52	; 0x34
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fad6 	bl	800b1c4 <_ZN15PRESSURE_SENSOR4readEv>
 800ac18:	eef0 7a40 	vmov.f32	s15, s0
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	//pressure = pressureSensorspi.read();
	return pressure;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac28:	ee07 3a90 	vmov	s15, r3
}
 800ac2c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800ac44:	edd7 7a00 	vldr	s15, [r7]
 800ac48:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800ae2c <_ZN7CHAMBER13writePressureEf+0x1f4>
 800ac4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac54:	d501      	bpl.n	800ac5a <_ZN7CHAMBER13writePressureEf+0x22>
 800ac56:	4b76      	ldr	r3, [pc, #472]	; (800ae30 <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800ac58:	e00b      	b.n	800ac72 <_ZN7CHAMBER13writePressureEf+0x3a>
 800ac5a:	edd7 7a00 	vldr	s15, [r7]
 800ac5e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800ae34 <_ZN7CHAMBER13writePressureEf+0x1fc>
 800ac62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6a:	dd01      	ble.n	800ac70 <_ZN7CHAMBER13writePressureEf+0x38>
 800ac6c:	4b72      	ldr	r3, [pc, #456]	; (800ae38 <_ZN7CHAMBER13writePressureEf+0x200>)
 800ac6e:	e000      	b.n	800ac72 <_ZN7CHAMBER13writePressureEf+0x3a>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

	float pErr = pressureCommand-pressure;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ac84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac88:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800ac92:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9e:	d54e      	bpl.n	800ad3e <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800acac:	edd7 7a03 	vldr	s15, [r7, #12]
 800acb0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800acb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb8:	dd03      	ble.n	800acc2 <_ZN7CHAMBER13writePressureEf+0x8a>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800acc0:	e019      	b.n	800acf6 <_ZN7CHAMBER13writePressureEf+0xbe>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800acce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800acd2:	edd7 7a03 	vldr	s15, [r7, #12]
 800acd6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800acda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acde:	d508      	bpl.n	800acf2 <_ZN7CHAMBER13writePressureEf+0xba>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800acec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acf0:	e001      	b.n	800acf6 <_ZN7CHAMBER13writePressureEf+0xbe>
 800acf2:	edd7 7a03 	vldr	s15, [r7, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800acfc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800ad0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ad10:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ad20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ad2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ad2e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ad32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800ad3c:	e06a      	b.n	800ae14 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ad44:	eeb1 7a67 	vneg.f32	s14, s15
 800ad48:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad54:	dd59      	ble.n	800ae0a <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ad68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ad6c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad70:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ad74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad78:	dd08      	ble.n	800ad8c <_ZN7CHAMBER13writePressureEf+0x154>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ad86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad8a:	e013      	b.n	800adb4 <_ZN7CHAMBER13writePressureEf+0x17c>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ad92:	eef1 6a67 	vneg.f32	s13, s15
 800ad96:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad9a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada2:	d505      	bpl.n	800adb0 <_ZN7CHAMBER13writePressureEf+0x178>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800adaa:	eef1 7a67 	vneg.f32	s15, s15
 800adae:	e001      	b.n	800adb4 <_ZN7CHAMBER13writePressureEf+0x17c>
 800adb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800adc0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800adc4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800add4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800add8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ade2:	eef1 6a67 	vneg.f32	s13, s15
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800adf2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800adf6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800adfa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800adfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800ae08:	e004      	b.n	800ae14 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f04f 0200 	mov.w	r2, #0
 800ae10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800ae1a:	eeb0 0a67 	vmov.f32	s0, s15
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 f80c 	bl	800ae3c <_ZN7CHAMBER12writeOpeningEf>
}
 800ae24:	bf00      	nop
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	c7c35000 	.word	0xc7c35000
 800ae30:	c7c35000 	.word	0xc7c35000
 800ae34:	482fc800 	.word	0x482fc800
 800ae38:	482fc800 	.word	0x482fc800

0800ae3c <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800ae48:	edd7 7a00 	vldr	s15, [r7]
 800ae4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae54:	dd2b      	ble.n	800aeae <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800ae56:	edd7 7a00 	vldr	s15, [r7]
 800ae5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae62:	d502      	bpl.n	800ae6a <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800ae64:	f04f 0300 	mov.w	r3, #0
 800ae68:	e00c      	b.n	800ae84 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800ae6a:	edd7 7a00 	vldr	s15, [r7]
 800ae6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae72:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7a:	dd02      	ble.n	800ae82 <_ZN7CHAMBER12writeOpeningEf+0x46>
 800ae7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ae80:	e000      	b.n	800ae84 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	1d1a      	adds	r2, r3, #4
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800ae94:	eeb0 0a67 	vmov.f32	s0, s15
 800ae98:	4610      	mov	r0, r2
 800ae9a:	f000 fd59 	bl	800b950 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	331c      	adds	r3, #28
 800aea2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800af10 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fd52 	bl	800b950 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800aeac:	e02c      	b.n	800af08 <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800aeae:	edd7 7a00 	vldr	s15, [r7]
 800aeb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800aeb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aebe:	d501      	bpl.n	800aec4 <_ZN7CHAMBER12writeOpeningEf+0x88>
 800aec0:	4b14      	ldr	r3, [pc, #80]	; (800af14 <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800aec2:	e00a      	b.n	800aeda <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800aec4:	edd7 7a00 	vldr	s15, [r7]
 800aec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed0:	dd02      	ble.n	800aed8 <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800aed2:	f04f 0300 	mov.w	r3, #0
 800aed6:	e000      	b.n	800aeda <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3304      	adds	r3, #4
 800aee4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800af10 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fd31 	bl	800b950 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f103 021c 	add.w	r2, r3, #28
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800aefa:	eef1 7a67 	vneg.f32	s15, s15
 800aefe:	eeb0 0a67 	vmov.f32	s0, s15
 800af02:	4610      	mov	r0, r2
 800af04:	f000 fd24 	bl	800b950 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800af08:	bf00      	nop
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	00000000 	.word	0x00000000
 800af14:	bf800000 	.word	0xbf800000

0800af18 <_ZN7CHAMBER20setValveOpeningLimitEffff>:
{
	pressureSensor.setSensorRange_GaugePa(vmin,vmax,pmin,pmax);
}

void CHAMBER::setValveOpeningLimit(float ominN,float omaxN,float ominP,float omaxP)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6178      	str	r0, [r7, #20]
 800af20:	ed87 0a04 	vstr	s0, [r7, #16]
 800af24:	edc7 0a03 	vstr	s1, [r7, #12]
 800af28:	ed87 1a02 	vstr	s2, [r7, #8]
 800af2c:	edc7 1a01 	vstr	s3, [r7, #4]
	openingMinN = ominN;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = omaxN;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = ominP;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = omaxP;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800af50:	bf00      	nop
 800af52:	371c      	adds	r7, #28
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	0000      	movs	r0, r0
	...

0800af60 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800af6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800af6e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800af72:	edd7 7a01 	vldr	s15, [r7, #4]
 800af76:	eef0 7ae7 	vabs.f32	s15, s15
 800af7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800af7e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800afa0 <mySAT+0x40>
 800af82:	ee37 6b06 	vadd.f64	d6, d7, d6
 800af86:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800af8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800af8e:	eeb0 0a67 	vmov.f32	s0, s15
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	f3af 8000 	nop.w
 800afa0:	47ae147b 	.word	0x47ae147b
 800afa4:	3f847ae1 	.word	0x3f847ae1

0800afa8 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08a      	sub	sp, #40	; 0x28
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	ed87 0a02 	vstr	s0, [r7, #8]
 800afb4:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	ed93 7a08 	vldr	s14, [r3, #32]
 800afca:	edd7 7a01 	vldr	s15, [r7, #4]
 800afce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	edd3 6a07 	vldr	s13, [r3, #28]
 800afd8:	edd7 7a02 	vldr	s15, [r7, #8]
 800afdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800afe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800afe4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b07c <superTwisting2rdSMCUpdate+0xd4>
 800afe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	edd3 7a02 	vldr	s15, [r3, #8]
 800aff8:	eeb0 0a67 	vmov.f32	s0, s15
 800affc:	f7ff ffb0 	bl	800af60 <mySAT>
 800b000:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	edd3 7a02 	vldr	s15, [r3, #8]
 800b00a:	eeb0 7ae7 	vabs.f32	s14, s15
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	edd3 7a04 	vldr	s15, [r3, #16]
 800b014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b018:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800b01c:	f04f 0300 	mov.w	r3, #0
 800b020:	617b      	str	r3, [r7, #20]
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	61fb      	str	r3, [r7, #28]
 800b026:	f107 0314 	add.w	r3, r7, #20
 800b02a:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b02c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b030:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b038:	db09      	blt.n	800b04e <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800b03a:	ed97 0a07 	vldr	s0, [r7, #28]
 800b03e:	f003 fc67 	bl	800e910 <sqrtf>
 800b042:	eef0 7a40 	vmov.f32	s15, s0
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	edc3 7a00 	vstr	s15, [r3]
 800b04c:	e003      	b.n	800b056 <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	f04f 0200 	mov.w	r2, #0
 800b054:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800b056:	ed97 7a05 	vldr	s14, [r7, #20]
 800b05a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	ee07 3a90 	vmov	s15, r3
}
 800b070:	eeb0 0a67 	vmov.f32	s0, s15
 800b074:	3728      	adds	r7, #40	; 0x28
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	447a0000 	.word	0x447a0000

0800b080 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	ed87 0a02 	vstr	s0, [r7, #8]
 800b08c:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3324      	adds	r3, #36	; 0x24
 800b094:	edd7 0a01 	vldr	s1, [r7, #4]
 800b098:	ed97 0a02 	vldr	s0, [r7, #8]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff ff83 	bl	800afa8 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	ee07 3a90 	vmov	s15, r3
}
 800b0aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08c      	sub	sp, #48	; 0x30
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800b0be:	edc7 0a08 	vstr	s1, [r7, #32]
 800b0c2:	ed87 1a07 	vstr	s2, [r7, #28]
 800b0c6:	edc7 1a06 	vstr	s3, [r7, #24]
 800b0ca:	ed87 2a05 	vstr	s4, [r7, #20]
 800b0ce:	edc7 2a04 	vstr	s5, [r7, #16]
 800b0d2:	ed87 3a03 	vstr	s6, [r7, #12]
 800b0d6:	edc7 3a02 	vstr	s7, [r7, #8]
 800b0da:	ed87 4a01 	vstr	s8, [r7, #4]
 800b0de:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800b0e2:	204c      	movs	r0, #76	; 0x4c
 800b0e4:	f004 fb7a 	bl	800f7dc <malloc>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800b0ec:	224c      	movs	r2, #76	; 0x4c
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0f2:	f004 fb86 	bl	800f802 <memset>
	pController->psource = psource;
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0fa:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fe:	6a3a      	ldr	r2, [r7, #32]
 800b100:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800b108:	ed97 1a07 	vldr	s2, [r7, #28]
 800b10c:	edd7 0a05 	vldr	s1, [r7, #20]
 800b110:	ed97 0a06 	vldr	s0, [r7, #24]
 800b114:	f001 fa9a 	bl	800c64c <newSimpleKalmanFilter>
 800b118:	4602      	mov	r2, r0
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800b11e:	edd7 2a00 	vldr	s5, [r7]
 800b122:	ed97 2a01 	vldr	s4, [r7, #4]
 800b126:	edd7 1a07 	vldr	s3, [r7, #28]
 800b12a:	ed97 1a02 	vldr	s2, [r7, #8]
 800b12e:	edd7 0a03 	vldr	s1, [r7, #12]
 800b132:	ed97 0a04 	vldr	s0, [r7, #16]
 800b136:	f001 fec9 	bl	800cecc <newPID>
 800b13a:	4602      	mov	r2, r0
 800b13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13e:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800b140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b142:	69fa      	ldr	r2, [r7, #28]
 800b144:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b148:	4a08      	ldr	r2, [pc, #32]	; (800b16c <NewPressureController+0xb8>)
 800b14a:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b152:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800b154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b156:	4a06      	ldr	r2, [pc, #24]	; (800b170 <NewPressureController+0xbc>)
 800b158:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800b15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15c:	4a05      	ldr	r2, [pc, #20]	; (800b174 <NewPressureController+0xc0>)
 800b15e:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800b160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b162:	4618      	mov	r0, r3
 800b164:	3730      	adds	r7, #48	; 0x30
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	3627c5ac 	.word	0x3627c5ac
 800b170:	41a00000 	.word	0x41a00000
 800b174:	0800b081 	.word	0x0800b081

0800b178 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f04f 0200 	mov.w	r2, #0
 800b188:	605a      	str	r2, [r3, #4]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f851 	bl	800b23c <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800b19a:	eddf 1a08 	vldr	s3, [pc, #32]	; 800b1bc <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800b19e:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800b1c0 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800b1a2:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800b1a6:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f854 	bl	800b258 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	48927c00 	.word	0x48927c00
 800b1c0:	00000000 	.word	0x00000000

0800b1c4 <_ZN15PRESSURE_SENSOR4readEv>:

float PRESSURE_SENSOR::read()
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
	voltage = AnalogRead(AnalogPort);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f000 fa61 	bl	800b69a <AnalogRead>
 800b1d8:	eef0 7a40 	vmov.f32	s15, s0
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	ed93 7a05 	vldr	s14, [r3, #20]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	edd3 6a01 	vldr	s13, [r3, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	edd3 7a03 	vldr	s15, [r3, #12]
 800b1f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	ed93 6a06 	vldr	s12, [r3, #24]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	edd3 7a05 	vldr	s15, [r3, #20]
 800b204:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b208:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	edd3 6a04 	vldr	s13, [r3, #16]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	edd3 7a03 	vldr	s15, [r3, #12]
 800b218:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b21c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b220:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	edc3 7a02 	vstr	s15, [r3, #8]
	return pressure;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	ee07 3a90 	vmov	s15, r3
}
 800b232:	eeb0 0a67 	vmov.f32	s0, s15
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <_ZN15PRESSURE_SENSOR6attachEi>:

void PRESSURE_SENSOR::attach(int num)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	601a      	str	r2, [r3, #0]

}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800b258:	b480      	push	{r7}
 800b25a:	b087      	sub	sp, #28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6178      	str	r0, [r7, #20]
 800b260:	ed87 0a04 	vstr	s0, [r7, #16]
 800b264:	edc7 0a03 	vstr	s1, [r7, #12]
 800b268:	ed87 1a02 	vstr	s2, [r7, #8]
 800b26c:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	619a      	str	r2, [r3, #24]
}
 800b288:	bf00      	nop
 800b28a:	371c      	adds	r7, #28
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f8c9 	bl	800b43e <_ZN4PUMPC1Ei>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	330c      	adds	r3, #12
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff ff60 	bl	800b178 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f000 f817 	bl	800b2f0 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]
	direction=0;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f04f 0200 	mov.w	r2, #0
 800b2d4:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f04f 0200 	mov.w	r2, #0
 800b2dc:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f04f 0200 	mov.w	r2, #0
 800b2e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 f808 	bl	800b314 <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 f813 	bl	800b332 <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3304      	adds	r3, #4
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	4618      	mov	r0, r3
 800b326:	f000 f89b 	bl	800b460 <_ZN4PUMP6attachEi>
}
 800b32a:	bf00      	nop
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800b332:	b580      	push	{r7, lr}
 800b334:	b082      	sub	sp, #8
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	330c      	adds	r3, #12
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff ff7a 	bl	800b23c <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <_ZN15PRESSURE_SOURCE16maintainPressureEff>:

void PRESSURE_SOURCE::maintainPressure(float p_low,float p_high) {
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	ed87 0a02 	vstr	s0, [r7, #8]
 800b35c:	edc7 0a01 	vstr	s1, [r7, #4]

	pressureLower=p_low;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=p_high;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	635a      	str	r2, [r3, #52]	; 0x34
	readPressure();
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 f84f 	bl	800b410 <_ZN15PRESSURE_SOURCE12readPressureEv>

	if(pressure<pressureLower)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b37e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b386:	d513      	bpl.n	800b3b0 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x60>
	{
		if(pressureLower>0)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b38e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b396:	dd05      	ble.n	800b3a4 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x54>
			pump.start();
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3304      	adds	r3, #4
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 f86d 	bl	800b47c <_ZN4PUMP5startEv>
			pump.start();
		else
			pump.stop();
	}

}
 800b3a2:	e024      	b.n	800b3ee <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
			pump.stop();
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 f879 	bl	800b4a0 <_ZN4PUMP4stopEv>
}
 800b3ae:	e01e      	b.n	800b3ee <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
	else if(pressure>pressureUpper)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b3bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c4:	dc00      	bgt.n	800b3c8 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x78>
}
 800b3c6:	e012      	b.n	800b3ee <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
		if(pressureUpper<0)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b3ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d6:	d505      	bpl.n	800b3e4 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x94>
			pump.start();
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 f84d 	bl	800b47c <_ZN4PUMP5startEv>
}
 800b3e2:	e004      	b.n	800b3ee <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
			pump.stop();
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 f859 	bl	800b4a0 <_ZN4PUMP4stopEv>
}
 800b3ee:	bf00      	nop
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <_ZN15PRESSURE_SOURCE4stopEv>:

void PRESSURE_SOURCE::stop()
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
	pump.stop();
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3304      	adds	r3, #4
 800b402:	4618      	mov	r0, r3
 800b404:	f000 f84c 	bl	800b4a0 <_ZN4PUMP4stopEv>
}
 800b408:	bf00      	nop
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <_ZN15PRESSURE_SOURCE12readPressureEv>:


float PRESSURE_SOURCE::readPressure() {
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
	pressure=pressureSensor.read();
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	330c      	adds	r3, #12
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff fed1 	bl	800b1c4 <_ZN15PRESSURE_SENSOR4readEv>
 800b422:	eef0 7a40 	vmov.f32	s15, s0
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	return pressure;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	ee07 3a90 	vmov	s15, r3
}
 800b434:	eeb0 0a67 	vmov.f32	s0, s15
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800b43e:	b580      	push	{r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
	status=0;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	605a      	str	r2, [r3, #4]
	attach(num);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f805 	bl	800b460 <_ZN4PUMP6attachEi>
}
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	601a      	str	r2, [r3, #0]
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <_ZN4PUMP5startEv>:

void PUMP::start()
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]

	DigitalWrite(DigitalPort,1-PWM_DIGITAL_OUTPUT_REVERSED);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	b29b      	uxth	r3, r3
 800b48a:	2100      	movs	r1, #0
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 f927 	bl	800b6e0 <DigitalWrite>
	status=1;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	605a      	str	r2, [r3, #4]

}
 800b498:	bf00      	nop
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <_ZN4PUMP4stopEv>:

void PUMP::stop()
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
	DigitalWrite(DigitalPort,PWM_DIGITAL_OUTPUT_REVERSED);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 f915 	bl	800b6e0 <DigitalWrite>
	status=0;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	605a      	str	r2, [r3, #4]

}
 800b4bc:	bf00      	nop
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	330c      	adds	r3, #12
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7ff fedc 	bl	800b294 <_ZN15PRESSURE_SOURCEC1Eii>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3344      	adds	r3, #68	; 0x44
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7ff fed5 	bl	800b294 <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2104      	movs	r1, #4
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f004 f93e 	bl	800f778 <calloc>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	461a      	mov	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2104      	movs	r1, #4
 800b508:	4618      	mov	r0, r3
 800b50a:	f004 f935 	bl	800f778 <calloc>
 800b50e:	4603      	mov	r3, r0
 800b510:	461a      	mov	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800b516:	2300      	movs	r3, #0
 800b518:	60fb      	str	r3, [r7, #12]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	889b      	ldrh	r3, [r3, #4]
 800b51e:	461a      	mov	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4293      	cmp	r3, r2
 800b524:	da18      	bge.n	800b558 <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800b526:	f241 00d4 	movw	r0, #4308	; 0x10d4
 800b52a:	f003 f8c5 	bl	800e6b8 <_Znwj>
 800b52e:	4603      	mov	r3, r0
 800b530:	461c      	mov	r4, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	0059      	lsls	r1, r3, #1
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4620      	mov	r0, r4
 800b540:	f7ff fa36 	bl	800a9b0 <_ZN7CHAMBERC1Eiii>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689a      	ldr	r2, [r3, #8]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3301      	adds	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	e7e0      	b.n	800b51a <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a05      	ldr	r2, [pc, #20]	; (800b570 <_ZN9PNEUDRIVEC1Ei+0xac>)
 800b55c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 10;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a04      	ldr	r2, [pc, #16]	; (800b574 <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800b564:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4618      	mov	r0, r3
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd90      	pop	{r4, r7, pc}
 800b570:	44fa0000 	.word	0x44fa0000
 800b574:	41200000 	.word	0x41200000

0800b578 <_ZN9PNEUDRIVE14writeFrequencyEf>:
		chambers[i]->valves[0].writeFrequency(frequency);
		chambers[i]->valves[1].writeFrequency(frequency);
	}
}

void PNEUDRIVE::writeFrequency(float fre){
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	ed87 0a00 	vstr	s0, [r7]
	frequency = fre;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	67da      	str	r2, [r3, #124]	; 0x7c
	for (int i = 0; i < NumChambers; i++) {
 800b58a:	2300      	movs	r3, #0
 800b58c:	60fb      	str	r3, [r7, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	889b      	ldrh	r3, [r3, #4]
 800b592:	461a      	mov	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4293      	cmp	r3, r2
 800b598:	da22      	bge.n	800b5e0 <_ZN9PNEUDRIVE14writeFrequencyEf+0x68>
		chambers[i]->valves[0].writeFrequency(frequency);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689a      	ldr	r2, [r3, #8]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	1d1a      	adds	r2, r3, #4
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800b5ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	f000 fa24 	bl	800ba00 <_ZN14SOLENOID_VALVE14writeFrequencyEf>
		chambers[i]->valves[1].writeFrequency(frequency);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689a      	ldr	r2, [r3, #8]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f103 021c 	add.w	r2, r3, #28
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800b5ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	f000 fa14 	bl	800ba00 <_ZN14SOLENOID_VALVE14writeFrequencyEf>
	for (int i = 0; i < NumChambers; i++) {
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	60fb      	str	r3, [r7, #12]
 800b5de:	e7d6      	b.n	800b58e <_ZN9PNEUDRIVE14writeFrequencyEf+0x16>
	}
}
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <_ZN9PNEUDRIVE12readPressureEi>:


float PNEUDRIVE::readPressure(int num)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
	return (chambers[num]->readPressure());
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	689a      	ldr	r2, [r3, #8]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff fb01 	bl	800ac06 <_ZN7CHAMBER12readPressureEv>
 800b604:	eef0 7a40 	vmov.f32	s15, s0
}
 800b608:	eeb0 0a67 	vmov.f32	s0, s15
 800b60c:	3708      	adds	r7, #8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <_ZN9PNEUDRIVE13writePressureEif>:

void PNEUDRIVE::writePressure(int num,float preCommand)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	ed87 0a01 	vstr	s0, [r7, #4]
	bufferPressure(num,preCommand);
 800b620:	ed97 0a01 	vldr	s0, [r7, #4]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f808 	bl	800b63c <_ZN9PNEUDRIVE14bufferPressureEif>
	writeBufferedPressure(num);
 800b62c:	68b9      	ldr	r1, [r7, #8]
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 f818 	bl	800b664 <_ZN9PNEUDRIVE21writeBufferedPressureEi>
}
 800b634:	bf00      	nop
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <_ZN9PNEUDRIVE14bufferPressureEif>:

void PNEUDRIVE::bufferPressure(int num,float preCommand)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	ed87 0a01 	vstr	s0, [r7, #4]
	pressureCommands[num]=preCommand;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	601a      	str	r2, [r3, #0]
}
 800b658:	bf00      	nop
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <_ZN9PNEUDRIVE21writeBufferedPressureEi>:
void PNEUDRIVE::writeBufferedPressure(int num)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	chambers[num]->writePressure(pressureCommands[num]);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	689a      	ldr	r2, [r3, #8]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	6819      	ldr	r1, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	edd3 7a00 	vldr	s15, [r3]
 800b688:	eeb0 0a67 	vmov.f32	s0, s15
 800b68c:	4608      	mov	r0, r1
 800b68e:	f7ff fad3 	bl	800ac38 <_ZN7CHAMBER13writePressureEf>
}
 800b692:	bf00      	nop
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <AnalogRead>:
extern TIM_HandleTypeDef htim5;
int32_t globalPeriodControlLoop=1;
int32_t globalPeriodSendLoop=1;

float AnalogRead(uint16_t num)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b084      	sub	sp, #16
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	80fb      	strh	r3, [r7, #6]
	float value=0;
 800b6a4:	f04f 0300 	mov.w	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]
	if(0<=num && num<BUILTIN_ANA_IN_NUM)
 800b6aa:	88fb      	ldrh	r3, [r7, #6]
 800b6ac:	2b0f      	cmp	r3, #15
 800b6ae:	d806      	bhi.n	800b6be <AnalogRead+0x24>
		value=AnalogRead_BuiltIn(num);
 800b6b0:	88fb      	ldrh	r3, [r7, #6]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 f9e2 	bl	800ba7c <AnalogRead_BuiltIn>
 800b6b8:	ed87 0a03 	vstr	s0, [r7, #12]
 800b6bc:	e008      	b.n	800b6d0 <AnalogRead+0x36>
	else
	{
#if (ADBOARD_NUM>0)
		num-=BUILTIN_ANA_IN_NUM;
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	3b10      	subs	r3, #16
 800b6c2:	80fb      	strh	r3, [r7, #6]
		value=AnalogRead_External(num);
 800b6c4:	88fb      	ldrh	r3, [r7, #6]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7ff f8e8 	bl	800a89c <AnalogRead_External>
 800b6cc:	ed87 0a03 	vstr	s0, [r7, #12]
#endif
	}
	return value;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	ee07 3a90 	vmov	s15, r3

}
 800b6d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	460a      	mov	r2, r1
 800b6ea:	80fb      	strh	r3, [r7, #6]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800b6f0:	88ba      	ldrh	r2, [r7, #4]
 800b6f2:	88fb      	ldrh	r3, [r7, #6]
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f9fa 	bl	800baf0 <DigitalBuiltIn_Write>
}
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	ed87 0a00 	vstr	s0, [r7]
 800b710:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800b712:	88fb      	ldrh	r3, [r7, #6]
 800b714:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800b716:	88fb      	ldrh	r3, [r7, #6]
 800b718:	2b19      	cmp	r3, #25
 800b71a:	d805      	bhi.n	800b728 <PWMWriteDuty+0x24>
		PWMBuiltIn_writeDuty(num,fduty);
 800b71c:	88fb      	ldrh	r3, [r7, #6]
 800b71e:	ed97 0a00 	vldr	s0, [r7]
 800b722:	4618      	mov	r0, r3
 800b724:	f000 fa80 	bl	800bc28 <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800b728:	bf00      	nop
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <PWMWriteFrequency>:

void PWMWriteFrequency(uint16_t num, float fre)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	ed87 0a00 	vstr	s0, [r7]
 800b73c:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800b73e:	88fb      	ldrh	r3, [r7, #6]
 800b740:	81fb      	strh	r3, [r7, #14]
	if(num<BUILTIN_PWM_NUM){
 800b742:	88fb      	ldrh	r3, [r7, #6]
 800b744:	2b19      	cmp	r3, #25
 800b746:	d805      	bhi.n	800b754 <PWMWriteFrequency+0x24>
			PWMBuiltIn_writeFrequency(num,fre);
 800b748:	88fb      	ldrh	r3, [r7, #6]
 800b74a:	ed97 0a00 	vldr	s0, [r7]
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 fb0a 	bl	800bd68 <PWMBuiltIn_writeFrequency>
			PWMBoardI2C_writeFrequency(num,fre);
		}
#endif

	}
}
 800b754:	bf00      	nop
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
};
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <serialPort1Callback>:

__weak void serialPort1Callback(char *pWirelessReceiveBuffer) {
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
	printf("Running default WirelessCommandCallbackFunction()\r\n");
 800b778:	4803      	ldr	r0, [pc, #12]	; (800b788 <serialPort1Callback+0x18>)
 800b77a:	f004 ff89 	bl	8010690 <puts>
}
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	080145bc 	.word	0x080145bc

0800b78c <serialPort4Callback>:
;

__weak  void serialPort4Callback(char *pSerialPort4Buffer)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]

};
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800b7a4:	f7f5 fc38 	bl	8001018 <HAL_GetTick>
 800b7a8:	4603      	mov	r3, r0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	bd80      	pop	{r7, pc}
	...

0800b7b0 <micros>:

uint32_t micros()
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800b7b6:	f7ff fff3 	bl	800b7a0 <millis>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b7c0:	fb03 f202 	mul.w	r2, r3, r2
 800b7c4:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <micros+0x28>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ca:	4413      	add	r3, r2
 800b7cc:	607b      	str	r3, [r7, #4]
	return t;
 800b7ce:	687b      	ldr	r3, [r7, #4]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20009f8c 	.word	0x20009f8c

0800b7dc <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800b7e4:	f7ff ffe4 	bl	800b7b0 <micros>
 800b7e8:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800b7ea:	f7ff ffe1 	bl	800b7b0 <micros>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	bfcc      	ite	gt
 800b7fc:	2301      	movgt	r3, #1
 800b7fe:	2300      	movle	r3, #0
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	d000      	beq.n	800b808 <delay_us+0x2c>
 800b806:	e7f0      	b.n	800b7ea <delay_us+0xe>
}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800b818:	4b20      	ldr	r3, [pc, #128]	; (800b89c <delay_ns+0x8c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	4b1f      	ldr	r3, [pc, #124]	; (800b89c <delay_ns+0x8c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f042 0201 	orr.w	r2, r2, #1
 800b826:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800b828:	4b1c      	ldr	r3, [pc, #112]	; (800b89c <delay_ns+0x8c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	461a      	mov	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4293      	cmp	r3, r2
 800b834:	bfcc      	ite	gt
 800b836:	2301      	movgt	r3, #1
 800b838:	2300      	movle	r3, #0
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d000      	beq.n	800b842 <delay_ns+0x32>
 800b840:	e7f2      	b.n	800b828 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800b842:	4b16      	ldr	r3, [pc, #88]	; (800b89c <delay_ns+0x8c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6a1a      	ldr	r2, [r3, #32]
 800b848:	f241 1311 	movw	r3, #4369	; 0x1111
 800b84c:	4013      	ands	r3, r2
 800b84e:	2b00      	cmp	r3, #0
 800b850:	bf0c      	ite	eq
 800b852:	2301      	moveq	r3, #1
 800b854:	2300      	movne	r3, #0
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d014      	beq.n	800b886 <delay_ns+0x76>
 800b85c:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <delay_ns+0x8c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6a1a      	ldr	r2, [r3, #32]
 800b862:	f240 4344 	movw	r3, #1092	; 0x444
 800b866:	4013      	ands	r3, r2
 800b868:	2b00      	cmp	r3, #0
 800b86a:	bf0c      	ite	eq
 800b86c:	2301      	moveq	r3, #1
 800b86e:	2300      	movne	r3, #0
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d007      	beq.n	800b886 <delay_ns+0x76>
 800b876:	4b09      	ldr	r3, [pc, #36]	; (800b89c <delay_ns+0x8c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	4b07      	ldr	r3, [pc, #28]	; (800b89c <delay_ns+0x8c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f022 0201 	bic.w	r2, r2, #1
 800b884:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800b886:	4b05      	ldr	r3, [pc, #20]	; (800b89c <delay_ns+0x8c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2200      	movs	r2, #0
 800b88c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800b88e:	bf00      	nop
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	2000a28c 	.word	0x2000a28c

0800b8a0 <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
 800b8a8:	4a04      	ldr	r2, [pc, #16]	; (800b8bc <setPeriodControlLoop+0x1c>)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6013      	str	r3, [r2, #0]
}
 800b8ae:	bf00      	nop
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	20000210 	.word	0x20000210

0800b8c0 <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
 800b8c8:	4a04      	ldr	r2, [pc, #16]	; (800b8dc <setPeriodSendLoop+0x1c>)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6013      	str	r3, [r2, #0]
}
 800b8ce:	bf00      	nop
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	20000214 	.word	0x20000214

0800b8e0 <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]

	_duty=0;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f04f 0200 	mov.w	r2, #0
 800b8f0:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	edd3 7a02 	vldr	s15, [r3, #8]
 800b8f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a09      	ldr	r2, [pc, #36]	; (800b930 <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800b90a:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f04f 0200 	mov.w	r2, #0
 800b912:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b91a:	615a      	str	r2, [r3, #20]
	attach(num);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f808 	bl	800b934 <_ZN14SOLENOID_VALVE6attachEi>
}
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4618      	mov	r0, r3
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	41200000 	.word	0x41200000

0800b934 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	601a      	str	r2, [r3, #0]
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	ed93 7a04 	vldr	s14, [r3, #16]
 800b962:	edd7 7a00 	vldr	s15, [r7]
 800b966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b96e:	dd02      	ble.n	800b976 <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	e00d      	b.n	800b992 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	ed93 7a05 	vldr	s14, [r3, #20]
 800b97c:	edd7 7a00 	vldr	s15, [r7]
 800b980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b988:	d502      	bpl.n	800b990 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	695b      	ldr	r3, [r3, #20]
 800b98e:	e000      	b.n	800b992 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800b994:	ed97 7a00 	vldr	s14, [r7]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b99e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9a2:	eef0 7ae7 	vabs.f32	s15, s15
 800b9a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b9aa:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800b9f8 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
 800b9ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b6:	dc00      	bgt.n	800b9ba <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800b9b8:	e017      	b.n	800b9ea <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b9c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	edd3 7a02 	vldr	s15, [r3, #8]
 800b9e0:	eeb0 0a67 	vmov.f32	s0, s15
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	f7ff fe8d 	bl	800b704 <PWMWriteDuty>
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	f3af 8000 	nop.w
 800b9f8:	a0b5ed8d 	.word	0xa0b5ed8d
 800b9fc:	3eb0c6f7 	.word	0x3eb0c6f7

0800ba00 <_ZN14SOLENOID_VALVE14writeFrequencyEf>:
	return frequency;
}


void SOLENOID_VALVE::writeFrequency(float fre)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	ed87 0a00 	vstr	s0, [r7]
	if(fabsf(fre-frequency)>1e-6)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	edd3 7a03 	vldr	s15, [r3, #12]
 800ba12:	ed97 7a00 	vldr	s14, [r7]
 800ba16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba1a:	eef0 7ae7 	vabs.f32	s15, s15
 800ba1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba22:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800ba58 <_ZN14SOLENOID_VALVE14writeFrequencyEf+0x58>
 800ba26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2e:	dc00      	bgt.n	800ba32 <_ZN14SOLENOID_VALVE14writeFrequencyEf+0x32>
	{
		frequency = fre;
		PWMWriteFrequency(PWMPort,frequency);
	}
}
 800ba30:	e00d      	b.n	800ba4e <_ZN14SOLENOID_VALVE14writeFrequencyEf+0x4e>
		frequency = fre;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	60da      	str	r2, [r3, #12]
		PWMWriteFrequency(PWMPort,frequency);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	edd3 7a03 	vldr	s15, [r3, #12]
 800ba44:	eeb0 0a67 	vmov.f32	s0, s15
 800ba48:	4610      	mov	r0, r2
 800ba4a:	f7ff fe71 	bl	800b730 <PWMWriteFrequency>
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	a0b5ed8d 	.word	0xa0b5ed8d
 800ba5c:	3eb0c6f7 	.word	0x3eb0c6f7

0800ba60 <AnaBuiltInStart>:

uint16_t ADDataBuiltIn[BUILTIN_ANA_IN_NUM];
float fADDataBuiltIn[BUILTIN_ANA_IN_NUM];

void AnaBuiltInStart()
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)(&ADDataBuiltIn[0]),BUILTIN_ANA_IN_NUM);
 800ba64:	2210      	movs	r2, #16
 800ba66:	4903      	ldr	r1, [pc, #12]	; (800ba74 <AnaBuiltInStart+0x14>)
 800ba68:	4803      	ldr	r0, [pc, #12]	; (800ba78 <AnaBuiltInStart+0x18>)
 800ba6a:	f7f5 fb25 	bl	80010b8 <HAL_ADC_Start_DMA>
}
 800ba6e:	bf00      	nop
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	2000a64c 	.word	0x2000a64c
 800ba78:	200019b8 	.word	0x200019b8

0800ba7c <AnalogRead_BuiltIn>:
		fADDataBuiltIn[i]=ADDataBuiltIn[i]/4096.0f*3.3f;

}*/

float AnalogRead_BuiltIn(int num)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
	if(num>=0 && num<BUILTIN_ANA_IN_NUM)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	db1e      	blt.n	800bac8 <AnalogRead_BuiltIn+0x4c>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b0f      	cmp	r3, #15
 800ba8e:	dc1b      	bgt.n	800bac8 <AnalogRead_BuiltIn+0x4c>
	{
		fADDataBuiltIn[num]=ADDataBuiltIn[num]/4096.0f*3.3f;
 800ba90:	4a13      	ldr	r2, [pc, #76]	; (800bae0 <AnalogRead_BuiltIn+0x64>)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba98:	ee07 3a90 	vmov	s15, r3
 800ba9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800baa0:	eddf 6a10 	vldr	s13, [pc, #64]	; 800bae4 <AnalogRead_BuiltIn+0x68>
 800baa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800baa8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800bae8 <AnalogRead_BuiltIn+0x6c>
 800baac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bab0:	4a0e      	ldr	r2, [pc, #56]	; (800baec <AnalogRead_BuiltIn+0x70>)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	edc3 7a00 	vstr	s15, [r3]
		return fADDataBuiltIn[num];
 800babc:	4a0b      	ldr	r2, [pc, #44]	; (800baec <AnalogRead_BuiltIn+0x70>)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	e001      	b.n	800bacc <AnalogRead_BuiltIn+0x50>
	}
	else
		return 0;
 800bac8:	f04f 0300 	mov.w	r3, #0
 800bacc:	ee07 3a90 	vmov	s15, r3
}
 800bad0:	eeb0 0a67 	vmov.f32	s0, s15
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	2000a64c 	.word	0x2000a64c
 800bae4:	45800000 	.word	0x45800000
 800bae8:	40533333 	.word	0x40533333
 800baec:	2000a60c 	.word	0x2000a60c

0800baf0 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	460a      	mov	r2, r1
 800bafa:	80fb      	strh	r3, [r7, #6]
 800bafc:	4613      	mov	r3, r2
 800bafe:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800bb00:	88bb      	ldrh	r3, [r7, #4]
 800bb02:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800bb04:	88fb      	ldrh	r3, [r7, #6]
 800bb06:	2b13      	cmp	r3, #19
 800bb08:	d80b      	bhi.n	800bb22 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800bb0a:	88fb      	ldrh	r3, [r7, #6]
 800bb0c:	4a07      	ldr	r2, [pc, #28]	; (800bb2c <DigitalBuiltIn_Write+0x3c>)
 800bb0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bb12:	88fb      	ldrh	r3, [r7, #6]
 800bb14:	4a06      	ldr	r2, [pc, #24]	; (800bb30 <DigitalBuiltIn_Write+0x40>)
 800bb16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb1a:	7bfa      	ldrb	r2, [r7, #15]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	f7f6 fd1b 	bl	8002558 <HAL_GPIO_WritePin>
	}
}
 800bb22:	bf00      	nop
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20000218 	.word	0x20000218
 800bb30:	20000268 	.word	0x20000268

0800bb34 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3301      	adds	r3, #1
 800bb44:	ee07 3a90 	vmov	s15, r3
 800bb48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb4c:	edd7 7a00 	vldr	s15, [r7]
 800bb50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb58:	eeb0 0b47 	vmov.f64	d0, d7
 800bb5c:	f002 fe04 	bl	800e768 <round>
 800bb60:	eeb0 7b40 	vmov.f64	d7, d0
 800bb64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bb68:	ee17 3a90 	vmov	r3, s15
 800bb6c:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb74:	4293      	cmp	r3, r2
 800bb76:	bf28      	it	cs
 800bb78:	4613      	movcs	r3, r2
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800bb82:	b480      	push	{r7}
 800bb84:	b085      	sub	sp, #20
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	ee07 3a90 	vmov	s15, r3
 800bb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb96:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba6:	ed97 7a03 	vldr	s14, [r7, #12]
 800bbaa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bbae:	eef0 7a66 	vmov.f32	s15, s13
}
 800bbb2:	eeb0 0a67 	vmov.f32	s0, s15
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a0f      	ldr	r2, [pc, #60]	; (800bc0c <getTIM_SOURCECLK+0x4c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d013      	beq.n	800bbfa <getTIM_SOURCECLK+0x3a>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a0e      	ldr	r2, [pc, #56]	; (800bc10 <getTIM_SOURCECLK+0x50>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d00e      	beq.n	800bbfa <getTIM_SOURCECLK+0x3a>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a0c      	ldr	r2, [pc, #48]	; (800bc14 <getTIM_SOURCECLK+0x54>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d009      	beq.n	800bbfa <getTIM_SOURCECLK+0x3a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a0b      	ldr	r2, [pc, #44]	; (800bc18 <getTIM_SOURCECLK+0x58>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d004      	beq.n	800bbfa <getTIM_SOURCECLK+0x3a>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a09      	ldr	r2, [pc, #36]	; (800bc1c <getTIM_SOURCECLK+0x5c>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d101      	bne.n	800bbfe <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800bbfa:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <getTIM_SOURCECLK+0x60>)
 800bbfc:	e000      	b.n	800bc00 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800bbfe:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <getTIM_SOURCECLK+0x64>)
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	40010000 	.word	0x40010000
 800bc10:	40010400 	.word	0x40010400
 800bc14:	40014000 	.word	0x40014000
 800bc18:	40014400 	.word	0x40014400
 800bc1c:	40014800 	.word	0x40014800
 800bc20:	0cdfe600 	.word	0x0cdfe600
 800bc24:	066ff300 	.word	0x066ff300

0800bc28 <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800bc28:	b590      	push	{r4, r7, lr}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	ed87 0a00 	vstr	s0, [r7]
 800bc34:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bc36:	88fb      	ldrh	r3, [r7, #6]
 800bc38:	4a48      	ldr	r2, [pc, #288]	; (800bd5c <PWMBuiltIn_writeDuty+0x134>)
 800bc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d112      	bne.n	800bc68 <PWMBuiltIn_writeDuty+0x40>
 800bc42:	88fb      	ldrh	r3, [r7, #6]
 800bc44:	4a46      	ldr	r2, [pc, #280]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc4e:	88fb      	ldrh	r3, [r7, #6]
 800bc50:	4a43      	ldr	r2, [pc, #268]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc56:	681c      	ldr	r4, [r3, #0]
 800bc58:	ed97 0a00 	vldr	s0, [r7]
 800bc5c:	4608      	mov	r0, r1
 800bc5e:	f7ff ff69 	bl	800bb34 <duty2CCR>
 800bc62:	4603      	mov	r3, r0
 800bc64:	6363      	str	r3, [r4, #52]	; 0x34

}
 800bc66:	e075      	b.n	800bd54 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bc68:	88fb      	ldrh	r3, [r7, #6]
 800bc6a:	4a3c      	ldr	r2, [pc, #240]	; (800bd5c <PWMBuiltIn_writeDuty+0x134>)
 800bc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc70:	2b04      	cmp	r3, #4
 800bc72:	d112      	bne.n	800bc9a <PWMBuiltIn_writeDuty+0x72>
 800bc74:	88fb      	ldrh	r3, [r7, #6]
 800bc76:	4a3a      	ldr	r2, [pc, #232]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc80:	88fb      	ldrh	r3, [r7, #6]
 800bc82:	4a37      	ldr	r2, [pc, #220]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bc84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc88:	681c      	ldr	r4, [r3, #0]
 800bc8a:	ed97 0a00 	vldr	s0, [r7]
 800bc8e:	4608      	mov	r0, r1
 800bc90:	f7ff ff50 	bl	800bb34 <duty2CCR>
 800bc94:	4603      	mov	r3, r0
 800bc96:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800bc98:	e05c      	b.n	800bd54 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bc9a:	88fb      	ldrh	r3, [r7, #6]
 800bc9c:	4a2f      	ldr	r2, [pc, #188]	; (800bd5c <PWMBuiltIn_writeDuty+0x134>)
 800bc9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca2:	2b08      	cmp	r3, #8
 800bca4:	d112      	bne.n	800bccc <PWMBuiltIn_writeDuty+0xa4>
 800bca6:	88fb      	ldrh	r3, [r7, #6]
 800bca8:	4a2d      	ldr	r2, [pc, #180]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bcaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bcb2:	88fb      	ldrh	r3, [r7, #6]
 800bcb4:	4a2a      	ldr	r2, [pc, #168]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bcb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcba:	681c      	ldr	r4, [r3, #0]
 800bcbc:	ed97 0a00 	vldr	s0, [r7]
 800bcc0:	4608      	mov	r0, r1
 800bcc2:	f7ff ff37 	bl	800bb34 <duty2CCR>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800bcca:	e043      	b.n	800bd54 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bccc:	88fb      	ldrh	r3, [r7, #6]
 800bcce:	4a23      	ldr	r2, [pc, #140]	; (800bd5c <PWMBuiltIn_writeDuty+0x134>)
 800bcd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcd4:	2b0c      	cmp	r3, #12
 800bcd6:	d112      	bne.n	800bcfe <PWMBuiltIn_writeDuty+0xd6>
 800bcd8:	88fb      	ldrh	r3, [r7, #6]
 800bcda:	4a21      	ldr	r2, [pc, #132]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bcdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bce4:	88fb      	ldrh	r3, [r7, #6]
 800bce6:	4a1e      	ldr	r2, [pc, #120]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcec:	681c      	ldr	r4, [r3, #0]
 800bcee:	ed97 0a00 	vldr	s0, [r7]
 800bcf2:	4608      	mov	r0, r1
 800bcf4:	f7ff ff1e 	bl	800bb34 <duty2CCR>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	6423      	str	r3, [r4, #64]	; 0x40
}
 800bcfc:	e02a      	b.n	800bd54 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bcfe:	88fb      	ldrh	r3, [r7, #6]
 800bd00:	4a16      	ldr	r2, [pc, #88]	; (800bd5c <PWMBuiltIn_writeDuty+0x134>)
 800bd02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd06:	2b10      	cmp	r3, #16
 800bd08:	d112      	bne.n	800bd30 <PWMBuiltIn_writeDuty+0x108>
 800bd0a:	88fb      	ldrh	r3, [r7, #6]
 800bd0c:	4a14      	ldr	r2, [pc, #80]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bd0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	4a11      	ldr	r2, [pc, #68]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd1e:	681c      	ldr	r4, [r3, #0]
 800bd20:	ed97 0a00 	vldr	s0, [r7]
 800bd24:	4608      	mov	r0, r1
 800bd26:	f7ff ff05 	bl	800bb34 <duty2CCR>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800bd2e:	e011      	b.n	800bd54 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800bd30:	88fb      	ldrh	r3, [r7, #6]
 800bd32:	4a0b      	ldr	r2, [pc, #44]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bd3c:	88fb      	ldrh	r3, [r7, #6]
 800bd3e:	4a08      	ldr	r2, [pc, #32]	; (800bd60 <PWMBuiltIn_writeDuty+0x138>)
 800bd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd44:	681c      	ldr	r4, [r3, #0]
 800bd46:	ed97 0a00 	vldr	s0, [r7]
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	f7ff fef2 	bl	800bb34 <duty2CCR>
 800bd50:	4603      	mov	r3, r0
 800bd52:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd90      	pop	{r4, r7, pc}
 800bd5c:	200002f8 	.word	0x200002f8
 800bd60:	20000290 	.word	0x20000290
 800bd64:	00000000 	.word	0x00000000

0800bd68 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800bd68:	b590      	push	{r4, r7, lr}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	ed87 0a00 	vstr	s0, [r7]
 800bd74:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800bd76:	edd7 7a00 	vldr	s15, [r7]
 800bd7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bd7e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800c038 <PWMBuiltIn_writeFrequency+0x2d0>
 800bd82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8a:	d501      	bpl.n	800bd90 <PWMBuiltIn_writeFrequency+0x28>
 800bd8c:	4bac      	ldr	r3, [pc, #688]	; (800c040 <PWMBuiltIn_writeFrequency+0x2d8>)
 800bd8e:	e00b      	b.n	800bda8 <PWMBuiltIn_writeFrequency+0x40>
 800bd90:	edd7 7a00 	vldr	s15, [r7]
 800bd94:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c044 <PWMBuiltIn_writeFrequency+0x2dc>
 800bd98:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda0:	dd01      	ble.n	800bda6 <PWMBuiltIn_writeFrequency+0x3e>
 800bda2:	4ba9      	ldr	r3, [pc, #676]	; (800c048 <PWMBuiltIn_writeFrequency+0x2e0>)
 800bda4:	e000      	b.n	800bda8 <PWMBuiltIn_writeFrequency+0x40>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800bdae:	2301      	movs	r3, #1
 800bdb0:	613b      	str	r3, [r7, #16]
 800bdb2:	e06f      	b.n	800be94 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800bdb4:	88fa      	ldrh	r2, [r7, #6]
 800bdb6:	49a5      	ldr	r1, [pc, #660]	; (800c04c <PWMBuiltIn_writeFrequency+0x2e4>)
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	005b      	lsls	r3, r3, #1
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	440b      	add	r3, r1
 800bdc8:	edd3 7a00 	vldr	s15, [r3]
 800bdcc:	ed97 7a00 	vldr	s14, [r7]
 800bdd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd8:	d859      	bhi.n	800be8e <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800bdda:	4a9d      	ldr	r2, [pc, #628]	; (800c050 <PWMBuiltIn_writeFrequency+0x2e8>)
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	499a      	ldr	r1, [pc, #616]	; (800c050 <PWMBuiltIn_writeFrequency+0x2e8>)
 800bde8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d124      	bne.n	800be3a <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800bdf0:	4a97      	ldr	r2, [pc, #604]	; (800c050 <PWMBuiltIn_writeFrequency+0x2e8>)
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf8:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800bdfa:	88fb      	ldrh	r3, [r7, #6]
 800bdfc:	4a95      	ldr	r2, [pc, #596]	; (800c054 <PWMBuiltIn_writeFrequency+0x2ec>)
 800bdfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be0a:	edd7 7a00 	vldr	s15, [r7]
 800be0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	3301      	adds	r3, #1
 800be16:	ee07 3a90 	vmov	s15, r3
 800be1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be26:	ee17 1a90 	vmov	r1, s15
 800be2a:	88fb      	ldrh	r3, [r7, #6]
 800be2c:	4a8a      	ldr	r2, [pc, #552]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	1e4a      	subs	r2, r1, #1
 800be36:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800be38:	e02f      	b.n	800be9a <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800be3a:	88fb      	ldrh	r3, [r7, #6]
 800be3c:	4a86      	ldr	r2, [pc, #536]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4985      	ldr	r1, [pc, #532]	; (800c05c <PWMBuiltIn_writeFrequency+0x2f4>)
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800be4c:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800be4e:	88fb      	ldrh	r3, [r7, #6]
 800be50:	4a80      	ldr	r2, [pc, #512]	; (800c054 <PWMBuiltIn_writeFrequency+0x2ec>)
 800be52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be56:	ee07 3a90 	vmov	s15, r3
 800be5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be5e:	edd7 7a00 	vldr	s15, [r7]
 800be62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800be66:	88fb      	ldrh	r3, [r7, #6]
 800be68:	4a7b      	ldr	r2, [pc, #492]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	3301      	adds	r3, #1
 800be74:	ee07 3a90 	vmov	s15, r3
 800be78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be84:	ee17 3a90 	vmov	r3, s15
 800be88:	3b01      	subs	r3, #1
 800be8a:	617b      	str	r3, [r7, #20]
			break;
 800be8c:	e005      	b.n	800be9a <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	3301      	adds	r3, #1
 800be92:	613b      	str	r3, [r7, #16]
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	2b09      	cmp	r3, #9
 800be98:	dd8c      	ble.n	800bdb4 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	4a6e      	ldr	r2, [pc, #440]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800be9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	f000 80be 	beq.w	800c02a <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800beae:	2300      	movs	r3, #0
 800beb0:	60fb      	str	r3, [r7, #12]
 800beb2:	e0a9      	b.n	800c008 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800beb4:	4a68      	ldr	r2, [pc, #416]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bebc:	88fb      	ldrh	r3, [r7, #6]
 800bebe:	4966      	ldr	r1, [pc, #408]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bec0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	f040 809c 	bne.w	800c002 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800beca:	4a65      	ldr	r2, [pc, #404]	; (800c060 <PWMBuiltIn_writeFrequency+0x2f8>)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d113      	bne.n	800befe <PWMBuiltIn_writeFrequency+0x196>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	b29b      	uxth	r3, r3
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 f8c2 	bl	800c064 <PWMBuiltIn_readDuty>
 800bee0:	eef0 7a40 	vmov.f32	s15, s0
 800bee4:	4a5c      	ldr	r2, [pc, #368]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beec:	681c      	ldr	r4, [r3, #0]
 800beee:	eeb0 0a67 	vmov.f32	s0, s15
 800bef2:	6978      	ldr	r0, [r7, #20]
 800bef4:	f7ff fe1e 	bl	800bb34 <duty2CCR>
 800bef8:	4603      	mov	r3, r0
 800befa:	6363      	str	r3, [r4, #52]	; 0x34
 800befc:	e07a      	b.n	800bff4 <PWMBuiltIn_writeFrequency+0x28c>
 800befe:	4a58      	ldr	r2, [pc, #352]	; (800c060 <PWMBuiltIn_writeFrequency+0x2f8>)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf06:	2b04      	cmp	r3, #4
 800bf08:	d113      	bne.n	800bf32 <PWMBuiltIn_writeFrequency+0x1ca>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 f8a8 	bl	800c064 <PWMBuiltIn_readDuty>
 800bf14:	eef0 7a40 	vmov.f32	s15, s0
 800bf18:	4a4f      	ldr	r2, [pc, #316]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf20:	681c      	ldr	r4, [r3, #0]
 800bf22:	eeb0 0a67 	vmov.f32	s0, s15
 800bf26:	6978      	ldr	r0, [r7, #20]
 800bf28:	f7ff fe04 	bl	800bb34 <duty2CCR>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf30:	e060      	b.n	800bff4 <PWMBuiltIn_writeFrequency+0x28c>
 800bf32:	4a4b      	ldr	r2, [pc, #300]	; (800c060 <PWMBuiltIn_writeFrequency+0x2f8>)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf3a:	2b08      	cmp	r3, #8
 800bf3c:	d113      	bne.n	800bf66 <PWMBuiltIn_writeFrequency+0x1fe>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 f88e 	bl	800c064 <PWMBuiltIn_readDuty>
 800bf48:	eef0 7a40 	vmov.f32	s15, s0
 800bf4c:	4a42      	ldr	r2, [pc, #264]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf54:	681c      	ldr	r4, [r3, #0]
 800bf56:	eeb0 0a67 	vmov.f32	s0, s15
 800bf5a:	6978      	ldr	r0, [r7, #20]
 800bf5c:	f7ff fdea 	bl	800bb34 <duty2CCR>
 800bf60:	4603      	mov	r3, r0
 800bf62:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bf64:	e046      	b.n	800bff4 <PWMBuiltIn_writeFrequency+0x28c>
 800bf66:	4a3e      	ldr	r2, [pc, #248]	; (800c060 <PWMBuiltIn_writeFrequency+0x2f8>)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf6e:	2b0c      	cmp	r3, #12
 800bf70:	d113      	bne.n	800bf9a <PWMBuiltIn_writeFrequency+0x232>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 f874 	bl	800c064 <PWMBuiltIn_readDuty>
 800bf7c:	eef0 7a40 	vmov.f32	s15, s0
 800bf80:	4a35      	ldr	r2, [pc, #212]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf88:	681c      	ldr	r4, [r3, #0]
 800bf8a:	eeb0 0a67 	vmov.f32	s0, s15
 800bf8e:	6978      	ldr	r0, [r7, #20]
 800bf90:	f7ff fdd0 	bl	800bb34 <duty2CCR>
 800bf94:	4603      	mov	r3, r0
 800bf96:	6423      	str	r3, [r4, #64]	; 0x40
 800bf98:	e02c      	b.n	800bff4 <PWMBuiltIn_writeFrequency+0x28c>
 800bf9a:	4a31      	ldr	r2, [pc, #196]	; (800c060 <PWMBuiltIn_writeFrequency+0x2f8>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfa2:	2b10      	cmp	r3, #16
 800bfa4:	d113      	bne.n	800bfce <PWMBuiltIn_writeFrequency+0x266>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f000 f85a 	bl	800c064 <PWMBuiltIn_readDuty>
 800bfb0:	eef0 7a40 	vmov.f32	s15, s0
 800bfb4:	4a28      	ldr	r2, [pc, #160]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfbc:	681c      	ldr	r4, [r3, #0]
 800bfbe:	eeb0 0a67 	vmov.f32	s0, s15
 800bfc2:	6978      	ldr	r0, [r7, #20]
 800bfc4:	f7ff fdb6 	bl	800bb34 <duty2CCR>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	65a3      	str	r3, [r4, #88]	; 0x58
 800bfcc:	e012      	b.n	800bff4 <PWMBuiltIn_writeFrequency+0x28c>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 f846 	bl	800c064 <PWMBuiltIn_readDuty>
 800bfd8:	eef0 7a40 	vmov.f32	s15, s0
 800bfdc:	4a1e      	ldr	r2, [pc, #120]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe4:	681c      	ldr	r4, [r3, #0]
 800bfe6:	eeb0 0a67 	vmov.f32	s0, s15
 800bfea:	6978      	ldr	r0, [r7, #20]
 800bfec:	f7ff fda2 	bl	800bb34 <duty2CCR>
 800bff0:	4603      	mov	r3, r0
 800bff2:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800bff4:	4a18      	ldr	r2, [pc, #96]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2200      	movs	r2, #0
 800c000:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3301      	adds	r3, #1
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2b19      	cmp	r3, #25
 800c00c:	f77f af52 	ble.w	800beb4 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800c010:	88fb      	ldrh	r3, [r7, #6]
 800c012:	4a11      	ldr	r2, [pc, #68]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	697a      	ldr	r2, [r7, #20]
 800c01c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c01e:	88fb      	ldrh	r3, [r7, #6]
 800c020:	4a0d      	ldr	r2, [pc, #52]	; (800c058 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c026:	697a      	ldr	r2, [r7, #20]
 800c028:	60da      	str	r2, [r3, #12]
	}
}
 800c02a:	bf00      	nop
 800c02c:	371c      	adds	r7, #28
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd90      	pop	{r4, r7, pc}
 800c032:	bf00      	nop
 800c034:	f3af 8000 	nop.w
 800c038:	eb851eb8 	.word	0xeb851eb8
 800c03c:	3f9eb851 	.word	0x3f9eb851
 800c040:	3cf5c28f 	.word	0x3cf5c28f
 800c044:	4bcdfe60 	.word	0x4bcdfe60
 800c048:	4bcdfe60 	.word	0x4bcdfe60
 800c04c:	20000ea0 	.word	0x20000ea0
 800c050:	20000e50 	.word	0x20000e50
 800c054:	20000de8 	.word	0x20000de8
 800c058:	20000290 	.word	0x20000290
 800c05c:	20000e78 	.word	0x20000e78
 800c060:	200002f8 	.word	0x200002f8

0800c064 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800c06e:	88fb      	ldrh	r3, [r7, #6]
 800c070:	4a2a      	ldr	r2, [pc, #168]	; (800c11c <PWMBuiltIn_readDuty+0xb8>)
 800c072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c07a:	88fb      	ldrh	r3, [r7, #6]
 800c07c:	4a28      	ldr	r2, [pc, #160]	; (800c120 <PWMBuiltIn_readDuty+0xbc>)
 800c07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <PWMBuiltIn_readDuty+0x30>
 800c086:	88fb      	ldrh	r3, [r7, #6]
 800c088:	4a24      	ldr	r2, [pc, #144]	; (800c11c <PWMBuiltIn_readDuty+0xb8>)
 800c08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c092:	e039      	b.n	800c108 <PWMBuiltIn_readDuty+0xa4>
 800c094:	88fb      	ldrh	r3, [r7, #6]
 800c096:	4a22      	ldr	r2, [pc, #136]	; (800c120 <PWMBuiltIn_readDuty+0xbc>)
 800c098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d106      	bne.n	800c0ae <PWMBuiltIn_readDuty+0x4a>
 800c0a0:	88fb      	ldrh	r3, [r7, #6]
 800c0a2:	4a1e      	ldr	r2, [pc, #120]	; (800c11c <PWMBuiltIn_readDuty+0xb8>)
 800c0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ac:	e02c      	b.n	800c108 <PWMBuiltIn_readDuty+0xa4>
 800c0ae:	88fb      	ldrh	r3, [r7, #6]
 800c0b0:	4a1b      	ldr	r2, [pc, #108]	; (800c120 <PWMBuiltIn_readDuty+0xbc>)
 800c0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b6:	2b08      	cmp	r3, #8
 800c0b8:	d106      	bne.n	800c0c8 <PWMBuiltIn_readDuty+0x64>
 800c0ba:	88fb      	ldrh	r3, [r7, #6]
 800c0bc:	4a17      	ldr	r2, [pc, #92]	; (800c11c <PWMBuiltIn_readDuty+0xb8>)
 800c0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c6:	e01f      	b.n	800c108 <PWMBuiltIn_readDuty+0xa4>
 800c0c8:	88fb      	ldrh	r3, [r7, #6]
 800c0ca:	4a15      	ldr	r2, [pc, #84]	; (800c120 <PWMBuiltIn_readDuty+0xbc>)
 800c0cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0d0:	2b0c      	cmp	r3, #12
 800c0d2:	d106      	bne.n	800c0e2 <PWMBuiltIn_readDuty+0x7e>
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	4a11      	ldr	r2, [pc, #68]	; (800c11c <PWMBuiltIn_readDuty+0xb8>)
 800c0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e0:	e012      	b.n	800c108 <PWMBuiltIn_readDuty+0xa4>
 800c0e2:	88fb      	ldrh	r3, [r7, #6]
 800c0e4:	4a0e      	ldr	r2, [pc, #56]	; (800c120 <PWMBuiltIn_readDuty+0xbc>)
 800c0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ea:	2b10      	cmp	r3, #16
 800c0ec:	d106      	bne.n	800c0fc <PWMBuiltIn_readDuty+0x98>
 800c0ee:	88fb      	ldrh	r3, [r7, #6]
 800c0f0:	4a0a      	ldr	r2, [pc, #40]	; (800c11c <PWMBuiltIn_readDuty+0xb8>)
 800c0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0fa:	e005      	b.n	800c108 <PWMBuiltIn_readDuty+0xa4>
 800c0fc:	88fb      	ldrh	r3, [r7, #6]
 800c0fe:	4a07      	ldr	r2, [pc, #28]	; (800c11c <PWMBuiltIn_readDuty+0xb8>)
 800c100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c108:	4619      	mov	r1, r3
 800c10a:	f7ff fd3a 	bl	800bb82 <CCR2duty>
 800c10e:	eef0 7a40 	vmov.f32	s15, s0
}
 800c112:	eeb0 0a67 	vmov.f32	s0, s15
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	20000290 	.word	0x20000290
 800c120:	200002f8 	.word	0x200002f8

0800c124 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c12c:	4a07      	ldr	r2, [pc, #28]	; (800c14c <PWMBuiltInStartChannel+0x28>)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c134:	4a06      	ldr	r2, [pc, #24]	; (800c150 <PWMBuiltInStartChannel+0x2c>)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c13c:	4619      	mov	r1, r3
 800c13e:	f7f8 fc7b 	bl	8004a38 <HAL_TIM_PWM_Start>
}
 800c142:	bf00      	nop
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20000290 	.word	0x20000290
 800c150:	200002f8 	.word	0x200002f8

0800c154 <PWMBuiltInStart>:
{
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
}

void PWMBuiltInStart()
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c15a:	2300      	movs	r3, #0
 800c15c:	607b      	str	r3, [r7, #4]
 800c15e:	e005      	b.n	800c16c <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff ffdf 	bl	800c124 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	3301      	adds	r3, #1
 800c16a:	607b      	str	r3, [r7, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b19      	cmp	r3, #25
 800c170:	ddf6      	ble.n	800c160 <PWMBuiltInStart+0xc>
}
 800c172:	bf00      	nop
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
	...

0800c17c <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c182:	2300      	movs	r3, #0
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	e06f      	b.n	800c268 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800c188:	4a3c      	ldr	r2, [pc, #240]	; (800c27c <PWMBuiltIn_init+0x100>)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff fd15 	bl	800bbc0 <getTIM_SOURCECLK>
 800c196:	4601      	mov	r1, r0
 800c198:	4a39      	ldr	r2, [pc, #228]	; (800c280 <PWMBuiltIn_init+0x104>)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	60bb      	str	r3, [r7, #8]
 800c1a4:	e04c      	b.n	800c240 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800c1a6:	4a37      	ldr	r2, [pc, #220]	; (800c284 <PWMBuiltIn_init+0x108>)
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b4:	1e5a      	subs	r2, r3, #1
 800c1b6:	4934      	ldr	r1, [pc, #208]	; (800c288 <PWMBuiltIn_init+0x10c>)
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800c1be:	4a33      	ldr	r2, [pc, #204]	; (800c28c <PWMBuiltIn_init+0x110>)
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1cc:	1e5a      	subs	r2, r3, #1
 800c1ce:	4930      	ldr	r1, [pc, #192]	; (800c290 <PWMBuiltIn_init+0x114>)
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800c1d6:	4a2c      	ldr	r2, [pc, #176]	; (800c288 <PWMBuiltIn_init+0x10c>)
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	ee07 3a90 	vmov	s15, r3
 800c1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e8:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800c1ec:	4a28      	ldr	r2, [pc, #160]	; (800c290 <PWMBuiltIn_init+0x114>)
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1fe:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800c202:	4a1f      	ldr	r2, [pc, #124]	; (800c280 <PWMBuiltIn_init+0x104>)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c212:	edd7 7a01 	vldr	s15, [r7, #4]
 800c216:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c21a:	ed97 7a00 	vldr	s14, [r7]
 800c21e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c222:	491c      	ldr	r1, [pc, #112]	; (800c294 <PWMBuiltIn_init+0x118>)
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	4613      	mov	r3, r2
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	4413      	add	r3, r2
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	4413      	add	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	440b      	add	r3, r1
 800c236:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	3301      	adds	r3, #1
 800c23e:	60bb      	str	r3, [r7, #8]
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	2b09      	cmp	r3, #9
 800c244:	ddaf      	ble.n	800c1a6 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	b29b      	uxth	r3, r3
 800c24a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800c298 <PWMBuiltIn_init+0x11c>
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff fcea 	bl	800bc28 <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	b29b      	uxth	r3, r3
 800c258:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c29c <PWMBuiltIn_init+0x120>
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7ff fd83 	bl	800bd68 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3301      	adds	r3, #1
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b19      	cmp	r3, #25
 800c26c:	dd8c      	ble.n	800c188 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800c26e:	f7ff ff71 	bl	800c154 <PWMBuiltInStart>
}
 800c272:	bf00      	nop
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	20000290 	.word	0x20000290
 800c280:	20000de8 	.word	0x20000de8
 800c284:	20000360 	.word	0x20000360
 800c288:	20000e50 	.word	0x20000e50
 800c28c:	20000388 	.word	0x20000388
 800c290:	20000e78 	.word	0x20000e78
 800c294:	20000ea0 	.word	0x20000ea0
 800c298:	00000000 	.word	0x00000000
 800c29c:	42200000 	.word	0x42200000

0800c2a0 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800c2ae:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b4:	7afb      	ldrb	r3, [r7, #11]
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	601a      	str	r2, [r3, #0]
}
 800c2be:	bf00      	nop
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
	...

0800c2cc <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c2dc:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d15b      	bne.n	800c3a0 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	ed93 7a00 	vldr	s14, [r3]
 800c2ee:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800c302:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c306:	edd7 7a03 	vldr	s15, [r7, #12]
 800c30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c312:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c31a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	ed93 7a00 	vldr	s14, [r3]
 800c324:	edd7 7a03 	vldr	s15, [r7, #12]
 800c328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c32c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c330:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c334:	edd7 7a03 	vldr	s15, [r7, #12]
 800c338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c340:	3304      	adds	r3, #4
 800c342:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c34a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	ed93 7a00 	vldr	s14, [r3]
 800c354:	edd7 7a03 	vldr	s15, [r7, #12]
 800c358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c35c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c360:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c364:	edd7 7a03 	vldr	s15, [r7, #12]
 800c368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c370:	3308      	adds	r3, #8
 800c372:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c37a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	ed93 7a00 	vldr	s14, [r3]
 800c384:	edd7 7a03 	vldr	s15, [r7, #12]
 800c388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c390:	330c      	adds	r3, #12
 800c392:	edd7 7a03 	vldr	s15, [r7, #12]
 800c396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c39a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800c39e:	e0fc      	b.n	800c59a <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	f040 80f7 	bne.w	800c59a <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	ed93 7a00 	vldr	s14, [r3]
 800c3b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3c2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3da:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e6:	eddf 6a70 	vldr	s13, [pc, #448]	; 800c5a8 <kalman_setQ+0x2dc>
 800c3ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3ee:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	ed93 7a00 	vldr	s14, [r3]
 800c3f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c400:	edd7 7a03 	vldr	s15, [r7, #12]
 800c404:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c408:	edd7 7a03 	vldr	s15, [r7, #12]
 800c40c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c410:	edd7 7a03 	vldr	s15, [r7, #12]
 800c414:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c418:	edd7 7a03 	vldr	s15, [r7, #12]
 800c41c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c424:	3304      	adds	r3, #4
 800c426:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800c42a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c42e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	ed93 7a00 	vldr	s14, [r3]
 800c438:	edd7 7a03 	vldr	s15, [r7, #12]
 800c43c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c440:	edd7 7a03 	vldr	s15, [r7, #12]
 800c444:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c448:	edd7 7a03 	vldr	s15, [r7, #12]
 800c44c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c450:	edd7 7a03 	vldr	s15, [r7, #12]
 800c454:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45c:	3308      	adds	r3, #8
 800c45e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c466:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	ed93 7a00 	vldr	s14, [r3]
 800c470:	edd7 7a03 	vldr	s15, [r7, #12]
 800c474:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c478:	edd7 7a03 	vldr	s15, [r7, #12]
 800c47c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c480:	edd7 7a03 	vldr	s15, [r7, #12]
 800c484:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c488:	edd7 7a03 	vldr	s15, [r7, #12]
 800c48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c490:	edd7 7a03 	vldr	s15, [r7, #12]
 800c494:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49c:	330c      	adds	r3, #12
 800c49e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800c4a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c4a6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	ed93 7a00 	vldr	s14, [r3]
 800c4b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d4:	3310      	adds	r3, #16
 800c4d6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c4da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c4de:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	ed93 7a00 	vldr	s14, [r3]
 800c4e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c504:	3314      	adds	r3, #20
 800c506:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c50a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c50e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	ed93 7a00 	vldr	s14, [r3]
 800c518:	edd7 7a03 	vldr	s15, [r7, #12]
 800c51c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c520:	edd7 7a03 	vldr	s15, [r7, #12]
 800c524:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c528:	edd7 7a03 	vldr	s15, [r7, #12]
 800c52c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c530:	edd7 7a03 	vldr	s15, [r7, #12]
 800c534:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53c:	3318      	adds	r3, #24
 800c53e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c546:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	ed93 7a00 	vldr	s14, [r3]
 800c550:	edd7 7a03 	vldr	s15, [r7, #12]
 800c554:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c558:	edd7 7a03 	vldr	s15, [r7, #12]
 800c55c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c560:	edd7 7a03 	vldr	s15, [r7, #12]
 800c564:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56c:	331c      	adds	r3, #28
 800c56e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c576:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	ed93 7a00 	vldr	s14, [r3]
 800c580:	edd7 7a03 	vldr	s15, [r7, #12]
 800c584:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c58c:	3320      	adds	r3, #32
 800c58e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c596:	edc3 7a00 	vstr	s15, [r3]
}
 800c59a:	bf00      	nop
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	42100000 	.word	0x42100000

0800c5ac <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d105      	bne.n	800c5cc <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	6812      	ldr	r2, [r2, #0]
 800c5c8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800c5ca:	e039      	b.n	800c640 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d134      	bne.n	800c640 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	6812      	ldr	r2, [r2, #0]
 800c5de:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	f04f 0200 	mov.w	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	f04f 0200 	mov.w	r2, #0
 800c5f6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5fc:	330c      	adds	r3, #12
 800c5fe:	f04f 0200 	mov.w	r2, #0
 800c602:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c608:	3310      	adds	r3, #16
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	6852      	ldr	r2, [r2, #4]
 800c60e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c614:	3314      	adds	r3, #20
 800c616:	f04f 0200 	mov.w	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c620:	3318      	adds	r3, #24
 800c622:	f04f 0200 	mov.w	r2, #0
 800c626:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c62c:	331c      	adds	r3, #28
 800c62e:	f04f 0200 	mov.w	r2, #0
 800c632:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c638:	3320      	adds	r3, #32
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	6892      	ldr	r2, [r2, #8]
 800c63e:	601a      	str	r2, [r3, #0]
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	ed87 0a03 	vstr	s0, [r7, #12]
 800c656:	edc7 0a02 	vstr	s1, [r7, #8]
 800c65a:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800c65e:	f107 0108 	add.w	r1, r7, #8
 800c662:	f107 030c 	add.w	r3, r7, #12
 800c666:	2200      	movs	r2, #0
 800c668:	ed97 0a01 	vldr	s0, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 f807 	bl	800c680 <KALMANFILTER>
 800c672:	6178      	str	r0, [r7, #20]
	return pk;
 800c674:	697b      	ldr	r3, [r7, #20]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3718      	adds	r7, #24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c68e:	4613      	mov	r3, r2
 800c690:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800c692:	20c4      	movs	r0, #196	; 0xc4
 800c694:	f003 f8a2 	bl	800f7dc <malloc>
 800c698:	4603      	mov	r3, r0
 800c69a:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <KALMANFILTER+0x26>
		return NULL;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	e10e      	b.n	800c8c4 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800c6a6:	22c4      	movs	r2, #196	; 0xc4
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	6978      	ldr	r0, [r7, #20]
 800c6ac:	f003 f8a9 	bl	800f802 <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	887a      	ldrh	r2, [r7, #2]
 800c6b4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800c6b8:	6978      	ldr	r0, [r7, #20]
 800c6ba:	f000 f90f 	bl	800c8dc <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	4a82      	ldr	r2, [pc, #520]	; (800c8cc <KALMANFILTER+0x24c>)
 800c6c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	4a81      	ldr	r2, [pc, #516]	; (800c8d0 <KALMANFILTER+0x250>)
 800c6ca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	4a80      	ldr	r2, [pc, #512]	; (800c8d4 <KALMANFILTER+0x254>)
 800c6d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	4a7f      	ldr	r2, [pc, #508]	; (800c8d8 <KALMANFILTER+0x258>)
 800c6da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800c6e6:	887b      	ldrh	r3, [r7, #2]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	f040 8095 	bne.w	800c818 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c6f6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	695b      	ldr	r3, [r3, #20]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800c702:	ed97 7a01 	vldr	s14, [r7, #4]
 800c706:	edd7 7a01 	vldr	s15, [r7, #4]
 800c70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	3308      	adds	r3, #8
 800c714:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c71c:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	330c      	adds	r3, #12
 800c726:	f04f 0200 	mov.w	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	695b      	ldr	r3, [r3, #20]
 800c730:	3310      	adds	r3, #16
 800c732:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c736:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	3314      	adds	r3, #20
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	3318      	adds	r3, #24
 800c748:	f04f 0200 	mov.w	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	695b      	ldr	r3, [r3, #20]
 800c752:	331c      	adds	r3, #28
 800c754:	f04f 0200 	mov.w	r2, #0
 800c758:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	3320      	adds	r3, #32
 800c760:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c764:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	f04f 0200 	mov.w	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	3304      	adds	r3, #4
 800c776:	f04f 0200 	mov.w	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	69db      	ldr	r3, [r3, #28]
 800c780:	3308      	adds	r3, #8
 800c782:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c786:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c790:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c796:	3304      	adds	r3, #4
 800c798:	f04f 0200 	mov.w	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ae:	330c      	adds	r3, #12
 800c7b0:	f04f 0200 	mov.w	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ba:	3310      	adds	r3, #16
 800c7bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c7c0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c6:	3314      	adds	r3, #20
 800c7c8:	f04f 0200 	mov.w	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d2:	3318      	adds	r3, #24
 800c7d4:	f04f 0200 	mov.w	r2, #0
 800c7d8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7de:	331c      	adds	r3, #28
 800c7e0:	f04f 0200 	mov.w	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ea:	3320      	adds	r3, #32
 800c7ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c7f0:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f103 0210 	add.w	r2, r3, #16
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	3350      	adds	r3, #80	; 0x50
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4610      	mov	r0, r2
 800c800:	f7f4 fb6f 	bl	8000ee2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	f103 0220 	add.w	r2, r3, #32
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	3358      	adds	r3, #88	; 0x58
 800c80e:	4619      	mov	r1, r3
 800c810:	4610      	mov	r0, r2
 800c812:	f7f4 fb66 	bl	8000ee2 <arm_mat_trans_f32>
 800c816:	e048      	b.n	800c8aa <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800c818:	887b      	ldrh	r3, [r7, #2]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d145      	bne.n	800c8aa <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c826:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	3304      	adds	r3, #4
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	3308      	adds	r3, #8
 800c838:	f04f 0200 	mov.w	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	330c      	adds	r3, #12
 800c844:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c848:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800c84a:	ed97 7a01 	vldr	s14, [r7, #4]
 800c84e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c852:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	69db      	ldr	r3, [r3, #28]
 800c85a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c85e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c862:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	69db      	ldr	r3, [r3, #28]
 800c86a:	3304      	adds	r3, #4
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c874:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c878:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87e:	3304      	adds	r3, #4
 800c880:	f04f 0200 	mov.w	r2, #0
 800c884:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f103 0210 	add.w	r2, r3, #16
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	3350      	adds	r3, #80	; 0x50
 800c890:	4619      	mov	r1, r3
 800c892:	4610      	mov	r0, r2
 800c894:	f7f4 fb25 	bl	8000ee2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f103 0220 	add.w	r2, r3, #32
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	3358      	adds	r3, #88	; 0x58
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	f7f4 fb1c 	bl	8000ee2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c8b0:	68f9      	ldr	r1, [r7, #12]
 800c8b2:	6978      	ldr	r0, [r7, #20]
 800c8b4:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c8bc:	68b9      	ldr	r1, [r7, #8]
 800c8be:	6978      	ldr	r0, [r7, #20]
 800c8c0:	4798      	blx	r3

	return ptKalmanFilter;
 800c8c2:	697b      	ldr	r3, [r7, #20]
	
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	0800cc4d 	.word	0x0800cc4d
 800c8d0:	0800c2cd 	.word	0x0800c2cd
 800c8d4:	0800c5ad 	.word	0x0800c5ad
 800c8d8:	0800c2a1 	.word	0x0800c2a1

0800c8dc <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	f040 80d9 	bne.w	800caa2 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800c8f0:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800c8f4:	f002 ff72 	bl	800f7dc <malloc>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c908:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800c90a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800c90e:	2100      	movs	r1, #0
 800c910:	68b8      	ldr	r0, [r7, #8]
 800c912:	f002 ff76 	bl	800f802 <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2201      	movs	r2, #1
 800c91c:	2103      	movs	r1, #3
 800c91e:	f7f3 ff0f 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f103 0010 	add.w	r0, r3, #16
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	330c      	adds	r3, #12
 800c92c:	2203      	movs	r2, #3
 800c92e:	2103      	movs	r1, #3
 800c930:	f7f3 ff06 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f103 0018 	add.w	r0, r3, #24
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	3330      	adds	r3, #48	; 0x30
 800c93e:	2201      	movs	r2, #1
 800c940:	2103      	movs	r1, #3
 800c942:	f7f3 fefd 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f103 0008 	add.w	r0, r3, #8
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	333c      	adds	r3, #60	; 0x3c
 800c950:	2201      	movs	r2, #1
 800c952:	2101      	movs	r1, #1
 800c954:	f7f3 fef4 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f103 0020 	add.w	r0, r3, #32
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	3340      	adds	r3, #64	; 0x40
 800c962:	2203      	movs	r2, #3
 800c964:	2103      	movs	r1, #3
 800c966:	f7f3 feeb 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	33f4      	adds	r3, #244	; 0xf4
 800c974:	2201      	movs	r2, #1
 800c976:	2103      	movs	r1, #3
 800c978:	f7f3 fee2 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	3364      	adds	r3, #100	; 0x64
 800c986:	2203      	movs	r2, #3
 800c988:	2103      	movs	r1, #3
 800c98a:	f7f3 fed9 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	3388      	adds	r3, #136	; 0x88
 800c998:	2203      	movs	r2, #3
 800c99a:	2103      	movs	r1, #3
 800c99c:	f7f3 fed0 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	33ac      	adds	r3, #172	; 0xac
 800c9aa:	2203      	movs	r2, #3
 800c9ac:	2103      	movs	r1, #3
 800c9ae:	f7f3 fec7 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	33d0      	adds	r3, #208	; 0xd0
 800c9bc:	2203      	movs	r2, #3
 800c9be:	2103      	movs	r1, #3
 800c9c0:	f7f3 febe 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c9d0:	2203      	movs	r2, #3
 800c9d2:	2103      	movs	r1, #3
 800c9d4:	f7f3 feb4 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c9e4:	2203      	movs	r2, #3
 800c9e6:	2103      	movs	r1, #3
 800c9e8:	f7f3 feaa 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c9f8:	2203      	movs	r2, #3
 800c9fa:	2103      	movs	r1, #3
 800c9fc:	f7f3 fea0 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	2103      	movs	r1, #3
 800ca10:	f7f3 fe96 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ca20:	2203      	movs	r2, #3
 800ca22:	2103      	movs	r1, #3
 800ca24:	f7f3 fe8c 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ca34:	2203      	movs	r2, #3
 800ca36:	2103      	movs	r1, #3
 800ca38:	f7f3 fe82 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800ca48:	2203      	movs	r2, #3
 800ca4a:	2103      	movs	r1, #3
 800ca4c:	f7f3 fe78 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	2103      	movs	r1, #3
 800ca60:	f7f3 fe6e 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ca70:	2201      	movs	r2, #1
 800ca72:	2103      	movs	r1, #3
 800ca74:	f7f3 fe64 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ca84:	2201      	movs	r2, #1
 800ca86:	2103      	movs	r1, #3
 800ca88:	f7f3 fe5a 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800ca98:	2201      	movs	r2, #1
 800ca9a:	2103      	movs	r1, #3
 800ca9c:	f7f3 fe50 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800caa0:	e0d0      	b.n	800cc44 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f040 80cb 	bne.w	800cc44 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800caae:	20bc      	movs	r0, #188	; 0xbc
 800cab0:	f002 fe94 	bl	800f7dc <malloc>
 800cab4:	4603      	mov	r3, r0
 800cab6:	461a      	mov	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cac4:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800cac6:	22bc      	movs	r2, #188	; 0xbc
 800cac8:	2100      	movs	r1, #0
 800caca:	68f8      	ldr	r0, [r7, #12]
 800cacc:	f002 fe99 	bl	800f802 <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2201      	movs	r2, #1
 800cad6:	2102      	movs	r1, #2
 800cad8:	f7f3 fe32 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f103 0010 	add.w	r0, r3, #16
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3308      	adds	r3, #8
 800cae6:	2202      	movs	r2, #2
 800cae8:	2102      	movs	r1, #2
 800caea:	f7f3 fe29 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f103 0018 	add.w	r0, r3, #24
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	3318      	adds	r3, #24
 800caf8:	2201      	movs	r2, #1
 800cafa:	2102      	movs	r1, #2
 800cafc:	f7f3 fe20 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f103 0008 	add.w	r0, r3, #8
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3320      	adds	r3, #32
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	f7f3 fe17 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f103 0020 	add.w	r0, r3, #32
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3324      	adds	r3, #36	; 0x24
 800cb1c:	2202      	movs	r2, #2
 800cb1e:	2101      	movs	r1, #1
 800cb20:	f7f3 fe0e 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3358      	adds	r3, #88	; 0x58
 800cb2e:	2201      	movs	r2, #1
 800cb30:	2101      	movs	r1, #1
 800cb32:	f7f3 fe05 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	332c      	adds	r3, #44	; 0x2c
 800cb40:	2202      	movs	r2, #2
 800cb42:	2102      	movs	r1, #2
 800cb44:	f7f3 fdfc 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	333c      	adds	r3, #60	; 0x3c
 800cb52:	2202      	movs	r2, #2
 800cb54:	2102      	movs	r1, #2
 800cb56:	f7f3 fdf3 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	334c      	adds	r3, #76	; 0x4c
 800cb64:	2201      	movs	r2, #1
 800cb66:	2101      	movs	r1, #1
 800cb68:	f7f3 fdea 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3350      	adds	r3, #80	; 0x50
 800cb76:	2201      	movs	r2, #1
 800cb78:	2102      	movs	r1, #2
 800cb7a:	f7f3 fde1 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	335c      	adds	r3, #92	; 0x5c
 800cb88:	2202      	movs	r2, #2
 800cb8a:	2102      	movs	r1, #2
 800cb8c:	f7f3 fdd8 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	336c      	adds	r3, #108	; 0x6c
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	2102      	movs	r1, #2
 800cb9e:	f7f3 fdcf 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	3374      	adds	r3, #116	; 0x74
 800cbac:	2201      	movs	r2, #1
 800cbae:	2102      	movs	r1, #2
 800cbb0:	f7f3 fdc6 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	337c      	adds	r3, #124	; 0x7c
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	2102      	movs	r1, #2
 800cbc2:	f7f3 fdbd 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	338c      	adds	r3, #140	; 0x8c
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	2102      	movs	r1, #2
 800cbd4:	f7f3 fdb4 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	339c      	adds	r3, #156	; 0x9c
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	f7f3 fdab 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	33a0      	adds	r3, #160	; 0xa0
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	2101      	movs	r1, #1
 800cbf8:	f7f3 fda2 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	33a4      	adds	r3, #164	; 0xa4
 800cc06:	2201      	movs	r2, #1
 800cc08:	2101      	movs	r1, #1
 800cc0a:	f7f3 fd99 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	33a8      	adds	r3, #168	; 0xa8
 800cc18:	2201      	movs	r2, #1
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	f7f3 fd90 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	33ac      	adds	r3, #172	; 0xac
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	2102      	movs	r1, #2
 800cc2e:	f7f3 fd87 	bl	8000740 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	33b4      	adds	r3, #180	; 0xb4
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	2102      	movs	r1, #2
 800cc40:	f7f3 fd7e 	bl	8000740 <arm_mat_init_f32>
}
 800cc44:	bf00      	nop
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f103 0010 	add.w	r0, r3, #16
 800cc5a:	6879      	ldr	r1, [r7, #4]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	3398      	adds	r3, #152	; 0x98
 800cc60:	461a      	mov	r2, r3
 800cc62:	f7f3 ffbd 	bl	8000be0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f103 0010 	add.w	r0, r3, #16
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	3368      	adds	r3, #104	; 0x68
 800cc76:	461a      	mov	r2, r3
 800cc78:	f7f3 ffb2 	bl	8000be0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3370      	adds	r3, #112	; 0x70
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	f7f3 ffa7 	bl	8000be0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	3368      	adds	r3, #104	; 0x68
 800cca2:	461a      	mov	r2, r3
 800cca4:	f7f3 fcb4 	bl	8000610 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	3360      	adds	r3, #96	; 0x60
 800ccb8:	461a      	mov	r2, r3
 800ccba:	f7f3 ff91 	bl	8000be0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f103 0020 	add.w	r0, r3, #32
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3378      	adds	r3, #120	; 0x78
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f7f3 ff86 	bl	8000be0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	3380      	adds	r3, #128	; 0x80
 800cce4:	461a      	mov	r2, r3
 800cce6:	f7f3 fc93 	bl	8000610 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3378      	adds	r3, #120	; 0x78
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	f7f3 fd3a 	bl	8000770 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3348      	adds	r3, #72	; 0x48
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	f7f3 ff67 	bl	8000be0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f103 0020 	add.w	r0, r3, #32
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3388      	adds	r3, #136	; 0x88
 800cd22:	461a      	mov	r2, r3
 800cd24:	f7f3 ff5c 	bl	8000be0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3390      	adds	r3, #144	; 0x90
 800cd38:	461a      	mov	r2, r3
 800cd3a:	f7f4 f83a 	bl	8000db2 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	33a0      	adds	r3, #160	; 0xa0
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f7f3 ff46 	bl	8000be0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	33a0      	adds	r3, #160	; 0xa0
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	4619      	mov	r1, r3
 800cd62:	f7f3 fc55 	bl	8000610 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f103 0120 	add.w	r1, r3, #32
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	3330      	adds	r3, #48	; 0x30
 800cd76:	461a      	mov	r2, r3
 800cd78:	f7f3 ff32 	bl	8000be0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	3370      	adds	r3, #112	; 0x70
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	f7f3 ff27 	bl	8000be0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	3330      	adds	r3, #48	; 0x30
 800cda2:	461a      	mov	r2, r3
 800cda4:	f7f4 f805 	bl	8000db2 <arm_mat_sub_f32>

}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b089      	sub	sp, #36	; 0x24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	61f8      	str	r0, [r7, #28]
 800cdb8:	ed87 0a06 	vstr	s0, [r7, #24]
 800cdbc:	edc7 0a05 	vstr	s1, [r7, #20]
 800cdc0:	ed87 1a04 	vstr	s2, [r7, #16]
 800cdc4:	edc7 1a03 	vstr	s3, [r7, #12]
 800cdc8:	ed87 2a02 	vstr	s4, [r7, #8]
 800cdcc:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	69ba      	ldr	r2, [r7, #24]
 800cdd4:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	697a      	ldr	r2, [r7, #20]
 800cdda:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	693a      	ldr	r2, [r7, #16]
 800cde0:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cde8:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	f04f 0200 	mov.w	r2, #0
 800cdf0:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cdfe:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	f04f 0200 	mov.w	r2, #0
 800ce06:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	4a2f      	ldr	r2, [pc, #188]	; (800cec8 <initPID+0x118>)
 800ce0c:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	edd3 6a02 	vldr	s13, [r3, #8]
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	ed93 7a00 	vldr	s14, [r3]
 800ce1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	edd3 6a08 	vldr	s13, [r3, #32]
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	ed93 7a08 	vldr	s14, [r3, #32]
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	ed93 6a07 	vldr	s12, [r3, #28]
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	edd3 7a05 	vldr	s15, [r3, #20]
 800ce3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ce40:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	edd3 7a00 	vldr	s15, [r3]
 800ce54:	eeb1 7a67 	vneg.f32	s14, s15
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	edd3 7a07 	vldr	s15, [r3, #28]
 800ce5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ce68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	f04f 0200 	mov.w	r2, #0
 800ce78:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	f04f 0200 	mov.w	r2, #0
 800ce80:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	f04f 0200 	mov.w	r2, #0
 800ce88:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	f04f 0200 	mov.w	r2, #0
 800ce90:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800ce98:	edd7 7a02 	vldr	s15, [r7, #8]
 800ce9c:	eef1 7a67 	vneg.f32	s15, s15
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800ceac:	edd7 7a01 	vldr	s15, [r7, #4]
 800ceb0:	eef1 7a67 	vneg.f32	s15, s15
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800ceba:	bf00      	nop
 800cebc:	3724      	adds	r7, #36	; 0x24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	41700000 	.word	0x41700000

0800cecc <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b088      	sub	sp, #32
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	ed87 0a05 	vstr	s0, [r7, #20]
 800ced6:	edc7 0a04 	vstr	s1, [r7, #16]
 800ceda:	ed87 1a03 	vstr	s2, [r7, #12]
 800cede:	edc7 1a02 	vstr	s3, [r7, #8]
 800cee2:	ed87 2a01 	vstr	s4, [r7, #4]
 800cee6:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800ceea:	2054      	movs	r0, #84	; 0x54
 800ceec:	f002 fc76 	bl	800f7dc <malloc>
 800cef0:	4603      	mov	r3, r0
 800cef2:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <newPID+0x32>
		return NULL;
 800cefa:	2300      	movs	r3, #0
 800cefc:	e014      	b.n	800cf28 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800cefe:	2254      	movs	r2, #84	; 0x54
 800cf00:	2100      	movs	r1, #0
 800cf02:	69f8      	ldr	r0, [r7, #28]
 800cf04:	f002 fc7d 	bl	800f802 <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800cf08:	edd7 2a00 	vldr	s5, [r7]
 800cf0c:	ed97 2a01 	vldr	s4, [r7, #4]
 800cf10:	edd7 1a02 	vldr	s3, [r7, #8]
 800cf14:	ed97 1a03 	vldr	s2, [r7, #12]
 800cf18:	edd7 0a04 	vldr	s1, [r7, #16]
 800cf1c:	ed97 0a05 	vldr	s0, [r7, #20]
 800cf20:	69f8      	ldr	r0, [r7, #28]
 800cf22:	f7ff ff45 	bl	800cdb0 <initPID>
	return pp;
 800cf26:	69fb      	ldr	r3, [r7, #28]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3720      	adds	r7, #32
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <usart1CommandHandler>:




void usart1CommandHandler()
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	af00      	add	r7, sp, #0
	serialPort1Callback((char *)Usart1Device.RxBuf);
 800cf34:	4802      	ldr	r0, [pc, #8]	; (800cf40 <usart1CommandHandler+0x10>)
 800cf36:	f7fe fc1b 	bl	800b770 <serialPort1Callback>

}
 800cf3a:	bf00      	nop
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	2000d0ae 	.word	0x2000d0ae

0800cf44 <usart3CommandHandler>:
void usart3CommandHandler()
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
	int len=Usart3Device.countRxLineBuf+Usart3Device.countRxBuf;
 800cf4a:	4a3b      	ldr	r2, [pc, #236]	; (800d038 <usart3CommandHandler+0xf4>)
 800cf4c:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800cf50:	4413      	add	r3, r2
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	4619      	mov	r1, r3
 800cf56:	4a38      	ldr	r2, [pc, #224]	; (800d038 <usart3CommandHandler+0xf4>)
 800cf58:	f241 7350 	movw	r3, #5968	; 0x1750
 800cf5c:	4413      	add	r3, r2
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	440b      	add	r3, r1
 800cf62:	607b      	str	r3, [r7, #4]

	//If overflow Clear
	if(len>UART_RX_BUF_SIZE)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cf6a:	dd12      	ble.n	800cf92 <usart3CommandHandler+0x4e>
	{
		memset(Usart3Device.RxLineBuf,0,UART_RX_BUF_SIZE);
 800cf6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cf70:	2100      	movs	r1, #0
 800cf72:	4832      	ldr	r0, [pc, #200]	; (800d03c <usart3CommandHandler+0xf8>)
 800cf74:	f002 fc45 	bl	800f802 <memset>
		Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800cf78:	4a2f      	ldr	r2, [pc, #188]	; (800d038 <usart3CommandHandler+0xf4>)
 800cf7a:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800cf7e:	4413      	add	r3, r2
 800cf80:	4a2e      	ldr	r2, [pc, #184]	; (800d03c <usart3CommandHandler+0xf8>)
 800cf82:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=0;
 800cf84:	4a2c      	ldr	r2, [pc, #176]	; (800d038 <usart3CommandHandler+0xf4>)
 800cf86:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800cf8a:	4413      	add	r3, r2
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	801a      	strh	r2, [r3, #0]
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
			Usart3Device.countRxLineBuf=0;
		}
	}

}
 800cf90:	e04e      	b.n	800d030 <usart3CommandHandler+0xec>
		memcpy(&(Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf]),Usart3Device.RxBuf,Usart3Device.countRxBuf);
 800cf92:	4a29      	ldr	r2, [pc, #164]	; (800d038 <usart3CommandHandler+0xf4>)
 800cf94:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800cf98:	4413      	add	r3, r2
 800cf9a:	881b      	ldrh	r3, [r3, #0]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800cfa2:	4413      	add	r3, r2
 800cfa4:	4a24      	ldr	r2, [pc, #144]	; (800d038 <usart3CommandHandler+0xf4>)
 800cfa6:	1898      	adds	r0, r3, r2
 800cfa8:	4a23      	ldr	r2, [pc, #140]	; (800d038 <usart3CommandHandler+0xf4>)
 800cfaa:	f241 7350 	movw	r3, #5968	; 0x1750
 800cfae:	4413      	add	r3, r2
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	4922      	ldr	r1, [pc, #136]	; (800d040 <usart3CommandHandler+0xfc>)
 800cfb6:	f002 fc19 	bl	800f7ec <memcpy>
		Usart3Device.pRxLineBuf+=Usart3Device.countRxBuf;
 800cfba:	4a1f      	ldr	r2, [pc, #124]	; (800d038 <usart3CommandHandler+0xf4>)
 800cfbc:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800cfc0:	4413      	add	r3, r2
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	491c      	ldr	r1, [pc, #112]	; (800d038 <usart3CommandHandler+0xf4>)
 800cfc6:	f241 7350 	movw	r3, #5968	; 0x1750
 800cfca:	440b      	add	r3, r1
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	441a      	add	r2, r3
 800cfd0:	4919      	ldr	r1, [pc, #100]	; (800d038 <usart3CommandHandler+0xf4>)
 800cfd2:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800cfd6:	440b      	add	r3, r1
 800cfd8:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=len;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	b299      	uxth	r1, r3
 800cfde:	4a16      	ldr	r2, [pc, #88]	; (800d038 <usart3CommandHandler+0xf4>)
 800cfe0:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800cfe4:	4413      	add	r3, r2
 800cfe6:	460a      	mov	r2, r1
 800cfe8:	801a      	strh	r2, [r3, #0]
		if (Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf-1]=='\n')
 800cfea:	4a13      	ldr	r2, [pc, #76]	; (800d038 <usart3CommandHandler+0xf4>)
 800cfec:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800cff0:	4413      	add	r3, r2
 800cff2:	881b      	ldrh	r3, [r3, #0]
 800cff4:	3b01      	subs	r3, #1
 800cff6:	4a10      	ldr	r2, [pc, #64]	; (800d038 <usart3CommandHandler+0xf4>)
 800cff8:	441a      	add	r2, r3
 800cffa:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800cffe:	4413      	add	r3, r2
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2b0a      	cmp	r3, #10
 800d004:	d114      	bne.n	800d030 <usart3CommandHandler+0xec>
			serialReceiveCallback((char *)Usart3Device.RxLineBuf);
 800d006:	480d      	ldr	r0, [pc, #52]	; (800d03c <usart3CommandHandler+0xf8>)
 800d008:	f001 f8cc 	bl	800e1a4 <serialReceiveCallback>
			memset(Usart3Device.RxLineBuf,0,len);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	461a      	mov	r2, r3
 800d010:	2100      	movs	r1, #0
 800d012:	480a      	ldr	r0, [pc, #40]	; (800d03c <usart3CommandHandler+0xf8>)
 800d014:	f002 fbf5 	bl	800f802 <memset>
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800d018:	4a07      	ldr	r2, [pc, #28]	; (800d038 <usart3CommandHandler+0xf4>)
 800d01a:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d01e:	4413      	add	r3, r2
 800d020:	4a06      	ldr	r2, [pc, #24]	; (800d03c <usart3CommandHandler+0xf8>)
 800d022:	601a      	str	r2, [r3, #0]
			Usart3Device.countRxLineBuf=0;
 800d024:	4a04      	ldr	r2, [pc, #16]	; (800d038 <usart3CommandHandler+0xf4>)
 800d026:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d02a:	4413      	add	r3, r2
 800d02c:	2200      	movs	r2, #0
 800d02e:	801a      	strh	r2, [r3, #0]
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	2000d544 	.word	0x2000d544
 800d03c:	2000ea14 	.word	0x2000ea14
 800d040:	2000e81a 	.word	0x2000e81a

0800d044 <usart4CommandHandler>:

void usart4CommandHandler()
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we want to make sure it has the right number of bytes
		serialPort4Callback((char *)Usart4Device.RxBuf);
 800d048:	4802      	ldr	r0, [pc, #8]	; (800d054 <usart4CommandHandler+0x10>)
 800d04a:	f7fe fb9f 	bl	800b78c <serialPort4Callback>
}
 800d04e:	bf00      	nop
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	2000b942 	.word	0x2000b942

0800d058 <UartCommandHandler>:
void UartCommandHandler(UART_DEVICE *UsartDevice)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
	if(UsartDevice == &Usart3Device)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a08      	ldr	r2, [pc, #32]	; (800d084 <UartCommandHandler+0x2c>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d102      	bne.n	800d06e <UartCommandHandler+0x16>
		usart3CommandHandler();
 800d068:	f7ff ff6c 	bl	800cf44 <usart3CommandHandler>
	else if(UsartDevice == &Usart4Device)
		usart4CommandHandler();
}
 800d06c:	e005      	b.n	800d07a <UartCommandHandler+0x22>
	else if(UsartDevice == &Usart4Device)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a05      	ldr	r2, [pc, #20]	; (800d088 <UartCommandHandler+0x30>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d101      	bne.n	800d07a <UartCommandHandler+0x22>
		usart4CommandHandler();
 800d076:	f7ff ffe5 	bl	800d044 <usart4CommandHandler>
}
 800d07a:	bf00      	nop
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	2000d544 	.word	0x2000d544
 800d088:	2000a66c 	.word	0x2000a66c

0800d08c <my_UsartInit>:


/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	af00      	add	r7, sp, #0

	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800d090:	f44f 7218 	mov.w	r2, #608	; 0x260
 800d094:	2100      	movs	r1, #0
 800d096:	4849      	ldr	r0, [pc, #292]	; (800d1bc <my_UsartInit+0x130>)
 800d098:	f002 fbb3 	bl	800f802 <memset>
	printfBinStruct.header[0]=0x5a;
 800d09c:	4b47      	ldr	r3, [pc, #284]	; (800d1bc <my_UsartInit+0x130>)
 800d09e:	225a      	movs	r2, #90	; 0x5a
 800d0a0:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800d0a2:	4b46      	ldr	r3, [pc, #280]	; (800d1bc <my_UsartInit+0x130>)
 800d0a4:	225a      	movs	r2, #90	; 0x5a
 800d0a6:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800d0a8:	4b44      	ldr	r3, [pc, #272]	; (800d1bc <my_UsartInit+0x130>)
 800d0aa:	22a5      	movs	r2, #165	; 0xa5
 800d0ac:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800d0ae:	4b43      	ldr	r3, [pc, #268]	; (800d1bc <my_UsartInit+0x130>)
 800d0b0:	22a5      	movs	r2, #165	; 0xa5
 800d0b2:	70da      	strb	r2, [r3, #3]

	printfBinStruct.pData=printfBinStruct.data;
 800d0b4:	4b41      	ldr	r3, [pc, #260]	; (800d1bc <my_UsartInit+0x130>)
 800d0b6:	4a42      	ldr	r2, [pc, #264]	; (800d1c0 <my_UsartInit+0x134>)
 800d0b8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c

	 memset(&Usart3Device,0,sizeof(Usart3Device));
 800d0bc:	f241 726c 	movw	r2, #5996	; 0x176c
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	4840      	ldr	r0, [pc, #256]	; (800d1c4 <my_UsartInit+0x138>)
 800d0c4:	f002 fb9d 	bl	800f802 <memset>
	 Usart3Device.huart = &huart3;
 800d0c8:	4b3e      	ldr	r3, [pc, #248]	; (800d1c4 <my_UsartInit+0x138>)
 800d0ca:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d0ce:	4a3e      	ldr	r2, [pc, #248]	; (800d1c8 <my_UsartInit+0x13c>)
 800d0d0:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxBuf = Usart3Device.RxBuf;
 800d0d2:	4a3c      	ldr	r2, [pc, #240]	; (800d1c4 <my_UsartInit+0x138>)
 800d0d4:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d0d8:	4413      	add	r3, r2
 800d0da:	4a3c      	ldr	r2, [pc, #240]	; (800d1cc <my_UsartInit+0x140>)
 800d0dc:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800d0de:	4a39      	ldr	r2, [pc, #228]	; (800d1c4 <my_UsartInit+0x138>)
 800d0e0:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d0e4:	4413      	add	r3, r2
 800d0e6:	4a3a      	ldr	r2, [pc, #232]	; (800d1d0 <my_UsartInit+0x144>)
 800d0e8:	601a      	str	r2, [r3, #0]
	 Usart3Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart3Device.RxBuf;
 800d0ea:	4a36      	ldr	r2, [pc, #216]	; (800d1c4 <my_UsartInit+0x138>)
 800d0ec:	f241 7354 	movw	r3, #5972	; 0x1754
 800d0f0:	4413      	add	r3, r2
 800d0f2:	4a36      	ldr	r2, [pc, #216]	; (800d1cc <my_UsartInit+0x140>)
 800d0f4:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart3Device.huart, Usart3Device.RxBuf, UART_RX_BUF_SIZE-1);
 800d0f6:	4b33      	ldr	r3, [pc, #204]	; (800d1c4 <my_UsartInit+0x138>)
 800d0f8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d102:	4932      	ldr	r1, [pc, #200]	; (800d1cc <my_UsartInit+0x140>)
 800d104:	4618      	mov	r0, r3
 800d106:	f7f8 fd75 	bl	8005bf4 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart3Device.huart, UART_IT_IDLE);
 800d10a:	4b2e      	ldr	r3, [pc, #184]	; (800d1c4 <my_UsartInit+0x138>)
 800d10c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	4b2b      	ldr	r3, [pc, #172]	; (800d1c4 <my_UsartInit+0x138>)
 800d118:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f042 0210 	orr.w	r2, r2, #16
 800d124:	601a      	str	r2, [r3, #0]

	// memset(&Usart4Device,0,sizeof(Usart4Device));
	 Usart4Device.huart = &huart4;
 800d126:	4b2b      	ldr	r3, [pc, #172]	; (800d1d4 <my_UsartInit+0x148>)
 800d128:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d12c:	4a2a      	ldr	r2, [pc, #168]	; (800d1d8 <my_UsartInit+0x14c>)
 800d12e:	601a      	str	r2, [r3, #0]
	 Usart4Device.pRxBuf = Usart4Device.RxBuf;
 800d130:	4a28      	ldr	r2, [pc, #160]	; (800d1d4 <my_UsartInit+0x148>)
 800d132:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d136:	4413      	add	r3, r2
 800d138:	4a28      	ldr	r2, [pc, #160]	; (800d1dc <my_UsartInit+0x150>)
 800d13a:	601a      	str	r2, [r3, #0]
	 Usart4Device.pRxLineBuf=Usart4Device.RxLineBuf;
 800d13c:	4a25      	ldr	r2, [pc, #148]	; (800d1d4 <my_UsartInit+0x148>)
 800d13e:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d142:	4413      	add	r3, r2
 800d144:	4a26      	ldr	r2, [pc, #152]	; (800d1e0 <my_UsartInit+0x154>)
 800d146:	601a      	str	r2, [r3, #0]
	 Usart4Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart4Device.RxBuf;
 800d148:	4a22      	ldr	r2, [pc, #136]	; (800d1d4 <my_UsartInit+0x148>)
 800d14a:	f241 7354 	movw	r3, #5972	; 0x1754
 800d14e:	4413      	add	r3, r2
 800d150:	4a22      	ldr	r2, [pc, #136]	; (800d1dc <my_UsartInit+0x150>)
 800d152:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart4Device.huart, Usart4Device.RxBuf, UART_RX_BUF_SIZE-1);
 800d154:	4b1f      	ldr	r3, [pc, #124]	; (800d1d4 <my_UsartInit+0x148>)
 800d156:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d160:	491e      	ldr	r1, [pc, #120]	; (800d1dc <my_UsartInit+0x150>)
 800d162:	4618      	mov	r0, r3
 800d164:	f7f8 fd46 	bl	8005bf4 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart4Device.huart, UART_IT_IDLE);
 800d168:	4b1a      	ldr	r3, [pc, #104]	; (800d1d4 <my_UsartInit+0x148>)
 800d16a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	4b17      	ldr	r3, [pc, #92]	; (800d1d4 <my_UsartInit+0x148>)
 800d176:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f042 0210 	orr.w	r2, r2, #16
 800d182:	601a      	str	r2, [r3, #0]

	 memset(&Usart1Device,0,sizeof(Usart1Device));
 800d184:	f241 726c 	movw	r2, #5996	; 0x176c
 800d188:	2100      	movs	r1, #0
 800d18a:	4816      	ldr	r0, [pc, #88]	; (800d1e4 <my_UsartInit+0x158>)
 800d18c:	f002 fb39 	bl	800f802 <memset>
	 Usart1Device.huart = &huart1;
 800d190:	4b14      	ldr	r3, [pc, #80]	; (800d1e4 <my_UsartInit+0x158>)
 800d192:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d196:	4a14      	ldr	r2, [pc, #80]	; (800d1e8 <my_UsartInit+0x15c>)
 800d198:	601a      	str	r2, [r3, #0]
	 Usart1Device.pRxBuf = Usart1Device.RxBuf;
 800d19a:	4a12      	ldr	r2, [pc, #72]	; (800d1e4 <my_UsartInit+0x158>)
 800d19c:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d1a0:	4413      	add	r3, r2
 800d1a2:	4a12      	ldr	r2, [pc, #72]	; (800d1ec <my_UsartInit+0x160>)
 800d1a4:	601a      	str	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800d1a6:	4b10      	ldr	r3, [pc, #64]	; (800d1e8 <my_UsartInit+0x15c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <my_UsartInit+0x15c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f042 0220 	orr.w	r2, r2, #32
 800d1b4:	601a      	str	r2, [r3, #0]

}
 800d1b6:	bf00      	nop
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	200012b0 	.word	0x200012b0
 800d1c0:	200012b4 	.word	0x200012b4
 800d1c4:	2000d544 	.word	0x2000d544
 800d1c8:	2000a38c 	.word	0x2000a38c
 800d1cc:	2000e81a 	.word	0x2000e81a
 800d1d0:	2000ea14 	.word	0x2000ea14
 800d1d4:	2000a66c 	.word	0x2000a66c
 800d1d8:	2000a4ec 	.word	0x2000a4ec
 800d1dc:	2000b942 	.word	0x2000b942
 800d1e0:	2000bb3c 	.word	0x2000bb3c
 800d1e4:	2000bdd8 	.word	0x2000bdd8
 800d1e8:	2000a46c 	.word	0x2000a46c
 800d1ec:	2000d0ae 	.word	0x2000d0ae

0800d1f0 <HAL_UART_RxIdleCallback>:
  HAL_UART_IRQHandler(&huart3);
}
*/

void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	f003 0310 	and.w	r3, r3, #16
 800d202:	2b10      	cmp	r3, #16
 800d204:	bf0c      	ite	eq
 800d206:	2301      	moveq	r3, #1
 800d208:	2300      	movne	r3, #0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	60fb      	str	r3, [r7, #12]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 0310 	and.w	r3, r3, #16
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bf14      	ite	ne
 800d21c:	2301      	movne	r3, #1
 800d21e:	2300      	moveq	r3, #0
 800d220:	b2db      	uxtb	r3, r3
 800d222:	60bb      	str	r3, [r7, #8]

	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d01b      	beq.n	800d262 <HAL_UART_RxIdleCallback+0x72>
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d018      	beq.n	800d262 <HAL_UART_RxIdleCallback+0x72>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2210      	movs	r2, #16
 800d236:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		if(huart == &huart3)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a0d      	ldr	r2, [pc, #52]	; (800d270 <HAL_UART_RxIdleCallback+0x80>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d106      	bne.n	800d24e <HAL_UART_RxIdleCallback+0x5e>
			Usart3Device.Received = 1;
 800d240:	4a0c      	ldr	r2, [pc, #48]	; (800d274 <HAL_UART_RxIdleCallback+0x84>)
 800d242:	f241 7352 	movw	r3, #5970	; 0x1752
 800d246:	4413      	add	r3, r2
 800d248:	2201      	movs	r2, #1
 800d24a:	801a      	strh	r2, [r3, #0]

		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/

	}

}
 800d24c:	e009      	b.n	800d262 <HAL_UART_RxIdleCallback+0x72>
		else if(huart == &huart4)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a09      	ldr	r2, [pc, #36]	; (800d278 <HAL_UART_RxIdleCallback+0x88>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d105      	bne.n	800d262 <HAL_UART_RxIdleCallback+0x72>
			Usart4Device.Received = 1;
 800d256:	4a09      	ldr	r2, [pc, #36]	; (800d27c <HAL_UART_RxIdleCallback+0x8c>)
 800d258:	f241 7352 	movw	r3, #5970	; 0x1752
 800d25c:	4413      	add	r3, r2
 800d25e:	2201      	movs	r2, #1
 800d260:	801a      	strh	r2, [r3, #0]
}
 800d262:	bf00      	nop
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	2000a38c 	.word	0x2000a38c
 800d274:	2000d544 	.word	0x2000d544
 800d278:	2000a4ec 	.word	0x2000a4ec
 800d27c:	2000a66c 	.word	0x2000a66c

0800d280 <_write>:

/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
	uint8_t *pDes=Usart3Device.TxBuf[Usart3Device.producerTxBufNum];
 800d28c:	4a44      	ldr	r2, [pc, #272]	; (800d3a0 <_write+0x120>)
 800d28e:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d292:	4413      	add	r3, r2
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d29c:	fb03 f302 	mul.w	r3, r3, r2
 800d2a0:	4a3f      	ldr	r2, [pc, #252]	; (800d3a0 <_write+0x120>)
 800d2a2:	4413      	add	r3, r2
 800d2a4:	617b      	str	r3, [r7, #20]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	68b9      	ldr	r1, [r7, #8]
 800d2ac:	6978      	ldr	r0, [r7, #20]
 800d2ae:	f002 fa9d 	bl	800f7ec <memcpy>
	*(pDes+len)='\0';
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	701a      	strb	r2, [r3, #0]
	Usart3Device.countTxBuf[Usart3Device.producerTxBufNum] = len;
 800d2bc:	4a38      	ldr	r2, [pc, #224]	; (800d3a0 <_write+0x120>)
 800d2be:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	881b      	ldrh	r3, [r3, #0]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	b291      	uxth	r1, r2
 800d2ca:	4a35      	ldr	r2, [pc, #212]	; (800d3a0 <_write+0x120>)
 800d2cc:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	4413      	add	r3, r2
 800d2d4:	460a      	mov	r2, r1
 800d2d6:	80da      	strh	r2, [r3, #6]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	Usart3Device.bufferedTxNum++;
 800d2d8:	4a31      	ldr	r2, [pc, #196]	; (800d3a0 <_write+0x120>)
 800d2da:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d2de:	4413      	add	r3, r2
 800d2e0:	881b      	ldrh	r3, [r3, #0]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	b299      	uxth	r1, r3
 800d2e6:	4a2e      	ldr	r2, [pc, #184]	; (800d3a0 <_write+0x120>)
 800d2e8:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d2ec:	4413      	add	r3, r2
 800d2ee:	460a      	mov	r2, r1
 800d2f0:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(Usart3Device.bufferedTxNum == 1){
 800d2f2:	4a2b      	ldr	r2, [pc, #172]	; (800d3a0 <_write+0x120>)
 800d2f4:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d2f8:	4413      	add	r3, r2
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d11b      	bne.n	800d338 <_write+0xb8>
		HAL_UART_Transmit_DMA(Usart3Device.huart,pDes,Usart3Device.countTxBuf[Usart3Device.producerTxBufNum]);
 800d300:	4b27      	ldr	r3, [pc, #156]	; (800d3a0 <_write+0x120>)
 800d302:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d306:	6818      	ldr	r0, [r3, #0]
 800d308:	4a25      	ldr	r2, [pc, #148]	; (800d3a0 <_write+0x120>)
 800d30a:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d30e:	4413      	add	r3, r2
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	4a23      	ldr	r2, [pc, #140]	; (800d3a0 <_write+0x120>)
 800d314:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	4413      	add	r3, r2
 800d31c:	88db      	ldrh	r3, [r3, #6]
 800d31e:	461a      	mov	r2, r3
 800d320:	6979      	ldr	r1, [r7, #20]
 800d322:	f7f8 fbeb 	bl	8005afc <HAL_UART_Transmit_DMA>
		Usart3Device.TxStart = micros();
 800d326:	f7fe fa43 	bl	800b7b0 <micros>
 800d32a:	4601      	mov	r1, r0
 800d32c:	4a1c      	ldr	r2, [pc, #112]	; (800d3a0 <_write+0x120>)
 800d32e:	f241 7358 	movw	r3, #5976	; 0x1758
 800d332:	4413      	add	r3, r2
 800d334:	6019      	str	r1, [r3, #0]
 800d336:	e00a      	b.n	800d34e <_write+0xce>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the Usart3Devices would somehow suddenly lost the configurations
		Usart3Device.bufferedTxNum=Usart3Device.bufferedTxNum;
 800d338:	4a19      	ldr	r2, [pc, #100]	; (800d3a0 <_write+0x120>)
 800d33a:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d33e:	4413      	add	r3, r2
 800d340:	8819      	ldrh	r1, [r3, #0]
 800d342:	4a17      	ldr	r2, [pc, #92]	; (800d3a0 <_write+0x120>)
 800d344:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d348:	4413      	add	r3, r2
 800d34a:	460a      	mov	r2, r1
 800d34c:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	Usart3Device.producerTxBufNum++;
 800d34e:	4a14      	ldr	r2, [pc, #80]	; (800d3a0 <_write+0x120>)
 800d350:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d354:	4413      	add	r3, r2
 800d356:	881b      	ldrh	r3, [r3, #0]
 800d358:	3301      	adds	r3, #1
 800d35a:	b299      	uxth	r1, r3
 800d35c:	4a10      	ldr	r2, [pc, #64]	; (800d3a0 <_write+0x120>)
 800d35e:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d362:	4413      	add	r3, r2
 800d364:	460a      	mov	r2, r1
 800d366:	801a      	strh	r2, [r3, #0]
	Usart3Device.producerTxBufNum%=UART_TX_BUF_NUM;
 800d368:	4a0d      	ldr	r2, [pc, #52]	; (800d3a0 <_write+0x120>)
 800d36a:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d36e:	4413      	add	r3, r2
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	f003 0307 	and.w	r3, r3, #7
 800d376:	b299      	uxth	r1, r3
 800d378:	4a09      	ldr	r2, [pc, #36]	; (800d3a0 <_write+0x120>)
 800d37a:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d37e:	4413      	add	r3, r2
 800d380:	460a      	mov	r2, r1
 800d382:	801a      	strh	r2, [r3, #0]

	//Buffered term full, wait for consumer to reduce producerTxBufNum
	while(Usart3Device.bufferedTxNum > (UART_TX_BUF_NUM-2)){
 800d384:	bf00      	nop
 800d386:	4a06      	ldr	r2, [pc, #24]	; (800d3a0 <_write+0x120>)
 800d388:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d38c:	4413      	add	r3, r2
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	2b06      	cmp	r3, #6
 800d392:	d8f8      	bhi.n	800d386 <_write+0x106>
		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
	};
	return len;
 800d394:	687b      	ldr	r3, [r7, #4]
}
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	2000d544 	.word	0x2000d544

0800d3a4 <HAL_UART_RxCpltCallback>:
void printfBinPush(int16_t dat)
{
*(printfBinStruct.pData)++=dat;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
	//printf("RxCplCall_Test\r\n");
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <HAL_UART_TxCpltCallback>:

/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
	 /*update information*/
	 Usart3Device.TxEnd = micros();
 800d3c0:	f7fe f9f6 	bl	800b7b0 <micros>
 800d3c4:	4601      	mov	r1, r0
 800d3c6:	4a3c      	ldr	r2, [pc, #240]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d3c8:	f241 735c 	movw	r3, #5980	; 0x175c
 800d3cc:	4413      	add	r3, r2
 800d3ce:	6019      	str	r1, [r3, #0]
	 Usart3Device.lastTxTime = Usart3Device.TxEnd - Usart3Device.TxStart;
 800d3d0:	4a39      	ldr	r2, [pc, #228]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d3d2:	f241 735c 	movw	r3, #5980	; 0x175c
 800d3d6:	4413      	add	r3, r2
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	4937      	ldr	r1, [pc, #220]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d3dc:	f241 7358 	movw	r3, #5976	; 0x1758
 800d3e0:	440b      	add	r3, r1
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	1ad2      	subs	r2, r2, r3
 800d3e6:	4934      	ldr	r1, [pc, #208]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d3e8:	f241 7364 	movw	r3, #5988	; 0x1764
 800d3ec:	440b      	add	r3, r1
 800d3ee:	601a      	str	r2, [r3, #0]
	 Usart3Device.lastTxCount = Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum];
 800d3f0:	4b31      	ldr	r3, [pc, #196]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d3f2:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d3f6:	881b      	ldrh	r3, [r3, #0]
 800d3f8:	4a2f      	ldr	r2, [pc, #188]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d3fa:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d3fe:	005b      	lsls	r3, r3, #1
 800d400:	4413      	add	r3, r2
 800d402:	88db      	ldrh	r3, [r3, #6]
 800d404:	4619      	mov	r1, r3
 800d406:	4a2c      	ldr	r2, [pc, #176]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d408:	f241 7368 	movw	r3, #5992	; 0x1768
 800d40c:	4413      	add	r3, r2
 800d40e:	6019      	str	r1, [r3, #0]

	/*One consumption done. move consumer forward*/
	Usart3Device.consumerTxBufNum++;
 800d410:	4b29      	ldr	r3, [pc, #164]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d412:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	3301      	adds	r3, #1
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	4b26      	ldr	r3, [pc, #152]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d41e:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d422:	801a      	strh	r2, [r3, #0]
	Usart3Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 800d424:	4b24      	ldr	r3, [pc, #144]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d426:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d42a:	881b      	ldrh	r3, [r3, #0]
 800d42c:	f003 0307 	and.w	r3, r3, #7
 800d430:	b29a      	uxth	r2, r3
 800d432:	4b21      	ldr	r3, [pc, #132]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d434:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d438:	801a      	strh	r2, [r3, #0]

	/*reduce one bufferedTxNum*/
	 Usart3Device.bufferedTxNum--;
 800d43a:	4a1f      	ldr	r2, [pc, #124]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d43c:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d440:	4413      	add	r3, r2
 800d442:	881b      	ldrh	r3, [r3, #0]
 800d444:	3b01      	subs	r3, #1
 800d446:	b299      	uxth	r1, r3
 800d448:	4a1b      	ldr	r2, [pc, #108]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d44a:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d44e:	4413      	add	r3, r2
 800d450:	460a      	mov	r2, r1
 800d452:	801a      	strh	r2, [r3, #0]

	/*If it is still positive, go on consume next*/
	if(Usart3Device.bufferedTxNum>0){
 800d454:	4a18      	ldr	r2, [pc, #96]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d456:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d45a:	4413      	add	r3, r2
 800d45c:	881b      	ldrh	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d025      	beq.n	800d4ae <HAL_UART_TxCpltCallback+0xf6>
		Usart3Device.TxStart = micros();
 800d462:	f7fe f9a5 	bl	800b7b0 <micros>
 800d466:	4601      	mov	r1, r0
 800d468:	4a13      	ldr	r2, [pc, #76]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d46a:	f241 7358 	movw	r3, #5976	; 0x1758
 800d46e:	4413      	add	r3, r2
 800d470:	6019      	str	r1, [r3, #0]
		uint8_t *px = &Usart3Device.TxBuf[Usart3Device.consumerTxBufNum][0];
 800d472:	4b11      	ldr	r3, [pc, #68]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d474:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	461a      	mov	r2, r3
 800d47c:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d480:	fb03 f302 	mul.w	r3, r3, r2
 800d484:	4a0c      	ldr	r2, [pc, #48]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d486:	4413      	add	r3, r2
 800d488:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit_DMA(Usart3Device.huart,px,Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum]);
 800d48a:	4b0b      	ldr	r3, [pc, #44]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d48c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	4b09      	ldr	r3, [pc, #36]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d494:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	4a07      	ldr	r2, [pc, #28]	; (800d4b8 <HAL_UART_TxCpltCallback+0x100>)
 800d49c:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d4a0:	005b      	lsls	r3, r3, #1
 800d4a2:	4413      	add	r3, r2
 800d4a4:	88db      	ldrh	r3, [r3, #6]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	68f9      	ldr	r1, [r7, #12]
 800d4aa:	f7f8 fb27 	bl	8005afc <HAL_UART_Transmit_DMA>
	}
}
 800d4ae:	bf00      	nop
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	2000d544 	.word	0x2000d544

0800d4bc <myUsart1IRQ>:


void myUsart1IRQ()
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0

 	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800d4c0:	4b25      	ldr	r3, [pc, #148]	; (800d558 <myUsart1IRQ+0x9c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	f003 0320 	and.w	r3, r3, #32
 800d4ca:	2b20      	cmp	r3, #32
 800d4cc:	d141      	bne.n	800d552 <myUsart1IRQ+0x96>
	{
		*(Usart1Device.pRxBuf)=(uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800d4ce:	4b22      	ldr	r3, [pc, #136]	; (800d558 <myUsart1IRQ+0x9c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d4d4:	4a21      	ldr	r2, [pc, #132]	; (800d55c <myUsart1IRQ+0xa0>)
 800d4d6:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d4da:	4413      	add	r3, r2
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	b2ca      	uxtb	r2, r1
 800d4e0:	701a      	strb	r2, [r3, #0]
		if(*(Usart1Device.pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800d4e2:	4a1e      	ldr	r2, [pc, #120]	; (800d55c <myUsart1IRQ+0xa0>)
 800d4e4:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d4e8:	4413      	add	r3, r2
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	2b0a      	cmp	r3, #10
 800d4f0:	d124      	bne.n	800d53c <myUsart1IRQ+0x80>
		{
			if((Usart1Device.pRxBuf)!=(Usart1Device.RxBuf)) // if '0x0a' is not in the beginning
 800d4f2:	4a1a      	ldr	r2, [pc, #104]	; (800d55c <myUsart1IRQ+0xa0>)
 800d4f4:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d4f8:	4413      	add	r3, r2
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a18      	ldr	r2, [pc, #96]	; (800d560 <myUsart1IRQ+0xa4>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d027      	beq.n	800d552 <myUsart1IRQ+0x96>
			{
				if(*(Usart1Device.pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800d502:	4a16      	ldr	r2, [pc, #88]	; (800d55c <myUsart1IRQ+0xa0>)
 800d504:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d508:	4413      	add	r3, r2
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b0d      	cmp	r3, #13
 800d512:	d106      	bne.n	800d522 <myUsart1IRQ+0x66>
			    {
					Usart1Device.Received = 1;
 800d514:	4a11      	ldr	r2, [pc, #68]	; (800d55c <myUsart1IRQ+0xa0>)
 800d516:	f241 7352 	movw	r3, #5970	; 0x1752
 800d51a:	4413      	add	r3, r2
 800d51c:	2201      	movs	r2, #1
 800d51e:	801a      	strh	r2, [r3, #0]
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else Usart1Device.pRxBuf++;
	}

}
 800d520:	e017      	b.n	800d552 <myUsart1IRQ+0x96>
					memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800d522:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d526:	2100      	movs	r1, #0
 800d528:	480d      	ldr	r0, [pc, #52]	; (800d560 <myUsart1IRQ+0xa4>)
 800d52a:	f002 f96a 	bl	800f802 <memset>
					Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800d52e:	4a0b      	ldr	r2, [pc, #44]	; (800d55c <myUsart1IRQ+0xa0>)
 800d530:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d534:	4413      	add	r3, r2
 800d536:	4a0a      	ldr	r2, [pc, #40]	; (800d560 <myUsart1IRQ+0xa4>)
 800d538:	601a      	str	r2, [r3, #0]
}
 800d53a:	e00a      	b.n	800d552 <myUsart1IRQ+0x96>
		else Usart1Device.pRxBuf++;
 800d53c:	4a07      	ldr	r2, [pc, #28]	; (800d55c <myUsart1IRQ+0xa0>)
 800d53e:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d542:	4413      	add	r3, r2
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	4904      	ldr	r1, [pc, #16]	; (800d55c <myUsart1IRQ+0xa0>)
 800d54a:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d54e:	440b      	add	r3, r1
 800d550:	601a      	str	r2, [r3, #0]
}
 800d552:	bf00      	nop
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	2000a46c 	.word	0x2000a46c
 800d55c:	2000bdd8 	.word	0x2000bdd8
 800d560:	2000d0ae 	.word	0x2000d0ae

0800d564 <UsartDMAIdleHandler>:


void UsartDMAIdleHandler(UART_DEVICE *UsartDevice)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	f241 7352 	movw	r3, #5970	; 0x1752
 800d572:	4413      	add	r3, r2
 800d574:	881b      	ldrh	r3, [r3, #0]
 800d576:	2b01      	cmp	r3, #1
 800d578:	f040 808f 	bne.w	800d69a <UsartDMAIdleHandler+0x136>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d586:	2b22      	cmp	r3, #34	; 0x22
 800d588:	d165      	bne.n	800d656 <UsartDMAIdleHandler+0xf2>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59a:	2b40      	cmp	r3, #64	; 0x40
 800d59c:	d15b      	bne.n	800d656 <UsartDMAIdleHandler+0xf2>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	689a      	ldr	r2, [r3, #8]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5b8:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d024      	beq.n	800d612 <UsartDMAIdleHandler+0xae>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	b299      	uxth	r1, r3
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	f241 7350 	movw	r3, #5968	; 0x1750
 800d5ee:	4413      	add	r3, r2
 800d5f0:	460a      	mov	r2, r1
 800d5f2:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7f4 faff 	bl	8001c10 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d62c:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f022 0201 	bic.w	r2, r2, #1
 800d648:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2220      	movs	r2, #32
 800d654:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands*/
			UartCommandHandler(UsartDevice);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff fcfe 	bl	800d058 <UartCommandHandler>

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	f241 7352 	movw	r3, #5970	; 0x1752
 800d662:	4413      	add	r3, r2
 800d664:	2200      	movs	r2, #0
 800d666:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	f241 63cc 	movw	r3, #5836	; 0x16cc
 800d66e:	4413      	add	r3, r2
 800d670:	2264      	movs	r2, #100	; 0x64
 800d672:	2100      	movs	r1, #0
 800d674:	4618      	mov	r0, r3
 800d676:	f002 f8c4 	bl	800f802 <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	f241 23d6 	movw	r3, #4822	; 0x12d6
 800d680:	4413      	add	r3, r2
 800d682:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d686:	2100      	movs	r1, #0
 800d688:	4618      	mov	r0, r3
 800d68a:	f002 f8ba 	bl	800f802 <memset>
			UsartDevice->countRxBuf = 0;
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	f241 7350 	movw	r3, #5968	; 0x1750
 800d694:	4413      	add	r3, r2
 800d696:	2200      	movs	r2, #0
 800d698:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d6a0:	6818      	ldr	r0, [r3, #0]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	f241 23d6 	movw	r3, #4822	; 0x12d6
 800d6a8:	4413      	add	r3, r2
 800d6aa:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	f7f8 faa0 	bl	8005bf4 <HAL_UART_Receive_DMA>
}
 800d6b4:	bf00      	nop
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <Usart_TerminalHandler>:

/*Put this function in a loop for polling*/
void Usart_TerminalHandler()
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	af00      	add	r7, sp, #0
	UsartDMAIdleHandler(&Usart3Device);
 800d6c0:	4811      	ldr	r0, [pc, #68]	; (800d708 <Usart_TerminalHandler+0x4c>)
 800d6c2:	f7ff ff4f 	bl	800d564 <UsartDMAIdleHandler>
	UsartDMAIdleHandler(&Usart4Device);
 800d6c6:	4811      	ldr	r0, [pc, #68]	; (800d70c <Usart_TerminalHandler+0x50>)
 800d6c8:	f7ff ff4c 	bl	800d564 <UsartDMAIdleHandler>

	/********************************Usart 1 Int reception****************************/
	if(Usart1Device.Received == 1)
 800d6cc:	4a10      	ldr	r2, [pc, #64]	; (800d710 <Usart_TerminalHandler+0x54>)
 800d6ce:	f241 7352 	movw	r3, #5970	; 0x1752
 800d6d2:	4413      	add	r3, r2
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d113      	bne.n	800d702 <Usart_TerminalHandler+0x46>
	{
		usart1CommandHandler();
 800d6da:	f7ff fc29 	bl	800cf30 <usart1CommandHandler>
		memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800d6de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	480b      	ldr	r0, [pc, #44]	; (800d714 <Usart_TerminalHandler+0x58>)
 800d6e6:	f002 f88c 	bl	800f802 <memset>
		Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800d6ea:	4a09      	ldr	r2, [pc, #36]	; (800d710 <Usart_TerminalHandler+0x54>)
 800d6ec:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d6f0:	4413      	add	r3, r2
 800d6f2:	4a08      	ldr	r2, [pc, #32]	; (800d714 <Usart_TerminalHandler+0x58>)
 800d6f4:	601a      	str	r2, [r3, #0]
		Usart1Device.Received = 0;
 800d6f6:	4a06      	ldr	r2, [pc, #24]	; (800d710 <Usart_TerminalHandler+0x54>)
 800d6f8:	f241 7352 	movw	r3, #5970	; 0x1752
 800d6fc:	4413      	add	r3, r2
 800d6fe:	2200      	movs	r2, #0
 800d700:	801a      	strh	r2, [r3, #0]

	}

}
 800d702:	bf00      	nop
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	2000d544 	.word	0x2000d544
 800d70c:	2000a66c 	.word	0x2000a66c
 800d710:	2000bdd8 	.word	0x2000bdd8
 800d714:	2000d0ae 	.word	0x2000d0ae

0800d718 <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f04f 0200 	mov.w	r2, #0
 800d738:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f04f 0200 	mov.w	r2, #0
 800d740:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4a0f      	ldr	r2, [pc, #60]	; (800d784 <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800d746:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f04f 0200 	mov.w	r2, #0
 800d74e:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f240 6266 	movw	r2, #1638	; 0x666
 800d756:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f643 1299 	movw	r2, #14745	; 0x3999
 800d75e:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a09      	ldr	r2, [pc, #36]	; (800d788 <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800d764:	61da      	str	r2, [r3, #28]
	CS_Port =SPI6_CS_GPIO_Port;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4a08      	ldr	r2, [pc, #32]	; (800d78c <_ZN18PRESSURE_SENSORSPIC1Ev+0x74>)
 800d76a:	621a      	str	r2, [r3, #32]
	CS_Pin = SPI6_CS_Pin;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d772:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	48ca0080 	.word	0x48ca0080
 800d788:	20009c1c 	.word	0x20009c1c
 800d78c:	40020c00 	.word	0x40020c00

0800d790 <InitTraj>:




void InitTraj(TRAJ_GEN *traj,float vaverage)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	ed87 0a00 	vstr	s0, [r7]
	traj->trajState= TRAJ_GEN_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	701a      	strb	r2, [r3, #0]
	traj->lineType = TRAJ_GEN_STEP;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	705a      	strb	r2, [r3, #1]
	traj->vaverage = vaverage;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d7ae:	bf00      	nop
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	0000      	movs	r0, r0
 800d7bc:	0000      	movs	r0, r0
	...

0800d7c0 <UpdateTrajSin>:


void UpdateTrajSin(TRAJ_GEN *traj,float x0,float xd,float fre,float offset,uint32_t startTime)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6178      	str	r0, [r7, #20]
 800d7c8:	ed87 0a04 	vstr	s0, [r7, #16]
 800d7cc:	edc7 0a03 	vstr	s1, [r7, #12]
 800d7d0:	ed87 1a02 	vstr	s2, [r7, #8]
 800d7d4:	edc7 1a01 	vstr	s3, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
	traj->repetition = 1000;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d7e0:	615a      	str	r2, [r3, #20]
	traj->tStart = startTime;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	683a      	ldr	r2, [r7, #0]
 800d7e6:	605a      	str	r2, [r3, #4]
	traj->trajState = TRAJ_GEN_STATE_BUSY;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	701a      	strb	r2, [r3, #0]
	traj->lineType = TRAJ_GEN_SINOID;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2204      	movs	r2, #4
 800d7f2:	705a      	strb	r2, [r3, #1]

	traj->xd = xd;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	625a      	str	r2, [r3, #36]	; 0x24
	traj->x0 = x0;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	693a      	ldr	r2, [r7, #16]
 800d7fe:	619a      	str	r2, [r3, #24]

	traj->tDuration = 1000.0/fre * traj->repetition;
 800d800:	edd7 7a02 	vldr	s15, [r7, #8]
 800d804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d808:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 800d878 <UpdateTrajSin+0xb8>
 800d80c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	695b      	ldr	r3, [r3, #20]
 800d814:	ee07 3a90 	vmov	s15, r3
 800d818:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d81c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d820:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d824:	ee17 2a90 	vmov	r2, s15
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	609a      	str	r2, [r3, #8]
	traj->generator = SinoidGenerate;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	4a14      	ldr	r2, [pc, #80]	; (800d880 <UpdateTrajSin+0xc0>)
 800d830:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	SinoidInit(&(traj->sinoid), traj->x0, traj->v0, xd, fre,offset);
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	f503 7252 	add.w	r2, r3, #840	; 0x348
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	edd3 7a06 	vldr	s15, [r3, #24]
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	ed93 7a07 	vldr	s14, [r3, #28]
 800d846:	ed97 2a01 	vldr	s4, [r7, #4]
 800d84a:	edd7 1a02 	vldr	s3, [r7, #8]
 800d84e:	ed97 1a03 	vldr	s2, [r7, #12]
 800d852:	eef0 0a47 	vmov.f32	s1, s14
 800d856:	eeb0 0a67 	vmov.f32	s0, s15
 800d85a:	4610      	mov	r0, r2
 800d85c:	f000 f844 	bl	800d8e8 <SinoidInit>
	traj->tEnd = traj->tStart + traj->tDuration;
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	441a      	add	r2, r3
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	60da      	str	r2, [r3, #12]
}
 800d86e:	bf00      	nop
 800d870:	3718      	adds	r7, #24
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	00000000 	.word	0x00000000
 800d87c:	408f4000 	.word	0x408f4000
 800d880:	0800db8d 	.word	0x0800db8d

0800d884 <TrajGen>:
//		traj->generator = SinoidGenerate;
//		SinoidInit(&(traj->sinoid), traj->x0, traj->v0, xd, duration/1000.0f);
//	}
	traj->tEnd = traj->tStart + traj->tDuration;
}
void TrajGen(TRAJ_GEN *traj, uint32_t globalT) {
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]

	if (traj->trajState == TRAJ_GEN_STATE_BUSY) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d11f      	bne.n	800d8d6 <TrajGen+0x52>
		if (globalT > traj->tEnd) {
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d903      	bls.n	800d8a8 <TrajGen+0x24>
			traj->trajState = TRAJ_GEN_STATE_READY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	701a      	strb	r2, [r3, #0]
			traj->generator(traj, traj->t / 1000.0f);
		}
	}


}
 800d8a6:	e016      	b.n	800d8d6 <TrajGen+0x52>
			traj->t = globalT - traj->tStart;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	1ad2      	subs	r2, r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	611a      	str	r2, [r3, #16]
			traj->generator(traj, traj->t / 1000.0f);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	6912      	ldr	r2, [r2, #16]
 800d8be:	ee07 2a90 	vmov	s15, r2
 800d8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800d8e0 <TrajGen+0x5c>
 800d8ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8ce:	eeb0 0a66 	vmov.f32	s0, s13
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	4798      	blx	r3
}
 800d8d6:	bf00      	nop
 800d8d8:	3708      	adds	r7, #8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	447a0000 	.word	0x447a0000
 800d8e4:	00000000 	.word	0x00000000

0800d8e8 <SinoidInit>:
	 traj->v_out = traj->squareScurve.v_out;
	 traj->a_out = traj->squareScurve.a_out;
}

static void SinoidInit(TYPE_SINOID *s,float x0,float v0,float amp,float fre,float offset)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b088      	sub	sp, #32
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6178      	str	r0, [r7, #20]
 800d8f0:	ed87 0a04 	vstr	s0, [r7, #16]
 800d8f4:	edc7 0a03 	vstr	s1, [r7, #12]
 800d8f8:	ed87 1a02 	vstr	s2, [r7, #8]
 800d8fc:	edc7 1a01 	vstr	s3, [r7, #4]
 800d900:	ed87 2a00 	vstr	s4, [r7]
	float phival = x0/amp;
 800d904:	edd7 6a04 	vldr	s13, [r7, #16]
 800d908:	ed97 7a02 	vldr	s14, [r7, #8]
 800d90c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d910:	edc7 7a07 	vstr	s15, [r7, #28]
	s->x0 = x0;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	601a      	str	r2, [r3, #0]
	s->v0 = v0;
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	605a      	str	r2, [r3, #4]
	s->amplitude = amp;
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	61da      	str	r2, [r3, #28]

	s->frequency = fre;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	621a      	str	r2, [r3, #32]
	s->period =  1/fre;
 800d92c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d930:	ed97 7a01 	vldr	s14, [r7, #4]
 800d934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	s->omega = 2*M_PI*s->frequency;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	edd3 7a08 	vldr	s15, [r3, #32]
 800d944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d948:	ed9f 6b47 	vldr	d6, [pc, #284]	; 800da68 <SinoidInit+0x180>
 800d94c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d950:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	s->offset = offset;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	631a      	str	r2, [r3, #48]	; 0x30

	if(phival>=1)
 800d960:	edd7 7a07 	vldr	s15, [r7, #28]
 800d964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d970:	db03      	blt.n	800d97a <SinoidInit+0x92>
		s->phi = M_PI/2;
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	4a40      	ldr	r2, [pc, #256]	; (800da78 <SinoidInit+0x190>)
 800d976:	62da      	str	r2, [r3, #44]	; 0x2c
			s->phi = M_PI+asin(-phival);
		else
			s->phi = 2*M_PI-asin(-phival);
	}

}
 800d978:	e070      	b.n	800da5c <SinoidInit+0x174>
	else if(phival<=-1)
 800d97a:	edd7 7a07 	vldr	s15, [r7, #28]
 800d97e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d982:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98a:	d803      	bhi.n	800d994 <SinoidInit+0xac>
		s->phi = -M_PI/2;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	4a3b      	ldr	r2, [pc, #236]	; (800da7c <SinoidInit+0x194>)
 800d990:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d992:	e063      	b.n	800da5c <SinoidInit+0x174>
	else if(phival>=0){
 800d994:	edd7 7a07 	vldr	s15, [r7, #28]
 800d998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a0:	db2b      	blt.n	800d9fa <SinoidInit+0x112>
			if(s->v0 >=0)
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b0:	db0f      	blt.n	800d9d2 <SinoidInit+0xea>
				s->phi = asin(phival);
 800d9b2:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d9ba:	eeb0 0b47 	vmov.f64	d0, d7
 800d9be:	f000 ff57 	bl	800e870 <asin>
 800d9c2:	eeb0 7b40 	vmov.f64	d7, d0
 800d9c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800d9d0:	e044      	b.n	800da5c <SinoidInit+0x174>
				s->phi = M_PI-asin(phival);
 800d9d2:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d9da:	eeb0 0b47 	vmov.f64	d0, d7
 800d9de:	f000 ff47 	bl	800e870 <asin>
 800d9e2:	eeb0 6b40 	vmov.f64	d6, d0
 800d9e6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800da70 <SinoidInit+0x188>
 800d9ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800d9f8:	e030      	b.n	800da5c <SinoidInit+0x174>
		if(s->v0 <=0)
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	edd3 7a01 	vldr	s15, [r3, #4]
 800da00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da08:	d815      	bhi.n	800da36 <SinoidInit+0x14e>
			s->phi = M_PI+asin(-phival);
 800da0a:	edd7 7a07 	vldr	s15, [r7, #28]
 800da0e:	eef1 7a67 	vneg.f32	s15, s15
 800da12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800da16:	eeb0 0b47 	vmov.f64	d0, d7
 800da1a:	f000 ff29 	bl	800e870 <asin>
 800da1e:	eeb0 6b40 	vmov.f64	d6, d0
 800da22:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800da70 <SinoidInit+0x188>
 800da26:	ee36 7b07 	vadd.f64	d7, d6, d7
 800da2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800da34:	e012      	b.n	800da5c <SinoidInit+0x174>
			s->phi = 2*M_PI-asin(-phival);
 800da36:	edd7 7a07 	vldr	s15, [r7, #28]
 800da3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800da3e:	eeb0 0b47 	vmov.f64	d0, d7
 800da42:	f000 ff15 	bl	800e870 <asin>
 800da46:	eeb0 6b40 	vmov.f64	d6, d0
 800da4a:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800da68 <SinoidInit+0x180>
 800da4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800da52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800da5c:	bf00      	nop
 800da5e:	3720      	adds	r7, #32
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	f3af 8000 	nop.w
 800da68:	54442d18 	.word	0x54442d18
 800da6c:	401921fb 	.word	0x401921fb
 800da70:	54442d18 	.word	0x54442d18
 800da74:	400921fb 	.word	0x400921fb
 800da78:	3fc90fdb 	.word	0x3fc90fdb
 800da7c:	bfc90fdb 	.word	0xbfc90fdb

0800da80 <__SinoidGenerate>:


static void __SinoidGenerate(TYPE_SINOID *s,float t)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	ed2d 8b02 	vpush	{d8}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	ed87 0a00 	vstr	s0, [r7]
	(s->x_out)=   s->amplitude*				   sin(s->omega*t + s->phi)+s->offset;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	edd3 7a07 	vldr	s15, [r3, #28]
 800da96:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800daa0:	edd7 7a00 	vldr	s15, [r7]
 800daa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800daae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dab2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dab6:	eeb0 0b47 	vmov.f64	d0, d7
 800daba:	f000 fe9d 	bl	800e7f8 <sin>
 800dabe:	eeb0 7b40 	vmov.f64	d7, d0
 800dac2:	ee28 6b07 	vmul.f64	d6, d8, d7
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800dacc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dad0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dad4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	edc3 7a02 	vstr	s15, [r3, #8]
	(s->v_out)=   s->amplitude* 		  s->omega*cos(s->omega*t + s->phi);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	ed93 7a07 	vldr	s14, [r3, #28]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800daea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daee:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800daf8:	edd7 7a00 	vldr	s15, [r7]
 800dafc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800db06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800db0e:	eeb0 0b47 	vmov.f64	d0, d7
 800db12:	f000 fded 	bl	800e6f0 <cos>
 800db16:	eeb0 7b40 	vmov.f64	d7, d0
 800db1a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800db1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	edc3 7a03 	vstr	s15, [r3, #12]
	(s->a_out)= - s->amplitude* s->omega*s->omega*sin(s->omega*t + s->phi);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	edd3 7a07 	vldr	s15, [r3, #28]
 800db2e:	eeb1 7a67 	vneg.f32	s14, s15
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800db38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800db42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db46:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800db50:	edd7 7a00 	vldr	s15, [r7]
 800db54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800db5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800db66:	eeb0 0b47 	vmov.f64	d0, d7
 800db6a:	f000 fe45 	bl	800e7f8 <sin>
 800db6e:	eeb0 7b40 	vmov.f64	d7, d0
 800db72:	ee28 7b07 	vmul.f64	d7, d8, d7
 800db76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	edc3 7a04 	vstr	s15, [r3, #16]

}
 800db80:	bf00      	nop
 800db82:	3708      	adds	r7, #8
 800db84:	46bd      	mov	sp, r7
 800db86:	ecbd 8b02 	vpop	{d8}
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <SinoidGenerate>:

static void SinoidGenerate(TRAJ_GEN *traj,float t)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	ed87 0a00 	vstr	s0, [r7]
	__SinoidGenerate(&(traj->sinoid),t);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800db9e:	ed97 0a00 	vldr	s0, [r7]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7ff ff6c 	bl	800da80 <__SinoidGenerate>
	 traj->x_out = traj->sinoid.x_out;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 2350 	ldr.w	r2, [r3, #848]	; 0x350
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	631a      	str	r2, [r3, #48]	; 0x30
	 traj->v_out = traj->sinoid.v_out;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	635a      	str	r2, [r3, #52]	; 0x34
	 traj->a_out = traj->sinoid.a_out;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 2358 	ldr.w	r2, [r3, #856]	; 0x358
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	639a      	str	r2, [r3, #56]	; 0x38
}
 800dbc6:	bf00      	nop
 800dbc8:	3708      	adds	r7, #8
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
	...

0800dbd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dbd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dc08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dbd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dbd6:	e003      	b.n	800dbe0 <LoopCopyDataInit>

0800dbd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dbd8:	4b0c      	ldr	r3, [pc, #48]	; (800dc0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dbda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dbdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800dbde:	3104      	adds	r1, #4

0800dbe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800dbe0:	480b      	ldr	r0, [pc, #44]	; (800dc10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800dbe2:	4b0c      	ldr	r3, [pc, #48]	; (800dc14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dbe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dbe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dbe8:	d3f6      	bcc.n	800dbd8 <CopyDataInit>
  ldr  r2, =_sbss
 800dbea:	4a0b      	ldr	r2, [pc, #44]	; (800dc18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dbec:	e002      	b.n	800dbf4 <LoopFillZerobss>

0800dbee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dbee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dbf0:	f842 3b04 	str.w	r3, [r2], #4

0800dbf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dbf4:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dbf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dbf8:	d3f9      	bcc.n	800dbee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800dbfa:	f7fb f9f9 	bl	8008ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dbfe:	f001 fdc9 	bl	800f794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dc02:	f7fa fbdf 	bl	80083c4 <main>
  bx  lr    
 800dc06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dc08:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800dc0c:	08014bb0 	.word	0x08014bb0
  ldr  r0, =_sdata
 800dc10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800dc14:	20000a3c 	.word	0x20000a3c
  ldr  r2, =_sbss
 800dc18:	20000a3c 	.word	0x20000a3c
  ldr  r3, = _ebss
 800dc1c:	2000ecb4 	.word	0x2000ecb4

0800dc20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dc20:	e7fe      	b.n	800dc20 <ADC_IRQHandler>
	...

0800dc24 <setup>:
float astep=0;
int aa=0;
uint16_t minitem[2];
static uint32_t DummyByte[] = { 0xFFFFFFFF};
/*Called once in the beginning*/
void setup() {
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0

	/* 1000Hz control loop*/
	setPeriodControlLoop(1);
 800dc28:	2001      	movs	r0, #1
 800dc2a:	f7fd fe39 	bl	800b8a0 <setPeriodControlLoop>

	/* 50Hz serial display loop*/
	setPeriodSendLoop(20);
 800dc2e:	2014      	movs	r0, #20
 800dc30:	f7fd fe46 	bl	800b8c0 <setPeriodSendLoop>

	/*Configure the pump port and sensor parameter of the sink*/
	pneudrive.pSource.attach(1,BUILTIN_ANA_IN_NUM+5);
 800dc34:	2215      	movs	r2, #21
 800dc36:	2101      	movs	r1, #1
 800dc38:	4840      	ldr	r0, [pc, #256]	; (800dd3c <setup+0x118>)
 800dc3a:	f7fd fb59 	bl	800b2f0 <_ZN15PRESSURE_SOURCE6attachEii>
	pneudrive.pSource.pressureSensor.setSensorRange_GaugePa(sensorVmin, sensorVmax, sensorPmin, sensorPmax);
 800dc3e:	4b40      	ldr	r3, [pc, #256]	; (800dd40 <setup+0x11c>)
 800dc40:	edd3 7a00 	vldr	s15, [r3]
 800dc44:	4b3f      	ldr	r3, [pc, #252]	; (800dd44 <setup+0x120>)
 800dc46:	ed93 7a00 	vldr	s14, [r3]
 800dc4a:	4b3f      	ldr	r3, [pc, #252]	; (800dd48 <setup+0x124>)
 800dc4c:	edd3 6a00 	vldr	s13, [r3]
 800dc50:	4b3e      	ldr	r3, [pc, #248]	; (800dd4c <setup+0x128>)
 800dc52:	ed93 6a00 	vldr	s12, [r3]
 800dc56:	eef0 1a46 	vmov.f32	s3, s12
 800dc5a:	eeb0 1a66 	vmov.f32	s2, s13
 800dc5e:	eef0 0a47 	vmov.f32	s1, s14
 800dc62:	eeb0 0a67 	vmov.f32	s0, s15
 800dc66:	483a      	ldr	r0, [pc, #232]	; (800dd50 <setup+0x12c>)
 800dc68:	f7fd faf6 	bl	800b258 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
	pneudrive.pSource.stop();
 800dc6c:	4833      	ldr	r0, [pc, #204]	; (800dd3c <setup+0x118>)
 800dc6e:	f7fd fbc2 	bl	800b3f6 <_ZN15PRESSURE_SOURCE4stopEv>

	pneudrive.pSink.attach(0,BUILTIN_ANA_IN_NUM+3);
 800dc72:	2213      	movs	r2, #19
 800dc74:	2100      	movs	r1, #0
 800dc76:	4837      	ldr	r0, [pc, #220]	; (800dd54 <setup+0x130>)
 800dc78:	f7fd fb3a 	bl	800b2f0 <_ZN15PRESSURE_SOURCE6attachEii>
	pneudrive.pSink.pressureSensor.setSensorRange_GaugePa(sensorVmin, sensorVmax, sensorPmin, sensorPmax);
 800dc7c:	4b30      	ldr	r3, [pc, #192]	; (800dd40 <setup+0x11c>)
 800dc7e:	edd3 7a00 	vldr	s15, [r3]
 800dc82:	4b30      	ldr	r3, [pc, #192]	; (800dd44 <setup+0x120>)
 800dc84:	ed93 7a00 	vldr	s14, [r3]
 800dc88:	4b2f      	ldr	r3, [pc, #188]	; (800dd48 <setup+0x124>)
 800dc8a:	edd3 6a00 	vldr	s13, [r3]
 800dc8e:	4b2f      	ldr	r3, [pc, #188]	; (800dd4c <setup+0x128>)
 800dc90:	ed93 6a00 	vldr	s12, [r3]
 800dc94:	eef0 1a46 	vmov.f32	s3, s12
 800dc98:	eeb0 1a66 	vmov.f32	s2, s13
 800dc9c:	eef0 0a47 	vmov.f32	s1, s14
 800dca0:	eeb0 0a67 	vmov.f32	s0, s15
 800dca4:	482c      	ldr	r0, [pc, #176]	; (800dd58 <setup+0x134>)
 800dca6:	f7fd fad7 	bl	800b258 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
	pneudrive.pSink.stop();
 800dcaa:	482a      	ldr	r0, [pc, #168]	; (800dd54 <setup+0x130>)
 800dcac:	f7fd fba3 	bl	800b3f6 <_ZN15PRESSURE_SOURCE4stopEv>

	/*Attach the valves and pressure sensors of chamber 0 to corresponding ports.
	 *Set the pressure sensor range. The parameter list are (vMin, vMax, pMin, pMax).
	 * vMin vMax have the unit of voltage. pMin pMax use the gauge pressure, has the unit of Pa. For example, atmosphere is 0, and vacuum is -101325.*/
	pneudrive.chambers[0]->attach(0,1,BUILTIN_ANA_IN_NUM+1);
 800dcb0:	4b2a      	ldr	r3, [pc, #168]	; (800dd5c <setup+0x138>)
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	6818      	ldr	r0, [r3, #0]
 800dcb6:	2311      	movs	r3, #17
 800dcb8:	2201      	movs	r2, #1
 800dcba:	2100      	movs	r1, #0
 800dcbc:	f7fc ff86 	bl	800abcc <_ZN7CHAMBER6attachEiii>
	pneudrive.chambers[0]->pressureSensor.setSensorRange_GaugePa(sensorVmin, sensorVmax, sensorPmin, sensorPmax);
 800dcc0:	4b26      	ldr	r3, [pc, #152]	; (800dd5c <setup+0x138>)
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcca:	4b1d      	ldr	r3, [pc, #116]	; (800dd40 <setup+0x11c>)
 800dccc:	edd3 7a00 	vldr	s15, [r3]
 800dcd0:	4b1c      	ldr	r3, [pc, #112]	; (800dd44 <setup+0x120>)
 800dcd2:	ed93 7a00 	vldr	s14, [r3]
 800dcd6:	4b1c      	ldr	r3, [pc, #112]	; (800dd48 <setup+0x124>)
 800dcd8:	edd3 6a00 	vldr	s13, [r3]
 800dcdc:	4b1b      	ldr	r3, [pc, #108]	; (800dd4c <setup+0x128>)
 800dcde:	ed93 6a00 	vldr	s12, [r3]
 800dce2:	eef0 1a46 	vmov.f32	s3, s12
 800dce6:	eeb0 1a66 	vmov.f32	s2, s13
 800dcea:	eef0 0a47 	vmov.f32	s1, s14
 800dcee:	eeb0 0a67 	vmov.f32	s0, s15
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	f7fd fab0 	bl	800b258 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>

	pneudrive.chambers[0]->setValveOpeningLimit(-0.35,-0.1,0.1,0.15);
 800dcf8:	4b18      	ldr	r3, [pc, #96]	; (800dd5c <setup+0x138>)
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	eddf 1a18 	vldr	s3, [pc, #96]	; 800dd60 <setup+0x13c>
 800dd02:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800dd64 <setup+0x140>
 800dd06:	eddf 0a18 	vldr	s1, [pc, #96]	; 800dd68 <setup+0x144>
 800dd0a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800dd6c <setup+0x148>
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fd f902 	bl	800af18 <_ZN7CHAMBER20setValveOpeningLimitEffff>

	pneudrive.chambers[0]->writeOpening(0);
 800dd14:	4b11      	ldr	r3, [pc, #68]	; (800dd5c <setup+0x138>)
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800dd70 <setup+0x14c>
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fd f88c 	bl	800ae3c <_ZN7CHAMBER12writeOpeningEf>
	pneudrive.writeFrequency(30);
 800dd24:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800dd28:	480c      	ldr	r0, [pc, #48]	; (800dd5c <setup+0x138>)
 800dd2a:	f7fd fc25 	bl	800b578 <_ZN9PNEUDRIVE14writeFrequencyEf>
	InitTraj(&myTrajectory,1);
 800dd2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dd32:	4810      	ldr	r0, [pc, #64]	; (800dd74 <setup+0x150>)
 800dd34:	f7ff fd2c 	bl	800d790 <InitTraj>
}
 800dd38:	bf00      	nop
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	2000151c 	.word	0x2000151c
 800dd40:	200003b0 	.word	0x200003b0
 800dd44:	200003b4 	.word	0x200003b4
 800dd48:	20001598 	.word	0x20001598
 800dd4c:	200003b8 	.word	0x200003b8
 800dd50:	20001528 	.word	0x20001528
 800dd54:	20001554 	.word	0x20001554
 800dd58:	20001560 	.word	0x20001560
 800dd5c:	20001510 	.word	0x20001510
 800dd60:	3e19999a 	.word	0x3e19999a
 800dd64:	3dcccccd 	.word	0x3dcccccd
 800dd68:	bdcccccd 	.word	0xbdcccccd
 800dd6c:	beb33333 	.word	0xbeb33333
 800dd70:	00000000 	.word	0x00000000
 800dd74:	2000159c 	.word	0x2000159c

0800dd78 <loop>:

/*Running at a default frequency of 1KHz, altered by changing CONTROL_FREQUENCY in the file UserConfig.h*/
void loop() {
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af02      	add	r7, sp, #8

	uint16_t miniread;
	pneudrive.pSource.readPressure();
 800dd7e:	488d      	ldr	r0, [pc, #564]	; (800dfb4 <loop+0x23c>)
 800dd80:	f7fd fb46 	bl	800b410 <_ZN15PRESSURE_SOURCE12readPressureEv>
	pneudrive.pSink.readPressure();
 800dd84:	488c      	ldr	r0, [pc, #560]	; (800dfb8 <loop+0x240>)
 800dd86:	f7fd fb43 	bl	800b410 <_ZN15PRESSURE_SOURCE12readPressureEv>

	/*Update sensor data of chamber 0*/
	ppresure=pneudrive.readPressure(0);
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	488b      	ldr	r0, [pc, #556]	; (800dfbc <loop+0x244>)
 800dd8e:	f7fd fc2b 	bl	800b5e8 <_ZN9PNEUDRIVE12readPressureEi>
 800dd92:	eef0 7a40 	vmov.f32	s15, s0
 800dd96:	4b8a      	ldr	r3, [pc, #552]	; (800dfc0 <loop+0x248>)
 800dd98:	edc3 7a00 	vstr	s15, [r3]

	SPI6_CS_GPIO_Port->BSRR = (uint32_t) SPI6_CS_Pin << 16U;
 800dd9c:	4b89      	ldr	r3, [pc, #548]	; (800dfc4 <loop+0x24c>)
 800dd9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dda2:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi6, (uint8_t *) DummyByte, (uint8_t *) minitem, 1, 1);
 800dda4:	2301      	movs	r3, #1
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	2301      	movs	r3, #1
 800ddaa:	4a87      	ldr	r2, [pc, #540]	; (800dfc8 <loop+0x250>)
 800ddac:	4987      	ldr	r1, [pc, #540]	; (800dfcc <loop+0x254>)
 800ddae:	4888      	ldr	r0, [pc, #544]	; (800dfd0 <loop+0x258>)
 800ddb0:	f7f5 fea6 	bl	8003b00 <HAL_SPI_TransmitReceive>
	SPI6_CS_GPIO_Port->BSRR = (uint32_t) SPI6_CS_Pin ;
 800ddb4:	4b83      	ldr	r3, [pc, #524]	; (800dfc4 <loop+0x24c>)
 800ddb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ddba:	619a      	str	r2, [r3, #24]
	miniread = (uint16_t)(((int16_t) (minitem[0] & 0x7FFF))>>3);
 800ddbc:	4b82      	ldr	r3, [pc, #520]	; (800dfc8 <loop+0x250>)
 800ddbe:	881b      	ldrh	r3, [r3, #0]
 800ddc0:	10db      	asrs	r3, r3, #3
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddc8:	80fb      	strh	r3, [r7, #6]
	laserVol = miniread;
 800ddca:	88fb      	ldrh	r3, [r7, #6]
 800ddcc:	ee07 3a90 	vmov	s15, r3
 800ddd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddd4:	4b7f      	ldr	r3, [pc, #508]	; (800dfd4 <loop+0x25c>)
 800ddd6:	edc3 7a00 	vstr	s15, [r3]
	laserPos = laserVol/4096.0f*360-laserPosOffset;
 800ddda:	4b7e      	ldr	r3, [pc, #504]	; (800dfd4 <loop+0x25c>)
 800dddc:	ed93 7a00 	vldr	s14, [r3]
 800dde0:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800dfd8 <loop+0x260>
 800dde4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dde8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800dfdc <loop+0x264>
 800ddec:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ddf0:	4b7b      	ldr	r3, [pc, #492]	; (800dfe0 <loop+0x268>)
 800ddf2:	edd3 7a00 	vldr	s15, [r3]
 800ddf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddfa:	4b7a      	ldr	r3, [pc, #488]	; (800dfe4 <loop+0x26c>)
 800ddfc:	edc3 7a00 	vstr	s15, [r3]

//	laserVol=AnalogRead(BUILTIN_ANA_IN_NUM);
//	laserPos=laserVol/5.0*0.07+0.065-laserPosOffset;

	sensorVol=AnalogRead(BUILTIN_ANA_IN_NUM+2);
 800de00:	2012      	movs	r0, #18
 800de02:	f7fd fc4a 	bl	800b69a <AnalogRead>
 800de06:	eef0 7a40 	vmov.f32	s15, s0
 800de0a:	4b77      	ldr	r3, [pc, #476]	; (800dfe8 <loop+0x270>)
 800de0c:	edc3 7a00 	vstr	s15, [r3]
	sensorPos=sensorVol2PosRotary(sensorVol)-sensorPosOffset;
 800de10:	4b75      	ldr	r3, [pc, #468]	; (800dfe8 <loop+0x270>)
 800de12:	edd3 7a00 	vldr	s15, [r3]
 800de16:	eeb0 0a67 	vmov.f32	s0, s15
 800de1a:	f000 fb59 	bl	800e4d0 <_Z19sensorVol2PosRotaryf>
 800de1e:	eeb0 7a40 	vmov.f32	s14, s0
 800de22:	4b72      	ldr	r3, [pc, #456]	; (800dfec <loop+0x274>)
 800de24:	edd3 7a00 	vldr	s15, [r3]
 800de28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de2c:	4b70      	ldr	r3, [pc, #448]	; (800dff0 <loop+0x278>)
 800de2e:	edc3 7a00 	vstr	s15, [r3]

	/*customized switch flag*/
	if (loop_gogogo) {
 800de32:	4b70      	ldr	r3, [pc, #448]	; (800dff4 <loop+0x27c>)
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	f000 80b8 	beq.w	800dfac <loop+0x234>

		/*maintain the upper stream and lower stream pressure*/
		pneudrive.pSource.maintainPressure(pup,pup+10000);
 800de3c:	4b6e      	ldr	r3, [pc, #440]	; (800dff8 <loop+0x280>)
 800de3e:	edd3 6a00 	vldr	s13, [r3]
 800de42:	4b6d      	ldr	r3, [pc, #436]	; (800dff8 <loop+0x280>)
 800de44:	edd3 7a00 	vldr	s15, [r3]
 800de48:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800dffc <loop+0x284>
 800de4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de50:	eef0 0a67 	vmov.f32	s1, s15
 800de54:	eeb0 0a66 	vmov.f32	s0, s13
 800de58:	4856      	ldr	r0, [pc, #344]	; (800dfb4 <loop+0x23c>)
 800de5a:	f7fd fa79 	bl	800b350 <_ZN15PRESSURE_SOURCE16maintainPressureEff>

		/*maintain a downsteam pressure if necessary*/
	//	pneudrive.pSink.maintainPressure(pdown,pdown-10000);

		if(aa==1){
 800de5e:	4b68      	ldr	r3, [pc, #416]	; (800e000 <loop+0x288>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b01      	cmp	r3, #1
 800de64:	f040 8099 	bne.w	800df9a <loop+0x222>
			TrajGen(&myTrajectory, (int)(millis()-CommandTime));
 800de68:	f7fd fc9a 	bl	800b7a0 <millis>
 800de6c:	4602      	mov	r2, r0
 800de6e:	4b65      	ldr	r3, [pc, #404]	; (800e004 <loop+0x28c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	4619      	mov	r1, r3
 800de76:	4864      	ldr	r0, [pc, #400]	; (800e008 <loop+0x290>)
 800de78:	f7ff fd04 	bl	800d884 <TrajGen>

			if(stepCommand==1)
 800de7c:	4b63      	ldr	r3, [pc, #396]	; (800e00c <loop+0x294>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d104      	bne.n	800de8e <loop+0x116>
				posCommand=astep;
 800de84:	4b62      	ldr	r3, [pc, #392]	; (800e010 <loop+0x298>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a62      	ldr	r2, [pc, #392]	; (800e014 <loop+0x29c>)
 800de8a:	6013      	str	r3, [r2, #0]
 800de8c:	e003      	b.n	800de96 <loop+0x11e>
			else
				posCommand=myTrajectory.x_out;
 800de8e:	4b5e      	ldr	r3, [pc, #376]	; (800e008 <loop+0x290>)
 800de90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de92:	4a60      	ldr	r2, [pc, #384]	; (800e014 <loop+0x29c>)
 800de94:	6013      	str	r3, [r2, #0]

			pre[0]=sensorPos2PressureRotary(posCommand)*0.5;
 800de96:	4b5f      	ldr	r3, [pc, #380]	; (800e014 <loop+0x29c>)
 800de98:	edd3 7a00 	vldr	s15, [r3]
 800de9c:	eeb0 0a67 	vmov.f32	s0, s15
 800dea0:	f000 fb7e 	bl	800e5a0 <_Z24sensorPos2PressureRotaryf>
 800dea4:	eeb0 7a40 	vmov.f32	s14, s0
 800dea8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800deac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb0:	4b59      	ldr	r3, [pc, #356]	; (800e018 <loop+0x2a0>)
 800deb2:	edc3 7a00 	vstr	s15, [r3]
			ds=posCommand-sensorPos;
 800deb6:	4b57      	ldr	r3, [pc, #348]	; (800e014 <loop+0x29c>)
 800deb8:	ed93 7a00 	vldr	s14, [r3]
 800debc:	4b4c      	ldr	r3, [pc, #304]	; (800dff0 <loop+0x278>)
 800debe:	edd3 7a00 	vldr	s15, [r3]
 800dec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dec6:	4b55      	ldr	r3, [pc, #340]	; (800e01c <loop+0x2a4>)
 800dec8:	edc3 7a00 	vstr	s15, [r3]

			//localKp=  145542909.0f/(sensorPos*1000+19)/(1.803281f-sensorPos*780.64f);
			pre[1]= myKp*ds*1000;
 800decc:	4b54      	ldr	r3, [pc, #336]	; (800e020 <loop+0x2a8>)
 800dece:	ed93 7a00 	vldr	s14, [r3]
 800ded2:	4b52      	ldr	r3, [pc, #328]	; (800e01c <loop+0x2a4>)
 800ded4:	edd3 7a00 	vldr	s15, [r3]
 800ded8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dedc:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800e024 <loop+0x2ac>
 800dee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dee4:	4b4c      	ldr	r3, [pc, #304]	; (800e018 <loop+0x2a0>)
 800dee6:	edc3 7a01 	vstr	s15, [r3, #4]

			//pre[1]=CONSTRAIN(pre[1],-30000,30000);

			dPressureI= dPressureI + ds*1000;
 800deea:	4b4c      	ldr	r3, [pc, #304]	; (800e01c <loop+0x2a4>)
 800deec:	edd3 7a00 	vldr	s15, [r3]
 800def0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800e024 <loop+0x2ac>
 800def4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800def8:	4b4b      	ldr	r3, [pc, #300]	; (800e028 <loop+0x2b0>)
 800defa:	edd3 7a00 	vldr	s15, [r3]
 800defe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df02:	4b49      	ldr	r3, [pc, #292]	; (800e028 <loop+0x2b0>)
 800df04:	edc3 7a00 	vstr	s15, [r3]
			pre[2]=CONSTRAIN(myKi*dPressureI,-20000,20000);
 800df08:	4b48      	ldr	r3, [pc, #288]	; (800e02c <loop+0x2b4>)
 800df0a:	ed93 7a00 	vldr	s14, [r3]
 800df0e:	4b46      	ldr	r3, [pc, #280]	; (800e028 <loop+0x2b0>)
 800df10:	edd3 7a00 	vldr	s15, [r3]
 800df14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df18:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800e030 <loop+0x2b8>
 800df1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df24:	d502      	bpl.n	800df2c <loop+0x1b4>
 800df26:	eddf 7a42 	vldr	s15, [pc, #264]	; 800e030 <loop+0x2b8>
 800df2a:	e019      	b.n	800df60 <loop+0x1e8>
 800df2c:	4b3f      	ldr	r3, [pc, #252]	; (800e02c <loop+0x2b4>)
 800df2e:	ed93 7a00 	vldr	s14, [r3]
 800df32:	4b3d      	ldr	r3, [pc, #244]	; (800e028 <loop+0x2b0>)
 800df34:	edd3 7a00 	vldr	s15, [r3]
 800df38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df3c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800e034 <loop+0x2bc>
 800df40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df48:	dd02      	ble.n	800df50 <loop+0x1d8>
 800df4a:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800e034 <loop+0x2bc>
 800df4e:	e007      	b.n	800df60 <loop+0x1e8>
 800df50:	4b36      	ldr	r3, [pc, #216]	; (800e02c <loop+0x2b4>)
 800df52:	ed93 7a00 	vldr	s14, [r3]
 800df56:	4b34      	ldr	r3, [pc, #208]	; (800e028 <loop+0x2b0>)
 800df58:	edd3 7a00 	vldr	s15, [r3]
 800df5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df60:	4b2d      	ldr	r3, [pc, #180]	; (800e018 <loop+0x2a0>)
 800df62:	edc3 7a02 	vstr	s15, [r3, #8]

			preCommand=pre[0]+pre[1]+pre[2];
 800df66:	4b2c      	ldr	r3, [pc, #176]	; (800e018 <loop+0x2a0>)
 800df68:	ed93 7a00 	vldr	s14, [r3]
 800df6c:	4b2a      	ldr	r3, [pc, #168]	; (800e018 <loop+0x2a0>)
 800df6e:	edd3 7a01 	vldr	s15, [r3, #4]
 800df72:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df76:	4b28      	ldr	r3, [pc, #160]	; (800e018 <loop+0x2a0>)
 800df78:	edd3 7a02 	vldr	s15, [r3, #8]
 800df7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df80:	4b2d      	ldr	r3, [pc, #180]	; (800e038 <loop+0x2c0>)
 800df82:	edc3 7a00 	vstr	s15, [r3]
			pneudrive.writePressure(0,preCommand);
 800df86:	4b2c      	ldr	r3, [pc, #176]	; (800e038 <loop+0x2c0>)
 800df88:	edd3 7a00 	vldr	s15, [r3]
 800df8c:	eeb0 0a67 	vmov.f32	s0, s15
 800df90:	2100      	movs	r1, #0
 800df92:	480a      	ldr	r0, [pc, #40]	; (800dfbc <loop+0x244>)
 800df94:	f7fd fb3d 	bl	800b612 <_ZN9PNEUDRIVE13writePressureEif>
		}


	}

}
 800df98:	e008      	b.n	800dfac <loop+0x234>
			pneudrive.writePressure(0,preCommand);
 800df9a:	4b27      	ldr	r3, [pc, #156]	; (800e038 <loop+0x2c0>)
 800df9c:	edd3 7a00 	vldr	s15, [r3]
 800dfa0:	eeb0 0a67 	vmov.f32	s0, s15
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	4805      	ldr	r0, [pc, #20]	; (800dfbc <loop+0x244>)
 800dfa8:	f7fd fb33 	bl	800b612 <_ZN9PNEUDRIVE13writePressureEif>
}
 800dfac:	bf00      	nop
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	2000151c 	.word	0x2000151c
 800dfb8:	20001554 	.word	0x20001554
 800dfbc:	20001510 	.word	0x20001510
 800dfc0:	20001920 	.word	0x20001920
 800dfc4:	40020c00 	.word	0x40020c00
 800dfc8:	20001968 	.word	0x20001968
 800dfcc:	200003cc 	.word	0x200003cc
 800dfd0:	20009c1c 	.word	0x20009c1c
 800dfd4:	2000193c 	.word	0x2000193c
 800dfd8:	45800000 	.word	0x45800000
 800dfdc:	43b40000 	.word	0x43b40000
 800dfe0:	20001950 	.word	0x20001950
 800dfe4:	20001940 	.word	0x20001940
 800dfe8:	20001944 	.word	0x20001944
 800dfec:	2000194c 	.word	0x2000194c
 800dff0:	20001948 	.word	0x20001948
 800dff4:	20001594 	.word	0x20001594
 800dff8:	200003bc 	.word	0x200003bc
 800dffc:	461c4000 	.word	0x461c4000
 800e000:	20001964 	.word	0x20001964
 800e004:	20001938 	.word	0x20001938
 800e008:	2000159c 	.word	0x2000159c
 800e00c:	2000195c 	.word	0x2000195c
 800e010:	20001960 	.word	0x20001960
 800e014:	20001958 	.word	0x20001958
 800e018:	2000192c 	.word	0x2000192c
 800e01c:	2000191c 	.word	0x2000191c
 800e020:	200003c4 	.word	0x200003c4
 800e024:	447a0000 	.word	0x447a0000
 800e028:	20001924 	.word	0x20001924
 800e02c:	200003c8 	.word	0x200003c8
 800e030:	c69c4000 	.word	0xc69c4000
 800e034:	469c4000 	.word	0x469c4000
 800e038:	20001954 	.word	0x20001954

0800e03c <serialDisplay>:

/*Running at a default frequency of 20KHz, altered by changing DISPLAY_FREQUENCY in the file UserConfig.h*/
void serialDisplay() {
 800e03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e040:	ed2d 8b02 	vpush	{d8}
 800e044:	b090      	sub	sp, #64	; 0x40
 800e046:	af10      	add	r7, sp, #64	; 0x40
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e048:	f7fd fbaa 	bl	800b7a0 <millis>
 800e04c:	4680      	mov	r8, r0
			millis(),
			(int)(pneudrive.pSource.pressure/1000),
 800e04e:	4b4c      	ldr	r3, [pc, #304]	; (800e180 <serialDisplay+0x144>)
 800e050:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800e054:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800e184 <serialDisplay+0x148>
 800e058:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e05c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
			(int)(pneudrive.pSink.pressure/1000),
 800e060:	4b47      	ldr	r3, [pc, #284]	; (800e180 <serialDisplay+0x144>)
 800e062:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800e066:	eddf 6a47 	vldr	s13, [pc, #284]	; 800e184 <serialDisplay+0x148>
 800e06a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e06e:	eefd 8ae7 	vcvt.s32.f32	s17, s15
			(int)(pneudrive.pressureCommands[0]/1000),
 800e072:	4b43      	ldr	r3, [pc, #268]	; (800e180 <serialDisplay+0x144>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	ed93 7a00 	vldr	s14, [r3]
 800e07a:	eddf 6a42 	vldr	s13, [pc, #264]	; 800e184 <serialDisplay+0x148>
 800e07e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e086:	ee17 4a90 	vmov	r4, s15
			(int)(pneudrive.readPressure(0)/1000),
 800e08a:	2100      	movs	r1, #0
 800e08c:	483c      	ldr	r0, [pc, #240]	; (800e180 <serialDisplay+0x144>)
 800e08e:	f7fd faab 	bl	800b5e8 <_ZN9PNEUDRIVE12readPressureEi>
 800e092:	eef0 6a40 	vmov.f32	s13, s0
 800e096:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800e184 <serialDisplay+0x148>
 800e09a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e09e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0a2:	ee17 2a90 	vmov	r2, s15
			posCommand*1000,
 800e0a6:	4b38      	ldr	r3, [pc, #224]	; (800e188 <serialDisplay+0x14c>)
 800e0a8:	edd3 7a00 	vldr	s15, [r3]
 800e0ac:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800e184 <serialDisplay+0x148>
 800e0b0:	ee67 7a87 	vmul.f32	s15, s15, s14
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e0b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			(int)(laserVol*1000),
 800e0b8:	4b34      	ldr	r3, [pc, #208]	; (800e18c <serialDisplay+0x150>)
 800e0ba:	edd3 6a00 	vldr	s13, [r3]
 800e0be:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800e184 <serialDisplay+0x148>
 800e0c2:	ee66 6a86 	vmul.f32	s13, s13, s12
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e0c6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800e0ca:	ee16 1a90 	vmov	r1, s13
			laserPos*1000,
 800e0ce:	4b30      	ldr	r3, [pc, #192]	; (800e190 <serialDisplay+0x154>)
 800e0d0:	edd3 6a00 	vldr	s13, [r3]
 800e0d4:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 800e184 <serialDisplay+0x148>
 800e0d8:	ee66 6a86 	vmul.f32	s13, s13, s12
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e0dc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			(int)(sensorVol*1000),
 800e0e0:	4b2c      	ldr	r3, [pc, #176]	; (800e194 <serialDisplay+0x158>)
 800e0e2:	edd3 5a00 	vldr	s11, [r3]
 800e0e6:	ed9f 5a27 	vldr	s10, [pc, #156]	; 800e184 <serialDisplay+0x148>
 800e0ea:	ee65 5a85 	vmul.f32	s11, s11, s10
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e0ee:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 800e0f2:	ee15 0a90 	vmov	r0, s11
			sensorPos*1000,
 800e0f6:	4b28      	ldr	r3, [pc, #160]	; (800e198 <serialDisplay+0x15c>)
 800e0f8:	edd3 5a00 	vldr	s11, [r3]
 800e0fc:	ed9f 5a21 	vldr	s10, [pc, #132]	; 800e184 <serialDisplay+0x148>
 800e100:	ee65 5a85 	vmul.f32	s11, s11, s10
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e104:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			(int)(pre[0]/1000),
 800e108:	4b24      	ldr	r3, [pc, #144]	; (800e19c <serialDisplay+0x160>)
 800e10a:	ed93 4a00 	vldr	s8, [r3]
 800e10e:	eddf 3a1d 	vldr	s7, [pc, #116]	; 800e184 <serialDisplay+0x148>
 800e112:	eec4 4a23 	vdiv.f32	s9, s8, s7
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e116:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 800e11a:	ee14 5a90 	vmov	r5, s9
			(int)(pre[1]/1000),
 800e11e:	4b1f      	ldr	r3, [pc, #124]	; (800e19c <serialDisplay+0x160>)
 800e120:	ed93 4a01 	vldr	s8, [r3, #4]
 800e124:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e184 <serialDisplay+0x148>
 800e128:	eec4 4a23 	vdiv.f32	s9, s8, s7
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e12c:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 800e130:	ee14 6a90 	vmov	r6, s9
			(int)(pre[2]/1000));
 800e134:	4b19      	ldr	r3, [pc, #100]	; (800e19c <serialDisplay+0x160>)
 800e136:	ed93 4a02 	vldr	s8, [r3, #8]
 800e13a:	eddf 3a12 	vldr	s7, [pc, #72]	; 800e184 <serialDisplay+0x148>
 800e13e:	eec4 4a23 	vdiv.f32	s9, s8, s7
	printf("%d %d %d %d %d %3.3f %d %3.3f %d %3.3f %d %d %d\r\n",
 800e142:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 800e146:	ee14 3a90 	vmov	r3, s9
 800e14a:	930e      	str	r3, [sp, #56]	; 0x38
 800e14c:	960d      	str	r6, [sp, #52]	; 0x34
 800e14e:	950c      	str	r5, [sp, #48]	; 0x30
 800e150:	ed8d 5b0a 	vstr	d5, [sp, #40]	; 0x28
 800e154:	9008      	str	r0, [sp, #32]
 800e156:	ed8d 6b06 	vstr	d6, [sp, #24]
 800e15a:	9104      	str	r1, [sp, #16]
 800e15c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e160:	9201      	str	r2, [sp, #4]
 800e162:	9400      	str	r4, [sp, #0]
 800e164:	ee18 3a90 	vmov	r3, s17
 800e168:	ee18 2a10 	vmov	r2, s16
 800e16c:	4641      	mov	r1, r8
 800e16e:	480c      	ldr	r0, [pc, #48]	; (800e1a0 <serialDisplay+0x164>)
 800e170:	f002 fa1a 	bl	80105a8 <iprintf>



}
 800e174:	bf00      	nop
 800e176:	46bd      	mov	sp, r7
 800e178:	ecbd 8b02 	vpop	{d8}
 800e17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e180:	20001510 	.word	0x20001510
 800e184:	447a0000 	.word	0x447a0000
 800e188:	20001958 	.word	0x20001958
 800e18c:	2000193c 	.word	0x2000193c
 800e190:	20001940 	.word	0x20001940
 800e194:	20001944 	.word	0x20001944
 800e198:	20001948 	.word	0x20001948
 800e19c:	2000192c 	.word	0x2000192c
 800e1a0:	080145f0 	.word	0x080145f0

0800e1a4 <serialReceiveCallback>:
  CommandSetCONTROLFREQUENCY_loopMS,
  CommandSetSENDFREQUENCY_sendMS,
  CommandSetLAST     /** just for determining number of commands in this list */
};
/*Callback function when serial port 3 receives commands with ending of "\r\n", the parameter is the pointer to the received string buffer*/
void serialReceiveCallback(char *pSerialCommandBuffer) {
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	ed2d 8b04 	vpush	{d8-d9}
 800e1aa:	b08e      	sub	sp, #56	; 0x38
 800e1ac:	af02      	add	r7, sp, #8
 800e1ae:	6078      	str	r0, [r7, #4]
	  {CommandSetSENDFREQUENCY_sendMS,   "sendMS"}};
	static char commandChar[50];
	static int chambernum=0;
	static float pCommand = 0;
	static float ulims[4];
	int recivedCommandStringCode=CommandSetUNKNOWN;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	//Read the received buffer with customized message. The first char means command type. The second number represents the interested chamber number. The third float number is the pressure command.
	sscanf((char *)pSerialCommandBuffer, "%s", commandChar);
 800e1b4:	4aa7      	ldr	r2, [pc, #668]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e1b6:	49a8      	ldr	r1, [pc, #672]	; (800e458 <serialReceiveCallback+0x2b4>)
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f002 faeb 	bl	8010794 <siscanf>
	for (int i = 0; i < (CommandSetLAST - 1); i++)
 800e1be:	2300      	movs	r3, #0
 800e1c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c4:	2b14      	cmp	r3, #20
 800e1c6:	dc1b      	bgt.n	800e200 <serialReceiveCallback+0x5c>
		if (0== strcmp((const char *) (commandChar),(const char *) (&mySerialCommandList[i].szString[0])))
 800e1c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ca:	4613      	mov	r3, r2
 800e1cc:	00db      	lsls	r3, r3, #3
 800e1ce:	1a9b      	subs	r3, r3, r2
 800e1d0:	00db      	lsls	r3, r3, #3
 800e1d2:	4aa2      	ldr	r2, [pc, #648]	; (800e45c <serialReceiveCallback+0x2b8>)
 800e1d4:	4413      	add	r3, r2
 800e1d6:	3304      	adds	r3, #4
 800e1d8:	4619      	mov	r1, r3
 800e1da:	489e      	ldr	r0, [pc, #632]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e1dc:	f7f2 f830 	bl	8000240 <strcmp>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d108      	bne.n	800e1f8 <serialReceiveCallback+0x54>
			recivedCommandStringCode=mySerialCommandList[i].iCode;
 800e1e6:	499d      	ldr	r1, [pc, #628]	; (800e45c <serialReceiveCallback+0x2b8>)
 800e1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	00db      	lsls	r3, r3, #3
 800e1ee:	1a9b      	subs	r3, r3, r2
 800e1f0:	00db      	lsls	r3, r3, #3
 800e1f2:	440b      	add	r3, r1
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < (CommandSetLAST - 1); i++)
 800e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1fe:	e7e0      	b.n	800e1c2 <serialReceiveCallback+0x1e>
	switch(recivedCommandStringCode){
 800e200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e202:	2b15      	cmp	r3, #21
 800e204:	f200 811c 	bhi.w	800e440 <serialReceiveCallback+0x29c>
 800e208:	a201      	add	r2, pc, #4	; (adr r2, 800e210 <serialReceiveCallback+0x6c>)
 800e20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20e:	bf00      	nop
 800e210:	0800e441 	.word	0x0800e441
 800e214:	0800e441 	.word	0x0800e441
 800e218:	0800e269 	.word	0x0800e269
 800e21c:	0800e281 	.word	0x0800e281
 800e220:	0800e28f 	.word	0x0800e28f
 800e224:	0800e29d 	.word	0x0800e29d
 800e228:	0800e2ab 	.word	0x0800e2ab
 800e22c:	0800e2b9 	.word	0x0800e2b9
 800e230:	0800e441 	.word	0x0800e441
 800e234:	0800e441 	.word	0x0800e441
 800e238:	0800e441 	.word	0x0800e441
 800e23c:	0800e441 	.word	0x0800e441
 800e240:	0800e2c7 	.word	0x0800e2c7
 800e244:	0800e2eb 	.word	0x0800e2eb
 800e248:	0800e2f3 	.word	0x0800e2f3
 800e24c:	0800e441 	.word	0x0800e441
 800e250:	0800e329 	.word	0x0800e329
 800e254:	0800e3a3 	.word	0x0800e3a3
 800e258:	0800e441 	.word	0x0800e441
 800e25c:	0800e3ab 	.word	0x0800e3ab
 800e260:	0800e411 	.word	0x0800e411
 800e264:	0800e429 	.word	0x0800e429
	case CommandSetVOLTAGE_v:

	  break;
	case CommandSetPRESSURE_p:
		//Only change the value of command, leaving the control part to the loop().
		sscanf(pSerialCommandBuffer, "%s %d %f", commandChar, &chambernum, &preCommand);
 800e268:	4b7d      	ldr	r3, [pc, #500]	; (800e460 <serialReceiveCallback+0x2bc>)
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	4b7d      	ldr	r3, [pc, #500]	; (800e464 <serialReceiveCallback+0x2c0>)
 800e26e:	4a79      	ldr	r2, [pc, #484]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e270:	497d      	ldr	r1, [pc, #500]	; (800e468 <serialReceiveCallback+0x2c4>)
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f002 fa8e 	bl	8010794 <siscanf>
		aa=0;
 800e278:	4b7c      	ldr	r3, [pc, #496]	; (800e46c <serialReceiveCallback+0x2c8>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	601a      	str	r2, [r3, #0]
	  break;
 800e27e:	e0e2      	b.n	800e446 <serialReceiveCallback+0x2a2>
	case CommandSetPRESSURE_pu:
			//Only change the value of command, leaving the control part to the loop().
			sscanf(pSerialCommandBuffer, "%s %f", commandChar,&pup);
 800e280:	4b7b      	ldr	r3, [pc, #492]	; (800e470 <serialReceiveCallback+0x2cc>)
 800e282:	4a74      	ldr	r2, [pc, #464]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e284:	497b      	ldr	r1, [pc, #492]	; (800e474 <serialReceiveCallback+0x2d0>)
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f002 fa84 	bl	8010794 <siscanf>
		  break;
 800e28c:	e0db      	b.n	800e446 <serialReceiveCallback+0x2a2>
	case CommandSetPRESSURE_pd:
			//Only change the value of command, leaving the control part to the loop().
		  sscanf(pSerialCommandBuffer, "%s %f", commandChar,&pdown);
 800e28e:	4b7a      	ldr	r3, [pc, #488]	; (800e478 <serialReceiveCallback+0x2d4>)
 800e290:	4a70      	ldr	r2, [pc, #448]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e292:	4978      	ldr	r1, [pc, #480]	; (800e474 <serialReceiveCallback+0x2d0>)
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f002 fa7d 	bl	8010794 <siscanf>
		  break;
 800e29a:	e0d4      	b.n	800e446 <serialReceiveCallback+0x2a2>
	case CommandSetKP_kp:
		sscanf(pSerialCommandBuffer, "%s %f", commandChar,&myKp);
 800e29c:	4b77      	ldr	r3, [pc, #476]	; (800e47c <serialReceiveCallback+0x2d8>)
 800e29e:	4a6d      	ldr	r2, [pc, #436]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e2a0:	4974      	ldr	r1, [pc, #464]	; (800e474 <serialReceiveCallback+0x2d0>)
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f002 fa76 	bl	8010794 <siscanf>
	  break;
 800e2a8:	e0cd      	b.n	800e446 <serialReceiveCallback+0x2a2>

	case CommandSetKI_ki:
		sscanf(pSerialCommandBuffer, "%s %f", commandChar,&myKi);
 800e2aa:	4b75      	ldr	r3, [pc, #468]	; (800e480 <serialReceiveCallback+0x2dc>)
 800e2ac:	4a69      	ldr	r2, [pc, #420]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e2ae:	4971      	ldr	r1, [pc, #452]	; (800e474 <serialReceiveCallback+0x2d0>)
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f002 fa6f 	bl	8010794 <siscanf>
	  break;
 800e2b6:	e0c6      	b.n	800e446 <serialReceiveCallback+0x2a2>

	case CommandSetKD_kd:
		sscanf(pSerialCommandBuffer, "%s %f", commandChar,&dd);
 800e2b8:	4b72      	ldr	r3, [pc, #456]	; (800e484 <serialReceiveCallback+0x2e0>)
 800e2ba:	4a66      	ldr	r2, [pc, #408]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e2bc:	496d      	ldr	r1, [pc, #436]	; (800e474 <serialReceiveCallback+0x2d0>)
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f002 fa68 	bl	8010794 <siscanf>
	  break;
 800e2c4:	e0bf      	b.n	800e446 <serialReceiveCallback+0x2a2>
	case CommandSetSTIFFNESS_k:

	  break;

	case   CommandSetQUIT_s:
		loop_gogogo = 0;
 800e2c6:	4b70      	ldr	r3, [pc, #448]	; (800e488 <serialReceiveCallback+0x2e4>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	801a      	strh	r2, [r3, #0]
		pneudrive.chambers[0]->writeOpening(0);
 800e2cc:	4b6f      	ldr	r3, [pc, #444]	; (800e48c <serialReceiveCallback+0x2e8>)
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800e490 <serialReceiveCallback+0x2ec>
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fc fdb0 	bl	800ae3c <_ZN7CHAMBER12writeOpeningEf>
		pneudrive.pSource.stop();
 800e2dc:	486d      	ldr	r0, [pc, #436]	; (800e494 <serialReceiveCallback+0x2f0>)
 800e2de:	f7fd f88a 	bl	800b3f6 <_ZN15PRESSURE_SOURCE4stopEv>
		pneudrive.pSink.stop();
 800e2e2:	486d      	ldr	r0, [pc, #436]	; (800e498 <serialReceiveCallback+0x2f4>)
 800e2e4:	f7fd f887 	bl	800b3f6 <_ZN15PRESSURE_SOURCE4stopEv>
	  break;
 800e2e8:	e0ad      	b.n	800e446 <serialReceiveCallback+0x2a2>

	case CommandSetSTART_g:
		loop_gogogo = 1;
 800e2ea:	4b67      	ldr	r3, [pc, #412]	; (800e488 <serialReceiveCallback+0x2e4>)
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	801a      	strh	r2, [r3, #0]
		  break;
 800e2f0:	e0a9      	b.n	800e446 <serialReceiveCallback+0x2a2>

	case CommandSetZERO_z:
		laserPosOffset=laserVol/4096.0f*360;
 800e2f2:	4b6a      	ldr	r3, [pc, #424]	; (800e49c <serialReceiveCallback+0x2f8>)
 800e2f4:	ed93 7a00 	vldr	s14, [r3]
 800e2f8:	eddf 6a69 	vldr	s13, [pc, #420]	; 800e4a0 <serialReceiveCallback+0x2fc>
 800e2fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e300:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800e4a4 <serialReceiveCallback+0x300>
 800e304:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e308:	4b67      	ldr	r3, [pc, #412]	; (800e4a8 <serialReceiveCallback+0x304>)
 800e30a:	edc3 7a00 	vstr	s15, [r3]
		sensorPosOffset=sensorVol2PosRotary(sensorVol);
 800e30e:	4b67      	ldr	r3, [pc, #412]	; (800e4ac <serialReceiveCallback+0x308>)
 800e310:	edd3 7a00 	vldr	s15, [r3]
 800e314:	eeb0 0a67 	vmov.f32	s0, s15
 800e318:	f000 f8da 	bl	800e4d0 <_Z19sensorVol2PosRotaryf>
 800e31c:	eef0 7a40 	vmov.f32	s15, s0
 800e320:	4b63      	ldr	r3, [pc, #396]	; (800e4b0 <serialReceiveCallback+0x30c>)
 800e322:	edc3 7a00 	vstr	s15, [r3]
		  break;
 800e326:	e08e      	b.n	800e446 <serialReceiveCallback+0x2a2>
		  break;

	case CommandSetPOSITION_aa:
		float uiArgv[3];
		int iArgc;
		iArgc=sscanf((char *)pSerialCommandBuffer, "%s %f %f %f", commandChar, &(uiArgv[0]),  &(uiArgv[1]),  &(uiArgv[2]));
 800e328:	f107 0218 	add.w	r2, r7, #24
 800e32c:	f107 0318 	add.w	r3, r7, #24
 800e330:	3308      	adds	r3, #8
 800e332:	9301      	str	r3, [sp, #4]
 800e334:	f107 0318 	add.w	r3, r7, #24
 800e338:	3304      	adds	r3, #4
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	4613      	mov	r3, r2
 800e33e:	4a45      	ldr	r2, [pc, #276]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e340:	495c      	ldr	r1, [pc, #368]	; (800e4b4 <serialReceiveCallback+0x310>)
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f002 fa26 	bl	8010794 <siscanf>
 800e348:	6278      	str	r0, [r7, #36]	; 0x24
		if(iArgc==2)
 800e34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34c:	2b02      	cmp	r3, #2
 800e34e:	d106      	bne.n	800e35e <serialReceiveCallback+0x1ba>
		{
			astep=uiArgv[0];
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	4a59      	ldr	r2, [pc, #356]	; (800e4b8 <serialReceiveCallback+0x314>)
 800e354:	6013      	str	r3, [r2, #0]
			stepCommand=1;
 800e356:	4b59      	ldr	r3, [pc, #356]	; (800e4bc <serialReceiveCallback+0x318>)
 800e358:	2201      	movs	r2, #1
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	e01a      	b.n	800e394 <serialReceiveCallback+0x1f0>
		}
		else
		{
			UpdateTrajSin(&myTrajectory,laserPos,uiArgv[0],uiArgv[1],uiArgv[2],HAL_GetTick());
 800e35e:	4b58      	ldr	r3, [pc, #352]	; (800e4c0 <serialReceiveCallback+0x31c>)
 800e360:	ed93 8a00 	vldr	s16, [r3]
 800e364:	edd7 8a06 	vldr	s17, [r7, #24]
 800e368:	ed97 9a07 	vldr	s18, [r7, #28]
 800e36c:	edd7 9a08 	vldr	s19, [r7, #32]
 800e370:	f7f2 fe52 	bl	8001018 <HAL_GetTick>
 800e374:	4603      	mov	r3, r0
 800e376:	4619      	mov	r1, r3
 800e378:	eef0 1a69 	vmov.f32	s3, s19
 800e37c:	eeb0 1a49 	vmov.f32	s2, s18
 800e380:	eef0 0a68 	vmov.f32	s1, s17
 800e384:	eeb0 0a48 	vmov.f32	s0, s16
 800e388:	484e      	ldr	r0, [pc, #312]	; (800e4c4 <serialReceiveCallback+0x320>)
 800e38a:	f7ff fa19 	bl	800d7c0 <UpdateTrajSin>
			stepCommand=0;
 800e38e:	4b4b      	ldr	r3, [pc, #300]	; (800e4bc <serialReceiveCallback+0x318>)
 800e390:	2200      	movs	r2, #0
 800e392:	601a      	str	r2, [r3, #0]
		}
		CommandTime=0;
 800e394:	4b4c      	ldr	r3, [pc, #304]	; (800e4c8 <serialReceiveCallback+0x324>)
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]
		aa=1;
 800e39a:	4b34      	ldr	r3, [pc, #208]	; (800e46c <serialReceiveCallback+0x2c8>)
 800e39c:	2201      	movs	r2, #1
 800e39e:	601a      	str	r2, [r3, #0]
		break;
 800e3a0:	e051      	b.n	800e446 <serialReceiveCallback+0x2a2>
	case CommandSetPOSITION_ap:
		aa=0;
 800e3a2:	4b32      	ldr	r3, [pc, #200]	; (800e46c <serialReceiveCallback+0x2c8>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	601a      	str	r2, [r3, #0]
		break;
 800e3a8:	e04d      	b.n	800e446 <serialReceiveCallback+0x2a2>

			 break;
	case CommandSetValveLimit_u:
		int ulimnum;
		float ulims;
		sscanf(pSerialCommandBuffer, "%s %d %f", commandChar, &ulimnum,	&ulims);
 800e3aa:	f107 0214 	add.w	r2, r7, #20
 800e3ae:	f107 0310 	add.w	r3, r7, #16
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	4a27      	ldr	r2, [pc, #156]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e3b8:	492b      	ldr	r1, [pc, #172]	; (800e468 <serialReceiveCallback+0x2c4>)
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f002 f9ea 	bl	8010794 <siscanf>
		if (ulimnum == 0)
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <serialReceiveCallback+0x230>
			pneudrive.chambers[0]->openingMinN = ulims;
 800e3c6:	4b31      	ldr	r3, [pc, #196]	; (800e48c <serialReceiveCallback+0x2e8>)
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	693a      	ldr	r2, [r7, #16]
 800e3ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			pneudrive.chambers[0]->openingMaxN = ulims;
		else if (ulimnum == 2)
			pneudrive.chambers[0]->openingMinP = ulims;
		else if (ulimnum == 3)
			pneudrive.chambers[0]->openingMaxP = ulims;
		break;
 800e3d2:	e037      	b.n	800e444 <serialReceiveCallback+0x2a0>
		else if (ulimnum == 1)
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d106      	bne.n	800e3e8 <serialReceiveCallback+0x244>
			pneudrive.chambers[0]->openingMaxN = ulims;
 800e3da:	4b2c      	ldr	r3, [pc, #176]	; (800e48c <serialReceiveCallback+0x2e8>)
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		break;
 800e3e6:	e02d      	b.n	800e444 <serialReceiveCallback+0x2a0>
		else if (ulimnum == 2)
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d106      	bne.n	800e3fc <serialReceiveCallback+0x258>
			pneudrive.chambers[0]->openingMinP = ulims;
 800e3ee:	4b27      	ldr	r3, [pc, #156]	; (800e48c <serialReceiveCallback+0x2e8>)
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	693a      	ldr	r2, [r7, #16]
 800e3f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		break;
 800e3fa:	e023      	b.n	800e444 <serialReceiveCallback+0x2a0>
		else if (ulimnum == 3)
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2b03      	cmp	r3, #3
 800e400:	d120      	bne.n	800e444 <serialReceiveCallback+0x2a0>
			pneudrive.chambers[0]->openingMaxP = ulims;
 800e402:	4b22      	ldr	r3, [pc, #136]	; (800e48c <serialReceiveCallback+0x2e8>)
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		break;
 800e40e:	e019      	b.n	800e444 <serialReceiveCallback+0x2a0>
	case CommandSetCONTROLFREQUENCY_loopMS:
		int32_t loopMS;
		sscanf(pSerialCommandBuffer, "%s %lu", commandChar, &loopMS);
 800e410:	f107 030c 	add.w	r3, r7, #12
 800e414:	4a0f      	ldr	r2, [pc, #60]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e416:	492d      	ldr	r1, [pc, #180]	; (800e4cc <serialReceiveCallback+0x328>)
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f002 f9bb 	bl	8010794 <siscanf>
		setPeriodControlLoop(loopMS);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	4618      	mov	r0, r3
 800e422:	f7fd fa3d 	bl	800b8a0 <setPeriodControlLoop>
	  break;
 800e426:	e00e      	b.n	800e446 <serialReceiveCallback+0x2a2>
	case CommandSetSENDFREQUENCY_sendMS:
		int32_t sendMS;
		sscanf(pSerialCommandBuffer, "%s %lu", commandChar, &sendMS);
 800e428:	f107 0308 	add.w	r3, r7, #8
 800e42c:	4a09      	ldr	r2, [pc, #36]	; (800e454 <serialReceiveCallback+0x2b0>)
 800e42e:	4927      	ldr	r1, [pc, #156]	; (800e4cc <serialReceiveCallback+0x328>)
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f002 f9af 	bl	8010794 <siscanf>
		setPeriodControlLoop(sendMS);
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fd fa31 	bl	800b8a0 <setPeriodControlLoop>
	  break;
 800e43e:	e002      	b.n	800e446 <serialReceiveCallback+0x2a2>

	case CommandSetUNKNOWN:
	  break;

	default:
	  break;
 800e440:	bf00      	nop
 800e442:	e000      	b.n	800e446 <serialReceiveCallback+0x2a2>
		break;
 800e444:	bf00      	nop
	}
}
 800e446:	bf00      	nop
 800e448:	3730      	adds	r7, #48	; 0x30
 800e44a:	46bd      	mov	sp, r7
 800e44c:	ecbd 8b04 	vpop	{d8-d9}
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	2000196c 	.word	0x2000196c
 800e458:	08014624 	.word	0x08014624
 800e45c:	200003d0 	.word	0x200003d0
 800e460:	20001954 	.word	0x20001954
 800e464:	200019a0 	.word	0x200019a0
 800e468:	08014628 	.word	0x08014628
 800e46c:	20001964 	.word	0x20001964
 800e470:	200003bc 	.word	0x200003bc
 800e474:	08014634 	.word	0x08014634
 800e478:	200003c0 	.word	0x200003c0
 800e47c:	200003c4 	.word	0x200003c4
 800e480:	200003c8 	.word	0x200003c8
 800e484:	20001928 	.word	0x20001928
 800e488:	20001594 	.word	0x20001594
 800e48c:	20001510 	.word	0x20001510
 800e490:	00000000 	.word	0x00000000
 800e494:	2000151c 	.word	0x2000151c
 800e498:	20001554 	.word	0x20001554
 800e49c:	2000193c 	.word	0x2000193c
 800e4a0:	45800000 	.word	0x45800000
 800e4a4:	43b40000 	.word	0x43b40000
 800e4a8:	20001950 	.word	0x20001950
 800e4ac:	20001944 	.word	0x20001944
 800e4b0:	2000194c 	.word	0x2000194c
 800e4b4:	0801463c 	.word	0x0801463c
 800e4b8:	20001960 	.word	0x20001960
 800e4bc:	2000195c 	.word	0x2000195c
 800e4c0:	20001940 	.word	0x20001940
 800e4c4:	2000159c 	.word	0x2000159c
 800e4c8:	20001938 	.word	0x20001938
 800e4cc:	08014648 	.word	0x08014648

0800e4d0 <_Z19sensorVol2PosRotaryf>:
	postem=(29.26*senvol-75.1)/1000.0f;
	return postem;
}

float sensorVol2PosRotary(float senvol)//v to degree
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float postem=0;
 800e4da:	f04f 0300 	mov.w	r3, #0
 800e4de:	60fb      	str	r3, [r7, #12]
//	senvol=CONSTRAIN(senvol,2.34,2.5);
//	postem=(183.4*senvol-453.7)*0.7;
	senvol=CONSTRAIN(senvol,2.6,3.2);
 800e4e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800e4e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e4e8:	ed9f 6b21 	vldr	d6, [pc, #132]	; 800e570 <_Z19sensorVol2PosRotaryf+0xa0>
 800e4ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f4:	d501      	bpl.n	800e4fa <_Z19sensorVol2PosRotaryf+0x2a>
 800e4f6:	4b28      	ldr	r3, [pc, #160]	; (800e598 <_Z19sensorVol2PosRotaryf+0xc8>)
 800e4f8:	e00d      	b.n	800e516 <_Z19sensorVol2PosRotaryf+0x46>
 800e4fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800e4fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e502:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800e578 <_Z19sensorVol2PosRotaryf+0xa8>
 800e506:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50e:	dd01      	ble.n	800e514 <_Z19sensorVol2PosRotaryf+0x44>
 800e510:	4b22      	ldr	r3, [pc, #136]	; (800e59c <_Z19sensorVol2PosRotaryf+0xcc>)
 800e512:	e000      	b.n	800e516 <_Z19sensorVol2PosRotaryf+0x46>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	607b      	str	r3, [r7, #4]
	postem=(73.48*senvol*senvol-360.6*senvol+403);
 800e518:	edd7 7a01 	vldr	s15, [r7, #4]
 800e51c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e520:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800e580 <_Z19sensorVol2PosRotaryf+0xb0>
 800e524:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e528:	edd7 7a01 	vldr	s15, [r7, #4]
 800e52c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e530:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e534:	edd7 7a01 	vldr	s15, [r7, #4]
 800e538:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e53c:	ed9f 5b12 	vldr	d5, [pc, #72]	; 800e588 <_Z19sensorVol2PosRotaryf+0xb8>
 800e540:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e544:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e548:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800e590 <_Z19sensorVol2PosRotaryf+0xc0>
 800e54c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e550:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e554:	edc7 7a03 	vstr	s15, [r7, #12]
	return postem;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	ee07 3a90 	vmov	s15, r3
}
 800e55e:	eeb0 0a67 	vmov.f32	s0, s15
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	f3af 8000 	nop.w
 800e570:	cccccccd 	.word	0xcccccccd
 800e574:	4004cccc 	.word	0x4004cccc
 800e578:	9999999a 	.word	0x9999999a
 800e57c:	40099999 	.word	0x40099999
 800e580:	51eb851f 	.word	0x51eb851f
 800e584:	40525eb8 	.word	0x40525eb8
 800e588:	9999999a 	.word	0x9999999a
 800e58c:	40768999 	.word	0x40768999
 800e590:	00000000 	.word	0x00000000
 800e594:	40793000 	.word	0x40793000
 800e598:	40266666 	.word	0x40266666
 800e59c:	404ccccd 	.word	0x404ccccd

0800e5a0 <_Z24sensorPos2PressureRotaryf>:
	pressureFit=-8748.906f*log(16.635441f/(pos*1000+19)-0.78064f)-20000;
	return (pressureFit);
}

float sensorPos2PressureRotary(float pos)//degree to Pa
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	ed87 0a01 	vstr	s0, [r7, #4]
	pos=CONSTRAIN(pos,-40,0);
 800e5aa:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5ae:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800e668 <_Z24sensorPos2PressureRotaryf+0xc8>
 800e5b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ba:	d501      	bpl.n	800e5c0 <_Z24sensorPos2PressureRotaryf+0x20>
 800e5bc:	4b2b      	ldr	r3, [pc, #172]	; (800e66c <_Z24sensorPos2PressureRotaryf+0xcc>)
 800e5be:	e00a      	b.n	800e5d6 <_Z24sensorPos2PressureRotaryf+0x36>
 800e5c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5cc:	dd02      	ble.n	800e5d4 <_Z24sensorPos2PressureRotaryf+0x34>
 800e5ce:	f04f 0300 	mov.w	r3, #0
 800e5d2:	e000      	b.n	800e5d6 <_Z24sensorPos2PressureRotaryf+0x36>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	607b      	str	r3, [r7, #4]
	float pressureFit;///////////////Wrong value here

	pressureFit= 1.696*pos*pos*pos+109*pos*pos + 3857*pos +118.2;
 800e5d8:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e5e0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800e658 <_Z24sensorPos2PressureRotaryf+0xb8>
 800e5e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e5e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e5f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e5f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e5fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e600:	edd7 7a01 	vldr	s15, [r7, #4]
 800e604:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800e670 <_Z24sensorPos2PressureRotaryf+0xd0>
 800e608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e60c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e614:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e618:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e61c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e620:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800e674 <_Z24sensorPos2PressureRotaryf+0xd4>
 800e624:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e628:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e62c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e630:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 800e660 <_Z24sensorPos2PressureRotaryf+0xc0>
 800e634:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e638:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e63c:	edc7 7a03 	vstr	s15, [r7, #12]
	return (pressureFit);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	ee07 3a90 	vmov	s15, r3
}
 800e646:	eeb0 0a67 	vmov.f32	s0, s15
 800e64a:	3714      	adds	r7, #20
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	f3af 8000 	nop.w
 800e658:	e5604189 	.word	0xe5604189
 800e65c:	3ffb22d0 	.word	0x3ffb22d0
 800e660:	cccccccd 	.word	0xcccccccd
 800e664:	405d8ccc 	.word	0x405d8ccc
 800e668:	c2200000 	.word	0xc2200000
 800e66c:	c2200000 	.word	0xc2200000
 800e670:	42da0000 	.word	0x42da0000
 800e674:	45711000 	.word	0x45711000

0800e678 <_Z41__static_initialization_and_destruction_0ii>:
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b01      	cmp	r3, #1
 800e686:	d108      	bne.n	800e69a <_Z41__static_initialization_and_destruction_0ii+0x22>
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e68e:	4293      	cmp	r3, r2
 800e690:	d103      	bne.n	800e69a <_Z41__static_initialization_and_destruction_0ii+0x22>
PNEUDRIVE pneudrive(1);
 800e692:	2101      	movs	r1, #1
 800e694:	4803      	ldr	r0, [pc, #12]	; (800e6a4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800e696:	f7fc ff15 	bl	800b4c4 <_ZN9PNEUDRIVEC1Ei>
}
 800e69a:	bf00      	nop
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	20001510 	.word	0x20001510

0800e6a8 <_GLOBAL__sub_I_pneudrive>:
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e6b0:	2001      	movs	r0, #1
 800e6b2:	f7ff ffe1 	bl	800e678 <_Z41__static_initialization_and_destruction_0ii>
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <_Znwj>:
 800e6b8:	b510      	push	{r4, lr}
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	bf14      	ite	ne
 800e6be:	4604      	movne	r4, r0
 800e6c0:	2401      	moveq	r4, #1
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f001 f88a 	bl	800f7dc <malloc>
 800e6c8:	b930      	cbnz	r0, 800e6d8 <_Znwj+0x20>
 800e6ca:	f000 f807 	bl	800e6dc <_ZSt15get_new_handlerv>
 800e6ce:	b908      	cbnz	r0, 800e6d4 <_Znwj+0x1c>
 800e6d0:	f001 f84b 	bl	800f76a <abort>
 800e6d4:	4780      	blx	r0
 800e6d6:	e7f4      	b.n	800e6c2 <_Znwj+0xa>
 800e6d8:	bd10      	pop	{r4, pc}
	...

0800e6dc <_ZSt15get_new_handlerv>:
 800e6dc:	4b02      	ldr	r3, [pc, #8]	; (800e6e8 <_ZSt15get_new_handlerv+0xc>)
 800e6de:	6818      	ldr	r0, [r3, #0]
 800e6e0:	f3bf 8f5b 	dmb	ish
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	200019a4 	.word	0x200019a4
 800e6ec:	00000000 	.word	0x00000000

0800e6f0 <cos>:
 800e6f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6f2:	eeb0 7b40 	vmov.f64	d7, d0
 800e6f6:	ee17 3a90 	vmov	r3, s15
 800e6fa:	4a19      	ldr	r2, [pc, #100]	; (800e760 <cos+0x70>)
 800e6fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e700:	4293      	cmp	r3, r2
 800e702:	dc04      	bgt.n	800e70e <cos+0x1e>
 800e704:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800e758 <cos+0x68>
 800e708:	f000 fbb2 	bl	800ee70 <__kernel_cos>
 800e70c:	e004      	b.n	800e718 <cos+0x28>
 800e70e:	4a15      	ldr	r2, [pc, #84]	; (800e764 <cos+0x74>)
 800e710:	4293      	cmp	r3, r2
 800e712:	dd04      	ble.n	800e71e <cos+0x2e>
 800e714:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e718:	b005      	add	sp, #20
 800e71a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e71e:	4668      	mov	r0, sp
 800e720:	f000 fa62 	bl	800ebe8 <__ieee754_rem_pio2>
 800e724:	f000 0003 	and.w	r0, r0, #3
 800e728:	2801      	cmp	r0, #1
 800e72a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e72e:	ed9d 0b00 	vldr	d0, [sp]
 800e732:	d007      	beq.n	800e744 <cos+0x54>
 800e734:	2802      	cmp	r0, #2
 800e736:	d00a      	beq.n	800e74e <cos+0x5e>
 800e738:	2800      	cmp	r0, #0
 800e73a:	d0e5      	beq.n	800e708 <cos+0x18>
 800e73c:	2001      	movs	r0, #1
 800e73e:	f000 fe9f 	bl	800f480 <__kernel_sin>
 800e742:	e7e9      	b.n	800e718 <cos+0x28>
 800e744:	f000 fe9c 	bl	800f480 <__kernel_sin>
 800e748:	eeb1 0b40 	vneg.f64	d0, d0
 800e74c:	e7e4      	b.n	800e718 <cos+0x28>
 800e74e:	f000 fb8f 	bl	800ee70 <__kernel_cos>
 800e752:	e7f9      	b.n	800e748 <cos+0x58>
 800e754:	f3af 8000 	nop.w
	...
 800e760:	3fe921fb 	.word	0x3fe921fb
 800e764:	7fefffff 	.word	0x7fefffff

0800e768 <round>:
 800e768:	ee10 3a90 	vmov	r3, s1
 800e76c:	b530      	push	{r4, r5, lr}
 800e76e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800e772:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800e776:	2913      	cmp	r1, #19
 800e778:	ee10 5a90 	vmov	r5, s1
 800e77c:	ee10 2a10 	vmov	r2, s0
 800e780:	dc17      	bgt.n	800e7b2 <round+0x4a>
 800e782:	2900      	cmp	r1, #0
 800e784:	da09      	bge.n	800e79a <round+0x32>
 800e786:	3101      	adds	r1, #1
 800e788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e78c:	d103      	bne.n	800e796 <round+0x2e>
 800e78e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e792:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e796:	2200      	movs	r2, #0
 800e798:	e024      	b.n	800e7e4 <round+0x7c>
 800e79a:	4815      	ldr	r0, [pc, #84]	; (800e7f0 <round+0x88>)
 800e79c:	4108      	asrs	r0, r1
 800e79e:	4203      	tst	r3, r0
 800e7a0:	d100      	bne.n	800e7a4 <round+0x3c>
 800e7a2:	b16a      	cbz	r2, 800e7c0 <round+0x58>
 800e7a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e7a8:	410b      	asrs	r3, r1
 800e7aa:	442b      	add	r3, r5
 800e7ac:	ea23 0300 	bic.w	r3, r3, r0
 800e7b0:	e7f1      	b.n	800e796 <round+0x2e>
 800e7b2:	2933      	cmp	r1, #51	; 0x33
 800e7b4:	dd05      	ble.n	800e7c2 <round+0x5a>
 800e7b6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e7ba:	d101      	bne.n	800e7c0 <round+0x58>
 800e7bc:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e7c0:	bd30      	pop	{r4, r5, pc}
 800e7c2:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800e7c6:	f04f 34ff 	mov.w	r4, #4294967295
 800e7ca:	40c4      	lsrs	r4, r0
 800e7cc:	4222      	tst	r2, r4
 800e7ce:	d0f7      	beq.n	800e7c0 <round+0x58>
 800e7d0:	2001      	movs	r0, #1
 800e7d2:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800e7d6:	fa00 f101 	lsl.w	r1, r0, r1
 800e7da:	1852      	adds	r2, r2, r1
 800e7dc:	bf28      	it	cs
 800e7de:	181b      	addcs	r3, r3, r0
 800e7e0:	ea22 0204 	bic.w	r2, r2, r4
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	ec41 0b10 	vmov	d0, r0, r1
 800e7ec:	e7e8      	b.n	800e7c0 <round+0x58>
 800e7ee:	bf00      	nop
 800e7f0:	000fffff 	.word	0x000fffff
 800e7f4:	00000000 	.word	0x00000000

0800e7f8 <sin>:
 800e7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7fa:	eeb0 7b40 	vmov.f64	d7, d0
 800e7fe:	ee17 3a90 	vmov	r3, s15
 800e802:	4a19      	ldr	r2, [pc, #100]	; (800e868 <sin+0x70>)
 800e804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e808:	4293      	cmp	r3, r2
 800e80a:	dc05      	bgt.n	800e818 <sin+0x20>
 800e80c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800e860 <sin+0x68>
 800e810:	2000      	movs	r0, #0
 800e812:	f000 fe35 	bl	800f480 <__kernel_sin>
 800e816:	e004      	b.n	800e822 <sin+0x2a>
 800e818:	4a14      	ldr	r2, [pc, #80]	; (800e86c <sin+0x74>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	dd04      	ble.n	800e828 <sin+0x30>
 800e81e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e822:	b005      	add	sp, #20
 800e824:	f85d fb04 	ldr.w	pc, [sp], #4
 800e828:	4668      	mov	r0, sp
 800e82a:	f000 f9dd 	bl	800ebe8 <__ieee754_rem_pio2>
 800e82e:	f000 0003 	and.w	r0, r0, #3
 800e832:	2801      	cmp	r0, #1
 800e834:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e838:	ed9d 0b00 	vldr	d0, [sp]
 800e83c:	d004      	beq.n	800e848 <sin+0x50>
 800e83e:	2802      	cmp	r0, #2
 800e840:	d005      	beq.n	800e84e <sin+0x56>
 800e842:	b950      	cbnz	r0, 800e85a <sin+0x62>
 800e844:	2001      	movs	r0, #1
 800e846:	e7e4      	b.n	800e812 <sin+0x1a>
 800e848:	f000 fb12 	bl	800ee70 <__kernel_cos>
 800e84c:	e7e9      	b.n	800e822 <sin+0x2a>
 800e84e:	2001      	movs	r0, #1
 800e850:	f000 fe16 	bl	800f480 <__kernel_sin>
 800e854:	eeb1 0b40 	vneg.f64	d0, d0
 800e858:	e7e3      	b.n	800e822 <sin+0x2a>
 800e85a:	f000 fb09 	bl	800ee70 <__kernel_cos>
 800e85e:	e7f9      	b.n	800e854 <sin+0x5c>
	...
 800e868:	3fe921fb 	.word	0x3fe921fb
 800e86c:	7fefffff 	.word	0x7fefffff

0800e870 <asin>:
 800e870:	b510      	push	{r4, lr}
 800e872:	ed2d 8b04 	vpush	{d8-d9}
 800e876:	eeb0 8b40 	vmov.f64	d8, d0
 800e87a:	4c22      	ldr	r4, [pc, #136]	; (800e904 <asin+0x94>)
 800e87c:	b08a      	sub	sp, #40	; 0x28
 800e87e:	f000 f897 	bl	800e9b0 <__ieee754_asin>
 800e882:	f994 3000 	ldrsb.w	r3, [r4]
 800e886:	eeb0 9b40 	vmov.f64	d9, d0
 800e88a:	3301      	adds	r3, #1
 800e88c:	d034      	beq.n	800e8f8 <asin+0x88>
 800e88e:	eeb4 8b48 	vcmp.f64	d8, d8
 800e892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e896:	d62f      	bvs.n	800e8f8 <asin+0x88>
 800e898:	eeb0 0b48 	vmov.f64	d0, d8
 800e89c:	f000 fe48 	bl	800f530 <fabs>
 800e8a0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e8a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ac:	dd24      	ble.n	800e8f8 <asin+0x88>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	4b15      	ldr	r3, [pc, #84]	; (800e908 <asin+0x98>)
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	4815      	ldr	r0, [pc, #84]	; (800e90c <asin+0x9c>)
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	9308      	str	r3, [sp, #32]
 800e8bc:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e8c0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e8c4:	f000 febc 	bl	800f640 <nan>
 800e8c8:	f994 3000 	ldrsb.w	r3, [r4]
 800e8cc:	2b02      	cmp	r3, #2
 800e8ce:	ed8d 0b06 	vstr	d0, [sp, #24]
 800e8d2:	d104      	bne.n	800e8de <asin+0x6e>
 800e8d4:	f000 ff58 	bl	800f788 <__errno>
 800e8d8:	2321      	movs	r3, #33	; 0x21
 800e8da:	6003      	str	r3, [r0, #0]
 800e8dc:	e004      	b.n	800e8e8 <asin+0x78>
 800e8de:	4668      	mov	r0, sp
 800e8e0:	f000 feaa 	bl	800f638 <matherr>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d0f5      	beq.n	800e8d4 <asin+0x64>
 800e8e8:	9b08      	ldr	r3, [sp, #32]
 800e8ea:	b11b      	cbz	r3, 800e8f4 <asin+0x84>
 800e8ec:	f000 ff4c 	bl	800f788 <__errno>
 800e8f0:	9b08      	ldr	r3, [sp, #32]
 800e8f2:	6003      	str	r3, [r0, #0]
 800e8f4:	ed9d 9b06 	vldr	d9, [sp, #24]
 800e8f8:	eeb0 0b49 	vmov.f64	d0, d9
 800e8fc:	b00a      	add	sp, #40	; 0x28
 800e8fe:	ecbd 8b04 	vpop	{d8-d9}
 800e902:	bd10      	pop	{r4, pc}
 800e904:	20000868 	.word	0x20000868
 800e908:	0801467c 	.word	0x0801467c
 800e90c:	08014a71 	.word	0x08014a71

0800e910 <sqrtf>:
 800e910:	b500      	push	{lr}
 800e912:	ed2d 8b02 	vpush	{d8}
 800e916:	b08b      	sub	sp, #44	; 0x2c
 800e918:	eeb0 8a40 	vmov.f32	s16, s0
 800e91c:	f000 faa3 	bl	800ee66 <__ieee754_sqrtf>
 800e920:	4b21      	ldr	r3, [pc, #132]	; (800e9a8 <sqrtf+0x98>)
 800e922:	f993 3000 	ldrsb.w	r3, [r3]
 800e926:	1c5a      	adds	r2, r3, #1
 800e928:	d028      	beq.n	800e97c <sqrtf+0x6c>
 800e92a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e932:	d623      	bvs.n	800e97c <sqrtf+0x6c>
 800e934:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e93c:	d51e      	bpl.n	800e97c <sqrtf+0x6c>
 800e93e:	2201      	movs	r2, #1
 800e940:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800e944:	9200      	str	r2, [sp, #0]
 800e946:	4a19      	ldr	r2, [pc, #100]	; (800e9ac <sqrtf+0x9c>)
 800e948:	9201      	str	r2, [sp, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	9208      	str	r2, [sp, #32]
 800e94e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e952:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e956:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800e9a0 <sqrtf+0x90>
 800e95a:	b9a3      	cbnz	r3, 800e986 <sqrtf+0x76>
 800e95c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e960:	4668      	mov	r0, sp
 800e962:	f000 fe69 	bl	800f638 <matherr>
 800e966:	b1a0      	cbz	r0, 800e992 <sqrtf+0x82>
 800e968:	9b08      	ldr	r3, [sp, #32]
 800e96a:	b11b      	cbz	r3, 800e974 <sqrtf+0x64>
 800e96c:	f000 ff0c 	bl	800f788 <__errno>
 800e970:	9b08      	ldr	r3, [sp, #32]
 800e972:	6003      	str	r3, [r0, #0]
 800e974:	ed9d 0b06 	vldr	d0, [sp, #24]
 800e978:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e97c:	b00b      	add	sp, #44	; 0x2c
 800e97e:	ecbd 8b02 	vpop	{d8}
 800e982:	f85d fb04 	ldr.w	pc, [sp], #4
 800e986:	2b02      	cmp	r3, #2
 800e988:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800e98c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800e990:	d1e6      	bne.n	800e960 <sqrtf+0x50>
 800e992:	f000 fef9 	bl	800f788 <__errno>
 800e996:	2321      	movs	r3, #33	; 0x21
 800e998:	6003      	str	r3, [r0, #0]
 800e99a:	e7e5      	b.n	800e968 <sqrtf+0x58>
 800e99c:	f3af 8000 	nop.w
	...
 800e9a8:	20000868 	.word	0x20000868
 800e9ac:	08014681 	.word	0x08014681

0800e9b0 <__ieee754_asin>:
 800e9b0:	b530      	push	{r4, r5, lr}
 800e9b2:	ee10 5a90 	vmov	r5, s1
 800e9b6:	ed2d 8b06 	vpush	{d8-d10}
 800e9ba:	4b87      	ldr	r3, [pc, #540]	; (800ebd8 <__ieee754_asin+0x228>)
 800e9bc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e9c0:	429c      	cmp	r4, r3
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	dd1a      	ble.n	800e9fc <__ieee754_asin+0x4c>
 800e9c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e9ca:	ee10 3a10 	vmov	r3, s0
 800e9ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e9d2:	4323      	orrs	r3, r4
 800e9d4:	d10d      	bne.n	800e9f2 <__ieee754_asin+0x42>
 800e9d6:	ed9f 7b62 	vldr	d7, [pc, #392]	; 800eb60 <__ieee754_asin+0x1b0>
 800e9da:	ed9f 6b63 	vldr	d6, [pc, #396]	; 800eb68 <__ieee754_asin+0x1b8>
 800e9de:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e9e2:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e9e6:	eeb0 0b47 	vmov.f64	d0, d7
 800e9ea:	b003      	add	sp, #12
 800e9ec:	ecbd 8b06 	vpop	{d8-d10}
 800e9f0:	bd30      	pop	{r4, r5, pc}
 800e9f2:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e9f6:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e9fa:	e7f6      	b.n	800e9ea <__ieee754_asin+0x3a>
 800e9fc:	4b77      	ldr	r3, [pc, #476]	; (800ebdc <__ieee754_asin+0x22c>)
 800e9fe:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800ea02:	429c      	cmp	r4, r3
 800ea04:	dc0b      	bgt.n	800ea1e <__ieee754_asin+0x6e>
 800ea06:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800ea0a:	da56      	bge.n	800eaba <__ieee754_asin+0x10a>
 800ea0c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800eb70 <__ieee754_asin+0x1c0>
 800ea10:	ee30 7b07 	vadd.f64	d7, d0, d7
 800ea14:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800ea18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1c:	dce5      	bgt.n	800e9ea <__ieee754_asin+0x3a>
 800ea1e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800ea22:	f000 fd85 	bl	800f530 <fabs>
 800ea26:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800eb78 <__ieee754_asin+0x1c8>
 800ea2a:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ea2e:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ea32:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800eb80 <__ieee754_asin+0x1d0>
 800ea36:	eeb0 0b48 	vmov.f64	d0, d8
 800ea3a:	eea8 6b07 	vfma.f64	d6, d8, d7
 800ea3e:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800eb88 <__ieee754_asin+0x1d8>
 800ea42:	eea6 7b08 	vfma.f64	d7, d6, d8
 800ea46:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800eb90 <__ieee754_asin+0x1e0>
 800ea4a:	ed9f ab53 	vldr	d10, [pc, #332]	; 800eb98 <__ieee754_asin+0x1e8>
 800ea4e:	eea7 6b08 	vfma.f64	d6, d7, d8
 800ea52:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800eba0 <__ieee754_asin+0x1f0>
 800ea56:	eea6 7b08 	vfma.f64	d7, d6, d8
 800ea5a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800eba8 <__ieee754_asin+0x1f8>
 800ea5e:	eea7 ab08 	vfma.f64	d10, d7, d8
 800ea62:	ee2a ab08 	vmul.f64	d10, d10, d8
 800ea66:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800ebb0 <__ieee754_asin+0x200>
 800ea6a:	eea8 7b06 	vfma.f64	d7, d8, d6
 800ea6e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800ebb8 <__ieee754_asin+0x208>
 800ea72:	eea7 6b08 	vfma.f64	d6, d7, d8
 800ea76:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800ebc0 <__ieee754_asin+0x210>
 800ea7a:	eea6 7b08 	vfma.f64	d7, d6, d8
 800ea7e:	eea7 9b08 	vfma.f64	d9, d7, d8
 800ea82:	f000 f9ed 	bl	800ee60 <__ieee754_sqrt>
 800ea86:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 800ea8a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800ea8e:	4b54      	ldr	r3, [pc, #336]	; (800ebe0 <__ieee754_asin+0x230>)
 800ea90:	429c      	cmp	r4, r3
 800ea92:	ed8d 0b00 	vstr	d0, [sp]
 800ea96:	dd3f      	ble.n	800eb18 <__ieee754_asin+0x168>
 800ea98:	eeb0 7b40 	vmov.f64	d7, d0
 800ea9c:	eea0 7b04 	vfma.f64	d7, d0, d4
 800eaa0:	ed9f 0b49 	vldr	d0, [pc, #292]	; 800ebc8 <__ieee754_asin+0x218>
 800eaa4:	eea7 0b06 	vfma.f64	d0, d7, d6
 800eaa8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800eb68 <__ieee754_asin+0x1b8>
 800eaac:	ee37 0b40 	vsub.f64	d0, d7, d0
 800eab0:	2d00      	cmp	r5, #0
 800eab2:	bfd8      	it	le
 800eab4:	eeb1 0b40 	vnegle.f64	d0, d0
 800eab8:	e797      	b.n	800e9ea <__ieee754_asin+0x3a>
 800eaba:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800eb78 <__ieee754_asin+0x1c8>
 800eabe:	ee20 7b00 	vmul.f64	d7, d0, d0
 800eac2:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800eb80 <__ieee754_asin+0x1d0>
 800eac6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800eaca:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800eb88 <__ieee754_asin+0x1d8>
 800eace:	eea6 5b07 	vfma.f64	d5, d6, d7
 800ead2:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800eb90 <__ieee754_asin+0x1e0>
 800ead6:	eea5 6b07 	vfma.f64	d6, d5, d7
 800eada:	ed9f 5b31 	vldr	d5, [pc, #196]	; 800eba0 <__ieee754_asin+0x1f0>
 800eade:	eea6 5b07 	vfma.f64	d5, d6, d7
 800eae2:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 800eb98 <__ieee754_asin+0x1e8>
 800eae6:	ed9f 4b30 	vldr	d4, [pc, #192]	; 800eba8 <__ieee754_asin+0x1f8>
 800eaea:	eea5 6b07 	vfma.f64	d6, d5, d7
 800eaee:	ee26 6b07 	vmul.f64	d6, d6, d7
 800eaf2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800ebb0 <__ieee754_asin+0x200>
 800eaf6:	eea7 5b04 	vfma.f64	d5, d7, d4
 800eafa:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 800ebb8 <__ieee754_asin+0x208>
 800eafe:	eea5 4b07 	vfma.f64	d4, d5, d7
 800eb02:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800ebc0 <__ieee754_asin+0x210>
 800eb06:	eea4 5b07 	vfma.f64	d5, d4, d7
 800eb0a:	eea5 9b07 	vfma.f64	d9, d5, d7
 800eb0e:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800eb12:	eea0 0b07 	vfma.f64	d0, d0, d7
 800eb16:	e768      	b.n	800e9ea <__ieee754_asin+0x3a>
 800eb18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb1c:	ed9d 5b00 	vldr	d5, [sp]
 800eb20:	ed9d 2b00 	vldr	d2, [sp]
 800eb24:	ee35 3b05 	vadd.f64	d3, d5, d5
 800eb28:	2200      	movs	r2, #0
 800eb2a:	ec43 2b17 	vmov	d7, r2, r3
 800eb2e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 800eb60 <__ieee754_asin+0x1b0>
 800eb32:	eeb1 5b47 	vneg.f64	d5, d7
 800eb36:	eea5 8b07 	vfma.f64	d8, d5, d7
 800eb3a:	ee32 7b07 	vadd.f64	d7, d2, d7
 800eb3e:	ee88 2b07 	vdiv.f64	d2, d8, d7
 800eb42:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800ebd0 <__ieee754_asin+0x220>
 800eb46:	eea2 0b46 	vfms.f64	d0, d2, d6
 800eb4a:	ee93 0b04 	vfnms.f64	d0, d3, d4
 800eb4e:	eeb0 4b47 	vmov.f64	d4, d7
 800eb52:	eea5 4b06 	vfma.f64	d4, d5, d6
 800eb56:	ee30 0b44 	vsub.f64	d0, d0, d4
 800eb5a:	e7a7      	b.n	800eaac <__ieee754_asin+0xfc>
 800eb5c:	f3af 8000 	nop.w
 800eb60:	33145c07 	.word	0x33145c07
 800eb64:	3c91a626 	.word	0x3c91a626
 800eb68:	54442d18 	.word	0x54442d18
 800eb6c:	3ff921fb 	.word	0x3ff921fb
 800eb70:	8800759c 	.word	0x8800759c
 800eb74:	7e37e43c 	.word	0x7e37e43c
 800eb78:	0dfdf709 	.word	0x0dfdf709
 800eb7c:	3f023de1 	.word	0x3f023de1
 800eb80:	7501b288 	.word	0x7501b288
 800eb84:	3f49efe0 	.word	0x3f49efe0
 800eb88:	b5688f3b 	.word	0xb5688f3b
 800eb8c:	bfa48228 	.word	0xbfa48228
 800eb90:	0e884455 	.word	0x0e884455
 800eb94:	3fc9c155 	.word	0x3fc9c155
 800eb98:	55555555 	.word	0x55555555
 800eb9c:	3fc55555 	.word	0x3fc55555
 800eba0:	03eb6f7d 	.word	0x03eb6f7d
 800eba4:	bfd4d612 	.word	0xbfd4d612
 800eba8:	b12e9282 	.word	0xb12e9282
 800ebac:	3fb3b8c5 	.word	0x3fb3b8c5
 800ebb0:	1b8d0159 	.word	0x1b8d0159
 800ebb4:	bfe6066c 	.word	0xbfe6066c
 800ebb8:	9c598ac8 	.word	0x9c598ac8
 800ebbc:	40002ae5 	.word	0x40002ae5
 800ebc0:	1c8a2d4b 	.word	0x1c8a2d4b
 800ebc4:	c0033a27 	.word	0xc0033a27
 800ebc8:	33145c07 	.word	0x33145c07
 800ebcc:	bc91a626 	.word	0xbc91a626
 800ebd0:	54442d18 	.word	0x54442d18
 800ebd4:	3fe921fb 	.word	0x3fe921fb
 800ebd8:	3fefffff 	.word	0x3fefffff
 800ebdc:	3fdfffff 	.word	0x3fdfffff
 800ebe0:	3fef3332 	.word	0x3fef3332
 800ebe4:	00000000 	.word	0x00000000

0800ebe8 <__ieee754_rem_pio2>:
 800ebe8:	b570      	push	{r4, r5, r6, lr}
 800ebea:	eeb0 7b40 	vmov.f64	d7, d0
 800ebee:	ee17 5a90 	vmov	r5, s15
 800ebf2:	4b95      	ldr	r3, [pc, #596]	; (800ee48 <__ieee754_rem_pio2+0x260>)
 800ebf4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ebf8:	429e      	cmp	r6, r3
 800ebfa:	b088      	sub	sp, #32
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	dc07      	bgt.n	800ec10 <__ieee754_rem_pio2+0x28>
 800ec00:	2200      	movs	r2, #0
 800ec02:	2300      	movs	r3, #0
 800ec04:	ed84 0b00 	vstr	d0, [r4]
 800ec08:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	e01b      	b.n	800ec48 <__ieee754_rem_pio2+0x60>
 800ec10:	4b8e      	ldr	r3, [pc, #568]	; (800ee4c <__ieee754_rem_pio2+0x264>)
 800ec12:	429e      	cmp	r6, r3
 800ec14:	dc3b      	bgt.n	800ec8e <__ieee754_rem_pio2+0xa6>
 800ec16:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800ec1a:	2d00      	cmp	r5, #0
 800ec1c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800ee08 <__ieee754_rem_pio2+0x220>
 800ec20:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800ec24:	dd19      	ble.n	800ec5a <__ieee754_rem_pio2+0x72>
 800ec26:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ec2a:	429e      	cmp	r6, r3
 800ec2c:	d00e      	beq.n	800ec4c <__ieee754_rem_pio2+0x64>
 800ec2e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800ee10 <__ieee754_rem_pio2+0x228>
 800ec32:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ec36:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ec3a:	ed84 5b00 	vstr	d5, [r4]
 800ec3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec42:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec46:	2001      	movs	r0, #1
 800ec48:	b008      	add	sp, #32
 800ec4a:	bd70      	pop	{r4, r5, r6, pc}
 800ec4c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800ee18 <__ieee754_rem_pio2+0x230>
 800ec50:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec54:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800ee20 <__ieee754_rem_pio2+0x238>
 800ec58:	e7eb      	b.n	800ec32 <__ieee754_rem_pio2+0x4a>
 800ec5a:	429e      	cmp	r6, r3
 800ec5c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ec60:	d00e      	beq.n	800ec80 <__ieee754_rem_pio2+0x98>
 800ec62:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800ee10 <__ieee754_rem_pio2+0x228>
 800ec66:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ec6a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ec6e:	ed84 5b00 	vstr	d5, [r4]
 800ec72:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ec76:	f04f 30ff 	mov.w	r0, #4294967295
 800ec7a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec7e:	e7e3      	b.n	800ec48 <__ieee754_rem_pio2+0x60>
 800ec80:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800ee18 <__ieee754_rem_pio2+0x230>
 800ec84:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ec88:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800ee20 <__ieee754_rem_pio2+0x238>
 800ec8c:	e7eb      	b.n	800ec66 <__ieee754_rem_pio2+0x7e>
 800ec8e:	4b70      	ldr	r3, [pc, #448]	; (800ee50 <__ieee754_rem_pio2+0x268>)
 800ec90:	429e      	cmp	r6, r3
 800ec92:	dc6c      	bgt.n	800ed6e <__ieee754_rem_pio2+0x186>
 800ec94:	f000 fc4c 	bl	800f530 <fabs>
 800ec98:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ec9c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800ee28 <__ieee754_rem_pio2+0x240>
 800eca0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800eca4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800eca8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ecac:	ee17 0a90 	vmov	r0, s15
 800ecb0:	eeb1 5b44 	vneg.f64	d5, d4
 800ecb4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800ee08 <__ieee754_rem_pio2+0x220>
 800ecb8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800ecbc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800ee10 <__ieee754_rem_pio2+0x228>
 800ecc0:	281f      	cmp	r0, #31
 800ecc2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ecc6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ecca:	dc08      	bgt.n	800ecde <__ieee754_rem_pio2+0xf6>
 800eccc:	1e42      	subs	r2, r0, #1
 800ecce:	4b61      	ldr	r3, [pc, #388]	; (800ee54 <__ieee754_rem_pio2+0x26c>)
 800ecd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd4:	42b3      	cmp	r3, r6
 800ecd6:	d002      	beq.n	800ecde <__ieee754_rem_pio2+0xf6>
 800ecd8:	ed84 6b00 	vstr	d6, [r4]
 800ecdc:	e022      	b.n	800ed24 <__ieee754_rem_pio2+0x13c>
 800ecde:	ee16 3a90 	vmov	r3, s13
 800ece2:	1536      	asrs	r6, r6, #20
 800ece4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ece8:	1af3      	subs	r3, r6, r3
 800ecea:	2b10      	cmp	r3, #16
 800ecec:	ddf4      	ble.n	800ecd8 <__ieee754_rem_pio2+0xf0>
 800ecee:	eeb0 6b40 	vmov.f64	d6, d0
 800ecf2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800ee18 <__ieee754_rem_pio2+0x230>
 800ecf6:	eea5 6b03 	vfma.f64	d6, d5, d3
 800ecfa:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ecfe:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ed02:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800ee20 <__ieee754_rem_pio2+0x238>
 800ed06:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800ed0a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ed0e:	ee13 3a90 	vmov	r3, s7
 800ed12:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ed16:	1af6      	subs	r6, r6, r3
 800ed18:	2e31      	cmp	r6, #49	; 0x31
 800ed1a:	dc17      	bgt.n	800ed4c <__ieee754_rem_pio2+0x164>
 800ed1c:	eeb0 0b46 	vmov.f64	d0, d6
 800ed20:	ed84 3b00 	vstr	d3, [r4]
 800ed24:	ed94 6b00 	vldr	d6, [r4]
 800ed28:	2d00      	cmp	r5, #0
 800ed2a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ed2e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ed32:	ed84 7b02 	vstr	d7, [r4, #8]
 800ed36:	da87      	bge.n	800ec48 <__ieee754_rem_pio2+0x60>
 800ed38:	eeb1 6b46 	vneg.f64	d6, d6
 800ed3c:	ed84 6b00 	vstr	d6, [r4]
 800ed40:	eeb1 7b47 	vneg.f64	d7, d7
 800ed44:	4240      	negs	r0, r0
 800ed46:	ed84 7b02 	vstr	d7, [r4, #8]
 800ed4a:	e77d      	b.n	800ec48 <__ieee754_rem_pio2+0x60>
 800ed4c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800ee30 <__ieee754_rem_pio2+0x248>
 800ed50:	eeb0 0b46 	vmov.f64	d0, d6
 800ed54:	eea5 0b03 	vfma.f64	d0, d5, d3
 800ed58:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ed5c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800ee38 <__ieee754_rem_pio2+0x250>
 800ed60:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ed64:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800ed68:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ed6c:	e7b4      	b.n	800ecd8 <__ieee754_rem_pio2+0xf0>
 800ed6e:	4b3a      	ldr	r3, [pc, #232]	; (800ee58 <__ieee754_rem_pio2+0x270>)
 800ed70:	429e      	cmp	r6, r3
 800ed72:	dd06      	ble.n	800ed82 <__ieee754_rem_pio2+0x19a>
 800ed74:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ed78:	ed80 7b02 	vstr	d7, [r0, #8]
 800ed7c:	ed80 7b00 	vstr	d7, [r0]
 800ed80:	e744      	b.n	800ec0c <__ieee754_rem_pio2+0x24>
 800ed82:	1532      	asrs	r2, r6, #20
 800ed84:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ed88:	ee10 0a10 	vmov	r0, s0
 800ed8c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ed90:	ec41 0b17 	vmov	d7, r0, r1
 800ed94:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ed98:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800ee40 <__ieee754_rem_pio2+0x258>
 800ed9c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800eda0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eda4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800eda8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800edac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800edb0:	a908      	add	r1, sp, #32
 800edb2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800edb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800edba:	ed8d 6b04 	vstr	d6, [sp, #16]
 800edbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 800edc2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800edc6:	2303      	movs	r3, #3
 800edc8:	ed31 7b02 	vldmdb	r1!, {d7}
 800edcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800edd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd4:	f103 30ff 	add.w	r0, r3, #4294967295
 800edd8:	d013      	beq.n	800ee02 <__ieee754_rem_pio2+0x21a>
 800edda:	4920      	ldr	r1, [pc, #128]	; (800ee5c <__ieee754_rem_pio2+0x274>)
 800eddc:	9101      	str	r1, [sp, #4]
 800edde:	2102      	movs	r1, #2
 800ede0:	9100      	str	r1, [sp, #0]
 800ede2:	a802      	add	r0, sp, #8
 800ede4:	4621      	mov	r1, r4
 800ede6:	f000 f8af 	bl	800ef48 <__kernel_rem_pio2>
 800edea:	2d00      	cmp	r5, #0
 800edec:	f6bf af2c 	bge.w	800ec48 <__ieee754_rem_pio2+0x60>
 800edf0:	ed94 7b00 	vldr	d7, [r4]
 800edf4:	eeb1 7b47 	vneg.f64	d7, d7
 800edf8:	ed84 7b00 	vstr	d7, [r4]
 800edfc:	ed94 7b02 	vldr	d7, [r4, #8]
 800ee00:	e79e      	b.n	800ed40 <__ieee754_rem_pio2+0x158>
 800ee02:	4603      	mov	r3, r0
 800ee04:	e7e0      	b.n	800edc8 <__ieee754_rem_pio2+0x1e0>
 800ee06:	bf00      	nop
 800ee08:	54400000 	.word	0x54400000
 800ee0c:	3ff921fb 	.word	0x3ff921fb
 800ee10:	1a626331 	.word	0x1a626331
 800ee14:	3dd0b461 	.word	0x3dd0b461
 800ee18:	1a600000 	.word	0x1a600000
 800ee1c:	3dd0b461 	.word	0x3dd0b461
 800ee20:	2e037073 	.word	0x2e037073
 800ee24:	3ba3198a 	.word	0x3ba3198a
 800ee28:	6dc9c883 	.word	0x6dc9c883
 800ee2c:	3fe45f30 	.word	0x3fe45f30
 800ee30:	2e000000 	.word	0x2e000000
 800ee34:	3ba3198a 	.word	0x3ba3198a
 800ee38:	252049c1 	.word	0x252049c1
 800ee3c:	397b839a 	.word	0x397b839a
 800ee40:	00000000 	.word	0x00000000
 800ee44:	41700000 	.word	0x41700000
 800ee48:	3fe921fb 	.word	0x3fe921fb
 800ee4c:	4002d97b 	.word	0x4002d97b
 800ee50:	413921fb 	.word	0x413921fb
 800ee54:	08014688 	.word	0x08014688
 800ee58:	7fefffff 	.word	0x7fefffff
 800ee5c:	08014708 	.word	0x08014708

0800ee60 <__ieee754_sqrt>:
 800ee60:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ee64:	4770      	bx	lr

0800ee66 <__ieee754_sqrtf>:
 800ee66:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ee6a:	4770      	bx	lr
 800ee6c:	0000      	movs	r0, r0
	...

0800ee70 <__kernel_cos>:
 800ee70:	ee10 1a90 	vmov	r1, s1
 800ee74:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ee78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ee7c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800ee80:	da05      	bge.n	800ee8e <__kernel_cos+0x1e>
 800ee82:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800ee86:	ee16 3a90 	vmov	r3, s13
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d03d      	beq.n	800ef0a <__kernel_cos+0x9a>
 800ee8e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800ee92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ee96:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800ef10 <__kernel_cos+0xa0>
 800ee9a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800ee9e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800eea2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800ef18 <__kernel_cos+0xa8>
 800eea6:	eea4 5b03 	vfma.f64	d5, d4, d3
 800eeaa:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800ef20 <__kernel_cos+0xb0>
 800eeae:	eea5 3b04 	vfma.f64	d3, d5, d4
 800eeb2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800ef28 <__kernel_cos+0xb8>
 800eeb6:	eea3 5b04 	vfma.f64	d5, d3, d4
 800eeba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800ef30 <__kernel_cos+0xc0>
 800eebe:	4b20      	ldr	r3, [pc, #128]	; (800ef40 <__kernel_cos+0xd0>)
 800eec0:	eea5 3b04 	vfma.f64	d3, d5, d4
 800eec4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800ef38 <__kernel_cos+0xc8>
 800eec8:	4299      	cmp	r1, r3
 800eeca:	eea3 5b04 	vfma.f64	d5, d3, d4
 800eece:	ee25 5b04 	vmul.f64	d5, d5, d4
 800eed2:	eea4 1b05 	vfma.f64	d1, d4, d5
 800eed6:	dc04      	bgt.n	800eee2 <__kernel_cos+0x72>
 800eed8:	ee36 6b41 	vsub.f64	d6, d6, d1
 800eedc:	ee37 0b46 	vsub.f64	d0, d7, d6
 800eee0:	4770      	bx	lr
 800eee2:	4b18      	ldr	r3, [pc, #96]	; (800ef44 <__kernel_cos+0xd4>)
 800eee4:	4299      	cmp	r1, r3
 800eee6:	dc0d      	bgt.n	800ef04 <__kernel_cos+0x94>
 800eee8:	2200      	movs	r2, #0
 800eeea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800eeee:	ec43 2b15 	vmov	d5, r2, r3
 800eef2:	ee37 0b45 	vsub.f64	d0, d7, d5
 800eef6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800eefa:	ee36 6b41 	vsub.f64	d6, d6, d1
 800eefe:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ef02:	4770      	bx	lr
 800ef04:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ef08:	e7f3      	b.n	800eef2 <__kernel_cos+0x82>
 800ef0a:	eeb0 0b47 	vmov.f64	d0, d7
 800ef0e:	4770      	bx	lr
 800ef10:	be8838d4 	.word	0xbe8838d4
 800ef14:	bda8fae9 	.word	0xbda8fae9
 800ef18:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef1c:	3e21ee9e 	.word	0x3e21ee9e
 800ef20:	809c52ad 	.word	0x809c52ad
 800ef24:	be927e4f 	.word	0xbe927e4f
 800ef28:	19cb1590 	.word	0x19cb1590
 800ef2c:	3efa01a0 	.word	0x3efa01a0
 800ef30:	16c15177 	.word	0x16c15177
 800ef34:	bf56c16c 	.word	0xbf56c16c
 800ef38:	5555554c 	.word	0x5555554c
 800ef3c:	3fa55555 	.word	0x3fa55555
 800ef40:	3fd33332 	.word	0x3fd33332
 800ef44:	3fe90000 	.word	0x3fe90000

0800ef48 <__kernel_rem_pio2>:
 800ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	ed2d 8b06 	vpush	{d8-d10}
 800ef50:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800ef54:	469b      	mov	fp, r3
 800ef56:	460e      	mov	r6, r1
 800ef58:	4bc7      	ldr	r3, [pc, #796]	; (800f278 <__kernel_rem_pio2+0x330>)
 800ef5a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ef5c:	9002      	str	r0, [sp, #8]
 800ef5e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ef62:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800ef64:	1ed1      	subs	r1, r2, #3
 800ef66:	2318      	movs	r3, #24
 800ef68:	f06f 0417 	mvn.w	r4, #23
 800ef6c:	fb91 f1f3 	sdiv	r1, r1, r3
 800ef70:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800ef74:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ef78:	fb01 4404 	mla	r4, r1, r4, r4
 800ef7c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800f260 <__kernel_rem_pio2+0x318>
 800ef80:	4414      	add	r4, r2
 800ef82:	eba1 050a 	sub.w	r5, r1, sl
 800ef86:	aa1a      	add	r2, sp, #104	; 0x68
 800ef88:	eb09 070a 	add.w	r7, r9, sl
 800ef8c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800ef90:	4696      	mov	lr, r2
 800ef92:	2300      	movs	r3, #0
 800ef94:	42bb      	cmp	r3, r7
 800ef96:	dd0f      	ble.n	800efb8 <__kernel_rem_pio2+0x70>
 800ef98:	af6a      	add	r7, sp, #424	; 0x1a8
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	454a      	cmp	r2, r9
 800ef9e:	dc28      	bgt.n	800eff2 <__kernel_rem_pio2+0xaa>
 800efa0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800efa4:	eb0b 0302 	add.w	r3, fp, r2
 800efa8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800efac:	9d02      	ldr	r5, [sp, #8]
 800efae:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800f260 <__kernel_rem_pio2+0x318>
 800efb2:	f04f 0c00 	mov.w	ip, #0
 800efb6:	e016      	b.n	800efe6 <__kernel_rem_pio2+0x9e>
 800efb8:	42dd      	cmn	r5, r3
 800efba:	d409      	bmi.n	800efd0 <__kernel_rem_pio2+0x88>
 800efbc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800efc0:	ee07 2a90 	vmov	s15, r2
 800efc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800efc8:	ecae 7b02 	vstmia	lr!, {d7}
 800efcc:	3301      	adds	r3, #1
 800efce:	e7e1      	b.n	800ef94 <__kernel_rem_pio2+0x4c>
 800efd0:	eeb0 7b46 	vmov.f64	d7, d6
 800efd4:	e7f8      	b.n	800efc8 <__kernel_rem_pio2+0x80>
 800efd6:	ecb5 5b02 	vldmia	r5!, {d5}
 800efda:	ed33 6b02 	vldmdb	r3!, {d6}
 800efde:	f10c 0c01 	add.w	ip, ip, #1
 800efe2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800efe6:	45d4      	cmp	ip, sl
 800efe8:	ddf5      	ble.n	800efd6 <__kernel_rem_pio2+0x8e>
 800efea:	eca7 7b02 	vstmia	r7!, {d7}
 800efee:	3201      	adds	r2, #1
 800eff0:	e7d4      	b.n	800ef9c <__kernel_rem_pio2+0x54>
 800eff2:	ab06      	add	r3, sp, #24
 800eff4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800eff8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800f268 <__kernel_rem_pio2+0x320>
 800effc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800f270 <__kernel_rem_pio2+0x328>
 800f000:	9304      	str	r3, [sp, #16]
 800f002:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800f006:	9303      	str	r3, [sp, #12]
 800f008:	464d      	mov	r5, r9
 800f00a:	ab92      	add	r3, sp, #584	; 0x248
 800f00c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800f010:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f014:	3f01      	subs	r7, #1
 800f016:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800f01a:	00ff      	lsls	r7, r7, #3
 800f01c:	ab92      	add	r3, sp, #584	; 0x248
 800f01e:	19da      	adds	r2, r3, r7
 800f020:	3a98      	subs	r2, #152	; 0x98
 800f022:	2300      	movs	r3, #0
 800f024:	1ae9      	subs	r1, r5, r3
 800f026:	2900      	cmp	r1, #0
 800f028:	dc4e      	bgt.n	800f0c8 <__kernel_rem_pio2+0x180>
 800f02a:	4620      	mov	r0, r4
 800f02c:	f000 fb10 	bl	800f650 <scalbn>
 800f030:	eeb0 8b40 	vmov.f64	d8, d0
 800f034:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f038:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f03c:	f000 fa84 	bl	800f548 <floor>
 800f040:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f044:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f048:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f04c:	2c00      	cmp	r4, #0
 800f04e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f056:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f05a:	dd4a      	ble.n	800f0f2 <__kernel_rem_pio2+0x1aa>
 800f05c:	1e69      	subs	r1, r5, #1
 800f05e:	ab06      	add	r3, sp, #24
 800f060:	f1c4 0018 	rsb	r0, r4, #24
 800f064:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800f068:	9a01      	ldr	r2, [sp, #4]
 800f06a:	fa4c f300 	asr.w	r3, ip, r0
 800f06e:	441a      	add	r2, r3
 800f070:	4083      	lsls	r3, r0
 800f072:	9201      	str	r2, [sp, #4]
 800f074:	ebac 0203 	sub.w	r2, ip, r3
 800f078:	ab06      	add	r3, sp, #24
 800f07a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f07e:	f1c4 0317 	rsb	r3, r4, #23
 800f082:	fa42 f803 	asr.w	r8, r2, r3
 800f086:	f1b8 0f00 	cmp.w	r8, #0
 800f08a:	dd43      	ble.n	800f114 <__kernel_rem_pio2+0x1cc>
 800f08c:	9b01      	ldr	r3, [sp, #4]
 800f08e:	2000      	movs	r0, #0
 800f090:	3301      	adds	r3, #1
 800f092:	9301      	str	r3, [sp, #4]
 800f094:	4601      	mov	r1, r0
 800f096:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800f09a:	4285      	cmp	r5, r0
 800f09c:	dc6e      	bgt.n	800f17c <__kernel_rem_pio2+0x234>
 800f09e:	2c00      	cmp	r4, #0
 800f0a0:	dd04      	ble.n	800f0ac <__kernel_rem_pio2+0x164>
 800f0a2:	2c01      	cmp	r4, #1
 800f0a4:	d07f      	beq.n	800f1a6 <__kernel_rem_pio2+0x25e>
 800f0a6:	2c02      	cmp	r4, #2
 800f0a8:	f000 8087 	beq.w	800f1ba <__kernel_rem_pio2+0x272>
 800f0ac:	f1b8 0f02 	cmp.w	r8, #2
 800f0b0:	d130      	bne.n	800f114 <__kernel_rem_pio2+0x1cc>
 800f0b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f0b6:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f0ba:	b359      	cbz	r1, 800f114 <__kernel_rem_pio2+0x1cc>
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f000 fac7 	bl	800f650 <scalbn>
 800f0c2:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f0c6:	e025      	b.n	800f114 <__kernel_rem_pio2+0x1cc>
 800f0c8:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f0cc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f0d0:	a806      	add	r0, sp, #24
 800f0d2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f0d6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f0da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f0de:	ee10 1a10 	vmov	r1, s0
 800f0e2:	ed32 0b02 	vldmdb	r2!, {d0}
 800f0e6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800f0ea:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	e798      	b.n	800f024 <__kernel_rem_pio2+0xdc>
 800f0f2:	d106      	bne.n	800f102 <__kernel_rem_pio2+0x1ba>
 800f0f4:	1e6b      	subs	r3, r5, #1
 800f0f6:	aa06      	add	r2, sp, #24
 800f0f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f0fc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800f100:	e7c1      	b.n	800f086 <__kernel_rem_pio2+0x13e>
 800f102:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f106:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10e:	da32      	bge.n	800f176 <__kernel_rem_pio2+0x22e>
 800f110:	f04f 0800 	mov.w	r8, #0
 800f114:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11c:	f040 80b0 	bne.w	800f280 <__kernel_rem_pio2+0x338>
 800f120:	1e6b      	subs	r3, r5, #1
 800f122:	4618      	mov	r0, r3
 800f124:	2200      	movs	r2, #0
 800f126:	4548      	cmp	r0, r9
 800f128:	da4e      	bge.n	800f1c8 <__kernel_rem_pio2+0x280>
 800f12a:	2a00      	cmp	r2, #0
 800f12c:	f000 8088 	beq.w	800f240 <__kernel_rem_pio2+0x2f8>
 800f130:	aa06      	add	r2, sp, #24
 800f132:	3c18      	subs	r4, #24
 800f134:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f138:	2900      	cmp	r1, #0
 800f13a:	f000 808e 	beq.w	800f25a <__kernel_rem_pio2+0x312>
 800f13e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f142:	4620      	mov	r0, r4
 800f144:	9302      	str	r3, [sp, #8]
 800f146:	f000 fa83 	bl	800f650 <scalbn>
 800f14a:	9b02      	ldr	r3, [sp, #8]
 800f14c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800f14e:	00d9      	lsls	r1, r3, #3
 800f150:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800f268 <__kernel_rem_pio2+0x320>
 800f154:	1850      	adds	r0, r2, r1
 800f156:	f100 0508 	add.w	r5, r0, #8
 800f15a:	461c      	mov	r4, r3
 800f15c:	2c00      	cmp	r4, #0
 800f15e:	f280 80bd 	bge.w	800f2dc <__kernel_rem_pio2+0x394>
 800f162:	2500      	movs	r5, #0
 800f164:	1b5c      	subs	r4, r3, r5
 800f166:	2c00      	cmp	r4, #0
 800f168:	f2c0 80dd 	blt.w	800f326 <__kernel_rem_pio2+0x3de>
 800f16c:	4f43      	ldr	r7, [pc, #268]	; (800f27c <__kernel_rem_pio2+0x334>)
 800f16e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800f260 <__kernel_rem_pio2+0x318>
 800f172:	2400      	movs	r4, #0
 800f174:	e0cb      	b.n	800f30e <__kernel_rem_pio2+0x3c6>
 800f176:	f04f 0802 	mov.w	r8, #2
 800f17a:	e787      	b.n	800f08c <__kernel_rem_pio2+0x144>
 800f17c:	ab06      	add	r3, sp, #24
 800f17e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f182:	b949      	cbnz	r1, 800f198 <__kernel_rem_pio2+0x250>
 800f184:	b12b      	cbz	r3, 800f192 <__kernel_rem_pio2+0x24a>
 800f186:	aa06      	add	r2, sp, #24
 800f188:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f18c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f190:	2301      	movs	r3, #1
 800f192:	3001      	adds	r0, #1
 800f194:	4619      	mov	r1, r3
 800f196:	e780      	b.n	800f09a <__kernel_rem_pio2+0x152>
 800f198:	aa06      	add	r2, sp, #24
 800f19a:	ebac 0303 	sub.w	r3, ip, r3
 800f19e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	e7f5      	b.n	800f192 <__kernel_rem_pio2+0x24a>
 800f1a6:	1e68      	subs	r0, r5, #1
 800f1a8:	ab06      	add	r3, sp, #24
 800f1aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f1ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f1b2:	aa06      	add	r2, sp, #24
 800f1b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f1b8:	e778      	b.n	800f0ac <__kernel_rem_pio2+0x164>
 800f1ba:	1e68      	subs	r0, r5, #1
 800f1bc:	ab06      	add	r3, sp, #24
 800f1be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f1c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f1c6:	e7f4      	b.n	800f1b2 <__kernel_rem_pio2+0x26a>
 800f1c8:	a906      	add	r1, sp, #24
 800f1ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f1ce:	3801      	subs	r0, #1
 800f1d0:	430a      	orrs	r2, r1
 800f1d2:	e7a8      	b.n	800f126 <__kernel_rem_pio2+0x1de>
 800f1d4:	f10c 0c01 	add.w	ip, ip, #1
 800f1d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f1dc:	2a00      	cmp	r2, #0
 800f1de:	d0f9      	beq.n	800f1d4 <__kernel_rem_pio2+0x28c>
 800f1e0:	eb0b 0305 	add.w	r3, fp, r5
 800f1e4:	aa1a      	add	r2, sp, #104	; 0x68
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	1898      	adds	r0, r3, r2
 800f1ea:	3008      	adds	r0, #8
 800f1ec:	1c69      	adds	r1, r5, #1
 800f1ee:	3708      	adds	r7, #8
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	4465      	add	r5, ip
 800f1f4:	9005      	str	r0, [sp, #20]
 800f1f6:	428d      	cmp	r5, r1
 800f1f8:	f6ff af07 	blt.w	800f00a <__kernel_rem_pio2+0xc2>
 800f1fc:	a81a      	add	r0, sp, #104	; 0x68
 800f1fe:	eb02 0c03 	add.w	ip, r2, r3
 800f202:	4484      	add	ip, r0
 800f204:	9803      	ldr	r0, [sp, #12]
 800f206:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f20a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f20e:	9001      	str	r0, [sp, #4]
 800f210:	ee07 0a90 	vmov	s15, r0
 800f214:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f218:	9805      	ldr	r0, [sp, #20]
 800f21a:	ed8c 7b00 	vstr	d7, [ip]
 800f21e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f260 <__kernel_rem_pio2+0x318>
 800f222:	eb00 0802 	add.w	r8, r0, r2
 800f226:	f04f 0c00 	mov.w	ip, #0
 800f22a:	45d4      	cmp	ip, sl
 800f22c:	dd0c      	ble.n	800f248 <__kernel_rem_pio2+0x300>
 800f22e:	eb02 0c07 	add.w	ip, r2, r7
 800f232:	a86a      	add	r0, sp, #424	; 0x1a8
 800f234:	4484      	add	ip, r0
 800f236:	ed8c 7b02 	vstr	d7, [ip, #8]
 800f23a:	3101      	adds	r1, #1
 800f23c:	3208      	adds	r2, #8
 800f23e:	e7da      	b.n	800f1f6 <__kernel_rem_pio2+0x2ae>
 800f240:	9b04      	ldr	r3, [sp, #16]
 800f242:	f04f 0c01 	mov.w	ip, #1
 800f246:	e7c7      	b.n	800f1d8 <__kernel_rem_pio2+0x290>
 800f248:	ecbe 5b02 	vldmia	lr!, {d5}
 800f24c:	ed38 6b02 	vldmdb	r8!, {d6}
 800f250:	f10c 0c01 	add.w	ip, ip, #1
 800f254:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f258:	e7e7      	b.n	800f22a <__kernel_rem_pio2+0x2e2>
 800f25a:	3b01      	subs	r3, #1
 800f25c:	e768      	b.n	800f130 <__kernel_rem_pio2+0x1e8>
 800f25e:	bf00      	nop
	...
 800f26c:	3e700000 	.word	0x3e700000
 800f270:	00000000 	.word	0x00000000
 800f274:	41700000 	.word	0x41700000
 800f278:	08014850 	.word	0x08014850
 800f27c:	08014810 	.word	0x08014810
 800f280:	4260      	negs	r0, r4
 800f282:	eeb0 0b48 	vmov.f64	d0, d8
 800f286:	f000 f9e3 	bl	800f650 <scalbn>
 800f28a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f468 <__kernel_rem_pio2+0x520>
 800f28e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f296:	db18      	blt.n	800f2ca <__kernel_rem_pio2+0x382>
 800f298:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800f470 <__kernel_rem_pio2+0x528>
 800f29c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f2a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f2a4:	aa06      	add	r2, sp, #24
 800f2a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f2aa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f2ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f2b2:	a906      	add	r1, sp, #24
 800f2b4:	ee10 3a10 	vmov	r3, s0
 800f2b8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f2bc:	1c6b      	adds	r3, r5, #1
 800f2be:	ee17 2a10 	vmov	r2, s14
 800f2c2:	3418      	adds	r4, #24
 800f2c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f2c8:	e739      	b.n	800f13e <__kernel_rem_pio2+0x1f6>
 800f2ca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f2ce:	aa06      	add	r2, sp, #24
 800f2d0:	ee10 3a10 	vmov	r3, s0
 800f2d4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f2d8:	462b      	mov	r3, r5
 800f2da:	e730      	b.n	800f13e <__kernel_rem_pio2+0x1f6>
 800f2dc:	aa06      	add	r2, sp, #24
 800f2de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f2e2:	9202      	str	r2, [sp, #8]
 800f2e4:	ee07 2a90 	vmov	s15, r2
 800f2e8:	3c01      	subs	r4, #1
 800f2ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f2ee:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f2f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f2f6:	ed25 7b02 	vstmdb	r5!, {d7}
 800f2fa:	e72f      	b.n	800f15c <__kernel_rem_pio2+0x214>
 800f2fc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800f300:	ecb7 5b02 	vldmia	r7!, {d5}
 800f304:	ed9c 6b00 	vldr	d6, [ip]
 800f308:	3401      	adds	r4, #1
 800f30a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f30e:	454c      	cmp	r4, r9
 800f310:	dc01      	bgt.n	800f316 <__kernel_rem_pio2+0x3ce>
 800f312:	42a5      	cmp	r5, r4
 800f314:	daf2      	bge.n	800f2fc <__kernel_rem_pio2+0x3b4>
 800f316:	aa42      	add	r2, sp, #264	; 0x108
 800f318:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800f31c:	ed84 7b00 	vstr	d7, [r4]
 800f320:	3501      	adds	r5, #1
 800f322:	3808      	subs	r0, #8
 800f324:	e71e      	b.n	800f164 <__kernel_rem_pio2+0x21c>
 800f326:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f328:	2a03      	cmp	r2, #3
 800f32a:	d84e      	bhi.n	800f3ca <__kernel_rem_pio2+0x482>
 800f32c:	e8df f002 	tbb	[pc, r2]
 800f330:	021f1f3e 	.word	0x021f1f3e
 800f334:	3108      	adds	r1, #8
 800f336:	aa42      	add	r2, sp, #264	; 0x108
 800f338:	4411      	add	r1, r2
 800f33a:	4608      	mov	r0, r1
 800f33c:	461c      	mov	r4, r3
 800f33e:	2c00      	cmp	r4, #0
 800f340:	dc61      	bgt.n	800f406 <__kernel_rem_pio2+0x4be>
 800f342:	4608      	mov	r0, r1
 800f344:	461c      	mov	r4, r3
 800f346:	2c01      	cmp	r4, #1
 800f348:	dc6d      	bgt.n	800f426 <__kernel_rem_pio2+0x4de>
 800f34a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800f478 <__kernel_rem_pio2+0x530>
 800f34e:	2b01      	cmp	r3, #1
 800f350:	dc79      	bgt.n	800f446 <__kernel_rem_pio2+0x4fe>
 800f352:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800f356:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800f35a:	f1b8 0f00 	cmp.w	r8, #0
 800f35e:	d178      	bne.n	800f452 <__kernel_rem_pio2+0x50a>
 800f360:	ed86 5b00 	vstr	d5, [r6]
 800f364:	ed86 6b02 	vstr	d6, [r6, #8]
 800f368:	ed86 7b04 	vstr	d7, [r6, #16]
 800f36c:	e02d      	b.n	800f3ca <__kernel_rem_pio2+0x482>
 800f36e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800f478 <__kernel_rem_pio2+0x530>
 800f372:	3108      	adds	r1, #8
 800f374:	aa42      	add	r2, sp, #264	; 0x108
 800f376:	4411      	add	r1, r2
 800f378:	4618      	mov	r0, r3
 800f37a:	2800      	cmp	r0, #0
 800f37c:	da34      	bge.n	800f3e8 <__kernel_rem_pio2+0x4a0>
 800f37e:	f1b8 0f00 	cmp.w	r8, #0
 800f382:	d037      	beq.n	800f3f4 <__kernel_rem_pio2+0x4ac>
 800f384:	eeb1 7b46 	vneg.f64	d7, d6
 800f388:	ed86 7b00 	vstr	d7, [r6]
 800f38c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800f390:	a844      	add	r0, sp, #272	; 0x110
 800f392:	2101      	movs	r1, #1
 800f394:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f398:	428b      	cmp	r3, r1
 800f39a:	da2e      	bge.n	800f3fa <__kernel_rem_pio2+0x4b2>
 800f39c:	f1b8 0f00 	cmp.w	r8, #0
 800f3a0:	d001      	beq.n	800f3a6 <__kernel_rem_pio2+0x45e>
 800f3a2:	eeb1 7b47 	vneg.f64	d7, d7
 800f3a6:	ed86 7b02 	vstr	d7, [r6, #8]
 800f3aa:	e00e      	b.n	800f3ca <__kernel_rem_pio2+0x482>
 800f3ac:	aa92      	add	r2, sp, #584	; 0x248
 800f3ae:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800f478 <__kernel_rem_pio2+0x530>
 800f3b2:	4411      	add	r1, r2
 800f3b4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	da0f      	bge.n	800f3dc <__kernel_rem_pio2+0x494>
 800f3bc:	f1b8 0f00 	cmp.w	r8, #0
 800f3c0:	d001      	beq.n	800f3c6 <__kernel_rem_pio2+0x47e>
 800f3c2:	eeb1 7b47 	vneg.f64	d7, d7
 800f3c6:	ed86 7b00 	vstr	d7, [r6]
 800f3ca:	9b01      	ldr	r3, [sp, #4]
 800f3cc:	f003 0007 	and.w	r0, r3, #7
 800f3d0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800f3d4:	ecbd 8b06 	vpop	{d8-d10}
 800f3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3dc:	ed31 6b02 	vldmdb	r1!, {d6}
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f3e6:	e7e7      	b.n	800f3b8 <__kernel_rem_pio2+0x470>
 800f3e8:	ed31 7b02 	vldmdb	r1!, {d7}
 800f3ec:	3801      	subs	r0, #1
 800f3ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f3f2:	e7c2      	b.n	800f37a <__kernel_rem_pio2+0x432>
 800f3f4:	eeb0 7b46 	vmov.f64	d7, d6
 800f3f8:	e7c6      	b.n	800f388 <__kernel_rem_pio2+0x440>
 800f3fa:	ecb0 6b02 	vldmia	r0!, {d6}
 800f3fe:	3101      	adds	r1, #1
 800f400:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f404:	e7c8      	b.n	800f398 <__kernel_rem_pio2+0x450>
 800f406:	ed10 7b04 	vldr	d7, [r0, #-16]
 800f40a:	ed30 5b02 	vldmdb	r0!, {d5}
 800f40e:	3c01      	subs	r4, #1
 800f410:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f414:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f418:	ed00 6b02 	vstr	d6, [r0, #-8]
 800f41c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f420:	ed80 7b00 	vstr	d7, [r0]
 800f424:	e78b      	b.n	800f33e <__kernel_rem_pio2+0x3f6>
 800f426:	ed10 7b04 	vldr	d7, [r0, #-16]
 800f42a:	ed30 5b02 	vldmdb	r0!, {d5}
 800f42e:	3c01      	subs	r4, #1
 800f430:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f434:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f438:	ed00 6b02 	vstr	d6, [r0, #-8]
 800f43c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f440:	ed80 7b00 	vstr	d7, [r0]
 800f444:	e77f      	b.n	800f346 <__kernel_rem_pio2+0x3fe>
 800f446:	ed31 6b02 	vldmdb	r1!, {d6}
 800f44a:	3b01      	subs	r3, #1
 800f44c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f450:	e77d      	b.n	800f34e <__kernel_rem_pio2+0x406>
 800f452:	eeb1 5b45 	vneg.f64	d5, d5
 800f456:	eeb1 6b46 	vneg.f64	d6, d6
 800f45a:	ed86 5b00 	vstr	d5, [r6]
 800f45e:	eeb1 7b47 	vneg.f64	d7, d7
 800f462:	ed86 6b02 	vstr	d6, [r6, #8]
 800f466:	e77f      	b.n	800f368 <__kernel_rem_pio2+0x420>
 800f468:	00000000 	.word	0x00000000
 800f46c:	41700000 	.word	0x41700000
 800f470:	00000000 	.word	0x00000000
 800f474:	3e700000 	.word	0x3e700000
	...

0800f480 <__kernel_sin>:
 800f480:	ee10 3a90 	vmov	r3, s1
 800f484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f488:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f48c:	da04      	bge.n	800f498 <__kernel_sin+0x18>
 800f48e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f492:	ee17 3a90 	vmov	r3, s15
 800f496:	b35b      	cbz	r3, 800f4f0 <__kernel_sin+0x70>
 800f498:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f49c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f4a0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f4f8 <__kernel_sin+0x78>
 800f4a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f500 <__kernel_sin+0x80>
 800f4a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f4ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f508 <__kernel_sin+0x88>
 800f4b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f4b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f510 <__kernel_sin+0x90>
 800f4b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f4bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f518 <__kernel_sin+0x98>
 800f4c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f4c4:	b930      	cbnz	r0, 800f4d4 <__kernel_sin+0x54>
 800f4c6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f520 <__kernel_sin+0xa0>
 800f4ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f4ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f4d2:	4770      	bx	lr
 800f4d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f4d8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f4dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f4e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f4e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f528 <__kernel_sin+0xa8>
 800f4e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f4ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	f3af 8000 	nop.w
 800f4f8:	5acfd57c 	.word	0x5acfd57c
 800f4fc:	3de5d93a 	.word	0x3de5d93a
 800f500:	8a2b9ceb 	.word	0x8a2b9ceb
 800f504:	be5ae5e6 	.word	0xbe5ae5e6
 800f508:	57b1fe7d 	.word	0x57b1fe7d
 800f50c:	3ec71de3 	.word	0x3ec71de3
 800f510:	19c161d5 	.word	0x19c161d5
 800f514:	bf2a01a0 	.word	0xbf2a01a0
 800f518:	1110f8a6 	.word	0x1110f8a6
 800f51c:	3f811111 	.word	0x3f811111
 800f520:	55555549 	.word	0x55555549
 800f524:	bfc55555 	.word	0xbfc55555
 800f528:	55555549 	.word	0x55555549
 800f52c:	3fc55555 	.word	0x3fc55555

0800f530 <fabs>:
 800f530:	ec51 0b10 	vmov	r0, r1, d0
 800f534:	ee10 2a10 	vmov	r2, s0
 800f538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f53c:	ec43 2b10 	vmov	d0, r2, r3
 800f540:	4770      	bx	lr
 800f542:	0000      	movs	r0, r0
 800f544:	0000      	movs	r0, r0
	...

0800f548 <floor>:
 800f548:	ee10 1a90 	vmov	r1, s1
 800f54c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f550:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f554:	2b13      	cmp	r3, #19
 800f556:	b530      	push	{r4, r5, lr}
 800f558:	ee10 0a10 	vmov	r0, s0
 800f55c:	ee10 5a10 	vmov	r5, s0
 800f560:	dc33      	bgt.n	800f5ca <floor+0x82>
 800f562:	2b00      	cmp	r3, #0
 800f564:	da17      	bge.n	800f596 <floor+0x4e>
 800f566:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f628 <floor+0xe0>
 800f56a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f56e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f576:	dd09      	ble.n	800f58c <floor+0x44>
 800f578:	2900      	cmp	r1, #0
 800f57a:	da50      	bge.n	800f61e <floor+0xd6>
 800f57c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f580:	4a2b      	ldr	r2, [pc, #172]	; (800f630 <floor+0xe8>)
 800f582:	4303      	orrs	r3, r0
 800f584:	2000      	movs	r0, #0
 800f586:	4283      	cmp	r3, r0
 800f588:	bf18      	it	ne
 800f58a:	4611      	movne	r1, r2
 800f58c:	460b      	mov	r3, r1
 800f58e:	4602      	mov	r2, r0
 800f590:	ec43 2b10 	vmov	d0, r2, r3
 800f594:	e020      	b.n	800f5d8 <floor+0x90>
 800f596:	4a27      	ldr	r2, [pc, #156]	; (800f634 <floor+0xec>)
 800f598:	411a      	asrs	r2, r3
 800f59a:	ea01 0402 	and.w	r4, r1, r2
 800f59e:	4304      	orrs	r4, r0
 800f5a0:	d01a      	beq.n	800f5d8 <floor+0x90>
 800f5a2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800f628 <floor+0xe0>
 800f5a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f5aa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b2:	ddeb      	ble.n	800f58c <floor+0x44>
 800f5b4:	2900      	cmp	r1, #0
 800f5b6:	bfbe      	ittt	lt
 800f5b8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f5bc:	fa40 f303 	asrlt.w	r3, r0, r3
 800f5c0:	18c9      	addlt	r1, r1, r3
 800f5c2:	ea21 0102 	bic.w	r1, r1, r2
 800f5c6:	2000      	movs	r0, #0
 800f5c8:	e7e0      	b.n	800f58c <floor+0x44>
 800f5ca:	2b33      	cmp	r3, #51	; 0x33
 800f5cc:	dd05      	ble.n	800f5da <floor+0x92>
 800f5ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5d2:	d101      	bne.n	800f5d8 <floor+0x90>
 800f5d4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f5d8:	bd30      	pop	{r4, r5, pc}
 800f5da:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f5de:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e2:	40e2      	lsrs	r2, r4
 800f5e4:	4202      	tst	r2, r0
 800f5e6:	d0f7      	beq.n	800f5d8 <floor+0x90>
 800f5e8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800f628 <floor+0xe0>
 800f5ec:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f5f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f8:	ddc8      	ble.n	800f58c <floor+0x44>
 800f5fa:	2900      	cmp	r1, #0
 800f5fc:	da02      	bge.n	800f604 <floor+0xbc>
 800f5fe:	2b14      	cmp	r3, #20
 800f600:	d103      	bne.n	800f60a <floor+0xc2>
 800f602:	3101      	adds	r1, #1
 800f604:	ea20 0002 	bic.w	r0, r0, r2
 800f608:	e7c0      	b.n	800f58c <floor+0x44>
 800f60a:	2401      	movs	r4, #1
 800f60c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f610:	fa04 f303 	lsl.w	r3, r4, r3
 800f614:	4418      	add	r0, r3
 800f616:	42a8      	cmp	r0, r5
 800f618:	bf38      	it	cc
 800f61a:	1909      	addcc	r1, r1, r4
 800f61c:	e7f2      	b.n	800f604 <floor+0xbc>
 800f61e:	2000      	movs	r0, #0
 800f620:	4601      	mov	r1, r0
 800f622:	e7b3      	b.n	800f58c <floor+0x44>
 800f624:	f3af 8000 	nop.w
 800f628:	8800759c 	.word	0x8800759c
 800f62c:	7e37e43c 	.word	0x7e37e43c
 800f630:	bff00000 	.word	0xbff00000
 800f634:	000fffff 	.word	0x000fffff

0800f638 <matherr>:
 800f638:	2000      	movs	r0, #0
 800f63a:	4770      	bx	lr
 800f63c:	0000      	movs	r0, r0
	...

0800f640 <nan>:
 800f640:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f648 <nan+0x8>
 800f644:	4770      	bx	lr
 800f646:	bf00      	nop
 800f648:	00000000 	.word	0x00000000
 800f64c:	7ff80000 	.word	0x7ff80000

0800f650 <scalbn>:
 800f650:	b500      	push	{lr}
 800f652:	ed2d 8b02 	vpush	{d8}
 800f656:	b083      	sub	sp, #12
 800f658:	ed8d 0b00 	vstr	d0, [sp]
 800f65c:	9b01      	ldr	r3, [sp, #4]
 800f65e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f662:	b9a2      	cbnz	r2, 800f68e <scalbn+0x3e>
 800f664:	9a00      	ldr	r2, [sp, #0]
 800f666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f66a:	4313      	orrs	r3, r2
 800f66c:	d03a      	beq.n	800f6e4 <scalbn+0x94>
 800f66e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f728 <scalbn+0xd8>
 800f672:	4b35      	ldr	r3, [pc, #212]	; (800f748 <scalbn+0xf8>)
 800f674:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f678:	4298      	cmp	r0, r3
 800f67a:	ed8d 7b00 	vstr	d7, [sp]
 800f67e:	da11      	bge.n	800f6a4 <scalbn+0x54>
 800f680:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800f730 <scalbn+0xe0>
 800f684:	ed9d 6b00 	vldr	d6, [sp]
 800f688:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f68c:	e007      	b.n	800f69e <scalbn+0x4e>
 800f68e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f692:	428a      	cmp	r2, r1
 800f694:	d10a      	bne.n	800f6ac <scalbn+0x5c>
 800f696:	ed9d 7b00 	vldr	d7, [sp]
 800f69a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f69e:	ed8d 7b00 	vstr	d7, [sp]
 800f6a2:	e01f      	b.n	800f6e4 <scalbn+0x94>
 800f6a4:	9b01      	ldr	r3, [sp, #4]
 800f6a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f6aa:	3a36      	subs	r2, #54	; 0x36
 800f6ac:	4402      	add	r2, r0
 800f6ae:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f6b2:	428a      	cmp	r2, r1
 800f6b4:	dd0a      	ble.n	800f6cc <scalbn+0x7c>
 800f6b6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800f738 <scalbn+0xe8>
 800f6ba:	eeb0 0b48 	vmov.f64	d0, d8
 800f6be:	ed9d 1b00 	vldr	d1, [sp]
 800f6c2:	f000 f843 	bl	800f74c <copysign>
 800f6c6:	ee20 7b08 	vmul.f64	d7, d0, d8
 800f6ca:	e7e8      	b.n	800f69e <scalbn+0x4e>
 800f6cc:	2a00      	cmp	r2, #0
 800f6ce:	dd10      	ble.n	800f6f2 <scalbn+0xa2>
 800f6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f6d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6dc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f6e0:	e9cd 0100 	strd	r0, r1, [sp]
 800f6e4:	ed9d 0b00 	vldr	d0, [sp]
 800f6e8:	b003      	add	sp, #12
 800f6ea:	ecbd 8b02 	vpop	{d8}
 800f6ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6f2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f6f6:	da06      	bge.n	800f706 <scalbn+0xb6>
 800f6f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f6fc:	4298      	cmp	r0, r3
 800f6fe:	dcda      	bgt.n	800f6b6 <scalbn+0x66>
 800f700:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800f730 <scalbn+0xe0>
 800f704:	e7d9      	b.n	800f6ba <scalbn+0x6a>
 800f706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f70a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f70e:	3236      	adds	r2, #54	; 0x36
 800f710:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f714:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f718:	ec41 0b17 	vmov	d7, r0, r1
 800f71c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800f740 <scalbn+0xf0>
 800f720:	e7b2      	b.n	800f688 <scalbn+0x38>
 800f722:	bf00      	nop
 800f724:	f3af 8000 	nop.w
 800f728:	00000000 	.word	0x00000000
 800f72c:	43500000 	.word	0x43500000
 800f730:	c2f8f359 	.word	0xc2f8f359
 800f734:	01a56e1f 	.word	0x01a56e1f
 800f738:	8800759c 	.word	0x8800759c
 800f73c:	7e37e43c 	.word	0x7e37e43c
 800f740:	00000000 	.word	0x00000000
 800f744:	3c900000 	.word	0x3c900000
 800f748:	ffff3cb0 	.word	0xffff3cb0

0800f74c <copysign>:
 800f74c:	ec51 0b10 	vmov	r0, r1, d0
 800f750:	ee11 0a90 	vmov	r0, s3
 800f754:	ee10 2a10 	vmov	r2, s0
 800f758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f75c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f760:	ea41 0300 	orr.w	r3, r1, r0
 800f764:	ec43 2b10 	vmov	d0, r2, r3
 800f768:	4770      	bx	lr

0800f76a <abort>:
 800f76a:	b508      	push	{r3, lr}
 800f76c:	2006      	movs	r0, #6
 800f76e:	f000 ffd5 	bl	801071c <raise>
 800f772:	2001      	movs	r0, #1
 800f774:	f004 fe72 	bl	801445c <_exit>

0800f778 <calloc>:
 800f778:	4b02      	ldr	r3, [pc, #8]	; (800f784 <calloc+0xc>)
 800f77a:	460a      	mov	r2, r1
 800f77c:	4601      	mov	r1, r0
 800f77e:	6818      	ldr	r0, [r3, #0]
 800f780:	f000 b847 	b.w	800f812 <_calloc_r>
 800f784:	2000086c 	.word	0x2000086c

0800f788 <__errno>:
 800f788:	4b01      	ldr	r3, [pc, #4]	; (800f790 <__errno+0x8>)
 800f78a:	6818      	ldr	r0, [r3, #0]
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	2000086c 	.word	0x2000086c

0800f794 <__libc_init_array>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	4e0d      	ldr	r6, [pc, #52]	; (800f7cc <__libc_init_array+0x38>)
 800f798:	4c0d      	ldr	r4, [pc, #52]	; (800f7d0 <__libc_init_array+0x3c>)
 800f79a:	1ba4      	subs	r4, r4, r6
 800f79c:	10a4      	asrs	r4, r4, #2
 800f79e:	2500      	movs	r5, #0
 800f7a0:	42a5      	cmp	r5, r4
 800f7a2:	d109      	bne.n	800f7b8 <__libc_init_array+0x24>
 800f7a4:	4e0b      	ldr	r6, [pc, #44]	; (800f7d4 <__libc_init_array+0x40>)
 800f7a6:	4c0c      	ldr	r4, [pc, #48]	; (800f7d8 <__libc_init_array+0x44>)
 800f7a8:	f004 fe5a 	bl	8014460 <_init>
 800f7ac:	1ba4      	subs	r4, r4, r6
 800f7ae:	10a4      	asrs	r4, r4, #2
 800f7b0:	2500      	movs	r5, #0
 800f7b2:	42a5      	cmp	r5, r4
 800f7b4:	d105      	bne.n	800f7c2 <__libc_init_array+0x2e>
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f7bc:	4798      	blx	r3
 800f7be:	3501      	adds	r5, #1
 800f7c0:	e7ee      	b.n	800f7a0 <__libc_init_array+0xc>
 800f7c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f7c6:	4798      	blx	r3
 800f7c8:	3501      	adds	r5, #1
 800f7ca:	e7f2      	b.n	800f7b2 <__libc_init_array+0x1e>
 800f7cc:	08014ba4 	.word	0x08014ba4
 800f7d0:	08014ba4 	.word	0x08014ba4
 800f7d4:	08014ba4 	.word	0x08014ba4
 800f7d8:	08014bac 	.word	0x08014bac

0800f7dc <malloc>:
 800f7dc:	4b02      	ldr	r3, [pc, #8]	; (800f7e8 <malloc+0xc>)
 800f7de:	4601      	mov	r1, r0
 800f7e0:	6818      	ldr	r0, [r3, #0]
 800f7e2:	f000 b873 	b.w	800f8cc <_malloc_r>
 800f7e6:	bf00      	nop
 800f7e8:	2000086c 	.word	0x2000086c

0800f7ec <memcpy>:
 800f7ec:	b510      	push	{r4, lr}
 800f7ee:	1e43      	subs	r3, r0, #1
 800f7f0:	440a      	add	r2, r1
 800f7f2:	4291      	cmp	r1, r2
 800f7f4:	d100      	bne.n	800f7f8 <memcpy+0xc>
 800f7f6:	bd10      	pop	{r4, pc}
 800f7f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f800:	e7f7      	b.n	800f7f2 <memcpy+0x6>

0800f802 <memset>:
 800f802:	4402      	add	r2, r0
 800f804:	4603      	mov	r3, r0
 800f806:	4293      	cmp	r3, r2
 800f808:	d100      	bne.n	800f80c <memset+0xa>
 800f80a:	4770      	bx	lr
 800f80c:	f803 1b01 	strb.w	r1, [r3], #1
 800f810:	e7f9      	b.n	800f806 <memset+0x4>

0800f812 <_calloc_r>:
 800f812:	b538      	push	{r3, r4, r5, lr}
 800f814:	fb02 f401 	mul.w	r4, r2, r1
 800f818:	4621      	mov	r1, r4
 800f81a:	f000 f857 	bl	800f8cc <_malloc_r>
 800f81e:	4605      	mov	r5, r0
 800f820:	b118      	cbz	r0, 800f82a <_calloc_r+0x18>
 800f822:	4622      	mov	r2, r4
 800f824:	2100      	movs	r1, #0
 800f826:	f7ff ffec 	bl	800f802 <memset>
 800f82a:	4628      	mov	r0, r5
 800f82c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f830 <_free_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4605      	mov	r5, r0
 800f834:	2900      	cmp	r1, #0
 800f836:	d045      	beq.n	800f8c4 <_free_r+0x94>
 800f838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f83c:	1f0c      	subs	r4, r1, #4
 800f83e:	2b00      	cmp	r3, #0
 800f840:	bfb8      	it	lt
 800f842:	18e4      	addlt	r4, r4, r3
 800f844:	f003 fa9a 	bl	8012d7c <__malloc_lock>
 800f848:	4a1f      	ldr	r2, [pc, #124]	; (800f8c8 <_free_r+0x98>)
 800f84a:	6813      	ldr	r3, [r2, #0]
 800f84c:	4610      	mov	r0, r2
 800f84e:	b933      	cbnz	r3, 800f85e <_free_r+0x2e>
 800f850:	6063      	str	r3, [r4, #4]
 800f852:	6014      	str	r4, [r2, #0]
 800f854:	4628      	mov	r0, r5
 800f856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f85a:	f003 ba90 	b.w	8012d7e <__malloc_unlock>
 800f85e:	42a3      	cmp	r3, r4
 800f860:	d90c      	bls.n	800f87c <_free_r+0x4c>
 800f862:	6821      	ldr	r1, [r4, #0]
 800f864:	1862      	adds	r2, r4, r1
 800f866:	4293      	cmp	r3, r2
 800f868:	bf04      	itt	eq
 800f86a:	681a      	ldreq	r2, [r3, #0]
 800f86c:	685b      	ldreq	r3, [r3, #4]
 800f86e:	6063      	str	r3, [r4, #4]
 800f870:	bf04      	itt	eq
 800f872:	1852      	addeq	r2, r2, r1
 800f874:	6022      	streq	r2, [r4, #0]
 800f876:	6004      	str	r4, [r0, #0]
 800f878:	e7ec      	b.n	800f854 <_free_r+0x24>
 800f87a:	4613      	mov	r3, r2
 800f87c:	685a      	ldr	r2, [r3, #4]
 800f87e:	b10a      	cbz	r2, 800f884 <_free_r+0x54>
 800f880:	42a2      	cmp	r2, r4
 800f882:	d9fa      	bls.n	800f87a <_free_r+0x4a>
 800f884:	6819      	ldr	r1, [r3, #0]
 800f886:	1858      	adds	r0, r3, r1
 800f888:	42a0      	cmp	r0, r4
 800f88a:	d10b      	bne.n	800f8a4 <_free_r+0x74>
 800f88c:	6820      	ldr	r0, [r4, #0]
 800f88e:	4401      	add	r1, r0
 800f890:	1858      	adds	r0, r3, r1
 800f892:	4282      	cmp	r2, r0
 800f894:	6019      	str	r1, [r3, #0]
 800f896:	d1dd      	bne.n	800f854 <_free_r+0x24>
 800f898:	6810      	ldr	r0, [r2, #0]
 800f89a:	6852      	ldr	r2, [r2, #4]
 800f89c:	605a      	str	r2, [r3, #4]
 800f89e:	4401      	add	r1, r0
 800f8a0:	6019      	str	r1, [r3, #0]
 800f8a2:	e7d7      	b.n	800f854 <_free_r+0x24>
 800f8a4:	d902      	bls.n	800f8ac <_free_r+0x7c>
 800f8a6:	230c      	movs	r3, #12
 800f8a8:	602b      	str	r3, [r5, #0]
 800f8aa:	e7d3      	b.n	800f854 <_free_r+0x24>
 800f8ac:	6820      	ldr	r0, [r4, #0]
 800f8ae:	1821      	adds	r1, r4, r0
 800f8b0:	428a      	cmp	r2, r1
 800f8b2:	bf04      	itt	eq
 800f8b4:	6811      	ldreq	r1, [r2, #0]
 800f8b6:	6852      	ldreq	r2, [r2, #4]
 800f8b8:	6062      	str	r2, [r4, #4]
 800f8ba:	bf04      	itt	eq
 800f8bc:	1809      	addeq	r1, r1, r0
 800f8be:	6021      	streq	r1, [r4, #0]
 800f8c0:	605c      	str	r4, [r3, #4]
 800f8c2:	e7c7      	b.n	800f854 <_free_r+0x24>
 800f8c4:	bd38      	pop	{r3, r4, r5, pc}
 800f8c6:	bf00      	nop
 800f8c8:	200019a8 	.word	0x200019a8

0800f8cc <_malloc_r>:
 800f8cc:	b570      	push	{r4, r5, r6, lr}
 800f8ce:	1ccd      	adds	r5, r1, #3
 800f8d0:	f025 0503 	bic.w	r5, r5, #3
 800f8d4:	3508      	adds	r5, #8
 800f8d6:	2d0c      	cmp	r5, #12
 800f8d8:	bf38      	it	cc
 800f8da:	250c      	movcc	r5, #12
 800f8dc:	2d00      	cmp	r5, #0
 800f8de:	4606      	mov	r6, r0
 800f8e0:	db01      	blt.n	800f8e6 <_malloc_r+0x1a>
 800f8e2:	42a9      	cmp	r1, r5
 800f8e4:	d903      	bls.n	800f8ee <_malloc_r+0x22>
 800f8e6:	230c      	movs	r3, #12
 800f8e8:	6033      	str	r3, [r6, #0]
 800f8ea:	2000      	movs	r0, #0
 800f8ec:	bd70      	pop	{r4, r5, r6, pc}
 800f8ee:	f003 fa45 	bl	8012d7c <__malloc_lock>
 800f8f2:	4a21      	ldr	r2, [pc, #132]	; (800f978 <_malloc_r+0xac>)
 800f8f4:	6814      	ldr	r4, [r2, #0]
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	b991      	cbnz	r1, 800f920 <_malloc_r+0x54>
 800f8fa:	4c20      	ldr	r4, [pc, #128]	; (800f97c <_malloc_r+0xb0>)
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	b91b      	cbnz	r3, 800f908 <_malloc_r+0x3c>
 800f900:	4630      	mov	r0, r6
 800f902:	f000 fecd 	bl	80106a0 <_sbrk_r>
 800f906:	6020      	str	r0, [r4, #0]
 800f908:	4629      	mov	r1, r5
 800f90a:	4630      	mov	r0, r6
 800f90c:	f000 fec8 	bl	80106a0 <_sbrk_r>
 800f910:	1c43      	adds	r3, r0, #1
 800f912:	d124      	bne.n	800f95e <_malloc_r+0x92>
 800f914:	230c      	movs	r3, #12
 800f916:	6033      	str	r3, [r6, #0]
 800f918:	4630      	mov	r0, r6
 800f91a:	f003 fa30 	bl	8012d7e <__malloc_unlock>
 800f91e:	e7e4      	b.n	800f8ea <_malloc_r+0x1e>
 800f920:	680b      	ldr	r3, [r1, #0]
 800f922:	1b5b      	subs	r3, r3, r5
 800f924:	d418      	bmi.n	800f958 <_malloc_r+0x8c>
 800f926:	2b0b      	cmp	r3, #11
 800f928:	d90f      	bls.n	800f94a <_malloc_r+0x7e>
 800f92a:	600b      	str	r3, [r1, #0]
 800f92c:	50cd      	str	r5, [r1, r3]
 800f92e:	18cc      	adds	r4, r1, r3
 800f930:	4630      	mov	r0, r6
 800f932:	f003 fa24 	bl	8012d7e <__malloc_unlock>
 800f936:	f104 000b 	add.w	r0, r4, #11
 800f93a:	1d23      	adds	r3, r4, #4
 800f93c:	f020 0007 	bic.w	r0, r0, #7
 800f940:	1ac3      	subs	r3, r0, r3
 800f942:	d0d3      	beq.n	800f8ec <_malloc_r+0x20>
 800f944:	425a      	negs	r2, r3
 800f946:	50e2      	str	r2, [r4, r3]
 800f948:	e7d0      	b.n	800f8ec <_malloc_r+0x20>
 800f94a:	428c      	cmp	r4, r1
 800f94c:	684b      	ldr	r3, [r1, #4]
 800f94e:	bf16      	itet	ne
 800f950:	6063      	strne	r3, [r4, #4]
 800f952:	6013      	streq	r3, [r2, #0]
 800f954:	460c      	movne	r4, r1
 800f956:	e7eb      	b.n	800f930 <_malloc_r+0x64>
 800f958:	460c      	mov	r4, r1
 800f95a:	6849      	ldr	r1, [r1, #4]
 800f95c:	e7cc      	b.n	800f8f8 <_malloc_r+0x2c>
 800f95e:	1cc4      	adds	r4, r0, #3
 800f960:	f024 0403 	bic.w	r4, r4, #3
 800f964:	42a0      	cmp	r0, r4
 800f966:	d005      	beq.n	800f974 <_malloc_r+0xa8>
 800f968:	1a21      	subs	r1, r4, r0
 800f96a:	4630      	mov	r0, r6
 800f96c:	f000 fe98 	bl	80106a0 <_sbrk_r>
 800f970:	3001      	adds	r0, #1
 800f972:	d0cf      	beq.n	800f914 <_malloc_r+0x48>
 800f974:	6025      	str	r5, [r4, #0]
 800f976:	e7db      	b.n	800f930 <_malloc_r+0x64>
 800f978:	200019a8 	.word	0x200019a8
 800f97c:	200019ac 	.word	0x200019ac

0800f980 <__cvt>:
 800f980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f982:	ed2d 8b02 	vpush	{d8}
 800f986:	eeb0 8b40 	vmov.f64	d8, d0
 800f98a:	b085      	sub	sp, #20
 800f98c:	4617      	mov	r7, r2
 800f98e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f990:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f992:	ee18 2a90 	vmov	r2, s17
 800f996:	f025 0520 	bic.w	r5, r5, #32
 800f99a:	2a00      	cmp	r2, #0
 800f99c:	bfb6      	itet	lt
 800f99e:	222d      	movlt	r2, #45	; 0x2d
 800f9a0:	2200      	movge	r2, #0
 800f9a2:	eeb1 8b40 	vneglt.f64	d8, d0
 800f9a6:	2d46      	cmp	r5, #70	; 0x46
 800f9a8:	460c      	mov	r4, r1
 800f9aa:	701a      	strb	r2, [r3, #0]
 800f9ac:	d004      	beq.n	800f9b8 <__cvt+0x38>
 800f9ae:	2d45      	cmp	r5, #69	; 0x45
 800f9b0:	d100      	bne.n	800f9b4 <__cvt+0x34>
 800f9b2:	3401      	adds	r4, #1
 800f9b4:	2102      	movs	r1, #2
 800f9b6:	e000      	b.n	800f9ba <__cvt+0x3a>
 800f9b8:	2103      	movs	r1, #3
 800f9ba:	ab03      	add	r3, sp, #12
 800f9bc:	9301      	str	r3, [sp, #4]
 800f9be:	ab02      	add	r3, sp, #8
 800f9c0:	9300      	str	r3, [sp, #0]
 800f9c2:	4622      	mov	r2, r4
 800f9c4:	4633      	mov	r3, r6
 800f9c6:	eeb0 0b48 	vmov.f64	d0, d8
 800f9ca:	f001 ff41 	bl	8011850 <_dtoa_r>
 800f9ce:	2d47      	cmp	r5, #71	; 0x47
 800f9d0:	d101      	bne.n	800f9d6 <__cvt+0x56>
 800f9d2:	07fb      	lsls	r3, r7, #31
 800f9d4:	d51e      	bpl.n	800fa14 <__cvt+0x94>
 800f9d6:	2d46      	cmp	r5, #70	; 0x46
 800f9d8:	eb00 0304 	add.w	r3, r0, r4
 800f9dc:	d10c      	bne.n	800f9f8 <__cvt+0x78>
 800f9de:	7802      	ldrb	r2, [r0, #0]
 800f9e0:	2a30      	cmp	r2, #48	; 0x30
 800f9e2:	d107      	bne.n	800f9f4 <__cvt+0x74>
 800f9e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ec:	bf1c      	itt	ne
 800f9ee:	f1c4 0401 	rsbne	r4, r4, #1
 800f9f2:	6034      	strne	r4, [r6, #0]
 800f9f4:	6832      	ldr	r2, [r6, #0]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa00:	d007      	beq.n	800fa12 <__cvt+0x92>
 800fa02:	2130      	movs	r1, #48	; 0x30
 800fa04:	9a03      	ldr	r2, [sp, #12]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d204      	bcs.n	800fa14 <__cvt+0x94>
 800fa0a:	1c54      	adds	r4, r2, #1
 800fa0c:	9403      	str	r4, [sp, #12]
 800fa0e:	7011      	strb	r1, [r2, #0]
 800fa10:	e7f8      	b.n	800fa04 <__cvt+0x84>
 800fa12:	9303      	str	r3, [sp, #12]
 800fa14:	9b03      	ldr	r3, [sp, #12]
 800fa16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa18:	1a1b      	subs	r3, r3, r0
 800fa1a:	6013      	str	r3, [r2, #0]
 800fa1c:	b005      	add	sp, #20
 800fa1e:	ecbd 8b02 	vpop	{d8}
 800fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa24 <__exponent>:
 800fa24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa26:	2900      	cmp	r1, #0
 800fa28:	4604      	mov	r4, r0
 800fa2a:	bfba      	itte	lt
 800fa2c:	4249      	neglt	r1, r1
 800fa2e:	232d      	movlt	r3, #45	; 0x2d
 800fa30:	232b      	movge	r3, #43	; 0x2b
 800fa32:	2909      	cmp	r1, #9
 800fa34:	f804 2b02 	strb.w	r2, [r4], #2
 800fa38:	7043      	strb	r3, [r0, #1]
 800fa3a:	dd20      	ble.n	800fa7e <__exponent+0x5a>
 800fa3c:	f10d 0307 	add.w	r3, sp, #7
 800fa40:	461f      	mov	r7, r3
 800fa42:	260a      	movs	r6, #10
 800fa44:	fb91 f5f6 	sdiv	r5, r1, r6
 800fa48:	fb06 1115 	mls	r1, r6, r5, r1
 800fa4c:	3130      	adds	r1, #48	; 0x30
 800fa4e:	2d09      	cmp	r5, #9
 800fa50:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fa54:	f103 32ff 	add.w	r2, r3, #4294967295
 800fa58:	4629      	mov	r1, r5
 800fa5a:	dc09      	bgt.n	800fa70 <__exponent+0x4c>
 800fa5c:	3130      	adds	r1, #48	; 0x30
 800fa5e:	3b02      	subs	r3, #2
 800fa60:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fa64:	42bb      	cmp	r3, r7
 800fa66:	4622      	mov	r2, r4
 800fa68:	d304      	bcc.n	800fa74 <__exponent+0x50>
 800fa6a:	1a10      	subs	r0, r2, r0
 800fa6c:	b003      	add	sp, #12
 800fa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa70:	4613      	mov	r3, r2
 800fa72:	e7e7      	b.n	800fa44 <__exponent+0x20>
 800fa74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa78:	f804 2b01 	strb.w	r2, [r4], #1
 800fa7c:	e7f2      	b.n	800fa64 <__exponent+0x40>
 800fa7e:	2330      	movs	r3, #48	; 0x30
 800fa80:	4419      	add	r1, r3
 800fa82:	7083      	strb	r3, [r0, #2]
 800fa84:	1d02      	adds	r2, r0, #4
 800fa86:	70c1      	strb	r1, [r0, #3]
 800fa88:	e7ef      	b.n	800fa6a <__exponent+0x46>
 800fa8a:	0000      	movs	r0, r0
 800fa8c:	0000      	movs	r0, r0
	...

0800fa90 <_printf_float>:
 800fa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa94:	b08d      	sub	sp, #52	; 0x34
 800fa96:	460c      	mov	r4, r1
 800fa98:	4616      	mov	r6, r2
 800fa9a:	461f      	mov	r7, r3
 800fa9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800faa0:	4605      	mov	r5, r0
 800faa2:	f003 f8d5 	bl	8012c50 <_localeconv_r>
 800faa6:	f8d0 b000 	ldr.w	fp, [r0]
 800faaa:	4658      	mov	r0, fp
 800faac:	f7f0 fbd2 	bl	8000254 <strlen>
 800fab0:	2300      	movs	r3, #0
 800fab2:	930a      	str	r3, [sp, #40]	; 0x28
 800fab4:	f8d8 3000 	ldr.w	r3, [r8]
 800fab8:	9005      	str	r0, [sp, #20]
 800faba:	3307      	adds	r3, #7
 800fabc:	f023 0307 	bic.w	r3, r3, #7
 800fac0:	f103 0108 	add.w	r1, r3, #8
 800fac4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fac8:	6822      	ldr	r2, [r4, #0]
 800faca:	f8c8 1000 	str.w	r1, [r8]
 800face:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fad2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fad6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800fd60 <_printf_float+0x2d0>
 800fada:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fade:	eeb0 6bc0 	vabs.f64	d6, d0
 800fae2:	eeb4 6b47 	vcmp.f64	d6, d7
 800fae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faea:	dd24      	ble.n	800fb36 <_printf_float+0xa6>
 800faec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800faf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf4:	d502      	bpl.n	800fafc <_printf_float+0x6c>
 800faf6:	232d      	movs	r3, #45	; 0x2d
 800faf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fafc:	499a      	ldr	r1, [pc, #616]	; (800fd68 <_printf_float+0x2d8>)
 800fafe:	4b9b      	ldr	r3, [pc, #620]	; (800fd6c <_printf_float+0x2dc>)
 800fb00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fb04:	bf8c      	ite	hi
 800fb06:	4688      	movhi	r8, r1
 800fb08:	4698      	movls	r8, r3
 800fb0a:	f022 0204 	bic.w	r2, r2, #4
 800fb0e:	2303      	movs	r3, #3
 800fb10:	6123      	str	r3, [r4, #16]
 800fb12:	6022      	str	r2, [r4, #0]
 800fb14:	f04f 0a00 	mov.w	sl, #0
 800fb18:	9700      	str	r7, [sp, #0]
 800fb1a:	4633      	mov	r3, r6
 800fb1c:	aa0b      	add	r2, sp, #44	; 0x2c
 800fb1e:	4621      	mov	r1, r4
 800fb20:	4628      	mov	r0, r5
 800fb22:	f000 f9e1 	bl	800fee8 <_printf_common>
 800fb26:	3001      	adds	r0, #1
 800fb28:	f040 8089 	bne.w	800fc3e <_printf_float+0x1ae>
 800fb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb30:	b00d      	add	sp, #52	; 0x34
 800fb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb36:	eeb4 0b40 	vcmp.f64	d0, d0
 800fb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb3e:	d702      	bvc.n	800fb46 <_printf_float+0xb6>
 800fb40:	498b      	ldr	r1, [pc, #556]	; (800fd70 <_printf_float+0x2e0>)
 800fb42:	4b8c      	ldr	r3, [pc, #560]	; (800fd74 <_printf_float+0x2e4>)
 800fb44:	e7dc      	b.n	800fb00 <_printf_float+0x70>
 800fb46:	6861      	ldr	r1, [r4, #4]
 800fb48:	1c4b      	adds	r3, r1, #1
 800fb4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fb4e:	ab0a      	add	r3, sp, #40	; 0x28
 800fb50:	a809      	add	r0, sp, #36	; 0x24
 800fb52:	d13b      	bne.n	800fbcc <_printf_float+0x13c>
 800fb54:	2106      	movs	r1, #6
 800fb56:	6061      	str	r1, [r4, #4]
 800fb58:	f04f 0c00 	mov.w	ip, #0
 800fb5c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800fb60:	e9cd 0900 	strd	r0, r9, [sp]
 800fb64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fb68:	6022      	str	r2, [r4, #0]
 800fb6a:	6861      	ldr	r1, [r4, #4]
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	f7ff ff07 	bl	800f980 <__cvt>
 800fb72:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800fb76:	2b47      	cmp	r3, #71	; 0x47
 800fb78:	4680      	mov	r8, r0
 800fb7a:	d109      	bne.n	800fb90 <_printf_float+0x100>
 800fb7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb7e:	1cd8      	adds	r0, r3, #3
 800fb80:	db02      	blt.n	800fb88 <_printf_float+0xf8>
 800fb82:	6862      	ldr	r2, [r4, #4]
 800fb84:	4293      	cmp	r3, r2
 800fb86:	dd47      	ble.n	800fc18 <_printf_float+0x188>
 800fb88:	f1a9 0902 	sub.w	r9, r9, #2
 800fb8c:	fa5f f989 	uxtb.w	r9, r9
 800fb90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fb94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb96:	d824      	bhi.n	800fbe2 <_printf_float+0x152>
 800fb98:	3901      	subs	r1, #1
 800fb9a:	464a      	mov	r2, r9
 800fb9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fba0:	9109      	str	r1, [sp, #36]	; 0x24
 800fba2:	f7ff ff3f 	bl	800fa24 <__exponent>
 800fba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fba8:	1813      	adds	r3, r2, r0
 800fbaa:	2a01      	cmp	r2, #1
 800fbac:	4682      	mov	sl, r0
 800fbae:	6123      	str	r3, [r4, #16]
 800fbb0:	dc02      	bgt.n	800fbb8 <_printf_float+0x128>
 800fbb2:	6822      	ldr	r2, [r4, #0]
 800fbb4:	07d1      	lsls	r1, r2, #31
 800fbb6:	d501      	bpl.n	800fbbc <_printf_float+0x12c>
 800fbb8:	3301      	adds	r3, #1
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d0a9      	beq.n	800fb18 <_printf_float+0x88>
 800fbc4:	232d      	movs	r3, #45	; 0x2d
 800fbc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbca:	e7a5      	b.n	800fb18 <_printf_float+0x88>
 800fbcc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800fbd0:	f000 8178 	beq.w	800fec4 <_printf_float+0x434>
 800fbd4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fbd8:	d1be      	bne.n	800fb58 <_printf_float+0xc8>
 800fbda:	2900      	cmp	r1, #0
 800fbdc:	d1bc      	bne.n	800fb58 <_printf_float+0xc8>
 800fbde:	2101      	movs	r1, #1
 800fbe0:	e7b9      	b.n	800fb56 <_printf_float+0xc6>
 800fbe2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fbe6:	d119      	bne.n	800fc1c <_printf_float+0x18c>
 800fbe8:	2900      	cmp	r1, #0
 800fbea:	6863      	ldr	r3, [r4, #4]
 800fbec:	dd0c      	ble.n	800fc08 <_printf_float+0x178>
 800fbee:	6121      	str	r1, [r4, #16]
 800fbf0:	b913      	cbnz	r3, 800fbf8 <_printf_float+0x168>
 800fbf2:	6822      	ldr	r2, [r4, #0]
 800fbf4:	07d2      	lsls	r2, r2, #31
 800fbf6:	d502      	bpl.n	800fbfe <_printf_float+0x16e>
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	440b      	add	r3, r1
 800fbfc:	6123      	str	r3, [r4, #16]
 800fbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc00:	65a3      	str	r3, [r4, #88]	; 0x58
 800fc02:	f04f 0a00 	mov.w	sl, #0
 800fc06:	e7d9      	b.n	800fbbc <_printf_float+0x12c>
 800fc08:	b913      	cbnz	r3, 800fc10 <_printf_float+0x180>
 800fc0a:	6822      	ldr	r2, [r4, #0]
 800fc0c:	07d0      	lsls	r0, r2, #31
 800fc0e:	d501      	bpl.n	800fc14 <_printf_float+0x184>
 800fc10:	3302      	adds	r3, #2
 800fc12:	e7f3      	b.n	800fbfc <_printf_float+0x16c>
 800fc14:	2301      	movs	r3, #1
 800fc16:	e7f1      	b.n	800fbfc <_printf_float+0x16c>
 800fc18:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fc1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fc20:	4293      	cmp	r3, r2
 800fc22:	db05      	blt.n	800fc30 <_printf_float+0x1a0>
 800fc24:	6822      	ldr	r2, [r4, #0]
 800fc26:	6123      	str	r3, [r4, #16]
 800fc28:	07d1      	lsls	r1, r2, #31
 800fc2a:	d5e8      	bpl.n	800fbfe <_printf_float+0x16e>
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	e7e5      	b.n	800fbfc <_printf_float+0x16c>
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	bfd4      	ite	le
 800fc34:	f1c3 0302 	rsble	r3, r3, #2
 800fc38:	2301      	movgt	r3, #1
 800fc3a:	4413      	add	r3, r2
 800fc3c:	e7de      	b.n	800fbfc <_printf_float+0x16c>
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	055a      	lsls	r2, r3, #21
 800fc42:	d407      	bmi.n	800fc54 <_printf_float+0x1c4>
 800fc44:	6923      	ldr	r3, [r4, #16]
 800fc46:	4642      	mov	r2, r8
 800fc48:	4631      	mov	r1, r6
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	47b8      	blx	r7
 800fc4e:	3001      	adds	r0, #1
 800fc50:	d12a      	bne.n	800fca8 <_printf_float+0x218>
 800fc52:	e76b      	b.n	800fb2c <_printf_float+0x9c>
 800fc54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fc58:	f240 80de 	bls.w	800fe18 <_printf_float+0x388>
 800fc5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fc60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc68:	d133      	bne.n	800fcd2 <_printf_float+0x242>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	4a42      	ldr	r2, [pc, #264]	; (800fd78 <_printf_float+0x2e8>)
 800fc6e:	4631      	mov	r1, r6
 800fc70:	4628      	mov	r0, r5
 800fc72:	47b8      	blx	r7
 800fc74:	3001      	adds	r0, #1
 800fc76:	f43f af59 	beq.w	800fb2c <_printf_float+0x9c>
 800fc7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	db02      	blt.n	800fc88 <_printf_float+0x1f8>
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	07d8      	lsls	r0, r3, #31
 800fc86:	d50f      	bpl.n	800fca8 <_printf_float+0x218>
 800fc88:	9b05      	ldr	r3, [sp, #20]
 800fc8a:	465a      	mov	r2, fp
 800fc8c:	4631      	mov	r1, r6
 800fc8e:	4628      	mov	r0, r5
 800fc90:	47b8      	blx	r7
 800fc92:	3001      	adds	r0, #1
 800fc94:	f43f af4a 	beq.w	800fb2c <_printf_float+0x9c>
 800fc98:	f04f 0800 	mov.w	r8, #0
 800fc9c:	f104 091a 	add.w	r9, r4, #26
 800fca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fca2:	3b01      	subs	r3, #1
 800fca4:	4543      	cmp	r3, r8
 800fca6:	dc09      	bgt.n	800fcbc <_printf_float+0x22c>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	079b      	lsls	r3, r3, #30
 800fcac:	f100 8105 	bmi.w	800feba <_printf_float+0x42a>
 800fcb0:	68e0      	ldr	r0, [r4, #12]
 800fcb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcb4:	4298      	cmp	r0, r3
 800fcb6:	bfb8      	it	lt
 800fcb8:	4618      	movlt	r0, r3
 800fcba:	e739      	b.n	800fb30 <_printf_float+0xa0>
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	464a      	mov	r2, r9
 800fcc0:	4631      	mov	r1, r6
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	47b8      	blx	r7
 800fcc6:	3001      	adds	r0, #1
 800fcc8:	f43f af30 	beq.w	800fb2c <_printf_float+0x9c>
 800fccc:	f108 0801 	add.w	r8, r8, #1
 800fcd0:	e7e6      	b.n	800fca0 <_printf_float+0x210>
 800fcd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	dc2b      	bgt.n	800fd30 <_printf_float+0x2a0>
 800fcd8:	2301      	movs	r3, #1
 800fcda:	4a27      	ldr	r2, [pc, #156]	; (800fd78 <_printf_float+0x2e8>)
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4628      	mov	r0, r5
 800fce0:	47b8      	blx	r7
 800fce2:	3001      	adds	r0, #1
 800fce4:	f43f af22 	beq.w	800fb2c <_printf_float+0x9c>
 800fce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcea:	b923      	cbnz	r3, 800fcf6 <_printf_float+0x266>
 800fcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcee:	b913      	cbnz	r3, 800fcf6 <_printf_float+0x266>
 800fcf0:	6823      	ldr	r3, [r4, #0]
 800fcf2:	07d9      	lsls	r1, r3, #31
 800fcf4:	d5d8      	bpl.n	800fca8 <_printf_float+0x218>
 800fcf6:	9b05      	ldr	r3, [sp, #20]
 800fcf8:	465a      	mov	r2, fp
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	47b8      	blx	r7
 800fd00:	3001      	adds	r0, #1
 800fd02:	f43f af13 	beq.w	800fb2c <_printf_float+0x9c>
 800fd06:	f04f 0900 	mov.w	r9, #0
 800fd0a:	f104 0a1a 	add.w	sl, r4, #26
 800fd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd10:	425b      	negs	r3, r3
 800fd12:	454b      	cmp	r3, r9
 800fd14:	dc01      	bgt.n	800fd1a <_printf_float+0x28a>
 800fd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd18:	e795      	b.n	800fc46 <_printf_float+0x1b6>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	4652      	mov	r2, sl
 800fd1e:	4631      	mov	r1, r6
 800fd20:	4628      	mov	r0, r5
 800fd22:	47b8      	blx	r7
 800fd24:	3001      	adds	r0, #1
 800fd26:	f43f af01 	beq.w	800fb2c <_printf_float+0x9c>
 800fd2a:	f109 0901 	add.w	r9, r9, #1
 800fd2e:	e7ee      	b.n	800fd0e <_printf_float+0x27e>
 800fd30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd34:	429a      	cmp	r2, r3
 800fd36:	bfa8      	it	ge
 800fd38:	461a      	movge	r2, r3
 800fd3a:	2a00      	cmp	r2, #0
 800fd3c:	4691      	mov	r9, r2
 800fd3e:	dd07      	ble.n	800fd50 <_printf_float+0x2c0>
 800fd40:	4613      	mov	r3, r2
 800fd42:	4631      	mov	r1, r6
 800fd44:	4642      	mov	r2, r8
 800fd46:	4628      	mov	r0, r5
 800fd48:	47b8      	blx	r7
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	f43f aeee 	beq.w	800fb2c <_printf_float+0x9c>
 800fd50:	f104 031a 	add.w	r3, r4, #26
 800fd54:	f04f 0a00 	mov.w	sl, #0
 800fd58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd5c:	9307      	str	r3, [sp, #28]
 800fd5e:	e017      	b.n	800fd90 <_printf_float+0x300>
 800fd60:	ffffffff 	.word	0xffffffff
 800fd64:	7fefffff 	.word	0x7fefffff
 800fd68:	08014868 	.word	0x08014868
 800fd6c:	08014864 	.word	0x08014864
 800fd70:	08014870 	.word	0x08014870
 800fd74:	0801486c 	.word	0x0801486c
 800fd78:	08014a93 	.word	0x08014a93
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	9a07      	ldr	r2, [sp, #28]
 800fd80:	4631      	mov	r1, r6
 800fd82:	4628      	mov	r0, r5
 800fd84:	47b8      	blx	r7
 800fd86:	3001      	adds	r0, #1
 800fd88:	f43f aed0 	beq.w	800fb2c <_printf_float+0x9c>
 800fd8c:	f10a 0a01 	add.w	sl, sl, #1
 800fd90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd92:	9306      	str	r3, [sp, #24]
 800fd94:	eba3 0309 	sub.w	r3, r3, r9
 800fd98:	4553      	cmp	r3, sl
 800fd9a:	dcef      	bgt.n	800fd7c <_printf_float+0x2ec>
 800fd9c:	9b06      	ldr	r3, [sp, #24]
 800fd9e:	4498      	add	r8, r3
 800fda0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fda4:	429a      	cmp	r2, r3
 800fda6:	db15      	blt.n	800fdd4 <_printf_float+0x344>
 800fda8:	6823      	ldr	r3, [r4, #0]
 800fdaa:	07da      	lsls	r2, r3, #31
 800fdac:	d412      	bmi.n	800fdd4 <_printf_float+0x344>
 800fdae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdb0:	9a06      	ldr	r2, [sp, #24]
 800fdb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fdb4:	1a9a      	subs	r2, r3, r2
 800fdb6:	eba3 0a01 	sub.w	sl, r3, r1
 800fdba:	4592      	cmp	sl, r2
 800fdbc:	bfa8      	it	ge
 800fdbe:	4692      	movge	sl, r2
 800fdc0:	f1ba 0f00 	cmp.w	sl, #0
 800fdc4:	dc0e      	bgt.n	800fde4 <_printf_float+0x354>
 800fdc6:	f04f 0800 	mov.w	r8, #0
 800fdca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fdce:	f104 091a 	add.w	r9, r4, #26
 800fdd2:	e019      	b.n	800fe08 <_printf_float+0x378>
 800fdd4:	9b05      	ldr	r3, [sp, #20]
 800fdd6:	465a      	mov	r2, fp
 800fdd8:	4631      	mov	r1, r6
 800fdda:	4628      	mov	r0, r5
 800fddc:	47b8      	blx	r7
 800fdde:	3001      	adds	r0, #1
 800fde0:	d1e5      	bne.n	800fdae <_printf_float+0x31e>
 800fde2:	e6a3      	b.n	800fb2c <_printf_float+0x9c>
 800fde4:	4653      	mov	r3, sl
 800fde6:	4642      	mov	r2, r8
 800fde8:	4631      	mov	r1, r6
 800fdea:	4628      	mov	r0, r5
 800fdec:	47b8      	blx	r7
 800fdee:	3001      	adds	r0, #1
 800fdf0:	d1e9      	bne.n	800fdc6 <_printf_float+0x336>
 800fdf2:	e69b      	b.n	800fb2c <_printf_float+0x9c>
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	464a      	mov	r2, r9
 800fdf8:	4631      	mov	r1, r6
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	47b8      	blx	r7
 800fdfe:	3001      	adds	r0, #1
 800fe00:	f43f ae94 	beq.w	800fb2c <_printf_float+0x9c>
 800fe04:	f108 0801 	add.w	r8, r8, #1
 800fe08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe0c:	1a9b      	subs	r3, r3, r2
 800fe0e:	eba3 030a 	sub.w	r3, r3, sl
 800fe12:	4543      	cmp	r3, r8
 800fe14:	dcee      	bgt.n	800fdf4 <_printf_float+0x364>
 800fe16:	e747      	b.n	800fca8 <_printf_float+0x218>
 800fe18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe1a:	2a01      	cmp	r2, #1
 800fe1c:	dc01      	bgt.n	800fe22 <_printf_float+0x392>
 800fe1e:	07db      	lsls	r3, r3, #31
 800fe20:	d539      	bpl.n	800fe96 <_printf_float+0x406>
 800fe22:	2301      	movs	r3, #1
 800fe24:	4642      	mov	r2, r8
 800fe26:	4631      	mov	r1, r6
 800fe28:	4628      	mov	r0, r5
 800fe2a:	47b8      	blx	r7
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	f43f ae7d 	beq.w	800fb2c <_printf_float+0x9c>
 800fe32:	9b05      	ldr	r3, [sp, #20]
 800fe34:	465a      	mov	r2, fp
 800fe36:	4631      	mov	r1, r6
 800fe38:	4628      	mov	r0, r5
 800fe3a:	47b8      	blx	r7
 800fe3c:	3001      	adds	r0, #1
 800fe3e:	f108 0801 	add.w	r8, r8, #1
 800fe42:	f43f ae73 	beq.w	800fb2c <_printf_float+0x9c>
 800fe46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fe4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe54:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe58:	d018      	beq.n	800fe8c <_printf_float+0x3fc>
 800fe5a:	4642      	mov	r2, r8
 800fe5c:	4631      	mov	r1, r6
 800fe5e:	4628      	mov	r0, r5
 800fe60:	47b8      	blx	r7
 800fe62:	3001      	adds	r0, #1
 800fe64:	d10e      	bne.n	800fe84 <_printf_float+0x3f4>
 800fe66:	e661      	b.n	800fb2c <_printf_float+0x9c>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	464a      	mov	r2, r9
 800fe6c:	4631      	mov	r1, r6
 800fe6e:	4628      	mov	r0, r5
 800fe70:	47b8      	blx	r7
 800fe72:	3001      	adds	r0, #1
 800fe74:	f43f ae5a 	beq.w	800fb2c <_printf_float+0x9c>
 800fe78:	f108 0801 	add.w	r8, r8, #1
 800fe7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	4543      	cmp	r3, r8
 800fe82:	dcf1      	bgt.n	800fe68 <_printf_float+0x3d8>
 800fe84:	4653      	mov	r3, sl
 800fe86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fe8a:	e6dd      	b.n	800fc48 <_printf_float+0x1b8>
 800fe8c:	f04f 0800 	mov.w	r8, #0
 800fe90:	f104 091a 	add.w	r9, r4, #26
 800fe94:	e7f2      	b.n	800fe7c <_printf_float+0x3ec>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e7df      	b.n	800fe5a <_printf_float+0x3ca>
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	464a      	mov	r2, r9
 800fe9e:	4631      	mov	r1, r6
 800fea0:	4628      	mov	r0, r5
 800fea2:	47b8      	blx	r7
 800fea4:	3001      	adds	r0, #1
 800fea6:	f43f ae41 	beq.w	800fb2c <_printf_float+0x9c>
 800feaa:	f108 0801 	add.w	r8, r8, #1
 800feae:	68e3      	ldr	r3, [r4, #12]
 800feb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800feb2:	1a9b      	subs	r3, r3, r2
 800feb4:	4543      	cmp	r3, r8
 800feb6:	dcf0      	bgt.n	800fe9a <_printf_float+0x40a>
 800feb8:	e6fa      	b.n	800fcb0 <_printf_float+0x220>
 800feba:	f04f 0800 	mov.w	r8, #0
 800febe:	f104 0919 	add.w	r9, r4, #25
 800fec2:	e7f4      	b.n	800feae <_printf_float+0x41e>
 800fec4:	2900      	cmp	r1, #0
 800fec6:	f43f ae8a 	beq.w	800fbde <_printf_float+0x14e>
 800feca:	f04f 0c00 	mov.w	ip, #0
 800fece:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800fed2:	e9cd 0900 	strd	r0, r9, [sp]
 800fed6:	6022      	str	r2, [r4, #0]
 800fed8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fedc:	4628      	mov	r0, r5
 800fede:	f7ff fd4f 	bl	800f980 <__cvt>
 800fee2:	4680      	mov	r8, r0
 800fee4:	e64a      	b.n	800fb7c <_printf_float+0xec>
 800fee6:	bf00      	nop

0800fee8 <_printf_common>:
 800fee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feec:	4691      	mov	r9, r2
 800feee:	461f      	mov	r7, r3
 800fef0:	688a      	ldr	r2, [r1, #8]
 800fef2:	690b      	ldr	r3, [r1, #16]
 800fef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fef8:	4293      	cmp	r3, r2
 800fefa:	bfb8      	it	lt
 800fefc:	4613      	movlt	r3, r2
 800fefe:	f8c9 3000 	str.w	r3, [r9]
 800ff02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff06:	4606      	mov	r6, r0
 800ff08:	460c      	mov	r4, r1
 800ff0a:	b112      	cbz	r2, 800ff12 <_printf_common+0x2a>
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	f8c9 3000 	str.w	r3, [r9]
 800ff12:	6823      	ldr	r3, [r4, #0]
 800ff14:	0699      	lsls	r1, r3, #26
 800ff16:	bf42      	ittt	mi
 800ff18:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ff1c:	3302      	addmi	r3, #2
 800ff1e:	f8c9 3000 	strmi.w	r3, [r9]
 800ff22:	6825      	ldr	r5, [r4, #0]
 800ff24:	f015 0506 	ands.w	r5, r5, #6
 800ff28:	d107      	bne.n	800ff3a <_printf_common+0x52>
 800ff2a:	f104 0a19 	add.w	sl, r4, #25
 800ff2e:	68e3      	ldr	r3, [r4, #12]
 800ff30:	f8d9 2000 	ldr.w	r2, [r9]
 800ff34:	1a9b      	subs	r3, r3, r2
 800ff36:	42ab      	cmp	r3, r5
 800ff38:	dc28      	bgt.n	800ff8c <_printf_common+0xa4>
 800ff3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ff3e:	6822      	ldr	r2, [r4, #0]
 800ff40:	3300      	adds	r3, #0
 800ff42:	bf18      	it	ne
 800ff44:	2301      	movne	r3, #1
 800ff46:	0692      	lsls	r2, r2, #26
 800ff48:	d42d      	bmi.n	800ffa6 <_printf_common+0xbe>
 800ff4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff4e:	4639      	mov	r1, r7
 800ff50:	4630      	mov	r0, r6
 800ff52:	47c0      	blx	r8
 800ff54:	3001      	adds	r0, #1
 800ff56:	d020      	beq.n	800ff9a <_printf_common+0xb2>
 800ff58:	6823      	ldr	r3, [r4, #0]
 800ff5a:	68e5      	ldr	r5, [r4, #12]
 800ff5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ff60:	f003 0306 	and.w	r3, r3, #6
 800ff64:	2b04      	cmp	r3, #4
 800ff66:	bf08      	it	eq
 800ff68:	1aad      	subeq	r5, r5, r2
 800ff6a:	68a3      	ldr	r3, [r4, #8]
 800ff6c:	6922      	ldr	r2, [r4, #16]
 800ff6e:	bf0c      	ite	eq
 800ff70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff74:	2500      	movne	r5, #0
 800ff76:	4293      	cmp	r3, r2
 800ff78:	bfc4      	itt	gt
 800ff7a:	1a9b      	subgt	r3, r3, r2
 800ff7c:	18ed      	addgt	r5, r5, r3
 800ff7e:	f04f 0900 	mov.w	r9, #0
 800ff82:	341a      	adds	r4, #26
 800ff84:	454d      	cmp	r5, r9
 800ff86:	d11a      	bne.n	800ffbe <_printf_common+0xd6>
 800ff88:	2000      	movs	r0, #0
 800ff8a:	e008      	b.n	800ff9e <_printf_common+0xb6>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	4652      	mov	r2, sl
 800ff90:	4639      	mov	r1, r7
 800ff92:	4630      	mov	r0, r6
 800ff94:	47c0      	blx	r8
 800ff96:	3001      	adds	r0, #1
 800ff98:	d103      	bne.n	800ffa2 <_printf_common+0xba>
 800ff9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffa2:	3501      	adds	r5, #1
 800ffa4:	e7c3      	b.n	800ff2e <_printf_common+0x46>
 800ffa6:	18e1      	adds	r1, r4, r3
 800ffa8:	1c5a      	adds	r2, r3, #1
 800ffaa:	2030      	movs	r0, #48	; 0x30
 800ffac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffb0:	4422      	add	r2, r4
 800ffb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffba:	3302      	adds	r3, #2
 800ffbc:	e7c5      	b.n	800ff4a <_printf_common+0x62>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	4622      	mov	r2, r4
 800ffc2:	4639      	mov	r1, r7
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	47c0      	blx	r8
 800ffc8:	3001      	adds	r0, #1
 800ffca:	d0e6      	beq.n	800ff9a <_printf_common+0xb2>
 800ffcc:	f109 0901 	add.w	r9, r9, #1
 800ffd0:	e7d8      	b.n	800ff84 <_printf_common+0x9c>
	...

0800ffd4 <_printf_i>:
 800ffd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ffdc:	460c      	mov	r4, r1
 800ffde:	7e09      	ldrb	r1, [r1, #24]
 800ffe0:	b085      	sub	sp, #20
 800ffe2:	296e      	cmp	r1, #110	; 0x6e
 800ffe4:	4617      	mov	r7, r2
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	4698      	mov	r8, r3
 800ffea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffec:	f000 80b3 	beq.w	8010156 <_printf_i+0x182>
 800fff0:	d822      	bhi.n	8010038 <_printf_i+0x64>
 800fff2:	2963      	cmp	r1, #99	; 0x63
 800fff4:	d036      	beq.n	8010064 <_printf_i+0x90>
 800fff6:	d80a      	bhi.n	801000e <_printf_i+0x3a>
 800fff8:	2900      	cmp	r1, #0
 800fffa:	f000 80b9 	beq.w	8010170 <_printf_i+0x19c>
 800fffe:	2958      	cmp	r1, #88	; 0x58
 8010000:	f000 8083 	beq.w	801010a <_printf_i+0x136>
 8010004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010008:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801000c:	e032      	b.n	8010074 <_printf_i+0xa0>
 801000e:	2964      	cmp	r1, #100	; 0x64
 8010010:	d001      	beq.n	8010016 <_printf_i+0x42>
 8010012:	2969      	cmp	r1, #105	; 0x69
 8010014:	d1f6      	bne.n	8010004 <_printf_i+0x30>
 8010016:	6820      	ldr	r0, [r4, #0]
 8010018:	6813      	ldr	r3, [r2, #0]
 801001a:	0605      	lsls	r5, r0, #24
 801001c:	f103 0104 	add.w	r1, r3, #4
 8010020:	d52a      	bpl.n	8010078 <_printf_i+0xa4>
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6011      	str	r1, [r2, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	da03      	bge.n	8010032 <_printf_i+0x5e>
 801002a:	222d      	movs	r2, #45	; 0x2d
 801002c:	425b      	negs	r3, r3
 801002e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010032:	486f      	ldr	r0, [pc, #444]	; (80101f0 <_printf_i+0x21c>)
 8010034:	220a      	movs	r2, #10
 8010036:	e039      	b.n	80100ac <_printf_i+0xd8>
 8010038:	2973      	cmp	r1, #115	; 0x73
 801003a:	f000 809d 	beq.w	8010178 <_printf_i+0x1a4>
 801003e:	d808      	bhi.n	8010052 <_printf_i+0x7e>
 8010040:	296f      	cmp	r1, #111	; 0x6f
 8010042:	d020      	beq.n	8010086 <_printf_i+0xb2>
 8010044:	2970      	cmp	r1, #112	; 0x70
 8010046:	d1dd      	bne.n	8010004 <_printf_i+0x30>
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	f043 0320 	orr.w	r3, r3, #32
 801004e:	6023      	str	r3, [r4, #0]
 8010050:	e003      	b.n	801005a <_printf_i+0x86>
 8010052:	2975      	cmp	r1, #117	; 0x75
 8010054:	d017      	beq.n	8010086 <_printf_i+0xb2>
 8010056:	2978      	cmp	r1, #120	; 0x78
 8010058:	d1d4      	bne.n	8010004 <_printf_i+0x30>
 801005a:	2378      	movs	r3, #120	; 0x78
 801005c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010060:	4864      	ldr	r0, [pc, #400]	; (80101f4 <_printf_i+0x220>)
 8010062:	e055      	b.n	8010110 <_printf_i+0x13c>
 8010064:	6813      	ldr	r3, [r2, #0]
 8010066:	1d19      	adds	r1, r3, #4
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6011      	str	r1, [r2, #0]
 801006c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010074:	2301      	movs	r3, #1
 8010076:	e08c      	b.n	8010192 <_printf_i+0x1be>
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	6011      	str	r1, [r2, #0]
 801007c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010080:	bf18      	it	ne
 8010082:	b21b      	sxthne	r3, r3
 8010084:	e7cf      	b.n	8010026 <_printf_i+0x52>
 8010086:	6813      	ldr	r3, [r2, #0]
 8010088:	6825      	ldr	r5, [r4, #0]
 801008a:	1d18      	adds	r0, r3, #4
 801008c:	6010      	str	r0, [r2, #0]
 801008e:	0628      	lsls	r0, r5, #24
 8010090:	d501      	bpl.n	8010096 <_printf_i+0xc2>
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	e002      	b.n	801009c <_printf_i+0xc8>
 8010096:	0668      	lsls	r0, r5, #25
 8010098:	d5fb      	bpl.n	8010092 <_printf_i+0xbe>
 801009a:	881b      	ldrh	r3, [r3, #0]
 801009c:	4854      	ldr	r0, [pc, #336]	; (80101f0 <_printf_i+0x21c>)
 801009e:	296f      	cmp	r1, #111	; 0x6f
 80100a0:	bf14      	ite	ne
 80100a2:	220a      	movne	r2, #10
 80100a4:	2208      	moveq	r2, #8
 80100a6:	2100      	movs	r1, #0
 80100a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100ac:	6865      	ldr	r5, [r4, #4]
 80100ae:	60a5      	str	r5, [r4, #8]
 80100b0:	2d00      	cmp	r5, #0
 80100b2:	f2c0 8095 	blt.w	80101e0 <_printf_i+0x20c>
 80100b6:	6821      	ldr	r1, [r4, #0]
 80100b8:	f021 0104 	bic.w	r1, r1, #4
 80100bc:	6021      	str	r1, [r4, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d13d      	bne.n	801013e <_printf_i+0x16a>
 80100c2:	2d00      	cmp	r5, #0
 80100c4:	f040 808e 	bne.w	80101e4 <_printf_i+0x210>
 80100c8:	4665      	mov	r5, ip
 80100ca:	2a08      	cmp	r2, #8
 80100cc:	d10b      	bne.n	80100e6 <_printf_i+0x112>
 80100ce:	6823      	ldr	r3, [r4, #0]
 80100d0:	07db      	lsls	r3, r3, #31
 80100d2:	d508      	bpl.n	80100e6 <_printf_i+0x112>
 80100d4:	6923      	ldr	r3, [r4, #16]
 80100d6:	6862      	ldr	r2, [r4, #4]
 80100d8:	429a      	cmp	r2, r3
 80100da:	bfde      	ittt	le
 80100dc:	2330      	movle	r3, #48	; 0x30
 80100de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80100e6:	ebac 0305 	sub.w	r3, ip, r5
 80100ea:	6123      	str	r3, [r4, #16]
 80100ec:	f8cd 8000 	str.w	r8, [sp]
 80100f0:	463b      	mov	r3, r7
 80100f2:	aa03      	add	r2, sp, #12
 80100f4:	4621      	mov	r1, r4
 80100f6:	4630      	mov	r0, r6
 80100f8:	f7ff fef6 	bl	800fee8 <_printf_common>
 80100fc:	3001      	adds	r0, #1
 80100fe:	d14d      	bne.n	801019c <_printf_i+0x1c8>
 8010100:	f04f 30ff 	mov.w	r0, #4294967295
 8010104:	b005      	add	sp, #20
 8010106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801010a:	4839      	ldr	r0, [pc, #228]	; (80101f0 <_printf_i+0x21c>)
 801010c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010110:	6813      	ldr	r3, [r2, #0]
 8010112:	6821      	ldr	r1, [r4, #0]
 8010114:	1d1d      	adds	r5, r3, #4
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	6015      	str	r5, [r2, #0]
 801011a:	060a      	lsls	r2, r1, #24
 801011c:	d50b      	bpl.n	8010136 <_printf_i+0x162>
 801011e:	07ca      	lsls	r2, r1, #31
 8010120:	bf44      	itt	mi
 8010122:	f041 0120 	orrmi.w	r1, r1, #32
 8010126:	6021      	strmi	r1, [r4, #0]
 8010128:	b91b      	cbnz	r3, 8010132 <_printf_i+0x15e>
 801012a:	6822      	ldr	r2, [r4, #0]
 801012c:	f022 0220 	bic.w	r2, r2, #32
 8010130:	6022      	str	r2, [r4, #0]
 8010132:	2210      	movs	r2, #16
 8010134:	e7b7      	b.n	80100a6 <_printf_i+0xd2>
 8010136:	064d      	lsls	r5, r1, #25
 8010138:	bf48      	it	mi
 801013a:	b29b      	uxthmi	r3, r3
 801013c:	e7ef      	b.n	801011e <_printf_i+0x14a>
 801013e:	4665      	mov	r5, ip
 8010140:	fbb3 f1f2 	udiv	r1, r3, r2
 8010144:	fb02 3311 	mls	r3, r2, r1, r3
 8010148:	5cc3      	ldrb	r3, [r0, r3]
 801014a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801014e:	460b      	mov	r3, r1
 8010150:	2900      	cmp	r1, #0
 8010152:	d1f5      	bne.n	8010140 <_printf_i+0x16c>
 8010154:	e7b9      	b.n	80100ca <_printf_i+0xf6>
 8010156:	6813      	ldr	r3, [r2, #0]
 8010158:	6825      	ldr	r5, [r4, #0]
 801015a:	6961      	ldr	r1, [r4, #20]
 801015c:	1d18      	adds	r0, r3, #4
 801015e:	6010      	str	r0, [r2, #0]
 8010160:	0628      	lsls	r0, r5, #24
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	d501      	bpl.n	801016a <_printf_i+0x196>
 8010166:	6019      	str	r1, [r3, #0]
 8010168:	e002      	b.n	8010170 <_printf_i+0x19c>
 801016a:	066a      	lsls	r2, r5, #25
 801016c:	d5fb      	bpl.n	8010166 <_printf_i+0x192>
 801016e:	8019      	strh	r1, [r3, #0]
 8010170:	2300      	movs	r3, #0
 8010172:	6123      	str	r3, [r4, #16]
 8010174:	4665      	mov	r5, ip
 8010176:	e7b9      	b.n	80100ec <_printf_i+0x118>
 8010178:	6813      	ldr	r3, [r2, #0]
 801017a:	1d19      	adds	r1, r3, #4
 801017c:	6011      	str	r1, [r2, #0]
 801017e:	681d      	ldr	r5, [r3, #0]
 8010180:	6862      	ldr	r2, [r4, #4]
 8010182:	2100      	movs	r1, #0
 8010184:	4628      	mov	r0, r5
 8010186:	f7f0 f873 	bl	8000270 <memchr>
 801018a:	b108      	cbz	r0, 8010190 <_printf_i+0x1bc>
 801018c:	1b40      	subs	r0, r0, r5
 801018e:	6060      	str	r0, [r4, #4]
 8010190:	6863      	ldr	r3, [r4, #4]
 8010192:	6123      	str	r3, [r4, #16]
 8010194:	2300      	movs	r3, #0
 8010196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801019a:	e7a7      	b.n	80100ec <_printf_i+0x118>
 801019c:	6923      	ldr	r3, [r4, #16]
 801019e:	462a      	mov	r2, r5
 80101a0:	4639      	mov	r1, r7
 80101a2:	4630      	mov	r0, r6
 80101a4:	47c0      	blx	r8
 80101a6:	3001      	adds	r0, #1
 80101a8:	d0aa      	beq.n	8010100 <_printf_i+0x12c>
 80101aa:	6823      	ldr	r3, [r4, #0]
 80101ac:	079b      	lsls	r3, r3, #30
 80101ae:	d413      	bmi.n	80101d8 <_printf_i+0x204>
 80101b0:	68e0      	ldr	r0, [r4, #12]
 80101b2:	9b03      	ldr	r3, [sp, #12]
 80101b4:	4298      	cmp	r0, r3
 80101b6:	bfb8      	it	lt
 80101b8:	4618      	movlt	r0, r3
 80101ba:	e7a3      	b.n	8010104 <_printf_i+0x130>
 80101bc:	2301      	movs	r3, #1
 80101be:	464a      	mov	r2, r9
 80101c0:	4639      	mov	r1, r7
 80101c2:	4630      	mov	r0, r6
 80101c4:	47c0      	blx	r8
 80101c6:	3001      	adds	r0, #1
 80101c8:	d09a      	beq.n	8010100 <_printf_i+0x12c>
 80101ca:	3501      	adds	r5, #1
 80101cc:	68e3      	ldr	r3, [r4, #12]
 80101ce:	9a03      	ldr	r2, [sp, #12]
 80101d0:	1a9b      	subs	r3, r3, r2
 80101d2:	42ab      	cmp	r3, r5
 80101d4:	dcf2      	bgt.n	80101bc <_printf_i+0x1e8>
 80101d6:	e7eb      	b.n	80101b0 <_printf_i+0x1dc>
 80101d8:	2500      	movs	r5, #0
 80101da:	f104 0919 	add.w	r9, r4, #25
 80101de:	e7f5      	b.n	80101cc <_printf_i+0x1f8>
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1ac      	bne.n	801013e <_printf_i+0x16a>
 80101e4:	7803      	ldrb	r3, [r0, #0]
 80101e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101ee:	e76c      	b.n	80100ca <_printf_i+0xf6>
 80101f0:	08014874 	.word	0x08014874
 80101f4:	08014885 	.word	0x08014885

080101f8 <_scanf_float>:
 80101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fc:	469a      	mov	sl, r3
 80101fe:	688b      	ldr	r3, [r1, #8]
 8010200:	4616      	mov	r6, r2
 8010202:	1e5a      	subs	r2, r3, #1
 8010204:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010208:	b087      	sub	sp, #28
 801020a:	bf83      	ittte	hi
 801020c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010210:	189b      	addhi	r3, r3, r2
 8010212:	9301      	strhi	r3, [sp, #4]
 8010214:	2300      	movls	r3, #0
 8010216:	bf86      	itte	hi
 8010218:	f240 135d 	movwhi	r3, #349	; 0x15d
 801021c:	608b      	strhi	r3, [r1, #8]
 801021e:	9301      	strls	r3, [sp, #4]
 8010220:	680b      	ldr	r3, [r1, #0]
 8010222:	4688      	mov	r8, r1
 8010224:	f04f 0b00 	mov.w	fp, #0
 8010228:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801022c:	f848 3b1c 	str.w	r3, [r8], #28
 8010230:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010234:	4607      	mov	r7, r0
 8010236:	460c      	mov	r4, r1
 8010238:	4645      	mov	r5, r8
 801023a:	465a      	mov	r2, fp
 801023c:	46d9      	mov	r9, fp
 801023e:	f8cd b008 	str.w	fp, [sp, #8]
 8010242:	68a1      	ldr	r1, [r4, #8]
 8010244:	b181      	cbz	r1, 8010268 <_scanf_float+0x70>
 8010246:	6833      	ldr	r3, [r6, #0]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b49      	cmp	r3, #73	; 0x49
 801024c:	d071      	beq.n	8010332 <_scanf_float+0x13a>
 801024e:	d84d      	bhi.n	80102ec <_scanf_float+0xf4>
 8010250:	2b39      	cmp	r3, #57	; 0x39
 8010252:	d840      	bhi.n	80102d6 <_scanf_float+0xde>
 8010254:	2b31      	cmp	r3, #49	; 0x31
 8010256:	f080 8088 	bcs.w	801036a <_scanf_float+0x172>
 801025a:	2b2d      	cmp	r3, #45	; 0x2d
 801025c:	f000 8090 	beq.w	8010380 <_scanf_float+0x188>
 8010260:	d815      	bhi.n	801028e <_scanf_float+0x96>
 8010262:	2b2b      	cmp	r3, #43	; 0x2b
 8010264:	f000 808c 	beq.w	8010380 <_scanf_float+0x188>
 8010268:	f1b9 0f00 	cmp.w	r9, #0
 801026c:	d003      	beq.n	8010276 <_scanf_float+0x7e>
 801026e:	6823      	ldr	r3, [r4, #0]
 8010270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	3a01      	subs	r2, #1
 8010278:	2a01      	cmp	r2, #1
 801027a:	f200 80ea 	bhi.w	8010452 <_scanf_float+0x25a>
 801027e:	4545      	cmp	r5, r8
 8010280:	f200 80dc 	bhi.w	801043c <_scanf_float+0x244>
 8010284:	2601      	movs	r6, #1
 8010286:	4630      	mov	r0, r6
 8010288:	b007      	add	sp, #28
 801028a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028e:	2b2e      	cmp	r3, #46	; 0x2e
 8010290:	f000 809f 	beq.w	80103d2 <_scanf_float+0x1da>
 8010294:	2b30      	cmp	r3, #48	; 0x30
 8010296:	d1e7      	bne.n	8010268 <_scanf_float+0x70>
 8010298:	6820      	ldr	r0, [r4, #0]
 801029a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801029e:	d064      	beq.n	801036a <_scanf_float+0x172>
 80102a0:	9b01      	ldr	r3, [sp, #4]
 80102a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80102a6:	6020      	str	r0, [r4, #0]
 80102a8:	f109 0901 	add.w	r9, r9, #1
 80102ac:	b11b      	cbz	r3, 80102b6 <_scanf_float+0xbe>
 80102ae:	3b01      	subs	r3, #1
 80102b0:	3101      	adds	r1, #1
 80102b2:	9301      	str	r3, [sp, #4]
 80102b4:	60a1      	str	r1, [r4, #8]
 80102b6:	68a3      	ldr	r3, [r4, #8]
 80102b8:	3b01      	subs	r3, #1
 80102ba:	60a3      	str	r3, [r4, #8]
 80102bc:	6923      	ldr	r3, [r4, #16]
 80102be:	3301      	adds	r3, #1
 80102c0:	6123      	str	r3, [r4, #16]
 80102c2:	6873      	ldr	r3, [r6, #4]
 80102c4:	3b01      	subs	r3, #1
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	6073      	str	r3, [r6, #4]
 80102ca:	f340 80ac 	ble.w	8010426 <_scanf_float+0x22e>
 80102ce:	6833      	ldr	r3, [r6, #0]
 80102d0:	3301      	adds	r3, #1
 80102d2:	6033      	str	r3, [r6, #0]
 80102d4:	e7b5      	b.n	8010242 <_scanf_float+0x4a>
 80102d6:	2b45      	cmp	r3, #69	; 0x45
 80102d8:	f000 8085 	beq.w	80103e6 <_scanf_float+0x1ee>
 80102dc:	2b46      	cmp	r3, #70	; 0x46
 80102de:	d06a      	beq.n	80103b6 <_scanf_float+0x1be>
 80102e0:	2b41      	cmp	r3, #65	; 0x41
 80102e2:	d1c1      	bne.n	8010268 <_scanf_float+0x70>
 80102e4:	2a01      	cmp	r2, #1
 80102e6:	d1bf      	bne.n	8010268 <_scanf_float+0x70>
 80102e8:	2202      	movs	r2, #2
 80102ea:	e046      	b.n	801037a <_scanf_float+0x182>
 80102ec:	2b65      	cmp	r3, #101	; 0x65
 80102ee:	d07a      	beq.n	80103e6 <_scanf_float+0x1ee>
 80102f0:	d818      	bhi.n	8010324 <_scanf_float+0x12c>
 80102f2:	2b54      	cmp	r3, #84	; 0x54
 80102f4:	d066      	beq.n	80103c4 <_scanf_float+0x1cc>
 80102f6:	d811      	bhi.n	801031c <_scanf_float+0x124>
 80102f8:	2b4e      	cmp	r3, #78	; 0x4e
 80102fa:	d1b5      	bne.n	8010268 <_scanf_float+0x70>
 80102fc:	2a00      	cmp	r2, #0
 80102fe:	d146      	bne.n	801038e <_scanf_float+0x196>
 8010300:	f1b9 0f00 	cmp.w	r9, #0
 8010304:	d145      	bne.n	8010392 <_scanf_float+0x19a>
 8010306:	6821      	ldr	r1, [r4, #0]
 8010308:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801030c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010310:	d13f      	bne.n	8010392 <_scanf_float+0x19a>
 8010312:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010316:	6021      	str	r1, [r4, #0]
 8010318:	2201      	movs	r2, #1
 801031a:	e02e      	b.n	801037a <_scanf_float+0x182>
 801031c:	2b59      	cmp	r3, #89	; 0x59
 801031e:	d01e      	beq.n	801035e <_scanf_float+0x166>
 8010320:	2b61      	cmp	r3, #97	; 0x61
 8010322:	e7de      	b.n	80102e2 <_scanf_float+0xea>
 8010324:	2b6e      	cmp	r3, #110	; 0x6e
 8010326:	d0e9      	beq.n	80102fc <_scanf_float+0x104>
 8010328:	d815      	bhi.n	8010356 <_scanf_float+0x15e>
 801032a:	2b66      	cmp	r3, #102	; 0x66
 801032c:	d043      	beq.n	80103b6 <_scanf_float+0x1be>
 801032e:	2b69      	cmp	r3, #105	; 0x69
 8010330:	d19a      	bne.n	8010268 <_scanf_float+0x70>
 8010332:	f1bb 0f00 	cmp.w	fp, #0
 8010336:	d138      	bne.n	80103aa <_scanf_float+0x1b2>
 8010338:	f1b9 0f00 	cmp.w	r9, #0
 801033c:	d197      	bne.n	801026e <_scanf_float+0x76>
 801033e:	6821      	ldr	r1, [r4, #0]
 8010340:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010344:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010348:	d195      	bne.n	8010276 <_scanf_float+0x7e>
 801034a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801034e:	6021      	str	r1, [r4, #0]
 8010350:	f04f 0b01 	mov.w	fp, #1
 8010354:	e011      	b.n	801037a <_scanf_float+0x182>
 8010356:	2b74      	cmp	r3, #116	; 0x74
 8010358:	d034      	beq.n	80103c4 <_scanf_float+0x1cc>
 801035a:	2b79      	cmp	r3, #121	; 0x79
 801035c:	d184      	bne.n	8010268 <_scanf_float+0x70>
 801035e:	f1bb 0f07 	cmp.w	fp, #7
 8010362:	d181      	bne.n	8010268 <_scanf_float+0x70>
 8010364:	f04f 0b08 	mov.w	fp, #8
 8010368:	e007      	b.n	801037a <_scanf_float+0x182>
 801036a:	eb12 0f0b 	cmn.w	r2, fp
 801036e:	f47f af7b 	bne.w	8010268 <_scanf_float+0x70>
 8010372:	6821      	ldr	r1, [r4, #0]
 8010374:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010378:	6021      	str	r1, [r4, #0]
 801037a:	702b      	strb	r3, [r5, #0]
 801037c:	3501      	adds	r5, #1
 801037e:	e79a      	b.n	80102b6 <_scanf_float+0xbe>
 8010380:	6821      	ldr	r1, [r4, #0]
 8010382:	0608      	lsls	r0, r1, #24
 8010384:	f57f af70 	bpl.w	8010268 <_scanf_float+0x70>
 8010388:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801038c:	e7f4      	b.n	8010378 <_scanf_float+0x180>
 801038e:	2a02      	cmp	r2, #2
 8010390:	d047      	beq.n	8010422 <_scanf_float+0x22a>
 8010392:	f1bb 0f01 	cmp.w	fp, #1
 8010396:	d003      	beq.n	80103a0 <_scanf_float+0x1a8>
 8010398:	f1bb 0f04 	cmp.w	fp, #4
 801039c:	f47f af64 	bne.w	8010268 <_scanf_float+0x70>
 80103a0:	f10b 0b01 	add.w	fp, fp, #1
 80103a4:	fa5f fb8b 	uxtb.w	fp, fp
 80103a8:	e7e7      	b.n	801037a <_scanf_float+0x182>
 80103aa:	f1bb 0f03 	cmp.w	fp, #3
 80103ae:	d0f7      	beq.n	80103a0 <_scanf_float+0x1a8>
 80103b0:	f1bb 0f05 	cmp.w	fp, #5
 80103b4:	e7f2      	b.n	801039c <_scanf_float+0x1a4>
 80103b6:	f1bb 0f02 	cmp.w	fp, #2
 80103ba:	f47f af55 	bne.w	8010268 <_scanf_float+0x70>
 80103be:	f04f 0b03 	mov.w	fp, #3
 80103c2:	e7da      	b.n	801037a <_scanf_float+0x182>
 80103c4:	f1bb 0f06 	cmp.w	fp, #6
 80103c8:	f47f af4e 	bne.w	8010268 <_scanf_float+0x70>
 80103cc:	f04f 0b07 	mov.w	fp, #7
 80103d0:	e7d3      	b.n	801037a <_scanf_float+0x182>
 80103d2:	6821      	ldr	r1, [r4, #0]
 80103d4:	0588      	lsls	r0, r1, #22
 80103d6:	f57f af47 	bpl.w	8010268 <_scanf_float+0x70>
 80103da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80103de:	6021      	str	r1, [r4, #0]
 80103e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80103e4:	e7c9      	b.n	801037a <_scanf_float+0x182>
 80103e6:	6821      	ldr	r1, [r4, #0]
 80103e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80103ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80103f0:	d006      	beq.n	8010400 <_scanf_float+0x208>
 80103f2:	0548      	lsls	r0, r1, #21
 80103f4:	f57f af38 	bpl.w	8010268 <_scanf_float+0x70>
 80103f8:	f1b9 0f00 	cmp.w	r9, #0
 80103fc:	f43f af3b 	beq.w	8010276 <_scanf_float+0x7e>
 8010400:	0588      	lsls	r0, r1, #22
 8010402:	bf58      	it	pl
 8010404:	9802      	ldrpl	r0, [sp, #8]
 8010406:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801040a:	bf58      	it	pl
 801040c:	eba9 0000 	subpl.w	r0, r9, r0
 8010410:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010414:	bf58      	it	pl
 8010416:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801041a:	6021      	str	r1, [r4, #0]
 801041c:	f04f 0900 	mov.w	r9, #0
 8010420:	e7ab      	b.n	801037a <_scanf_float+0x182>
 8010422:	2203      	movs	r2, #3
 8010424:	e7a9      	b.n	801037a <_scanf_float+0x182>
 8010426:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801042a:	9205      	str	r2, [sp, #20]
 801042c:	4631      	mov	r1, r6
 801042e:	4638      	mov	r0, r7
 8010430:	4798      	blx	r3
 8010432:	9a05      	ldr	r2, [sp, #20]
 8010434:	2800      	cmp	r0, #0
 8010436:	f43f af04 	beq.w	8010242 <_scanf_float+0x4a>
 801043a:	e715      	b.n	8010268 <_scanf_float+0x70>
 801043c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010440:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010444:	4632      	mov	r2, r6
 8010446:	4638      	mov	r0, r7
 8010448:	4798      	blx	r3
 801044a:	6923      	ldr	r3, [r4, #16]
 801044c:	3b01      	subs	r3, #1
 801044e:	6123      	str	r3, [r4, #16]
 8010450:	e715      	b.n	801027e <_scanf_float+0x86>
 8010452:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010456:	2b06      	cmp	r3, #6
 8010458:	d80a      	bhi.n	8010470 <_scanf_float+0x278>
 801045a:	f1bb 0f02 	cmp.w	fp, #2
 801045e:	d966      	bls.n	801052e <_scanf_float+0x336>
 8010460:	f1ab 0b03 	sub.w	fp, fp, #3
 8010464:	fa5f fb8b 	uxtb.w	fp, fp
 8010468:	eba5 0b0b 	sub.w	fp, r5, fp
 801046c:	455d      	cmp	r5, fp
 801046e:	d149      	bne.n	8010504 <_scanf_float+0x30c>
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	05da      	lsls	r2, r3, #23
 8010474:	d51f      	bpl.n	80104b6 <_scanf_float+0x2be>
 8010476:	055b      	lsls	r3, r3, #21
 8010478:	d466      	bmi.n	8010548 <_scanf_float+0x350>
 801047a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801047e:	6923      	ldr	r3, [r4, #16]
 8010480:	2965      	cmp	r1, #101	; 0x65
 8010482:	f103 33ff 	add.w	r3, r3, #4294967295
 8010486:	f105 3bff 	add.w	fp, r5, #4294967295
 801048a:	6123      	str	r3, [r4, #16]
 801048c:	d00d      	beq.n	80104aa <_scanf_float+0x2b2>
 801048e:	2945      	cmp	r1, #69	; 0x45
 8010490:	d00b      	beq.n	80104aa <_scanf_float+0x2b2>
 8010492:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010496:	4632      	mov	r2, r6
 8010498:	4638      	mov	r0, r7
 801049a:	4798      	blx	r3
 801049c:	6923      	ldr	r3, [r4, #16]
 801049e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80104a2:	3b01      	subs	r3, #1
 80104a4:	f1a5 0b02 	sub.w	fp, r5, #2
 80104a8:	6123      	str	r3, [r4, #16]
 80104aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104ae:	4632      	mov	r2, r6
 80104b0:	4638      	mov	r0, r7
 80104b2:	4798      	blx	r3
 80104b4:	465d      	mov	r5, fp
 80104b6:	6826      	ldr	r6, [r4, #0]
 80104b8:	f016 0610 	ands.w	r6, r6, #16
 80104bc:	d170      	bne.n	80105a0 <_scanf_float+0x3a8>
 80104be:	702e      	strb	r6, [r5, #0]
 80104c0:	6823      	ldr	r3, [r4, #0]
 80104c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80104c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80104ca:	d140      	bne.n	801054e <_scanf_float+0x356>
 80104cc:	9b02      	ldr	r3, [sp, #8]
 80104ce:	eba9 0303 	sub.w	r3, r9, r3
 80104d2:	425a      	negs	r2, r3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d147      	bne.n	8010568 <_scanf_float+0x370>
 80104d8:	2200      	movs	r2, #0
 80104da:	4638      	mov	r0, r7
 80104dc:	4641      	mov	r1, r8
 80104de:	f000 ffab 	bl	8011438 <_strtod_r>
 80104e2:	6820      	ldr	r0, [r4, #0]
 80104e4:	f8da 3000 	ldr.w	r3, [sl]
 80104e8:	f010 0f02 	tst.w	r0, #2
 80104ec:	f103 0204 	add.w	r2, r3, #4
 80104f0:	f8ca 2000 	str.w	r2, [sl]
 80104f4:	d043      	beq.n	801057e <_scanf_float+0x386>
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	ed83 0b00 	vstr	d0, [r3]
 80104fc:	68e3      	ldr	r3, [r4, #12]
 80104fe:	3301      	adds	r3, #1
 8010500:	60e3      	str	r3, [r4, #12]
 8010502:	e6c0      	b.n	8010286 <_scanf_float+0x8e>
 8010504:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010508:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801050c:	4632      	mov	r2, r6
 801050e:	4638      	mov	r0, r7
 8010510:	4798      	blx	r3
 8010512:	6923      	ldr	r3, [r4, #16]
 8010514:	3b01      	subs	r3, #1
 8010516:	6123      	str	r3, [r4, #16]
 8010518:	e7a8      	b.n	801046c <_scanf_float+0x274>
 801051a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801051e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010522:	4632      	mov	r2, r6
 8010524:	4638      	mov	r0, r7
 8010526:	4798      	blx	r3
 8010528:	6923      	ldr	r3, [r4, #16]
 801052a:	3b01      	subs	r3, #1
 801052c:	6123      	str	r3, [r4, #16]
 801052e:	4545      	cmp	r5, r8
 8010530:	d8f3      	bhi.n	801051a <_scanf_float+0x322>
 8010532:	e6a7      	b.n	8010284 <_scanf_float+0x8c>
 8010534:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010538:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801053c:	4632      	mov	r2, r6
 801053e:	4638      	mov	r0, r7
 8010540:	4798      	blx	r3
 8010542:	6923      	ldr	r3, [r4, #16]
 8010544:	3b01      	subs	r3, #1
 8010546:	6123      	str	r3, [r4, #16]
 8010548:	4545      	cmp	r5, r8
 801054a:	d8f3      	bhi.n	8010534 <_scanf_float+0x33c>
 801054c:	e69a      	b.n	8010284 <_scanf_float+0x8c>
 801054e:	9b03      	ldr	r3, [sp, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d0c1      	beq.n	80104d8 <_scanf_float+0x2e0>
 8010554:	9904      	ldr	r1, [sp, #16]
 8010556:	230a      	movs	r3, #10
 8010558:	4632      	mov	r2, r6
 801055a:	3101      	adds	r1, #1
 801055c:	4638      	mov	r0, r7
 801055e:	f000 fff7 	bl	8011550 <_strtol_r>
 8010562:	9b03      	ldr	r3, [sp, #12]
 8010564:	9d04      	ldr	r5, [sp, #16]
 8010566:	1ac2      	subs	r2, r0, r3
 8010568:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801056c:	429d      	cmp	r5, r3
 801056e:	bf28      	it	cs
 8010570:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010574:	490b      	ldr	r1, [pc, #44]	; (80105a4 <_scanf_float+0x3ac>)
 8010576:	4628      	mov	r0, r5
 8010578:	f000 f8ec 	bl	8010754 <siprintf>
 801057c:	e7ac      	b.n	80104d8 <_scanf_float+0x2e0>
 801057e:	f010 0004 	ands.w	r0, r0, #4
 8010582:	d1b8      	bne.n	80104f6 <_scanf_float+0x2fe>
 8010584:	eeb4 0b40 	vcmp.f64	d0, d0
 8010588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058c:	681d      	ldr	r5, [r3, #0]
 801058e:	d704      	bvc.n	801059a <_scanf_float+0x3a2>
 8010590:	f000 f896 	bl	80106c0 <nanf>
 8010594:	ed85 0a00 	vstr	s0, [r5]
 8010598:	e7b0      	b.n	80104fc <_scanf_float+0x304>
 801059a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801059e:	e7f9      	b.n	8010594 <_scanf_float+0x39c>
 80105a0:	2600      	movs	r6, #0
 80105a2:	e670      	b.n	8010286 <_scanf_float+0x8e>
 80105a4:	08014896 	.word	0x08014896

080105a8 <iprintf>:
 80105a8:	b40f      	push	{r0, r1, r2, r3}
 80105aa:	4b0a      	ldr	r3, [pc, #40]	; (80105d4 <iprintf+0x2c>)
 80105ac:	b513      	push	{r0, r1, r4, lr}
 80105ae:	681c      	ldr	r4, [r3, #0]
 80105b0:	b124      	cbz	r4, 80105bc <iprintf+0x14>
 80105b2:	69a3      	ldr	r3, [r4, #24]
 80105b4:	b913      	cbnz	r3, 80105bc <iprintf+0x14>
 80105b6:	4620      	mov	r0, r4
 80105b8:	f001 ff86 	bl	80124c8 <__sinit>
 80105bc:	ab05      	add	r3, sp, #20
 80105be:	9a04      	ldr	r2, [sp, #16]
 80105c0:	68a1      	ldr	r1, [r4, #8]
 80105c2:	9301      	str	r3, [sp, #4]
 80105c4:	4620      	mov	r0, r4
 80105c6:	f003 fb01 	bl	8013bcc <_vfiprintf_r>
 80105ca:	b002      	add	sp, #8
 80105cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105d0:	b004      	add	sp, #16
 80105d2:	4770      	bx	lr
 80105d4:	2000086c 	.word	0x2000086c

080105d8 <_puts_r>:
 80105d8:	b570      	push	{r4, r5, r6, lr}
 80105da:	460e      	mov	r6, r1
 80105dc:	4605      	mov	r5, r0
 80105de:	b118      	cbz	r0, 80105e8 <_puts_r+0x10>
 80105e0:	6983      	ldr	r3, [r0, #24]
 80105e2:	b90b      	cbnz	r3, 80105e8 <_puts_r+0x10>
 80105e4:	f001 ff70 	bl	80124c8 <__sinit>
 80105e8:	69ab      	ldr	r3, [r5, #24]
 80105ea:	68ac      	ldr	r4, [r5, #8]
 80105ec:	b913      	cbnz	r3, 80105f4 <_puts_r+0x1c>
 80105ee:	4628      	mov	r0, r5
 80105f0:	f001 ff6a 	bl	80124c8 <__sinit>
 80105f4:	4b23      	ldr	r3, [pc, #140]	; (8010684 <_puts_r+0xac>)
 80105f6:	429c      	cmp	r4, r3
 80105f8:	d117      	bne.n	801062a <_puts_r+0x52>
 80105fa:	686c      	ldr	r4, [r5, #4]
 80105fc:	89a3      	ldrh	r3, [r4, #12]
 80105fe:	071b      	lsls	r3, r3, #28
 8010600:	d51d      	bpl.n	801063e <_puts_r+0x66>
 8010602:	6923      	ldr	r3, [r4, #16]
 8010604:	b1db      	cbz	r3, 801063e <_puts_r+0x66>
 8010606:	3e01      	subs	r6, #1
 8010608:	68a3      	ldr	r3, [r4, #8]
 801060a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801060e:	3b01      	subs	r3, #1
 8010610:	60a3      	str	r3, [r4, #8]
 8010612:	b9e9      	cbnz	r1, 8010650 <_puts_r+0x78>
 8010614:	2b00      	cmp	r3, #0
 8010616:	da2e      	bge.n	8010676 <_puts_r+0x9e>
 8010618:	4622      	mov	r2, r4
 801061a:	210a      	movs	r1, #10
 801061c:	4628      	mov	r0, r5
 801061e:	f000 ffa9 	bl	8011574 <__swbuf_r>
 8010622:	3001      	adds	r0, #1
 8010624:	d011      	beq.n	801064a <_puts_r+0x72>
 8010626:	200a      	movs	r0, #10
 8010628:	e011      	b.n	801064e <_puts_r+0x76>
 801062a:	4b17      	ldr	r3, [pc, #92]	; (8010688 <_puts_r+0xb0>)
 801062c:	429c      	cmp	r4, r3
 801062e:	d101      	bne.n	8010634 <_puts_r+0x5c>
 8010630:	68ac      	ldr	r4, [r5, #8]
 8010632:	e7e3      	b.n	80105fc <_puts_r+0x24>
 8010634:	4b15      	ldr	r3, [pc, #84]	; (801068c <_puts_r+0xb4>)
 8010636:	429c      	cmp	r4, r3
 8010638:	bf08      	it	eq
 801063a:	68ec      	ldreq	r4, [r5, #12]
 801063c:	e7de      	b.n	80105fc <_puts_r+0x24>
 801063e:	4621      	mov	r1, r4
 8010640:	4628      	mov	r0, r5
 8010642:	f000 fffb 	bl	801163c <__swsetup_r>
 8010646:	2800      	cmp	r0, #0
 8010648:	d0dd      	beq.n	8010606 <_puts_r+0x2e>
 801064a:	f04f 30ff 	mov.w	r0, #4294967295
 801064e:	bd70      	pop	{r4, r5, r6, pc}
 8010650:	2b00      	cmp	r3, #0
 8010652:	da04      	bge.n	801065e <_puts_r+0x86>
 8010654:	69a2      	ldr	r2, [r4, #24]
 8010656:	429a      	cmp	r2, r3
 8010658:	dc06      	bgt.n	8010668 <_puts_r+0x90>
 801065a:	290a      	cmp	r1, #10
 801065c:	d004      	beq.n	8010668 <_puts_r+0x90>
 801065e:	6823      	ldr	r3, [r4, #0]
 8010660:	1c5a      	adds	r2, r3, #1
 8010662:	6022      	str	r2, [r4, #0]
 8010664:	7019      	strb	r1, [r3, #0]
 8010666:	e7cf      	b.n	8010608 <_puts_r+0x30>
 8010668:	4622      	mov	r2, r4
 801066a:	4628      	mov	r0, r5
 801066c:	f000 ff82 	bl	8011574 <__swbuf_r>
 8010670:	3001      	adds	r0, #1
 8010672:	d1c9      	bne.n	8010608 <_puts_r+0x30>
 8010674:	e7e9      	b.n	801064a <_puts_r+0x72>
 8010676:	6823      	ldr	r3, [r4, #0]
 8010678:	200a      	movs	r0, #10
 801067a:	1c5a      	adds	r2, r3, #1
 801067c:	6022      	str	r2, [r4, #0]
 801067e:	7018      	strb	r0, [r3, #0]
 8010680:	e7e5      	b.n	801064e <_puts_r+0x76>
 8010682:	bf00      	nop
 8010684:	08014920 	.word	0x08014920
 8010688:	08014940 	.word	0x08014940
 801068c:	08014900 	.word	0x08014900

08010690 <puts>:
 8010690:	4b02      	ldr	r3, [pc, #8]	; (801069c <puts+0xc>)
 8010692:	4601      	mov	r1, r0
 8010694:	6818      	ldr	r0, [r3, #0]
 8010696:	f7ff bf9f 	b.w	80105d8 <_puts_r>
 801069a:	bf00      	nop
 801069c:	2000086c 	.word	0x2000086c

080106a0 <_sbrk_r>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	4c06      	ldr	r4, [pc, #24]	; (80106bc <_sbrk_r+0x1c>)
 80106a4:	2300      	movs	r3, #0
 80106a6:	4605      	mov	r5, r0
 80106a8:	4608      	mov	r0, r1
 80106aa:	6023      	str	r3, [r4, #0]
 80106ac:	f003 fec8 	bl	8014440 <_sbrk>
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	d102      	bne.n	80106ba <_sbrk_r+0x1a>
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	b103      	cbz	r3, 80106ba <_sbrk_r+0x1a>
 80106b8:	602b      	str	r3, [r5, #0]
 80106ba:	bd38      	pop	{r3, r4, r5, pc}
 80106bc:	2000ecb0 	.word	0x2000ecb0

080106c0 <nanf>:
 80106c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80106c8 <nanf+0x8>
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop
 80106c8:	7fc00000 	.word	0x7fc00000

080106cc <_raise_r>:
 80106cc:	291f      	cmp	r1, #31
 80106ce:	b538      	push	{r3, r4, r5, lr}
 80106d0:	4604      	mov	r4, r0
 80106d2:	460d      	mov	r5, r1
 80106d4:	d904      	bls.n	80106e0 <_raise_r+0x14>
 80106d6:	2316      	movs	r3, #22
 80106d8:	6003      	str	r3, [r0, #0]
 80106da:	f04f 30ff 	mov.w	r0, #4294967295
 80106de:	bd38      	pop	{r3, r4, r5, pc}
 80106e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106e2:	b112      	cbz	r2, 80106ea <_raise_r+0x1e>
 80106e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106e8:	b94b      	cbnz	r3, 80106fe <_raise_r+0x32>
 80106ea:	4620      	mov	r0, r4
 80106ec:	f000 f830 	bl	8010750 <_getpid_r>
 80106f0:	462a      	mov	r2, r5
 80106f2:	4601      	mov	r1, r0
 80106f4:	4620      	mov	r0, r4
 80106f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106fa:	f000 b817 	b.w	801072c <_kill_r>
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d00a      	beq.n	8010718 <_raise_r+0x4c>
 8010702:	1c59      	adds	r1, r3, #1
 8010704:	d103      	bne.n	801070e <_raise_r+0x42>
 8010706:	2316      	movs	r3, #22
 8010708:	6003      	str	r3, [r0, #0]
 801070a:	2001      	movs	r0, #1
 801070c:	e7e7      	b.n	80106de <_raise_r+0x12>
 801070e:	2400      	movs	r4, #0
 8010710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010714:	4628      	mov	r0, r5
 8010716:	4798      	blx	r3
 8010718:	2000      	movs	r0, #0
 801071a:	e7e0      	b.n	80106de <_raise_r+0x12>

0801071c <raise>:
 801071c:	4b02      	ldr	r3, [pc, #8]	; (8010728 <raise+0xc>)
 801071e:	4601      	mov	r1, r0
 8010720:	6818      	ldr	r0, [r3, #0]
 8010722:	f7ff bfd3 	b.w	80106cc <_raise_r>
 8010726:	bf00      	nop
 8010728:	2000086c 	.word	0x2000086c

0801072c <_kill_r>:
 801072c:	b538      	push	{r3, r4, r5, lr}
 801072e:	4c07      	ldr	r4, [pc, #28]	; (801074c <_kill_r+0x20>)
 8010730:	2300      	movs	r3, #0
 8010732:	4605      	mov	r5, r0
 8010734:	4608      	mov	r0, r1
 8010736:	4611      	mov	r1, r2
 8010738:	6023      	str	r3, [r4, #0]
 801073a:	f003 fe69 	bl	8014410 <_kill>
 801073e:	1c43      	adds	r3, r0, #1
 8010740:	d102      	bne.n	8010748 <_kill_r+0x1c>
 8010742:	6823      	ldr	r3, [r4, #0]
 8010744:	b103      	cbz	r3, 8010748 <_kill_r+0x1c>
 8010746:	602b      	str	r3, [r5, #0]
 8010748:	bd38      	pop	{r3, r4, r5, pc}
 801074a:	bf00      	nop
 801074c:	2000ecb0 	.word	0x2000ecb0

08010750 <_getpid_r>:
 8010750:	f003 be4e 	b.w	80143f0 <_getpid>

08010754 <siprintf>:
 8010754:	b40e      	push	{r1, r2, r3}
 8010756:	b500      	push	{lr}
 8010758:	b09c      	sub	sp, #112	; 0x70
 801075a:	ab1d      	add	r3, sp, #116	; 0x74
 801075c:	9002      	str	r0, [sp, #8]
 801075e:	9006      	str	r0, [sp, #24]
 8010760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010764:	4809      	ldr	r0, [pc, #36]	; (801078c <siprintf+0x38>)
 8010766:	9107      	str	r1, [sp, #28]
 8010768:	9104      	str	r1, [sp, #16]
 801076a:	4909      	ldr	r1, [pc, #36]	; (8010790 <siprintf+0x3c>)
 801076c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010770:	9105      	str	r1, [sp, #20]
 8010772:	6800      	ldr	r0, [r0, #0]
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	a902      	add	r1, sp, #8
 8010778:	f002 ff5c 	bl	8013634 <_svfiprintf_r>
 801077c:	9b02      	ldr	r3, [sp, #8]
 801077e:	2200      	movs	r2, #0
 8010780:	701a      	strb	r2, [r3, #0]
 8010782:	b01c      	add	sp, #112	; 0x70
 8010784:	f85d eb04 	ldr.w	lr, [sp], #4
 8010788:	b003      	add	sp, #12
 801078a:	4770      	bx	lr
 801078c:	2000086c 	.word	0x2000086c
 8010790:	ffff0208 	.word	0xffff0208

08010794 <siscanf>:
 8010794:	b40e      	push	{r1, r2, r3}
 8010796:	b530      	push	{r4, r5, lr}
 8010798:	b09c      	sub	sp, #112	; 0x70
 801079a:	ac1f      	add	r4, sp, #124	; 0x7c
 801079c:	f44f 7201 	mov.w	r2, #516	; 0x204
 80107a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80107a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80107a8:	9002      	str	r0, [sp, #8]
 80107aa:	9006      	str	r0, [sp, #24]
 80107ac:	f7ef fd52 	bl	8000254 <strlen>
 80107b0:	4b0b      	ldr	r3, [pc, #44]	; (80107e0 <siscanf+0x4c>)
 80107b2:	9003      	str	r0, [sp, #12]
 80107b4:	9007      	str	r0, [sp, #28]
 80107b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80107b8:	480a      	ldr	r0, [pc, #40]	; (80107e4 <siscanf+0x50>)
 80107ba:	9401      	str	r4, [sp, #4]
 80107bc:	2300      	movs	r3, #0
 80107be:	930f      	str	r3, [sp, #60]	; 0x3c
 80107c0:	9314      	str	r3, [sp, #80]	; 0x50
 80107c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80107c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80107ca:	462a      	mov	r2, r5
 80107cc:	4623      	mov	r3, r4
 80107ce:	a902      	add	r1, sp, #8
 80107d0:	6800      	ldr	r0, [r0, #0]
 80107d2:	f003 f881 	bl	80138d8 <__ssvfiscanf_r>
 80107d6:	b01c      	add	sp, #112	; 0x70
 80107d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80107dc:	b003      	add	sp, #12
 80107de:	4770      	bx	lr
 80107e0:	0801080b 	.word	0x0801080b
 80107e4:	2000086c 	.word	0x2000086c

080107e8 <__sread>:
 80107e8:	b510      	push	{r4, lr}
 80107ea:	460c      	mov	r4, r1
 80107ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107f0:	f003 fc5a 	bl	80140a8 <_read_r>
 80107f4:	2800      	cmp	r0, #0
 80107f6:	bfab      	itete	ge
 80107f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107fa:	89a3      	ldrhlt	r3, [r4, #12]
 80107fc:	181b      	addge	r3, r3, r0
 80107fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010802:	bfac      	ite	ge
 8010804:	6563      	strge	r3, [r4, #84]	; 0x54
 8010806:	81a3      	strhlt	r3, [r4, #12]
 8010808:	bd10      	pop	{r4, pc}

0801080a <__seofread>:
 801080a:	2000      	movs	r0, #0
 801080c:	4770      	bx	lr

0801080e <__swrite>:
 801080e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010812:	461f      	mov	r7, r3
 8010814:	898b      	ldrh	r3, [r1, #12]
 8010816:	05db      	lsls	r3, r3, #23
 8010818:	4605      	mov	r5, r0
 801081a:	460c      	mov	r4, r1
 801081c:	4616      	mov	r6, r2
 801081e:	d505      	bpl.n	801082c <__swrite+0x1e>
 8010820:	2302      	movs	r3, #2
 8010822:	2200      	movs	r2, #0
 8010824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010828:	f002 fa20 	bl	8012c6c <_lseek_r>
 801082c:	89a3      	ldrh	r3, [r4, #12]
 801082e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010836:	81a3      	strh	r3, [r4, #12]
 8010838:	4632      	mov	r2, r6
 801083a:	463b      	mov	r3, r7
 801083c:	4628      	mov	r0, r5
 801083e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010842:	f000 bee9 	b.w	8011618 <_write_r>

08010846 <__sseek>:
 8010846:	b510      	push	{r4, lr}
 8010848:	460c      	mov	r4, r1
 801084a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801084e:	f002 fa0d 	bl	8012c6c <_lseek_r>
 8010852:	1c43      	adds	r3, r0, #1
 8010854:	89a3      	ldrh	r3, [r4, #12]
 8010856:	bf15      	itete	ne
 8010858:	6560      	strne	r0, [r4, #84]	; 0x54
 801085a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801085e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010862:	81a3      	strheq	r3, [r4, #12]
 8010864:	bf18      	it	ne
 8010866:	81a3      	strhne	r3, [r4, #12]
 8010868:	bd10      	pop	{r4, pc}

0801086a <__sclose>:
 801086a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801086e:	f000 bf53 	b.w	8011718 <_close_r>

08010872 <sulp>:
 8010872:	b570      	push	{r4, r5, r6, lr}
 8010874:	4604      	mov	r4, r0
 8010876:	460d      	mov	r5, r1
 8010878:	4616      	mov	r6, r2
 801087a:	ec45 4b10 	vmov	d0, r4, r5
 801087e:	f002 fd4b 	bl	8013318 <__ulp>
 8010882:	b17e      	cbz	r6, 80108a4 <sulp+0x32>
 8010884:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010888:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801088c:	2b00      	cmp	r3, #0
 801088e:	dd09      	ble.n	80108a4 <sulp+0x32>
 8010890:	051b      	lsls	r3, r3, #20
 8010892:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010896:	2000      	movs	r0, #0
 8010898:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801089c:	ec41 0b17 	vmov	d7, r0, r1
 80108a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80108a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080108a8 <_strtod_l>:
 80108a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ac:	ed2d 8b0c 	vpush	{d8-d13}
 80108b0:	4698      	mov	r8, r3
 80108b2:	b09d      	sub	sp, #116	; 0x74
 80108b4:	2300      	movs	r3, #0
 80108b6:	4604      	mov	r4, r0
 80108b8:	4640      	mov	r0, r8
 80108ba:	460e      	mov	r6, r1
 80108bc:	9214      	str	r2, [sp, #80]	; 0x50
 80108be:	9318      	str	r3, [sp, #96]	; 0x60
 80108c0:	f002 f9c4 	bl	8012c4c <__localeconv_l>
 80108c4:	4681      	mov	r9, r0
 80108c6:	6800      	ldr	r0, [r0, #0]
 80108c8:	f7ef fcc4 	bl	8000254 <strlen>
 80108cc:	f04f 0a00 	mov.w	sl, #0
 80108d0:	4607      	mov	r7, r0
 80108d2:	f04f 0b00 	mov.w	fp, #0
 80108d6:	9617      	str	r6, [sp, #92]	; 0x5c
 80108d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108da:	781a      	ldrb	r2, [r3, #0]
 80108dc:	2a0d      	cmp	r2, #13
 80108de:	d834      	bhi.n	801094a <_strtod_l+0xa2>
 80108e0:	2a09      	cmp	r2, #9
 80108e2:	d238      	bcs.n	8010956 <_strtod_l+0xae>
 80108e4:	2a00      	cmp	r2, #0
 80108e6:	d040      	beq.n	801096a <_strtod_l+0xc2>
 80108e8:	2300      	movs	r3, #0
 80108ea:	930d      	str	r3, [sp, #52]	; 0x34
 80108ec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80108ee:	782b      	ldrb	r3, [r5, #0]
 80108f0:	2b30      	cmp	r3, #48	; 0x30
 80108f2:	f040 80b3 	bne.w	8010a5c <_strtod_l+0x1b4>
 80108f6:	786b      	ldrb	r3, [r5, #1]
 80108f8:	2b58      	cmp	r3, #88	; 0x58
 80108fa:	d001      	beq.n	8010900 <_strtod_l+0x58>
 80108fc:	2b78      	cmp	r3, #120	; 0x78
 80108fe:	d169      	bne.n	80109d4 <_strtod_l+0x12c>
 8010900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010902:	9301      	str	r3, [sp, #4]
 8010904:	ab18      	add	r3, sp, #96	; 0x60
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	f8cd 8008 	str.w	r8, [sp, #8]
 801090c:	ab19      	add	r3, sp, #100	; 0x64
 801090e:	4a8f      	ldr	r2, [pc, #572]	; (8010b4c <_strtod_l+0x2a4>)
 8010910:	a917      	add	r1, sp, #92	; 0x5c
 8010912:	4620      	mov	r0, r4
 8010914:	f001 feb1 	bl	801267a <__gethex>
 8010918:	f010 0607 	ands.w	r6, r0, #7
 801091c:	4607      	mov	r7, r0
 801091e:	d005      	beq.n	801092c <_strtod_l+0x84>
 8010920:	2e06      	cmp	r6, #6
 8010922:	d12c      	bne.n	801097e <_strtod_l+0xd6>
 8010924:	3501      	adds	r5, #1
 8010926:	2300      	movs	r3, #0
 8010928:	9517      	str	r5, [sp, #92]	; 0x5c
 801092a:	930d      	str	r3, [sp, #52]	; 0x34
 801092c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801092e:	2b00      	cmp	r3, #0
 8010930:	f040 855e 	bne.w	80113f0 <_strtod_l+0xb48>
 8010934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010936:	b1eb      	cbz	r3, 8010974 <_strtod_l+0xcc>
 8010938:	ec4b ab17 	vmov	d7, sl, fp
 801093c:	eeb1 0b47 	vneg.f64	d0, d7
 8010940:	b01d      	add	sp, #116	; 0x74
 8010942:	ecbd 8b0c 	vpop	{d8-d13}
 8010946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801094a:	2a2b      	cmp	r2, #43	; 0x2b
 801094c:	d015      	beq.n	801097a <_strtod_l+0xd2>
 801094e:	2a2d      	cmp	r2, #45	; 0x2d
 8010950:	d004      	beq.n	801095c <_strtod_l+0xb4>
 8010952:	2a20      	cmp	r2, #32
 8010954:	d1c8      	bne.n	80108e8 <_strtod_l+0x40>
 8010956:	3301      	adds	r3, #1
 8010958:	9317      	str	r3, [sp, #92]	; 0x5c
 801095a:	e7bd      	b.n	80108d8 <_strtod_l+0x30>
 801095c:	2201      	movs	r2, #1
 801095e:	920d      	str	r2, [sp, #52]	; 0x34
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	9217      	str	r2, [sp, #92]	; 0x5c
 8010964:	785b      	ldrb	r3, [r3, #1]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d1c0      	bne.n	80108ec <_strtod_l+0x44>
 801096a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801096c:	9617      	str	r6, [sp, #92]	; 0x5c
 801096e:	2b00      	cmp	r3, #0
 8010970:	f040 853c 	bne.w	80113ec <_strtod_l+0xb44>
 8010974:	ec4b ab10 	vmov	d0, sl, fp
 8010978:	e7e2      	b.n	8010940 <_strtod_l+0x98>
 801097a:	2200      	movs	r2, #0
 801097c:	e7ef      	b.n	801095e <_strtod_l+0xb6>
 801097e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010980:	b13a      	cbz	r2, 8010992 <_strtod_l+0xea>
 8010982:	2135      	movs	r1, #53	; 0x35
 8010984:	a81a      	add	r0, sp, #104	; 0x68
 8010986:	f002 fdc0 	bl	801350a <__copybits>
 801098a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801098c:	4620      	mov	r0, r4
 801098e:	f002 fa2b 	bl	8012de8 <_Bfree>
 8010992:	3e01      	subs	r6, #1
 8010994:	2e04      	cmp	r6, #4
 8010996:	d806      	bhi.n	80109a6 <_strtod_l+0xfe>
 8010998:	e8df f006 	tbb	[pc, r6]
 801099c:	1714030a 	.word	0x1714030a
 80109a0:	0a          	.byte	0x0a
 80109a1:	00          	.byte	0x00
 80109a2:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80109a6:	073b      	lsls	r3, r7, #28
 80109a8:	d5c0      	bpl.n	801092c <_strtod_l+0x84>
 80109aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80109ae:	e7bd      	b.n	801092c <_strtod_l+0x84>
 80109b0:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80109b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80109b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80109ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80109be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80109c2:	e7f0      	b.n	80109a6 <_strtod_l+0xfe>
 80109c4:	f8df b188 	ldr.w	fp, [pc, #392]	; 8010b50 <_strtod_l+0x2a8>
 80109c8:	e7ed      	b.n	80109a6 <_strtod_l+0xfe>
 80109ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80109ce:	f04f 3aff 	mov.w	sl, #4294967295
 80109d2:	e7e8      	b.n	80109a6 <_strtod_l+0xfe>
 80109d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109d6:	1c5a      	adds	r2, r3, #1
 80109d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80109da:	785b      	ldrb	r3, [r3, #1]
 80109dc:	2b30      	cmp	r3, #48	; 0x30
 80109de:	d0f9      	beq.n	80109d4 <_strtod_l+0x12c>
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d0a3      	beq.n	801092c <_strtod_l+0x84>
 80109e4:	2301      	movs	r3, #1
 80109e6:	930a      	str	r3, [sp, #40]	; 0x28
 80109e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109ea:	930c      	str	r3, [sp, #48]	; 0x30
 80109ec:	2300      	movs	r3, #0
 80109ee:	9306      	str	r3, [sp, #24]
 80109f0:	9308      	str	r3, [sp, #32]
 80109f2:	461d      	mov	r5, r3
 80109f4:	220a      	movs	r2, #10
 80109f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80109f8:	f890 8000 	ldrb.w	r8, [r0]
 80109fc:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8010a00:	b2d9      	uxtb	r1, r3
 8010a02:	2909      	cmp	r1, #9
 8010a04:	d92c      	bls.n	8010a60 <_strtod_l+0x1b8>
 8010a06:	463a      	mov	r2, r7
 8010a08:	f8d9 1000 	ldr.w	r1, [r9]
 8010a0c:	f003 fb90 	bl	8014130 <strncmp>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d035      	beq.n	8010a80 <_strtod_l+0x1d8>
 8010a14:	2000      	movs	r0, #0
 8010a16:	4642      	mov	r2, r8
 8010a18:	462b      	mov	r3, r5
 8010a1a:	4601      	mov	r1, r0
 8010a1c:	9004      	str	r0, [sp, #16]
 8010a1e:	2a65      	cmp	r2, #101	; 0x65
 8010a20:	d001      	beq.n	8010a26 <_strtod_l+0x17e>
 8010a22:	2a45      	cmp	r2, #69	; 0x45
 8010a24:	d117      	bne.n	8010a56 <_strtod_l+0x1ae>
 8010a26:	b923      	cbnz	r3, 8010a32 <_strtod_l+0x18a>
 8010a28:	b910      	cbnz	r0, 8010a30 <_strtod_l+0x188>
 8010a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d09c      	beq.n	801096a <_strtod_l+0xc2>
 8010a30:	2300      	movs	r3, #0
 8010a32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010a34:	1c72      	adds	r2, r6, #1
 8010a36:	9217      	str	r2, [sp, #92]	; 0x5c
 8010a38:	7872      	ldrb	r2, [r6, #1]
 8010a3a:	2a2b      	cmp	r2, #43	; 0x2b
 8010a3c:	f000 8082 	beq.w	8010b44 <_strtod_l+0x29c>
 8010a40:	2a2d      	cmp	r2, #45	; 0x2d
 8010a42:	d079      	beq.n	8010b38 <_strtod_l+0x290>
 8010a44:	f04f 0e00 	mov.w	lr, #0
 8010a48:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010a4c:	f1bc 0f09 	cmp.w	ip, #9
 8010a50:	f240 8086 	bls.w	8010b60 <_strtod_l+0x2b8>
 8010a54:	9617      	str	r6, [sp, #92]	; 0x5c
 8010a56:	f04f 0800 	mov.w	r8, #0
 8010a5a:	e0a8      	b.n	8010bae <_strtod_l+0x306>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	e7c2      	b.n	80109e6 <_strtod_l+0x13e>
 8010a60:	2d08      	cmp	r5, #8
 8010a62:	bfd5      	itete	le
 8010a64:	9908      	ldrle	r1, [sp, #32]
 8010a66:	9906      	ldrgt	r1, [sp, #24]
 8010a68:	fb02 3301 	mlale	r3, r2, r1, r3
 8010a6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010a70:	f100 0001 	add.w	r0, r0, #1
 8010a74:	bfd4      	ite	le
 8010a76:	9308      	strle	r3, [sp, #32]
 8010a78:	9306      	strgt	r3, [sp, #24]
 8010a7a:	3501      	adds	r5, #1
 8010a7c:	9017      	str	r0, [sp, #92]	; 0x5c
 8010a7e:	e7ba      	b.n	80109f6 <_strtod_l+0x14e>
 8010a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a82:	19da      	adds	r2, r3, r7
 8010a84:	9217      	str	r2, [sp, #92]	; 0x5c
 8010a86:	5dda      	ldrb	r2, [r3, r7]
 8010a88:	2d00      	cmp	r5, #0
 8010a8a:	d038      	beq.n	8010afe <_strtod_l+0x256>
 8010a8c:	4601      	mov	r1, r0
 8010a8e:	462b      	mov	r3, r5
 8010a90:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8010a94:	2f09      	cmp	r7, #9
 8010a96:	d913      	bls.n	8010ac0 <_strtod_l+0x218>
 8010a98:	2701      	movs	r7, #1
 8010a9a:	9704      	str	r7, [sp, #16]
 8010a9c:	e7bf      	b.n	8010a1e <_strtod_l+0x176>
 8010a9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010aa0:	1c5a      	adds	r2, r3, #1
 8010aa2:	9217      	str	r2, [sp, #92]	; 0x5c
 8010aa4:	785a      	ldrb	r2, [r3, #1]
 8010aa6:	3001      	adds	r0, #1
 8010aa8:	2a30      	cmp	r2, #48	; 0x30
 8010aaa:	d0f8      	beq.n	8010a9e <_strtod_l+0x1f6>
 8010aac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010ab0:	2b08      	cmp	r3, #8
 8010ab2:	f200 84a2 	bhi.w	80113fa <_strtod_l+0xb52>
 8010ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ab8:	930c      	str	r3, [sp, #48]	; 0x30
 8010aba:	4601      	mov	r1, r0
 8010abc:	2000      	movs	r0, #0
 8010abe:	4603      	mov	r3, r0
 8010ac0:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8010ac4:	f100 0701 	add.w	r7, r0, #1
 8010ac8:	d013      	beq.n	8010af2 <_strtod_l+0x24a>
 8010aca:	4439      	add	r1, r7
 8010acc:	eb00 0e03 	add.w	lr, r0, r3
 8010ad0:	461f      	mov	r7, r3
 8010ad2:	f04f 0c0a 	mov.w	ip, #10
 8010ad6:	45be      	cmp	lr, r7
 8010ad8:	d113      	bne.n	8010b02 <_strtod_l+0x25a>
 8010ada:	181f      	adds	r7, r3, r0
 8010adc:	2f08      	cmp	r7, #8
 8010ade:	f103 0301 	add.w	r3, r3, #1
 8010ae2:	4403      	add	r3, r0
 8010ae4:	dc1d      	bgt.n	8010b22 <_strtod_l+0x27a>
 8010ae6:	9a08      	ldr	r2, [sp, #32]
 8010ae8:	200a      	movs	r0, #10
 8010aea:	fb00 8202 	mla	r2, r0, r2, r8
 8010aee:	9208      	str	r2, [sp, #32]
 8010af0:	2700      	movs	r7, #0
 8010af2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010af4:	1c50      	adds	r0, r2, #1
 8010af6:	9017      	str	r0, [sp, #92]	; 0x5c
 8010af8:	7852      	ldrb	r2, [r2, #1]
 8010afa:	4638      	mov	r0, r7
 8010afc:	e7c8      	b.n	8010a90 <_strtod_l+0x1e8>
 8010afe:	4628      	mov	r0, r5
 8010b00:	e7d2      	b.n	8010aa8 <_strtod_l+0x200>
 8010b02:	2f08      	cmp	r7, #8
 8010b04:	f107 0701 	add.w	r7, r7, #1
 8010b08:	dc04      	bgt.n	8010b14 <_strtod_l+0x26c>
 8010b0a:	9a08      	ldr	r2, [sp, #32]
 8010b0c:	fb0c f202 	mul.w	r2, ip, r2
 8010b10:	9208      	str	r2, [sp, #32]
 8010b12:	e7e0      	b.n	8010ad6 <_strtod_l+0x22e>
 8010b14:	2f10      	cmp	r7, #16
 8010b16:	bfde      	ittt	le
 8010b18:	9a06      	ldrle	r2, [sp, #24]
 8010b1a:	fb0c f202 	mulle.w	r2, ip, r2
 8010b1e:	9206      	strle	r2, [sp, #24]
 8010b20:	e7d9      	b.n	8010ad6 <_strtod_l+0x22e>
 8010b22:	2b10      	cmp	r3, #16
 8010b24:	bfdf      	itttt	le
 8010b26:	9a06      	ldrle	r2, [sp, #24]
 8010b28:	200a      	movle	r0, #10
 8010b2a:	fb00 8202 	mlale	r2, r0, r2, r8
 8010b2e:	9206      	strle	r2, [sp, #24]
 8010b30:	e7de      	b.n	8010af0 <_strtod_l+0x248>
 8010b32:	2301      	movs	r3, #1
 8010b34:	9304      	str	r3, [sp, #16]
 8010b36:	e777      	b.n	8010a28 <_strtod_l+0x180>
 8010b38:	f04f 0e01 	mov.w	lr, #1
 8010b3c:	1cb2      	adds	r2, r6, #2
 8010b3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010b40:	78b2      	ldrb	r2, [r6, #2]
 8010b42:	e781      	b.n	8010a48 <_strtod_l+0x1a0>
 8010b44:	f04f 0e00 	mov.w	lr, #0
 8010b48:	e7f8      	b.n	8010b3c <_strtod_l+0x294>
 8010b4a:	bf00      	nop
 8010b4c:	0801489c 	.word	0x0801489c
 8010b50:	7ff00000 	.word	0x7ff00000
 8010b54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010b56:	f102 0c01 	add.w	ip, r2, #1
 8010b5a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8010b5e:	7852      	ldrb	r2, [r2, #1]
 8010b60:	2a30      	cmp	r2, #48	; 0x30
 8010b62:	d0f7      	beq.n	8010b54 <_strtod_l+0x2ac>
 8010b64:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8010b68:	f1bc 0f08 	cmp.w	ip, #8
 8010b6c:	f63f af73 	bhi.w	8010a56 <_strtod_l+0x1ae>
 8010b70:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8010b74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010b76:	920e      	str	r2, [sp, #56]	; 0x38
 8010b78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010b7a:	f102 0c01 	add.w	ip, r2, #1
 8010b7e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8010b82:	7852      	ldrb	r2, [r2, #1]
 8010b84:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8010b88:	f1b9 0f09 	cmp.w	r9, #9
 8010b8c:	d939      	bls.n	8010c02 <_strtod_l+0x35a>
 8010b8e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010b90:	ebac 0c07 	sub.w	ip, ip, r7
 8010b94:	f1bc 0f08 	cmp.w	ip, #8
 8010b98:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8010b9c:	dc37      	bgt.n	8010c0e <_strtod_l+0x366>
 8010b9e:	45e0      	cmp	r8, ip
 8010ba0:	bfa8      	it	ge
 8010ba2:	46e0      	movge	r8, ip
 8010ba4:	f1be 0f00 	cmp.w	lr, #0
 8010ba8:	d001      	beq.n	8010bae <_strtod_l+0x306>
 8010baa:	f1c8 0800 	rsb	r8, r8, #0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d151      	bne.n	8010c56 <_strtod_l+0x3ae>
 8010bb2:	2800      	cmp	r0, #0
 8010bb4:	f47f aeba 	bne.w	801092c <_strtod_l+0x84>
 8010bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f47f aeb6 	bne.w	801092c <_strtod_l+0x84>
 8010bc0:	9b04      	ldr	r3, [sp, #16]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f47f aed1 	bne.w	801096a <_strtod_l+0xc2>
 8010bc8:	2a4e      	cmp	r2, #78	; 0x4e
 8010bca:	d027      	beq.n	8010c1c <_strtod_l+0x374>
 8010bcc:	dc21      	bgt.n	8010c12 <_strtod_l+0x36a>
 8010bce:	2a49      	cmp	r2, #73	; 0x49
 8010bd0:	f47f aecb 	bne.w	801096a <_strtod_l+0xc2>
 8010bd4:	499a      	ldr	r1, [pc, #616]	; (8010e40 <_strtod_l+0x598>)
 8010bd6:	a817      	add	r0, sp, #92	; 0x5c
 8010bd8:	f001 ff82 	bl	8012ae0 <__match>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	f43f aec4 	beq.w	801096a <_strtod_l+0xc2>
 8010be2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010be4:	4997      	ldr	r1, [pc, #604]	; (8010e44 <_strtod_l+0x59c>)
 8010be6:	3b01      	subs	r3, #1
 8010be8:	a817      	add	r0, sp, #92	; 0x5c
 8010bea:	9317      	str	r3, [sp, #92]	; 0x5c
 8010bec:	f001 ff78 	bl	8012ae0 <__match>
 8010bf0:	b910      	cbnz	r0, 8010bf8 <_strtod_l+0x350>
 8010bf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	9317      	str	r3, [sp, #92]	; 0x5c
 8010bf8:	f8df b260 	ldr.w	fp, [pc, #608]	; 8010e5c <_strtod_l+0x5b4>
 8010bfc:	f04f 0a00 	mov.w	sl, #0
 8010c00:	e694      	b.n	801092c <_strtod_l+0x84>
 8010c02:	270a      	movs	r7, #10
 8010c04:	fb07 2808 	mla	r8, r7, r8, r2
 8010c08:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8010c0c:	e7b4      	b.n	8010b78 <_strtod_l+0x2d0>
 8010c0e:	46e0      	mov	r8, ip
 8010c10:	e7c8      	b.n	8010ba4 <_strtod_l+0x2fc>
 8010c12:	2a69      	cmp	r2, #105	; 0x69
 8010c14:	d0de      	beq.n	8010bd4 <_strtod_l+0x32c>
 8010c16:	2a6e      	cmp	r2, #110	; 0x6e
 8010c18:	f47f aea7 	bne.w	801096a <_strtod_l+0xc2>
 8010c1c:	498a      	ldr	r1, [pc, #552]	; (8010e48 <_strtod_l+0x5a0>)
 8010c1e:	a817      	add	r0, sp, #92	; 0x5c
 8010c20:	f001 ff5e 	bl	8012ae0 <__match>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	f43f aea0 	beq.w	801096a <_strtod_l+0xc2>
 8010c2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	2b28      	cmp	r3, #40	; 0x28
 8010c30:	d10e      	bne.n	8010c50 <_strtod_l+0x3a8>
 8010c32:	aa1a      	add	r2, sp, #104	; 0x68
 8010c34:	4985      	ldr	r1, [pc, #532]	; (8010e4c <_strtod_l+0x5a4>)
 8010c36:	a817      	add	r0, sp, #92	; 0x5c
 8010c38:	f001 ff66 	bl	8012b08 <__hexnan>
 8010c3c:	2805      	cmp	r0, #5
 8010c3e:	d107      	bne.n	8010c50 <_strtod_l+0x3a8>
 8010c40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c42:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010c46:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010c4a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010c4e:	e66d      	b.n	801092c <_strtod_l+0x84>
 8010c50:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8010e60 <_strtod_l+0x5b8>
 8010c54:	e7d2      	b.n	8010bfc <_strtod_l+0x354>
 8010c56:	eddd 7a08 	vldr	s15, [sp, #32]
 8010c5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010c5e:	eba8 0201 	sub.w	r2, r8, r1
 8010c62:	2d00      	cmp	r5, #0
 8010c64:	bf08      	it	eq
 8010c66:	461d      	moveq	r5, r3
 8010c68:	2b10      	cmp	r3, #16
 8010c6a:	9204      	str	r2, [sp, #16]
 8010c6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010c70:	461a      	mov	r2, r3
 8010c72:	bfa8      	it	ge
 8010c74:	2210      	movge	r2, #16
 8010c76:	2b09      	cmp	r3, #9
 8010c78:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8010c7c:	dc14      	bgt.n	8010ca8 <_strtod_l+0x400>
 8010c7e:	9904      	ldr	r1, [sp, #16]
 8010c80:	2900      	cmp	r1, #0
 8010c82:	f43f ae53 	beq.w	801092c <_strtod_l+0x84>
 8010c86:	9904      	ldr	r1, [sp, #16]
 8010c88:	dd72      	ble.n	8010d70 <_strtod_l+0x4c8>
 8010c8a:	2916      	cmp	r1, #22
 8010c8c:	dc5a      	bgt.n	8010d44 <_strtod_l+0x49c>
 8010c8e:	4970      	ldr	r1, [pc, #448]	; (8010e50 <_strtod_l+0x5a8>)
 8010c90:	9b04      	ldr	r3, [sp, #16]
 8010c92:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010c96:	ed91 7b00 	vldr	d7, [r1]
 8010c9a:	ec4b ab16 	vmov	d6, sl, fp
 8010c9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ca2:	ec5b ab17 	vmov	sl, fp, d7
 8010ca6:	e641      	b.n	801092c <_strtod_l+0x84>
 8010ca8:	4969      	ldr	r1, [pc, #420]	; (8010e50 <_strtod_l+0x5a8>)
 8010caa:	eddd 7a06 	vldr	s15, [sp, #24]
 8010cae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010cb2:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8010cb6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010cba:	2b0f      	cmp	r3, #15
 8010cbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010cc0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010cc4:	ec5b ab17 	vmov	sl, fp, d7
 8010cc8:	ddd9      	ble.n	8010c7e <_strtod_l+0x3d6>
 8010cca:	9904      	ldr	r1, [sp, #16]
 8010ccc:	1a9a      	subs	r2, r3, r2
 8010cce:	440a      	add	r2, r1
 8010cd0:	2a00      	cmp	r2, #0
 8010cd2:	f340 8096 	ble.w	8010e02 <_strtod_l+0x55a>
 8010cd6:	f012 000f 	ands.w	r0, r2, #15
 8010cda:	d00a      	beq.n	8010cf2 <_strtod_l+0x44a>
 8010cdc:	495c      	ldr	r1, [pc, #368]	; (8010e50 <_strtod_l+0x5a8>)
 8010cde:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010ce2:	ed91 7b00 	vldr	d7, [r1]
 8010ce6:	ec4b ab16 	vmov	d6, sl, fp
 8010cea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010cee:	ec5b ab17 	vmov	sl, fp, d7
 8010cf2:	f032 020f 	bics.w	r2, r2, #15
 8010cf6:	d072      	beq.n	8010dde <_strtod_l+0x536>
 8010cf8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8010cfc:	dd45      	ble.n	8010d8a <_strtod_l+0x4e2>
 8010cfe:	2500      	movs	r5, #0
 8010d00:	46a8      	mov	r8, r5
 8010d02:	9506      	str	r5, [sp, #24]
 8010d04:	46a9      	mov	r9, r5
 8010d06:	2322      	movs	r3, #34	; 0x22
 8010d08:	f8df b150 	ldr.w	fp, [pc, #336]	; 8010e5c <_strtod_l+0x5b4>
 8010d0c:	6023      	str	r3, [r4, #0]
 8010d0e:	f04f 0a00 	mov.w	sl, #0
 8010d12:	9b06      	ldr	r3, [sp, #24]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	f43f ae09 	beq.w	801092c <_strtod_l+0x84>
 8010d1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	f002 f863 	bl	8012de8 <_Bfree>
 8010d22:	4649      	mov	r1, r9
 8010d24:	4620      	mov	r0, r4
 8010d26:	f002 f85f 	bl	8012de8 <_Bfree>
 8010d2a:	4641      	mov	r1, r8
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f002 f85b 	bl	8012de8 <_Bfree>
 8010d32:	9906      	ldr	r1, [sp, #24]
 8010d34:	4620      	mov	r0, r4
 8010d36:	f002 f857 	bl	8012de8 <_Bfree>
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	f002 f853 	bl	8012de8 <_Bfree>
 8010d42:	e5f3      	b.n	801092c <_strtod_l+0x84>
 8010d44:	9804      	ldr	r0, [sp, #16]
 8010d46:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8010d4a:	4281      	cmp	r1, r0
 8010d4c:	dbbd      	blt.n	8010cca <_strtod_l+0x422>
 8010d4e:	4a40      	ldr	r2, [pc, #256]	; (8010e50 <_strtod_l+0x5a8>)
 8010d50:	f1c3 030f 	rsb	r3, r3, #15
 8010d54:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010d58:	ed91 7b00 	vldr	d7, [r1]
 8010d5c:	ec4b ab16 	vmov	d6, sl, fp
 8010d60:	1ac3      	subs	r3, r0, r3
 8010d62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d6a:	ed92 6b00 	vldr	d6, [r2]
 8010d6e:	e796      	b.n	8010c9e <_strtod_l+0x3f6>
 8010d70:	3116      	adds	r1, #22
 8010d72:	dbaa      	blt.n	8010cca <_strtod_l+0x422>
 8010d74:	4936      	ldr	r1, [pc, #216]	; (8010e50 <_strtod_l+0x5a8>)
 8010d76:	9b04      	ldr	r3, [sp, #16]
 8010d78:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8010d7c:	ed91 7b00 	vldr	d7, [r1]
 8010d80:	ec4b ab16 	vmov	d6, sl, fp
 8010d84:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010d88:	e78b      	b.n	8010ca2 <_strtod_l+0x3fa>
 8010d8a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8010d8e:	2000      	movs	r0, #0
 8010d90:	4e30      	ldr	r6, [pc, #192]	; (8010e54 <_strtod_l+0x5ac>)
 8010d92:	1112      	asrs	r2, r2, #4
 8010d94:	4601      	mov	r1, r0
 8010d96:	2a01      	cmp	r2, #1
 8010d98:	dc23      	bgt.n	8010de2 <_strtod_l+0x53a>
 8010d9a:	b108      	cbz	r0, 8010da0 <_strtod_l+0x4f8>
 8010d9c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010da0:	4a2c      	ldr	r2, [pc, #176]	; (8010e54 <_strtod_l+0x5ac>)
 8010da2:	482d      	ldr	r0, [pc, #180]	; (8010e58 <_strtod_l+0x5b0>)
 8010da4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010da8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010dac:	ed91 7b00 	vldr	d7, [r1]
 8010db0:	ec4b ab16 	vmov	d6, sl, fp
 8010db4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010db8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010dbc:	9907      	ldr	r1, [sp, #28]
 8010dbe:	4a27      	ldr	r2, [pc, #156]	; (8010e5c <_strtod_l+0x5b4>)
 8010dc0:	400a      	ands	r2, r1
 8010dc2:	4282      	cmp	r2, r0
 8010dc4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010dc8:	d899      	bhi.n	8010cfe <_strtod_l+0x456>
 8010dca:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8010dce:	4282      	cmp	r2, r0
 8010dd0:	bf86      	itte	hi
 8010dd2:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8010e64 <_strtod_l+0x5bc>
 8010dd6:	f04f 3aff 	movhi.w	sl, #4294967295
 8010dda:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8010dde:	2700      	movs	r7, #0
 8010de0:	e070      	b.n	8010ec4 <_strtod_l+0x61c>
 8010de2:	07d7      	lsls	r7, r2, #31
 8010de4:	d50a      	bpl.n	8010dfc <_strtod_l+0x554>
 8010de6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8010dea:	ed90 7b00 	vldr	d7, [r0]
 8010dee:	ed9d 6b06 	vldr	d6, [sp, #24]
 8010df2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010df6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010dfa:	2001      	movs	r0, #1
 8010dfc:	3101      	adds	r1, #1
 8010dfe:	1052      	asrs	r2, r2, #1
 8010e00:	e7c9      	b.n	8010d96 <_strtod_l+0x4ee>
 8010e02:	d0ec      	beq.n	8010dde <_strtod_l+0x536>
 8010e04:	4252      	negs	r2, r2
 8010e06:	f012 000f 	ands.w	r0, r2, #15
 8010e0a:	d00a      	beq.n	8010e22 <_strtod_l+0x57a>
 8010e0c:	4910      	ldr	r1, [pc, #64]	; (8010e50 <_strtod_l+0x5a8>)
 8010e0e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010e12:	ed91 7b00 	vldr	d7, [r1]
 8010e16:	ec4b ab16 	vmov	d6, sl, fp
 8010e1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010e1e:	ec5b ab17 	vmov	sl, fp, d7
 8010e22:	1112      	asrs	r2, r2, #4
 8010e24:	d0db      	beq.n	8010dde <_strtod_l+0x536>
 8010e26:	2a1f      	cmp	r2, #31
 8010e28:	dd1e      	ble.n	8010e68 <_strtod_l+0x5c0>
 8010e2a:	2500      	movs	r5, #0
 8010e2c:	46a8      	mov	r8, r5
 8010e2e:	9506      	str	r5, [sp, #24]
 8010e30:	46a9      	mov	r9, r5
 8010e32:	2322      	movs	r3, #34	; 0x22
 8010e34:	f04f 0a00 	mov.w	sl, #0
 8010e38:	f04f 0b00 	mov.w	fp, #0
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	e768      	b.n	8010d12 <_strtod_l+0x46a>
 8010e40:	08014869 	.word	0x08014869
 8010e44:	080148f3 	.word	0x080148f3
 8010e48:	08014871 	.word	0x08014871
 8010e4c:	080148b0 	.word	0x080148b0
 8010e50:	08014998 	.word	0x08014998
 8010e54:	08014970 	.word	0x08014970
 8010e58:	7ca00000 	.word	0x7ca00000
 8010e5c:	7ff00000 	.word	0x7ff00000
 8010e60:	fff80000 	.word	0xfff80000
 8010e64:	7fefffff 	.word	0x7fefffff
 8010e68:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8010e6c:	f012 0710 	ands.w	r7, r2, #16
 8010e70:	49ab      	ldr	r1, [pc, #684]	; (8011120 <_strtod_l+0x878>)
 8010e72:	bf18      	it	ne
 8010e74:	276a      	movne	r7, #106	; 0x6a
 8010e76:	2000      	movs	r0, #0
 8010e78:	2a00      	cmp	r2, #0
 8010e7a:	f300 8113 	bgt.w	80110a4 <_strtod_l+0x7fc>
 8010e7e:	b108      	cbz	r0, 8010e84 <_strtod_l+0x5dc>
 8010e80:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010e84:	b1bf      	cbz	r7, 8010eb6 <_strtod_l+0x60e>
 8010e86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010e8a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8010e8e:	2a00      	cmp	r2, #0
 8010e90:	4659      	mov	r1, fp
 8010e92:	dd10      	ble.n	8010eb6 <_strtod_l+0x60e>
 8010e94:	2a1f      	cmp	r2, #31
 8010e96:	f340 8113 	ble.w	80110c0 <_strtod_l+0x818>
 8010e9a:	2a34      	cmp	r2, #52	; 0x34
 8010e9c:	bfde      	ittt	le
 8010e9e:	3a20      	suble	r2, #32
 8010ea0:	f04f 30ff 	movle.w	r0, #4294967295
 8010ea4:	fa00 f202 	lslle.w	r2, r0, r2
 8010ea8:	f04f 0a00 	mov.w	sl, #0
 8010eac:	bfcc      	ite	gt
 8010eae:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010eb2:	ea02 0b01 	andle.w	fp, r2, r1
 8010eb6:	ec4b ab17 	vmov	d7, sl, fp
 8010eba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec2:	d0b2      	beq.n	8010e2a <_strtod_l+0x582>
 8010ec4:	9a08      	ldr	r2, [sp, #32]
 8010ec6:	9200      	str	r2, [sp, #0]
 8010ec8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010eca:	462a      	mov	r2, r5
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f001 ffdd 	bl	8012e8c <__s2b>
 8010ed2:	9006      	str	r0, [sp, #24]
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	f43f af12 	beq.w	8010cfe <_strtod_l+0x456>
 8010eda:	9a04      	ldr	r2, [sp, #16]
 8010edc:	9b04      	ldr	r3, [sp, #16]
 8010ede:	2a00      	cmp	r2, #0
 8010ee0:	f1c3 0300 	rsb	r3, r3, #0
 8010ee4:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011108 <_strtod_l+0x860>
 8010ee8:	bfa8      	it	ge
 8010eea:	2300      	movge	r3, #0
 8010eec:	ed9f ab88 	vldr	d10, [pc, #544]	; 8011110 <_strtod_l+0x868>
 8010ef0:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011118 <_strtod_l+0x870>
 8010ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8010ef6:	2500      	movs	r5, #0
 8010ef8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010efc:	9310      	str	r3, [sp, #64]	; 0x40
 8010efe:	46a8      	mov	r8, r5
 8010f00:	9b06      	ldr	r3, [sp, #24]
 8010f02:	4620      	mov	r0, r4
 8010f04:	6859      	ldr	r1, [r3, #4]
 8010f06:	f001 ff3b 	bl	8012d80 <_Balloc>
 8010f0a:	4681      	mov	r9, r0
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	f43f aefa 	beq.w	8010d06 <_strtod_l+0x45e>
 8010f12:	9b06      	ldr	r3, [sp, #24]
 8010f14:	691a      	ldr	r2, [r3, #16]
 8010f16:	3202      	adds	r2, #2
 8010f18:	f103 010c 	add.w	r1, r3, #12
 8010f1c:	0092      	lsls	r2, r2, #2
 8010f1e:	300c      	adds	r0, #12
 8010f20:	f7fe fc64 	bl	800f7ec <memcpy>
 8010f24:	aa1a      	add	r2, sp, #104	; 0x68
 8010f26:	a919      	add	r1, sp, #100	; 0x64
 8010f28:	ec4b ab10 	vmov	d0, sl, fp
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010f32:	f002 fa67 	bl	8013404 <__d2b>
 8010f36:	9018      	str	r0, [sp, #96]	; 0x60
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	f43f aee4 	beq.w	8010d06 <_strtod_l+0x45e>
 8010f3e:	2101      	movs	r1, #1
 8010f40:	4620      	mov	r0, r4
 8010f42:	f002 f82f 	bl	8012fa4 <__i2b>
 8010f46:	4680      	mov	r8, r0
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	f43f aedc 	beq.w	8010d06 <_strtod_l+0x45e>
 8010f4e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8010f50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010f52:	2e00      	cmp	r6, #0
 8010f54:	bfb1      	iteee	lt
 8010f56:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8010f58:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8010f5a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8010f5c:	18f3      	addge	r3, r6, r3
 8010f5e:	bfba      	itte	lt
 8010f60:	1b98      	sublt	r0, r3, r6
 8010f62:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010f64:	9308      	strge	r3, [sp, #32]
 8010f66:	eba6 0607 	sub.w	r6, r6, r7
 8010f6a:	bfb8      	it	lt
 8010f6c:	9308      	strlt	r3, [sp, #32]
 8010f6e:	4416      	add	r6, r2
 8010f70:	4b6c      	ldr	r3, [pc, #432]	; (8011124 <_strtod_l+0x87c>)
 8010f72:	3e01      	subs	r6, #1
 8010f74:	429e      	cmp	r6, r3
 8010f76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010f7a:	f280 80b4 	bge.w	80110e6 <_strtod_l+0x83e>
 8010f7e:	1b9b      	subs	r3, r3, r6
 8010f80:	2b1f      	cmp	r3, #31
 8010f82:	eba2 0203 	sub.w	r2, r2, r3
 8010f86:	f04f 0101 	mov.w	r1, #1
 8010f8a:	f300 80a0 	bgt.w	80110ce <_strtod_l+0x826>
 8010f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f92:	9311      	str	r3, [sp, #68]	; 0x44
 8010f94:	2300      	movs	r3, #0
 8010f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f98:	9b08      	ldr	r3, [sp, #32]
 8010f9a:	4413      	add	r3, r2
 8010f9c:	4402      	add	r2, r0
 8010f9e:	18be      	adds	r6, r7, r2
 8010fa0:	9a08      	ldr	r2, [sp, #32]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	bfa8      	it	ge
 8010fa6:	461a      	movge	r2, r3
 8010fa8:	42b2      	cmp	r2, r6
 8010faa:	bfa8      	it	ge
 8010fac:	4632      	movge	r2, r6
 8010fae:	2a00      	cmp	r2, #0
 8010fb0:	dd04      	ble.n	8010fbc <_strtod_l+0x714>
 8010fb2:	9908      	ldr	r1, [sp, #32]
 8010fb4:	1a9b      	subs	r3, r3, r2
 8010fb6:	1ab6      	subs	r6, r6, r2
 8010fb8:	1a8a      	subs	r2, r1, r2
 8010fba:	9208      	str	r2, [sp, #32]
 8010fbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fbe:	b1c2      	cbz	r2, 8010ff2 <_strtod_l+0x74a>
 8010fc0:	4641      	mov	r1, r8
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	9315      	str	r3, [sp, #84]	; 0x54
 8010fc6:	f002 f88d 	bl	80130e4 <__pow5mult>
 8010fca:	4680      	mov	r8, r0
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	f43f ae9a 	beq.w	8010d06 <_strtod_l+0x45e>
 8010fd2:	4601      	mov	r1, r0
 8010fd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f001 ffed 	bl	8012fb6 <__multiply>
 8010fdc:	900c      	str	r0, [sp, #48]	; 0x30
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	f43f ae91 	beq.w	8010d06 <_strtod_l+0x45e>
 8010fe4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	f001 fefe 	bl	8012de8 <_Bfree>
 8010fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ff0:	9218      	str	r2, [sp, #96]	; 0x60
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	dc7c      	bgt.n	80110f0 <_strtod_l+0x848>
 8010ff6:	9b04      	ldr	r3, [sp, #16]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	dd08      	ble.n	801100e <_strtod_l+0x766>
 8010ffc:	4649      	mov	r1, r9
 8010ffe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011000:	4620      	mov	r0, r4
 8011002:	f002 f86f 	bl	80130e4 <__pow5mult>
 8011006:	4681      	mov	r9, r0
 8011008:	2800      	cmp	r0, #0
 801100a:	f43f ae7c 	beq.w	8010d06 <_strtod_l+0x45e>
 801100e:	2e00      	cmp	r6, #0
 8011010:	dd08      	ble.n	8011024 <_strtod_l+0x77c>
 8011012:	4649      	mov	r1, r9
 8011014:	4632      	mov	r2, r6
 8011016:	4620      	mov	r0, r4
 8011018:	f002 f8b2 	bl	8013180 <__lshift>
 801101c:	4681      	mov	r9, r0
 801101e:	2800      	cmp	r0, #0
 8011020:	f43f ae71 	beq.w	8010d06 <_strtod_l+0x45e>
 8011024:	9b08      	ldr	r3, [sp, #32]
 8011026:	2b00      	cmp	r3, #0
 8011028:	dd08      	ble.n	801103c <_strtod_l+0x794>
 801102a:	4641      	mov	r1, r8
 801102c:	461a      	mov	r2, r3
 801102e:	4620      	mov	r0, r4
 8011030:	f002 f8a6 	bl	8013180 <__lshift>
 8011034:	4680      	mov	r8, r0
 8011036:	2800      	cmp	r0, #0
 8011038:	f43f ae65 	beq.w	8010d06 <_strtod_l+0x45e>
 801103c:	464a      	mov	r2, r9
 801103e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011040:	4620      	mov	r0, r4
 8011042:	f002 f90b 	bl	801325c <__mdiff>
 8011046:	4605      	mov	r5, r0
 8011048:	2800      	cmp	r0, #0
 801104a:	f43f ae5c 	beq.w	8010d06 <_strtod_l+0x45e>
 801104e:	68c3      	ldr	r3, [r0, #12]
 8011050:	930c      	str	r3, [sp, #48]	; 0x30
 8011052:	2300      	movs	r3, #0
 8011054:	60c3      	str	r3, [r0, #12]
 8011056:	4641      	mov	r1, r8
 8011058:	f002 f8e6 	bl	8013228 <__mcmp>
 801105c:	2800      	cmp	r0, #0
 801105e:	da63      	bge.n	8011128 <_strtod_l+0x880>
 8011060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011062:	b9e3      	cbnz	r3, 801109e <_strtod_l+0x7f6>
 8011064:	f1ba 0f00 	cmp.w	sl, #0
 8011068:	d119      	bne.n	801109e <_strtod_l+0x7f6>
 801106a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801106e:	b9b3      	cbnz	r3, 801109e <_strtod_l+0x7f6>
 8011070:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011074:	0d1b      	lsrs	r3, r3, #20
 8011076:	051b      	lsls	r3, r3, #20
 8011078:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801107c:	d90f      	bls.n	801109e <_strtod_l+0x7f6>
 801107e:	696b      	ldr	r3, [r5, #20]
 8011080:	b913      	cbnz	r3, 8011088 <_strtod_l+0x7e0>
 8011082:	692b      	ldr	r3, [r5, #16]
 8011084:	2b01      	cmp	r3, #1
 8011086:	dd0a      	ble.n	801109e <_strtod_l+0x7f6>
 8011088:	4629      	mov	r1, r5
 801108a:	2201      	movs	r2, #1
 801108c:	4620      	mov	r0, r4
 801108e:	f002 f877 	bl	8013180 <__lshift>
 8011092:	4641      	mov	r1, r8
 8011094:	4605      	mov	r5, r0
 8011096:	f002 f8c7 	bl	8013228 <__mcmp>
 801109a:	2800      	cmp	r0, #0
 801109c:	dc75      	bgt.n	801118a <_strtod_l+0x8e2>
 801109e:	2f00      	cmp	r7, #0
 80110a0:	d17f      	bne.n	80111a2 <_strtod_l+0x8fa>
 80110a2:	e63a      	b.n	8010d1a <_strtod_l+0x472>
 80110a4:	07d6      	lsls	r6, r2, #31
 80110a6:	d508      	bpl.n	80110ba <_strtod_l+0x812>
 80110a8:	ed9d 6b06 	vldr	d6, [sp, #24]
 80110ac:	ed91 7b00 	vldr	d7, [r1]
 80110b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80110b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80110b8:	2001      	movs	r0, #1
 80110ba:	1052      	asrs	r2, r2, #1
 80110bc:	3108      	adds	r1, #8
 80110be:	e6db      	b.n	8010e78 <_strtod_l+0x5d0>
 80110c0:	f04f 31ff 	mov.w	r1, #4294967295
 80110c4:	fa01 f202 	lsl.w	r2, r1, r2
 80110c8:	ea02 0a0a 	and.w	sl, r2, sl
 80110cc:	e6f3      	b.n	8010eb6 <_strtod_l+0x60e>
 80110ce:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80110d2:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80110d6:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80110da:	36e2      	adds	r6, #226	; 0xe2
 80110dc:	fa01 f306 	lsl.w	r3, r1, r6
 80110e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80110e2:	9111      	str	r1, [sp, #68]	; 0x44
 80110e4:	e758      	b.n	8010f98 <_strtod_l+0x6f0>
 80110e6:	2300      	movs	r3, #0
 80110e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80110ea:	2301      	movs	r3, #1
 80110ec:	9311      	str	r3, [sp, #68]	; 0x44
 80110ee:	e753      	b.n	8010f98 <_strtod_l+0x6f0>
 80110f0:	461a      	mov	r2, r3
 80110f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80110f4:	4620      	mov	r0, r4
 80110f6:	f002 f843 	bl	8013180 <__lshift>
 80110fa:	9018      	str	r0, [sp, #96]	; 0x60
 80110fc:	2800      	cmp	r0, #0
 80110fe:	f47f af7a 	bne.w	8010ff6 <_strtod_l+0x74e>
 8011102:	e600      	b.n	8010d06 <_strtod_l+0x45e>
 8011104:	f3af 8000 	nop.w
 8011108:	94a03595 	.word	0x94a03595
 801110c:	3fdfffff 	.word	0x3fdfffff
 8011110:	35afe535 	.word	0x35afe535
 8011114:	3fe00000 	.word	0x3fe00000
 8011118:	94a03595 	.word	0x94a03595
 801111c:	3fcfffff 	.word	0x3fcfffff
 8011120:	080148c8 	.word	0x080148c8
 8011124:	fffffc02 	.word	0xfffffc02
 8011128:	f8cd b020 	str.w	fp, [sp, #32]
 801112c:	f040 8085 	bne.w	801123a <_strtod_l+0x992>
 8011130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011132:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011136:	b322      	cbz	r2, 8011182 <_strtod_l+0x8da>
 8011138:	4ab7      	ldr	r2, [pc, #732]	; (8011418 <_strtod_l+0xb70>)
 801113a:	4293      	cmp	r3, r2
 801113c:	d154      	bne.n	80111e8 <_strtod_l+0x940>
 801113e:	4651      	mov	r1, sl
 8011140:	b1e7      	cbz	r7, 801117c <_strtod_l+0x8d4>
 8011142:	4bb6      	ldr	r3, [pc, #728]	; (801141c <_strtod_l+0xb74>)
 8011144:	465a      	mov	r2, fp
 8011146:	4013      	ands	r3, r2
 8011148:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801114c:	f04f 32ff 	mov.w	r2, #4294967295
 8011150:	d803      	bhi.n	801115a <_strtod_l+0x8b2>
 8011152:	0d1b      	lsrs	r3, r3, #20
 8011154:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011158:	409a      	lsls	r2, r3
 801115a:	4291      	cmp	r1, r2
 801115c:	d144      	bne.n	80111e8 <_strtod_l+0x940>
 801115e:	4bb0      	ldr	r3, [pc, #704]	; (8011420 <_strtod_l+0xb78>)
 8011160:	9a08      	ldr	r2, [sp, #32]
 8011162:	429a      	cmp	r2, r3
 8011164:	d102      	bne.n	801116c <_strtod_l+0x8c4>
 8011166:	3101      	adds	r1, #1
 8011168:	f43f adcd 	beq.w	8010d06 <_strtod_l+0x45e>
 801116c:	4bab      	ldr	r3, [pc, #684]	; (801141c <_strtod_l+0xb74>)
 801116e:	9a08      	ldr	r2, [sp, #32]
 8011170:	401a      	ands	r2, r3
 8011172:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8011176:	f04f 0a00 	mov.w	sl, #0
 801117a:	e790      	b.n	801109e <_strtod_l+0x7f6>
 801117c:	f04f 32ff 	mov.w	r2, #4294967295
 8011180:	e7eb      	b.n	801115a <_strtod_l+0x8b2>
 8011182:	bb8b      	cbnz	r3, 80111e8 <_strtod_l+0x940>
 8011184:	f1ba 0f00 	cmp.w	sl, #0
 8011188:	d12e      	bne.n	80111e8 <_strtod_l+0x940>
 801118a:	465b      	mov	r3, fp
 801118c:	4aa3      	ldr	r2, [pc, #652]	; (801141c <_strtod_l+0xb74>)
 801118e:	b30f      	cbz	r7, 80111d4 <_strtod_l+0x92c>
 8011190:	ea02 010b 	and.w	r1, r2, fp
 8011194:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011198:	dc1c      	bgt.n	80111d4 <_strtod_l+0x92c>
 801119a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801119e:	f77f ae48 	ble.w	8010e32 <_strtod_l+0x58a>
 80111a2:	4aa0      	ldr	r2, [pc, #640]	; (8011424 <_strtod_l+0xb7c>)
 80111a4:	2300      	movs	r3, #0
 80111a6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80111aa:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80111ae:	ec4b ab17 	vmov	d7, sl, fp
 80111b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80111b6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80111ba:	9b05      	ldr	r3, [sp, #20]
 80111bc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f47f adaa 	bne.w	8010d1a <_strtod_l+0x472>
 80111c6:	9b04      	ldr	r3, [sp, #16]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f47f ada6 	bne.w	8010d1a <_strtod_l+0x472>
 80111ce:	2322      	movs	r3, #34	; 0x22
 80111d0:	6023      	str	r3, [r4, #0]
 80111d2:	e5a2      	b.n	8010d1a <_strtod_l+0x472>
 80111d4:	4013      	ands	r3, r2
 80111d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80111da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80111de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80111e2:	f04f 3aff 	mov.w	sl, #4294967295
 80111e6:	e75a      	b.n	801109e <_strtod_l+0x7f6>
 80111e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111ea:	b18b      	cbz	r3, 8011210 <_strtod_l+0x968>
 80111ec:	9a08      	ldr	r2, [sp, #32]
 80111ee:	4213      	tst	r3, r2
 80111f0:	f43f af55 	beq.w	801109e <_strtod_l+0x7f6>
 80111f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111f6:	463a      	mov	r2, r7
 80111f8:	4650      	mov	r0, sl
 80111fa:	4659      	mov	r1, fp
 80111fc:	b163      	cbz	r3, 8011218 <_strtod_l+0x970>
 80111fe:	f7ff fb38 	bl	8010872 <sulp>
 8011202:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011206:	ee37 7b00 	vadd.f64	d7, d7, d0
 801120a:	ec5b ab17 	vmov	sl, fp, d7
 801120e:	e746      	b.n	801109e <_strtod_l+0x7f6>
 8011210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011212:	ea13 0f0a 	tst.w	r3, sl
 8011216:	e7eb      	b.n	80111f0 <_strtod_l+0x948>
 8011218:	f7ff fb2b 	bl	8010872 <sulp>
 801121c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011220:	ee37 7b40 	vsub.f64	d7, d7, d0
 8011224:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011228:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011230:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011234:	f43f adfd 	beq.w	8010e32 <_strtod_l+0x58a>
 8011238:	e731      	b.n	801109e <_strtod_l+0x7f6>
 801123a:	4641      	mov	r1, r8
 801123c:	4628      	mov	r0, r5
 801123e:	f002 f930 	bl	80134a2 <__ratio>
 8011242:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011246:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124e:	d869      	bhi.n	8011324 <_strtod_l+0xa7c>
 8011250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011252:	2b00      	cmp	r3, #0
 8011254:	d045      	beq.n	80112e2 <_strtod_l+0xa3a>
 8011256:	4b74      	ldr	r3, [pc, #464]	; (8011428 <_strtod_l+0xb80>)
 8011258:	2200      	movs	r2, #0
 801125a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801125e:	9808      	ldr	r0, [sp, #32]
 8011260:	496e      	ldr	r1, [pc, #440]	; (801141c <_strtod_l+0xb74>)
 8011262:	ea00 0601 	and.w	r6, r0, r1
 8011266:	4871      	ldr	r0, [pc, #452]	; (801142c <_strtod_l+0xb84>)
 8011268:	4286      	cmp	r6, r0
 801126a:	f040 8089 	bne.w	8011380 <_strtod_l+0xad8>
 801126e:	910f      	str	r1, [sp, #60]	; 0x3c
 8011270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011274:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011278:	9908      	ldr	r1, [sp, #32]
 801127a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 801127e:	ec4b ab10 	vmov	d0, sl, fp
 8011282:	ec43 2b1c 	vmov	d12, r2, r3
 8011286:	f002 f847 	bl	8013318 <__ulp>
 801128a:	ec4b ab1d 	vmov	d13, sl, fp
 801128e:	eeac db00 	vfma.f64	d13, d12, d0
 8011292:	ed8d db08 	vstr	d13, [sp, #32]
 8011296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011298:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801129a:	4a65      	ldr	r2, [pc, #404]	; (8011430 <_strtod_l+0xb88>)
 801129c:	4019      	ands	r1, r3
 801129e:	4291      	cmp	r1, r2
 80112a0:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 80112a4:	d948      	bls.n	8011338 <_strtod_l+0xa90>
 80112a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80112ac:	4293      	cmp	r3, r2
 80112ae:	d103      	bne.n	80112b8 <_strtod_l+0xa10>
 80112b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112b2:	3301      	adds	r3, #1
 80112b4:	f43f ad27 	beq.w	8010d06 <_strtod_l+0x45e>
 80112b8:	f8df b164 	ldr.w	fp, [pc, #356]	; 8011420 <_strtod_l+0xb78>
 80112bc:	f04f 3aff 	mov.w	sl, #4294967295
 80112c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80112c2:	4620      	mov	r0, r4
 80112c4:	f001 fd90 	bl	8012de8 <_Bfree>
 80112c8:	4649      	mov	r1, r9
 80112ca:	4620      	mov	r0, r4
 80112cc:	f001 fd8c 	bl	8012de8 <_Bfree>
 80112d0:	4641      	mov	r1, r8
 80112d2:	4620      	mov	r0, r4
 80112d4:	f001 fd88 	bl	8012de8 <_Bfree>
 80112d8:	4629      	mov	r1, r5
 80112da:	4620      	mov	r0, r4
 80112dc:	f001 fd84 	bl	8012de8 <_Bfree>
 80112e0:	e60e      	b.n	8010f00 <_strtod_l+0x658>
 80112e2:	f1ba 0f00 	cmp.w	sl, #0
 80112e6:	d113      	bne.n	8011310 <_strtod_l+0xa68>
 80112e8:	9b08      	ldr	r3, [sp, #32]
 80112ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112ee:	b9b3      	cbnz	r3, 801131e <_strtod_l+0xa76>
 80112f0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80112f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011300:	d401      	bmi.n	8011306 <_strtod_l+0xa5e>
 8011302:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011306:	eeb1 7b48 	vneg.f64	d7, d8
 801130a:	ec53 2b17 	vmov	r2, r3, d7
 801130e:	e7a6      	b.n	801125e <_strtod_l+0x9b6>
 8011310:	f1ba 0f01 	cmp.w	sl, #1
 8011314:	d103      	bne.n	801131e <_strtod_l+0xa76>
 8011316:	9b08      	ldr	r3, [sp, #32]
 8011318:	2b00      	cmp	r3, #0
 801131a:	f43f ad8a 	beq.w	8010e32 <_strtod_l+0x58a>
 801131e:	2200      	movs	r2, #0
 8011320:	4b44      	ldr	r3, [pc, #272]	; (8011434 <_strtod_l+0xb8c>)
 8011322:	e79a      	b.n	801125a <_strtod_l+0x9b2>
 8011324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011326:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801132a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801132e:	2b00      	cmp	r3, #0
 8011330:	d0e9      	beq.n	8011306 <_strtod_l+0xa5e>
 8011332:	ec53 2b18 	vmov	r2, r3, d8
 8011336:	e792      	b.n	801125e <_strtod_l+0x9b6>
 8011338:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801133c:	2f00      	cmp	r7, #0
 801133e:	d1bf      	bne.n	80112c0 <_strtod_l+0xa18>
 8011340:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011344:	0d1b      	lsrs	r3, r3, #20
 8011346:	051b      	lsls	r3, r3, #20
 8011348:	429e      	cmp	r6, r3
 801134a:	d1b9      	bne.n	80112c0 <_strtod_l+0xa18>
 801134c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8011350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011352:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8011356:	ee38 8b40 	vsub.f64	d8, d8, d0
 801135a:	b92b      	cbnz	r3, 8011368 <_strtod_l+0xac0>
 801135c:	f1ba 0f00 	cmp.w	sl, #0
 8011360:	d102      	bne.n	8011368 <_strtod_l+0xac0>
 8011362:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8011366:	b3d2      	cbz	r2, 80113de <_strtod_l+0xb36>
 8011368:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011370:	f53f acd3 	bmi.w	8010d1a <_strtod_l+0x472>
 8011374:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801137c:	dda0      	ble.n	80112c0 <_strtod_l+0xa18>
 801137e:	e4cc      	b.n	8010d1a <_strtod_l+0x472>
 8011380:	b1ef      	cbz	r7, 80113be <_strtod_l+0xb16>
 8011382:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8011386:	d81a      	bhi.n	80113be <_strtod_l+0xb16>
 8011388:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011410 <_strtod_l+0xb68>
 801138c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011394:	d810      	bhi.n	80113b8 <_strtod_l+0xb10>
 8011396:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 801139a:	ee17 3a90 	vmov	r3, s15
 801139e:	2b00      	cmp	r3, #0
 80113a0:	bf08      	it	eq
 80113a2:	2301      	moveq	r3, #1
 80113a4:	ee07 3a90 	vmov	s15, r3
 80113a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113aa:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80113ae:	b99b      	cbnz	r3, 80113d8 <_strtod_l+0xb30>
 80113b0:	eeb1 7b48 	vneg.f64	d7, d8
 80113b4:	ec53 2b17 	vmov	r2, r3, d7
 80113b8:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80113bc:	1b8b      	subs	r3, r1, r6
 80113be:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80113c2:	ec43 2b1c 	vmov	d12, r2, r3
 80113c6:	f001 ffa7 	bl	8013318 <__ulp>
 80113ca:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80113ce:	eeac 7b00 	vfma.f64	d7, d12, d0
 80113d2:	ec5b ab17 	vmov	sl, fp, d7
 80113d6:	e7b1      	b.n	801133c <_strtod_l+0xa94>
 80113d8:	ec53 2b18 	vmov	r2, r3, d8
 80113dc:	e7ec      	b.n	80113b8 <_strtod_l+0xb10>
 80113de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80113e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e6:	f57f af6b 	bpl.w	80112c0 <_strtod_l+0xa18>
 80113ea:	e496      	b.n	8010d1a <_strtod_l+0x472>
 80113ec:	2300      	movs	r3, #0
 80113ee:	930d      	str	r3, [sp, #52]	; 0x34
 80113f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80113f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80113f4:	6013      	str	r3, [r2, #0]
 80113f6:	f7ff ba9d 	b.w	8010934 <_strtod_l+0x8c>
 80113fa:	2a65      	cmp	r2, #101	; 0x65
 80113fc:	f04f 0100 	mov.w	r1, #0
 8011400:	f43f ab97 	beq.w	8010b32 <_strtod_l+0x28a>
 8011404:	2701      	movs	r7, #1
 8011406:	460b      	mov	r3, r1
 8011408:	9704      	str	r7, [sp, #16]
 801140a:	f7ff bb0a 	b.w	8010a22 <_strtod_l+0x17a>
 801140e:	bf00      	nop
 8011410:	ffc00000 	.word	0xffc00000
 8011414:	41dfffff 	.word	0x41dfffff
 8011418:	000fffff 	.word	0x000fffff
 801141c:	7ff00000 	.word	0x7ff00000
 8011420:	7fefffff 	.word	0x7fefffff
 8011424:	39500000 	.word	0x39500000
 8011428:	3ff00000 	.word	0x3ff00000
 801142c:	7fe00000 	.word	0x7fe00000
 8011430:	7c9fffff 	.word	0x7c9fffff
 8011434:	bff00000 	.word	0xbff00000

08011438 <_strtod_r>:
 8011438:	4b05      	ldr	r3, [pc, #20]	; (8011450 <_strtod_r+0x18>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	b410      	push	{r4}
 801143e:	6a1b      	ldr	r3, [r3, #32]
 8011440:	4c04      	ldr	r4, [pc, #16]	; (8011454 <_strtod_r+0x1c>)
 8011442:	2b00      	cmp	r3, #0
 8011444:	bf08      	it	eq
 8011446:	4623      	moveq	r3, r4
 8011448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801144c:	f7ff ba2c 	b.w	80108a8 <_strtod_l>
 8011450:	2000086c 	.word	0x2000086c
 8011454:	200008d0 	.word	0x200008d0

08011458 <_strtol_l.isra.0>:
 8011458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801145c:	4680      	mov	r8, r0
 801145e:	4689      	mov	r9, r1
 8011460:	4692      	mov	sl, r2
 8011462:	461e      	mov	r6, r3
 8011464:	460f      	mov	r7, r1
 8011466:	463d      	mov	r5, r7
 8011468:	9808      	ldr	r0, [sp, #32]
 801146a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801146e:	f001 fbdb 	bl	8012c28 <__locale_ctype_ptr_l>
 8011472:	4420      	add	r0, r4
 8011474:	7843      	ldrb	r3, [r0, #1]
 8011476:	f013 0308 	ands.w	r3, r3, #8
 801147a:	d132      	bne.n	80114e2 <_strtol_l.isra.0+0x8a>
 801147c:	2c2d      	cmp	r4, #45	; 0x2d
 801147e:	d132      	bne.n	80114e6 <_strtol_l.isra.0+0x8e>
 8011480:	787c      	ldrb	r4, [r7, #1]
 8011482:	1cbd      	adds	r5, r7, #2
 8011484:	2201      	movs	r2, #1
 8011486:	2e00      	cmp	r6, #0
 8011488:	d05d      	beq.n	8011546 <_strtol_l.isra.0+0xee>
 801148a:	2e10      	cmp	r6, #16
 801148c:	d109      	bne.n	80114a2 <_strtol_l.isra.0+0x4a>
 801148e:	2c30      	cmp	r4, #48	; 0x30
 8011490:	d107      	bne.n	80114a2 <_strtol_l.isra.0+0x4a>
 8011492:	782b      	ldrb	r3, [r5, #0]
 8011494:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011498:	2b58      	cmp	r3, #88	; 0x58
 801149a:	d14f      	bne.n	801153c <_strtol_l.isra.0+0xe4>
 801149c:	786c      	ldrb	r4, [r5, #1]
 801149e:	2610      	movs	r6, #16
 80114a0:	3502      	adds	r5, #2
 80114a2:	2a00      	cmp	r2, #0
 80114a4:	bf14      	ite	ne
 80114a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80114aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80114ae:	2700      	movs	r7, #0
 80114b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80114b4:	4638      	mov	r0, r7
 80114b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80114ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80114be:	2b09      	cmp	r3, #9
 80114c0:	d817      	bhi.n	80114f2 <_strtol_l.isra.0+0x9a>
 80114c2:	461c      	mov	r4, r3
 80114c4:	42a6      	cmp	r6, r4
 80114c6:	dd23      	ble.n	8011510 <_strtol_l.isra.0+0xb8>
 80114c8:	1c7b      	adds	r3, r7, #1
 80114ca:	d007      	beq.n	80114dc <_strtol_l.isra.0+0x84>
 80114cc:	4584      	cmp	ip, r0
 80114ce:	d31c      	bcc.n	801150a <_strtol_l.isra.0+0xb2>
 80114d0:	d101      	bne.n	80114d6 <_strtol_l.isra.0+0x7e>
 80114d2:	45a6      	cmp	lr, r4
 80114d4:	db19      	blt.n	801150a <_strtol_l.isra.0+0xb2>
 80114d6:	fb00 4006 	mla	r0, r0, r6, r4
 80114da:	2701      	movs	r7, #1
 80114dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114e0:	e7eb      	b.n	80114ba <_strtol_l.isra.0+0x62>
 80114e2:	462f      	mov	r7, r5
 80114e4:	e7bf      	b.n	8011466 <_strtol_l.isra.0+0xe>
 80114e6:	2c2b      	cmp	r4, #43	; 0x2b
 80114e8:	bf04      	itt	eq
 80114ea:	1cbd      	addeq	r5, r7, #2
 80114ec:	787c      	ldrbeq	r4, [r7, #1]
 80114ee:	461a      	mov	r2, r3
 80114f0:	e7c9      	b.n	8011486 <_strtol_l.isra.0+0x2e>
 80114f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80114f6:	2b19      	cmp	r3, #25
 80114f8:	d801      	bhi.n	80114fe <_strtol_l.isra.0+0xa6>
 80114fa:	3c37      	subs	r4, #55	; 0x37
 80114fc:	e7e2      	b.n	80114c4 <_strtol_l.isra.0+0x6c>
 80114fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011502:	2b19      	cmp	r3, #25
 8011504:	d804      	bhi.n	8011510 <_strtol_l.isra.0+0xb8>
 8011506:	3c57      	subs	r4, #87	; 0x57
 8011508:	e7dc      	b.n	80114c4 <_strtol_l.isra.0+0x6c>
 801150a:	f04f 37ff 	mov.w	r7, #4294967295
 801150e:	e7e5      	b.n	80114dc <_strtol_l.isra.0+0x84>
 8011510:	1c7b      	adds	r3, r7, #1
 8011512:	d108      	bne.n	8011526 <_strtol_l.isra.0+0xce>
 8011514:	2322      	movs	r3, #34	; 0x22
 8011516:	f8c8 3000 	str.w	r3, [r8]
 801151a:	4608      	mov	r0, r1
 801151c:	f1ba 0f00 	cmp.w	sl, #0
 8011520:	d107      	bne.n	8011532 <_strtol_l.isra.0+0xda>
 8011522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011526:	b102      	cbz	r2, 801152a <_strtol_l.isra.0+0xd2>
 8011528:	4240      	negs	r0, r0
 801152a:	f1ba 0f00 	cmp.w	sl, #0
 801152e:	d0f8      	beq.n	8011522 <_strtol_l.isra.0+0xca>
 8011530:	b10f      	cbz	r7, 8011536 <_strtol_l.isra.0+0xde>
 8011532:	f105 39ff 	add.w	r9, r5, #4294967295
 8011536:	f8ca 9000 	str.w	r9, [sl]
 801153a:	e7f2      	b.n	8011522 <_strtol_l.isra.0+0xca>
 801153c:	2430      	movs	r4, #48	; 0x30
 801153e:	2e00      	cmp	r6, #0
 8011540:	d1af      	bne.n	80114a2 <_strtol_l.isra.0+0x4a>
 8011542:	2608      	movs	r6, #8
 8011544:	e7ad      	b.n	80114a2 <_strtol_l.isra.0+0x4a>
 8011546:	2c30      	cmp	r4, #48	; 0x30
 8011548:	d0a3      	beq.n	8011492 <_strtol_l.isra.0+0x3a>
 801154a:	260a      	movs	r6, #10
 801154c:	e7a9      	b.n	80114a2 <_strtol_l.isra.0+0x4a>
	...

08011550 <_strtol_r>:
 8011550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011552:	4c06      	ldr	r4, [pc, #24]	; (801156c <_strtol_r+0x1c>)
 8011554:	4d06      	ldr	r5, [pc, #24]	; (8011570 <_strtol_r+0x20>)
 8011556:	6824      	ldr	r4, [r4, #0]
 8011558:	6a24      	ldr	r4, [r4, #32]
 801155a:	2c00      	cmp	r4, #0
 801155c:	bf08      	it	eq
 801155e:	462c      	moveq	r4, r5
 8011560:	9400      	str	r4, [sp, #0]
 8011562:	f7ff ff79 	bl	8011458 <_strtol_l.isra.0>
 8011566:	b003      	add	sp, #12
 8011568:	bd30      	pop	{r4, r5, pc}
 801156a:	bf00      	nop
 801156c:	2000086c 	.word	0x2000086c
 8011570:	200008d0 	.word	0x200008d0

08011574 <__swbuf_r>:
 8011574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011576:	460e      	mov	r6, r1
 8011578:	4614      	mov	r4, r2
 801157a:	4605      	mov	r5, r0
 801157c:	b118      	cbz	r0, 8011586 <__swbuf_r+0x12>
 801157e:	6983      	ldr	r3, [r0, #24]
 8011580:	b90b      	cbnz	r3, 8011586 <__swbuf_r+0x12>
 8011582:	f000 ffa1 	bl	80124c8 <__sinit>
 8011586:	4b21      	ldr	r3, [pc, #132]	; (801160c <__swbuf_r+0x98>)
 8011588:	429c      	cmp	r4, r3
 801158a:	d12a      	bne.n	80115e2 <__swbuf_r+0x6e>
 801158c:	686c      	ldr	r4, [r5, #4]
 801158e:	69a3      	ldr	r3, [r4, #24]
 8011590:	60a3      	str	r3, [r4, #8]
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	071a      	lsls	r2, r3, #28
 8011596:	d52e      	bpl.n	80115f6 <__swbuf_r+0x82>
 8011598:	6923      	ldr	r3, [r4, #16]
 801159a:	b363      	cbz	r3, 80115f6 <__swbuf_r+0x82>
 801159c:	6923      	ldr	r3, [r4, #16]
 801159e:	6820      	ldr	r0, [r4, #0]
 80115a0:	1ac0      	subs	r0, r0, r3
 80115a2:	6963      	ldr	r3, [r4, #20]
 80115a4:	b2f6      	uxtb	r6, r6
 80115a6:	4283      	cmp	r3, r0
 80115a8:	4637      	mov	r7, r6
 80115aa:	dc04      	bgt.n	80115b6 <__swbuf_r+0x42>
 80115ac:	4621      	mov	r1, r4
 80115ae:	4628      	mov	r0, r5
 80115b0:	f000 ff20 	bl	80123f4 <_fflush_r>
 80115b4:	bb28      	cbnz	r0, 8011602 <__swbuf_r+0x8e>
 80115b6:	68a3      	ldr	r3, [r4, #8]
 80115b8:	3b01      	subs	r3, #1
 80115ba:	60a3      	str	r3, [r4, #8]
 80115bc:	6823      	ldr	r3, [r4, #0]
 80115be:	1c5a      	adds	r2, r3, #1
 80115c0:	6022      	str	r2, [r4, #0]
 80115c2:	701e      	strb	r6, [r3, #0]
 80115c4:	6963      	ldr	r3, [r4, #20]
 80115c6:	3001      	adds	r0, #1
 80115c8:	4283      	cmp	r3, r0
 80115ca:	d004      	beq.n	80115d6 <__swbuf_r+0x62>
 80115cc:	89a3      	ldrh	r3, [r4, #12]
 80115ce:	07db      	lsls	r3, r3, #31
 80115d0:	d519      	bpl.n	8011606 <__swbuf_r+0x92>
 80115d2:	2e0a      	cmp	r6, #10
 80115d4:	d117      	bne.n	8011606 <__swbuf_r+0x92>
 80115d6:	4621      	mov	r1, r4
 80115d8:	4628      	mov	r0, r5
 80115da:	f000 ff0b 	bl	80123f4 <_fflush_r>
 80115de:	b190      	cbz	r0, 8011606 <__swbuf_r+0x92>
 80115e0:	e00f      	b.n	8011602 <__swbuf_r+0x8e>
 80115e2:	4b0b      	ldr	r3, [pc, #44]	; (8011610 <__swbuf_r+0x9c>)
 80115e4:	429c      	cmp	r4, r3
 80115e6:	d101      	bne.n	80115ec <__swbuf_r+0x78>
 80115e8:	68ac      	ldr	r4, [r5, #8]
 80115ea:	e7d0      	b.n	801158e <__swbuf_r+0x1a>
 80115ec:	4b09      	ldr	r3, [pc, #36]	; (8011614 <__swbuf_r+0xa0>)
 80115ee:	429c      	cmp	r4, r3
 80115f0:	bf08      	it	eq
 80115f2:	68ec      	ldreq	r4, [r5, #12]
 80115f4:	e7cb      	b.n	801158e <__swbuf_r+0x1a>
 80115f6:	4621      	mov	r1, r4
 80115f8:	4628      	mov	r0, r5
 80115fa:	f000 f81f 	bl	801163c <__swsetup_r>
 80115fe:	2800      	cmp	r0, #0
 8011600:	d0cc      	beq.n	801159c <__swbuf_r+0x28>
 8011602:	f04f 37ff 	mov.w	r7, #4294967295
 8011606:	4638      	mov	r0, r7
 8011608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801160a:	bf00      	nop
 801160c:	08014920 	.word	0x08014920
 8011610:	08014940 	.word	0x08014940
 8011614:	08014900 	.word	0x08014900

08011618 <_write_r>:
 8011618:	b538      	push	{r3, r4, r5, lr}
 801161a:	4c07      	ldr	r4, [pc, #28]	; (8011638 <_write_r+0x20>)
 801161c:	4605      	mov	r5, r0
 801161e:	4608      	mov	r0, r1
 8011620:	4611      	mov	r1, r2
 8011622:	2200      	movs	r2, #0
 8011624:	6022      	str	r2, [r4, #0]
 8011626:	461a      	mov	r2, r3
 8011628:	f7fb fe2a 	bl	800d280 <_write>
 801162c:	1c43      	adds	r3, r0, #1
 801162e:	d102      	bne.n	8011636 <_write_r+0x1e>
 8011630:	6823      	ldr	r3, [r4, #0]
 8011632:	b103      	cbz	r3, 8011636 <_write_r+0x1e>
 8011634:	602b      	str	r3, [r5, #0]
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	2000ecb0 	.word	0x2000ecb0

0801163c <__swsetup_r>:
 801163c:	4b32      	ldr	r3, [pc, #200]	; (8011708 <__swsetup_r+0xcc>)
 801163e:	b570      	push	{r4, r5, r6, lr}
 8011640:	681d      	ldr	r5, [r3, #0]
 8011642:	4606      	mov	r6, r0
 8011644:	460c      	mov	r4, r1
 8011646:	b125      	cbz	r5, 8011652 <__swsetup_r+0x16>
 8011648:	69ab      	ldr	r3, [r5, #24]
 801164a:	b913      	cbnz	r3, 8011652 <__swsetup_r+0x16>
 801164c:	4628      	mov	r0, r5
 801164e:	f000 ff3b 	bl	80124c8 <__sinit>
 8011652:	4b2e      	ldr	r3, [pc, #184]	; (801170c <__swsetup_r+0xd0>)
 8011654:	429c      	cmp	r4, r3
 8011656:	d10f      	bne.n	8011678 <__swsetup_r+0x3c>
 8011658:	686c      	ldr	r4, [r5, #4]
 801165a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801165e:	b29a      	uxth	r2, r3
 8011660:	0715      	lsls	r5, r2, #28
 8011662:	d42c      	bmi.n	80116be <__swsetup_r+0x82>
 8011664:	06d0      	lsls	r0, r2, #27
 8011666:	d411      	bmi.n	801168c <__swsetup_r+0x50>
 8011668:	2209      	movs	r2, #9
 801166a:	6032      	str	r2, [r6, #0]
 801166c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011670:	81a3      	strh	r3, [r4, #12]
 8011672:	f04f 30ff 	mov.w	r0, #4294967295
 8011676:	e03e      	b.n	80116f6 <__swsetup_r+0xba>
 8011678:	4b25      	ldr	r3, [pc, #148]	; (8011710 <__swsetup_r+0xd4>)
 801167a:	429c      	cmp	r4, r3
 801167c:	d101      	bne.n	8011682 <__swsetup_r+0x46>
 801167e:	68ac      	ldr	r4, [r5, #8]
 8011680:	e7eb      	b.n	801165a <__swsetup_r+0x1e>
 8011682:	4b24      	ldr	r3, [pc, #144]	; (8011714 <__swsetup_r+0xd8>)
 8011684:	429c      	cmp	r4, r3
 8011686:	bf08      	it	eq
 8011688:	68ec      	ldreq	r4, [r5, #12]
 801168a:	e7e6      	b.n	801165a <__swsetup_r+0x1e>
 801168c:	0751      	lsls	r1, r2, #29
 801168e:	d512      	bpl.n	80116b6 <__swsetup_r+0x7a>
 8011690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011692:	b141      	cbz	r1, 80116a6 <__swsetup_r+0x6a>
 8011694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011698:	4299      	cmp	r1, r3
 801169a:	d002      	beq.n	80116a2 <__swsetup_r+0x66>
 801169c:	4630      	mov	r0, r6
 801169e:	f7fe f8c7 	bl	800f830 <_free_r>
 80116a2:	2300      	movs	r3, #0
 80116a4:	6363      	str	r3, [r4, #52]	; 0x34
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80116ac:	81a3      	strh	r3, [r4, #12]
 80116ae:	2300      	movs	r3, #0
 80116b0:	6063      	str	r3, [r4, #4]
 80116b2:	6923      	ldr	r3, [r4, #16]
 80116b4:	6023      	str	r3, [r4, #0]
 80116b6:	89a3      	ldrh	r3, [r4, #12]
 80116b8:	f043 0308 	orr.w	r3, r3, #8
 80116bc:	81a3      	strh	r3, [r4, #12]
 80116be:	6923      	ldr	r3, [r4, #16]
 80116c0:	b94b      	cbnz	r3, 80116d6 <__swsetup_r+0x9a>
 80116c2:	89a3      	ldrh	r3, [r4, #12]
 80116c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80116c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116cc:	d003      	beq.n	80116d6 <__swsetup_r+0x9a>
 80116ce:	4621      	mov	r1, r4
 80116d0:	4630      	mov	r0, r6
 80116d2:	f001 fb01 	bl	8012cd8 <__smakebuf_r>
 80116d6:	89a2      	ldrh	r2, [r4, #12]
 80116d8:	f012 0301 	ands.w	r3, r2, #1
 80116dc:	d00c      	beq.n	80116f8 <__swsetup_r+0xbc>
 80116de:	2300      	movs	r3, #0
 80116e0:	60a3      	str	r3, [r4, #8]
 80116e2:	6963      	ldr	r3, [r4, #20]
 80116e4:	425b      	negs	r3, r3
 80116e6:	61a3      	str	r3, [r4, #24]
 80116e8:	6923      	ldr	r3, [r4, #16]
 80116ea:	b953      	cbnz	r3, 8011702 <__swsetup_r+0xc6>
 80116ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80116f4:	d1ba      	bne.n	801166c <__swsetup_r+0x30>
 80116f6:	bd70      	pop	{r4, r5, r6, pc}
 80116f8:	0792      	lsls	r2, r2, #30
 80116fa:	bf58      	it	pl
 80116fc:	6963      	ldrpl	r3, [r4, #20]
 80116fe:	60a3      	str	r3, [r4, #8]
 8011700:	e7f2      	b.n	80116e8 <__swsetup_r+0xac>
 8011702:	2000      	movs	r0, #0
 8011704:	e7f7      	b.n	80116f6 <__swsetup_r+0xba>
 8011706:	bf00      	nop
 8011708:	2000086c 	.word	0x2000086c
 801170c:	08014920 	.word	0x08014920
 8011710:	08014940 	.word	0x08014940
 8011714:	08014900 	.word	0x08014900

08011718 <_close_r>:
 8011718:	b538      	push	{r3, r4, r5, lr}
 801171a:	4c06      	ldr	r4, [pc, #24]	; (8011734 <_close_r+0x1c>)
 801171c:	2300      	movs	r3, #0
 801171e:	4605      	mov	r5, r0
 8011720:	4608      	mov	r0, r1
 8011722:	6023      	str	r3, [r4, #0]
 8011724:	f002 fe54 	bl	80143d0 <_close>
 8011728:	1c43      	adds	r3, r0, #1
 801172a:	d102      	bne.n	8011732 <_close_r+0x1a>
 801172c:	6823      	ldr	r3, [r4, #0]
 801172e:	b103      	cbz	r3, 8011732 <_close_r+0x1a>
 8011730:	602b      	str	r3, [r5, #0]
 8011732:	bd38      	pop	{r3, r4, r5, pc}
 8011734:	2000ecb0 	.word	0x2000ecb0

08011738 <quorem>:
 8011738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801173c:	6903      	ldr	r3, [r0, #16]
 801173e:	690c      	ldr	r4, [r1, #16]
 8011740:	42a3      	cmp	r3, r4
 8011742:	4680      	mov	r8, r0
 8011744:	f2c0 8082 	blt.w	801184c <quorem+0x114>
 8011748:	3c01      	subs	r4, #1
 801174a:	f101 0714 	add.w	r7, r1, #20
 801174e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011752:	f100 0614 	add.w	r6, r0, #20
 8011756:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801175a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801175e:	eb06 030c 	add.w	r3, r6, ip
 8011762:	3501      	adds	r5, #1
 8011764:	eb07 090c 	add.w	r9, r7, ip
 8011768:	9301      	str	r3, [sp, #4]
 801176a:	fbb0 f5f5 	udiv	r5, r0, r5
 801176e:	b395      	cbz	r5, 80117d6 <quorem+0x9e>
 8011770:	f04f 0a00 	mov.w	sl, #0
 8011774:	4638      	mov	r0, r7
 8011776:	46b6      	mov	lr, r6
 8011778:	46d3      	mov	fp, sl
 801177a:	f850 2b04 	ldr.w	r2, [r0], #4
 801177e:	b293      	uxth	r3, r2
 8011780:	fb05 a303 	mla	r3, r5, r3, sl
 8011784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011788:	b29b      	uxth	r3, r3
 801178a:	ebab 0303 	sub.w	r3, fp, r3
 801178e:	0c12      	lsrs	r2, r2, #16
 8011790:	f8de b000 	ldr.w	fp, [lr]
 8011794:	fb05 a202 	mla	r2, r5, r2, sl
 8011798:	fa13 f38b 	uxtah	r3, r3, fp
 801179c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80117a0:	fa1f fb82 	uxth.w	fp, r2
 80117a4:	f8de 2000 	ldr.w	r2, [lr]
 80117a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80117ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117b6:	4581      	cmp	r9, r0
 80117b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80117bc:	f84e 3b04 	str.w	r3, [lr], #4
 80117c0:	d2db      	bcs.n	801177a <quorem+0x42>
 80117c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80117c6:	b933      	cbnz	r3, 80117d6 <quorem+0x9e>
 80117c8:	9b01      	ldr	r3, [sp, #4]
 80117ca:	3b04      	subs	r3, #4
 80117cc:	429e      	cmp	r6, r3
 80117ce:	461a      	mov	r2, r3
 80117d0:	d330      	bcc.n	8011834 <quorem+0xfc>
 80117d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80117d6:	4640      	mov	r0, r8
 80117d8:	f001 fd26 	bl	8013228 <__mcmp>
 80117dc:	2800      	cmp	r0, #0
 80117de:	db25      	blt.n	801182c <quorem+0xf4>
 80117e0:	3501      	adds	r5, #1
 80117e2:	4630      	mov	r0, r6
 80117e4:	f04f 0c00 	mov.w	ip, #0
 80117e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80117ec:	f8d0 e000 	ldr.w	lr, [r0]
 80117f0:	b293      	uxth	r3, r2
 80117f2:	ebac 0303 	sub.w	r3, ip, r3
 80117f6:	0c12      	lsrs	r2, r2, #16
 80117f8:	fa13 f38e 	uxtah	r3, r3, lr
 80117fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011804:	b29b      	uxth	r3, r3
 8011806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801180a:	45b9      	cmp	r9, r7
 801180c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011810:	f840 3b04 	str.w	r3, [r0], #4
 8011814:	d2e8      	bcs.n	80117e8 <quorem+0xb0>
 8011816:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801181a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801181e:	b92a      	cbnz	r2, 801182c <quorem+0xf4>
 8011820:	3b04      	subs	r3, #4
 8011822:	429e      	cmp	r6, r3
 8011824:	461a      	mov	r2, r3
 8011826:	d30b      	bcc.n	8011840 <quorem+0x108>
 8011828:	f8c8 4010 	str.w	r4, [r8, #16]
 801182c:	4628      	mov	r0, r5
 801182e:	b003      	add	sp, #12
 8011830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011834:	6812      	ldr	r2, [r2, #0]
 8011836:	3b04      	subs	r3, #4
 8011838:	2a00      	cmp	r2, #0
 801183a:	d1ca      	bne.n	80117d2 <quorem+0x9a>
 801183c:	3c01      	subs	r4, #1
 801183e:	e7c5      	b.n	80117cc <quorem+0x94>
 8011840:	6812      	ldr	r2, [r2, #0]
 8011842:	3b04      	subs	r3, #4
 8011844:	2a00      	cmp	r2, #0
 8011846:	d1ef      	bne.n	8011828 <quorem+0xf0>
 8011848:	3c01      	subs	r4, #1
 801184a:	e7ea      	b.n	8011822 <quorem+0xea>
 801184c:	2000      	movs	r0, #0
 801184e:	e7ee      	b.n	801182e <quorem+0xf6>

08011850 <_dtoa_r>:
 8011850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011854:	ec57 6b10 	vmov	r6, r7, d0
 8011858:	b095      	sub	sp, #84	; 0x54
 801185a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801185c:	9108      	str	r1, [sp, #32]
 801185e:	4604      	mov	r4, r0
 8011860:	920a      	str	r2, [sp, #40]	; 0x28
 8011862:	9311      	str	r3, [sp, #68]	; 0x44
 8011864:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8011868:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801186c:	b93d      	cbnz	r5, 801187e <_dtoa_r+0x2e>
 801186e:	2010      	movs	r0, #16
 8011870:	f7fd ffb4 	bl	800f7dc <malloc>
 8011874:	6260      	str	r0, [r4, #36]	; 0x24
 8011876:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801187a:	6005      	str	r5, [r0, #0]
 801187c:	60c5      	str	r5, [r0, #12]
 801187e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011880:	6819      	ldr	r1, [r3, #0]
 8011882:	b151      	cbz	r1, 801189a <_dtoa_r+0x4a>
 8011884:	685a      	ldr	r2, [r3, #4]
 8011886:	604a      	str	r2, [r1, #4]
 8011888:	2301      	movs	r3, #1
 801188a:	4093      	lsls	r3, r2
 801188c:	608b      	str	r3, [r1, #8]
 801188e:	4620      	mov	r0, r4
 8011890:	f001 faaa 	bl	8012de8 <_Bfree>
 8011894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011896:	2200      	movs	r2, #0
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	1e3b      	subs	r3, r7, #0
 801189c:	bfb9      	ittee	lt
 801189e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80118a2:	9303      	strlt	r3, [sp, #12]
 80118a4:	2300      	movge	r3, #0
 80118a6:	f8c8 3000 	strge.w	r3, [r8]
 80118aa:	9d03      	ldr	r5, [sp, #12]
 80118ac:	4bac      	ldr	r3, [pc, #688]	; (8011b60 <_dtoa_r+0x310>)
 80118ae:	bfbc      	itt	lt
 80118b0:	2201      	movlt	r2, #1
 80118b2:	f8c8 2000 	strlt.w	r2, [r8]
 80118b6:	43ab      	bics	r3, r5
 80118b8:	d11b      	bne.n	80118f2 <_dtoa_r+0xa2>
 80118ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80118bc:	f242 730f 	movw	r3, #9999	; 0x270f
 80118c0:	6013      	str	r3, [r2, #0]
 80118c2:	9b02      	ldr	r3, [sp, #8]
 80118c4:	b923      	cbnz	r3, 80118d0 <_dtoa_r+0x80>
 80118c6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80118ca:	2d00      	cmp	r5, #0
 80118cc:	f000 84dd 	beq.w	801228a <_dtoa_r+0xa3a>
 80118d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80118d2:	b953      	cbnz	r3, 80118ea <_dtoa_r+0x9a>
 80118d4:	4ba3      	ldr	r3, [pc, #652]	; (8011b64 <_dtoa_r+0x314>)
 80118d6:	e020      	b.n	801191a <_dtoa_r+0xca>
 80118d8:	4ba3      	ldr	r3, [pc, #652]	; (8011b68 <_dtoa_r+0x318>)
 80118da:	9304      	str	r3, [sp, #16]
 80118dc:	3308      	adds	r3, #8
 80118de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80118e0:	6013      	str	r3, [r2, #0]
 80118e2:	9804      	ldr	r0, [sp, #16]
 80118e4:	b015      	add	sp, #84	; 0x54
 80118e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ea:	4b9e      	ldr	r3, [pc, #632]	; (8011b64 <_dtoa_r+0x314>)
 80118ec:	9304      	str	r3, [sp, #16]
 80118ee:	3303      	adds	r3, #3
 80118f0:	e7f5      	b.n	80118de <_dtoa_r+0x8e>
 80118f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80118fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011902:	d10c      	bne.n	801191e <_dtoa_r+0xce>
 8011904:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011906:	2301      	movs	r3, #1
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801190c:	2b00      	cmp	r3, #0
 801190e:	f000 84b9 	beq.w	8012284 <_dtoa_r+0xa34>
 8011912:	4b96      	ldr	r3, [pc, #600]	; (8011b6c <_dtoa_r+0x31c>)
 8011914:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011916:	6013      	str	r3, [r2, #0]
 8011918:	3b01      	subs	r3, #1
 801191a:	9304      	str	r3, [sp, #16]
 801191c:	e7e1      	b.n	80118e2 <_dtoa_r+0x92>
 801191e:	a913      	add	r1, sp, #76	; 0x4c
 8011920:	aa12      	add	r2, sp, #72	; 0x48
 8011922:	ed9d 0b04 	vldr	d0, [sp, #16]
 8011926:	4620      	mov	r0, r4
 8011928:	f001 fd6c 	bl	8013404 <__d2b>
 801192c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8011930:	9001      	str	r0, [sp, #4]
 8011932:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011934:	2e00      	cmp	r6, #0
 8011936:	d046      	beq.n	80119c6 <_dtoa_r+0x176>
 8011938:	9805      	ldr	r0, [sp, #20]
 801193a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801193e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011942:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8011946:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801194a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801194e:	2700      	movs	r7, #0
 8011950:	ee07 aa90 	vmov	s15, sl
 8011954:	ec43 2b16 	vmov	d6, r2, r3
 8011958:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801195c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8011b48 <_dtoa_r+0x2f8>
 8011960:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011964:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011968:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8011b50 <_dtoa_r+0x300>
 801196c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011970:	eeb0 7b46 	vmov.f64	d7, d6
 8011974:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8011b58 <_dtoa_r+0x308>
 8011978:	eea5 7b06 	vfma.f64	d7, d5, d6
 801197c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011980:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011988:	ee16 ba90 	vmov	fp, s13
 801198c:	d508      	bpl.n	80119a0 <_dtoa_r+0x150>
 801198e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011992:	eeb4 6b47 	vcmp.f64	d6, d7
 8011996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199a:	bf18      	it	ne
 801199c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80119a0:	f1bb 0f16 	cmp.w	fp, #22
 80119a4:	d834      	bhi.n	8011a10 <_dtoa_r+0x1c0>
 80119a6:	4b72      	ldr	r3, [pc, #456]	; (8011b70 <_dtoa_r+0x320>)
 80119a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80119ac:	ed93 7b00 	vldr	d7, [r3]
 80119b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80119b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80119b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119bc:	dd01      	ble.n	80119c2 <_dtoa_r+0x172>
 80119be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119c2:	2300      	movs	r3, #0
 80119c4:	e025      	b.n	8011a12 <_dtoa_r+0x1c2>
 80119c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119c8:	eb01 0a03 	add.w	sl, r1, r3
 80119cc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80119d0:	2b20      	cmp	r3, #32
 80119d2:	dd17      	ble.n	8011a04 <_dtoa_r+0x1b4>
 80119d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80119d8:	9a02      	ldr	r2, [sp, #8]
 80119da:	409d      	lsls	r5, r3
 80119dc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80119e0:	fa22 f303 	lsr.w	r3, r2, r3
 80119e4:	432b      	orrs	r3, r5
 80119e6:	ee07 3a90 	vmov	s15, r3
 80119ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80119ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80119f6:	9805      	ldr	r0, [sp, #20]
 80119f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119fc:	2701      	movs	r7, #1
 80119fe:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8011a02:	e7a5      	b.n	8011950 <_dtoa_r+0x100>
 8011a04:	9a02      	ldr	r2, [sp, #8]
 8011a06:	f1c3 0320 	rsb	r3, r3, #32
 8011a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8011a0e:	e7ea      	b.n	80119e6 <_dtoa_r+0x196>
 8011a10:	2301      	movs	r3, #1
 8011a12:	eba1 0a0a 	sub.w	sl, r1, sl
 8011a16:	9310      	str	r3, [sp, #64]	; 0x40
 8011a18:	f1ba 0301 	subs.w	r3, sl, #1
 8011a1c:	9307      	str	r3, [sp, #28]
 8011a1e:	bf43      	ittte	mi
 8011a20:	2300      	movmi	r3, #0
 8011a22:	f1ca 0a01 	rsbmi	sl, sl, #1
 8011a26:	9307      	strmi	r3, [sp, #28]
 8011a28:	f04f 0a00 	movpl.w	sl, #0
 8011a2c:	f1bb 0f00 	cmp.w	fp, #0
 8011a30:	db19      	blt.n	8011a66 <_dtoa_r+0x216>
 8011a32:	9b07      	ldr	r3, [sp, #28]
 8011a34:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011a38:	445b      	add	r3, fp
 8011a3a:	9307      	str	r3, [sp, #28]
 8011a3c:	f04f 0800 	mov.w	r8, #0
 8011a40:	9b08      	ldr	r3, [sp, #32]
 8011a42:	2b09      	cmp	r3, #9
 8011a44:	d866      	bhi.n	8011b14 <_dtoa_r+0x2c4>
 8011a46:	2b05      	cmp	r3, #5
 8011a48:	bfc4      	itt	gt
 8011a4a:	3b04      	subgt	r3, #4
 8011a4c:	9308      	strgt	r3, [sp, #32]
 8011a4e:	9b08      	ldr	r3, [sp, #32]
 8011a50:	f1a3 0302 	sub.w	r3, r3, #2
 8011a54:	bfcc      	ite	gt
 8011a56:	2500      	movgt	r5, #0
 8011a58:	2501      	movle	r5, #1
 8011a5a:	2b03      	cmp	r3, #3
 8011a5c:	d866      	bhi.n	8011b2c <_dtoa_r+0x2dc>
 8011a5e:	e8df f003 	tbb	[pc, r3]
 8011a62:	5755      	.short	0x5755
 8011a64:	4909      	.short	0x4909
 8011a66:	2300      	movs	r3, #0
 8011a68:	ebaa 0a0b 	sub.w	sl, sl, fp
 8011a6c:	f1cb 0800 	rsb	r8, fp, #0
 8011a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a72:	e7e5      	b.n	8011a40 <_dtoa_r+0x1f0>
 8011a74:	2301      	movs	r3, #1
 8011a76:	9309      	str	r3, [sp, #36]	; 0x24
 8011a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	dd59      	ble.n	8011b32 <_dtoa_r+0x2e2>
 8011a7e:	9306      	str	r3, [sp, #24]
 8011a80:	4699      	mov	r9, r3
 8011a82:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a84:	2200      	movs	r2, #0
 8011a86:	6072      	str	r2, [r6, #4]
 8011a88:	2204      	movs	r2, #4
 8011a8a:	f102 0014 	add.w	r0, r2, #20
 8011a8e:	4298      	cmp	r0, r3
 8011a90:	6871      	ldr	r1, [r6, #4]
 8011a92:	d953      	bls.n	8011b3c <_dtoa_r+0x2ec>
 8011a94:	4620      	mov	r0, r4
 8011a96:	f001 f973 	bl	8012d80 <_Balloc>
 8011a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a9c:	6030      	str	r0, [r6, #0]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	9304      	str	r3, [sp, #16]
 8011aa2:	f1b9 0f0e 	cmp.w	r9, #14
 8011aa6:	f200 80c2 	bhi.w	8011c2e <_dtoa_r+0x3de>
 8011aaa:	2d00      	cmp	r5, #0
 8011aac:	f000 80bf 	beq.w	8011c2e <_dtoa_r+0x3de>
 8011ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ab4:	f1bb 0f00 	cmp.w	fp, #0
 8011ab8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8011abc:	f340 80e6 	ble.w	8011c8c <_dtoa_r+0x43c>
 8011ac0:	4a2b      	ldr	r2, [pc, #172]	; (8011b70 <_dtoa_r+0x320>)
 8011ac2:	f00b 030f 	and.w	r3, fp, #15
 8011ac6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011aca:	ed93 7b00 	vldr	d7, [r3]
 8011ace:	ea4f 132b 	mov.w	r3, fp, asr #4
 8011ad2:	06da      	lsls	r2, r3, #27
 8011ad4:	f140 80d8 	bpl.w	8011c88 <_dtoa_r+0x438>
 8011ad8:	4a26      	ldr	r2, [pc, #152]	; (8011b74 <_dtoa_r+0x324>)
 8011ada:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8011ade:	ed92 6b08 	vldr	d6, [r2, #32]
 8011ae2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8011ae6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011aea:	f003 030f 	and.w	r3, r3, #15
 8011aee:	2203      	movs	r2, #3
 8011af0:	4920      	ldr	r1, [pc, #128]	; (8011b74 <_dtoa_r+0x324>)
 8011af2:	e04a      	b.n	8011b8a <_dtoa_r+0x33a>
 8011af4:	2301      	movs	r3, #1
 8011af6:	9309      	str	r3, [sp, #36]	; 0x24
 8011af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011afa:	445b      	add	r3, fp
 8011afc:	f103 0901 	add.w	r9, r3, #1
 8011b00:	9306      	str	r3, [sp, #24]
 8011b02:	464b      	mov	r3, r9
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	bfb8      	it	lt
 8011b08:	2301      	movlt	r3, #1
 8011b0a:	e7ba      	b.n	8011a82 <_dtoa_r+0x232>
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	e7b2      	b.n	8011a76 <_dtoa_r+0x226>
 8011b10:	2300      	movs	r3, #0
 8011b12:	e7f0      	b.n	8011af6 <_dtoa_r+0x2a6>
 8011b14:	2501      	movs	r5, #1
 8011b16:	2300      	movs	r3, #0
 8011b18:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8011b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b20:	9306      	str	r3, [sp, #24]
 8011b22:	4699      	mov	r9, r3
 8011b24:	2200      	movs	r2, #0
 8011b26:	2312      	movs	r3, #18
 8011b28:	920a      	str	r2, [sp, #40]	; 0x28
 8011b2a:	e7aa      	b.n	8011a82 <_dtoa_r+0x232>
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b30:	e7f4      	b.n	8011b1c <_dtoa_r+0x2cc>
 8011b32:	2301      	movs	r3, #1
 8011b34:	9306      	str	r3, [sp, #24]
 8011b36:	4699      	mov	r9, r3
 8011b38:	461a      	mov	r2, r3
 8011b3a:	e7f5      	b.n	8011b28 <_dtoa_r+0x2d8>
 8011b3c:	3101      	adds	r1, #1
 8011b3e:	6071      	str	r1, [r6, #4]
 8011b40:	0052      	lsls	r2, r2, #1
 8011b42:	e7a2      	b.n	8011a8a <_dtoa_r+0x23a>
 8011b44:	f3af 8000 	nop.w
 8011b48:	636f4361 	.word	0x636f4361
 8011b4c:	3fd287a7 	.word	0x3fd287a7
 8011b50:	8b60c8b3 	.word	0x8b60c8b3
 8011b54:	3fc68a28 	.word	0x3fc68a28
 8011b58:	509f79fb 	.word	0x509f79fb
 8011b5c:	3fd34413 	.word	0x3fd34413
 8011b60:	7ff00000 	.word	0x7ff00000
 8011b64:	080148f9 	.word	0x080148f9
 8011b68:	080148f0 	.word	0x080148f0
 8011b6c:	08014a94 	.word	0x08014a94
 8011b70:	08014998 	.word	0x08014998
 8011b74:	08014970 	.word	0x08014970
 8011b78:	07de      	lsls	r6, r3, #31
 8011b7a:	d504      	bpl.n	8011b86 <_dtoa_r+0x336>
 8011b7c:	ed91 6b00 	vldr	d6, [r1]
 8011b80:	3201      	adds	r2, #1
 8011b82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b86:	105b      	asrs	r3, r3, #1
 8011b88:	3108      	adds	r1, #8
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d1f4      	bne.n	8011b78 <_dtoa_r+0x328>
 8011b8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011b92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011b96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	f000 80a7 	beq.w	8011cf0 <_dtoa_r+0x4a0>
 8011ba2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011ba6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011baa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb2:	f140 809d 	bpl.w	8011cf0 <_dtoa_r+0x4a0>
 8011bb6:	f1b9 0f00 	cmp.w	r9, #0
 8011bba:	f000 8099 	beq.w	8011cf0 <_dtoa_r+0x4a0>
 8011bbe:	9b06      	ldr	r3, [sp, #24]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	dd30      	ble.n	8011c26 <_dtoa_r+0x3d6>
 8011bc4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011bc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bd0:	9d06      	ldr	r5, [sp, #24]
 8011bd2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011bd6:	3201      	adds	r2, #1
 8011bd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011bdc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011be0:	ee07 2a90 	vmov	s15, r2
 8011be4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011be8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011bec:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011bf0:	9a03      	ldr	r2, [sp, #12]
 8011bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bf6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8011bfa:	2d00      	cmp	r5, #0
 8011bfc:	d17b      	bne.n	8011cf6 <_dtoa_r+0x4a6>
 8011bfe:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c02:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011c06:	ec41 0b17 	vmov	d7, r0, r1
 8011c0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c12:	f300 8253 	bgt.w	80120bc <_dtoa_r+0x86c>
 8011c16:	eeb1 7b47 	vneg.f64	d7, d7
 8011c1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c22:	f100 8249 	bmi.w	80120b8 <_dtoa_r+0x868>
 8011c26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011c2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	f2c0 8119 	blt.w	8011e68 <_dtoa_r+0x618>
 8011c36:	f1bb 0f0e 	cmp.w	fp, #14
 8011c3a:	f300 8115 	bgt.w	8011e68 <_dtoa_r+0x618>
 8011c3e:	4bc3      	ldr	r3, [pc, #780]	; (8011f4c <_dtoa_r+0x6fc>)
 8011c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011c44:	ed93 6b00 	vldr	d6, [r3]
 8011c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f280 80ba 	bge.w	8011dc4 <_dtoa_r+0x574>
 8011c50:	f1b9 0f00 	cmp.w	r9, #0
 8011c54:	f300 80b6 	bgt.w	8011dc4 <_dtoa_r+0x574>
 8011c58:	f040 822d 	bne.w	80120b6 <_dtoa_r+0x866>
 8011c5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c70:	464d      	mov	r5, r9
 8011c72:	464f      	mov	r7, r9
 8011c74:	f280 8204 	bge.w	8012080 <_dtoa_r+0x830>
 8011c78:	9b04      	ldr	r3, [sp, #16]
 8011c7a:	9a04      	ldr	r2, [sp, #16]
 8011c7c:	1c5e      	adds	r6, r3, #1
 8011c7e:	2331      	movs	r3, #49	; 0x31
 8011c80:	7013      	strb	r3, [r2, #0]
 8011c82:	f10b 0b01 	add.w	fp, fp, #1
 8011c86:	e1ff      	b.n	8012088 <_dtoa_r+0x838>
 8011c88:	2202      	movs	r2, #2
 8011c8a:	e731      	b.n	8011af0 <_dtoa_r+0x2a0>
 8011c8c:	d02e      	beq.n	8011cec <_dtoa_r+0x49c>
 8011c8e:	f1cb 0300 	rsb	r3, fp, #0
 8011c92:	4aae      	ldr	r2, [pc, #696]	; (8011f4c <_dtoa_r+0x6fc>)
 8011c94:	f003 010f 	and.w	r1, r3, #15
 8011c98:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011c9c:	ed92 7b00 	vldr	d7, [r2]
 8011ca0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8011ca4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011ca8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011cac:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8011cb0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011cb4:	49a6      	ldr	r1, [pc, #664]	; (8011f50 <_dtoa_r+0x700>)
 8011cb6:	111b      	asrs	r3, r3, #4
 8011cb8:	2000      	movs	r0, #0
 8011cba:	2202      	movs	r2, #2
 8011cbc:	b93b      	cbnz	r3, 8011cce <_dtoa_r+0x47e>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	f43f af6b 	beq.w	8011b9a <_dtoa_r+0x34a>
 8011cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ccc:	e765      	b.n	8011b9a <_dtoa_r+0x34a>
 8011cce:	07dd      	lsls	r5, r3, #31
 8011cd0:	d509      	bpl.n	8011ce6 <_dtoa_r+0x496>
 8011cd2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8011cd6:	ed91 7b00 	vldr	d7, [r1]
 8011cda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011cde:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011ce2:	3201      	adds	r2, #1
 8011ce4:	2001      	movs	r0, #1
 8011ce6:	105b      	asrs	r3, r3, #1
 8011ce8:	3108      	adds	r1, #8
 8011cea:	e7e7      	b.n	8011cbc <_dtoa_r+0x46c>
 8011cec:	2202      	movs	r2, #2
 8011cee:	e754      	b.n	8011b9a <_dtoa_r+0x34a>
 8011cf0:	465b      	mov	r3, fp
 8011cf2:	464d      	mov	r5, r9
 8011cf4:	e770      	b.n	8011bd8 <_dtoa_r+0x388>
 8011cf6:	4a95      	ldr	r2, [pc, #596]	; (8011f4c <_dtoa_r+0x6fc>)
 8011cf8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8011cfc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d02:	ec41 0b17 	vmov	d7, r0, r1
 8011d06:	b35a      	cbz	r2, 8011d60 <_dtoa_r+0x510>
 8011d08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011d0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011d10:	9e04      	ldr	r6, [sp, #16]
 8011d12:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011d16:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011d1a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011d1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d22:	ee14 2a90 	vmov	r2, s9
 8011d26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d2a:	3230      	adds	r2, #48	; 0x30
 8011d2c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d38:	f806 2b01 	strb.w	r2, [r6], #1
 8011d3c:	d43b      	bmi.n	8011db6 <_dtoa_r+0x566>
 8011d3e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011d42:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4a:	d472      	bmi.n	8011e32 <_dtoa_r+0x5e2>
 8011d4c:	9a04      	ldr	r2, [sp, #16]
 8011d4e:	1ab2      	subs	r2, r6, r2
 8011d50:	4295      	cmp	r5, r2
 8011d52:	f77f af68 	ble.w	8011c26 <_dtoa_r+0x3d6>
 8011d56:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011d5a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011d5e:	e7de      	b.n	8011d1e <_dtoa_r+0x4ce>
 8011d60:	9a04      	ldr	r2, [sp, #16]
 8011d62:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011d66:	1956      	adds	r6, r2, r5
 8011d68:	4611      	mov	r1, r2
 8011d6a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011d6e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d72:	ee14 2a90 	vmov	r2, s9
 8011d76:	3230      	adds	r2, #48	; 0x30
 8011d78:	f801 2b01 	strb.w	r2, [r1], #1
 8011d7c:	42b1      	cmp	r1, r6
 8011d7e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d86:	d11a      	bne.n	8011dbe <_dtoa_r+0x56e>
 8011d88:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011d8c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011d90:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d98:	dc4b      	bgt.n	8011e32 <_dtoa_r+0x5e2>
 8011d9a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011d9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da6:	f57f af3e 	bpl.w	8011c26 <_dtoa_r+0x3d6>
 8011daa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011dae:	2a30      	cmp	r2, #48	; 0x30
 8011db0:	f106 31ff 	add.w	r1, r6, #4294967295
 8011db4:	d001      	beq.n	8011dba <_dtoa_r+0x56a>
 8011db6:	469b      	mov	fp, r3
 8011db8:	e02a      	b.n	8011e10 <_dtoa_r+0x5c0>
 8011dba:	460e      	mov	r6, r1
 8011dbc:	e7f5      	b.n	8011daa <_dtoa_r+0x55a>
 8011dbe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011dc2:	e7d4      	b.n	8011d6e <_dtoa_r+0x51e>
 8011dc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011dc8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011dcc:	9e04      	ldr	r6, [sp, #16]
 8011dce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011dd2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011dd6:	ee15 3a10 	vmov	r3, s10
 8011dda:	3330      	adds	r3, #48	; 0x30
 8011ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8011de0:	9b04      	ldr	r3, [sp, #16]
 8011de2:	1af3      	subs	r3, r6, r3
 8011de4:	4599      	cmp	r9, r3
 8011de6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011dea:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011dee:	d133      	bne.n	8011e58 <_dtoa_r+0x608>
 8011df0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011df4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfc:	dc18      	bgt.n	8011e30 <_dtoa_r+0x5e0>
 8011dfe:	eeb4 7b46 	vcmp.f64	d7, d6
 8011e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e06:	d103      	bne.n	8011e10 <_dtoa_r+0x5c0>
 8011e08:	ee15 3a10 	vmov	r3, s10
 8011e0c:	07db      	lsls	r3, r3, #31
 8011e0e:	d40f      	bmi.n	8011e30 <_dtoa_r+0x5e0>
 8011e10:	9901      	ldr	r1, [sp, #4]
 8011e12:	4620      	mov	r0, r4
 8011e14:	f000 ffe8 	bl	8012de8 <_Bfree>
 8011e18:	2300      	movs	r3, #0
 8011e1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011e1c:	7033      	strb	r3, [r6, #0]
 8011e1e:	f10b 0301 	add.w	r3, fp, #1
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f43f ad5b 	beq.w	80118e2 <_dtoa_r+0x92>
 8011e2c:	601e      	str	r6, [r3, #0]
 8011e2e:	e558      	b.n	80118e2 <_dtoa_r+0x92>
 8011e30:	465b      	mov	r3, fp
 8011e32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011e36:	2939      	cmp	r1, #57	; 0x39
 8011e38:	f106 32ff 	add.w	r2, r6, #4294967295
 8011e3c:	d106      	bne.n	8011e4c <_dtoa_r+0x5fc>
 8011e3e:	9904      	ldr	r1, [sp, #16]
 8011e40:	4291      	cmp	r1, r2
 8011e42:	d107      	bne.n	8011e54 <_dtoa_r+0x604>
 8011e44:	2230      	movs	r2, #48	; 0x30
 8011e46:	700a      	strb	r2, [r1, #0]
 8011e48:	3301      	adds	r3, #1
 8011e4a:	460a      	mov	r2, r1
 8011e4c:	7811      	ldrb	r1, [r2, #0]
 8011e4e:	3101      	adds	r1, #1
 8011e50:	7011      	strb	r1, [r2, #0]
 8011e52:	e7b0      	b.n	8011db6 <_dtoa_r+0x566>
 8011e54:	4616      	mov	r6, r2
 8011e56:	e7ec      	b.n	8011e32 <_dtoa_r+0x5e2>
 8011e58:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011e5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e64:	d1b3      	bne.n	8011dce <_dtoa_r+0x57e>
 8011e66:	e7d3      	b.n	8011e10 <_dtoa_r+0x5c0>
 8011e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e6a:	2a00      	cmp	r2, #0
 8011e6c:	f000 808d 	beq.w	8011f8a <_dtoa_r+0x73a>
 8011e70:	9a08      	ldr	r2, [sp, #32]
 8011e72:	2a01      	cmp	r2, #1
 8011e74:	dc72      	bgt.n	8011f5c <_dtoa_r+0x70c>
 8011e76:	2f00      	cmp	r7, #0
 8011e78:	d06c      	beq.n	8011f54 <_dtoa_r+0x704>
 8011e7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011e7e:	4645      	mov	r5, r8
 8011e80:	4656      	mov	r6, sl
 8011e82:	9a07      	ldr	r2, [sp, #28]
 8011e84:	2101      	movs	r1, #1
 8011e86:	441a      	add	r2, r3
 8011e88:	4620      	mov	r0, r4
 8011e8a:	449a      	add	sl, r3
 8011e8c:	9207      	str	r2, [sp, #28]
 8011e8e:	f001 f889 	bl	8012fa4 <__i2b>
 8011e92:	4607      	mov	r7, r0
 8011e94:	2e00      	cmp	r6, #0
 8011e96:	dd0b      	ble.n	8011eb0 <_dtoa_r+0x660>
 8011e98:	9b07      	ldr	r3, [sp, #28]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	dd08      	ble.n	8011eb0 <_dtoa_r+0x660>
 8011e9e:	42b3      	cmp	r3, r6
 8011ea0:	9a07      	ldr	r2, [sp, #28]
 8011ea2:	bfa8      	it	ge
 8011ea4:	4633      	movge	r3, r6
 8011ea6:	ebaa 0a03 	sub.w	sl, sl, r3
 8011eaa:	1af6      	subs	r6, r6, r3
 8011eac:	1ad3      	subs	r3, r2, r3
 8011eae:	9307      	str	r3, [sp, #28]
 8011eb0:	f1b8 0f00 	cmp.w	r8, #0
 8011eb4:	d01d      	beq.n	8011ef2 <_dtoa_r+0x6a2>
 8011eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d06a      	beq.n	8011f92 <_dtoa_r+0x742>
 8011ebc:	b18d      	cbz	r5, 8011ee2 <_dtoa_r+0x692>
 8011ebe:	4639      	mov	r1, r7
 8011ec0:	462a      	mov	r2, r5
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	f001 f90e 	bl	80130e4 <__pow5mult>
 8011ec8:	9a01      	ldr	r2, [sp, #4]
 8011eca:	4601      	mov	r1, r0
 8011ecc:	4607      	mov	r7, r0
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f001 f871 	bl	8012fb6 <__multiply>
 8011ed4:	9901      	ldr	r1, [sp, #4]
 8011ed6:	900c      	str	r0, [sp, #48]	; 0x30
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f000 ff85 	bl	8012de8 <_Bfree>
 8011ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ee0:	9301      	str	r3, [sp, #4]
 8011ee2:	ebb8 0205 	subs.w	r2, r8, r5
 8011ee6:	d004      	beq.n	8011ef2 <_dtoa_r+0x6a2>
 8011ee8:	9901      	ldr	r1, [sp, #4]
 8011eea:	4620      	mov	r0, r4
 8011eec:	f001 f8fa 	bl	80130e4 <__pow5mult>
 8011ef0:	9001      	str	r0, [sp, #4]
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	f001 f855 	bl	8012fa4 <__i2b>
 8011efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011efc:	4605      	mov	r5, r0
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	f000 81ca 	beq.w	8012298 <_dtoa_r+0xa48>
 8011f04:	461a      	mov	r2, r3
 8011f06:	4601      	mov	r1, r0
 8011f08:	4620      	mov	r0, r4
 8011f0a:	f001 f8eb 	bl	80130e4 <__pow5mult>
 8011f0e:	9b08      	ldr	r3, [sp, #32]
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	4605      	mov	r5, r0
 8011f14:	dc44      	bgt.n	8011fa0 <_dtoa_r+0x750>
 8011f16:	9b02      	ldr	r3, [sp, #8]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d13c      	bne.n	8011f96 <_dtoa_r+0x746>
 8011f1c:	9b03      	ldr	r3, [sp, #12]
 8011f1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d137      	bne.n	8011f96 <_dtoa_r+0x746>
 8011f26:	9b03      	ldr	r3, [sp, #12]
 8011f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f2c:	0d1b      	lsrs	r3, r3, #20
 8011f2e:	051b      	lsls	r3, r3, #20
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d033      	beq.n	8011f9c <_dtoa_r+0x74c>
 8011f34:	9b07      	ldr	r3, [sp, #28]
 8011f36:	3301      	adds	r3, #1
 8011f38:	f10a 0a01 	add.w	sl, sl, #1
 8011f3c:	9307      	str	r3, [sp, #28]
 8011f3e:	f04f 0801 	mov.w	r8, #1
 8011f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f44:	bb73      	cbnz	r3, 8011fa4 <_dtoa_r+0x754>
 8011f46:	2001      	movs	r0, #1
 8011f48:	e034      	b.n	8011fb4 <_dtoa_r+0x764>
 8011f4a:	bf00      	nop
 8011f4c:	08014998 	.word	0x08014998
 8011f50:	08014970 	.word	0x08014970
 8011f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011f5a:	e790      	b.n	8011e7e <_dtoa_r+0x62e>
 8011f5c:	f109 35ff 	add.w	r5, r9, #4294967295
 8011f60:	45a8      	cmp	r8, r5
 8011f62:	bfbf      	itttt	lt
 8011f64:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8011f66:	eba5 0808 	sublt.w	r8, r5, r8
 8011f6a:	4443      	addlt	r3, r8
 8011f6c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8011f6e:	bfb6      	itet	lt
 8011f70:	46a8      	movlt	r8, r5
 8011f72:	eba8 0505 	subge.w	r5, r8, r5
 8011f76:	2500      	movlt	r5, #0
 8011f78:	f1b9 0f00 	cmp.w	r9, #0
 8011f7c:	bfb9      	ittee	lt
 8011f7e:	ebaa 0609 	sublt.w	r6, sl, r9
 8011f82:	2300      	movlt	r3, #0
 8011f84:	4656      	movge	r6, sl
 8011f86:	464b      	movge	r3, r9
 8011f88:	e77b      	b.n	8011e82 <_dtoa_r+0x632>
 8011f8a:	4645      	mov	r5, r8
 8011f8c:	4656      	mov	r6, sl
 8011f8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011f90:	e780      	b.n	8011e94 <_dtoa_r+0x644>
 8011f92:	4642      	mov	r2, r8
 8011f94:	e7a8      	b.n	8011ee8 <_dtoa_r+0x698>
 8011f96:	f04f 0800 	mov.w	r8, #0
 8011f9a:	e7d2      	b.n	8011f42 <_dtoa_r+0x6f2>
 8011f9c:	4698      	mov	r8, r3
 8011f9e:	e7d0      	b.n	8011f42 <_dtoa_r+0x6f2>
 8011fa0:	f04f 0800 	mov.w	r8, #0
 8011fa4:	692b      	ldr	r3, [r5, #16]
 8011fa6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011faa:	6918      	ldr	r0, [r3, #16]
 8011fac:	f000 ffac 	bl	8012f08 <__hi0bits>
 8011fb0:	f1c0 0020 	rsb	r0, r0, #32
 8011fb4:	9b07      	ldr	r3, [sp, #28]
 8011fb6:	4418      	add	r0, r3
 8011fb8:	f010 001f 	ands.w	r0, r0, #31
 8011fbc:	d047      	beq.n	801204e <_dtoa_r+0x7fe>
 8011fbe:	f1c0 0320 	rsb	r3, r0, #32
 8011fc2:	2b04      	cmp	r3, #4
 8011fc4:	dd3b      	ble.n	801203e <_dtoa_r+0x7ee>
 8011fc6:	9b07      	ldr	r3, [sp, #28]
 8011fc8:	f1c0 001c 	rsb	r0, r0, #28
 8011fcc:	4482      	add	sl, r0
 8011fce:	4406      	add	r6, r0
 8011fd0:	4403      	add	r3, r0
 8011fd2:	9307      	str	r3, [sp, #28]
 8011fd4:	f1ba 0f00 	cmp.w	sl, #0
 8011fd8:	dd05      	ble.n	8011fe6 <_dtoa_r+0x796>
 8011fda:	4652      	mov	r2, sl
 8011fdc:	9901      	ldr	r1, [sp, #4]
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f001 f8ce 	bl	8013180 <__lshift>
 8011fe4:	9001      	str	r0, [sp, #4]
 8011fe6:	9b07      	ldr	r3, [sp, #28]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	dd05      	ble.n	8011ff8 <_dtoa_r+0x7a8>
 8011fec:	4629      	mov	r1, r5
 8011fee:	461a      	mov	r2, r3
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f001 f8c5 	bl	8013180 <__lshift>
 8011ff6:	4605      	mov	r5, r0
 8011ff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ffa:	b353      	cbz	r3, 8012052 <_dtoa_r+0x802>
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	9801      	ldr	r0, [sp, #4]
 8012000:	f001 f912 	bl	8013228 <__mcmp>
 8012004:	2800      	cmp	r0, #0
 8012006:	da24      	bge.n	8012052 <_dtoa_r+0x802>
 8012008:	2300      	movs	r3, #0
 801200a:	220a      	movs	r2, #10
 801200c:	9901      	ldr	r1, [sp, #4]
 801200e:	4620      	mov	r0, r4
 8012010:	f000 ff01 	bl	8012e16 <__multadd>
 8012014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012016:	9001      	str	r0, [sp, #4]
 8012018:	f10b 3bff 	add.w	fp, fp, #4294967295
 801201c:	2b00      	cmp	r3, #0
 801201e:	f000 8142 	beq.w	80122a6 <_dtoa_r+0xa56>
 8012022:	2300      	movs	r3, #0
 8012024:	4639      	mov	r1, r7
 8012026:	220a      	movs	r2, #10
 8012028:	4620      	mov	r0, r4
 801202a:	f000 fef4 	bl	8012e16 <__multadd>
 801202e:	9b06      	ldr	r3, [sp, #24]
 8012030:	2b00      	cmp	r3, #0
 8012032:	4607      	mov	r7, r0
 8012034:	dc4b      	bgt.n	80120ce <_dtoa_r+0x87e>
 8012036:	9b08      	ldr	r3, [sp, #32]
 8012038:	2b02      	cmp	r3, #2
 801203a:	dd48      	ble.n	80120ce <_dtoa_r+0x87e>
 801203c:	e011      	b.n	8012062 <_dtoa_r+0x812>
 801203e:	d0c9      	beq.n	8011fd4 <_dtoa_r+0x784>
 8012040:	9a07      	ldr	r2, [sp, #28]
 8012042:	331c      	adds	r3, #28
 8012044:	441a      	add	r2, r3
 8012046:	449a      	add	sl, r3
 8012048:	441e      	add	r6, r3
 801204a:	4613      	mov	r3, r2
 801204c:	e7c1      	b.n	8011fd2 <_dtoa_r+0x782>
 801204e:	4603      	mov	r3, r0
 8012050:	e7f6      	b.n	8012040 <_dtoa_r+0x7f0>
 8012052:	f1b9 0f00 	cmp.w	r9, #0
 8012056:	dc34      	bgt.n	80120c2 <_dtoa_r+0x872>
 8012058:	9b08      	ldr	r3, [sp, #32]
 801205a:	2b02      	cmp	r3, #2
 801205c:	dd31      	ble.n	80120c2 <_dtoa_r+0x872>
 801205e:	f8cd 9018 	str.w	r9, [sp, #24]
 8012062:	9b06      	ldr	r3, [sp, #24]
 8012064:	b963      	cbnz	r3, 8012080 <_dtoa_r+0x830>
 8012066:	4629      	mov	r1, r5
 8012068:	2205      	movs	r2, #5
 801206a:	4620      	mov	r0, r4
 801206c:	f000 fed3 	bl	8012e16 <__multadd>
 8012070:	4601      	mov	r1, r0
 8012072:	4605      	mov	r5, r0
 8012074:	9801      	ldr	r0, [sp, #4]
 8012076:	f001 f8d7 	bl	8013228 <__mcmp>
 801207a:	2800      	cmp	r0, #0
 801207c:	f73f adfc 	bgt.w	8011c78 <_dtoa_r+0x428>
 8012080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012082:	9e04      	ldr	r6, [sp, #16]
 8012084:	ea6f 0b03 	mvn.w	fp, r3
 8012088:	f04f 0900 	mov.w	r9, #0
 801208c:	4629      	mov	r1, r5
 801208e:	4620      	mov	r0, r4
 8012090:	f000 feaa 	bl	8012de8 <_Bfree>
 8012094:	2f00      	cmp	r7, #0
 8012096:	f43f aebb 	beq.w	8011e10 <_dtoa_r+0x5c0>
 801209a:	f1b9 0f00 	cmp.w	r9, #0
 801209e:	d005      	beq.n	80120ac <_dtoa_r+0x85c>
 80120a0:	45b9      	cmp	r9, r7
 80120a2:	d003      	beq.n	80120ac <_dtoa_r+0x85c>
 80120a4:	4649      	mov	r1, r9
 80120a6:	4620      	mov	r0, r4
 80120a8:	f000 fe9e 	bl	8012de8 <_Bfree>
 80120ac:	4639      	mov	r1, r7
 80120ae:	4620      	mov	r0, r4
 80120b0:	f000 fe9a 	bl	8012de8 <_Bfree>
 80120b4:	e6ac      	b.n	8011e10 <_dtoa_r+0x5c0>
 80120b6:	2500      	movs	r5, #0
 80120b8:	462f      	mov	r7, r5
 80120ba:	e7e1      	b.n	8012080 <_dtoa_r+0x830>
 80120bc:	469b      	mov	fp, r3
 80120be:	462f      	mov	r7, r5
 80120c0:	e5da      	b.n	8011c78 <_dtoa_r+0x428>
 80120c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c4:	f8cd 9018 	str.w	r9, [sp, #24]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	f000 80f3 	beq.w	80122b4 <_dtoa_r+0xa64>
 80120ce:	2e00      	cmp	r6, #0
 80120d0:	dd05      	ble.n	80120de <_dtoa_r+0x88e>
 80120d2:	4639      	mov	r1, r7
 80120d4:	4632      	mov	r2, r6
 80120d6:	4620      	mov	r0, r4
 80120d8:	f001 f852 	bl	8013180 <__lshift>
 80120dc:	4607      	mov	r7, r0
 80120de:	f1b8 0f00 	cmp.w	r8, #0
 80120e2:	d04c      	beq.n	801217e <_dtoa_r+0x92e>
 80120e4:	6879      	ldr	r1, [r7, #4]
 80120e6:	4620      	mov	r0, r4
 80120e8:	f000 fe4a 	bl	8012d80 <_Balloc>
 80120ec:	693a      	ldr	r2, [r7, #16]
 80120ee:	3202      	adds	r2, #2
 80120f0:	4606      	mov	r6, r0
 80120f2:	0092      	lsls	r2, r2, #2
 80120f4:	f107 010c 	add.w	r1, r7, #12
 80120f8:	300c      	adds	r0, #12
 80120fa:	f7fd fb77 	bl	800f7ec <memcpy>
 80120fe:	2201      	movs	r2, #1
 8012100:	4631      	mov	r1, r6
 8012102:	4620      	mov	r0, r4
 8012104:	f001 f83c 	bl	8013180 <__lshift>
 8012108:	9b02      	ldr	r3, [sp, #8]
 801210a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801210e:	f003 0301 	and.w	r3, r3, #1
 8012112:	46b9      	mov	r9, r7
 8012114:	9307      	str	r3, [sp, #28]
 8012116:	4607      	mov	r7, r0
 8012118:	4629      	mov	r1, r5
 801211a:	9801      	ldr	r0, [sp, #4]
 801211c:	f7ff fb0c 	bl	8011738 <quorem>
 8012120:	4649      	mov	r1, r9
 8012122:	4606      	mov	r6, r0
 8012124:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012128:	9801      	ldr	r0, [sp, #4]
 801212a:	f001 f87d 	bl	8013228 <__mcmp>
 801212e:	463a      	mov	r2, r7
 8012130:	9002      	str	r0, [sp, #8]
 8012132:	4629      	mov	r1, r5
 8012134:	4620      	mov	r0, r4
 8012136:	f001 f891 	bl	801325c <__mdiff>
 801213a:	68c3      	ldr	r3, [r0, #12]
 801213c:	4602      	mov	r2, r0
 801213e:	bb03      	cbnz	r3, 8012182 <_dtoa_r+0x932>
 8012140:	4601      	mov	r1, r0
 8012142:	9009      	str	r0, [sp, #36]	; 0x24
 8012144:	9801      	ldr	r0, [sp, #4]
 8012146:	f001 f86f 	bl	8013228 <__mcmp>
 801214a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801214c:	4603      	mov	r3, r0
 801214e:	4611      	mov	r1, r2
 8012150:	4620      	mov	r0, r4
 8012152:	9309      	str	r3, [sp, #36]	; 0x24
 8012154:	f000 fe48 	bl	8012de8 <_Bfree>
 8012158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801215a:	b9a3      	cbnz	r3, 8012186 <_dtoa_r+0x936>
 801215c:	9a08      	ldr	r2, [sp, #32]
 801215e:	b992      	cbnz	r2, 8012186 <_dtoa_r+0x936>
 8012160:	9a07      	ldr	r2, [sp, #28]
 8012162:	b982      	cbnz	r2, 8012186 <_dtoa_r+0x936>
 8012164:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012168:	d029      	beq.n	80121be <_dtoa_r+0x96e>
 801216a:	9b02      	ldr	r3, [sp, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	dd01      	ble.n	8012174 <_dtoa_r+0x924>
 8012170:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8012174:	f10a 0601 	add.w	r6, sl, #1
 8012178:	f88a 8000 	strb.w	r8, [sl]
 801217c:	e786      	b.n	801208c <_dtoa_r+0x83c>
 801217e:	4638      	mov	r0, r7
 8012180:	e7c2      	b.n	8012108 <_dtoa_r+0x8b8>
 8012182:	2301      	movs	r3, #1
 8012184:	e7e3      	b.n	801214e <_dtoa_r+0x8fe>
 8012186:	9a02      	ldr	r2, [sp, #8]
 8012188:	2a00      	cmp	r2, #0
 801218a:	db04      	blt.n	8012196 <_dtoa_r+0x946>
 801218c:	d124      	bne.n	80121d8 <_dtoa_r+0x988>
 801218e:	9a08      	ldr	r2, [sp, #32]
 8012190:	bb12      	cbnz	r2, 80121d8 <_dtoa_r+0x988>
 8012192:	9a07      	ldr	r2, [sp, #28]
 8012194:	bb02      	cbnz	r2, 80121d8 <_dtoa_r+0x988>
 8012196:	2b00      	cmp	r3, #0
 8012198:	ddec      	ble.n	8012174 <_dtoa_r+0x924>
 801219a:	2201      	movs	r2, #1
 801219c:	9901      	ldr	r1, [sp, #4]
 801219e:	4620      	mov	r0, r4
 80121a0:	f000 ffee 	bl	8013180 <__lshift>
 80121a4:	4629      	mov	r1, r5
 80121a6:	9001      	str	r0, [sp, #4]
 80121a8:	f001 f83e 	bl	8013228 <__mcmp>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	dc03      	bgt.n	80121b8 <_dtoa_r+0x968>
 80121b0:	d1e0      	bne.n	8012174 <_dtoa_r+0x924>
 80121b2:	f018 0f01 	tst.w	r8, #1
 80121b6:	d0dd      	beq.n	8012174 <_dtoa_r+0x924>
 80121b8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80121bc:	d1d8      	bne.n	8012170 <_dtoa_r+0x920>
 80121be:	2339      	movs	r3, #57	; 0x39
 80121c0:	f10a 0601 	add.w	r6, sl, #1
 80121c4:	f88a 3000 	strb.w	r3, [sl]
 80121c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80121cc:	2b39      	cmp	r3, #57	; 0x39
 80121ce:	f106 32ff 	add.w	r2, r6, #4294967295
 80121d2:	d04c      	beq.n	801226e <_dtoa_r+0xa1e>
 80121d4:	3301      	adds	r3, #1
 80121d6:	e051      	b.n	801227c <_dtoa_r+0xa2c>
 80121d8:	2b00      	cmp	r3, #0
 80121da:	f10a 0601 	add.w	r6, sl, #1
 80121de:	dd05      	ble.n	80121ec <_dtoa_r+0x99c>
 80121e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80121e4:	d0eb      	beq.n	80121be <_dtoa_r+0x96e>
 80121e6:	f108 0801 	add.w	r8, r8, #1
 80121ea:	e7c5      	b.n	8012178 <_dtoa_r+0x928>
 80121ec:	9b04      	ldr	r3, [sp, #16]
 80121ee:	9a06      	ldr	r2, [sp, #24]
 80121f0:	f806 8c01 	strb.w	r8, [r6, #-1]
 80121f4:	1af3      	subs	r3, r6, r3
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d021      	beq.n	801223e <_dtoa_r+0x9ee>
 80121fa:	2300      	movs	r3, #0
 80121fc:	220a      	movs	r2, #10
 80121fe:	9901      	ldr	r1, [sp, #4]
 8012200:	4620      	mov	r0, r4
 8012202:	f000 fe08 	bl	8012e16 <__multadd>
 8012206:	45b9      	cmp	r9, r7
 8012208:	9001      	str	r0, [sp, #4]
 801220a:	f04f 0300 	mov.w	r3, #0
 801220e:	f04f 020a 	mov.w	r2, #10
 8012212:	4649      	mov	r1, r9
 8012214:	4620      	mov	r0, r4
 8012216:	d105      	bne.n	8012224 <_dtoa_r+0x9d4>
 8012218:	f000 fdfd 	bl	8012e16 <__multadd>
 801221c:	4681      	mov	r9, r0
 801221e:	4607      	mov	r7, r0
 8012220:	46b2      	mov	sl, r6
 8012222:	e779      	b.n	8012118 <_dtoa_r+0x8c8>
 8012224:	f000 fdf7 	bl	8012e16 <__multadd>
 8012228:	4639      	mov	r1, r7
 801222a:	4681      	mov	r9, r0
 801222c:	2300      	movs	r3, #0
 801222e:	220a      	movs	r2, #10
 8012230:	4620      	mov	r0, r4
 8012232:	f000 fdf0 	bl	8012e16 <__multadd>
 8012236:	4607      	mov	r7, r0
 8012238:	e7f2      	b.n	8012220 <_dtoa_r+0x9d0>
 801223a:	f04f 0900 	mov.w	r9, #0
 801223e:	2201      	movs	r2, #1
 8012240:	9901      	ldr	r1, [sp, #4]
 8012242:	4620      	mov	r0, r4
 8012244:	f000 ff9c 	bl	8013180 <__lshift>
 8012248:	4629      	mov	r1, r5
 801224a:	9001      	str	r0, [sp, #4]
 801224c:	f000 ffec 	bl	8013228 <__mcmp>
 8012250:	2800      	cmp	r0, #0
 8012252:	dcb9      	bgt.n	80121c8 <_dtoa_r+0x978>
 8012254:	d102      	bne.n	801225c <_dtoa_r+0xa0c>
 8012256:	f018 0f01 	tst.w	r8, #1
 801225a:	d1b5      	bne.n	80121c8 <_dtoa_r+0x978>
 801225c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012260:	2b30      	cmp	r3, #48	; 0x30
 8012262:	f106 32ff 	add.w	r2, r6, #4294967295
 8012266:	f47f af11 	bne.w	801208c <_dtoa_r+0x83c>
 801226a:	4616      	mov	r6, r2
 801226c:	e7f6      	b.n	801225c <_dtoa_r+0xa0c>
 801226e:	9b04      	ldr	r3, [sp, #16]
 8012270:	4293      	cmp	r3, r2
 8012272:	d105      	bne.n	8012280 <_dtoa_r+0xa30>
 8012274:	9a04      	ldr	r2, [sp, #16]
 8012276:	f10b 0b01 	add.w	fp, fp, #1
 801227a:	2331      	movs	r3, #49	; 0x31
 801227c:	7013      	strb	r3, [r2, #0]
 801227e:	e705      	b.n	801208c <_dtoa_r+0x83c>
 8012280:	4616      	mov	r6, r2
 8012282:	e7a1      	b.n	80121c8 <_dtoa_r+0x978>
 8012284:	4b16      	ldr	r3, [pc, #88]	; (80122e0 <_dtoa_r+0xa90>)
 8012286:	f7ff bb48 	b.w	801191a <_dtoa_r+0xca>
 801228a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801228c:	2b00      	cmp	r3, #0
 801228e:	f47f ab23 	bne.w	80118d8 <_dtoa_r+0x88>
 8012292:	4b14      	ldr	r3, [pc, #80]	; (80122e4 <_dtoa_r+0xa94>)
 8012294:	f7ff bb41 	b.w	801191a <_dtoa_r+0xca>
 8012298:	9b08      	ldr	r3, [sp, #32]
 801229a:	2b01      	cmp	r3, #1
 801229c:	f77f ae3b 	ble.w	8011f16 <_dtoa_r+0x6c6>
 80122a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80122a4:	e64f      	b.n	8011f46 <_dtoa_r+0x6f6>
 80122a6:	9b06      	ldr	r3, [sp, #24]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	dc03      	bgt.n	80122b4 <_dtoa_r+0xa64>
 80122ac:	9b08      	ldr	r3, [sp, #32]
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	f73f aed7 	bgt.w	8012062 <_dtoa_r+0x812>
 80122b4:	9e04      	ldr	r6, [sp, #16]
 80122b6:	9801      	ldr	r0, [sp, #4]
 80122b8:	4629      	mov	r1, r5
 80122ba:	f7ff fa3d 	bl	8011738 <quorem>
 80122be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80122c2:	f806 8b01 	strb.w	r8, [r6], #1
 80122c6:	9b04      	ldr	r3, [sp, #16]
 80122c8:	9a06      	ldr	r2, [sp, #24]
 80122ca:	1af3      	subs	r3, r6, r3
 80122cc:	429a      	cmp	r2, r3
 80122ce:	ddb4      	ble.n	801223a <_dtoa_r+0x9ea>
 80122d0:	2300      	movs	r3, #0
 80122d2:	220a      	movs	r2, #10
 80122d4:	9901      	ldr	r1, [sp, #4]
 80122d6:	4620      	mov	r0, r4
 80122d8:	f000 fd9d 	bl	8012e16 <__multadd>
 80122dc:	9001      	str	r0, [sp, #4]
 80122de:	e7ea      	b.n	80122b6 <_dtoa_r+0xa66>
 80122e0:	08014a93 	.word	0x08014a93
 80122e4:	080148f0 	.word	0x080148f0

080122e8 <__sflush_r>:
 80122e8:	898a      	ldrh	r2, [r1, #12]
 80122ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ee:	4605      	mov	r5, r0
 80122f0:	0710      	lsls	r0, r2, #28
 80122f2:	460c      	mov	r4, r1
 80122f4:	d458      	bmi.n	80123a8 <__sflush_r+0xc0>
 80122f6:	684b      	ldr	r3, [r1, #4]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	dc05      	bgt.n	8012308 <__sflush_r+0x20>
 80122fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122fe:	2b00      	cmp	r3, #0
 8012300:	dc02      	bgt.n	8012308 <__sflush_r+0x20>
 8012302:	2000      	movs	r0, #0
 8012304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801230a:	2e00      	cmp	r6, #0
 801230c:	d0f9      	beq.n	8012302 <__sflush_r+0x1a>
 801230e:	2300      	movs	r3, #0
 8012310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012314:	682f      	ldr	r7, [r5, #0]
 8012316:	6a21      	ldr	r1, [r4, #32]
 8012318:	602b      	str	r3, [r5, #0]
 801231a:	d032      	beq.n	8012382 <__sflush_r+0x9a>
 801231c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801231e:	89a3      	ldrh	r3, [r4, #12]
 8012320:	075a      	lsls	r2, r3, #29
 8012322:	d505      	bpl.n	8012330 <__sflush_r+0x48>
 8012324:	6863      	ldr	r3, [r4, #4]
 8012326:	1ac0      	subs	r0, r0, r3
 8012328:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801232a:	b10b      	cbz	r3, 8012330 <__sflush_r+0x48>
 801232c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801232e:	1ac0      	subs	r0, r0, r3
 8012330:	2300      	movs	r3, #0
 8012332:	4602      	mov	r2, r0
 8012334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012336:	6a21      	ldr	r1, [r4, #32]
 8012338:	4628      	mov	r0, r5
 801233a:	47b0      	blx	r6
 801233c:	1c43      	adds	r3, r0, #1
 801233e:	89a3      	ldrh	r3, [r4, #12]
 8012340:	d106      	bne.n	8012350 <__sflush_r+0x68>
 8012342:	6829      	ldr	r1, [r5, #0]
 8012344:	291d      	cmp	r1, #29
 8012346:	d848      	bhi.n	80123da <__sflush_r+0xf2>
 8012348:	4a29      	ldr	r2, [pc, #164]	; (80123f0 <__sflush_r+0x108>)
 801234a:	40ca      	lsrs	r2, r1
 801234c:	07d6      	lsls	r6, r2, #31
 801234e:	d544      	bpl.n	80123da <__sflush_r+0xf2>
 8012350:	2200      	movs	r2, #0
 8012352:	6062      	str	r2, [r4, #4]
 8012354:	04d9      	lsls	r1, r3, #19
 8012356:	6922      	ldr	r2, [r4, #16]
 8012358:	6022      	str	r2, [r4, #0]
 801235a:	d504      	bpl.n	8012366 <__sflush_r+0x7e>
 801235c:	1c42      	adds	r2, r0, #1
 801235e:	d101      	bne.n	8012364 <__sflush_r+0x7c>
 8012360:	682b      	ldr	r3, [r5, #0]
 8012362:	b903      	cbnz	r3, 8012366 <__sflush_r+0x7e>
 8012364:	6560      	str	r0, [r4, #84]	; 0x54
 8012366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012368:	602f      	str	r7, [r5, #0]
 801236a:	2900      	cmp	r1, #0
 801236c:	d0c9      	beq.n	8012302 <__sflush_r+0x1a>
 801236e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012372:	4299      	cmp	r1, r3
 8012374:	d002      	beq.n	801237c <__sflush_r+0x94>
 8012376:	4628      	mov	r0, r5
 8012378:	f7fd fa5a 	bl	800f830 <_free_r>
 801237c:	2000      	movs	r0, #0
 801237e:	6360      	str	r0, [r4, #52]	; 0x34
 8012380:	e7c0      	b.n	8012304 <__sflush_r+0x1c>
 8012382:	2301      	movs	r3, #1
 8012384:	4628      	mov	r0, r5
 8012386:	47b0      	blx	r6
 8012388:	1c41      	adds	r1, r0, #1
 801238a:	d1c8      	bne.n	801231e <__sflush_r+0x36>
 801238c:	682b      	ldr	r3, [r5, #0]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d0c5      	beq.n	801231e <__sflush_r+0x36>
 8012392:	2b1d      	cmp	r3, #29
 8012394:	d001      	beq.n	801239a <__sflush_r+0xb2>
 8012396:	2b16      	cmp	r3, #22
 8012398:	d101      	bne.n	801239e <__sflush_r+0xb6>
 801239a:	602f      	str	r7, [r5, #0]
 801239c:	e7b1      	b.n	8012302 <__sflush_r+0x1a>
 801239e:	89a3      	ldrh	r3, [r4, #12]
 80123a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123a4:	81a3      	strh	r3, [r4, #12]
 80123a6:	e7ad      	b.n	8012304 <__sflush_r+0x1c>
 80123a8:	690f      	ldr	r7, [r1, #16]
 80123aa:	2f00      	cmp	r7, #0
 80123ac:	d0a9      	beq.n	8012302 <__sflush_r+0x1a>
 80123ae:	0793      	lsls	r3, r2, #30
 80123b0:	680e      	ldr	r6, [r1, #0]
 80123b2:	bf08      	it	eq
 80123b4:	694b      	ldreq	r3, [r1, #20]
 80123b6:	600f      	str	r7, [r1, #0]
 80123b8:	bf18      	it	ne
 80123ba:	2300      	movne	r3, #0
 80123bc:	eba6 0807 	sub.w	r8, r6, r7
 80123c0:	608b      	str	r3, [r1, #8]
 80123c2:	f1b8 0f00 	cmp.w	r8, #0
 80123c6:	dd9c      	ble.n	8012302 <__sflush_r+0x1a>
 80123c8:	4643      	mov	r3, r8
 80123ca:	463a      	mov	r2, r7
 80123cc:	6a21      	ldr	r1, [r4, #32]
 80123ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123d0:	4628      	mov	r0, r5
 80123d2:	47b0      	blx	r6
 80123d4:	2800      	cmp	r0, #0
 80123d6:	dc06      	bgt.n	80123e6 <__sflush_r+0xfe>
 80123d8:	89a3      	ldrh	r3, [r4, #12]
 80123da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123de:	81a3      	strh	r3, [r4, #12]
 80123e0:	f04f 30ff 	mov.w	r0, #4294967295
 80123e4:	e78e      	b.n	8012304 <__sflush_r+0x1c>
 80123e6:	4407      	add	r7, r0
 80123e8:	eba8 0800 	sub.w	r8, r8, r0
 80123ec:	e7e9      	b.n	80123c2 <__sflush_r+0xda>
 80123ee:	bf00      	nop
 80123f0:	20400001 	.word	0x20400001

080123f4 <_fflush_r>:
 80123f4:	b538      	push	{r3, r4, r5, lr}
 80123f6:	690b      	ldr	r3, [r1, #16]
 80123f8:	4605      	mov	r5, r0
 80123fa:	460c      	mov	r4, r1
 80123fc:	b1db      	cbz	r3, 8012436 <_fflush_r+0x42>
 80123fe:	b118      	cbz	r0, 8012408 <_fflush_r+0x14>
 8012400:	6983      	ldr	r3, [r0, #24]
 8012402:	b90b      	cbnz	r3, 8012408 <_fflush_r+0x14>
 8012404:	f000 f860 	bl	80124c8 <__sinit>
 8012408:	4b0c      	ldr	r3, [pc, #48]	; (801243c <_fflush_r+0x48>)
 801240a:	429c      	cmp	r4, r3
 801240c:	d109      	bne.n	8012422 <_fflush_r+0x2e>
 801240e:	686c      	ldr	r4, [r5, #4]
 8012410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012414:	b17b      	cbz	r3, 8012436 <_fflush_r+0x42>
 8012416:	4621      	mov	r1, r4
 8012418:	4628      	mov	r0, r5
 801241a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801241e:	f7ff bf63 	b.w	80122e8 <__sflush_r>
 8012422:	4b07      	ldr	r3, [pc, #28]	; (8012440 <_fflush_r+0x4c>)
 8012424:	429c      	cmp	r4, r3
 8012426:	d101      	bne.n	801242c <_fflush_r+0x38>
 8012428:	68ac      	ldr	r4, [r5, #8]
 801242a:	e7f1      	b.n	8012410 <_fflush_r+0x1c>
 801242c:	4b05      	ldr	r3, [pc, #20]	; (8012444 <_fflush_r+0x50>)
 801242e:	429c      	cmp	r4, r3
 8012430:	bf08      	it	eq
 8012432:	68ec      	ldreq	r4, [r5, #12]
 8012434:	e7ec      	b.n	8012410 <_fflush_r+0x1c>
 8012436:	2000      	movs	r0, #0
 8012438:	bd38      	pop	{r3, r4, r5, pc}
 801243a:	bf00      	nop
 801243c:	08014920 	.word	0x08014920
 8012440:	08014940 	.word	0x08014940
 8012444:	08014900 	.word	0x08014900

08012448 <std>:
 8012448:	2300      	movs	r3, #0
 801244a:	b510      	push	{r4, lr}
 801244c:	4604      	mov	r4, r0
 801244e:	e9c0 3300 	strd	r3, r3, [r0]
 8012452:	6083      	str	r3, [r0, #8]
 8012454:	8181      	strh	r1, [r0, #12]
 8012456:	6643      	str	r3, [r0, #100]	; 0x64
 8012458:	81c2      	strh	r2, [r0, #14]
 801245a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801245e:	6183      	str	r3, [r0, #24]
 8012460:	4619      	mov	r1, r3
 8012462:	2208      	movs	r2, #8
 8012464:	305c      	adds	r0, #92	; 0x5c
 8012466:	f7fd f9cc 	bl	800f802 <memset>
 801246a:	4b05      	ldr	r3, [pc, #20]	; (8012480 <std+0x38>)
 801246c:	6263      	str	r3, [r4, #36]	; 0x24
 801246e:	4b05      	ldr	r3, [pc, #20]	; (8012484 <std+0x3c>)
 8012470:	62a3      	str	r3, [r4, #40]	; 0x28
 8012472:	4b05      	ldr	r3, [pc, #20]	; (8012488 <std+0x40>)
 8012474:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012476:	4b05      	ldr	r3, [pc, #20]	; (801248c <std+0x44>)
 8012478:	6224      	str	r4, [r4, #32]
 801247a:	6323      	str	r3, [r4, #48]	; 0x30
 801247c:	bd10      	pop	{r4, pc}
 801247e:	bf00      	nop
 8012480:	080107e9 	.word	0x080107e9
 8012484:	0801080f 	.word	0x0801080f
 8012488:	08010847 	.word	0x08010847
 801248c:	0801086b 	.word	0x0801086b

08012490 <_cleanup_r>:
 8012490:	4901      	ldr	r1, [pc, #4]	; (8012498 <_cleanup_r+0x8>)
 8012492:	f000 b885 	b.w	80125a0 <_fwalk_reent>
 8012496:	bf00      	nop
 8012498:	080123f5 	.word	0x080123f5

0801249c <__sfmoreglue>:
 801249c:	b570      	push	{r4, r5, r6, lr}
 801249e:	1e4a      	subs	r2, r1, #1
 80124a0:	2568      	movs	r5, #104	; 0x68
 80124a2:	4355      	muls	r5, r2
 80124a4:	460e      	mov	r6, r1
 80124a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80124aa:	f7fd fa0f 	bl	800f8cc <_malloc_r>
 80124ae:	4604      	mov	r4, r0
 80124b0:	b140      	cbz	r0, 80124c4 <__sfmoreglue+0x28>
 80124b2:	2100      	movs	r1, #0
 80124b4:	e9c0 1600 	strd	r1, r6, [r0]
 80124b8:	300c      	adds	r0, #12
 80124ba:	60a0      	str	r0, [r4, #8]
 80124bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80124c0:	f7fd f99f 	bl	800f802 <memset>
 80124c4:	4620      	mov	r0, r4
 80124c6:	bd70      	pop	{r4, r5, r6, pc}

080124c8 <__sinit>:
 80124c8:	6983      	ldr	r3, [r0, #24]
 80124ca:	b510      	push	{r4, lr}
 80124cc:	4604      	mov	r4, r0
 80124ce:	bb33      	cbnz	r3, 801251e <__sinit+0x56>
 80124d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80124d4:	6503      	str	r3, [r0, #80]	; 0x50
 80124d6:	4b12      	ldr	r3, [pc, #72]	; (8012520 <__sinit+0x58>)
 80124d8:	4a12      	ldr	r2, [pc, #72]	; (8012524 <__sinit+0x5c>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	6282      	str	r2, [r0, #40]	; 0x28
 80124de:	4298      	cmp	r0, r3
 80124e0:	bf04      	itt	eq
 80124e2:	2301      	moveq	r3, #1
 80124e4:	6183      	streq	r3, [r0, #24]
 80124e6:	f000 f81f 	bl	8012528 <__sfp>
 80124ea:	6060      	str	r0, [r4, #4]
 80124ec:	4620      	mov	r0, r4
 80124ee:	f000 f81b 	bl	8012528 <__sfp>
 80124f2:	60a0      	str	r0, [r4, #8]
 80124f4:	4620      	mov	r0, r4
 80124f6:	f000 f817 	bl	8012528 <__sfp>
 80124fa:	2200      	movs	r2, #0
 80124fc:	60e0      	str	r0, [r4, #12]
 80124fe:	2104      	movs	r1, #4
 8012500:	6860      	ldr	r0, [r4, #4]
 8012502:	f7ff ffa1 	bl	8012448 <std>
 8012506:	2201      	movs	r2, #1
 8012508:	2109      	movs	r1, #9
 801250a:	68a0      	ldr	r0, [r4, #8]
 801250c:	f7ff ff9c 	bl	8012448 <std>
 8012510:	2202      	movs	r2, #2
 8012512:	2112      	movs	r1, #18
 8012514:	68e0      	ldr	r0, [r4, #12]
 8012516:	f7ff ff97 	bl	8012448 <std>
 801251a:	2301      	movs	r3, #1
 801251c:	61a3      	str	r3, [r4, #24]
 801251e:	bd10      	pop	{r4, pc}
 8012520:	08014860 	.word	0x08014860
 8012524:	08012491 	.word	0x08012491

08012528 <__sfp>:
 8012528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801252a:	4b1b      	ldr	r3, [pc, #108]	; (8012598 <__sfp+0x70>)
 801252c:	681e      	ldr	r6, [r3, #0]
 801252e:	69b3      	ldr	r3, [r6, #24]
 8012530:	4607      	mov	r7, r0
 8012532:	b913      	cbnz	r3, 801253a <__sfp+0x12>
 8012534:	4630      	mov	r0, r6
 8012536:	f7ff ffc7 	bl	80124c8 <__sinit>
 801253a:	3648      	adds	r6, #72	; 0x48
 801253c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012540:	3b01      	subs	r3, #1
 8012542:	d503      	bpl.n	801254c <__sfp+0x24>
 8012544:	6833      	ldr	r3, [r6, #0]
 8012546:	b133      	cbz	r3, 8012556 <__sfp+0x2e>
 8012548:	6836      	ldr	r6, [r6, #0]
 801254a:	e7f7      	b.n	801253c <__sfp+0x14>
 801254c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012550:	b16d      	cbz	r5, 801256e <__sfp+0x46>
 8012552:	3468      	adds	r4, #104	; 0x68
 8012554:	e7f4      	b.n	8012540 <__sfp+0x18>
 8012556:	2104      	movs	r1, #4
 8012558:	4638      	mov	r0, r7
 801255a:	f7ff ff9f 	bl	801249c <__sfmoreglue>
 801255e:	6030      	str	r0, [r6, #0]
 8012560:	2800      	cmp	r0, #0
 8012562:	d1f1      	bne.n	8012548 <__sfp+0x20>
 8012564:	230c      	movs	r3, #12
 8012566:	603b      	str	r3, [r7, #0]
 8012568:	4604      	mov	r4, r0
 801256a:	4620      	mov	r0, r4
 801256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801256e:	4b0b      	ldr	r3, [pc, #44]	; (801259c <__sfp+0x74>)
 8012570:	6665      	str	r5, [r4, #100]	; 0x64
 8012572:	e9c4 5500 	strd	r5, r5, [r4]
 8012576:	60a5      	str	r5, [r4, #8]
 8012578:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801257c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012580:	2208      	movs	r2, #8
 8012582:	4629      	mov	r1, r5
 8012584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012588:	f7fd f93b 	bl	800f802 <memset>
 801258c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012594:	e7e9      	b.n	801256a <__sfp+0x42>
 8012596:	bf00      	nop
 8012598:	08014860 	.word	0x08014860
 801259c:	ffff0001 	.word	0xffff0001

080125a0 <_fwalk_reent>:
 80125a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125a4:	4680      	mov	r8, r0
 80125a6:	4689      	mov	r9, r1
 80125a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80125ac:	2600      	movs	r6, #0
 80125ae:	b914      	cbnz	r4, 80125b6 <_fwalk_reent+0x16>
 80125b0:	4630      	mov	r0, r6
 80125b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80125ba:	3f01      	subs	r7, #1
 80125bc:	d501      	bpl.n	80125c2 <_fwalk_reent+0x22>
 80125be:	6824      	ldr	r4, [r4, #0]
 80125c0:	e7f5      	b.n	80125ae <_fwalk_reent+0xe>
 80125c2:	89ab      	ldrh	r3, [r5, #12]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d907      	bls.n	80125d8 <_fwalk_reent+0x38>
 80125c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80125cc:	3301      	adds	r3, #1
 80125ce:	d003      	beq.n	80125d8 <_fwalk_reent+0x38>
 80125d0:	4629      	mov	r1, r5
 80125d2:	4640      	mov	r0, r8
 80125d4:	47c8      	blx	r9
 80125d6:	4306      	orrs	r6, r0
 80125d8:	3568      	adds	r5, #104	; 0x68
 80125da:	e7ee      	b.n	80125ba <_fwalk_reent+0x1a>

080125dc <rshift>:
 80125dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125de:	6906      	ldr	r6, [r0, #16]
 80125e0:	114b      	asrs	r3, r1, #5
 80125e2:	429e      	cmp	r6, r3
 80125e4:	f100 0414 	add.w	r4, r0, #20
 80125e8:	dd30      	ble.n	801264c <rshift+0x70>
 80125ea:	f011 011f 	ands.w	r1, r1, #31
 80125ee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80125f2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80125f6:	d108      	bne.n	801260a <rshift+0x2e>
 80125f8:	4621      	mov	r1, r4
 80125fa:	42b2      	cmp	r2, r6
 80125fc:	460b      	mov	r3, r1
 80125fe:	d211      	bcs.n	8012624 <rshift+0x48>
 8012600:	f852 3b04 	ldr.w	r3, [r2], #4
 8012604:	f841 3b04 	str.w	r3, [r1], #4
 8012608:	e7f7      	b.n	80125fa <rshift+0x1e>
 801260a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801260e:	f1c1 0c20 	rsb	ip, r1, #32
 8012612:	40cd      	lsrs	r5, r1
 8012614:	3204      	adds	r2, #4
 8012616:	4623      	mov	r3, r4
 8012618:	42b2      	cmp	r2, r6
 801261a:	4617      	mov	r7, r2
 801261c:	d30c      	bcc.n	8012638 <rshift+0x5c>
 801261e:	601d      	str	r5, [r3, #0]
 8012620:	b105      	cbz	r5, 8012624 <rshift+0x48>
 8012622:	3304      	adds	r3, #4
 8012624:	1b1a      	subs	r2, r3, r4
 8012626:	42a3      	cmp	r3, r4
 8012628:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801262c:	bf08      	it	eq
 801262e:	2300      	moveq	r3, #0
 8012630:	6102      	str	r2, [r0, #16]
 8012632:	bf08      	it	eq
 8012634:	6143      	streq	r3, [r0, #20]
 8012636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012638:	683f      	ldr	r7, [r7, #0]
 801263a:	fa07 f70c 	lsl.w	r7, r7, ip
 801263e:	433d      	orrs	r5, r7
 8012640:	f843 5b04 	str.w	r5, [r3], #4
 8012644:	f852 5b04 	ldr.w	r5, [r2], #4
 8012648:	40cd      	lsrs	r5, r1
 801264a:	e7e5      	b.n	8012618 <rshift+0x3c>
 801264c:	4623      	mov	r3, r4
 801264e:	e7e9      	b.n	8012624 <rshift+0x48>

08012650 <__hexdig_fun>:
 8012650:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012654:	2b09      	cmp	r3, #9
 8012656:	d802      	bhi.n	801265e <__hexdig_fun+0xe>
 8012658:	3820      	subs	r0, #32
 801265a:	b2c0      	uxtb	r0, r0
 801265c:	4770      	bx	lr
 801265e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012662:	2b05      	cmp	r3, #5
 8012664:	d801      	bhi.n	801266a <__hexdig_fun+0x1a>
 8012666:	3847      	subs	r0, #71	; 0x47
 8012668:	e7f7      	b.n	801265a <__hexdig_fun+0xa>
 801266a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801266e:	2b05      	cmp	r3, #5
 8012670:	d801      	bhi.n	8012676 <__hexdig_fun+0x26>
 8012672:	3827      	subs	r0, #39	; 0x27
 8012674:	e7f1      	b.n	801265a <__hexdig_fun+0xa>
 8012676:	2000      	movs	r0, #0
 8012678:	4770      	bx	lr

0801267a <__gethex>:
 801267a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801267e:	b08b      	sub	sp, #44	; 0x2c
 8012680:	468a      	mov	sl, r1
 8012682:	9002      	str	r0, [sp, #8]
 8012684:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012686:	9306      	str	r3, [sp, #24]
 8012688:	4690      	mov	r8, r2
 801268a:	f000 fadf 	bl	8012c4c <__localeconv_l>
 801268e:	6803      	ldr	r3, [r0, #0]
 8012690:	9303      	str	r3, [sp, #12]
 8012692:	4618      	mov	r0, r3
 8012694:	f7ed fdde 	bl	8000254 <strlen>
 8012698:	9b03      	ldr	r3, [sp, #12]
 801269a:	9001      	str	r0, [sp, #4]
 801269c:	4403      	add	r3, r0
 801269e:	f04f 0b00 	mov.w	fp, #0
 80126a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80126a6:	9307      	str	r3, [sp, #28]
 80126a8:	f8da 3000 	ldr.w	r3, [sl]
 80126ac:	3302      	adds	r3, #2
 80126ae:	461f      	mov	r7, r3
 80126b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80126b4:	2830      	cmp	r0, #48	; 0x30
 80126b6:	d06c      	beq.n	8012792 <__gethex+0x118>
 80126b8:	f7ff ffca 	bl	8012650 <__hexdig_fun>
 80126bc:	4604      	mov	r4, r0
 80126be:	2800      	cmp	r0, #0
 80126c0:	d16a      	bne.n	8012798 <__gethex+0x11e>
 80126c2:	9a01      	ldr	r2, [sp, #4]
 80126c4:	9903      	ldr	r1, [sp, #12]
 80126c6:	4638      	mov	r0, r7
 80126c8:	f001 fd32 	bl	8014130 <strncmp>
 80126cc:	2800      	cmp	r0, #0
 80126ce:	d166      	bne.n	801279e <__gethex+0x124>
 80126d0:	9b01      	ldr	r3, [sp, #4]
 80126d2:	5cf8      	ldrb	r0, [r7, r3]
 80126d4:	18fe      	adds	r6, r7, r3
 80126d6:	f7ff ffbb 	bl	8012650 <__hexdig_fun>
 80126da:	2800      	cmp	r0, #0
 80126dc:	d062      	beq.n	80127a4 <__gethex+0x12a>
 80126de:	4633      	mov	r3, r6
 80126e0:	7818      	ldrb	r0, [r3, #0]
 80126e2:	2830      	cmp	r0, #48	; 0x30
 80126e4:	461f      	mov	r7, r3
 80126e6:	f103 0301 	add.w	r3, r3, #1
 80126ea:	d0f9      	beq.n	80126e0 <__gethex+0x66>
 80126ec:	f7ff ffb0 	bl	8012650 <__hexdig_fun>
 80126f0:	fab0 f580 	clz	r5, r0
 80126f4:	096d      	lsrs	r5, r5, #5
 80126f6:	4634      	mov	r4, r6
 80126f8:	f04f 0b01 	mov.w	fp, #1
 80126fc:	463a      	mov	r2, r7
 80126fe:	4616      	mov	r6, r2
 8012700:	3201      	adds	r2, #1
 8012702:	7830      	ldrb	r0, [r6, #0]
 8012704:	f7ff ffa4 	bl	8012650 <__hexdig_fun>
 8012708:	2800      	cmp	r0, #0
 801270a:	d1f8      	bne.n	80126fe <__gethex+0x84>
 801270c:	9a01      	ldr	r2, [sp, #4]
 801270e:	9903      	ldr	r1, [sp, #12]
 8012710:	4630      	mov	r0, r6
 8012712:	f001 fd0d 	bl	8014130 <strncmp>
 8012716:	b950      	cbnz	r0, 801272e <__gethex+0xb4>
 8012718:	b954      	cbnz	r4, 8012730 <__gethex+0xb6>
 801271a:	9b01      	ldr	r3, [sp, #4]
 801271c:	18f4      	adds	r4, r6, r3
 801271e:	4622      	mov	r2, r4
 8012720:	4616      	mov	r6, r2
 8012722:	3201      	adds	r2, #1
 8012724:	7830      	ldrb	r0, [r6, #0]
 8012726:	f7ff ff93 	bl	8012650 <__hexdig_fun>
 801272a:	2800      	cmp	r0, #0
 801272c:	d1f8      	bne.n	8012720 <__gethex+0xa6>
 801272e:	b10c      	cbz	r4, 8012734 <__gethex+0xba>
 8012730:	1ba4      	subs	r4, r4, r6
 8012732:	00a4      	lsls	r4, r4, #2
 8012734:	7833      	ldrb	r3, [r6, #0]
 8012736:	2b50      	cmp	r3, #80	; 0x50
 8012738:	d001      	beq.n	801273e <__gethex+0xc4>
 801273a:	2b70      	cmp	r3, #112	; 0x70
 801273c:	d140      	bne.n	80127c0 <__gethex+0x146>
 801273e:	7873      	ldrb	r3, [r6, #1]
 8012740:	2b2b      	cmp	r3, #43	; 0x2b
 8012742:	d031      	beq.n	80127a8 <__gethex+0x12e>
 8012744:	2b2d      	cmp	r3, #45	; 0x2d
 8012746:	d033      	beq.n	80127b0 <__gethex+0x136>
 8012748:	1c71      	adds	r1, r6, #1
 801274a:	f04f 0900 	mov.w	r9, #0
 801274e:	7808      	ldrb	r0, [r1, #0]
 8012750:	f7ff ff7e 	bl	8012650 <__hexdig_fun>
 8012754:	1e43      	subs	r3, r0, #1
 8012756:	b2db      	uxtb	r3, r3
 8012758:	2b18      	cmp	r3, #24
 801275a:	d831      	bhi.n	80127c0 <__gethex+0x146>
 801275c:	f1a0 0210 	sub.w	r2, r0, #16
 8012760:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012764:	f7ff ff74 	bl	8012650 <__hexdig_fun>
 8012768:	1e43      	subs	r3, r0, #1
 801276a:	b2db      	uxtb	r3, r3
 801276c:	2b18      	cmp	r3, #24
 801276e:	d922      	bls.n	80127b6 <__gethex+0x13c>
 8012770:	f1b9 0f00 	cmp.w	r9, #0
 8012774:	d000      	beq.n	8012778 <__gethex+0xfe>
 8012776:	4252      	negs	r2, r2
 8012778:	4414      	add	r4, r2
 801277a:	f8ca 1000 	str.w	r1, [sl]
 801277e:	b30d      	cbz	r5, 80127c4 <__gethex+0x14a>
 8012780:	f1bb 0f00 	cmp.w	fp, #0
 8012784:	bf0c      	ite	eq
 8012786:	2706      	moveq	r7, #6
 8012788:	2700      	movne	r7, #0
 801278a:	4638      	mov	r0, r7
 801278c:	b00b      	add	sp, #44	; 0x2c
 801278e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012792:	f10b 0b01 	add.w	fp, fp, #1
 8012796:	e78a      	b.n	80126ae <__gethex+0x34>
 8012798:	2500      	movs	r5, #0
 801279a:	462c      	mov	r4, r5
 801279c:	e7ae      	b.n	80126fc <__gethex+0x82>
 801279e:	463e      	mov	r6, r7
 80127a0:	2501      	movs	r5, #1
 80127a2:	e7c7      	b.n	8012734 <__gethex+0xba>
 80127a4:	4604      	mov	r4, r0
 80127a6:	e7fb      	b.n	80127a0 <__gethex+0x126>
 80127a8:	f04f 0900 	mov.w	r9, #0
 80127ac:	1cb1      	adds	r1, r6, #2
 80127ae:	e7ce      	b.n	801274e <__gethex+0xd4>
 80127b0:	f04f 0901 	mov.w	r9, #1
 80127b4:	e7fa      	b.n	80127ac <__gethex+0x132>
 80127b6:	230a      	movs	r3, #10
 80127b8:	fb03 0202 	mla	r2, r3, r2, r0
 80127bc:	3a10      	subs	r2, #16
 80127be:	e7cf      	b.n	8012760 <__gethex+0xe6>
 80127c0:	4631      	mov	r1, r6
 80127c2:	e7da      	b.n	801277a <__gethex+0x100>
 80127c4:	1bf3      	subs	r3, r6, r7
 80127c6:	3b01      	subs	r3, #1
 80127c8:	4629      	mov	r1, r5
 80127ca:	2b07      	cmp	r3, #7
 80127cc:	dc49      	bgt.n	8012862 <__gethex+0x1e8>
 80127ce:	9802      	ldr	r0, [sp, #8]
 80127d0:	f000 fad6 	bl	8012d80 <_Balloc>
 80127d4:	9b01      	ldr	r3, [sp, #4]
 80127d6:	f100 0914 	add.w	r9, r0, #20
 80127da:	f04f 0b00 	mov.w	fp, #0
 80127de:	f1c3 0301 	rsb	r3, r3, #1
 80127e2:	4605      	mov	r5, r0
 80127e4:	f8cd 9010 	str.w	r9, [sp, #16]
 80127e8:	46da      	mov	sl, fp
 80127ea:	9308      	str	r3, [sp, #32]
 80127ec:	42b7      	cmp	r7, r6
 80127ee:	d33b      	bcc.n	8012868 <__gethex+0x1ee>
 80127f0:	9804      	ldr	r0, [sp, #16]
 80127f2:	f840 ab04 	str.w	sl, [r0], #4
 80127f6:	eba0 0009 	sub.w	r0, r0, r9
 80127fa:	1080      	asrs	r0, r0, #2
 80127fc:	6128      	str	r0, [r5, #16]
 80127fe:	0147      	lsls	r7, r0, #5
 8012800:	4650      	mov	r0, sl
 8012802:	f000 fb81 	bl	8012f08 <__hi0bits>
 8012806:	f8d8 6000 	ldr.w	r6, [r8]
 801280a:	1a3f      	subs	r7, r7, r0
 801280c:	42b7      	cmp	r7, r6
 801280e:	dd64      	ble.n	80128da <__gethex+0x260>
 8012810:	1bbf      	subs	r7, r7, r6
 8012812:	4639      	mov	r1, r7
 8012814:	4628      	mov	r0, r5
 8012816:	f000 fe92 	bl	801353e <__any_on>
 801281a:	4682      	mov	sl, r0
 801281c:	b178      	cbz	r0, 801283e <__gethex+0x1c4>
 801281e:	1e7b      	subs	r3, r7, #1
 8012820:	1159      	asrs	r1, r3, #5
 8012822:	f003 021f 	and.w	r2, r3, #31
 8012826:	f04f 0a01 	mov.w	sl, #1
 801282a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801282e:	fa0a f202 	lsl.w	r2, sl, r2
 8012832:	420a      	tst	r2, r1
 8012834:	d003      	beq.n	801283e <__gethex+0x1c4>
 8012836:	4553      	cmp	r3, sl
 8012838:	dc46      	bgt.n	80128c8 <__gethex+0x24e>
 801283a:	f04f 0a02 	mov.w	sl, #2
 801283e:	4639      	mov	r1, r7
 8012840:	4628      	mov	r0, r5
 8012842:	f7ff fecb 	bl	80125dc <rshift>
 8012846:	443c      	add	r4, r7
 8012848:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801284c:	42a3      	cmp	r3, r4
 801284e:	da52      	bge.n	80128f6 <__gethex+0x27c>
 8012850:	4629      	mov	r1, r5
 8012852:	9802      	ldr	r0, [sp, #8]
 8012854:	f000 fac8 	bl	8012de8 <_Bfree>
 8012858:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801285a:	2300      	movs	r3, #0
 801285c:	6013      	str	r3, [r2, #0]
 801285e:	27a3      	movs	r7, #163	; 0xa3
 8012860:	e793      	b.n	801278a <__gethex+0x110>
 8012862:	3101      	adds	r1, #1
 8012864:	105b      	asrs	r3, r3, #1
 8012866:	e7b0      	b.n	80127ca <__gethex+0x150>
 8012868:	1e73      	subs	r3, r6, #1
 801286a:	9305      	str	r3, [sp, #20]
 801286c:	9a07      	ldr	r2, [sp, #28]
 801286e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012872:	4293      	cmp	r3, r2
 8012874:	d018      	beq.n	80128a8 <__gethex+0x22e>
 8012876:	f1bb 0f20 	cmp.w	fp, #32
 801287a:	d107      	bne.n	801288c <__gethex+0x212>
 801287c:	9b04      	ldr	r3, [sp, #16]
 801287e:	f8c3 a000 	str.w	sl, [r3]
 8012882:	3304      	adds	r3, #4
 8012884:	f04f 0a00 	mov.w	sl, #0
 8012888:	9304      	str	r3, [sp, #16]
 801288a:	46d3      	mov	fp, sl
 801288c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012890:	f7ff fede 	bl	8012650 <__hexdig_fun>
 8012894:	f000 000f 	and.w	r0, r0, #15
 8012898:	fa00 f00b 	lsl.w	r0, r0, fp
 801289c:	ea4a 0a00 	orr.w	sl, sl, r0
 80128a0:	f10b 0b04 	add.w	fp, fp, #4
 80128a4:	9b05      	ldr	r3, [sp, #20]
 80128a6:	e00d      	b.n	80128c4 <__gethex+0x24a>
 80128a8:	9b05      	ldr	r3, [sp, #20]
 80128aa:	9a08      	ldr	r2, [sp, #32]
 80128ac:	4413      	add	r3, r2
 80128ae:	42bb      	cmp	r3, r7
 80128b0:	d3e1      	bcc.n	8012876 <__gethex+0x1fc>
 80128b2:	4618      	mov	r0, r3
 80128b4:	9a01      	ldr	r2, [sp, #4]
 80128b6:	9903      	ldr	r1, [sp, #12]
 80128b8:	9309      	str	r3, [sp, #36]	; 0x24
 80128ba:	f001 fc39 	bl	8014130 <strncmp>
 80128be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d1d8      	bne.n	8012876 <__gethex+0x1fc>
 80128c4:	461e      	mov	r6, r3
 80128c6:	e791      	b.n	80127ec <__gethex+0x172>
 80128c8:	1eb9      	subs	r1, r7, #2
 80128ca:	4628      	mov	r0, r5
 80128cc:	f000 fe37 	bl	801353e <__any_on>
 80128d0:	2800      	cmp	r0, #0
 80128d2:	d0b2      	beq.n	801283a <__gethex+0x1c0>
 80128d4:	f04f 0a03 	mov.w	sl, #3
 80128d8:	e7b1      	b.n	801283e <__gethex+0x1c4>
 80128da:	da09      	bge.n	80128f0 <__gethex+0x276>
 80128dc:	1bf7      	subs	r7, r6, r7
 80128de:	4629      	mov	r1, r5
 80128e0:	463a      	mov	r2, r7
 80128e2:	9802      	ldr	r0, [sp, #8]
 80128e4:	f000 fc4c 	bl	8013180 <__lshift>
 80128e8:	1be4      	subs	r4, r4, r7
 80128ea:	4605      	mov	r5, r0
 80128ec:	f100 0914 	add.w	r9, r0, #20
 80128f0:	f04f 0a00 	mov.w	sl, #0
 80128f4:	e7a8      	b.n	8012848 <__gethex+0x1ce>
 80128f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80128fa:	42a0      	cmp	r0, r4
 80128fc:	dd6a      	ble.n	80129d4 <__gethex+0x35a>
 80128fe:	1b04      	subs	r4, r0, r4
 8012900:	42a6      	cmp	r6, r4
 8012902:	dc2e      	bgt.n	8012962 <__gethex+0x2e8>
 8012904:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012908:	2b02      	cmp	r3, #2
 801290a:	d022      	beq.n	8012952 <__gethex+0x2d8>
 801290c:	2b03      	cmp	r3, #3
 801290e:	d024      	beq.n	801295a <__gethex+0x2e0>
 8012910:	2b01      	cmp	r3, #1
 8012912:	d115      	bne.n	8012940 <__gethex+0x2c6>
 8012914:	42a6      	cmp	r6, r4
 8012916:	d113      	bne.n	8012940 <__gethex+0x2c6>
 8012918:	2e01      	cmp	r6, #1
 801291a:	dc0b      	bgt.n	8012934 <__gethex+0x2ba>
 801291c:	9a06      	ldr	r2, [sp, #24]
 801291e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012922:	6013      	str	r3, [r2, #0]
 8012924:	2301      	movs	r3, #1
 8012926:	612b      	str	r3, [r5, #16]
 8012928:	f8c9 3000 	str.w	r3, [r9]
 801292c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801292e:	2762      	movs	r7, #98	; 0x62
 8012930:	601d      	str	r5, [r3, #0]
 8012932:	e72a      	b.n	801278a <__gethex+0x110>
 8012934:	1e71      	subs	r1, r6, #1
 8012936:	4628      	mov	r0, r5
 8012938:	f000 fe01 	bl	801353e <__any_on>
 801293c:	2800      	cmp	r0, #0
 801293e:	d1ed      	bne.n	801291c <__gethex+0x2a2>
 8012940:	4629      	mov	r1, r5
 8012942:	9802      	ldr	r0, [sp, #8]
 8012944:	f000 fa50 	bl	8012de8 <_Bfree>
 8012948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801294a:	2300      	movs	r3, #0
 801294c:	6013      	str	r3, [r2, #0]
 801294e:	2750      	movs	r7, #80	; 0x50
 8012950:	e71b      	b.n	801278a <__gethex+0x110>
 8012952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012954:	2b00      	cmp	r3, #0
 8012956:	d0e1      	beq.n	801291c <__gethex+0x2a2>
 8012958:	e7f2      	b.n	8012940 <__gethex+0x2c6>
 801295a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801295c:	2b00      	cmp	r3, #0
 801295e:	d1dd      	bne.n	801291c <__gethex+0x2a2>
 8012960:	e7ee      	b.n	8012940 <__gethex+0x2c6>
 8012962:	1e67      	subs	r7, r4, #1
 8012964:	f1ba 0f00 	cmp.w	sl, #0
 8012968:	d131      	bne.n	80129ce <__gethex+0x354>
 801296a:	b127      	cbz	r7, 8012976 <__gethex+0x2fc>
 801296c:	4639      	mov	r1, r7
 801296e:	4628      	mov	r0, r5
 8012970:	f000 fde5 	bl	801353e <__any_on>
 8012974:	4682      	mov	sl, r0
 8012976:	117a      	asrs	r2, r7, #5
 8012978:	2301      	movs	r3, #1
 801297a:	f007 071f 	and.w	r7, r7, #31
 801297e:	fa03 f707 	lsl.w	r7, r3, r7
 8012982:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012986:	4621      	mov	r1, r4
 8012988:	421f      	tst	r7, r3
 801298a:	4628      	mov	r0, r5
 801298c:	bf18      	it	ne
 801298e:	f04a 0a02 	orrne.w	sl, sl, #2
 8012992:	1b36      	subs	r6, r6, r4
 8012994:	f7ff fe22 	bl	80125dc <rshift>
 8012998:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801299c:	2702      	movs	r7, #2
 801299e:	f1ba 0f00 	cmp.w	sl, #0
 80129a2:	d048      	beq.n	8012a36 <__gethex+0x3bc>
 80129a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80129a8:	2b02      	cmp	r3, #2
 80129aa:	d015      	beq.n	80129d8 <__gethex+0x35e>
 80129ac:	2b03      	cmp	r3, #3
 80129ae:	d017      	beq.n	80129e0 <__gethex+0x366>
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d109      	bne.n	80129c8 <__gethex+0x34e>
 80129b4:	f01a 0f02 	tst.w	sl, #2
 80129b8:	d006      	beq.n	80129c8 <__gethex+0x34e>
 80129ba:	f8d9 3000 	ldr.w	r3, [r9]
 80129be:	ea4a 0a03 	orr.w	sl, sl, r3
 80129c2:	f01a 0f01 	tst.w	sl, #1
 80129c6:	d10e      	bne.n	80129e6 <__gethex+0x36c>
 80129c8:	f047 0710 	orr.w	r7, r7, #16
 80129cc:	e033      	b.n	8012a36 <__gethex+0x3bc>
 80129ce:	f04f 0a01 	mov.w	sl, #1
 80129d2:	e7d0      	b.n	8012976 <__gethex+0x2fc>
 80129d4:	2701      	movs	r7, #1
 80129d6:	e7e2      	b.n	801299e <__gethex+0x324>
 80129d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129da:	f1c3 0301 	rsb	r3, r3, #1
 80129de:	9315      	str	r3, [sp, #84]	; 0x54
 80129e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d0f0      	beq.n	80129c8 <__gethex+0x34e>
 80129e6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80129ea:	f105 0314 	add.w	r3, r5, #20
 80129ee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80129f2:	eb03 010a 	add.w	r1, r3, sl
 80129f6:	f04f 0c00 	mov.w	ip, #0
 80129fa:	4618      	mov	r0, r3
 80129fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a00:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012a04:	d01c      	beq.n	8012a40 <__gethex+0x3c6>
 8012a06:	3201      	adds	r2, #1
 8012a08:	6002      	str	r2, [r0, #0]
 8012a0a:	2f02      	cmp	r7, #2
 8012a0c:	f105 0314 	add.w	r3, r5, #20
 8012a10:	d138      	bne.n	8012a84 <__gethex+0x40a>
 8012a12:	f8d8 2000 	ldr.w	r2, [r8]
 8012a16:	3a01      	subs	r2, #1
 8012a18:	42b2      	cmp	r2, r6
 8012a1a:	d10a      	bne.n	8012a32 <__gethex+0x3b8>
 8012a1c:	1171      	asrs	r1, r6, #5
 8012a1e:	2201      	movs	r2, #1
 8012a20:	f006 061f 	and.w	r6, r6, #31
 8012a24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a28:	fa02 f606 	lsl.w	r6, r2, r6
 8012a2c:	421e      	tst	r6, r3
 8012a2e:	bf18      	it	ne
 8012a30:	4617      	movne	r7, r2
 8012a32:	f047 0720 	orr.w	r7, r7, #32
 8012a36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a38:	601d      	str	r5, [r3, #0]
 8012a3a:	9b06      	ldr	r3, [sp, #24]
 8012a3c:	601c      	str	r4, [r3, #0]
 8012a3e:	e6a4      	b.n	801278a <__gethex+0x110>
 8012a40:	4299      	cmp	r1, r3
 8012a42:	f843 cc04 	str.w	ip, [r3, #-4]
 8012a46:	d8d8      	bhi.n	80129fa <__gethex+0x380>
 8012a48:	68ab      	ldr	r3, [r5, #8]
 8012a4a:	4599      	cmp	r9, r3
 8012a4c:	db12      	blt.n	8012a74 <__gethex+0x3fa>
 8012a4e:	6869      	ldr	r1, [r5, #4]
 8012a50:	9802      	ldr	r0, [sp, #8]
 8012a52:	3101      	adds	r1, #1
 8012a54:	f000 f994 	bl	8012d80 <_Balloc>
 8012a58:	692a      	ldr	r2, [r5, #16]
 8012a5a:	3202      	adds	r2, #2
 8012a5c:	f105 010c 	add.w	r1, r5, #12
 8012a60:	4683      	mov	fp, r0
 8012a62:	0092      	lsls	r2, r2, #2
 8012a64:	300c      	adds	r0, #12
 8012a66:	f7fc fec1 	bl	800f7ec <memcpy>
 8012a6a:	4629      	mov	r1, r5
 8012a6c:	9802      	ldr	r0, [sp, #8]
 8012a6e:	f000 f9bb 	bl	8012de8 <_Bfree>
 8012a72:	465d      	mov	r5, fp
 8012a74:	692b      	ldr	r3, [r5, #16]
 8012a76:	1c5a      	adds	r2, r3, #1
 8012a78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012a7c:	612a      	str	r2, [r5, #16]
 8012a7e:	2201      	movs	r2, #1
 8012a80:	615a      	str	r2, [r3, #20]
 8012a82:	e7c2      	b.n	8012a0a <__gethex+0x390>
 8012a84:	692a      	ldr	r2, [r5, #16]
 8012a86:	454a      	cmp	r2, r9
 8012a88:	dd0b      	ble.n	8012aa2 <__gethex+0x428>
 8012a8a:	2101      	movs	r1, #1
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	f7ff fda5 	bl	80125dc <rshift>
 8012a92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a96:	3401      	adds	r4, #1
 8012a98:	42a3      	cmp	r3, r4
 8012a9a:	f6ff aed9 	blt.w	8012850 <__gethex+0x1d6>
 8012a9e:	2701      	movs	r7, #1
 8012aa0:	e7c7      	b.n	8012a32 <__gethex+0x3b8>
 8012aa2:	f016 061f 	ands.w	r6, r6, #31
 8012aa6:	d0fa      	beq.n	8012a9e <__gethex+0x424>
 8012aa8:	449a      	add	sl, r3
 8012aaa:	f1c6 0620 	rsb	r6, r6, #32
 8012aae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012ab2:	f000 fa29 	bl	8012f08 <__hi0bits>
 8012ab6:	42b0      	cmp	r0, r6
 8012ab8:	dbe7      	blt.n	8012a8a <__gethex+0x410>
 8012aba:	e7f0      	b.n	8012a9e <__gethex+0x424>

08012abc <L_shift>:
 8012abc:	f1c2 0208 	rsb	r2, r2, #8
 8012ac0:	0092      	lsls	r2, r2, #2
 8012ac2:	b570      	push	{r4, r5, r6, lr}
 8012ac4:	f1c2 0620 	rsb	r6, r2, #32
 8012ac8:	6843      	ldr	r3, [r0, #4]
 8012aca:	6804      	ldr	r4, [r0, #0]
 8012acc:	fa03 f506 	lsl.w	r5, r3, r6
 8012ad0:	432c      	orrs	r4, r5
 8012ad2:	40d3      	lsrs	r3, r2
 8012ad4:	6004      	str	r4, [r0, #0]
 8012ad6:	f840 3f04 	str.w	r3, [r0, #4]!
 8012ada:	4288      	cmp	r0, r1
 8012adc:	d3f4      	bcc.n	8012ac8 <L_shift+0xc>
 8012ade:	bd70      	pop	{r4, r5, r6, pc}

08012ae0 <__match>:
 8012ae0:	b530      	push	{r4, r5, lr}
 8012ae2:	6803      	ldr	r3, [r0, #0]
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012aea:	b914      	cbnz	r4, 8012af2 <__match+0x12>
 8012aec:	6003      	str	r3, [r0, #0]
 8012aee:	2001      	movs	r0, #1
 8012af0:	bd30      	pop	{r4, r5, pc}
 8012af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012af6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012afa:	2d19      	cmp	r5, #25
 8012afc:	bf98      	it	ls
 8012afe:	3220      	addls	r2, #32
 8012b00:	42a2      	cmp	r2, r4
 8012b02:	d0f0      	beq.n	8012ae6 <__match+0x6>
 8012b04:	2000      	movs	r0, #0
 8012b06:	e7f3      	b.n	8012af0 <__match+0x10>

08012b08 <__hexnan>:
 8012b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b0c:	680b      	ldr	r3, [r1, #0]
 8012b0e:	6801      	ldr	r1, [r0, #0]
 8012b10:	115f      	asrs	r7, r3, #5
 8012b12:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8012b16:	f013 031f 	ands.w	r3, r3, #31
 8012b1a:	b087      	sub	sp, #28
 8012b1c:	bf18      	it	ne
 8012b1e:	3704      	addne	r7, #4
 8012b20:	2500      	movs	r5, #0
 8012b22:	1f3e      	subs	r6, r7, #4
 8012b24:	4682      	mov	sl, r0
 8012b26:	4690      	mov	r8, r2
 8012b28:	9301      	str	r3, [sp, #4]
 8012b2a:	f847 5c04 	str.w	r5, [r7, #-4]
 8012b2e:	46b1      	mov	r9, r6
 8012b30:	4634      	mov	r4, r6
 8012b32:	9502      	str	r5, [sp, #8]
 8012b34:	46ab      	mov	fp, r5
 8012b36:	784a      	ldrb	r2, [r1, #1]
 8012b38:	1c4b      	adds	r3, r1, #1
 8012b3a:	9303      	str	r3, [sp, #12]
 8012b3c:	b342      	cbz	r2, 8012b90 <__hexnan+0x88>
 8012b3e:	4610      	mov	r0, r2
 8012b40:	9105      	str	r1, [sp, #20]
 8012b42:	9204      	str	r2, [sp, #16]
 8012b44:	f7ff fd84 	bl	8012650 <__hexdig_fun>
 8012b48:	2800      	cmp	r0, #0
 8012b4a:	d143      	bne.n	8012bd4 <__hexnan+0xcc>
 8012b4c:	9a04      	ldr	r2, [sp, #16]
 8012b4e:	9905      	ldr	r1, [sp, #20]
 8012b50:	2a20      	cmp	r2, #32
 8012b52:	d818      	bhi.n	8012b86 <__hexnan+0x7e>
 8012b54:	9b02      	ldr	r3, [sp, #8]
 8012b56:	459b      	cmp	fp, r3
 8012b58:	dd13      	ble.n	8012b82 <__hexnan+0x7a>
 8012b5a:	454c      	cmp	r4, r9
 8012b5c:	d206      	bcs.n	8012b6c <__hexnan+0x64>
 8012b5e:	2d07      	cmp	r5, #7
 8012b60:	dc04      	bgt.n	8012b6c <__hexnan+0x64>
 8012b62:	462a      	mov	r2, r5
 8012b64:	4649      	mov	r1, r9
 8012b66:	4620      	mov	r0, r4
 8012b68:	f7ff ffa8 	bl	8012abc <L_shift>
 8012b6c:	4544      	cmp	r4, r8
 8012b6e:	d944      	bls.n	8012bfa <__hexnan+0xf2>
 8012b70:	2300      	movs	r3, #0
 8012b72:	f1a4 0904 	sub.w	r9, r4, #4
 8012b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b7a:	f8cd b008 	str.w	fp, [sp, #8]
 8012b7e:	464c      	mov	r4, r9
 8012b80:	461d      	mov	r5, r3
 8012b82:	9903      	ldr	r1, [sp, #12]
 8012b84:	e7d7      	b.n	8012b36 <__hexnan+0x2e>
 8012b86:	2a29      	cmp	r2, #41	; 0x29
 8012b88:	d14a      	bne.n	8012c20 <__hexnan+0x118>
 8012b8a:	3102      	adds	r1, #2
 8012b8c:	f8ca 1000 	str.w	r1, [sl]
 8012b90:	f1bb 0f00 	cmp.w	fp, #0
 8012b94:	d044      	beq.n	8012c20 <__hexnan+0x118>
 8012b96:	454c      	cmp	r4, r9
 8012b98:	d206      	bcs.n	8012ba8 <__hexnan+0xa0>
 8012b9a:	2d07      	cmp	r5, #7
 8012b9c:	dc04      	bgt.n	8012ba8 <__hexnan+0xa0>
 8012b9e:	462a      	mov	r2, r5
 8012ba0:	4649      	mov	r1, r9
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f7ff ff8a 	bl	8012abc <L_shift>
 8012ba8:	4544      	cmp	r4, r8
 8012baa:	d928      	bls.n	8012bfe <__hexnan+0xf6>
 8012bac:	4643      	mov	r3, r8
 8012bae:	f854 2b04 	ldr.w	r2, [r4], #4
 8012bb2:	f843 2b04 	str.w	r2, [r3], #4
 8012bb6:	42a6      	cmp	r6, r4
 8012bb8:	d2f9      	bcs.n	8012bae <__hexnan+0xa6>
 8012bba:	2200      	movs	r2, #0
 8012bbc:	f843 2b04 	str.w	r2, [r3], #4
 8012bc0:	429e      	cmp	r6, r3
 8012bc2:	d2fb      	bcs.n	8012bbc <__hexnan+0xb4>
 8012bc4:	6833      	ldr	r3, [r6, #0]
 8012bc6:	b91b      	cbnz	r3, 8012bd0 <__hexnan+0xc8>
 8012bc8:	4546      	cmp	r6, r8
 8012bca:	d127      	bne.n	8012c1c <__hexnan+0x114>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	6033      	str	r3, [r6, #0]
 8012bd0:	2005      	movs	r0, #5
 8012bd2:	e026      	b.n	8012c22 <__hexnan+0x11a>
 8012bd4:	3501      	adds	r5, #1
 8012bd6:	2d08      	cmp	r5, #8
 8012bd8:	f10b 0b01 	add.w	fp, fp, #1
 8012bdc:	dd06      	ble.n	8012bec <__hexnan+0xe4>
 8012bde:	4544      	cmp	r4, r8
 8012be0:	d9cf      	bls.n	8012b82 <__hexnan+0x7a>
 8012be2:	2300      	movs	r3, #0
 8012be4:	f844 3c04 	str.w	r3, [r4, #-4]
 8012be8:	2501      	movs	r5, #1
 8012bea:	3c04      	subs	r4, #4
 8012bec:	6822      	ldr	r2, [r4, #0]
 8012bee:	f000 000f 	and.w	r0, r0, #15
 8012bf2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012bf6:	6020      	str	r0, [r4, #0]
 8012bf8:	e7c3      	b.n	8012b82 <__hexnan+0x7a>
 8012bfa:	2508      	movs	r5, #8
 8012bfc:	e7c1      	b.n	8012b82 <__hexnan+0x7a>
 8012bfe:	9b01      	ldr	r3, [sp, #4]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d0df      	beq.n	8012bc4 <__hexnan+0xbc>
 8012c04:	f04f 32ff 	mov.w	r2, #4294967295
 8012c08:	f1c3 0320 	rsb	r3, r3, #32
 8012c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8012c10:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012c14:	401a      	ands	r2, r3
 8012c16:	f847 2c04 	str.w	r2, [r7, #-4]
 8012c1a:	e7d3      	b.n	8012bc4 <__hexnan+0xbc>
 8012c1c:	3e04      	subs	r6, #4
 8012c1e:	e7d1      	b.n	8012bc4 <__hexnan+0xbc>
 8012c20:	2004      	movs	r0, #4
 8012c22:	b007      	add	sp, #28
 8012c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c28 <__locale_ctype_ptr_l>:
 8012c28:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012c2c:	4770      	bx	lr
	...

08012c30 <__locale_ctype_ptr>:
 8012c30:	4b04      	ldr	r3, [pc, #16]	; (8012c44 <__locale_ctype_ptr+0x14>)
 8012c32:	4a05      	ldr	r2, [pc, #20]	; (8012c48 <__locale_ctype_ptr+0x18>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	6a1b      	ldr	r3, [r3, #32]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	bf08      	it	eq
 8012c3c:	4613      	moveq	r3, r2
 8012c3e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012c42:	4770      	bx	lr
 8012c44:	2000086c 	.word	0x2000086c
 8012c48:	200008d0 	.word	0x200008d0

08012c4c <__localeconv_l>:
 8012c4c:	30f0      	adds	r0, #240	; 0xf0
 8012c4e:	4770      	bx	lr

08012c50 <_localeconv_r>:
 8012c50:	4b04      	ldr	r3, [pc, #16]	; (8012c64 <_localeconv_r+0x14>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	6a18      	ldr	r0, [r3, #32]
 8012c56:	4b04      	ldr	r3, [pc, #16]	; (8012c68 <_localeconv_r+0x18>)
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	bf08      	it	eq
 8012c5c:	4618      	moveq	r0, r3
 8012c5e:	30f0      	adds	r0, #240	; 0xf0
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop
 8012c64:	2000086c 	.word	0x2000086c
 8012c68:	200008d0 	.word	0x200008d0

08012c6c <_lseek_r>:
 8012c6c:	b538      	push	{r3, r4, r5, lr}
 8012c6e:	4c07      	ldr	r4, [pc, #28]	; (8012c8c <_lseek_r+0x20>)
 8012c70:	4605      	mov	r5, r0
 8012c72:	4608      	mov	r0, r1
 8012c74:	4611      	mov	r1, r2
 8012c76:	2200      	movs	r2, #0
 8012c78:	6022      	str	r2, [r4, #0]
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	f001 fbd0 	bl	8014420 <_lseek>
 8012c80:	1c43      	adds	r3, r0, #1
 8012c82:	d102      	bne.n	8012c8a <_lseek_r+0x1e>
 8012c84:	6823      	ldr	r3, [r4, #0]
 8012c86:	b103      	cbz	r3, 8012c8a <_lseek_r+0x1e>
 8012c88:	602b      	str	r3, [r5, #0]
 8012c8a:	bd38      	pop	{r3, r4, r5, pc}
 8012c8c:	2000ecb0 	.word	0x2000ecb0

08012c90 <__swhatbuf_r>:
 8012c90:	b570      	push	{r4, r5, r6, lr}
 8012c92:	460e      	mov	r6, r1
 8012c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c98:	2900      	cmp	r1, #0
 8012c9a:	b096      	sub	sp, #88	; 0x58
 8012c9c:	4614      	mov	r4, r2
 8012c9e:	461d      	mov	r5, r3
 8012ca0:	da07      	bge.n	8012cb2 <__swhatbuf_r+0x22>
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	602b      	str	r3, [r5, #0]
 8012ca6:	89b3      	ldrh	r3, [r6, #12]
 8012ca8:	061a      	lsls	r2, r3, #24
 8012caa:	d410      	bmi.n	8012cce <__swhatbuf_r+0x3e>
 8012cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cb0:	e00e      	b.n	8012cd0 <__swhatbuf_r+0x40>
 8012cb2:	466a      	mov	r2, sp
 8012cb4:	f001 fb22 	bl	80142fc <_fstat_r>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	dbf2      	blt.n	8012ca2 <__swhatbuf_r+0x12>
 8012cbc:	9a01      	ldr	r2, [sp, #4]
 8012cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012cc6:	425a      	negs	r2, r3
 8012cc8:	415a      	adcs	r2, r3
 8012cca:	602a      	str	r2, [r5, #0]
 8012ccc:	e7ee      	b.n	8012cac <__swhatbuf_r+0x1c>
 8012cce:	2340      	movs	r3, #64	; 0x40
 8012cd0:	2000      	movs	r0, #0
 8012cd2:	6023      	str	r3, [r4, #0]
 8012cd4:	b016      	add	sp, #88	; 0x58
 8012cd6:	bd70      	pop	{r4, r5, r6, pc}

08012cd8 <__smakebuf_r>:
 8012cd8:	898b      	ldrh	r3, [r1, #12]
 8012cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012cdc:	079d      	lsls	r5, r3, #30
 8012cde:	4606      	mov	r6, r0
 8012ce0:	460c      	mov	r4, r1
 8012ce2:	d507      	bpl.n	8012cf4 <__smakebuf_r+0x1c>
 8012ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	6123      	str	r3, [r4, #16]
 8012cec:	2301      	movs	r3, #1
 8012cee:	6163      	str	r3, [r4, #20]
 8012cf0:	b002      	add	sp, #8
 8012cf2:	bd70      	pop	{r4, r5, r6, pc}
 8012cf4:	ab01      	add	r3, sp, #4
 8012cf6:	466a      	mov	r2, sp
 8012cf8:	f7ff ffca 	bl	8012c90 <__swhatbuf_r>
 8012cfc:	9900      	ldr	r1, [sp, #0]
 8012cfe:	4605      	mov	r5, r0
 8012d00:	4630      	mov	r0, r6
 8012d02:	f7fc fde3 	bl	800f8cc <_malloc_r>
 8012d06:	b948      	cbnz	r0, 8012d1c <__smakebuf_r+0x44>
 8012d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d0c:	059a      	lsls	r2, r3, #22
 8012d0e:	d4ef      	bmi.n	8012cf0 <__smakebuf_r+0x18>
 8012d10:	f023 0303 	bic.w	r3, r3, #3
 8012d14:	f043 0302 	orr.w	r3, r3, #2
 8012d18:	81a3      	strh	r3, [r4, #12]
 8012d1a:	e7e3      	b.n	8012ce4 <__smakebuf_r+0xc>
 8012d1c:	4b0d      	ldr	r3, [pc, #52]	; (8012d54 <__smakebuf_r+0x7c>)
 8012d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	6020      	str	r0, [r4, #0]
 8012d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d28:	81a3      	strh	r3, [r4, #12]
 8012d2a:	9b00      	ldr	r3, [sp, #0]
 8012d2c:	6163      	str	r3, [r4, #20]
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	6120      	str	r0, [r4, #16]
 8012d32:	b15b      	cbz	r3, 8012d4c <__smakebuf_r+0x74>
 8012d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d38:	4630      	mov	r0, r6
 8012d3a:	f001 faf1 	bl	8014320 <_isatty_r>
 8012d3e:	b128      	cbz	r0, 8012d4c <__smakebuf_r+0x74>
 8012d40:	89a3      	ldrh	r3, [r4, #12]
 8012d42:	f023 0303 	bic.w	r3, r3, #3
 8012d46:	f043 0301 	orr.w	r3, r3, #1
 8012d4a:	81a3      	strh	r3, [r4, #12]
 8012d4c:	89a3      	ldrh	r3, [r4, #12]
 8012d4e:	431d      	orrs	r5, r3
 8012d50:	81a5      	strh	r5, [r4, #12]
 8012d52:	e7cd      	b.n	8012cf0 <__smakebuf_r+0x18>
 8012d54:	08012491 	.word	0x08012491

08012d58 <__ascii_mbtowc>:
 8012d58:	b082      	sub	sp, #8
 8012d5a:	b901      	cbnz	r1, 8012d5e <__ascii_mbtowc+0x6>
 8012d5c:	a901      	add	r1, sp, #4
 8012d5e:	b142      	cbz	r2, 8012d72 <__ascii_mbtowc+0x1a>
 8012d60:	b14b      	cbz	r3, 8012d76 <__ascii_mbtowc+0x1e>
 8012d62:	7813      	ldrb	r3, [r2, #0]
 8012d64:	600b      	str	r3, [r1, #0]
 8012d66:	7812      	ldrb	r2, [r2, #0]
 8012d68:	1c10      	adds	r0, r2, #0
 8012d6a:	bf18      	it	ne
 8012d6c:	2001      	movne	r0, #1
 8012d6e:	b002      	add	sp, #8
 8012d70:	4770      	bx	lr
 8012d72:	4610      	mov	r0, r2
 8012d74:	e7fb      	b.n	8012d6e <__ascii_mbtowc+0x16>
 8012d76:	f06f 0001 	mvn.w	r0, #1
 8012d7a:	e7f8      	b.n	8012d6e <__ascii_mbtowc+0x16>

08012d7c <__malloc_lock>:
 8012d7c:	4770      	bx	lr

08012d7e <__malloc_unlock>:
 8012d7e:	4770      	bx	lr

08012d80 <_Balloc>:
 8012d80:	b570      	push	{r4, r5, r6, lr}
 8012d82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012d84:	4604      	mov	r4, r0
 8012d86:	460e      	mov	r6, r1
 8012d88:	b93d      	cbnz	r5, 8012d9a <_Balloc+0x1a>
 8012d8a:	2010      	movs	r0, #16
 8012d8c:	f7fc fd26 	bl	800f7dc <malloc>
 8012d90:	6260      	str	r0, [r4, #36]	; 0x24
 8012d92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012d96:	6005      	str	r5, [r0, #0]
 8012d98:	60c5      	str	r5, [r0, #12]
 8012d9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012d9c:	68eb      	ldr	r3, [r5, #12]
 8012d9e:	b183      	cbz	r3, 8012dc2 <_Balloc+0x42>
 8012da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012da8:	b9b8      	cbnz	r0, 8012dda <_Balloc+0x5a>
 8012daa:	2101      	movs	r1, #1
 8012dac:	fa01 f506 	lsl.w	r5, r1, r6
 8012db0:	1d6a      	adds	r2, r5, #5
 8012db2:	0092      	lsls	r2, r2, #2
 8012db4:	4620      	mov	r0, r4
 8012db6:	f7fc fd2c 	bl	800f812 <_calloc_r>
 8012dba:	b160      	cbz	r0, 8012dd6 <_Balloc+0x56>
 8012dbc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012dc0:	e00e      	b.n	8012de0 <_Balloc+0x60>
 8012dc2:	2221      	movs	r2, #33	; 0x21
 8012dc4:	2104      	movs	r1, #4
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f7fc fd23 	bl	800f812 <_calloc_r>
 8012dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dce:	60e8      	str	r0, [r5, #12]
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d1e4      	bne.n	8012da0 <_Balloc+0x20>
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	bd70      	pop	{r4, r5, r6, pc}
 8012dda:	6802      	ldr	r2, [r0, #0]
 8012ddc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012de0:	2300      	movs	r3, #0
 8012de2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012de6:	e7f7      	b.n	8012dd8 <_Balloc+0x58>

08012de8 <_Bfree>:
 8012de8:	b570      	push	{r4, r5, r6, lr}
 8012dea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012dec:	4606      	mov	r6, r0
 8012dee:	460d      	mov	r5, r1
 8012df0:	b93c      	cbnz	r4, 8012e02 <_Bfree+0x1a>
 8012df2:	2010      	movs	r0, #16
 8012df4:	f7fc fcf2 	bl	800f7dc <malloc>
 8012df8:	6270      	str	r0, [r6, #36]	; 0x24
 8012dfa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012dfe:	6004      	str	r4, [r0, #0]
 8012e00:	60c4      	str	r4, [r0, #12]
 8012e02:	b13d      	cbz	r5, 8012e14 <_Bfree+0x2c>
 8012e04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012e06:	686a      	ldr	r2, [r5, #4]
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e0e:	6029      	str	r1, [r5, #0]
 8012e10:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012e14:	bd70      	pop	{r4, r5, r6, pc}

08012e16 <__multadd>:
 8012e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e1a:	690d      	ldr	r5, [r1, #16]
 8012e1c:	461f      	mov	r7, r3
 8012e1e:	4606      	mov	r6, r0
 8012e20:	460c      	mov	r4, r1
 8012e22:	f101 0c14 	add.w	ip, r1, #20
 8012e26:	2300      	movs	r3, #0
 8012e28:	f8dc 0000 	ldr.w	r0, [ip]
 8012e2c:	b281      	uxth	r1, r0
 8012e2e:	fb02 7101 	mla	r1, r2, r1, r7
 8012e32:	0c0f      	lsrs	r7, r1, #16
 8012e34:	0c00      	lsrs	r0, r0, #16
 8012e36:	fb02 7000 	mla	r0, r2, r0, r7
 8012e3a:	b289      	uxth	r1, r1
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012e42:	429d      	cmp	r5, r3
 8012e44:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012e48:	f84c 1b04 	str.w	r1, [ip], #4
 8012e4c:	dcec      	bgt.n	8012e28 <__multadd+0x12>
 8012e4e:	b1d7      	cbz	r7, 8012e86 <__multadd+0x70>
 8012e50:	68a3      	ldr	r3, [r4, #8]
 8012e52:	42ab      	cmp	r3, r5
 8012e54:	dc12      	bgt.n	8012e7c <__multadd+0x66>
 8012e56:	6861      	ldr	r1, [r4, #4]
 8012e58:	4630      	mov	r0, r6
 8012e5a:	3101      	adds	r1, #1
 8012e5c:	f7ff ff90 	bl	8012d80 <_Balloc>
 8012e60:	6922      	ldr	r2, [r4, #16]
 8012e62:	3202      	adds	r2, #2
 8012e64:	f104 010c 	add.w	r1, r4, #12
 8012e68:	4680      	mov	r8, r0
 8012e6a:	0092      	lsls	r2, r2, #2
 8012e6c:	300c      	adds	r0, #12
 8012e6e:	f7fc fcbd 	bl	800f7ec <memcpy>
 8012e72:	4621      	mov	r1, r4
 8012e74:	4630      	mov	r0, r6
 8012e76:	f7ff ffb7 	bl	8012de8 <_Bfree>
 8012e7a:	4644      	mov	r4, r8
 8012e7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e80:	3501      	adds	r5, #1
 8012e82:	615f      	str	r7, [r3, #20]
 8012e84:	6125      	str	r5, [r4, #16]
 8012e86:	4620      	mov	r0, r4
 8012e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e8c <__s2b>:
 8012e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e90:	460c      	mov	r4, r1
 8012e92:	4615      	mov	r5, r2
 8012e94:	461f      	mov	r7, r3
 8012e96:	2209      	movs	r2, #9
 8012e98:	3308      	adds	r3, #8
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ea0:	2100      	movs	r1, #0
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	db20      	blt.n	8012eea <__s2b+0x5e>
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	f7ff ff69 	bl	8012d80 <_Balloc>
 8012eae:	9b08      	ldr	r3, [sp, #32]
 8012eb0:	6143      	str	r3, [r0, #20]
 8012eb2:	2d09      	cmp	r5, #9
 8012eb4:	f04f 0301 	mov.w	r3, #1
 8012eb8:	6103      	str	r3, [r0, #16]
 8012eba:	dd19      	ble.n	8012ef0 <__s2b+0x64>
 8012ebc:	f104 0809 	add.w	r8, r4, #9
 8012ec0:	46c1      	mov	r9, r8
 8012ec2:	442c      	add	r4, r5
 8012ec4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012ec8:	4601      	mov	r1, r0
 8012eca:	3b30      	subs	r3, #48	; 0x30
 8012ecc:	220a      	movs	r2, #10
 8012ece:	4630      	mov	r0, r6
 8012ed0:	f7ff ffa1 	bl	8012e16 <__multadd>
 8012ed4:	45a1      	cmp	r9, r4
 8012ed6:	d1f5      	bne.n	8012ec4 <__s2b+0x38>
 8012ed8:	eb08 0405 	add.w	r4, r8, r5
 8012edc:	3c08      	subs	r4, #8
 8012ede:	1b2d      	subs	r5, r5, r4
 8012ee0:	1963      	adds	r3, r4, r5
 8012ee2:	42bb      	cmp	r3, r7
 8012ee4:	db07      	blt.n	8012ef6 <__s2b+0x6a>
 8012ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eea:	0052      	lsls	r2, r2, #1
 8012eec:	3101      	adds	r1, #1
 8012eee:	e7d9      	b.n	8012ea4 <__s2b+0x18>
 8012ef0:	340a      	adds	r4, #10
 8012ef2:	2509      	movs	r5, #9
 8012ef4:	e7f3      	b.n	8012ede <__s2b+0x52>
 8012ef6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012efa:	4601      	mov	r1, r0
 8012efc:	3b30      	subs	r3, #48	; 0x30
 8012efe:	220a      	movs	r2, #10
 8012f00:	4630      	mov	r0, r6
 8012f02:	f7ff ff88 	bl	8012e16 <__multadd>
 8012f06:	e7eb      	b.n	8012ee0 <__s2b+0x54>

08012f08 <__hi0bits>:
 8012f08:	0c02      	lsrs	r2, r0, #16
 8012f0a:	0412      	lsls	r2, r2, #16
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	b9b2      	cbnz	r2, 8012f3e <__hi0bits+0x36>
 8012f10:	0403      	lsls	r3, r0, #16
 8012f12:	2010      	movs	r0, #16
 8012f14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012f18:	bf04      	itt	eq
 8012f1a:	021b      	lsleq	r3, r3, #8
 8012f1c:	3008      	addeq	r0, #8
 8012f1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012f22:	bf04      	itt	eq
 8012f24:	011b      	lsleq	r3, r3, #4
 8012f26:	3004      	addeq	r0, #4
 8012f28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012f2c:	bf04      	itt	eq
 8012f2e:	009b      	lsleq	r3, r3, #2
 8012f30:	3002      	addeq	r0, #2
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	db06      	blt.n	8012f44 <__hi0bits+0x3c>
 8012f36:	005b      	lsls	r3, r3, #1
 8012f38:	d503      	bpl.n	8012f42 <__hi0bits+0x3a>
 8012f3a:	3001      	adds	r0, #1
 8012f3c:	4770      	bx	lr
 8012f3e:	2000      	movs	r0, #0
 8012f40:	e7e8      	b.n	8012f14 <__hi0bits+0xc>
 8012f42:	2020      	movs	r0, #32
 8012f44:	4770      	bx	lr

08012f46 <__lo0bits>:
 8012f46:	6803      	ldr	r3, [r0, #0]
 8012f48:	f013 0207 	ands.w	r2, r3, #7
 8012f4c:	4601      	mov	r1, r0
 8012f4e:	d00b      	beq.n	8012f68 <__lo0bits+0x22>
 8012f50:	07da      	lsls	r2, r3, #31
 8012f52:	d423      	bmi.n	8012f9c <__lo0bits+0x56>
 8012f54:	0798      	lsls	r0, r3, #30
 8012f56:	bf49      	itett	mi
 8012f58:	085b      	lsrmi	r3, r3, #1
 8012f5a:	089b      	lsrpl	r3, r3, #2
 8012f5c:	2001      	movmi	r0, #1
 8012f5e:	600b      	strmi	r3, [r1, #0]
 8012f60:	bf5c      	itt	pl
 8012f62:	600b      	strpl	r3, [r1, #0]
 8012f64:	2002      	movpl	r0, #2
 8012f66:	4770      	bx	lr
 8012f68:	b298      	uxth	r0, r3
 8012f6a:	b9a8      	cbnz	r0, 8012f98 <__lo0bits+0x52>
 8012f6c:	0c1b      	lsrs	r3, r3, #16
 8012f6e:	2010      	movs	r0, #16
 8012f70:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012f74:	bf04      	itt	eq
 8012f76:	0a1b      	lsreq	r3, r3, #8
 8012f78:	3008      	addeq	r0, #8
 8012f7a:	071a      	lsls	r2, r3, #28
 8012f7c:	bf04      	itt	eq
 8012f7e:	091b      	lsreq	r3, r3, #4
 8012f80:	3004      	addeq	r0, #4
 8012f82:	079a      	lsls	r2, r3, #30
 8012f84:	bf04      	itt	eq
 8012f86:	089b      	lsreq	r3, r3, #2
 8012f88:	3002      	addeq	r0, #2
 8012f8a:	07da      	lsls	r2, r3, #31
 8012f8c:	d402      	bmi.n	8012f94 <__lo0bits+0x4e>
 8012f8e:	085b      	lsrs	r3, r3, #1
 8012f90:	d006      	beq.n	8012fa0 <__lo0bits+0x5a>
 8012f92:	3001      	adds	r0, #1
 8012f94:	600b      	str	r3, [r1, #0]
 8012f96:	4770      	bx	lr
 8012f98:	4610      	mov	r0, r2
 8012f9a:	e7e9      	b.n	8012f70 <__lo0bits+0x2a>
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	4770      	bx	lr
 8012fa0:	2020      	movs	r0, #32
 8012fa2:	4770      	bx	lr

08012fa4 <__i2b>:
 8012fa4:	b510      	push	{r4, lr}
 8012fa6:	460c      	mov	r4, r1
 8012fa8:	2101      	movs	r1, #1
 8012faa:	f7ff fee9 	bl	8012d80 <_Balloc>
 8012fae:	2201      	movs	r2, #1
 8012fb0:	6144      	str	r4, [r0, #20]
 8012fb2:	6102      	str	r2, [r0, #16]
 8012fb4:	bd10      	pop	{r4, pc}

08012fb6 <__multiply>:
 8012fb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fba:	4614      	mov	r4, r2
 8012fbc:	690a      	ldr	r2, [r1, #16]
 8012fbe:	6923      	ldr	r3, [r4, #16]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	bfb8      	it	lt
 8012fc4:	460b      	movlt	r3, r1
 8012fc6:	4688      	mov	r8, r1
 8012fc8:	bfbc      	itt	lt
 8012fca:	46a0      	movlt	r8, r4
 8012fcc:	461c      	movlt	r4, r3
 8012fce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012fd2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012fd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012fda:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012fde:	eb07 0609 	add.w	r6, r7, r9
 8012fe2:	42b3      	cmp	r3, r6
 8012fe4:	bfb8      	it	lt
 8012fe6:	3101      	addlt	r1, #1
 8012fe8:	f7ff feca 	bl	8012d80 <_Balloc>
 8012fec:	f100 0514 	add.w	r5, r0, #20
 8012ff0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012ff4:	462b      	mov	r3, r5
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	4573      	cmp	r3, lr
 8012ffa:	d316      	bcc.n	801302a <__multiply+0x74>
 8012ffc:	f104 0214 	add.w	r2, r4, #20
 8013000:	f108 0114 	add.w	r1, r8, #20
 8013004:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013008:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801300c:	9300      	str	r3, [sp, #0]
 801300e:	9b00      	ldr	r3, [sp, #0]
 8013010:	9201      	str	r2, [sp, #4]
 8013012:	4293      	cmp	r3, r2
 8013014:	d80c      	bhi.n	8013030 <__multiply+0x7a>
 8013016:	2e00      	cmp	r6, #0
 8013018:	dd03      	ble.n	8013022 <__multiply+0x6c>
 801301a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801301e:	2b00      	cmp	r3, #0
 8013020:	d05d      	beq.n	80130de <__multiply+0x128>
 8013022:	6106      	str	r6, [r0, #16]
 8013024:	b003      	add	sp, #12
 8013026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801302a:	f843 2b04 	str.w	r2, [r3], #4
 801302e:	e7e3      	b.n	8012ff8 <__multiply+0x42>
 8013030:	f8b2 b000 	ldrh.w	fp, [r2]
 8013034:	f1bb 0f00 	cmp.w	fp, #0
 8013038:	d023      	beq.n	8013082 <__multiply+0xcc>
 801303a:	4689      	mov	r9, r1
 801303c:	46ac      	mov	ip, r5
 801303e:	f04f 0800 	mov.w	r8, #0
 8013042:	f859 4b04 	ldr.w	r4, [r9], #4
 8013046:	f8dc a000 	ldr.w	sl, [ip]
 801304a:	b2a3      	uxth	r3, r4
 801304c:	fa1f fa8a 	uxth.w	sl, sl
 8013050:	fb0b a303 	mla	r3, fp, r3, sl
 8013054:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013058:	f8dc 4000 	ldr.w	r4, [ip]
 801305c:	4443      	add	r3, r8
 801305e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013062:	fb0b 840a 	mla	r4, fp, sl, r8
 8013066:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801306a:	46e2      	mov	sl, ip
 801306c:	b29b      	uxth	r3, r3
 801306e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013072:	454f      	cmp	r7, r9
 8013074:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013078:	f84a 3b04 	str.w	r3, [sl], #4
 801307c:	d82b      	bhi.n	80130d6 <__multiply+0x120>
 801307e:	f8cc 8004 	str.w	r8, [ip, #4]
 8013082:	9b01      	ldr	r3, [sp, #4]
 8013084:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013088:	3204      	adds	r2, #4
 801308a:	f1ba 0f00 	cmp.w	sl, #0
 801308e:	d020      	beq.n	80130d2 <__multiply+0x11c>
 8013090:	682b      	ldr	r3, [r5, #0]
 8013092:	4689      	mov	r9, r1
 8013094:	46a8      	mov	r8, r5
 8013096:	f04f 0b00 	mov.w	fp, #0
 801309a:	f8b9 c000 	ldrh.w	ip, [r9]
 801309e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80130a2:	fb0a 440c 	mla	r4, sl, ip, r4
 80130a6:	445c      	add	r4, fp
 80130a8:	46c4      	mov	ip, r8
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80130b0:	f84c 3b04 	str.w	r3, [ip], #4
 80130b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80130b8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80130bc:	0c1b      	lsrs	r3, r3, #16
 80130be:	fb0a b303 	mla	r3, sl, r3, fp
 80130c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80130c6:	454f      	cmp	r7, r9
 80130c8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80130cc:	d805      	bhi.n	80130da <__multiply+0x124>
 80130ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80130d2:	3504      	adds	r5, #4
 80130d4:	e79b      	b.n	801300e <__multiply+0x58>
 80130d6:	46d4      	mov	ip, sl
 80130d8:	e7b3      	b.n	8013042 <__multiply+0x8c>
 80130da:	46e0      	mov	r8, ip
 80130dc:	e7dd      	b.n	801309a <__multiply+0xe4>
 80130de:	3e01      	subs	r6, #1
 80130e0:	e799      	b.n	8013016 <__multiply+0x60>
	...

080130e4 <__pow5mult>:
 80130e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130e8:	4615      	mov	r5, r2
 80130ea:	f012 0203 	ands.w	r2, r2, #3
 80130ee:	4606      	mov	r6, r0
 80130f0:	460f      	mov	r7, r1
 80130f2:	d007      	beq.n	8013104 <__pow5mult+0x20>
 80130f4:	3a01      	subs	r2, #1
 80130f6:	4c21      	ldr	r4, [pc, #132]	; (801317c <__pow5mult+0x98>)
 80130f8:	2300      	movs	r3, #0
 80130fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130fe:	f7ff fe8a 	bl	8012e16 <__multadd>
 8013102:	4607      	mov	r7, r0
 8013104:	10ad      	asrs	r5, r5, #2
 8013106:	d035      	beq.n	8013174 <__pow5mult+0x90>
 8013108:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801310a:	b93c      	cbnz	r4, 801311c <__pow5mult+0x38>
 801310c:	2010      	movs	r0, #16
 801310e:	f7fc fb65 	bl	800f7dc <malloc>
 8013112:	6270      	str	r0, [r6, #36]	; 0x24
 8013114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013118:	6004      	str	r4, [r0, #0]
 801311a:	60c4      	str	r4, [r0, #12]
 801311c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013120:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013124:	b94c      	cbnz	r4, 801313a <__pow5mult+0x56>
 8013126:	f240 2171 	movw	r1, #625	; 0x271
 801312a:	4630      	mov	r0, r6
 801312c:	f7ff ff3a 	bl	8012fa4 <__i2b>
 8013130:	2300      	movs	r3, #0
 8013132:	f8c8 0008 	str.w	r0, [r8, #8]
 8013136:	4604      	mov	r4, r0
 8013138:	6003      	str	r3, [r0, #0]
 801313a:	f04f 0800 	mov.w	r8, #0
 801313e:	07eb      	lsls	r3, r5, #31
 8013140:	d50a      	bpl.n	8013158 <__pow5mult+0x74>
 8013142:	4639      	mov	r1, r7
 8013144:	4622      	mov	r2, r4
 8013146:	4630      	mov	r0, r6
 8013148:	f7ff ff35 	bl	8012fb6 <__multiply>
 801314c:	4639      	mov	r1, r7
 801314e:	4681      	mov	r9, r0
 8013150:	4630      	mov	r0, r6
 8013152:	f7ff fe49 	bl	8012de8 <_Bfree>
 8013156:	464f      	mov	r7, r9
 8013158:	106d      	asrs	r5, r5, #1
 801315a:	d00b      	beq.n	8013174 <__pow5mult+0x90>
 801315c:	6820      	ldr	r0, [r4, #0]
 801315e:	b938      	cbnz	r0, 8013170 <__pow5mult+0x8c>
 8013160:	4622      	mov	r2, r4
 8013162:	4621      	mov	r1, r4
 8013164:	4630      	mov	r0, r6
 8013166:	f7ff ff26 	bl	8012fb6 <__multiply>
 801316a:	6020      	str	r0, [r4, #0]
 801316c:	f8c0 8000 	str.w	r8, [r0]
 8013170:	4604      	mov	r4, r0
 8013172:	e7e4      	b.n	801313e <__pow5mult+0x5a>
 8013174:	4638      	mov	r0, r7
 8013176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801317a:	bf00      	nop
 801317c:	08014a60 	.word	0x08014a60

08013180 <__lshift>:
 8013180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013184:	460c      	mov	r4, r1
 8013186:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801318a:	6923      	ldr	r3, [r4, #16]
 801318c:	6849      	ldr	r1, [r1, #4]
 801318e:	eb0a 0903 	add.w	r9, sl, r3
 8013192:	68a3      	ldr	r3, [r4, #8]
 8013194:	4607      	mov	r7, r0
 8013196:	4616      	mov	r6, r2
 8013198:	f109 0501 	add.w	r5, r9, #1
 801319c:	42ab      	cmp	r3, r5
 801319e:	db32      	blt.n	8013206 <__lshift+0x86>
 80131a0:	4638      	mov	r0, r7
 80131a2:	f7ff fded 	bl	8012d80 <_Balloc>
 80131a6:	2300      	movs	r3, #0
 80131a8:	4680      	mov	r8, r0
 80131aa:	f100 0114 	add.w	r1, r0, #20
 80131ae:	461a      	mov	r2, r3
 80131b0:	4553      	cmp	r3, sl
 80131b2:	db2b      	blt.n	801320c <__lshift+0x8c>
 80131b4:	6920      	ldr	r0, [r4, #16]
 80131b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131ba:	f104 0314 	add.w	r3, r4, #20
 80131be:	f016 021f 	ands.w	r2, r6, #31
 80131c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131ca:	d025      	beq.n	8013218 <__lshift+0x98>
 80131cc:	f1c2 0e20 	rsb	lr, r2, #32
 80131d0:	2000      	movs	r0, #0
 80131d2:	681e      	ldr	r6, [r3, #0]
 80131d4:	468a      	mov	sl, r1
 80131d6:	4096      	lsls	r6, r2
 80131d8:	4330      	orrs	r0, r6
 80131da:	f84a 0b04 	str.w	r0, [sl], #4
 80131de:	f853 0b04 	ldr.w	r0, [r3], #4
 80131e2:	459c      	cmp	ip, r3
 80131e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80131e8:	d814      	bhi.n	8013214 <__lshift+0x94>
 80131ea:	6048      	str	r0, [r1, #4]
 80131ec:	b108      	cbz	r0, 80131f2 <__lshift+0x72>
 80131ee:	f109 0502 	add.w	r5, r9, #2
 80131f2:	3d01      	subs	r5, #1
 80131f4:	4638      	mov	r0, r7
 80131f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80131fa:	4621      	mov	r1, r4
 80131fc:	f7ff fdf4 	bl	8012de8 <_Bfree>
 8013200:	4640      	mov	r0, r8
 8013202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013206:	3101      	adds	r1, #1
 8013208:	005b      	lsls	r3, r3, #1
 801320a:	e7c7      	b.n	801319c <__lshift+0x1c>
 801320c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013210:	3301      	adds	r3, #1
 8013212:	e7cd      	b.n	80131b0 <__lshift+0x30>
 8013214:	4651      	mov	r1, sl
 8013216:	e7dc      	b.n	80131d2 <__lshift+0x52>
 8013218:	3904      	subs	r1, #4
 801321a:	f853 2b04 	ldr.w	r2, [r3], #4
 801321e:	f841 2f04 	str.w	r2, [r1, #4]!
 8013222:	459c      	cmp	ip, r3
 8013224:	d8f9      	bhi.n	801321a <__lshift+0x9a>
 8013226:	e7e4      	b.n	80131f2 <__lshift+0x72>

08013228 <__mcmp>:
 8013228:	6903      	ldr	r3, [r0, #16]
 801322a:	690a      	ldr	r2, [r1, #16]
 801322c:	1a9b      	subs	r3, r3, r2
 801322e:	b530      	push	{r4, r5, lr}
 8013230:	d10c      	bne.n	801324c <__mcmp+0x24>
 8013232:	0092      	lsls	r2, r2, #2
 8013234:	3014      	adds	r0, #20
 8013236:	3114      	adds	r1, #20
 8013238:	1884      	adds	r4, r0, r2
 801323a:	4411      	add	r1, r2
 801323c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013244:	4295      	cmp	r5, r2
 8013246:	d003      	beq.n	8013250 <__mcmp+0x28>
 8013248:	d305      	bcc.n	8013256 <__mcmp+0x2e>
 801324a:	2301      	movs	r3, #1
 801324c:	4618      	mov	r0, r3
 801324e:	bd30      	pop	{r4, r5, pc}
 8013250:	42a0      	cmp	r0, r4
 8013252:	d3f3      	bcc.n	801323c <__mcmp+0x14>
 8013254:	e7fa      	b.n	801324c <__mcmp+0x24>
 8013256:	f04f 33ff 	mov.w	r3, #4294967295
 801325a:	e7f7      	b.n	801324c <__mcmp+0x24>

0801325c <__mdiff>:
 801325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013260:	460d      	mov	r5, r1
 8013262:	4607      	mov	r7, r0
 8013264:	4611      	mov	r1, r2
 8013266:	4628      	mov	r0, r5
 8013268:	4614      	mov	r4, r2
 801326a:	f7ff ffdd 	bl	8013228 <__mcmp>
 801326e:	1e06      	subs	r6, r0, #0
 8013270:	d108      	bne.n	8013284 <__mdiff+0x28>
 8013272:	4631      	mov	r1, r6
 8013274:	4638      	mov	r0, r7
 8013276:	f7ff fd83 	bl	8012d80 <_Balloc>
 801327a:	2301      	movs	r3, #1
 801327c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013284:	bfa4      	itt	ge
 8013286:	4623      	movge	r3, r4
 8013288:	462c      	movge	r4, r5
 801328a:	4638      	mov	r0, r7
 801328c:	6861      	ldr	r1, [r4, #4]
 801328e:	bfa6      	itte	ge
 8013290:	461d      	movge	r5, r3
 8013292:	2600      	movge	r6, #0
 8013294:	2601      	movlt	r6, #1
 8013296:	f7ff fd73 	bl	8012d80 <_Balloc>
 801329a:	692b      	ldr	r3, [r5, #16]
 801329c:	60c6      	str	r6, [r0, #12]
 801329e:	6926      	ldr	r6, [r4, #16]
 80132a0:	f105 0914 	add.w	r9, r5, #20
 80132a4:	f104 0214 	add.w	r2, r4, #20
 80132a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80132ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80132b0:	f100 0514 	add.w	r5, r0, #20
 80132b4:	f04f 0e00 	mov.w	lr, #0
 80132b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80132bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80132c0:	fa1e f18a 	uxtah	r1, lr, sl
 80132c4:	b2a3      	uxth	r3, r4
 80132c6:	1ac9      	subs	r1, r1, r3
 80132c8:	0c23      	lsrs	r3, r4, #16
 80132ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80132ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80132d2:	b289      	uxth	r1, r1
 80132d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80132d8:	45c8      	cmp	r8, r9
 80132da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80132de:	4694      	mov	ip, r2
 80132e0:	f845 3b04 	str.w	r3, [r5], #4
 80132e4:	d8e8      	bhi.n	80132b8 <__mdiff+0x5c>
 80132e6:	45bc      	cmp	ip, r7
 80132e8:	d304      	bcc.n	80132f4 <__mdiff+0x98>
 80132ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80132ee:	b183      	cbz	r3, 8013312 <__mdiff+0xb6>
 80132f0:	6106      	str	r6, [r0, #16]
 80132f2:	e7c5      	b.n	8013280 <__mdiff+0x24>
 80132f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80132f8:	fa1e f381 	uxtah	r3, lr, r1
 80132fc:	141a      	asrs	r2, r3, #16
 80132fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013302:	b29b      	uxth	r3, r3
 8013304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013308:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801330c:	f845 3b04 	str.w	r3, [r5], #4
 8013310:	e7e9      	b.n	80132e6 <__mdiff+0x8a>
 8013312:	3e01      	subs	r6, #1
 8013314:	e7e9      	b.n	80132ea <__mdiff+0x8e>
	...

08013318 <__ulp>:
 8013318:	4b12      	ldr	r3, [pc, #72]	; (8013364 <__ulp+0x4c>)
 801331a:	ee10 2a90 	vmov	r2, s1
 801331e:	401a      	ands	r2, r3
 8013320:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013324:	2b00      	cmp	r3, #0
 8013326:	dd04      	ble.n	8013332 <__ulp+0x1a>
 8013328:	2000      	movs	r0, #0
 801332a:	4619      	mov	r1, r3
 801332c:	ec41 0b10 	vmov	d0, r0, r1
 8013330:	4770      	bx	lr
 8013332:	425b      	negs	r3, r3
 8013334:	151b      	asrs	r3, r3, #20
 8013336:	2b13      	cmp	r3, #19
 8013338:	f04f 0000 	mov.w	r0, #0
 801333c:	f04f 0100 	mov.w	r1, #0
 8013340:	dc04      	bgt.n	801334c <__ulp+0x34>
 8013342:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013346:	fa42 f103 	asr.w	r1, r2, r3
 801334a:	e7ef      	b.n	801332c <__ulp+0x14>
 801334c:	3b14      	subs	r3, #20
 801334e:	2b1e      	cmp	r3, #30
 8013350:	f04f 0201 	mov.w	r2, #1
 8013354:	bfda      	itte	le
 8013356:	f1c3 031f 	rsble	r3, r3, #31
 801335a:	fa02 f303 	lslle.w	r3, r2, r3
 801335e:	4613      	movgt	r3, r2
 8013360:	4618      	mov	r0, r3
 8013362:	e7e3      	b.n	801332c <__ulp+0x14>
 8013364:	7ff00000 	.word	0x7ff00000

08013368 <__b2d>:
 8013368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336a:	6905      	ldr	r5, [r0, #16]
 801336c:	f100 0714 	add.w	r7, r0, #20
 8013370:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013374:	1f2e      	subs	r6, r5, #4
 8013376:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801337a:	4620      	mov	r0, r4
 801337c:	f7ff fdc4 	bl	8012f08 <__hi0bits>
 8013380:	f1c0 0320 	rsb	r3, r0, #32
 8013384:	280a      	cmp	r0, #10
 8013386:	600b      	str	r3, [r1, #0]
 8013388:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013400 <__b2d+0x98>
 801338c:	dc14      	bgt.n	80133b8 <__b2d+0x50>
 801338e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013392:	fa24 f10e 	lsr.w	r1, r4, lr
 8013396:	42b7      	cmp	r7, r6
 8013398:	ea41 030c 	orr.w	r3, r1, ip
 801339c:	bf34      	ite	cc
 801339e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80133a2:	2100      	movcs	r1, #0
 80133a4:	3015      	adds	r0, #21
 80133a6:	fa04 f000 	lsl.w	r0, r4, r0
 80133aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80133ae:	ea40 0201 	orr.w	r2, r0, r1
 80133b2:	ec43 2b10 	vmov	d0, r2, r3
 80133b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133b8:	42b7      	cmp	r7, r6
 80133ba:	bf3a      	itte	cc
 80133bc:	f1a5 0608 	subcc.w	r6, r5, #8
 80133c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80133c4:	2100      	movcs	r1, #0
 80133c6:	380b      	subs	r0, #11
 80133c8:	d015      	beq.n	80133f6 <__b2d+0x8e>
 80133ca:	4084      	lsls	r4, r0
 80133cc:	f1c0 0520 	rsb	r5, r0, #32
 80133d0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80133d4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80133d8:	42be      	cmp	r6, r7
 80133da:	fa21 fc05 	lsr.w	ip, r1, r5
 80133de:	ea44 030c 	orr.w	r3, r4, ip
 80133e2:	bf8c      	ite	hi
 80133e4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80133e8:	2400      	movls	r4, #0
 80133ea:	fa01 f000 	lsl.w	r0, r1, r0
 80133ee:	40ec      	lsrs	r4, r5
 80133f0:	ea40 0204 	orr.w	r2, r0, r4
 80133f4:	e7dd      	b.n	80133b2 <__b2d+0x4a>
 80133f6:	ea44 030c 	orr.w	r3, r4, ip
 80133fa:	460a      	mov	r2, r1
 80133fc:	e7d9      	b.n	80133b2 <__b2d+0x4a>
 80133fe:	bf00      	nop
 8013400:	3ff00000 	.word	0x3ff00000

08013404 <__d2b>:
 8013404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013408:	460e      	mov	r6, r1
 801340a:	2101      	movs	r1, #1
 801340c:	ec59 8b10 	vmov	r8, r9, d0
 8013410:	4615      	mov	r5, r2
 8013412:	f7ff fcb5 	bl	8012d80 <_Balloc>
 8013416:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801341a:	4607      	mov	r7, r0
 801341c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013420:	bb34      	cbnz	r4, 8013470 <__d2b+0x6c>
 8013422:	9301      	str	r3, [sp, #4]
 8013424:	f1b8 0300 	subs.w	r3, r8, #0
 8013428:	d027      	beq.n	801347a <__d2b+0x76>
 801342a:	a802      	add	r0, sp, #8
 801342c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013430:	f7ff fd89 	bl	8012f46 <__lo0bits>
 8013434:	9900      	ldr	r1, [sp, #0]
 8013436:	b1f0      	cbz	r0, 8013476 <__d2b+0x72>
 8013438:	9a01      	ldr	r2, [sp, #4]
 801343a:	f1c0 0320 	rsb	r3, r0, #32
 801343e:	fa02 f303 	lsl.w	r3, r2, r3
 8013442:	430b      	orrs	r3, r1
 8013444:	40c2      	lsrs	r2, r0
 8013446:	617b      	str	r3, [r7, #20]
 8013448:	9201      	str	r2, [sp, #4]
 801344a:	9b01      	ldr	r3, [sp, #4]
 801344c:	61bb      	str	r3, [r7, #24]
 801344e:	2b00      	cmp	r3, #0
 8013450:	bf14      	ite	ne
 8013452:	2102      	movne	r1, #2
 8013454:	2101      	moveq	r1, #1
 8013456:	6139      	str	r1, [r7, #16]
 8013458:	b1c4      	cbz	r4, 801348c <__d2b+0x88>
 801345a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801345e:	4404      	add	r4, r0
 8013460:	6034      	str	r4, [r6, #0]
 8013462:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013466:	6028      	str	r0, [r5, #0]
 8013468:	4638      	mov	r0, r7
 801346a:	b003      	add	sp, #12
 801346c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013474:	e7d5      	b.n	8013422 <__d2b+0x1e>
 8013476:	6179      	str	r1, [r7, #20]
 8013478:	e7e7      	b.n	801344a <__d2b+0x46>
 801347a:	a801      	add	r0, sp, #4
 801347c:	f7ff fd63 	bl	8012f46 <__lo0bits>
 8013480:	9b01      	ldr	r3, [sp, #4]
 8013482:	617b      	str	r3, [r7, #20]
 8013484:	2101      	movs	r1, #1
 8013486:	6139      	str	r1, [r7, #16]
 8013488:	3020      	adds	r0, #32
 801348a:	e7e5      	b.n	8013458 <__d2b+0x54>
 801348c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013494:	6030      	str	r0, [r6, #0]
 8013496:	6918      	ldr	r0, [r3, #16]
 8013498:	f7ff fd36 	bl	8012f08 <__hi0bits>
 801349c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80134a0:	e7e1      	b.n	8013466 <__d2b+0x62>

080134a2 <__ratio>:
 80134a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a6:	4688      	mov	r8, r1
 80134a8:	4669      	mov	r1, sp
 80134aa:	4681      	mov	r9, r0
 80134ac:	f7ff ff5c 	bl	8013368 <__b2d>
 80134b0:	a901      	add	r1, sp, #4
 80134b2:	4640      	mov	r0, r8
 80134b4:	ec57 6b10 	vmov	r6, r7, d0
 80134b8:	ee10 4a10 	vmov	r4, s0
 80134bc:	f7ff ff54 	bl	8013368 <__b2d>
 80134c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80134c8:	eba3 0c02 	sub.w	ip, r3, r2
 80134cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80134d0:	1a9b      	subs	r3, r3, r2
 80134d2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80134d6:	ec51 0b10 	vmov	r0, r1, d0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	ee10 aa10 	vmov	sl, s0
 80134e0:	bfce      	itee	gt
 80134e2:	463a      	movgt	r2, r7
 80134e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80134e8:	460a      	movle	r2, r1
 80134ea:	463d      	mov	r5, r7
 80134ec:	468b      	mov	fp, r1
 80134ee:	bfcc      	ite	gt
 80134f0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80134f4:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80134f8:	ec45 4b17 	vmov	d7, r4, r5
 80134fc:	ec4b ab16 	vmov	d6, sl, fp
 8013500:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8013504:	b003      	add	sp, #12
 8013506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801350a <__copybits>:
 801350a:	3901      	subs	r1, #1
 801350c:	b510      	push	{r4, lr}
 801350e:	1149      	asrs	r1, r1, #5
 8013510:	6914      	ldr	r4, [r2, #16]
 8013512:	3101      	adds	r1, #1
 8013514:	f102 0314 	add.w	r3, r2, #20
 8013518:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801351c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013520:	42a3      	cmp	r3, r4
 8013522:	4602      	mov	r2, r0
 8013524:	d303      	bcc.n	801352e <__copybits+0x24>
 8013526:	2300      	movs	r3, #0
 8013528:	428a      	cmp	r2, r1
 801352a:	d305      	bcc.n	8013538 <__copybits+0x2e>
 801352c:	bd10      	pop	{r4, pc}
 801352e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013532:	f840 2b04 	str.w	r2, [r0], #4
 8013536:	e7f3      	b.n	8013520 <__copybits+0x16>
 8013538:	f842 3b04 	str.w	r3, [r2], #4
 801353c:	e7f4      	b.n	8013528 <__copybits+0x1e>

0801353e <__any_on>:
 801353e:	f100 0214 	add.w	r2, r0, #20
 8013542:	6900      	ldr	r0, [r0, #16]
 8013544:	114b      	asrs	r3, r1, #5
 8013546:	4298      	cmp	r0, r3
 8013548:	b510      	push	{r4, lr}
 801354a:	db11      	blt.n	8013570 <__any_on+0x32>
 801354c:	dd0a      	ble.n	8013564 <__any_on+0x26>
 801354e:	f011 011f 	ands.w	r1, r1, #31
 8013552:	d007      	beq.n	8013564 <__any_on+0x26>
 8013554:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013558:	fa24 f001 	lsr.w	r0, r4, r1
 801355c:	fa00 f101 	lsl.w	r1, r0, r1
 8013560:	428c      	cmp	r4, r1
 8013562:	d10b      	bne.n	801357c <__any_on+0x3e>
 8013564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013568:	4293      	cmp	r3, r2
 801356a:	d803      	bhi.n	8013574 <__any_on+0x36>
 801356c:	2000      	movs	r0, #0
 801356e:	bd10      	pop	{r4, pc}
 8013570:	4603      	mov	r3, r0
 8013572:	e7f7      	b.n	8013564 <__any_on+0x26>
 8013574:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013578:	2900      	cmp	r1, #0
 801357a:	d0f5      	beq.n	8013568 <__any_on+0x2a>
 801357c:	2001      	movs	r0, #1
 801357e:	e7f6      	b.n	801356e <__any_on+0x30>

08013580 <__ssputs_r>:
 8013580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013584:	688e      	ldr	r6, [r1, #8]
 8013586:	429e      	cmp	r6, r3
 8013588:	4682      	mov	sl, r0
 801358a:	460c      	mov	r4, r1
 801358c:	4690      	mov	r8, r2
 801358e:	4699      	mov	r9, r3
 8013590:	d837      	bhi.n	8013602 <__ssputs_r+0x82>
 8013592:	898a      	ldrh	r2, [r1, #12]
 8013594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013598:	d031      	beq.n	80135fe <__ssputs_r+0x7e>
 801359a:	6825      	ldr	r5, [r4, #0]
 801359c:	6909      	ldr	r1, [r1, #16]
 801359e:	1a6f      	subs	r7, r5, r1
 80135a0:	6965      	ldr	r5, [r4, #20]
 80135a2:	2302      	movs	r3, #2
 80135a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80135ac:	f109 0301 	add.w	r3, r9, #1
 80135b0:	443b      	add	r3, r7
 80135b2:	429d      	cmp	r5, r3
 80135b4:	bf38      	it	cc
 80135b6:	461d      	movcc	r5, r3
 80135b8:	0553      	lsls	r3, r2, #21
 80135ba:	d530      	bpl.n	801361e <__ssputs_r+0x9e>
 80135bc:	4629      	mov	r1, r5
 80135be:	f7fc f985 	bl	800f8cc <_malloc_r>
 80135c2:	4606      	mov	r6, r0
 80135c4:	b950      	cbnz	r0, 80135dc <__ssputs_r+0x5c>
 80135c6:	230c      	movs	r3, #12
 80135c8:	f8ca 3000 	str.w	r3, [sl]
 80135cc:	89a3      	ldrh	r3, [r4, #12]
 80135ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135d2:	81a3      	strh	r3, [r4, #12]
 80135d4:	f04f 30ff 	mov.w	r0, #4294967295
 80135d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135dc:	463a      	mov	r2, r7
 80135de:	6921      	ldr	r1, [r4, #16]
 80135e0:	f7fc f904 	bl	800f7ec <memcpy>
 80135e4:	89a3      	ldrh	r3, [r4, #12]
 80135e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80135ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135ee:	81a3      	strh	r3, [r4, #12]
 80135f0:	6126      	str	r6, [r4, #16]
 80135f2:	6165      	str	r5, [r4, #20]
 80135f4:	443e      	add	r6, r7
 80135f6:	1bed      	subs	r5, r5, r7
 80135f8:	6026      	str	r6, [r4, #0]
 80135fa:	60a5      	str	r5, [r4, #8]
 80135fc:	464e      	mov	r6, r9
 80135fe:	454e      	cmp	r6, r9
 8013600:	d900      	bls.n	8013604 <__ssputs_r+0x84>
 8013602:	464e      	mov	r6, r9
 8013604:	4632      	mov	r2, r6
 8013606:	4641      	mov	r1, r8
 8013608:	6820      	ldr	r0, [r4, #0]
 801360a:	f000 fe99 	bl	8014340 <memmove>
 801360e:	68a3      	ldr	r3, [r4, #8]
 8013610:	1b9b      	subs	r3, r3, r6
 8013612:	60a3      	str	r3, [r4, #8]
 8013614:	6823      	ldr	r3, [r4, #0]
 8013616:	441e      	add	r6, r3
 8013618:	6026      	str	r6, [r4, #0]
 801361a:	2000      	movs	r0, #0
 801361c:	e7dc      	b.n	80135d8 <__ssputs_r+0x58>
 801361e:	462a      	mov	r2, r5
 8013620:	f000 fea7 	bl	8014372 <_realloc_r>
 8013624:	4606      	mov	r6, r0
 8013626:	2800      	cmp	r0, #0
 8013628:	d1e2      	bne.n	80135f0 <__ssputs_r+0x70>
 801362a:	6921      	ldr	r1, [r4, #16]
 801362c:	4650      	mov	r0, sl
 801362e:	f7fc f8ff 	bl	800f830 <_free_r>
 8013632:	e7c8      	b.n	80135c6 <__ssputs_r+0x46>

08013634 <_svfiprintf_r>:
 8013634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013638:	461d      	mov	r5, r3
 801363a:	898b      	ldrh	r3, [r1, #12]
 801363c:	061f      	lsls	r7, r3, #24
 801363e:	b09d      	sub	sp, #116	; 0x74
 8013640:	4680      	mov	r8, r0
 8013642:	460c      	mov	r4, r1
 8013644:	4616      	mov	r6, r2
 8013646:	d50f      	bpl.n	8013668 <_svfiprintf_r+0x34>
 8013648:	690b      	ldr	r3, [r1, #16]
 801364a:	b96b      	cbnz	r3, 8013668 <_svfiprintf_r+0x34>
 801364c:	2140      	movs	r1, #64	; 0x40
 801364e:	f7fc f93d 	bl	800f8cc <_malloc_r>
 8013652:	6020      	str	r0, [r4, #0]
 8013654:	6120      	str	r0, [r4, #16]
 8013656:	b928      	cbnz	r0, 8013664 <_svfiprintf_r+0x30>
 8013658:	230c      	movs	r3, #12
 801365a:	f8c8 3000 	str.w	r3, [r8]
 801365e:	f04f 30ff 	mov.w	r0, #4294967295
 8013662:	e0c8      	b.n	80137f6 <_svfiprintf_r+0x1c2>
 8013664:	2340      	movs	r3, #64	; 0x40
 8013666:	6163      	str	r3, [r4, #20]
 8013668:	2300      	movs	r3, #0
 801366a:	9309      	str	r3, [sp, #36]	; 0x24
 801366c:	2320      	movs	r3, #32
 801366e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013672:	2330      	movs	r3, #48	; 0x30
 8013674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013678:	9503      	str	r5, [sp, #12]
 801367a:	f04f 0b01 	mov.w	fp, #1
 801367e:	4637      	mov	r7, r6
 8013680:	463d      	mov	r5, r7
 8013682:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013686:	b10b      	cbz	r3, 801368c <_svfiprintf_r+0x58>
 8013688:	2b25      	cmp	r3, #37	; 0x25
 801368a:	d13e      	bne.n	801370a <_svfiprintf_r+0xd6>
 801368c:	ebb7 0a06 	subs.w	sl, r7, r6
 8013690:	d00b      	beq.n	80136aa <_svfiprintf_r+0x76>
 8013692:	4653      	mov	r3, sl
 8013694:	4632      	mov	r2, r6
 8013696:	4621      	mov	r1, r4
 8013698:	4640      	mov	r0, r8
 801369a:	f7ff ff71 	bl	8013580 <__ssputs_r>
 801369e:	3001      	adds	r0, #1
 80136a0:	f000 80a4 	beq.w	80137ec <_svfiprintf_r+0x1b8>
 80136a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136a6:	4453      	add	r3, sl
 80136a8:	9309      	str	r3, [sp, #36]	; 0x24
 80136aa:	783b      	ldrb	r3, [r7, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f000 809d 	beq.w	80137ec <_svfiprintf_r+0x1b8>
 80136b2:	2300      	movs	r3, #0
 80136b4:	f04f 32ff 	mov.w	r2, #4294967295
 80136b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136bc:	9304      	str	r3, [sp, #16]
 80136be:	9307      	str	r3, [sp, #28]
 80136c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136c4:	931a      	str	r3, [sp, #104]	; 0x68
 80136c6:	462f      	mov	r7, r5
 80136c8:	2205      	movs	r2, #5
 80136ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80136ce:	4850      	ldr	r0, [pc, #320]	; (8013810 <_svfiprintf_r+0x1dc>)
 80136d0:	f7ec fdce 	bl	8000270 <memchr>
 80136d4:	9b04      	ldr	r3, [sp, #16]
 80136d6:	b9d0      	cbnz	r0, 801370e <_svfiprintf_r+0xda>
 80136d8:	06d9      	lsls	r1, r3, #27
 80136da:	bf44      	itt	mi
 80136dc:	2220      	movmi	r2, #32
 80136de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80136e2:	071a      	lsls	r2, r3, #28
 80136e4:	bf44      	itt	mi
 80136e6:	222b      	movmi	r2, #43	; 0x2b
 80136e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80136ec:	782a      	ldrb	r2, [r5, #0]
 80136ee:	2a2a      	cmp	r2, #42	; 0x2a
 80136f0:	d015      	beq.n	801371e <_svfiprintf_r+0xea>
 80136f2:	9a07      	ldr	r2, [sp, #28]
 80136f4:	462f      	mov	r7, r5
 80136f6:	2000      	movs	r0, #0
 80136f8:	250a      	movs	r5, #10
 80136fa:	4639      	mov	r1, r7
 80136fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013700:	3b30      	subs	r3, #48	; 0x30
 8013702:	2b09      	cmp	r3, #9
 8013704:	d94d      	bls.n	80137a2 <_svfiprintf_r+0x16e>
 8013706:	b1b8      	cbz	r0, 8013738 <_svfiprintf_r+0x104>
 8013708:	e00f      	b.n	801372a <_svfiprintf_r+0xf6>
 801370a:	462f      	mov	r7, r5
 801370c:	e7b8      	b.n	8013680 <_svfiprintf_r+0x4c>
 801370e:	4a40      	ldr	r2, [pc, #256]	; (8013810 <_svfiprintf_r+0x1dc>)
 8013710:	1a80      	subs	r0, r0, r2
 8013712:	fa0b f000 	lsl.w	r0, fp, r0
 8013716:	4318      	orrs	r0, r3
 8013718:	9004      	str	r0, [sp, #16]
 801371a:	463d      	mov	r5, r7
 801371c:	e7d3      	b.n	80136c6 <_svfiprintf_r+0x92>
 801371e:	9a03      	ldr	r2, [sp, #12]
 8013720:	1d11      	adds	r1, r2, #4
 8013722:	6812      	ldr	r2, [r2, #0]
 8013724:	9103      	str	r1, [sp, #12]
 8013726:	2a00      	cmp	r2, #0
 8013728:	db01      	blt.n	801372e <_svfiprintf_r+0xfa>
 801372a:	9207      	str	r2, [sp, #28]
 801372c:	e004      	b.n	8013738 <_svfiprintf_r+0x104>
 801372e:	4252      	negs	r2, r2
 8013730:	f043 0302 	orr.w	r3, r3, #2
 8013734:	9207      	str	r2, [sp, #28]
 8013736:	9304      	str	r3, [sp, #16]
 8013738:	783b      	ldrb	r3, [r7, #0]
 801373a:	2b2e      	cmp	r3, #46	; 0x2e
 801373c:	d10c      	bne.n	8013758 <_svfiprintf_r+0x124>
 801373e:	787b      	ldrb	r3, [r7, #1]
 8013740:	2b2a      	cmp	r3, #42	; 0x2a
 8013742:	d133      	bne.n	80137ac <_svfiprintf_r+0x178>
 8013744:	9b03      	ldr	r3, [sp, #12]
 8013746:	1d1a      	adds	r2, r3, #4
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	9203      	str	r2, [sp, #12]
 801374c:	2b00      	cmp	r3, #0
 801374e:	bfb8      	it	lt
 8013750:	f04f 33ff 	movlt.w	r3, #4294967295
 8013754:	3702      	adds	r7, #2
 8013756:	9305      	str	r3, [sp, #20]
 8013758:	4d2e      	ldr	r5, [pc, #184]	; (8013814 <_svfiprintf_r+0x1e0>)
 801375a:	7839      	ldrb	r1, [r7, #0]
 801375c:	2203      	movs	r2, #3
 801375e:	4628      	mov	r0, r5
 8013760:	f7ec fd86 	bl	8000270 <memchr>
 8013764:	b138      	cbz	r0, 8013776 <_svfiprintf_r+0x142>
 8013766:	2340      	movs	r3, #64	; 0x40
 8013768:	1b40      	subs	r0, r0, r5
 801376a:	fa03 f000 	lsl.w	r0, r3, r0
 801376e:	9b04      	ldr	r3, [sp, #16]
 8013770:	4303      	orrs	r3, r0
 8013772:	3701      	adds	r7, #1
 8013774:	9304      	str	r3, [sp, #16]
 8013776:	7839      	ldrb	r1, [r7, #0]
 8013778:	4827      	ldr	r0, [pc, #156]	; (8013818 <_svfiprintf_r+0x1e4>)
 801377a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801377e:	2206      	movs	r2, #6
 8013780:	1c7e      	adds	r6, r7, #1
 8013782:	f7ec fd75 	bl	8000270 <memchr>
 8013786:	2800      	cmp	r0, #0
 8013788:	d038      	beq.n	80137fc <_svfiprintf_r+0x1c8>
 801378a:	4b24      	ldr	r3, [pc, #144]	; (801381c <_svfiprintf_r+0x1e8>)
 801378c:	bb13      	cbnz	r3, 80137d4 <_svfiprintf_r+0x1a0>
 801378e:	9b03      	ldr	r3, [sp, #12]
 8013790:	3307      	adds	r3, #7
 8013792:	f023 0307 	bic.w	r3, r3, #7
 8013796:	3308      	adds	r3, #8
 8013798:	9303      	str	r3, [sp, #12]
 801379a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801379c:	444b      	add	r3, r9
 801379e:	9309      	str	r3, [sp, #36]	; 0x24
 80137a0:	e76d      	b.n	801367e <_svfiprintf_r+0x4a>
 80137a2:	fb05 3202 	mla	r2, r5, r2, r3
 80137a6:	2001      	movs	r0, #1
 80137a8:	460f      	mov	r7, r1
 80137aa:	e7a6      	b.n	80136fa <_svfiprintf_r+0xc6>
 80137ac:	2300      	movs	r3, #0
 80137ae:	3701      	adds	r7, #1
 80137b0:	9305      	str	r3, [sp, #20]
 80137b2:	4619      	mov	r1, r3
 80137b4:	250a      	movs	r5, #10
 80137b6:	4638      	mov	r0, r7
 80137b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137bc:	3a30      	subs	r2, #48	; 0x30
 80137be:	2a09      	cmp	r2, #9
 80137c0:	d903      	bls.n	80137ca <_svfiprintf_r+0x196>
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d0c8      	beq.n	8013758 <_svfiprintf_r+0x124>
 80137c6:	9105      	str	r1, [sp, #20]
 80137c8:	e7c6      	b.n	8013758 <_svfiprintf_r+0x124>
 80137ca:	fb05 2101 	mla	r1, r5, r1, r2
 80137ce:	2301      	movs	r3, #1
 80137d0:	4607      	mov	r7, r0
 80137d2:	e7f0      	b.n	80137b6 <_svfiprintf_r+0x182>
 80137d4:	ab03      	add	r3, sp, #12
 80137d6:	9300      	str	r3, [sp, #0]
 80137d8:	4622      	mov	r2, r4
 80137da:	4b11      	ldr	r3, [pc, #68]	; (8013820 <_svfiprintf_r+0x1ec>)
 80137dc:	a904      	add	r1, sp, #16
 80137de:	4640      	mov	r0, r8
 80137e0:	f7fc f956 	bl	800fa90 <_printf_float>
 80137e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80137e8:	4681      	mov	r9, r0
 80137ea:	d1d6      	bne.n	801379a <_svfiprintf_r+0x166>
 80137ec:	89a3      	ldrh	r3, [r4, #12]
 80137ee:	065b      	lsls	r3, r3, #25
 80137f0:	f53f af35 	bmi.w	801365e <_svfiprintf_r+0x2a>
 80137f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137f6:	b01d      	add	sp, #116	; 0x74
 80137f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137fc:	ab03      	add	r3, sp, #12
 80137fe:	9300      	str	r3, [sp, #0]
 8013800:	4622      	mov	r2, r4
 8013802:	4b07      	ldr	r3, [pc, #28]	; (8013820 <_svfiprintf_r+0x1ec>)
 8013804:	a904      	add	r1, sp, #16
 8013806:	4640      	mov	r0, r8
 8013808:	f7fc fbe4 	bl	800ffd4 <_printf_i>
 801380c:	e7ea      	b.n	80137e4 <_svfiprintf_r+0x1b0>
 801380e:	bf00      	nop
 8013810:	08014a6c 	.word	0x08014a6c
 8013814:	08014a72 	.word	0x08014a72
 8013818:	08014a76 	.word	0x08014a76
 801381c:	0800fa91 	.word	0x0800fa91
 8013820:	08013581 	.word	0x08013581

08013824 <_sungetc_r>:
 8013824:	b538      	push	{r3, r4, r5, lr}
 8013826:	1c4b      	adds	r3, r1, #1
 8013828:	4614      	mov	r4, r2
 801382a:	d103      	bne.n	8013834 <_sungetc_r+0x10>
 801382c:	f04f 35ff 	mov.w	r5, #4294967295
 8013830:	4628      	mov	r0, r5
 8013832:	bd38      	pop	{r3, r4, r5, pc}
 8013834:	8993      	ldrh	r3, [r2, #12]
 8013836:	f023 0320 	bic.w	r3, r3, #32
 801383a:	8193      	strh	r3, [r2, #12]
 801383c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801383e:	6852      	ldr	r2, [r2, #4]
 8013840:	b2cd      	uxtb	r5, r1
 8013842:	b18b      	cbz	r3, 8013868 <_sungetc_r+0x44>
 8013844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013846:	4293      	cmp	r3, r2
 8013848:	dd08      	ble.n	801385c <_sungetc_r+0x38>
 801384a:	6823      	ldr	r3, [r4, #0]
 801384c:	1e5a      	subs	r2, r3, #1
 801384e:	6022      	str	r2, [r4, #0]
 8013850:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013854:	6863      	ldr	r3, [r4, #4]
 8013856:	3301      	adds	r3, #1
 8013858:	6063      	str	r3, [r4, #4]
 801385a:	e7e9      	b.n	8013830 <_sungetc_r+0xc>
 801385c:	4621      	mov	r1, r4
 801385e:	f000 fd05 	bl	801426c <__submore>
 8013862:	2800      	cmp	r0, #0
 8013864:	d0f1      	beq.n	801384a <_sungetc_r+0x26>
 8013866:	e7e1      	b.n	801382c <_sungetc_r+0x8>
 8013868:	6921      	ldr	r1, [r4, #16]
 801386a:	6823      	ldr	r3, [r4, #0]
 801386c:	b151      	cbz	r1, 8013884 <_sungetc_r+0x60>
 801386e:	4299      	cmp	r1, r3
 8013870:	d208      	bcs.n	8013884 <_sungetc_r+0x60>
 8013872:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013876:	42a9      	cmp	r1, r5
 8013878:	d104      	bne.n	8013884 <_sungetc_r+0x60>
 801387a:	3b01      	subs	r3, #1
 801387c:	3201      	adds	r2, #1
 801387e:	6023      	str	r3, [r4, #0]
 8013880:	6062      	str	r2, [r4, #4]
 8013882:	e7d5      	b.n	8013830 <_sungetc_r+0xc>
 8013884:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801388c:	6363      	str	r3, [r4, #52]	; 0x34
 801388e:	2303      	movs	r3, #3
 8013890:	63a3      	str	r3, [r4, #56]	; 0x38
 8013892:	4623      	mov	r3, r4
 8013894:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013898:	6023      	str	r3, [r4, #0]
 801389a:	2301      	movs	r3, #1
 801389c:	e7dc      	b.n	8013858 <_sungetc_r+0x34>

0801389e <__ssrefill_r>:
 801389e:	b510      	push	{r4, lr}
 80138a0:	460c      	mov	r4, r1
 80138a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80138a4:	b169      	cbz	r1, 80138c2 <__ssrefill_r+0x24>
 80138a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138aa:	4299      	cmp	r1, r3
 80138ac:	d001      	beq.n	80138b2 <__ssrefill_r+0x14>
 80138ae:	f7fb ffbf 	bl	800f830 <_free_r>
 80138b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80138b4:	6063      	str	r3, [r4, #4]
 80138b6:	2000      	movs	r0, #0
 80138b8:	6360      	str	r0, [r4, #52]	; 0x34
 80138ba:	b113      	cbz	r3, 80138c2 <__ssrefill_r+0x24>
 80138bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80138be:	6023      	str	r3, [r4, #0]
 80138c0:	bd10      	pop	{r4, pc}
 80138c2:	6923      	ldr	r3, [r4, #16]
 80138c4:	6023      	str	r3, [r4, #0]
 80138c6:	2300      	movs	r3, #0
 80138c8:	6063      	str	r3, [r4, #4]
 80138ca:	89a3      	ldrh	r3, [r4, #12]
 80138cc:	f043 0320 	orr.w	r3, r3, #32
 80138d0:	81a3      	strh	r3, [r4, #12]
 80138d2:	f04f 30ff 	mov.w	r0, #4294967295
 80138d6:	e7f3      	b.n	80138c0 <__ssrefill_r+0x22>

080138d8 <__ssvfiscanf_r>:
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80138e0:	460c      	mov	r4, r1
 80138e2:	2100      	movs	r1, #0
 80138e4:	9144      	str	r1, [sp, #272]	; 0x110
 80138e6:	9145      	str	r1, [sp, #276]	; 0x114
 80138e8:	499f      	ldr	r1, [pc, #636]	; (8013b68 <__ssvfiscanf_r+0x290>)
 80138ea:	91a0      	str	r1, [sp, #640]	; 0x280
 80138ec:	f10d 0804 	add.w	r8, sp, #4
 80138f0:	499e      	ldr	r1, [pc, #632]	; (8013b6c <__ssvfiscanf_r+0x294>)
 80138f2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8013b70 <__ssvfiscanf_r+0x298>
 80138f6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80138fa:	4606      	mov	r6, r0
 80138fc:	4692      	mov	sl, r2
 80138fe:	91a1      	str	r1, [sp, #644]	; 0x284
 8013900:	9300      	str	r3, [sp, #0]
 8013902:	270a      	movs	r7, #10
 8013904:	f89a 3000 	ldrb.w	r3, [sl]
 8013908:	2b00      	cmp	r3, #0
 801390a:	f000 812a 	beq.w	8013b62 <__ssvfiscanf_r+0x28a>
 801390e:	4655      	mov	r5, sl
 8013910:	f7ff f98e 	bl	8012c30 <__locale_ctype_ptr>
 8013914:	f815 bb01 	ldrb.w	fp, [r5], #1
 8013918:	4458      	add	r0, fp
 801391a:	7843      	ldrb	r3, [r0, #1]
 801391c:	f013 0308 	ands.w	r3, r3, #8
 8013920:	d01c      	beq.n	801395c <__ssvfiscanf_r+0x84>
 8013922:	6863      	ldr	r3, [r4, #4]
 8013924:	2b00      	cmp	r3, #0
 8013926:	dd12      	ble.n	801394e <__ssvfiscanf_r+0x76>
 8013928:	f7ff f982 	bl	8012c30 <__locale_ctype_ptr>
 801392c:	6823      	ldr	r3, [r4, #0]
 801392e:	781a      	ldrb	r2, [r3, #0]
 8013930:	4410      	add	r0, r2
 8013932:	7842      	ldrb	r2, [r0, #1]
 8013934:	0712      	lsls	r2, r2, #28
 8013936:	d401      	bmi.n	801393c <__ssvfiscanf_r+0x64>
 8013938:	46aa      	mov	sl, r5
 801393a:	e7e3      	b.n	8013904 <__ssvfiscanf_r+0x2c>
 801393c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801393e:	3201      	adds	r2, #1
 8013940:	9245      	str	r2, [sp, #276]	; 0x114
 8013942:	6862      	ldr	r2, [r4, #4]
 8013944:	3301      	adds	r3, #1
 8013946:	3a01      	subs	r2, #1
 8013948:	6062      	str	r2, [r4, #4]
 801394a:	6023      	str	r3, [r4, #0]
 801394c:	e7e9      	b.n	8013922 <__ssvfiscanf_r+0x4a>
 801394e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013950:	4621      	mov	r1, r4
 8013952:	4630      	mov	r0, r6
 8013954:	4798      	blx	r3
 8013956:	2800      	cmp	r0, #0
 8013958:	d0e6      	beq.n	8013928 <__ssvfiscanf_r+0x50>
 801395a:	e7ed      	b.n	8013938 <__ssvfiscanf_r+0x60>
 801395c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8013960:	f040 8082 	bne.w	8013a68 <__ssvfiscanf_r+0x190>
 8013964:	9343      	str	r3, [sp, #268]	; 0x10c
 8013966:	9341      	str	r3, [sp, #260]	; 0x104
 8013968:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801396c:	2b2a      	cmp	r3, #42	; 0x2a
 801396e:	d103      	bne.n	8013978 <__ssvfiscanf_r+0xa0>
 8013970:	2310      	movs	r3, #16
 8013972:	9341      	str	r3, [sp, #260]	; 0x104
 8013974:	f10a 0502 	add.w	r5, sl, #2
 8013978:	46aa      	mov	sl, r5
 801397a:	f815 1b01 	ldrb.w	r1, [r5], #1
 801397e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013982:	2a09      	cmp	r2, #9
 8013984:	d922      	bls.n	80139cc <__ssvfiscanf_r+0xf4>
 8013986:	2203      	movs	r2, #3
 8013988:	4879      	ldr	r0, [pc, #484]	; (8013b70 <__ssvfiscanf_r+0x298>)
 801398a:	f7ec fc71 	bl	8000270 <memchr>
 801398e:	b138      	cbz	r0, 80139a0 <__ssvfiscanf_r+0xc8>
 8013990:	eba0 0309 	sub.w	r3, r0, r9
 8013994:	2001      	movs	r0, #1
 8013996:	4098      	lsls	r0, r3
 8013998:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801399a:	4318      	orrs	r0, r3
 801399c:	9041      	str	r0, [sp, #260]	; 0x104
 801399e:	46aa      	mov	sl, r5
 80139a0:	f89a 3000 	ldrb.w	r3, [sl]
 80139a4:	2b67      	cmp	r3, #103	; 0x67
 80139a6:	f10a 0501 	add.w	r5, sl, #1
 80139aa:	d82b      	bhi.n	8013a04 <__ssvfiscanf_r+0x12c>
 80139ac:	2b65      	cmp	r3, #101	; 0x65
 80139ae:	f080 809f 	bcs.w	8013af0 <__ssvfiscanf_r+0x218>
 80139b2:	2b47      	cmp	r3, #71	; 0x47
 80139b4:	d810      	bhi.n	80139d8 <__ssvfiscanf_r+0x100>
 80139b6:	2b45      	cmp	r3, #69	; 0x45
 80139b8:	f080 809a 	bcs.w	8013af0 <__ssvfiscanf_r+0x218>
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d06c      	beq.n	8013a9a <__ssvfiscanf_r+0x1c2>
 80139c0:	2b25      	cmp	r3, #37	; 0x25
 80139c2:	d051      	beq.n	8013a68 <__ssvfiscanf_r+0x190>
 80139c4:	2303      	movs	r3, #3
 80139c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80139c8:	9742      	str	r7, [sp, #264]	; 0x108
 80139ca:	e027      	b.n	8013a1c <__ssvfiscanf_r+0x144>
 80139cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80139ce:	fb07 1303 	mla	r3, r7, r3, r1
 80139d2:	3b30      	subs	r3, #48	; 0x30
 80139d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80139d6:	e7cf      	b.n	8013978 <__ssvfiscanf_r+0xa0>
 80139d8:	2b5b      	cmp	r3, #91	; 0x5b
 80139da:	d06a      	beq.n	8013ab2 <__ssvfiscanf_r+0x1da>
 80139dc:	d80c      	bhi.n	80139f8 <__ssvfiscanf_r+0x120>
 80139de:	2b58      	cmp	r3, #88	; 0x58
 80139e0:	d1f0      	bne.n	80139c4 <__ssvfiscanf_r+0xec>
 80139e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80139e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80139e8:	9241      	str	r2, [sp, #260]	; 0x104
 80139ea:	2210      	movs	r2, #16
 80139ec:	9242      	str	r2, [sp, #264]	; 0x108
 80139ee:	2b6e      	cmp	r3, #110	; 0x6e
 80139f0:	bf8c      	ite	hi
 80139f2:	2304      	movhi	r3, #4
 80139f4:	2303      	movls	r3, #3
 80139f6:	e010      	b.n	8013a1a <__ssvfiscanf_r+0x142>
 80139f8:	2b63      	cmp	r3, #99	; 0x63
 80139fa:	d065      	beq.n	8013ac8 <__ssvfiscanf_r+0x1f0>
 80139fc:	2b64      	cmp	r3, #100	; 0x64
 80139fe:	d1e1      	bne.n	80139c4 <__ssvfiscanf_r+0xec>
 8013a00:	9742      	str	r7, [sp, #264]	; 0x108
 8013a02:	e7f4      	b.n	80139ee <__ssvfiscanf_r+0x116>
 8013a04:	2b70      	cmp	r3, #112	; 0x70
 8013a06:	d04b      	beq.n	8013aa0 <__ssvfiscanf_r+0x1c8>
 8013a08:	d826      	bhi.n	8013a58 <__ssvfiscanf_r+0x180>
 8013a0a:	2b6e      	cmp	r3, #110	; 0x6e
 8013a0c:	d062      	beq.n	8013ad4 <__ssvfiscanf_r+0x1fc>
 8013a0e:	d84c      	bhi.n	8013aaa <__ssvfiscanf_r+0x1d2>
 8013a10:	2b69      	cmp	r3, #105	; 0x69
 8013a12:	d1d7      	bne.n	80139c4 <__ssvfiscanf_r+0xec>
 8013a14:	2300      	movs	r3, #0
 8013a16:	9342      	str	r3, [sp, #264]	; 0x108
 8013a18:	2303      	movs	r3, #3
 8013a1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8013a1c:	6863      	ldr	r3, [r4, #4]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	dd68      	ble.n	8013af4 <__ssvfiscanf_r+0x21c>
 8013a22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013a24:	0659      	lsls	r1, r3, #25
 8013a26:	d407      	bmi.n	8013a38 <__ssvfiscanf_r+0x160>
 8013a28:	f7ff f902 	bl	8012c30 <__locale_ctype_ptr>
 8013a2c:	6823      	ldr	r3, [r4, #0]
 8013a2e:	781a      	ldrb	r2, [r3, #0]
 8013a30:	4410      	add	r0, r2
 8013a32:	7842      	ldrb	r2, [r0, #1]
 8013a34:	0712      	lsls	r2, r2, #28
 8013a36:	d464      	bmi.n	8013b02 <__ssvfiscanf_r+0x22a>
 8013a38:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013a3a:	2b02      	cmp	r3, #2
 8013a3c:	dc73      	bgt.n	8013b26 <__ssvfiscanf_r+0x24e>
 8013a3e:	466b      	mov	r3, sp
 8013a40:	4622      	mov	r2, r4
 8013a42:	a941      	add	r1, sp, #260	; 0x104
 8013a44:	4630      	mov	r0, r6
 8013a46:	f000 f9d7 	bl	8013df8 <_scanf_chars>
 8013a4a:	2801      	cmp	r0, #1
 8013a4c:	f000 8089 	beq.w	8013b62 <__ssvfiscanf_r+0x28a>
 8013a50:	2802      	cmp	r0, #2
 8013a52:	f47f af71 	bne.w	8013938 <__ssvfiscanf_r+0x60>
 8013a56:	e01d      	b.n	8013a94 <__ssvfiscanf_r+0x1bc>
 8013a58:	2b75      	cmp	r3, #117	; 0x75
 8013a5a:	d0d1      	beq.n	8013a00 <__ssvfiscanf_r+0x128>
 8013a5c:	2b78      	cmp	r3, #120	; 0x78
 8013a5e:	d0c0      	beq.n	80139e2 <__ssvfiscanf_r+0x10a>
 8013a60:	2b73      	cmp	r3, #115	; 0x73
 8013a62:	d1af      	bne.n	80139c4 <__ssvfiscanf_r+0xec>
 8013a64:	2302      	movs	r3, #2
 8013a66:	e7d8      	b.n	8013a1a <__ssvfiscanf_r+0x142>
 8013a68:	6863      	ldr	r3, [r4, #4]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	dd0c      	ble.n	8013a88 <__ssvfiscanf_r+0x1b0>
 8013a6e:	6823      	ldr	r3, [r4, #0]
 8013a70:	781a      	ldrb	r2, [r3, #0]
 8013a72:	455a      	cmp	r2, fp
 8013a74:	d175      	bne.n	8013b62 <__ssvfiscanf_r+0x28a>
 8013a76:	3301      	adds	r3, #1
 8013a78:	6862      	ldr	r2, [r4, #4]
 8013a7a:	6023      	str	r3, [r4, #0]
 8013a7c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013a7e:	3a01      	subs	r2, #1
 8013a80:	3301      	adds	r3, #1
 8013a82:	6062      	str	r2, [r4, #4]
 8013a84:	9345      	str	r3, [sp, #276]	; 0x114
 8013a86:	e757      	b.n	8013938 <__ssvfiscanf_r+0x60>
 8013a88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013a8a:	4621      	mov	r1, r4
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	4798      	blx	r3
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d0ec      	beq.n	8013a6e <__ssvfiscanf_r+0x196>
 8013a94:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013a96:	2800      	cmp	r0, #0
 8013a98:	d159      	bne.n	8013b4e <__ssvfiscanf_r+0x276>
 8013a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a9e:	e05c      	b.n	8013b5a <__ssvfiscanf_r+0x282>
 8013aa0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013aa2:	f042 0220 	orr.w	r2, r2, #32
 8013aa6:	9241      	str	r2, [sp, #260]	; 0x104
 8013aa8:	e79b      	b.n	80139e2 <__ssvfiscanf_r+0x10a>
 8013aaa:	2308      	movs	r3, #8
 8013aac:	9342      	str	r3, [sp, #264]	; 0x108
 8013aae:	2304      	movs	r3, #4
 8013ab0:	e7b3      	b.n	8013a1a <__ssvfiscanf_r+0x142>
 8013ab2:	4629      	mov	r1, r5
 8013ab4:	4640      	mov	r0, r8
 8013ab6:	f000 fb09 	bl	80140cc <__sccl>
 8013aba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ac0:	9341      	str	r3, [sp, #260]	; 0x104
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	e7a8      	b.n	8013a1a <__ssvfiscanf_r+0x142>
 8013ac8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ace:	9341      	str	r3, [sp, #260]	; 0x104
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	e7a2      	b.n	8013a1a <__ssvfiscanf_r+0x142>
 8013ad4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013ad6:	06c3      	lsls	r3, r0, #27
 8013ad8:	f53f af2e 	bmi.w	8013938 <__ssvfiscanf_r+0x60>
 8013adc:	9b00      	ldr	r3, [sp, #0]
 8013ade:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013ae0:	1d19      	adds	r1, r3, #4
 8013ae2:	9100      	str	r1, [sp, #0]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	07c0      	lsls	r0, r0, #31
 8013ae8:	bf4c      	ite	mi
 8013aea:	801a      	strhmi	r2, [r3, #0]
 8013aec:	601a      	strpl	r2, [r3, #0]
 8013aee:	e723      	b.n	8013938 <__ssvfiscanf_r+0x60>
 8013af0:	2305      	movs	r3, #5
 8013af2:	e792      	b.n	8013a1a <__ssvfiscanf_r+0x142>
 8013af4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013af6:	4621      	mov	r1, r4
 8013af8:	4630      	mov	r0, r6
 8013afa:	4798      	blx	r3
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d090      	beq.n	8013a22 <__ssvfiscanf_r+0x14a>
 8013b00:	e7c8      	b.n	8013a94 <__ssvfiscanf_r+0x1bc>
 8013b02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013b04:	3201      	adds	r2, #1
 8013b06:	9245      	str	r2, [sp, #276]	; 0x114
 8013b08:	6862      	ldr	r2, [r4, #4]
 8013b0a:	3a01      	subs	r2, #1
 8013b0c:	2a00      	cmp	r2, #0
 8013b0e:	6062      	str	r2, [r4, #4]
 8013b10:	dd02      	ble.n	8013b18 <__ssvfiscanf_r+0x240>
 8013b12:	3301      	adds	r3, #1
 8013b14:	6023      	str	r3, [r4, #0]
 8013b16:	e787      	b.n	8013a28 <__ssvfiscanf_r+0x150>
 8013b18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013b1a:	4621      	mov	r1, r4
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	4798      	blx	r3
 8013b20:	2800      	cmp	r0, #0
 8013b22:	d081      	beq.n	8013a28 <__ssvfiscanf_r+0x150>
 8013b24:	e7b6      	b.n	8013a94 <__ssvfiscanf_r+0x1bc>
 8013b26:	2b04      	cmp	r3, #4
 8013b28:	dc06      	bgt.n	8013b38 <__ssvfiscanf_r+0x260>
 8013b2a:	466b      	mov	r3, sp
 8013b2c:	4622      	mov	r2, r4
 8013b2e:	a941      	add	r1, sp, #260	; 0x104
 8013b30:	4630      	mov	r0, r6
 8013b32:	f000 f9c5 	bl	8013ec0 <_scanf_i>
 8013b36:	e788      	b.n	8013a4a <__ssvfiscanf_r+0x172>
 8013b38:	4b0e      	ldr	r3, [pc, #56]	; (8013b74 <__ssvfiscanf_r+0x29c>)
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f43f aefc 	beq.w	8013938 <__ssvfiscanf_r+0x60>
 8013b40:	466b      	mov	r3, sp
 8013b42:	4622      	mov	r2, r4
 8013b44:	a941      	add	r1, sp, #260	; 0x104
 8013b46:	4630      	mov	r0, r6
 8013b48:	f7fc fb56 	bl	80101f8 <_scanf_float>
 8013b4c:	e77d      	b.n	8013a4a <__ssvfiscanf_r+0x172>
 8013b4e:	89a3      	ldrh	r3, [r4, #12]
 8013b50:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013b54:	bf18      	it	ne
 8013b56:	f04f 30ff 	movne.w	r0, #4294967295
 8013b5a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8013b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b62:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013b64:	e7f9      	b.n	8013b5a <__ssvfiscanf_r+0x282>
 8013b66:	bf00      	nop
 8013b68:	08013825 	.word	0x08013825
 8013b6c:	0801389f 	.word	0x0801389f
 8013b70:	08014a72 	.word	0x08014a72
 8013b74:	080101f9 	.word	0x080101f9

08013b78 <__sfputc_r>:
 8013b78:	6893      	ldr	r3, [r2, #8]
 8013b7a:	3b01      	subs	r3, #1
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	b410      	push	{r4}
 8013b80:	6093      	str	r3, [r2, #8]
 8013b82:	da08      	bge.n	8013b96 <__sfputc_r+0x1e>
 8013b84:	6994      	ldr	r4, [r2, #24]
 8013b86:	42a3      	cmp	r3, r4
 8013b88:	db01      	blt.n	8013b8e <__sfputc_r+0x16>
 8013b8a:	290a      	cmp	r1, #10
 8013b8c:	d103      	bne.n	8013b96 <__sfputc_r+0x1e>
 8013b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b92:	f7fd bcef 	b.w	8011574 <__swbuf_r>
 8013b96:	6813      	ldr	r3, [r2, #0]
 8013b98:	1c58      	adds	r0, r3, #1
 8013b9a:	6010      	str	r0, [r2, #0]
 8013b9c:	7019      	strb	r1, [r3, #0]
 8013b9e:	4608      	mov	r0, r1
 8013ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ba4:	4770      	bx	lr

08013ba6 <__sfputs_r>:
 8013ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ba8:	4606      	mov	r6, r0
 8013baa:	460f      	mov	r7, r1
 8013bac:	4614      	mov	r4, r2
 8013bae:	18d5      	adds	r5, r2, r3
 8013bb0:	42ac      	cmp	r4, r5
 8013bb2:	d101      	bne.n	8013bb8 <__sfputs_r+0x12>
 8013bb4:	2000      	movs	r0, #0
 8013bb6:	e007      	b.n	8013bc8 <__sfputs_r+0x22>
 8013bb8:	463a      	mov	r2, r7
 8013bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bbe:	4630      	mov	r0, r6
 8013bc0:	f7ff ffda 	bl	8013b78 <__sfputc_r>
 8013bc4:	1c43      	adds	r3, r0, #1
 8013bc6:	d1f3      	bne.n	8013bb0 <__sfputs_r+0xa>
 8013bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013bcc <_vfiprintf_r>:
 8013bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd0:	460c      	mov	r4, r1
 8013bd2:	b09d      	sub	sp, #116	; 0x74
 8013bd4:	4617      	mov	r7, r2
 8013bd6:	461d      	mov	r5, r3
 8013bd8:	4606      	mov	r6, r0
 8013bda:	b118      	cbz	r0, 8013be4 <_vfiprintf_r+0x18>
 8013bdc:	6983      	ldr	r3, [r0, #24]
 8013bde:	b90b      	cbnz	r3, 8013be4 <_vfiprintf_r+0x18>
 8013be0:	f7fe fc72 	bl	80124c8 <__sinit>
 8013be4:	4b7c      	ldr	r3, [pc, #496]	; (8013dd8 <_vfiprintf_r+0x20c>)
 8013be6:	429c      	cmp	r4, r3
 8013be8:	d158      	bne.n	8013c9c <_vfiprintf_r+0xd0>
 8013bea:	6874      	ldr	r4, [r6, #4]
 8013bec:	89a3      	ldrh	r3, [r4, #12]
 8013bee:	0718      	lsls	r0, r3, #28
 8013bf0:	d55e      	bpl.n	8013cb0 <_vfiprintf_r+0xe4>
 8013bf2:	6923      	ldr	r3, [r4, #16]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d05b      	beq.n	8013cb0 <_vfiprintf_r+0xe4>
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8013bfc:	2320      	movs	r3, #32
 8013bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c02:	2330      	movs	r3, #48	; 0x30
 8013c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c08:	9503      	str	r5, [sp, #12]
 8013c0a:	f04f 0b01 	mov.w	fp, #1
 8013c0e:	46b8      	mov	r8, r7
 8013c10:	4645      	mov	r5, r8
 8013c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013c16:	b10b      	cbz	r3, 8013c1c <_vfiprintf_r+0x50>
 8013c18:	2b25      	cmp	r3, #37	; 0x25
 8013c1a:	d154      	bne.n	8013cc6 <_vfiprintf_r+0xfa>
 8013c1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8013c20:	d00b      	beq.n	8013c3a <_vfiprintf_r+0x6e>
 8013c22:	4653      	mov	r3, sl
 8013c24:	463a      	mov	r2, r7
 8013c26:	4621      	mov	r1, r4
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f7ff ffbc 	bl	8013ba6 <__sfputs_r>
 8013c2e:	3001      	adds	r0, #1
 8013c30:	f000 80c2 	beq.w	8013db8 <_vfiprintf_r+0x1ec>
 8013c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c36:	4453      	add	r3, sl
 8013c38:	9309      	str	r3, [sp, #36]	; 0x24
 8013c3a:	f898 3000 	ldrb.w	r3, [r8]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	f000 80ba 	beq.w	8013db8 <_vfiprintf_r+0x1ec>
 8013c44:	2300      	movs	r3, #0
 8013c46:	f04f 32ff 	mov.w	r2, #4294967295
 8013c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c4e:	9304      	str	r3, [sp, #16]
 8013c50:	9307      	str	r3, [sp, #28]
 8013c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c56:	931a      	str	r3, [sp, #104]	; 0x68
 8013c58:	46a8      	mov	r8, r5
 8013c5a:	2205      	movs	r2, #5
 8013c5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013c60:	485e      	ldr	r0, [pc, #376]	; (8013ddc <_vfiprintf_r+0x210>)
 8013c62:	f7ec fb05 	bl	8000270 <memchr>
 8013c66:	9b04      	ldr	r3, [sp, #16]
 8013c68:	bb78      	cbnz	r0, 8013cca <_vfiprintf_r+0xfe>
 8013c6a:	06d9      	lsls	r1, r3, #27
 8013c6c:	bf44      	itt	mi
 8013c6e:	2220      	movmi	r2, #32
 8013c70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c74:	071a      	lsls	r2, r3, #28
 8013c76:	bf44      	itt	mi
 8013c78:	222b      	movmi	r2, #43	; 0x2b
 8013c7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c7e:	782a      	ldrb	r2, [r5, #0]
 8013c80:	2a2a      	cmp	r2, #42	; 0x2a
 8013c82:	d02a      	beq.n	8013cda <_vfiprintf_r+0x10e>
 8013c84:	9a07      	ldr	r2, [sp, #28]
 8013c86:	46a8      	mov	r8, r5
 8013c88:	2000      	movs	r0, #0
 8013c8a:	250a      	movs	r5, #10
 8013c8c:	4641      	mov	r1, r8
 8013c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c92:	3b30      	subs	r3, #48	; 0x30
 8013c94:	2b09      	cmp	r3, #9
 8013c96:	d969      	bls.n	8013d6c <_vfiprintf_r+0x1a0>
 8013c98:	b360      	cbz	r0, 8013cf4 <_vfiprintf_r+0x128>
 8013c9a:	e024      	b.n	8013ce6 <_vfiprintf_r+0x11a>
 8013c9c:	4b50      	ldr	r3, [pc, #320]	; (8013de0 <_vfiprintf_r+0x214>)
 8013c9e:	429c      	cmp	r4, r3
 8013ca0:	d101      	bne.n	8013ca6 <_vfiprintf_r+0xda>
 8013ca2:	68b4      	ldr	r4, [r6, #8]
 8013ca4:	e7a2      	b.n	8013bec <_vfiprintf_r+0x20>
 8013ca6:	4b4f      	ldr	r3, [pc, #316]	; (8013de4 <_vfiprintf_r+0x218>)
 8013ca8:	429c      	cmp	r4, r3
 8013caa:	bf08      	it	eq
 8013cac:	68f4      	ldreq	r4, [r6, #12]
 8013cae:	e79d      	b.n	8013bec <_vfiprintf_r+0x20>
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f7fd fcc2 	bl	801163c <__swsetup_r>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	d09d      	beq.n	8013bf8 <_vfiprintf_r+0x2c>
 8013cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc0:	b01d      	add	sp, #116	; 0x74
 8013cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc6:	46a8      	mov	r8, r5
 8013cc8:	e7a2      	b.n	8013c10 <_vfiprintf_r+0x44>
 8013cca:	4a44      	ldr	r2, [pc, #272]	; (8013ddc <_vfiprintf_r+0x210>)
 8013ccc:	1a80      	subs	r0, r0, r2
 8013cce:	fa0b f000 	lsl.w	r0, fp, r0
 8013cd2:	4318      	orrs	r0, r3
 8013cd4:	9004      	str	r0, [sp, #16]
 8013cd6:	4645      	mov	r5, r8
 8013cd8:	e7be      	b.n	8013c58 <_vfiprintf_r+0x8c>
 8013cda:	9a03      	ldr	r2, [sp, #12]
 8013cdc:	1d11      	adds	r1, r2, #4
 8013cde:	6812      	ldr	r2, [r2, #0]
 8013ce0:	9103      	str	r1, [sp, #12]
 8013ce2:	2a00      	cmp	r2, #0
 8013ce4:	db01      	blt.n	8013cea <_vfiprintf_r+0x11e>
 8013ce6:	9207      	str	r2, [sp, #28]
 8013ce8:	e004      	b.n	8013cf4 <_vfiprintf_r+0x128>
 8013cea:	4252      	negs	r2, r2
 8013cec:	f043 0302 	orr.w	r3, r3, #2
 8013cf0:	9207      	str	r2, [sp, #28]
 8013cf2:	9304      	str	r3, [sp, #16]
 8013cf4:	f898 3000 	ldrb.w	r3, [r8]
 8013cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8013cfa:	d10e      	bne.n	8013d1a <_vfiprintf_r+0x14e>
 8013cfc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013d00:	2b2a      	cmp	r3, #42	; 0x2a
 8013d02:	d138      	bne.n	8013d76 <_vfiprintf_r+0x1aa>
 8013d04:	9b03      	ldr	r3, [sp, #12]
 8013d06:	1d1a      	adds	r2, r3, #4
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	9203      	str	r2, [sp, #12]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	bfb8      	it	lt
 8013d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d14:	f108 0802 	add.w	r8, r8, #2
 8013d18:	9305      	str	r3, [sp, #20]
 8013d1a:	4d33      	ldr	r5, [pc, #204]	; (8013de8 <_vfiprintf_r+0x21c>)
 8013d1c:	f898 1000 	ldrb.w	r1, [r8]
 8013d20:	2203      	movs	r2, #3
 8013d22:	4628      	mov	r0, r5
 8013d24:	f7ec faa4 	bl	8000270 <memchr>
 8013d28:	b140      	cbz	r0, 8013d3c <_vfiprintf_r+0x170>
 8013d2a:	2340      	movs	r3, #64	; 0x40
 8013d2c:	1b40      	subs	r0, r0, r5
 8013d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8013d32:	9b04      	ldr	r3, [sp, #16]
 8013d34:	4303      	orrs	r3, r0
 8013d36:	f108 0801 	add.w	r8, r8, #1
 8013d3a:	9304      	str	r3, [sp, #16]
 8013d3c:	f898 1000 	ldrb.w	r1, [r8]
 8013d40:	482a      	ldr	r0, [pc, #168]	; (8013dec <_vfiprintf_r+0x220>)
 8013d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d46:	2206      	movs	r2, #6
 8013d48:	f108 0701 	add.w	r7, r8, #1
 8013d4c:	f7ec fa90 	bl	8000270 <memchr>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	d037      	beq.n	8013dc4 <_vfiprintf_r+0x1f8>
 8013d54:	4b26      	ldr	r3, [pc, #152]	; (8013df0 <_vfiprintf_r+0x224>)
 8013d56:	bb1b      	cbnz	r3, 8013da0 <_vfiprintf_r+0x1d4>
 8013d58:	9b03      	ldr	r3, [sp, #12]
 8013d5a:	3307      	adds	r3, #7
 8013d5c:	f023 0307 	bic.w	r3, r3, #7
 8013d60:	3308      	adds	r3, #8
 8013d62:	9303      	str	r3, [sp, #12]
 8013d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d66:	444b      	add	r3, r9
 8013d68:	9309      	str	r3, [sp, #36]	; 0x24
 8013d6a:	e750      	b.n	8013c0e <_vfiprintf_r+0x42>
 8013d6c:	fb05 3202 	mla	r2, r5, r2, r3
 8013d70:	2001      	movs	r0, #1
 8013d72:	4688      	mov	r8, r1
 8013d74:	e78a      	b.n	8013c8c <_vfiprintf_r+0xc0>
 8013d76:	2300      	movs	r3, #0
 8013d78:	f108 0801 	add.w	r8, r8, #1
 8013d7c:	9305      	str	r3, [sp, #20]
 8013d7e:	4619      	mov	r1, r3
 8013d80:	250a      	movs	r5, #10
 8013d82:	4640      	mov	r0, r8
 8013d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d88:	3a30      	subs	r2, #48	; 0x30
 8013d8a:	2a09      	cmp	r2, #9
 8013d8c:	d903      	bls.n	8013d96 <_vfiprintf_r+0x1ca>
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d0c3      	beq.n	8013d1a <_vfiprintf_r+0x14e>
 8013d92:	9105      	str	r1, [sp, #20]
 8013d94:	e7c1      	b.n	8013d1a <_vfiprintf_r+0x14e>
 8013d96:	fb05 2101 	mla	r1, r5, r1, r2
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	4680      	mov	r8, r0
 8013d9e:	e7f0      	b.n	8013d82 <_vfiprintf_r+0x1b6>
 8013da0:	ab03      	add	r3, sp, #12
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	4622      	mov	r2, r4
 8013da6:	4b13      	ldr	r3, [pc, #76]	; (8013df4 <_vfiprintf_r+0x228>)
 8013da8:	a904      	add	r1, sp, #16
 8013daa:	4630      	mov	r0, r6
 8013dac:	f7fb fe70 	bl	800fa90 <_printf_float>
 8013db0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013db4:	4681      	mov	r9, r0
 8013db6:	d1d5      	bne.n	8013d64 <_vfiprintf_r+0x198>
 8013db8:	89a3      	ldrh	r3, [r4, #12]
 8013dba:	065b      	lsls	r3, r3, #25
 8013dbc:	f53f af7e 	bmi.w	8013cbc <_vfiprintf_r+0xf0>
 8013dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dc2:	e77d      	b.n	8013cc0 <_vfiprintf_r+0xf4>
 8013dc4:	ab03      	add	r3, sp, #12
 8013dc6:	9300      	str	r3, [sp, #0]
 8013dc8:	4622      	mov	r2, r4
 8013dca:	4b0a      	ldr	r3, [pc, #40]	; (8013df4 <_vfiprintf_r+0x228>)
 8013dcc:	a904      	add	r1, sp, #16
 8013dce:	4630      	mov	r0, r6
 8013dd0:	f7fc f900 	bl	800ffd4 <_printf_i>
 8013dd4:	e7ec      	b.n	8013db0 <_vfiprintf_r+0x1e4>
 8013dd6:	bf00      	nop
 8013dd8:	08014920 	.word	0x08014920
 8013ddc:	08014a6c 	.word	0x08014a6c
 8013de0:	08014940 	.word	0x08014940
 8013de4:	08014900 	.word	0x08014900
 8013de8:	08014a72 	.word	0x08014a72
 8013dec:	08014a76 	.word	0x08014a76
 8013df0:	0800fa91 	.word	0x0800fa91
 8013df4:	08013ba7 	.word	0x08013ba7

08013df8 <_scanf_chars>:
 8013df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dfc:	4615      	mov	r5, r2
 8013dfe:	688a      	ldr	r2, [r1, #8]
 8013e00:	4680      	mov	r8, r0
 8013e02:	460c      	mov	r4, r1
 8013e04:	b932      	cbnz	r2, 8013e14 <_scanf_chars+0x1c>
 8013e06:	698a      	ldr	r2, [r1, #24]
 8013e08:	2a00      	cmp	r2, #0
 8013e0a:	bf14      	ite	ne
 8013e0c:	f04f 32ff 	movne.w	r2, #4294967295
 8013e10:	2201      	moveq	r2, #1
 8013e12:	608a      	str	r2, [r1, #8]
 8013e14:	6822      	ldr	r2, [r4, #0]
 8013e16:	06d1      	lsls	r1, r2, #27
 8013e18:	bf5f      	itttt	pl
 8013e1a:	681a      	ldrpl	r2, [r3, #0]
 8013e1c:	1d11      	addpl	r1, r2, #4
 8013e1e:	6019      	strpl	r1, [r3, #0]
 8013e20:	6817      	ldrpl	r7, [r2, #0]
 8013e22:	2600      	movs	r6, #0
 8013e24:	69a3      	ldr	r3, [r4, #24]
 8013e26:	b1db      	cbz	r3, 8013e60 <_scanf_chars+0x68>
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d107      	bne.n	8013e3c <_scanf_chars+0x44>
 8013e2c:	682b      	ldr	r3, [r5, #0]
 8013e2e:	6962      	ldr	r2, [r4, #20]
 8013e30:	781b      	ldrb	r3, [r3, #0]
 8013e32:	5cd3      	ldrb	r3, [r2, r3]
 8013e34:	b9a3      	cbnz	r3, 8013e60 <_scanf_chars+0x68>
 8013e36:	2e00      	cmp	r6, #0
 8013e38:	d132      	bne.n	8013ea0 <_scanf_chars+0xa8>
 8013e3a:	e006      	b.n	8013e4a <_scanf_chars+0x52>
 8013e3c:	2b02      	cmp	r3, #2
 8013e3e:	d007      	beq.n	8013e50 <_scanf_chars+0x58>
 8013e40:	2e00      	cmp	r6, #0
 8013e42:	d12d      	bne.n	8013ea0 <_scanf_chars+0xa8>
 8013e44:	69a3      	ldr	r3, [r4, #24]
 8013e46:	2b01      	cmp	r3, #1
 8013e48:	d12a      	bne.n	8013ea0 <_scanf_chars+0xa8>
 8013e4a:	2001      	movs	r0, #1
 8013e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e50:	f7fe feee 	bl	8012c30 <__locale_ctype_ptr>
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	4418      	add	r0, r3
 8013e5a:	7843      	ldrb	r3, [r0, #1]
 8013e5c:	071b      	lsls	r3, r3, #28
 8013e5e:	d4ef      	bmi.n	8013e40 <_scanf_chars+0x48>
 8013e60:	6823      	ldr	r3, [r4, #0]
 8013e62:	06da      	lsls	r2, r3, #27
 8013e64:	bf5e      	ittt	pl
 8013e66:	682b      	ldrpl	r3, [r5, #0]
 8013e68:	781b      	ldrbpl	r3, [r3, #0]
 8013e6a:	703b      	strbpl	r3, [r7, #0]
 8013e6c:	682a      	ldr	r2, [r5, #0]
 8013e6e:	686b      	ldr	r3, [r5, #4]
 8013e70:	f102 0201 	add.w	r2, r2, #1
 8013e74:	602a      	str	r2, [r5, #0]
 8013e76:	68a2      	ldr	r2, [r4, #8]
 8013e78:	f103 33ff 	add.w	r3, r3, #4294967295
 8013e7c:	f102 32ff 	add.w	r2, r2, #4294967295
 8013e80:	606b      	str	r3, [r5, #4]
 8013e82:	f106 0601 	add.w	r6, r6, #1
 8013e86:	bf58      	it	pl
 8013e88:	3701      	addpl	r7, #1
 8013e8a:	60a2      	str	r2, [r4, #8]
 8013e8c:	b142      	cbz	r2, 8013ea0 <_scanf_chars+0xa8>
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	dcc8      	bgt.n	8013e24 <_scanf_chars+0x2c>
 8013e92:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013e96:	4629      	mov	r1, r5
 8013e98:	4640      	mov	r0, r8
 8013e9a:	4798      	blx	r3
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	d0c1      	beq.n	8013e24 <_scanf_chars+0x2c>
 8013ea0:	6823      	ldr	r3, [r4, #0]
 8013ea2:	f013 0310 	ands.w	r3, r3, #16
 8013ea6:	d105      	bne.n	8013eb4 <_scanf_chars+0xbc>
 8013ea8:	68e2      	ldr	r2, [r4, #12]
 8013eaa:	3201      	adds	r2, #1
 8013eac:	60e2      	str	r2, [r4, #12]
 8013eae:	69a2      	ldr	r2, [r4, #24]
 8013eb0:	b102      	cbz	r2, 8013eb4 <_scanf_chars+0xbc>
 8013eb2:	703b      	strb	r3, [r7, #0]
 8013eb4:	6923      	ldr	r3, [r4, #16]
 8013eb6:	441e      	add	r6, r3
 8013eb8:	6126      	str	r6, [r4, #16]
 8013eba:	2000      	movs	r0, #0
 8013ebc:	e7c6      	b.n	8013e4c <_scanf_chars+0x54>
	...

08013ec0 <_scanf_i>:
 8013ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec4:	469a      	mov	sl, r3
 8013ec6:	4b74      	ldr	r3, [pc, #464]	; (8014098 <_scanf_i+0x1d8>)
 8013ec8:	460c      	mov	r4, r1
 8013eca:	4683      	mov	fp, r0
 8013ecc:	4616      	mov	r6, r2
 8013ece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013ed2:	b087      	sub	sp, #28
 8013ed4:	ab03      	add	r3, sp, #12
 8013ed6:	68a7      	ldr	r7, [r4, #8]
 8013ed8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013edc:	4b6f      	ldr	r3, [pc, #444]	; (801409c <_scanf_i+0x1dc>)
 8013ede:	69a1      	ldr	r1, [r4, #24]
 8013ee0:	4a6f      	ldr	r2, [pc, #444]	; (80140a0 <_scanf_i+0x1e0>)
 8013ee2:	2903      	cmp	r1, #3
 8013ee4:	bf08      	it	eq
 8013ee6:	461a      	moveq	r2, r3
 8013ee8:	1e7b      	subs	r3, r7, #1
 8013eea:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8013eee:	bf84      	itt	hi
 8013ef0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013ef4:	60a3      	strhi	r3, [r4, #8]
 8013ef6:	6823      	ldr	r3, [r4, #0]
 8013ef8:	9200      	str	r2, [sp, #0]
 8013efa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013efe:	bf88      	it	hi
 8013f00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013f04:	f104 091c 	add.w	r9, r4, #28
 8013f08:	6023      	str	r3, [r4, #0]
 8013f0a:	bf8c      	ite	hi
 8013f0c:	197f      	addhi	r7, r7, r5
 8013f0e:	2700      	movls	r7, #0
 8013f10:	464b      	mov	r3, r9
 8013f12:	f04f 0800 	mov.w	r8, #0
 8013f16:	9301      	str	r3, [sp, #4]
 8013f18:	6831      	ldr	r1, [r6, #0]
 8013f1a:	ab03      	add	r3, sp, #12
 8013f1c:	2202      	movs	r2, #2
 8013f1e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013f22:	7809      	ldrb	r1, [r1, #0]
 8013f24:	f7ec f9a4 	bl	8000270 <memchr>
 8013f28:	9b01      	ldr	r3, [sp, #4]
 8013f2a:	b330      	cbz	r0, 8013f7a <_scanf_i+0xba>
 8013f2c:	f1b8 0f01 	cmp.w	r8, #1
 8013f30:	d15a      	bne.n	8013fe8 <_scanf_i+0x128>
 8013f32:	6862      	ldr	r2, [r4, #4]
 8013f34:	b92a      	cbnz	r2, 8013f42 <_scanf_i+0x82>
 8013f36:	6822      	ldr	r2, [r4, #0]
 8013f38:	2108      	movs	r1, #8
 8013f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013f3e:	6061      	str	r1, [r4, #4]
 8013f40:	6022      	str	r2, [r4, #0]
 8013f42:	6822      	ldr	r2, [r4, #0]
 8013f44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013f48:	6022      	str	r2, [r4, #0]
 8013f4a:	68a2      	ldr	r2, [r4, #8]
 8013f4c:	1e51      	subs	r1, r2, #1
 8013f4e:	60a1      	str	r1, [r4, #8]
 8013f50:	b19a      	cbz	r2, 8013f7a <_scanf_i+0xba>
 8013f52:	6832      	ldr	r2, [r6, #0]
 8013f54:	1c51      	adds	r1, r2, #1
 8013f56:	6031      	str	r1, [r6, #0]
 8013f58:	7812      	ldrb	r2, [r2, #0]
 8013f5a:	701a      	strb	r2, [r3, #0]
 8013f5c:	1c5d      	adds	r5, r3, #1
 8013f5e:	6873      	ldr	r3, [r6, #4]
 8013f60:	3b01      	subs	r3, #1
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	6073      	str	r3, [r6, #4]
 8013f66:	dc07      	bgt.n	8013f78 <_scanf_i+0xb8>
 8013f68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013f6c:	4631      	mov	r1, r6
 8013f6e:	4658      	mov	r0, fp
 8013f70:	4798      	blx	r3
 8013f72:	2800      	cmp	r0, #0
 8013f74:	f040 8086 	bne.w	8014084 <_scanf_i+0x1c4>
 8013f78:	462b      	mov	r3, r5
 8013f7a:	f108 0801 	add.w	r8, r8, #1
 8013f7e:	f1b8 0f03 	cmp.w	r8, #3
 8013f82:	d1c8      	bne.n	8013f16 <_scanf_i+0x56>
 8013f84:	6862      	ldr	r2, [r4, #4]
 8013f86:	b90a      	cbnz	r2, 8013f8c <_scanf_i+0xcc>
 8013f88:	220a      	movs	r2, #10
 8013f8a:	6062      	str	r2, [r4, #4]
 8013f8c:	6862      	ldr	r2, [r4, #4]
 8013f8e:	4945      	ldr	r1, [pc, #276]	; (80140a4 <_scanf_i+0x1e4>)
 8013f90:	6960      	ldr	r0, [r4, #20]
 8013f92:	9301      	str	r3, [sp, #4]
 8013f94:	1a89      	subs	r1, r1, r2
 8013f96:	f000 f899 	bl	80140cc <__sccl>
 8013f9a:	9b01      	ldr	r3, [sp, #4]
 8013f9c:	f04f 0800 	mov.w	r8, #0
 8013fa0:	461d      	mov	r5, r3
 8013fa2:	68a3      	ldr	r3, [r4, #8]
 8013fa4:	6822      	ldr	r2, [r4, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d03a      	beq.n	8014020 <_scanf_i+0x160>
 8013faa:	6831      	ldr	r1, [r6, #0]
 8013fac:	6960      	ldr	r0, [r4, #20]
 8013fae:	f891 c000 	ldrb.w	ip, [r1]
 8013fb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d032      	beq.n	8014020 <_scanf_i+0x160>
 8013fba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013fbe:	d121      	bne.n	8014004 <_scanf_i+0x144>
 8013fc0:	0510      	lsls	r0, r2, #20
 8013fc2:	d51f      	bpl.n	8014004 <_scanf_i+0x144>
 8013fc4:	f108 0801 	add.w	r8, r8, #1
 8013fc8:	b117      	cbz	r7, 8013fd0 <_scanf_i+0x110>
 8013fca:	3301      	adds	r3, #1
 8013fcc:	3f01      	subs	r7, #1
 8013fce:	60a3      	str	r3, [r4, #8]
 8013fd0:	6873      	ldr	r3, [r6, #4]
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	6073      	str	r3, [r6, #4]
 8013fd8:	dd1b      	ble.n	8014012 <_scanf_i+0x152>
 8013fda:	6833      	ldr	r3, [r6, #0]
 8013fdc:	3301      	adds	r3, #1
 8013fde:	6033      	str	r3, [r6, #0]
 8013fe0:	68a3      	ldr	r3, [r4, #8]
 8013fe2:	3b01      	subs	r3, #1
 8013fe4:	60a3      	str	r3, [r4, #8]
 8013fe6:	e7dc      	b.n	8013fa2 <_scanf_i+0xe2>
 8013fe8:	f1b8 0f02 	cmp.w	r8, #2
 8013fec:	d1ad      	bne.n	8013f4a <_scanf_i+0x8a>
 8013fee:	6822      	ldr	r2, [r4, #0]
 8013ff0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013ff4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013ff8:	d1bf      	bne.n	8013f7a <_scanf_i+0xba>
 8013ffa:	2110      	movs	r1, #16
 8013ffc:	6061      	str	r1, [r4, #4]
 8013ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014002:	e7a1      	b.n	8013f48 <_scanf_i+0x88>
 8014004:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014008:	6022      	str	r2, [r4, #0]
 801400a:	780b      	ldrb	r3, [r1, #0]
 801400c:	702b      	strb	r3, [r5, #0]
 801400e:	3501      	adds	r5, #1
 8014010:	e7de      	b.n	8013fd0 <_scanf_i+0x110>
 8014012:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014016:	4631      	mov	r1, r6
 8014018:	4658      	mov	r0, fp
 801401a:	4798      	blx	r3
 801401c:	2800      	cmp	r0, #0
 801401e:	d0df      	beq.n	8013fe0 <_scanf_i+0x120>
 8014020:	6823      	ldr	r3, [r4, #0]
 8014022:	05d9      	lsls	r1, r3, #23
 8014024:	d50c      	bpl.n	8014040 <_scanf_i+0x180>
 8014026:	454d      	cmp	r5, r9
 8014028:	d908      	bls.n	801403c <_scanf_i+0x17c>
 801402a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801402e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014032:	4632      	mov	r2, r6
 8014034:	4658      	mov	r0, fp
 8014036:	4798      	blx	r3
 8014038:	1e6f      	subs	r7, r5, #1
 801403a:	463d      	mov	r5, r7
 801403c:	454d      	cmp	r5, r9
 801403e:	d029      	beq.n	8014094 <_scanf_i+0x1d4>
 8014040:	6822      	ldr	r2, [r4, #0]
 8014042:	f012 0210 	ands.w	r2, r2, #16
 8014046:	d113      	bne.n	8014070 <_scanf_i+0x1b0>
 8014048:	702a      	strb	r2, [r5, #0]
 801404a:	6863      	ldr	r3, [r4, #4]
 801404c:	9e00      	ldr	r6, [sp, #0]
 801404e:	4649      	mov	r1, r9
 8014050:	4658      	mov	r0, fp
 8014052:	47b0      	blx	r6
 8014054:	f8da 3000 	ldr.w	r3, [sl]
 8014058:	6821      	ldr	r1, [r4, #0]
 801405a:	1d1a      	adds	r2, r3, #4
 801405c:	f8ca 2000 	str.w	r2, [sl]
 8014060:	f011 0f20 	tst.w	r1, #32
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	d010      	beq.n	801408a <_scanf_i+0x1ca>
 8014068:	6018      	str	r0, [r3, #0]
 801406a:	68e3      	ldr	r3, [r4, #12]
 801406c:	3301      	adds	r3, #1
 801406e:	60e3      	str	r3, [r4, #12]
 8014070:	eba5 0509 	sub.w	r5, r5, r9
 8014074:	44a8      	add	r8, r5
 8014076:	6925      	ldr	r5, [r4, #16]
 8014078:	4445      	add	r5, r8
 801407a:	6125      	str	r5, [r4, #16]
 801407c:	2000      	movs	r0, #0
 801407e:	b007      	add	sp, #28
 8014080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014084:	f04f 0800 	mov.w	r8, #0
 8014088:	e7ca      	b.n	8014020 <_scanf_i+0x160>
 801408a:	07ca      	lsls	r2, r1, #31
 801408c:	bf4c      	ite	mi
 801408e:	8018      	strhmi	r0, [r3, #0]
 8014090:	6018      	strpl	r0, [r3, #0]
 8014092:	e7ea      	b.n	801406a <_scanf_i+0x1aa>
 8014094:	2001      	movs	r0, #1
 8014096:	e7f2      	b.n	801407e <_scanf_i+0x1be>
 8014098:	08014650 	.word	0x08014650
 801409c:	08011551 	.word	0x08011551
 80140a0:	08014249 	.word	0x08014249
 80140a4:	08014a8d 	.word	0x08014a8d

080140a8 <_read_r>:
 80140a8:	b538      	push	{r3, r4, r5, lr}
 80140aa:	4c07      	ldr	r4, [pc, #28]	; (80140c8 <_read_r+0x20>)
 80140ac:	4605      	mov	r5, r0
 80140ae:	4608      	mov	r0, r1
 80140b0:	4611      	mov	r1, r2
 80140b2:	2200      	movs	r2, #0
 80140b4:	6022      	str	r2, [r4, #0]
 80140b6:	461a      	mov	r2, r3
 80140b8:	f000 f9ba 	bl	8014430 <_read>
 80140bc:	1c43      	adds	r3, r0, #1
 80140be:	d102      	bne.n	80140c6 <_read_r+0x1e>
 80140c0:	6823      	ldr	r3, [r4, #0]
 80140c2:	b103      	cbz	r3, 80140c6 <_read_r+0x1e>
 80140c4:	602b      	str	r3, [r5, #0]
 80140c6:	bd38      	pop	{r3, r4, r5, pc}
 80140c8:	2000ecb0 	.word	0x2000ecb0

080140cc <__sccl>:
 80140cc:	b570      	push	{r4, r5, r6, lr}
 80140ce:	780b      	ldrb	r3, [r1, #0]
 80140d0:	2b5e      	cmp	r3, #94	; 0x5e
 80140d2:	bf13      	iteet	ne
 80140d4:	1c4a      	addne	r2, r1, #1
 80140d6:	1c8a      	addeq	r2, r1, #2
 80140d8:	784b      	ldrbeq	r3, [r1, #1]
 80140da:	2100      	movne	r1, #0
 80140dc:	bf08      	it	eq
 80140de:	2101      	moveq	r1, #1
 80140e0:	1e44      	subs	r4, r0, #1
 80140e2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80140e6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80140ea:	42ac      	cmp	r4, r5
 80140ec:	d1fb      	bne.n	80140e6 <__sccl+0x1a>
 80140ee:	b913      	cbnz	r3, 80140f6 <__sccl+0x2a>
 80140f0:	3a01      	subs	r2, #1
 80140f2:	4610      	mov	r0, r2
 80140f4:	bd70      	pop	{r4, r5, r6, pc}
 80140f6:	f081 0401 	eor.w	r4, r1, #1
 80140fa:	54c4      	strb	r4, [r0, r3]
 80140fc:	1c51      	adds	r1, r2, #1
 80140fe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8014102:	2d2d      	cmp	r5, #45	; 0x2d
 8014104:	f101 36ff 	add.w	r6, r1, #4294967295
 8014108:	460a      	mov	r2, r1
 801410a:	d006      	beq.n	801411a <__sccl+0x4e>
 801410c:	2d5d      	cmp	r5, #93	; 0x5d
 801410e:	d0f0      	beq.n	80140f2 <__sccl+0x26>
 8014110:	b90d      	cbnz	r5, 8014116 <__sccl+0x4a>
 8014112:	4632      	mov	r2, r6
 8014114:	e7ed      	b.n	80140f2 <__sccl+0x26>
 8014116:	462b      	mov	r3, r5
 8014118:	e7ef      	b.n	80140fa <__sccl+0x2e>
 801411a:	780e      	ldrb	r6, [r1, #0]
 801411c:	2e5d      	cmp	r6, #93	; 0x5d
 801411e:	d0fa      	beq.n	8014116 <__sccl+0x4a>
 8014120:	42b3      	cmp	r3, r6
 8014122:	dcf8      	bgt.n	8014116 <__sccl+0x4a>
 8014124:	3301      	adds	r3, #1
 8014126:	429e      	cmp	r6, r3
 8014128:	54c4      	strb	r4, [r0, r3]
 801412a:	dcfb      	bgt.n	8014124 <__sccl+0x58>
 801412c:	3102      	adds	r1, #2
 801412e:	e7e6      	b.n	80140fe <__sccl+0x32>

08014130 <strncmp>:
 8014130:	b510      	push	{r4, lr}
 8014132:	b16a      	cbz	r2, 8014150 <strncmp+0x20>
 8014134:	3901      	subs	r1, #1
 8014136:	1884      	adds	r4, r0, r2
 8014138:	f810 3b01 	ldrb.w	r3, [r0], #1
 801413c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014140:	4293      	cmp	r3, r2
 8014142:	d103      	bne.n	801414c <strncmp+0x1c>
 8014144:	42a0      	cmp	r0, r4
 8014146:	d001      	beq.n	801414c <strncmp+0x1c>
 8014148:	2b00      	cmp	r3, #0
 801414a:	d1f5      	bne.n	8014138 <strncmp+0x8>
 801414c:	1a98      	subs	r0, r3, r2
 801414e:	bd10      	pop	{r4, pc}
 8014150:	4610      	mov	r0, r2
 8014152:	e7fc      	b.n	801414e <strncmp+0x1e>

08014154 <_strtoul_l.isra.0>:
 8014154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014158:	4680      	mov	r8, r0
 801415a:	4689      	mov	r9, r1
 801415c:	4692      	mov	sl, r2
 801415e:	461e      	mov	r6, r3
 8014160:	460f      	mov	r7, r1
 8014162:	463d      	mov	r5, r7
 8014164:	9808      	ldr	r0, [sp, #32]
 8014166:	f815 4b01 	ldrb.w	r4, [r5], #1
 801416a:	f7fe fd5d 	bl	8012c28 <__locale_ctype_ptr_l>
 801416e:	4420      	add	r0, r4
 8014170:	7843      	ldrb	r3, [r0, #1]
 8014172:	f013 0308 	ands.w	r3, r3, #8
 8014176:	d130      	bne.n	80141da <_strtoul_l.isra.0+0x86>
 8014178:	2c2d      	cmp	r4, #45	; 0x2d
 801417a:	d130      	bne.n	80141de <_strtoul_l.isra.0+0x8a>
 801417c:	787c      	ldrb	r4, [r7, #1]
 801417e:	1cbd      	adds	r5, r7, #2
 8014180:	2101      	movs	r1, #1
 8014182:	2e00      	cmp	r6, #0
 8014184:	d05c      	beq.n	8014240 <_strtoul_l.isra.0+0xec>
 8014186:	2e10      	cmp	r6, #16
 8014188:	d109      	bne.n	801419e <_strtoul_l.isra.0+0x4a>
 801418a:	2c30      	cmp	r4, #48	; 0x30
 801418c:	d107      	bne.n	801419e <_strtoul_l.isra.0+0x4a>
 801418e:	782b      	ldrb	r3, [r5, #0]
 8014190:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014194:	2b58      	cmp	r3, #88	; 0x58
 8014196:	d14e      	bne.n	8014236 <_strtoul_l.isra.0+0xe2>
 8014198:	786c      	ldrb	r4, [r5, #1]
 801419a:	2610      	movs	r6, #16
 801419c:	3502      	adds	r5, #2
 801419e:	f04f 32ff 	mov.w	r2, #4294967295
 80141a2:	2300      	movs	r3, #0
 80141a4:	fbb2 f2f6 	udiv	r2, r2, r6
 80141a8:	fb06 fc02 	mul.w	ip, r6, r2
 80141ac:	ea6f 0c0c 	mvn.w	ip, ip
 80141b0:	4618      	mov	r0, r3
 80141b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80141b6:	2f09      	cmp	r7, #9
 80141b8:	d817      	bhi.n	80141ea <_strtoul_l.isra.0+0x96>
 80141ba:	463c      	mov	r4, r7
 80141bc:	42a6      	cmp	r6, r4
 80141be:	dd23      	ble.n	8014208 <_strtoul_l.isra.0+0xb4>
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	db1e      	blt.n	8014202 <_strtoul_l.isra.0+0xae>
 80141c4:	4282      	cmp	r2, r0
 80141c6:	d31c      	bcc.n	8014202 <_strtoul_l.isra.0+0xae>
 80141c8:	d101      	bne.n	80141ce <_strtoul_l.isra.0+0x7a>
 80141ca:	45a4      	cmp	ip, r4
 80141cc:	db19      	blt.n	8014202 <_strtoul_l.isra.0+0xae>
 80141ce:	fb00 4006 	mla	r0, r0, r6, r4
 80141d2:	2301      	movs	r3, #1
 80141d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141d8:	e7eb      	b.n	80141b2 <_strtoul_l.isra.0+0x5e>
 80141da:	462f      	mov	r7, r5
 80141dc:	e7c1      	b.n	8014162 <_strtoul_l.isra.0+0xe>
 80141de:	2c2b      	cmp	r4, #43	; 0x2b
 80141e0:	bf04      	itt	eq
 80141e2:	1cbd      	addeq	r5, r7, #2
 80141e4:	787c      	ldrbeq	r4, [r7, #1]
 80141e6:	4619      	mov	r1, r3
 80141e8:	e7cb      	b.n	8014182 <_strtoul_l.isra.0+0x2e>
 80141ea:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80141ee:	2f19      	cmp	r7, #25
 80141f0:	d801      	bhi.n	80141f6 <_strtoul_l.isra.0+0xa2>
 80141f2:	3c37      	subs	r4, #55	; 0x37
 80141f4:	e7e2      	b.n	80141bc <_strtoul_l.isra.0+0x68>
 80141f6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80141fa:	2f19      	cmp	r7, #25
 80141fc:	d804      	bhi.n	8014208 <_strtoul_l.isra.0+0xb4>
 80141fe:	3c57      	subs	r4, #87	; 0x57
 8014200:	e7dc      	b.n	80141bc <_strtoul_l.isra.0+0x68>
 8014202:	f04f 33ff 	mov.w	r3, #4294967295
 8014206:	e7e5      	b.n	80141d4 <_strtoul_l.isra.0+0x80>
 8014208:	2b00      	cmp	r3, #0
 801420a:	da09      	bge.n	8014220 <_strtoul_l.isra.0+0xcc>
 801420c:	2322      	movs	r3, #34	; 0x22
 801420e:	f8c8 3000 	str.w	r3, [r8]
 8014212:	f04f 30ff 	mov.w	r0, #4294967295
 8014216:	f1ba 0f00 	cmp.w	sl, #0
 801421a:	d107      	bne.n	801422c <_strtoul_l.isra.0+0xd8>
 801421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014220:	b101      	cbz	r1, 8014224 <_strtoul_l.isra.0+0xd0>
 8014222:	4240      	negs	r0, r0
 8014224:	f1ba 0f00 	cmp.w	sl, #0
 8014228:	d0f8      	beq.n	801421c <_strtoul_l.isra.0+0xc8>
 801422a:	b10b      	cbz	r3, 8014230 <_strtoul_l.isra.0+0xdc>
 801422c:	f105 39ff 	add.w	r9, r5, #4294967295
 8014230:	f8ca 9000 	str.w	r9, [sl]
 8014234:	e7f2      	b.n	801421c <_strtoul_l.isra.0+0xc8>
 8014236:	2430      	movs	r4, #48	; 0x30
 8014238:	2e00      	cmp	r6, #0
 801423a:	d1b0      	bne.n	801419e <_strtoul_l.isra.0+0x4a>
 801423c:	2608      	movs	r6, #8
 801423e:	e7ae      	b.n	801419e <_strtoul_l.isra.0+0x4a>
 8014240:	2c30      	cmp	r4, #48	; 0x30
 8014242:	d0a4      	beq.n	801418e <_strtoul_l.isra.0+0x3a>
 8014244:	260a      	movs	r6, #10
 8014246:	e7aa      	b.n	801419e <_strtoul_l.isra.0+0x4a>

08014248 <_strtoul_r>:
 8014248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801424a:	4c06      	ldr	r4, [pc, #24]	; (8014264 <_strtoul_r+0x1c>)
 801424c:	4d06      	ldr	r5, [pc, #24]	; (8014268 <_strtoul_r+0x20>)
 801424e:	6824      	ldr	r4, [r4, #0]
 8014250:	6a24      	ldr	r4, [r4, #32]
 8014252:	2c00      	cmp	r4, #0
 8014254:	bf08      	it	eq
 8014256:	462c      	moveq	r4, r5
 8014258:	9400      	str	r4, [sp, #0]
 801425a:	f7ff ff7b 	bl	8014154 <_strtoul_l.isra.0>
 801425e:	b003      	add	sp, #12
 8014260:	bd30      	pop	{r4, r5, pc}
 8014262:	bf00      	nop
 8014264:	2000086c 	.word	0x2000086c
 8014268:	200008d0 	.word	0x200008d0

0801426c <__submore>:
 801426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014270:	460c      	mov	r4, r1
 8014272:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014278:	4299      	cmp	r1, r3
 801427a:	d11d      	bne.n	80142b8 <__submore+0x4c>
 801427c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014280:	f7fb fb24 	bl	800f8cc <_malloc_r>
 8014284:	b918      	cbnz	r0, 801428e <__submore+0x22>
 8014286:	f04f 30ff 	mov.w	r0, #4294967295
 801428a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801428e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014292:	63a3      	str	r3, [r4, #56]	; 0x38
 8014294:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014298:	6360      	str	r0, [r4, #52]	; 0x34
 801429a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801429e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80142a2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80142a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80142aa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80142ae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80142b2:	6020      	str	r0, [r4, #0]
 80142b4:	2000      	movs	r0, #0
 80142b6:	e7e8      	b.n	801428a <__submore+0x1e>
 80142b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80142ba:	0077      	lsls	r7, r6, #1
 80142bc:	463a      	mov	r2, r7
 80142be:	f000 f858 	bl	8014372 <_realloc_r>
 80142c2:	4605      	mov	r5, r0
 80142c4:	2800      	cmp	r0, #0
 80142c6:	d0de      	beq.n	8014286 <__submore+0x1a>
 80142c8:	eb00 0806 	add.w	r8, r0, r6
 80142cc:	4601      	mov	r1, r0
 80142ce:	4632      	mov	r2, r6
 80142d0:	4640      	mov	r0, r8
 80142d2:	f7fb fa8b 	bl	800f7ec <memcpy>
 80142d6:	f8c4 8000 	str.w	r8, [r4]
 80142da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80142de:	e7e9      	b.n	80142b4 <__submore+0x48>

080142e0 <__ascii_wctomb>:
 80142e0:	b149      	cbz	r1, 80142f6 <__ascii_wctomb+0x16>
 80142e2:	2aff      	cmp	r2, #255	; 0xff
 80142e4:	bf85      	ittet	hi
 80142e6:	238a      	movhi	r3, #138	; 0x8a
 80142e8:	6003      	strhi	r3, [r0, #0]
 80142ea:	700a      	strbls	r2, [r1, #0]
 80142ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80142f0:	bf98      	it	ls
 80142f2:	2001      	movls	r0, #1
 80142f4:	4770      	bx	lr
 80142f6:	4608      	mov	r0, r1
 80142f8:	4770      	bx	lr
	...

080142fc <_fstat_r>:
 80142fc:	b538      	push	{r3, r4, r5, lr}
 80142fe:	4c07      	ldr	r4, [pc, #28]	; (801431c <_fstat_r+0x20>)
 8014300:	2300      	movs	r3, #0
 8014302:	4605      	mov	r5, r0
 8014304:	4608      	mov	r0, r1
 8014306:	4611      	mov	r1, r2
 8014308:	6023      	str	r3, [r4, #0]
 801430a:	f000 f869 	bl	80143e0 <_fstat>
 801430e:	1c43      	adds	r3, r0, #1
 8014310:	d102      	bne.n	8014318 <_fstat_r+0x1c>
 8014312:	6823      	ldr	r3, [r4, #0]
 8014314:	b103      	cbz	r3, 8014318 <_fstat_r+0x1c>
 8014316:	602b      	str	r3, [r5, #0]
 8014318:	bd38      	pop	{r3, r4, r5, pc}
 801431a:	bf00      	nop
 801431c:	2000ecb0 	.word	0x2000ecb0

08014320 <_isatty_r>:
 8014320:	b538      	push	{r3, r4, r5, lr}
 8014322:	4c06      	ldr	r4, [pc, #24]	; (801433c <_isatty_r+0x1c>)
 8014324:	2300      	movs	r3, #0
 8014326:	4605      	mov	r5, r0
 8014328:	4608      	mov	r0, r1
 801432a:	6023      	str	r3, [r4, #0]
 801432c:	f000 f868 	bl	8014400 <_isatty>
 8014330:	1c43      	adds	r3, r0, #1
 8014332:	d102      	bne.n	801433a <_isatty_r+0x1a>
 8014334:	6823      	ldr	r3, [r4, #0]
 8014336:	b103      	cbz	r3, 801433a <_isatty_r+0x1a>
 8014338:	602b      	str	r3, [r5, #0]
 801433a:	bd38      	pop	{r3, r4, r5, pc}
 801433c:	2000ecb0 	.word	0x2000ecb0

08014340 <memmove>:
 8014340:	4288      	cmp	r0, r1
 8014342:	b510      	push	{r4, lr}
 8014344:	eb01 0302 	add.w	r3, r1, r2
 8014348:	d807      	bhi.n	801435a <memmove+0x1a>
 801434a:	1e42      	subs	r2, r0, #1
 801434c:	4299      	cmp	r1, r3
 801434e:	d00a      	beq.n	8014366 <memmove+0x26>
 8014350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014354:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014358:	e7f8      	b.n	801434c <memmove+0xc>
 801435a:	4283      	cmp	r3, r0
 801435c:	d9f5      	bls.n	801434a <memmove+0xa>
 801435e:	1881      	adds	r1, r0, r2
 8014360:	1ad2      	subs	r2, r2, r3
 8014362:	42d3      	cmn	r3, r2
 8014364:	d100      	bne.n	8014368 <memmove+0x28>
 8014366:	bd10      	pop	{r4, pc}
 8014368:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801436c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014370:	e7f7      	b.n	8014362 <memmove+0x22>

08014372 <_realloc_r>:
 8014372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014374:	4607      	mov	r7, r0
 8014376:	4614      	mov	r4, r2
 8014378:	460e      	mov	r6, r1
 801437a:	b921      	cbnz	r1, 8014386 <_realloc_r+0x14>
 801437c:	4611      	mov	r1, r2
 801437e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014382:	f7fb baa3 	b.w	800f8cc <_malloc_r>
 8014386:	b922      	cbnz	r2, 8014392 <_realloc_r+0x20>
 8014388:	f7fb fa52 	bl	800f830 <_free_r>
 801438c:	4625      	mov	r5, r4
 801438e:	4628      	mov	r0, r5
 8014390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014392:	f000 f814 	bl	80143be <_malloc_usable_size_r>
 8014396:	42a0      	cmp	r0, r4
 8014398:	d20f      	bcs.n	80143ba <_realloc_r+0x48>
 801439a:	4621      	mov	r1, r4
 801439c:	4638      	mov	r0, r7
 801439e:	f7fb fa95 	bl	800f8cc <_malloc_r>
 80143a2:	4605      	mov	r5, r0
 80143a4:	2800      	cmp	r0, #0
 80143a6:	d0f2      	beq.n	801438e <_realloc_r+0x1c>
 80143a8:	4631      	mov	r1, r6
 80143aa:	4622      	mov	r2, r4
 80143ac:	f7fb fa1e 	bl	800f7ec <memcpy>
 80143b0:	4631      	mov	r1, r6
 80143b2:	4638      	mov	r0, r7
 80143b4:	f7fb fa3c 	bl	800f830 <_free_r>
 80143b8:	e7e9      	b.n	801438e <_realloc_r+0x1c>
 80143ba:	4635      	mov	r5, r6
 80143bc:	e7e7      	b.n	801438e <_realloc_r+0x1c>

080143be <_malloc_usable_size_r>:
 80143be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143c2:	1f18      	subs	r0, r3, #4
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	bfbc      	itt	lt
 80143c8:	580b      	ldrlt	r3, [r1, r0]
 80143ca:	18c0      	addlt	r0, r0, r3
 80143cc:	4770      	bx	lr
	...

080143d0 <_close>:
 80143d0:	4b02      	ldr	r3, [pc, #8]	; (80143dc <_close+0xc>)
 80143d2:	2258      	movs	r2, #88	; 0x58
 80143d4:	601a      	str	r2, [r3, #0]
 80143d6:	f04f 30ff 	mov.w	r0, #4294967295
 80143da:	4770      	bx	lr
 80143dc:	2000ecb0 	.word	0x2000ecb0

080143e0 <_fstat>:
 80143e0:	4b02      	ldr	r3, [pc, #8]	; (80143ec <_fstat+0xc>)
 80143e2:	2258      	movs	r2, #88	; 0x58
 80143e4:	601a      	str	r2, [r3, #0]
 80143e6:	f04f 30ff 	mov.w	r0, #4294967295
 80143ea:	4770      	bx	lr
 80143ec:	2000ecb0 	.word	0x2000ecb0

080143f0 <_getpid>:
 80143f0:	4b02      	ldr	r3, [pc, #8]	; (80143fc <_getpid+0xc>)
 80143f2:	2258      	movs	r2, #88	; 0x58
 80143f4:	601a      	str	r2, [r3, #0]
 80143f6:	f04f 30ff 	mov.w	r0, #4294967295
 80143fa:	4770      	bx	lr
 80143fc:	2000ecb0 	.word	0x2000ecb0

08014400 <_isatty>:
 8014400:	4b02      	ldr	r3, [pc, #8]	; (801440c <_isatty+0xc>)
 8014402:	2258      	movs	r2, #88	; 0x58
 8014404:	601a      	str	r2, [r3, #0]
 8014406:	2000      	movs	r0, #0
 8014408:	4770      	bx	lr
 801440a:	bf00      	nop
 801440c:	2000ecb0 	.word	0x2000ecb0

08014410 <_kill>:
 8014410:	4b02      	ldr	r3, [pc, #8]	; (801441c <_kill+0xc>)
 8014412:	2258      	movs	r2, #88	; 0x58
 8014414:	601a      	str	r2, [r3, #0]
 8014416:	f04f 30ff 	mov.w	r0, #4294967295
 801441a:	4770      	bx	lr
 801441c:	2000ecb0 	.word	0x2000ecb0

08014420 <_lseek>:
 8014420:	4b02      	ldr	r3, [pc, #8]	; (801442c <_lseek+0xc>)
 8014422:	2258      	movs	r2, #88	; 0x58
 8014424:	601a      	str	r2, [r3, #0]
 8014426:	f04f 30ff 	mov.w	r0, #4294967295
 801442a:	4770      	bx	lr
 801442c:	2000ecb0 	.word	0x2000ecb0

08014430 <_read>:
 8014430:	4b02      	ldr	r3, [pc, #8]	; (801443c <_read+0xc>)
 8014432:	2258      	movs	r2, #88	; 0x58
 8014434:	601a      	str	r2, [r3, #0]
 8014436:	f04f 30ff 	mov.w	r0, #4294967295
 801443a:	4770      	bx	lr
 801443c:	2000ecb0 	.word	0x2000ecb0

08014440 <_sbrk>:
 8014440:	4b04      	ldr	r3, [pc, #16]	; (8014454 <_sbrk+0x14>)
 8014442:	6819      	ldr	r1, [r3, #0]
 8014444:	4602      	mov	r2, r0
 8014446:	b909      	cbnz	r1, 801444c <_sbrk+0xc>
 8014448:	4903      	ldr	r1, [pc, #12]	; (8014458 <_sbrk+0x18>)
 801444a:	6019      	str	r1, [r3, #0]
 801444c:	6818      	ldr	r0, [r3, #0]
 801444e:	4402      	add	r2, r0
 8014450:	601a      	str	r2, [r3, #0]
 8014452:	4770      	bx	lr
 8014454:	200019b0 	.word	0x200019b0
 8014458:	2000ecb8 	.word	0x2000ecb8

0801445c <_exit>:
 801445c:	e7fe      	b.n	801445c <_exit>
	...

08014460 <_init>:
 8014460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014462:	bf00      	nop
 8014464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014466:	bc08      	pop	{r3}
 8014468:	469e      	mov	lr, r3
 801446a:	4770      	bx	lr

0801446c <_fini>:
 801446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801446e:	bf00      	nop
 8014470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014472:	bc08      	pop	{r3}
 8014474:	469e      	mov	lr, r3
 8014476:	4770      	bx	lr
