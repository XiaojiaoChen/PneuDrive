
PneuDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         0000000c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0001151a  00008010  00008010  00008010  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         0000000c  0001952c  0001952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000057e  00019538  00019538  00019538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  00019ab8  00019ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .eh_frame     00000004  00019ac0  00019ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000008  00029ac4  00029ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  00029acc  00029acc  00019acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000528  00029ad0  00029ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e8e0  00029ff8  00029ff8  00019ff8  2**2
                  ALLOC
 10 .stab         000000b4  00000000  00000000  00019ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .stabstr      00000183  00000000  00000000  0001a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000007b  00000000  00000000  0001a22f  2**0
                  CONTENTS, READONLY
 13 .debug_aranges 000021c0  00000000  00000000  0001a2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0004fd9f  00000000  00000000  0001c46a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00008f3e  00000000  00000000  0006c209  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0002b112  00000000  00000000  00075147  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009b44  00000000  00000000  000a025c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114b10  00000000  00000000  000a9da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001e10  00000000  00000000  001be8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00037137  00000000  00000000  001c06c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .ARM.attributes 0000002e  00000000  00000000  001f77f7  2**0
                  CONTENTS, READONLY

Disassembly of section .init:

00008000 <_init>:
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8002:	bf00      	nop
    8004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8006:	bc08      	pop	{r3}
    8008:	469e      	mov	lr, r3
    800a:	4770      	bx	lr

Disassembly of section .text:

00008010 <sulp>:
    8010:	b570      	push	{r4, r5, r6, lr}
    8012:	4604      	mov	r4, r0
    8014:	460d      	mov	r5, r1
    8016:	4616      	mov	r6, r2
    8018:	ec45 4b10 	vmov	d0, r4, r5
    801c:	f010 fbe6 	bl	187ec <__ulp>
    8020:	b17e      	cbz	r6, 8042 <sulp+0x32>
    8022:	f3c5 530a 	ubfx	r3, r5, #20, #11
    8026:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    802a:	2b00      	cmp	r3, #0
    802c:	dd09      	ble.n	8042 <sulp+0x32>
    802e:	051b      	lsls	r3, r3, #20
    8030:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    8034:	2000      	movs	r0, #0
    8036:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    803a:	ec41 0b17 	vmov	d7, r0, r1
    803e:	ee20 0b07 	vmul.f64	d0, d0, d7
    8042:	bd70      	pop	{r4, r5, r6, pc}

00008044 <exit>:
    8044:	b508      	push	{r3, lr}
    8046:	4b07      	ldr	r3, [pc, #28]	; (8064 <exit+0x20>)
    8048:	4604      	mov	r4, r0
    804a:	b113      	cbz	r3, 8052 <exit+0xe>
    804c:	2100      	movs	r1, #0
    804e:	f3af 8000 	nop.w
    8052:	4b05      	ldr	r3, [pc, #20]	; (8068 <exit+0x24>)
    8054:	6818      	ldr	r0, [r3, #0]
    8056:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8058:	b103      	cbz	r3, 805c <exit+0x18>
    805a:	4798      	blx	r3
    805c:	4620      	mov	r0, r4
    805e:	f011 fa63 	bl	19528 <_exit>
    8062:	bf00      	nop
    8064:	00000000 	.word	0x00000000
    8068:	00019794 	.word	0x00019794

0000806c <__do_global_dtors_aux>:
    806c:	b510      	push	{r4, lr}
    806e:	4c05      	ldr	r4, [pc, #20]	; (8084 <__do_global_dtors_aux+0x18>)
    8070:	7823      	ldrb	r3, [r4, #0]
    8072:	b933      	cbnz	r3, 8082 <__do_global_dtors_aux+0x16>
    8074:	4b04      	ldr	r3, [pc, #16]	; (8088 <__do_global_dtors_aux+0x1c>)
    8076:	b113      	cbz	r3, 807e <__do_global_dtors_aux+0x12>
    8078:	4804      	ldr	r0, [pc, #16]	; (808c <__do_global_dtors_aux+0x20>)
    807a:	f3af 8000 	nop.w
    807e:	2301      	movs	r3, #1
    8080:	7023      	strb	r3, [r4, #0]
    8082:	bd10      	pop	{r4, pc}
    8084:	00029ff8 	.word	0x00029ff8
    8088:	00000000 	.word	0x00000000
    808c:	00019ac0 	.word	0x00019ac0

00008090 <frame_dummy>:
    8090:	b508      	push	{r3, lr}
    8092:	4b03      	ldr	r3, [pc, #12]	; (80a0 <frame_dummy+0x10>)
    8094:	b11b      	cbz	r3, 809e <frame_dummy+0xe>
    8096:	4903      	ldr	r1, [pc, #12]	; (80a4 <frame_dummy+0x14>)
    8098:	4803      	ldr	r0, [pc, #12]	; (80a8 <frame_dummy+0x18>)
    809a:	f3af 8000 	nop.w
    809e:	bd08      	pop	{r3, pc}
    80a0:	00000000 	.word	0x00000000
    80a4:	00029ffc 	.word	0x00029ffc
    80a8:	00019ac0 	.word	0x00019ac0

000080ac <_mainCRTStartup>:
    80ac:	4b15      	ldr	r3, [pc, #84]	; (8104 <_mainCRTStartup+0x58>)
    80ae:	2b00      	cmp	r3, #0
    80b0:	bf08      	it	eq
    80b2:	4b13      	ldreq	r3, [pc, #76]	; (8100 <_mainCRTStartup+0x54>)
    80b4:	469d      	mov	sp, r3
    80b6:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
    80ba:	2100      	movs	r1, #0
    80bc:	468b      	mov	fp, r1
    80be:	460f      	mov	r7, r1
    80c0:	4813      	ldr	r0, [pc, #76]	; (8110 <_mainCRTStartup+0x64>)
    80c2:	4a14      	ldr	r2, [pc, #80]	; (8114 <_mainCRTStartup+0x68>)
    80c4:	1a12      	subs	r2, r2, r0
    80c6:	f00c fe70 	bl	14daa <memset>
    80ca:	4b0f      	ldr	r3, [pc, #60]	; (8108 <_mainCRTStartup+0x5c>)
    80cc:	2b00      	cmp	r3, #0
    80ce:	d000      	beq.n	80d2 <_mainCRTStartup+0x26>
    80d0:	4798      	blx	r3
    80d2:	4b0e      	ldr	r3, [pc, #56]	; (810c <_mainCRTStartup+0x60>)
    80d4:	2b00      	cmp	r3, #0
    80d6:	d000      	beq.n	80da <_mainCRTStartup+0x2e>
    80d8:	4798      	blx	r3
    80da:	2000      	movs	r0, #0
    80dc:	2100      	movs	r1, #0
    80de:	0004      	movs	r4, r0
    80e0:	000d      	movs	r5, r1
    80e2:	480d      	ldr	r0, [pc, #52]	; (8118 <_mainCRTStartup+0x6c>)
    80e4:	2800      	cmp	r0, #0
    80e6:	d002      	beq.n	80ee <_mainCRTStartup+0x42>
    80e8:	480c      	ldr	r0, [pc, #48]	; (811c <_mainCRTStartup+0x70>)
    80ea:	f3af 8000 	nop.w
    80ee:	f00c fe25 	bl	14d3c <__libc_init_array>
    80f2:	0020      	movs	r0, r4
    80f4:	0029      	movs	r1, r5
    80f6:	f000 fce7 	bl	8ac8 <main>
    80fa:	f7ff ffa3 	bl	8044 <exit>
    80fe:	bf00      	nop
    8100:	00080000 	.word	0x00080000
	...
    8110:	00029ff8 	.word	0x00029ff8
    8114:	000388d8 	.word	0x000388d8
	...

00008120 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
    8120:	b580      	push	{r7, lr}
    8122:	b084      	sub	sp, #16
    8124:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
    8126:	463b      	mov	r3, r7
    8128:	2200      	movs	r2, #0
    812a:	601a      	str	r2, [r3, #0]
    812c:	605a      	str	r2, [r3, #4]
    812e:	609a      	str	r2, [r3, #8]
    8130:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
    8132:	4b44      	ldr	r3, [pc, #272]	; (8244 <MX_ADC1_Init+0x124>)
    8134:	4a44      	ldr	r2, [pc, #272]	; (8248 <MX_ADC1_Init+0x128>)
    8136:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    8138:	4b42      	ldr	r3, [pc, #264]	; (8244 <MX_ADC1_Init+0x124>)
    813a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    813e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
    8140:	4b40      	ldr	r3, [pc, #256]	; (8244 <MX_ADC1_Init+0x124>)
    8142:	2200      	movs	r2, #0
    8144:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
    8146:	4b3f      	ldr	r3, [pc, #252]	; (8244 <MX_ADC1_Init+0x124>)
    8148:	2201      	movs	r2, #1
    814a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
    814c:	4b3d      	ldr	r3, [pc, #244]	; (8244 <MX_ADC1_Init+0x124>)
    814e:	2201      	movs	r2, #1
    8150:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
    8152:	4b3c      	ldr	r3, [pc, #240]	; (8244 <MX_ADC1_Init+0x124>)
    8154:	2200      	movs	r2, #0
    8156:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    815a:	4b3a      	ldr	r3, [pc, #232]	; (8244 <MX_ADC1_Init+0x124>)
    815c:	2200      	movs	r2, #0
    815e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    8160:	4b38      	ldr	r3, [pc, #224]	; (8244 <MX_ADC1_Init+0x124>)
    8162:	4a3a      	ldr	r2, [pc, #232]	; (824c <MX_ADC1_Init+0x12c>)
    8164:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    8166:	4b37      	ldr	r3, [pc, #220]	; (8244 <MX_ADC1_Init+0x124>)
    8168:	2200      	movs	r2, #0
    816a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
    816c:	4b35      	ldr	r3, [pc, #212]	; (8244 <MX_ADC1_Init+0x124>)
    816e:	2206      	movs	r2, #6
    8170:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
    8172:	4b34      	ldr	r3, [pc, #208]	; (8244 <MX_ADC1_Init+0x124>)
    8174:	2201      	movs	r2, #1
    8176:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
    817a:	4b32      	ldr	r3, [pc, #200]	; (8244 <MX_ADC1_Init+0x124>)
    817c:	2200      	movs	r2, #0
    817e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
    8180:	4830      	ldr	r0, [pc, #192]	; (8244 <MX_ADC1_Init+0x124>)
    8182:	f002 ff8f 	bl	b0a4 <HAL_ADC_Init>
    8186:	4603      	mov	r3, r0
    8188:	2b00      	cmp	r3, #0
    818a:	d001      	beq.n	8190 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
    818c:	f000 fd91 	bl	8cb2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
    8190:	2303      	movs	r3, #3
    8192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
    8194:	2301      	movs	r3, #1
    8196:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
    8198:	2307      	movs	r3, #7
    819a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    819c:	463b      	mov	r3, r7
    819e:	4619      	mov	r1, r3
    81a0:	4828      	ldr	r0, [pc, #160]	; (8244 <MX_ADC1_Init+0x124>)
    81a2:	f002 ffc3 	bl	b12c <HAL_ADC_ConfigChannel>
    81a6:	4603      	mov	r3, r0
    81a8:	2b00      	cmp	r3, #0
    81aa:	d001      	beq.n	81b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
    81ac:	f000 fd81 	bl	8cb2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
    81b0:	2304      	movs	r3, #4
    81b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
    81b4:	2302      	movs	r3, #2
    81b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    81b8:	463b      	mov	r3, r7
    81ba:	4619      	mov	r1, r3
    81bc:	4821      	ldr	r0, [pc, #132]	; (8244 <MX_ADC1_Init+0x124>)
    81be:	f002 ffb5 	bl	b12c <HAL_ADC_ConfigChannel>
    81c2:	4603      	mov	r3, r0
    81c4:	2b00      	cmp	r3, #0
    81c6:	d001      	beq.n	81cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
    81c8:	f000 fd73 	bl	8cb2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
    81cc:	2309      	movs	r3, #9
    81ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
    81d0:	2303      	movs	r3, #3
    81d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    81d4:	463b      	mov	r3, r7
    81d6:	4619      	mov	r1, r3
    81d8:	481a      	ldr	r0, [pc, #104]	; (8244 <MX_ADC1_Init+0x124>)
    81da:	f002 ffa7 	bl	b12c <HAL_ADC_ConfigChannel>
    81de:	4603      	mov	r3, r0
    81e0:	2b00      	cmp	r3, #0
    81e2:	d001      	beq.n	81e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
    81e4:	f000 fd65 	bl	8cb2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
    81e8:	230a      	movs	r3, #10
    81ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
    81ec:	2304      	movs	r3, #4
    81ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    81f0:	463b      	mov	r3, r7
    81f2:	4619      	mov	r1, r3
    81f4:	4813      	ldr	r0, [pc, #76]	; (8244 <MX_ADC1_Init+0x124>)
    81f6:	f002 ff99 	bl	b12c <HAL_ADC_ConfigChannel>
    81fa:	4603      	mov	r3, r0
    81fc:	2b00      	cmp	r3, #0
    81fe:	d001      	beq.n	8204 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
    8200:	f000 fd57 	bl	8cb2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
    8204:	230c      	movs	r3, #12
    8206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
    8208:	2305      	movs	r3, #5
    820a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    820c:	463b      	mov	r3, r7
    820e:	4619      	mov	r1, r3
    8210:	480c      	ldr	r0, [pc, #48]	; (8244 <MX_ADC1_Init+0x124>)
    8212:	f002 ff8b 	bl	b12c <HAL_ADC_ConfigChannel>
    8216:	4603      	mov	r3, r0
    8218:	2b00      	cmp	r3, #0
    821a:	d001      	beq.n	8220 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
    821c:	f000 fd49 	bl	8cb2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
    8220:	230d      	movs	r3, #13
    8222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
    8224:	2306      	movs	r3, #6
    8226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    8228:	463b      	mov	r3, r7
    822a:	4619      	mov	r1, r3
    822c:	4805      	ldr	r0, [pc, #20]	; (8244 <MX_ADC1_Init+0x124>)
    822e:	f002 ff7d 	bl	b12c <HAL_ADC_ConfigChannel>
    8232:	4603      	mov	r3, r0
    8234:	2b00      	cmp	r3, #0
    8236:	d001      	beq.n	823c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
    8238:	f000 fd3b 	bl	8cb2 <Error_Handler>
  }

}
    823c:	bf00      	nop
    823e:	3710      	adds	r7, #16
    8240:	46bd      	mov	sp, r7
    8242:	bd80      	pop	{r7, pc}
    8244:	0002b550 	.word	0x0002b550
    8248:	40012000 	.word	0x40012000
    824c:	0f000001 	.word	0x0f000001

00008250 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
    8250:	b580      	push	{r7, lr}
    8252:	b08c      	sub	sp, #48	; 0x30
    8254:	af00      	add	r7, sp, #0
    8256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    8258:	f107 031c 	add.w	r3, r7, #28
    825c:	2200      	movs	r2, #0
    825e:	601a      	str	r2, [r3, #0]
    8260:	605a      	str	r2, [r3, #4]
    8262:	609a      	str	r2, [r3, #8]
    8264:	60da      	str	r2, [r3, #12]
    8266:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	681b      	ldr	r3, [r3, #0]
    826c:	4a45      	ldr	r2, [pc, #276]	; (8384 <HAL_ADC_MspInit+0x134>)
    826e:	4293      	cmp	r3, r2
    8270:	f040 8084 	bne.w	837c <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
    8274:	4b44      	ldr	r3, [pc, #272]	; (8388 <HAL_ADC_MspInit+0x138>)
    8276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8278:	4a43      	ldr	r2, [pc, #268]	; (8388 <HAL_ADC_MspInit+0x138>)
    827a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    827e:	6453      	str	r3, [r2, #68]	; 0x44
    8280:	4b41      	ldr	r3, [pc, #260]	; (8388 <HAL_ADC_MspInit+0x138>)
    8282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8284:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8288:	61bb      	str	r3, [r7, #24]
    828a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
    828c:	4b3e      	ldr	r3, [pc, #248]	; (8388 <HAL_ADC_MspInit+0x138>)
    828e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8290:	4a3d      	ldr	r2, [pc, #244]	; (8388 <HAL_ADC_MspInit+0x138>)
    8292:	f043 0304 	orr.w	r3, r3, #4
    8296:	6313      	str	r3, [r2, #48]	; 0x30
    8298:	4b3b      	ldr	r3, [pc, #236]	; (8388 <HAL_ADC_MspInit+0x138>)
    829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    829c:	f003 0304 	and.w	r3, r3, #4
    82a0:	617b      	str	r3, [r7, #20]
    82a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
    82a4:	4b38      	ldr	r3, [pc, #224]	; (8388 <HAL_ADC_MspInit+0x138>)
    82a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82a8:	4a37      	ldr	r2, [pc, #220]	; (8388 <HAL_ADC_MspInit+0x138>)
    82aa:	f043 0301 	orr.w	r3, r3, #1
    82ae:	6313      	str	r3, [r2, #48]	; 0x30
    82b0:	4b35      	ldr	r3, [pc, #212]	; (8388 <HAL_ADC_MspInit+0x138>)
    82b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82b4:	f003 0301 	and.w	r3, r3, #1
    82b8:	613b      	str	r3, [r7, #16]
    82ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
    82bc:	4b32      	ldr	r3, [pc, #200]	; (8388 <HAL_ADC_MspInit+0x138>)
    82be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82c0:	4a31      	ldr	r2, [pc, #196]	; (8388 <HAL_ADC_MspInit+0x138>)
    82c2:	f043 0302 	orr.w	r3, r3, #2
    82c6:	6313      	str	r3, [r2, #48]	; 0x30
    82c8:	4b2f      	ldr	r3, [pc, #188]	; (8388 <HAL_ADC_MspInit+0x138>)
    82ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82cc:	f003 0302 	and.w	r3, r3, #2
    82d0:	60fb      	str	r3, [r7, #12]
    82d2:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin;
    82d4:	230d      	movs	r3, #13
    82d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    82d8:	2303      	movs	r3, #3
    82da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    82dc:	2300      	movs	r3, #0
    82de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    82e0:	f107 031c 	add.w	r3, r7, #28
    82e4:	4619      	mov	r1, r3
    82e6:	4829      	ldr	r0, [pc, #164]	; (838c <HAL_ADC_MspInit+0x13c>)
    82e8:	f003 ffd0 	bl	c28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
    82ec:	2318      	movs	r3, #24
    82ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    82f0:	2303      	movs	r3, #3
    82f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    82f4:	2300      	movs	r3, #0
    82f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    82f8:	f107 031c 	add.w	r3, r7, #28
    82fc:	4619      	mov	r1, r3
    82fe:	4824      	ldr	r0, [pc, #144]	; (8390 <HAL_ADC_MspInit+0x140>)
    8300:	f003 ffc4 	bl	c28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2_Pin;
    8304:	2302      	movs	r3, #2
    8306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    8308:	2303      	movs	r3, #3
    830a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    830c:	2300      	movs	r3, #0
    830e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
    8310:	f107 031c 	add.w	r3, r7, #28
    8314:	4619      	mov	r1, r3
    8316:	481f      	ldr	r0, [pc, #124]	; (8394 <HAL_ADC_MspInit+0x144>)
    8318:	f003 ffb8 	bl	c28c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
    831c:	4b1e      	ldr	r3, [pc, #120]	; (8398 <HAL_ADC_MspInit+0x148>)
    831e:	4a1f      	ldr	r2, [pc, #124]	; (839c <HAL_ADC_MspInit+0x14c>)
    8320:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    8322:	4b1d      	ldr	r3, [pc, #116]	; (8398 <HAL_ADC_MspInit+0x148>)
    8324:	2200      	movs	r2, #0
    8326:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    8328:	4b1b      	ldr	r3, [pc, #108]	; (8398 <HAL_ADC_MspInit+0x148>)
    832a:	2200      	movs	r2, #0
    832c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    832e:	4b1a      	ldr	r3, [pc, #104]	; (8398 <HAL_ADC_MspInit+0x148>)
    8330:	2200      	movs	r2, #0
    8332:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    8334:	4b18      	ldr	r3, [pc, #96]	; (8398 <HAL_ADC_MspInit+0x148>)
    8336:	f44f 6280 	mov.w	r2, #1024	; 0x400
    833a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    833c:	4b16      	ldr	r3, [pc, #88]	; (8398 <HAL_ADC_MspInit+0x148>)
    833e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8342:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    8344:	4b14      	ldr	r3, [pc, #80]	; (8398 <HAL_ADC_MspInit+0x148>)
    8346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    834a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    834c:	4b12      	ldr	r3, [pc, #72]	; (8398 <HAL_ADC_MspInit+0x148>)
    834e:	f44f 7280 	mov.w	r2, #256	; 0x100
    8352:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    8354:	4b10      	ldr	r3, [pc, #64]	; (8398 <HAL_ADC_MspInit+0x148>)
    8356:	2200      	movs	r2, #0
    8358:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    835a:	4b0f      	ldr	r3, [pc, #60]	; (8398 <HAL_ADC_MspInit+0x148>)
    835c:	2200      	movs	r2, #0
    835e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
    8360:	480d      	ldr	r0, [pc, #52]	; (8398 <HAL_ADC_MspInit+0x148>)
    8362:	f003 fd37 	bl	bdd4 <HAL_DMA_Init>
    8366:	4603      	mov	r3, r0
    8368:	2b00      	cmp	r3, #0
    836a:	d001      	beq.n	8370 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
    836c:	f000 fca1 	bl	8cb2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	4a09      	ldr	r2, [pc, #36]	; (8398 <HAL_ADC_MspInit+0x148>)
    8374:	639a      	str	r2, [r3, #56]	; 0x38
    8376:	4a08      	ldr	r2, [pc, #32]	; (8398 <HAL_ADC_MspInit+0x148>)
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
    837c:	bf00      	nop
    837e:	3730      	adds	r7, #48	; 0x30
    8380:	46bd      	mov	sp, r7
    8382:	bd80      	pop	{r7, pc}
    8384:	40012000 	.word	0x40012000
    8388:	40023800 	.word	0x40023800
    838c:	40020800 	.word	0x40020800
    8390:	40020000 	.word	0x40020000
    8394:	40020400 	.word	0x40020400
    8398:	0002b598 	.word	0x0002b598
    839c:	40026470 	.word	0x40026470

000083a0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
    83a0:	b580      	push	{r7, lr}
    83a2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
    83a4:	4b17      	ldr	r3, [pc, #92]	; (8404 <MX_CAN1_Init+0x64>)
    83a6:	4a18      	ldr	r2, [pc, #96]	; (8408 <MX_CAN1_Init+0x68>)
    83a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
    83aa:	4b16      	ldr	r3, [pc, #88]	; (8404 <MX_CAN1_Init+0x64>)
    83ac:	2206      	movs	r2, #6
    83ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
    83b0:	4b14      	ldr	r3, [pc, #80]	; (8404 <MX_CAN1_Init+0x64>)
    83b2:	2200      	movs	r2, #0
    83b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
    83b6:	4b13      	ldr	r3, [pc, #76]	; (8404 <MX_CAN1_Init+0x64>)
    83b8:	2200      	movs	r2, #0
    83ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
    83bc:	4b11      	ldr	r3, [pc, #68]	; (8404 <MX_CAN1_Init+0x64>)
    83be:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
    83c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
    83c4:	4b0f      	ldr	r3, [pc, #60]	; (8404 <MX_CAN1_Init+0x64>)
    83c6:	2200      	movs	r2, #0
    83c8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
    83ca:	4b0e      	ldr	r3, [pc, #56]	; (8404 <MX_CAN1_Init+0x64>)
    83cc:	2200      	movs	r2, #0
    83ce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
    83d0:	4b0c      	ldr	r3, [pc, #48]	; (8404 <MX_CAN1_Init+0x64>)
    83d2:	2200      	movs	r2, #0
    83d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
    83d6:	4b0b      	ldr	r3, [pc, #44]	; (8404 <MX_CAN1_Init+0x64>)
    83d8:	2200      	movs	r2, #0
    83da:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
    83dc:	4b09      	ldr	r3, [pc, #36]	; (8404 <MX_CAN1_Init+0x64>)
    83de:	2201      	movs	r2, #1
    83e0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
    83e2:	4b08      	ldr	r3, [pc, #32]	; (8404 <MX_CAN1_Init+0x64>)
    83e4:	2200      	movs	r2, #0
    83e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
    83e8:	4b06      	ldr	r3, [pc, #24]	; (8404 <MX_CAN1_Init+0x64>)
    83ea:	2200      	movs	r2, #0
    83ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
    83ee:	4805      	ldr	r0, [pc, #20]	; (8404 <MX_CAN1_Init+0x64>)
    83f0:	f003 f8e0 	bl	b5b4 <HAL_CAN_Init>
    83f4:	4603      	mov	r3, r0
    83f6:	2b00      	cmp	r3, #0
    83f8:	d001      	beq.n	83fe <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
    83fa:	f000 fc5a 	bl	8cb2 <Error_Handler>
  }

}
    83fe:	bf00      	nop
    8400:	bd80      	pop	{r7, pc}
    8402:	bf00      	nop
    8404:	0002b5f8 	.word	0x0002b5f8
    8408:	40006400 	.word	0x40006400

0000840c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
    840c:	b580      	push	{r7, lr}
    840e:	b08a      	sub	sp, #40	; 0x28
    8410:	af00      	add	r7, sp, #0
    8412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    8414:	f107 0314 	add.w	r3, r7, #20
    8418:	2200      	movs	r2, #0
    841a:	601a      	str	r2, [r3, #0]
    841c:	605a      	str	r2, [r3, #4]
    841e:	609a      	str	r2, [r3, #8]
    8420:	60da      	str	r2, [r3, #12]
    8422:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
    8424:	687b      	ldr	r3, [r7, #4]
    8426:	681b      	ldr	r3, [r3, #0]
    8428:	4a1f      	ldr	r2, [pc, #124]	; (84a8 <HAL_CAN_MspInit+0x9c>)
    842a:	4293      	cmp	r3, r2
    842c:	d137      	bne.n	849e <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
    842e:	4b1f      	ldr	r3, [pc, #124]	; (84ac <HAL_CAN_MspInit+0xa0>)
    8430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8432:	4a1e      	ldr	r2, [pc, #120]	; (84ac <HAL_CAN_MspInit+0xa0>)
    8434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    8438:	6413      	str	r3, [r2, #64]	; 0x40
    843a:	4b1c      	ldr	r3, [pc, #112]	; (84ac <HAL_CAN_MspInit+0xa0>)
    843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    843e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8442:	613b      	str	r3, [r7, #16]
    8444:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
    8446:	4b19      	ldr	r3, [pc, #100]	; (84ac <HAL_CAN_MspInit+0xa0>)
    8448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    844a:	4a18      	ldr	r2, [pc, #96]	; (84ac <HAL_CAN_MspInit+0xa0>)
    844c:	f043 0308 	orr.w	r3, r3, #8
    8450:	6313      	str	r3, [r2, #48]	; 0x30
    8452:	4b16      	ldr	r3, [pc, #88]	; (84ac <HAL_CAN_MspInit+0xa0>)
    8454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8456:	f003 0308 	and.w	r3, r3, #8
    845a:	60fb      	str	r3, [r7, #12]
    845c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    845e:	2303      	movs	r3, #3
    8460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    8462:	2302      	movs	r3, #2
    8464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    8466:	2300      	movs	r3, #0
    8468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    846a:	2303      	movs	r3, #3
    846c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    846e:	2309      	movs	r3, #9
    8470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    8472:	f107 0314 	add.w	r3, r7, #20
    8476:	4619      	mov	r1, r3
    8478:	480d      	ldr	r0, [pc, #52]	; (84b0 <HAL_CAN_MspInit+0xa4>)
    847a:	f003 ff07 	bl	c28c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
    847e:	2200      	movs	r2, #0
    8480:	2105      	movs	r1, #5
    8482:	2014      	movs	r0, #20
    8484:	f003 fc7c 	bl	bd80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
    8488:	2014      	movs	r0, #20
    848a:	f003 fc95 	bl	bdb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
    848e:	2200      	movs	r2, #0
    8490:	2105      	movs	r1, #5
    8492:	2015      	movs	r0, #21
    8494:	f003 fc74 	bl	bd80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
    8498:	2015      	movs	r0, #21
    849a:	f003 fc8d 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
    849e:	bf00      	nop
    84a0:	3728      	adds	r7, #40	; 0x28
    84a2:	46bd      	mov	sp, r7
    84a4:	bd80      	pop	{r7, pc}
    84a6:	bf00      	nop
    84a8:	40006400 	.word	0x40006400
    84ac:	40023800 	.word	0x40023800
    84b0:	40020c00 	.word	0x40020c00

000084b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
    84b4:	b580      	push	{r7, lr}
    84b6:	b082      	sub	sp, #8
    84b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
    84ba:	4b36      	ldr	r3, [pc, #216]	; (8594 <MX_DMA_Init+0xe0>)
    84bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    84be:	4a35      	ldr	r2, [pc, #212]	; (8594 <MX_DMA_Init+0xe0>)
    84c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    84c4:	6313      	str	r3, [r2, #48]	; 0x30
    84c6:	4b33      	ldr	r3, [pc, #204]	; (8594 <MX_DMA_Init+0xe0>)
    84c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    84ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    84ce:	607b      	str	r3, [r7, #4]
    84d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
    84d2:	4b30      	ldr	r3, [pc, #192]	; (8594 <MX_DMA_Init+0xe0>)
    84d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    84d6:	4a2f      	ldr	r2, [pc, #188]	; (8594 <MX_DMA_Init+0xe0>)
    84d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    84dc:	6313      	str	r3, [r2, #48]	; 0x30
    84de:	4b2d      	ldr	r3, [pc, #180]	; (8594 <MX_DMA_Init+0xe0>)
    84e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    84e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    84e6:	603b      	str	r3, [r7, #0]
    84e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
    84ea:	2200      	movs	r2, #0
    84ec:	2105      	movs	r1, #5
    84ee:	200b      	movs	r0, #11
    84f0:	f003 fc46 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
    84f4:	200b      	movs	r0, #11
    84f6:	f003 fc5f 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
    84fa:	2200      	movs	r2, #0
    84fc:	2105      	movs	r1, #5
    84fe:	200c      	movs	r0, #12
    8500:	f003 fc3e 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
    8504:	200c      	movs	r0, #12
    8506:	f003 fc57 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
    850a:	2200      	movs	r2, #0
    850c:	2105      	movs	r1, #5
    850e:	200f      	movs	r0, #15
    8510:	f003 fc36 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
    8514:	200f      	movs	r0, #15
    8516:	f003 fc4f 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
    851a:	2200      	movs	r2, #0
    851c:	2105      	movs	r1, #5
    851e:	2010      	movs	r0, #16
    8520:	f003 fc2e 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
    8524:	2010      	movs	r0, #16
    8526:	f003 fc47 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
    852a:	2200      	movs	r2, #0
    852c:	2105      	movs	r1, #5
    852e:	2011      	movs	r0, #17
    8530:	f003 fc26 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
    8534:	2011      	movs	r0, #17
    8536:	f003 fc3f 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
    853a:	2200      	movs	r2, #0
    853c:	2105      	movs	r1, #5
    853e:	2038      	movs	r0, #56	; 0x38
    8540:	f003 fc1e 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
    8544:	2038      	movs	r0, #56	; 0x38
    8546:	f003 fc37 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
    854a:	2200      	movs	r2, #0
    854c:	2105      	movs	r1, #5
    854e:	2039      	movs	r0, #57	; 0x39
    8550:	f003 fc16 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
    8554:	2039      	movs	r0, #57	; 0x39
    8556:	f003 fc2f 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
    855a:	2200      	movs	r2, #0
    855c:	2105      	movs	r1, #5
    855e:	203a      	movs	r0, #58	; 0x3a
    8560:	f003 fc0e 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
    8564:	203a      	movs	r0, #58	; 0x3a
    8566:	f003 fc27 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
    856a:	2200      	movs	r2, #0
    856c:	2105      	movs	r1, #5
    856e:	203b      	movs	r0, #59	; 0x3b
    8570:	f003 fc06 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
    8574:	203b      	movs	r0, #59	; 0x3b
    8576:	f003 fc1f 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
    857a:	2200      	movs	r2, #0
    857c:	2105      	movs	r1, #5
    857e:	203c      	movs	r0, #60	; 0x3c
    8580:	f003 fbfe 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
    8584:	203c      	movs	r0, #60	; 0x3c
    8586:	f003 fc17 	bl	bdb8 <HAL_NVIC_EnableIRQ>

}
    858a:	bf00      	nop
    858c:	3708      	adds	r7, #8
    858e:	46bd      	mov	sp, r7
    8590:	bd80      	pop	{r7, pc}
    8592:	bf00      	nop
    8594:	40023800 	.word	0x40023800

00008598 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
    8598:	b480      	push	{r7}
    859a:	b085      	sub	sp, #20
    859c:	af00      	add	r7, sp, #0
    859e:	60f8      	str	r0, [r7, #12]
    85a0:	60b9      	str	r1, [r7, #8]
    85a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
    85a4:	68fb      	ldr	r3, [r7, #12]
    85a6:	4a07      	ldr	r2, [pc, #28]	; (85c4 <vApplicationGetIdleTaskMemory+0x2c>)
    85a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
    85aa:	68bb      	ldr	r3, [r7, #8]
    85ac:	4a06      	ldr	r2, [pc, #24]	; (85c8 <vApplicationGetIdleTaskMemory+0x30>)
    85ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    85b0:	687b      	ldr	r3, [r7, #4]
    85b2:	2280      	movs	r2, #128	; 0x80
    85b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
    85b6:	bf00      	nop
    85b8:	3714      	adds	r7, #20
    85ba:	46bd      	mov	sp, r7
    85bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    85c0:	4770      	bx	lr
    85c2:	bf00      	nop
    85c4:	0002a014 	.word	0x0002a014
    85c8:	0002a068 	.word	0x0002a068

000085cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
    85cc:	b5b0      	push	{r4, r5, r7, lr}
    85ce:	b08e      	sub	sp, #56	; 0x38
    85d0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
    85d2:	4b14      	ldr	r3, [pc, #80]	; (8624 <MX_FREERTOS_Init+0x58>)
    85d4:	f107 041c 	add.w	r4, r7, #28
    85d8:	461d      	mov	r5, r3
    85da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    85dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    85de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    85e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
    85e6:	f107 031c 	add.w	r3, r7, #28
    85ea:	2100      	movs	r1, #0
    85ec:	4618      	mov	r0, r3
    85ee:	f007 ff25 	bl	1043c <osThreadCreate>
    85f2:	4602      	mov	r2, r0
    85f4:	4b0c      	ldr	r3, [pc, #48]	; (8628 <MX_FREERTOS_Init+0x5c>)
    85f6:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
    85f8:	4b0c      	ldr	r3, [pc, #48]	; (862c <MX_FREERTOS_Init+0x60>)
    85fa:	463c      	mov	r4, r7
    85fc:	461d      	mov	r5, r3
    85fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    8606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
    860a:	463b      	mov	r3, r7
    860c:	2100      	movs	r1, #0
    860e:	4618      	mov	r0, r3
    8610:	f007 ff14 	bl	1043c <osThreadCreate>
    8614:	4602      	mov	r2, r0
    8616:	4b06      	ldr	r3, [pc, #24]	; (8630 <MX_FREERTOS_Init+0x64>)
    8618:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
    861a:	bf00      	nop
    861c:	3738      	adds	r7, #56	; 0x38
    861e:	46bd      	mov	sp, r7
    8620:	bdb0      	pop	{r4, r5, r7, pc}
    8622:	bf00      	nop
    8624:	00019544 	.word	0x00019544
    8628:	0002f620 	.word	0x0002f620
    862c:	0001956c 	.word	0x0001956c
    8630:	0002f678 	.word	0x0002f678

00008634 <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
    8634:	b580      	push	{r7, lr}
    8636:	b084      	sub	sp, #16
    8638:	af00      	add	r7, sp, #0
    863a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
    863c:	f008 fab4 	bl	10ba8 <xTaskGetTickCount>
    8640:	4603      	mov	r3, r0
    8642:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
    8644:	2301      	movs	r3, #1
    8646:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
    8648:	4b0b      	ldr	r3, [pc, #44]	; (8678 <sendTaskFunc+0x44>)
    864a:	681b      	ldr	r3, [r3, #0]
    864c:	3301      	adds	r3, #1
    864e:	4a0a      	ldr	r2, [pc, #40]	; (8678 <sendTaskFunc+0x44>)
    8650:	6013      	str	r3, [r2, #0]
    8652:	4b09      	ldr	r3, [pc, #36]	; (8678 <sendTaskFunc+0x44>)
    8654:	681a      	ldr	r2, [r3, #0]
    8656:	4b09      	ldr	r3, [pc, #36]	; (867c <sendTaskFunc+0x48>)
    8658:	681b      	ldr	r3, [r3, #0]
    865a:	429a      	cmp	r2, r3
    865c:	db04      	blt.n	8668 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
    865e:	4b06      	ldr	r3, [pc, #24]	; (8678 <sendTaskFunc+0x44>)
    8660:	2200      	movs	r2, #0
    8662:	601a      	str	r2, [r3, #0]
		  serialDisplay();
    8664:	f009 f84e 	bl	11704 <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
    8668:	f107 0308 	add.w	r3, r7, #8
    866c:	68f9      	ldr	r1, [r7, #12]
    866e:	4618      	mov	r0, r3
    8670:	f008 f90c 	bl	1088c <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
    8674:	e7e8      	b.n	8648 <sendTaskFunc+0x14>
    8676:	bf00      	nop
    8678:	0002a268 	.word	0x0002a268
    867c:	00029cd0 	.word	0x00029cd0

00008680 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
    8680:	b580      	push	{r7, lr}
    8682:	b084      	sub	sp, #16
    8684:	af00      	add	r7, sp, #0
    8686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
    8688:	f008 fa8e 	bl	10ba8 <xTaskGetTickCount>
    868c:	4603      	mov	r3, r0
    868e:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
    8690:	2301      	movs	r3, #1
    8692:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
    8694:	f009 fabe 	bl	11c14 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_TerminalHandler();
    8698:	f00c fa1c 	bl	14ad4 <Usart_TerminalHandler>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
    869c:	4b0c      	ldr	r3, [pc, #48]	; (86d0 <controlTaskFunc+0x50>)
    869e:	681b      	ldr	r3, [r3, #0]
    86a0:	3301      	adds	r3, #1
    86a2:	4a0b      	ldr	r2, [pc, #44]	; (86d0 <controlTaskFunc+0x50>)
    86a4:	6013      	str	r3, [r2, #0]
    86a6:	4b0a      	ldr	r3, [pc, #40]	; (86d0 <controlTaskFunc+0x50>)
    86a8:	681a      	ldr	r2, [r3, #0]
    86aa:	4b0a      	ldr	r3, [pc, #40]	; (86d4 <controlTaskFunc+0x54>)
    86ac:	681b      	ldr	r3, [r3, #0]
    86ae:	429a      	cmp	r2, r3
    86b0:	db04      	blt.n	86bc <controlTaskFunc+0x3c>
	 {
		loopTick=0;
    86b2:	4b07      	ldr	r3, [pc, #28]	; (86d0 <controlTaskFunc+0x50>)
    86b4:	2200      	movs	r2, #0
    86b6:	601a      	str	r2, [r3, #0]
		loop();
    86b8:	f009 f81a 	bl	116f0 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
    86bc:	f00a fa3c 	bl	12b38 <PWMBoardSPI_flushDutyAll>
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
    86c0:	f107 0308 	add.w	r3, r7, #8
    86c4:	68f9      	ldr	r1, [r7, #12]
    86c6:	4618      	mov	r0, r3
    86c8:	f008 f8e0 	bl	1088c <vTaskDelayUntil>
			ADBoard_updateVoltage();
    86cc:	e7e2      	b.n	8694 <controlTaskFunc+0x14>
    86ce:	bf00      	nop
    86d0:	0002a26c 	.word	0x0002a26c
    86d4:	00029ccc 	.word	0x00029ccc

000086d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
    86d8:	b580      	push	{r7, lr}
    86da:	b08c      	sub	sp, #48	; 0x30
    86dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    86de:	f107 031c 	add.w	r3, r7, #28
    86e2:	2200      	movs	r2, #0
    86e4:	601a      	str	r2, [r3, #0]
    86e6:	605a      	str	r2, [r3, #4]
    86e8:	609a      	str	r2, [r3, #8]
    86ea:	60da      	str	r2, [r3, #12]
    86ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
    86ee:	4b65      	ldr	r3, [pc, #404]	; (8884 <MX_GPIO_Init+0x1ac>)
    86f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    86f2:	4a64      	ldr	r2, [pc, #400]	; (8884 <MX_GPIO_Init+0x1ac>)
    86f4:	f043 0310 	orr.w	r3, r3, #16
    86f8:	6313      	str	r3, [r2, #48]	; 0x30
    86fa:	4b62      	ldr	r3, [pc, #392]	; (8884 <MX_GPIO_Init+0x1ac>)
    86fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    86fe:	f003 0310 	and.w	r3, r3, #16
    8702:	61bb      	str	r3, [r7, #24]
    8704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
    8706:	4b5f      	ldr	r3, [pc, #380]	; (8884 <MX_GPIO_Init+0x1ac>)
    8708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    870a:	4a5e      	ldr	r2, [pc, #376]	; (8884 <MX_GPIO_Init+0x1ac>)
    870c:	f043 0320 	orr.w	r3, r3, #32
    8710:	6313      	str	r3, [r2, #48]	; 0x30
    8712:	4b5c      	ldr	r3, [pc, #368]	; (8884 <MX_GPIO_Init+0x1ac>)
    8714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8716:	f003 0320 	and.w	r3, r3, #32
    871a:	617b      	str	r3, [r7, #20]
    871c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
    871e:	4b59      	ldr	r3, [pc, #356]	; (8884 <MX_GPIO_Init+0x1ac>)
    8720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8722:	4a58      	ldr	r2, [pc, #352]	; (8884 <MX_GPIO_Init+0x1ac>)
    8724:	f043 0304 	orr.w	r3, r3, #4
    8728:	6313      	str	r3, [r2, #48]	; 0x30
    872a:	4b56      	ldr	r3, [pc, #344]	; (8884 <MX_GPIO_Init+0x1ac>)
    872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    872e:	f003 0304 	and.w	r3, r3, #4
    8732:	613b      	str	r3, [r7, #16]
    8734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
    8736:	4b53      	ldr	r3, [pc, #332]	; (8884 <MX_GPIO_Init+0x1ac>)
    8738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    873a:	4a52      	ldr	r2, [pc, #328]	; (8884 <MX_GPIO_Init+0x1ac>)
    873c:	f043 0301 	orr.w	r3, r3, #1
    8740:	6313      	str	r3, [r2, #48]	; 0x30
    8742:	4b50      	ldr	r3, [pc, #320]	; (8884 <MX_GPIO_Init+0x1ac>)
    8744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8746:	f003 0301 	and.w	r3, r3, #1
    874a:	60fb      	str	r3, [r7, #12]
    874c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
    874e:	4b4d      	ldr	r3, [pc, #308]	; (8884 <MX_GPIO_Init+0x1ac>)
    8750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8752:	4a4c      	ldr	r2, [pc, #304]	; (8884 <MX_GPIO_Init+0x1ac>)
    8754:	f043 0302 	orr.w	r3, r3, #2
    8758:	6313      	str	r3, [r2, #48]	; 0x30
    875a:	4b4a      	ldr	r3, [pc, #296]	; (8884 <MX_GPIO_Init+0x1ac>)
    875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    875e:	f003 0302 	and.w	r3, r3, #2
    8762:	60bb      	str	r3, [r7, #8]
    8764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
    8766:	4b47      	ldr	r3, [pc, #284]	; (8884 <MX_GPIO_Init+0x1ac>)
    8768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    876a:	4a46      	ldr	r2, [pc, #280]	; (8884 <MX_GPIO_Init+0x1ac>)
    876c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8770:	6313      	str	r3, [r2, #48]	; 0x30
    8772:	4b44      	ldr	r3, [pc, #272]	; (8884 <MX_GPIO_Init+0x1ac>)
    8774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8776:	f003 0340 	and.w	r3, r3, #64	; 0x40
    877a:	607b      	str	r3, [r7, #4]
    877c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
    877e:	4b41      	ldr	r3, [pc, #260]	; (8884 <MX_GPIO_Init+0x1ac>)
    8780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8782:	4a40      	ldr	r2, [pc, #256]	; (8884 <MX_GPIO_Init+0x1ac>)
    8784:	f043 0308 	orr.w	r3, r3, #8
    8788:	6313      	str	r3, [r2, #48]	; 0x30
    878a:	4b3e      	ldr	r3, [pc, #248]	; (8884 <MX_GPIO_Init+0x1ac>)
    878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    878e:	f003 0308 	and.w	r3, r3, #8
    8792:	603b      	str	r3, [r7, #0]
    8794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
    8796:	2200      	movs	r2, #0
    8798:	f240 119b 	movw	r1, #411	; 0x19b
    879c:	483a      	ldr	r0, [pc, #232]	; (8888 <MX_GPIO_Init+0x1b0>)
    879e:	f003 ff1f 	bl	c5e0 <HAL_GPIO_WritePin>
                          |DO_10_Pin|DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
    87a2:	2200      	movs	r2, #0
    87a4:	f64f 5138 	movw	r1, #64824	; 0xfd38
    87a8:	4838      	ldr	r0, [pc, #224]	; (888c <MX_GPIO_Init+0x1b4>)
    87aa:	f003 ff19 	bl	c5e0 <HAL_GPIO_WritePin>
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
    87ae:	f240 139b 	movw	r3, #411	; 0x19b
    87b2:	61fb      	str	r3, [r7, #28]
                          |DO_10_Pin|DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    87b4:	2301      	movs	r3, #1
    87b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    87b8:	2302      	movs	r3, #2
    87ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    87bc:	2300      	movs	r3, #0
    87be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
    87c0:	f107 031c 	add.w	r3, r7, #28
    87c4:	4619      	mov	r1, r3
    87c6:	4830      	ldr	r0, [pc, #192]	; (8888 <MX_GPIO_Init+0x1b0>)
    87c8:	f003 fd60 	bl	c28c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
    87cc:	f64f 5338 	movw	r3, #64824	; 0xfd38
    87d0:	61fb      	str	r3, [r7, #28]
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    87d2:	2301      	movs	r3, #1
    87d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    87d6:	2302      	movs	r3, #2
    87d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    87da:	2300      	movs	r3, #0
    87dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
    87de:	f107 031c 	add.w	r3, r7, #28
    87e2:	4619      	mov	r1, r3
    87e4:	4829      	ldr	r0, [pc, #164]	; (888c <MX_GPIO_Init+0x1b4>)
    87e6:	f003 fd51 	bl	c28c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
    87ea:	233f      	movs	r3, #63	; 0x3f
    87ec:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    87ee:	4b28      	ldr	r3, [pc, #160]	; (8890 <MX_GPIO_Init+0x1b8>)
    87f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    87f2:	2302      	movs	r3, #2
    87f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
    87f6:	f107 031c 	add.w	r3, r7, #28
    87fa:	4619      	mov	r1, r3
    87fc:	4825      	ldr	r0, [pc, #148]	; (8894 <MX_GPIO_Init+0x1bc>)
    87fe:	f003 fd45 	bl	c28c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
    8802:	239c      	movs	r3, #156	; 0x9c
    8804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    8806:	2300      	movs	r3, #0
    8808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    880a:	2300      	movs	r3, #0
    880c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    880e:	f107 031c 	add.w	r3, r7, #28
    8812:	4619      	mov	r1, r3
    8814:	4820      	ldr	r0, [pc, #128]	; (8898 <MX_GPIO_Init+0x1c0>)
    8816:	f003 fd39 	bl	c28c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
    881a:	2200      	movs	r2, #0
    881c:	2105      	movs	r1, #5
    881e:	2006      	movs	r0, #6
    8820:	f003 faae 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
    8824:	2006      	movs	r0, #6
    8826:	f003 fac7 	bl	bdb8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
    882a:	2200      	movs	r2, #0
    882c:	2105      	movs	r1, #5
    882e:	2007      	movs	r0, #7
    8830:	f003 faa6 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
    8834:	2007      	movs	r0, #7
    8836:	f003 fabf 	bl	bdb8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
    883a:	2200      	movs	r2, #0
    883c:	2105      	movs	r1, #5
    883e:	2008      	movs	r0, #8
    8840:	f003 fa9e 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
    8844:	2008      	movs	r0, #8
    8846:	f003 fab7 	bl	bdb8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
    884a:	2200      	movs	r2, #0
    884c:	2105      	movs	r1, #5
    884e:	2009      	movs	r0, #9
    8850:	f003 fa96 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
    8854:	2009      	movs	r0, #9
    8856:	f003 faaf 	bl	bdb8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
    885a:	2200      	movs	r2, #0
    885c:	2105      	movs	r1, #5
    885e:	200a      	movs	r0, #10
    8860:	f003 fa8e 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
    8864:	200a      	movs	r0, #10
    8866:	f003 faa7 	bl	bdb8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
    886a:	2200      	movs	r2, #0
    886c:	2105      	movs	r1, #5
    886e:	2017      	movs	r0, #23
    8870:	f003 fa86 	bl	bd80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
    8874:	2017      	movs	r0, #23
    8876:	f003 fa9f 	bl	bdb8 <HAL_NVIC_EnableIRQ>

}
    887a:	bf00      	nop
    887c:	3730      	adds	r7, #48	; 0x30
    887e:	46bd      	mov	sp, r7
    8880:	bd80      	pop	{r7, pc}
    8882:	bf00      	nop
    8884:	40023800 	.word	0x40023800
    8888:	40021000 	.word	0x40021000
    888c:	40021400 	.word	0x40021400
    8890:	10210000 	.word	0x10210000
    8894:	40021800 	.word	0x40021800
    8898:	40020c00 	.word	0x40020c00

0000889c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
    889c:	b580      	push	{r7, lr}
    889e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
    88a0:	4b1b      	ldr	r3, [pc, #108]	; (8910 <MX_I2C1_Init+0x74>)
    88a2:	4a1c      	ldr	r2, [pc, #112]	; (8914 <MX_I2C1_Init+0x78>)
    88a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
    88a6:	4b1a      	ldr	r3, [pc, #104]	; (8910 <MX_I2C1_Init+0x74>)
    88a8:	4a1b      	ldr	r2, [pc, #108]	; (8918 <MX_I2C1_Init+0x7c>)
    88aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
    88ac:	4b18      	ldr	r3, [pc, #96]	; (8910 <MX_I2C1_Init+0x74>)
    88ae:	2200      	movs	r2, #0
    88b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    88b2:	4b17      	ldr	r3, [pc, #92]	; (8910 <MX_I2C1_Init+0x74>)
    88b4:	2201      	movs	r2, #1
    88b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    88b8:	4b15      	ldr	r3, [pc, #84]	; (8910 <MX_I2C1_Init+0x74>)
    88ba:	2200      	movs	r2, #0
    88bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
    88be:	4b14      	ldr	r3, [pc, #80]	; (8910 <MX_I2C1_Init+0x74>)
    88c0:	2200      	movs	r2, #0
    88c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
    88c4:	4b12      	ldr	r3, [pc, #72]	; (8910 <MX_I2C1_Init+0x74>)
    88c6:	2200      	movs	r2, #0
    88c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    88ca:	4b11      	ldr	r3, [pc, #68]	; (8910 <MX_I2C1_Init+0x74>)
    88cc:	2200      	movs	r2, #0
    88ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    88d0:	4b0f      	ldr	r3, [pc, #60]	; (8910 <MX_I2C1_Init+0x74>)
    88d2:	2200      	movs	r2, #0
    88d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    88d6:	480e      	ldr	r0, [pc, #56]	; (8910 <MX_I2C1_Init+0x74>)
    88d8:	f003 fe9c 	bl	c614 <HAL_I2C_Init>
    88dc:	4603      	mov	r3, r0
    88de:	2b00      	cmp	r3, #0
    88e0:	d001      	beq.n	88e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
    88e2:	f000 f9e6 	bl	8cb2 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
    88e6:	2100      	movs	r1, #0
    88e8:	4809      	ldr	r0, [pc, #36]	; (8910 <MX_I2C1_Init+0x74>)
    88ea:	f003 ff23 	bl	c734 <HAL_I2CEx_ConfigAnalogFilter>
    88ee:	4603      	mov	r3, r0
    88f0:	2b00      	cmp	r3, #0
    88f2:	d001      	beq.n	88f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
    88f4:	f000 f9dd 	bl	8cb2 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
    88f8:	2100      	movs	r1, #0
    88fa:	4805      	ldr	r0, [pc, #20]	; (8910 <MX_I2C1_Init+0x74>)
    88fc:	f003 ff65 	bl	c7ca <HAL_I2CEx_ConfigDigitalFilter>
    8900:	4603      	mov	r3, r0
    8902:	2b00      	cmp	r3, #0
    8904:	d001      	beq.n	890a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
    8906:	f000 f9d4 	bl	8cb2 <Error_Handler>
  }

}
    890a:	bf00      	nop
    890c:	bd80      	pop	{r7, pc}
    890e:	bf00      	nop
    8910:	00033730 	.word	0x00033730
    8914:	40005400 	.word	0x40005400
    8918:	6000030d 	.word	0x6000030d

0000891c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
    891c:	b580      	push	{r7, lr}
    891e:	b08a      	sub	sp, #40	; 0x28
    8920:	af00      	add	r7, sp, #0
    8922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    8924:	f107 0314 	add.w	r3, r7, #20
    8928:	2200      	movs	r2, #0
    892a:	601a      	str	r2, [r3, #0]
    892c:	605a      	str	r2, [r3, #4]
    892e:	609a      	str	r2, [r3, #8]
    8930:	60da      	str	r2, [r3, #12]
    8932:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
    8934:	687b      	ldr	r3, [r7, #4]
    8936:	681b      	ldr	r3, [r3, #0]
    8938:	4a2e      	ldr	r2, [pc, #184]	; (89f4 <HAL_I2C_MspInit+0xd8>)
    893a:	4293      	cmp	r3, r2
    893c:	d156      	bne.n	89ec <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
    893e:	4b2e      	ldr	r3, [pc, #184]	; (89f8 <HAL_I2C_MspInit+0xdc>)
    8940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8942:	4a2d      	ldr	r2, [pc, #180]	; (89f8 <HAL_I2C_MspInit+0xdc>)
    8944:	f043 0302 	orr.w	r3, r3, #2
    8948:	6313      	str	r3, [r2, #48]	; 0x30
    894a:	4b2b      	ldr	r3, [pc, #172]	; (89f8 <HAL_I2C_MspInit+0xdc>)
    894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    894e:	f003 0302 	and.w	r3, r3, #2
    8952:	613b      	str	r3, [r7, #16]
    8954:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    8956:	f44f 7340 	mov.w	r3, #768	; 0x300
    895a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    895c:	2312      	movs	r3, #18
    895e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    8960:	2301      	movs	r3, #1
    8962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    8964:	2303      	movs	r3, #3
    8966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    8968:	2304      	movs	r3, #4
    896a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    896c:	f107 0314 	add.w	r3, r7, #20
    8970:	4619      	mov	r1, r3
    8972:	4822      	ldr	r0, [pc, #136]	; (89fc <HAL_I2C_MspInit+0xe0>)
    8974:	f003 fc8a 	bl	c28c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    8978:	4b1f      	ldr	r3, [pc, #124]	; (89f8 <HAL_I2C_MspInit+0xdc>)
    897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    897c:	4a1e      	ldr	r2, [pc, #120]	; (89f8 <HAL_I2C_MspInit+0xdc>)
    897e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    8982:	6413      	str	r3, [r2, #64]	; 0x40
    8984:	4b1c      	ldr	r3, [pc, #112]	; (89f8 <HAL_I2C_MspInit+0xdc>)
    8986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    898c:	60fb      	str	r3, [r7, #12]
    898e:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    8990:	4b1b      	ldr	r3, [pc, #108]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    8992:	4a1c      	ldr	r2, [pc, #112]	; (8a04 <HAL_I2C_MspInit+0xe8>)
    8994:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    8996:	4b1a      	ldr	r3, [pc, #104]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    8998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    899c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    899e:	4b18      	ldr	r3, [pc, #96]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89a0:	2240      	movs	r2, #64	; 0x40
    89a2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    89a4:	4b16      	ldr	r3, [pc, #88]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89a6:	2200      	movs	r2, #0
    89a8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
    89aa:	4b15      	ldr	r3, [pc, #84]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    89b0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    89b2:	4b13      	ldr	r3, [pc, #76]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89b4:	2200      	movs	r2, #0
    89b6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    89b8:	4b11      	ldr	r3, [pc, #68]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89ba:	2200      	movs	r2, #0
    89bc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    89be:	4b10      	ldr	r3, [pc, #64]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89c0:	2200      	movs	r2, #0
    89c2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    89c4:	4b0e      	ldr	r3, [pc, #56]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89c6:	2200      	movs	r2, #0
    89c8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    89ca:	4b0d      	ldr	r3, [pc, #52]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89cc:	2200      	movs	r2, #0
    89ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
    89d0:	480b      	ldr	r0, [pc, #44]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89d2:	f003 f9ff 	bl	bdd4 <HAL_DMA_Init>
    89d6:	4603      	mov	r3, r0
    89d8:	2b00      	cmp	r3, #0
    89da:	d001      	beq.n	89e0 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
    89dc:	f000 f969 	bl	8cb2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	4a07      	ldr	r2, [pc, #28]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89e4:	639a      	str	r2, [r3, #56]	; 0x38
    89e6:	4a06      	ldr	r2, [pc, #24]	; (8a00 <HAL_I2C_MspInit+0xe4>)
    89e8:	687b      	ldr	r3, [r7, #4]
    89ea:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
    89ec:	bf00      	nop
    89ee:	3728      	adds	r7, #40	; 0x28
    89f0:	46bd      	mov	sp, r7
    89f2:	bd80      	pop	{r7, pc}
    89f4:	40005400 	.word	0x40005400
    89f8:	40023800 	.word	0x40023800
    89fc:	40020400 	.word	0x40020400
    8a00:	000336d0 	.word	0x000336d0
    8a04:	400260a0 	.word	0x400260a0

00008a08 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
    8a08:	b480      	push	{r7}
    8a0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    8a0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8a10:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
    8a14:	4b0b      	ldr	r3, [pc, #44]	; (8a44 <SCB_EnableICache+0x3c>)
    8a16:	2200      	movs	r2, #0
    8a18:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
    8a1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8a20:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
    8a24:	4b07      	ldr	r3, [pc, #28]	; (8a44 <SCB_EnableICache+0x3c>)
    8a26:	695b      	ldr	r3, [r3, #20]
    8a28:	4a06      	ldr	r2, [pc, #24]	; (8a44 <SCB_EnableICache+0x3c>)
    8a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8a2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    8a30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8a34:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
    8a38:	bf00      	nop
    8a3a:	46bd      	mov	sp, r7
    8a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a40:	4770      	bx	lr
    8a42:	bf00      	nop
    8a44:	e000ed00 	.word	0xe000ed00

00008a48 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
    8a48:	b480      	push	{r7}
    8a4a:	b085      	sub	sp, #20
    8a4c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
    8a4e:	4b1d      	ldr	r3, [pc, #116]	; (8ac4 <SCB_EnableDCache+0x7c>)
    8a50:	2200      	movs	r2, #0
    8a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    8a56:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
    8a5a:	4b1a      	ldr	r3, [pc, #104]	; (8ac4 <SCB_EnableDCache+0x7c>)
    8a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    8a60:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    8a62:	687b      	ldr	r3, [r7, #4]
    8a64:	0b5b      	lsrs	r3, r3, #13
    8a66:	f3c3 030e 	ubfx	r3, r3, #0, #15
    8a6a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
    8a6c:	687b      	ldr	r3, [r7, #4]
    8a6e:	08db      	lsrs	r3, r3, #3
    8a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
    8a74:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
    8a76:	68fb      	ldr	r3, [r7, #12]
    8a78:	015a      	lsls	r2, r3, #5
    8a7a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
    8a7e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
    8a80:	68ba      	ldr	r2, [r7, #8]
    8a82:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
    8a84:	490f      	ldr	r1, [pc, #60]	; (8ac4 <SCB_EnableDCache+0x7c>)
    8a86:	4313      	orrs	r3, r2
    8a88:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    8a8c:	68bb      	ldr	r3, [r7, #8]
    8a8e:	1e5a      	subs	r2, r3, #1
    8a90:	60ba      	str	r2, [r7, #8]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d1ef      	bne.n	8a76 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
    8a96:	68fb      	ldr	r3, [r7, #12]
    8a98:	1e5a      	subs	r2, r3, #1
    8a9a:	60fa      	str	r2, [r7, #12]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d1e5      	bne.n	8a6c <SCB_EnableDCache+0x24>
    8aa0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
    8aa4:	4b07      	ldr	r3, [pc, #28]	; (8ac4 <SCB_EnableDCache+0x7c>)
    8aa6:	695b      	ldr	r3, [r3, #20]
    8aa8:	4a06      	ldr	r2, [pc, #24]	; (8ac4 <SCB_EnableDCache+0x7c>)
    8aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8aae:	6153      	str	r3, [r2, #20]
    8ab0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8ab4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
    8ab8:	bf00      	nop
    8aba:	3714      	adds	r7, #20
    8abc:	46bd      	mov	sp, r7
    8abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac2:	4770      	bx	lr
    8ac4:	e000ed00 	.word	0xe000ed00

00008ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    8ac8:	b580      	push	{r7, lr}
    8aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
    8acc:	f7ff ff9c 	bl	8a08 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
    8ad0:	f7ff ffba 	bl	8a48 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
    8ad4:	f002 faaa 	bl	b02c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
    8ad8:	f000 f83c 	bl	8b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
    8adc:	f7ff fdfc 	bl	86d8 <MX_GPIO_Init>
  MX_DMA_Init();
    8ae0:	f7ff fce8 	bl	84b4 <MX_DMA_Init>
  MX_ADC1_Init();
    8ae4:	f7ff fb1c 	bl	8120 <MX_ADC1_Init>
  MX_TIM1_Init();
    8ae8:	f000 fcea 	bl	94c0 <MX_TIM1_Init>
  MX_TIM2_Init();
    8aec:	f000 fda2 	bl	9634 <MX_TIM2_Init>
  MX_TIM3_Init();
    8af0:	f000 fe2e 	bl	9750 <MX_TIM3_Init>
  MX_TIM4_Init();
    8af4:	f000 fea8 	bl	9848 <MX_TIM4_Init>
  MX_TIM7_Init();
    8af8:	f000 ff22 	bl	9940 <MX_TIM7_Init>
  MX_TIM8_Init();
    8afc:	f000 ff56 	bl	99ac <MX_TIM8_Init>
  MX_TIM9_Init();
    8b00:	f001 f80e 	bl	9b20 <MX_TIM9_Init>
  MX_TIM10_Init();
    8b04:	f001 f87a 	bl	9bfc <MX_TIM10_Init>
  MX_TIM11_Init();
    8b08:	f001 f8c6 	bl	9c98 <MX_TIM11_Init>
  MX_TIM14_Init();
    8b0c:	f001 f912 	bl	9d34 <MX_TIM14_Init>
  MX_SPI1_Init();
    8b10:	f000 f8d6 	bl	8cc0 <MX_SPI1_Init>
  MX_SPI3_Init();
    8b14:	f000 f90c 	bl	8d30 <MX_SPI3_Init>
  MX_SPI4_Init();
    8b18:	f000 f948 	bl	8dac <MX_SPI4_Init>
  MX_SPI6_Init();
    8b1c:	f000 f984 	bl	8e28 <MX_SPI6_Init>
  MX_USART1_UART_Init();
    8b20:	f001 fbe4 	bl	a2ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
    8b24:	f001 fc42 	bl	a3ac <MX_USART3_UART_Init>
  MX_I2C1_Init();
    8b28:	f7ff feb8 	bl	889c <MX_I2C1_Init>
  MX_USART2_UART_Init();
    8b2c:	f001 fc0e 	bl	a34c <MX_USART2_UART_Init>
  MX_CAN1_Init();
    8b30:	f7ff fc36 	bl	83a0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
    8b34:	f00b fd5a 	bl	145ec <my_UsartInit>

	/*******************************Analog init***************************/
	//AnaBuiltInStart();

#if (ADBOARD_NUM>0)
	ADBoard_Init();
    8b38:	f009 f892 	bl	11c60 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
    8b3c:	f00a fdce 	bl	136dc <PWMBuiltIn_init>

#if (PWMBOARDSPI_NUM>0)
	PWMBoardSPI_init();
    8b40:	f00a f81c 	bl	12b7c <PWMBoardSPI_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
    8b44:	f008 fdc0 	bl	116c8 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
    8b48:	f7ff fd40 	bl	85cc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
    8b4c:	f007 fc6f 	bl	1042e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    8b50:	e7fe      	b.n	8b50 <main+0x88>
	...

00008b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    8b54:	b580      	push	{r7, lr}
    8b56:	b0b8      	sub	sp, #224	; 0xe0
    8b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    8b5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
    8b5e:	2234      	movs	r2, #52	; 0x34
    8b60:	2100      	movs	r1, #0
    8b62:	4618      	mov	r0, r3
    8b64:	f00c f921 	bl	14daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    8b68:	f107 0398 	add.w	r3, r7, #152	; 0x98
    8b6c:	2200      	movs	r2, #0
    8b6e:	601a      	str	r2, [r3, #0]
    8b70:	605a      	str	r2, [r3, #4]
    8b72:	609a      	str	r2, [r3, #8]
    8b74:	60da      	str	r2, [r3, #12]
    8b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
    8b78:	f107 0308 	add.w	r3, r7, #8
    8b7c:	2290      	movs	r2, #144	; 0x90
    8b7e:	2100      	movs	r1, #0
    8b80:	4618      	mov	r0, r3
    8b82:	f00c f912 	bl	14daa <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
    8b86:	4b3c      	ldr	r3, [pc, #240]	; (8c78 <SystemClock_Config+0x124>)
    8b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8b8a:	4a3b      	ldr	r2, [pc, #236]	; (8c78 <SystemClock_Config+0x124>)
    8b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8b90:	6413      	str	r3, [r2, #64]	; 0x40
    8b92:	4b39      	ldr	r3, [pc, #228]	; (8c78 <SystemClock_Config+0x124>)
    8b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8b9a:	607b      	str	r3, [r7, #4]
    8b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
    8b9e:	4b37      	ldr	r3, [pc, #220]	; (8c7c <SystemClock_Config+0x128>)
    8ba0:	681b      	ldr	r3, [r3, #0]
    8ba2:	4a36      	ldr	r2, [pc, #216]	; (8c7c <SystemClock_Config+0x128>)
    8ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    8ba8:	6013      	str	r3, [r2, #0]
    8baa:	4b34      	ldr	r3, [pc, #208]	; (8c7c <SystemClock_Config+0x128>)
    8bac:	681b      	ldr	r3, [r3, #0]
    8bae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    8bb2:	603b      	str	r3, [r7, #0]
    8bb4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    8bb6:	2302      	movs	r3, #2
    8bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    8bbc:	2301      	movs	r3, #1
    8bbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    8bc2:	2310      	movs	r3, #16
    8bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    8bc8:	2302      	movs	r3, #2
    8bca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    8bce:	2300      	movs	r3, #0
    8bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
    8bd4:	2308      	movs	r3, #8
    8bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
    8bda:	23d8      	movs	r3, #216	; 0xd8
    8bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    8be0:	2302      	movs	r3, #2
    8be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
    8be6:	2302      	movs	r3, #2
    8be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    8bec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
    8bf0:	4618      	mov	r0, r3
    8bf2:	f003 fe87 	bl	c904 <HAL_RCC_OscConfig>
    8bf6:	4603      	mov	r3, r0
    8bf8:	2b00      	cmp	r3, #0
    8bfa:	d001      	beq.n	8c00 <SystemClock_Config+0xac>
  {
    Error_Handler();
    8bfc:	f000 f859 	bl	8cb2 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
    8c00:	f003 fe30 	bl	c864 <HAL_PWREx_EnableOverDrive>
    8c04:	4603      	mov	r3, r0
    8c06:	2b00      	cmp	r3, #0
    8c08:	d001      	beq.n	8c0e <SystemClock_Config+0xba>
  {
    Error_Handler();
    8c0a:	f000 f852 	bl	8cb2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    8c0e:	230f      	movs	r3, #15
    8c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    8c14:	2302      	movs	r3, #2
    8c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    8c1a:	2300      	movs	r3, #0
    8c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    8c20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    8c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
    8c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
    8c30:	f107 0398 	add.w	r3, r7, #152	; 0x98
    8c34:	2107      	movs	r1, #7
    8c36:	4618      	mov	r0, r3
    8c38:	f004 f912 	bl	ce60 <HAL_RCC_ClockConfig>
    8c3c:	4603      	mov	r3, r0
    8c3e:	2b00      	cmp	r3, #0
    8c40:	d001      	beq.n	8c46 <SystemClock_Config+0xf2>
  {
    Error_Handler();
    8c42:	f000 f836 	bl	8cb2 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
    8c46:	f244 13c0 	movw	r3, #16832	; 0x41c0
    8c4a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    8c4c:	2300      	movs	r3, #0
    8c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    8c50:	2300      	movs	r3, #0
    8c52:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    8c54:	2300      	movs	r3, #0
    8c56:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    8c58:	2300      	movs	r3, #0
    8c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
    8c5c:	f107 0308 	add.w	r3, r7, #8
    8c60:	4618      	mov	r0, r3
    8c62:	f004 fb01 	bl	d268 <HAL_RCCEx_PeriphCLKConfig>
    8c66:	4603      	mov	r3, r0
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d001      	beq.n	8c70 <SystemClock_Config+0x11c>
  {
    Error_Handler();
    8c6c:	f000 f821 	bl	8cb2 <Error_Handler>
  }
}
    8c70:	bf00      	nop
    8c72:	37e0      	adds	r7, #224	; 0xe0
    8c74:	46bd      	mov	sp, r7
    8c76:	bd80      	pop	{r7, pc}
    8c78:	40023800 	.word	0x40023800
    8c7c:	40007000 	.word	0x40007000

00008c80 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
    8c80:	b580      	push	{r7, lr}
    8c82:	b082      	sub	sp, #8
    8c84:	af00      	add	r7, sp, #0
    8c86:	6078      	str	r0, [r7, #4]

#if (ADBOARD_NUM>0)
	ADBoard_SPICallback(hspi);
    8c88:	6878      	ldr	r0, [r7, #4]
    8c8a:	f008 ff0f 	bl	11aac <ADBoard_SPICallback>
#endif
	slaveSPITxRxCpltCallback(hspi);
    8c8e:	6878      	ldr	r0, [r7, #4]
    8c90:	f008 fe62 	bl	11958 <slaveSPITxRxCpltCallback>

}
    8c94:	bf00      	nop
    8c96:	3708      	adds	r7, #8
    8c98:	46bd      	mov	sp, r7
    8c9a:	bd80      	pop	{r7, pc}

00008c9c <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
    8c9c:	b580      	push	{r7, lr}
    8c9e:	b082      	sub	sp, #8
    8ca0:	af00      	add	r7, sp, #0
    8ca2:	6078      	str	r0, [r7, #4]
	slaveSPIErrorCallback(hspi);
    8ca4:	6878      	ldr	r0, [r7, #4]
    8ca6:	f008 fe7b 	bl	119a0 <slaveSPIErrorCallback>

}
    8caa:	bf00      	nop
    8cac:	3708      	adds	r7, #8
    8cae:	46bd      	mov	sp, r7
    8cb0:	bd80      	pop	{r7, pc}

00008cb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    8cb2:	b480      	push	{r7}
    8cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
    8cb6:	bf00      	nop
    8cb8:	46bd      	mov	sp, r7
    8cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cbe:	4770      	bx	lr

00008cc0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
    8cc0:	b580      	push	{r7, lr}
    8cc2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
    8cc4:	4b18      	ldr	r3, [pc, #96]	; (8d28 <MX_SPI1_Init+0x68>)
    8cc6:	4a19      	ldr	r2, [pc, #100]	; (8d2c <MX_SPI1_Init+0x6c>)
    8cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
    8cca:	4b17      	ldr	r3, [pc, #92]	; (8d28 <MX_SPI1_Init+0x68>)
    8ccc:	2200      	movs	r2, #0
    8cce:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    8cd0:	4b15      	ldr	r3, [pc, #84]	; (8d28 <MX_SPI1_Init+0x68>)
    8cd2:	2200      	movs	r2, #0
    8cd4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    8cd6:	4b14      	ldr	r3, [pc, #80]	; (8d28 <MX_SPI1_Init+0x68>)
    8cd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
    8cdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    8cde:	4b12      	ldr	r3, [pc, #72]	; (8d28 <MX_SPI1_Init+0x68>)
    8ce0:	2200      	movs	r2, #0
    8ce2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
    8ce4:	4b10      	ldr	r3, [pc, #64]	; (8d28 <MX_SPI1_Init+0x68>)
    8ce6:	2201      	movs	r2, #1
    8ce8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
    8cea:	4b0f      	ldr	r3, [pc, #60]	; (8d28 <MX_SPI1_Init+0x68>)
    8cec:	2200      	movs	r2, #0
    8cee:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    8cf0:	4b0d      	ldr	r3, [pc, #52]	; (8d28 <MX_SPI1_Init+0x68>)
    8cf2:	2200      	movs	r2, #0
    8cf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    8cf6:	4b0c      	ldr	r3, [pc, #48]	; (8d28 <MX_SPI1_Init+0x68>)
    8cf8:	2200      	movs	r2, #0
    8cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    8cfc:	4b0a      	ldr	r3, [pc, #40]	; (8d28 <MX_SPI1_Init+0x68>)
    8cfe:	2200      	movs	r2, #0
    8d00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
    8d02:	4b09      	ldr	r3, [pc, #36]	; (8d28 <MX_SPI1_Init+0x68>)
    8d04:	2207      	movs	r2, #7
    8d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    8d08:	4b07      	ldr	r3, [pc, #28]	; (8d28 <MX_SPI1_Init+0x68>)
    8d0a:	2200      	movs	r2, #0
    8d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    8d0e:	4b06      	ldr	r3, [pc, #24]	; (8d28 <MX_SPI1_Init+0x68>)
    8d10:	2200      	movs	r2, #0
    8d12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
    8d14:	4804      	ldr	r0, [pc, #16]	; (8d28 <MX_SPI1_Init+0x68>)
    8d16:	f004 fecd 	bl	dab4 <HAL_SPI_Init>
    8d1a:	4603      	mov	r3, r0
    8d1c:	2b00      	cmp	r3, #0
    8d1e:	d001      	beq.n	8d24 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
    8d20:	f7ff ffc7 	bl	8cb2 <Error_Handler>
  }

}
    8d24:	bf00      	nop
    8d26:	bd80      	pop	{r7, pc}
    8d28:	000339c8 	.word	0x000339c8
    8d2c:	40013000 	.word	0x40013000

00008d30 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
    8d30:	b580      	push	{r7, lr}
    8d32:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
    8d34:	4b1b      	ldr	r3, [pc, #108]	; (8da4 <MX_SPI3_Init+0x74>)
    8d36:	4a1c      	ldr	r2, [pc, #112]	; (8da8 <MX_SPI3_Init+0x78>)
    8d38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
    8d3a:	4b1a      	ldr	r3, [pc, #104]	; (8da4 <MX_SPI3_Init+0x74>)
    8d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
    8d40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
    8d42:	4b18      	ldr	r3, [pc, #96]	; (8da4 <MX_SPI3_Init+0x74>)
    8d44:	2200      	movs	r2, #0
    8d46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
    8d48:	4b16      	ldr	r3, [pc, #88]	; (8da4 <MX_SPI3_Init+0x74>)
    8d4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
    8d4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
    8d50:	4b14      	ldr	r3, [pc, #80]	; (8da4 <MX_SPI3_Init+0x74>)
    8d52:	2200      	movs	r2, #0
    8d54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
    8d56:	4b13      	ldr	r3, [pc, #76]	; (8da4 <MX_SPI3_Init+0x74>)
    8d58:	2200      	movs	r2, #0
    8d5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
    8d5c:	4b11      	ldr	r3, [pc, #68]	; (8da4 <MX_SPI3_Init+0x74>)
    8d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
    8d62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
    8d64:	4b0f      	ldr	r3, [pc, #60]	; (8da4 <MX_SPI3_Init+0x74>)
    8d66:	2200      	movs	r2, #0
    8d68:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
    8d6a:	4b0e      	ldr	r3, [pc, #56]	; (8da4 <MX_SPI3_Init+0x74>)
    8d6c:	2200      	movs	r2, #0
    8d6e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
    8d70:	4b0c      	ldr	r3, [pc, #48]	; (8da4 <MX_SPI3_Init+0x74>)
    8d72:	2200      	movs	r2, #0
    8d74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    8d76:	4b0b      	ldr	r3, [pc, #44]	; (8da4 <MX_SPI3_Init+0x74>)
    8d78:	2200      	movs	r2, #0
    8d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
    8d7c:	4b09      	ldr	r3, [pc, #36]	; (8da4 <MX_SPI3_Init+0x74>)
    8d7e:	2207      	movs	r2, #7
    8d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    8d82:	4b08      	ldr	r3, [pc, #32]	; (8da4 <MX_SPI3_Init+0x74>)
    8d84:	2200      	movs	r2, #0
    8d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
    8d88:	4b06      	ldr	r3, [pc, #24]	; (8da4 <MX_SPI3_Init+0x74>)
    8d8a:	2208      	movs	r2, #8
    8d8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
    8d8e:	4805      	ldr	r0, [pc, #20]	; (8da4 <MX_SPI3_Init+0x74>)
    8d90:	f004 fe90 	bl	dab4 <HAL_SPI_Init>
    8d94:	4603      	mov	r3, r0
    8d96:	2b00      	cmp	r3, #0
    8d98:	d001      	beq.n	8d9e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
    8d9a:	f7ff ff8a 	bl	8cb2 <Error_Handler>
  }

}
    8d9e:	bf00      	nop
    8da0:	bd80      	pop	{r7, pc}
    8da2:	bf00      	nop
    8da4:	00033840 	.word	0x00033840
    8da8:	40003c00 	.word	0x40003c00

00008dac <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
    8dac:	b580      	push	{r7, lr}
    8dae:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
    8db0:	4b1b      	ldr	r3, [pc, #108]	; (8e20 <MX_SPI4_Init+0x74>)
    8db2:	4a1c      	ldr	r2, [pc, #112]	; (8e24 <MX_SPI4_Init+0x78>)
    8db4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
    8db6:	4b1a      	ldr	r3, [pc, #104]	; (8e20 <MX_SPI4_Init+0x74>)
    8db8:	f44f 7282 	mov.w	r2, #260	; 0x104
    8dbc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
    8dbe:	4b18      	ldr	r3, [pc, #96]	; (8e20 <MX_SPI4_Init+0x74>)
    8dc0:	2200      	movs	r2, #0
    8dc2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
    8dc4:	4b16      	ldr	r3, [pc, #88]	; (8e20 <MX_SPI4_Init+0x74>)
    8dc6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    8dca:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
    8dcc:	4b14      	ldr	r3, [pc, #80]	; (8e20 <MX_SPI4_Init+0x74>)
    8dce:	2202      	movs	r2, #2
    8dd0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
    8dd2:	4b13      	ldr	r3, [pc, #76]	; (8e20 <MX_SPI4_Init+0x74>)
    8dd4:	2200      	movs	r2, #0
    8dd6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
    8dd8:	4b11      	ldr	r3, [pc, #68]	; (8e20 <MX_SPI4_Init+0x74>)
    8dda:	f44f 7200 	mov.w	r2, #512	; 0x200
    8dde:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
    8de0:	4b0f      	ldr	r3, [pc, #60]	; (8e20 <MX_SPI4_Init+0x74>)
    8de2:	2210      	movs	r2, #16
    8de4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
    8de6:	4b0e      	ldr	r3, [pc, #56]	; (8e20 <MX_SPI4_Init+0x74>)
    8de8:	2200      	movs	r2, #0
    8dea:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
    8dec:	4b0c      	ldr	r3, [pc, #48]	; (8e20 <MX_SPI4_Init+0x74>)
    8dee:	2200      	movs	r2, #0
    8df0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    8df2:	4b0b      	ldr	r3, [pc, #44]	; (8e20 <MX_SPI4_Init+0x74>)
    8df4:	2200      	movs	r2, #0
    8df6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
    8df8:	4b09      	ldr	r3, [pc, #36]	; (8e20 <MX_SPI4_Init+0x74>)
    8dfa:	2207      	movs	r2, #7
    8dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    8dfe:	4b08      	ldr	r3, [pc, #32]	; (8e20 <MX_SPI4_Init+0x74>)
    8e00:	2200      	movs	r2, #0
    8e02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
    8e04:	4b06      	ldr	r3, [pc, #24]	; (8e20 <MX_SPI4_Init+0x74>)
    8e06:	2208      	movs	r2, #8
    8e08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
    8e0a:	4805      	ldr	r0, [pc, #20]	; (8e20 <MX_SPI4_Init+0x74>)
    8e0c:	f004 fe52 	bl	dab4 <HAL_SPI_Init>
    8e10:	4603      	mov	r3, r0
    8e12:	2b00      	cmp	r3, #0
    8e14:	d001      	beq.n	8e1a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
    8e16:	f7ff ff4c 	bl	8cb2 <Error_Handler>
  }

}
    8e1a:	bf00      	nop
    8e1c:	bd80      	pop	{r7, pc}
    8e1e:	bf00      	nop
    8e20:	00033964 	.word	0x00033964
    8e24:	40013400 	.word	0x40013400

00008e28 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
    8e28:	b580      	push	{r7, lr}
    8e2a:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
    8e2c:	4b1b      	ldr	r3, [pc, #108]	; (8e9c <MX_SPI6_Init+0x74>)
    8e2e:	4a1c      	ldr	r2, [pc, #112]	; (8ea0 <MX_SPI6_Init+0x78>)
    8e30:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
    8e32:	4b1a      	ldr	r3, [pc, #104]	; (8e9c <MX_SPI6_Init+0x74>)
    8e34:	f44f 7282 	mov.w	r2, #260	; 0x104
    8e38:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
    8e3a:	4b18      	ldr	r3, [pc, #96]	; (8e9c <MX_SPI6_Init+0x74>)
    8e3c:	2200      	movs	r2, #0
    8e3e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
    8e40:	4b16      	ldr	r3, [pc, #88]	; (8e9c <MX_SPI6_Init+0x74>)
    8e42:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    8e46:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
    8e48:	4b14      	ldr	r3, [pc, #80]	; (8e9c <MX_SPI6_Init+0x74>)
    8e4a:	2200      	movs	r2, #0
    8e4c:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
    8e4e:	4b13      	ldr	r3, [pc, #76]	; (8e9c <MX_SPI6_Init+0x74>)
    8e50:	2200      	movs	r2, #0
    8e52:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
    8e54:	4b11      	ldr	r3, [pc, #68]	; (8e9c <MX_SPI6_Init+0x74>)
    8e56:	f44f 7200 	mov.w	r2, #512	; 0x200
    8e5a:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
    8e5c:	4b0f      	ldr	r3, [pc, #60]	; (8e9c <MX_SPI6_Init+0x74>)
    8e5e:	2230      	movs	r2, #48	; 0x30
    8e60:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
    8e62:	4b0e      	ldr	r3, [pc, #56]	; (8e9c <MX_SPI6_Init+0x74>)
    8e64:	2200      	movs	r2, #0
    8e66:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
    8e68:	4b0c      	ldr	r3, [pc, #48]	; (8e9c <MX_SPI6_Init+0x74>)
    8e6a:	2200      	movs	r2, #0
    8e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    8e6e:	4b0b      	ldr	r3, [pc, #44]	; (8e9c <MX_SPI6_Init+0x74>)
    8e70:	2200      	movs	r2, #0
    8e72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
    8e74:	4b09      	ldr	r3, [pc, #36]	; (8e9c <MX_SPI6_Init+0x74>)
    8e76:	2207      	movs	r2, #7
    8e78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    8e7a:	4b08      	ldr	r3, [pc, #32]	; (8e9c <MX_SPI6_Init+0x74>)
    8e7c:	2200      	movs	r2, #0
    8e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
    8e80:	4b06      	ldr	r3, [pc, #24]	; (8e9c <MX_SPI6_Init+0x74>)
    8e82:	2208      	movs	r2, #8
    8e84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
    8e86:	4805      	ldr	r0, [pc, #20]	; (8e9c <MX_SPI6_Init+0x74>)
    8e88:	f004 fe14 	bl	dab4 <HAL_SPI_Init>
    8e8c:	4603      	mov	r3, r0
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d001      	beq.n	8e96 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
    8e92:	f7ff ff0e 	bl	8cb2 <Error_Handler>
  }

}
    8e96:	bf00      	nop
    8e98:	bd80      	pop	{r7, pc}
    8e9a:	bf00      	nop
    8e9c:	000337dc 	.word	0x000337dc
    8ea0:	40015400 	.word	0x40015400

00008ea4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
    8ea4:	b580      	push	{r7, lr}
    8ea6:	b092      	sub	sp, #72	; 0x48
    8ea8:	af00      	add	r7, sp, #0
    8eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    8eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
    8eb0:	2200      	movs	r2, #0
    8eb2:	601a      	str	r2, [r3, #0]
    8eb4:	605a      	str	r2, [r3, #4]
    8eb6:	609a      	str	r2, [r3, #8]
    8eb8:	60da      	str	r2, [r3, #12]
    8eba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	681b      	ldr	r3, [r3, #0]
    8ec0:	4a5b      	ldr	r2, [pc, #364]	; (9030 <HAL_SPI_MspInit+0x18c>)
    8ec2:	4293      	cmp	r3, r2
    8ec4:	f040 80c4 	bne.w	9050 <HAL_SPI_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
    8ec8:	4b5a      	ldr	r3, [pc, #360]	; (9034 <HAL_SPI_MspInit+0x190>)
    8eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8ecc:	4a59      	ldr	r2, [pc, #356]	; (9034 <HAL_SPI_MspInit+0x190>)
    8ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8ed2:	6453      	str	r3, [r2, #68]	; 0x44
    8ed4:	4b57      	ldr	r3, [pc, #348]	; (9034 <HAL_SPI_MspInit+0x190>)
    8ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    8edc:	633b      	str	r3, [r7, #48]	; 0x30
    8ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    8ee0:	4b54      	ldr	r3, [pc, #336]	; (9034 <HAL_SPI_MspInit+0x190>)
    8ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8ee4:	4a53      	ldr	r2, [pc, #332]	; (9034 <HAL_SPI_MspInit+0x190>)
    8ee6:	f043 0301 	orr.w	r3, r3, #1
    8eea:	6313      	str	r3, [r2, #48]	; 0x30
    8eec:	4b51      	ldr	r3, [pc, #324]	; (9034 <HAL_SPI_MspInit+0x190>)
    8eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8ef0:	f003 0301 	and.w	r3, r3, #1
    8ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    8ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
    8ef8:	4b4e      	ldr	r3, [pc, #312]	; (9034 <HAL_SPI_MspInit+0x190>)
    8efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8efc:	4a4d      	ldr	r2, [pc, #308]	; (9034 <HAL_SPI_MspInit+0x190>)
    8efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8f02:	6313      	str	r3, [r2, #48]	; 0x30
    8f04:	4b4b      	ldr	r3, [pc, #300]	; (9034 <HAL_SPI_MspInit+0x190>)
    8f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    8f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    8f10:	2360      	movs	r3, #96	; 0x60
    8f12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    8f14:	2302      	movs	r3, #2
    8f16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    8f18:	2300      	movs	r3, #0
    8f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    8f1c:	2303      	movs	r3, #3
    8f1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    8f20:	2305      	movs	r3, #5
    8f22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    8f24:	f107 0334 	add.w	r3, r7, #52	; 0x34
    8f28:	4619      	mov	r1, r3
    8f2a:	4843      	ldr	r0, [pc, #268]	; (9038 <HAL_SPI_MspInit+0x194>)
    8f2c:	f003 f9ae 	bl	c28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    8f30:	2380      	movs	r3, #128	; 0x80
    8f32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    8f34:	2302      	movs	r3, #2
    8f36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    8f38:	2301      	movs	r3, #1
    8f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    8f3c:	2303      	movs	r3, #3
    8f3e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    8f40:	2305      	movs	r3, #5
    8f42:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    8f44:	f107 0334 	add.w	r3, r7, #52	; 0x34
    8f48:	4619      	mov	r1, r3
    8f4a:	483b      	ldr	r0, [pc, #236]	; (9038 <HAL_SPI_MspInit+0x194>)
    8f4c:	f003 f99e 	bl	c28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    8f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8f54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    8f56:	2302      	movs	r3, #2
    8f58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    8f5a:	2300      	movs	r3, #0
    8f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    8f5e:	2303      	movs	r3, #3
    8f60:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    8f62:	2305      	movs	r3, #5
    8f64:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
    8f66:	f107 0334 	add.w	r3, r7, #52	; 0x34
    8f6a:	4619      	mov	r1, r3
    8f6c:	4833      	ldr	r0, [pc, #204]	; (903c <HAL_SPI_MspInit+0x198>)
    8f6e:	f003 f98d 	bl	c28c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
    8f72:	4b33      	ldr	r3, [pc, #204]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8f74:	4a33      	ldr	r2, [pc, #204]	; (9044 <HAL_SPI_MspInit+0x1a0>)
    8f76:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
    8f78:	4b31      	ldr	r3, [pc, #196]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8f7a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    8f7e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    8f80:	4b2f      	ldr	r3, [pc, #188]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8f82:	2200      	movs	r2, #0
    8f84:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    8f86:	4b2e      	ldr	r3, [pc, #184]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8f88:	2200      	movs	r2, #0
    8f8a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    8f8c:	4b2c      	ldr	r3, [pc, #176]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8f92:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    8f94:	4b2a      	ldr	r3, [pc, #168]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8f96:	2200      	movs	r2, #0
    8f98:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    8f9a:	4b29      	ldr	r3, [pc, #164]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8f9c:	2200      	movs	r2, #0
    8f9e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    8fa0:	4b27      	ldr	r3, [pc, #156]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8fa2:	2200      	movs	r2, #0
    8fa4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    8fa6:	4b26      	ldr	r3, [pc, #152]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8fa8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    8fac:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    8fae:	4b24      	ldr	r3, [pc, #144]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8fb0:	2200      	movs	r2, #0
    8fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
    8fb4:	4822      	ldr	r0, [pc, #136]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8fb6:	f002 ff0d 	bl	bdd4 <HAL_DMA_Init>
    8fba:	4603      	mov	r3, r0
    8fbc:	2b00      	cmp	r3, #0
    8fbe:	d001      	beq.n	8fc4 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
    8fc0:	f7ff fe77 	bl	8cb2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
    8fc4:	687b      	ldr	r3, [r7, #4]
    8fc6:	4a1e      	ldr	r2, [pc, #120]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8fc8:	659a      	str	r2, [r3, #88]	; 0x58
    8fca:	4a1d      	ldr	r2, [pc, #116]	; (9040 <HAL_SPI_MspInit+0x19c>)
    8fcc:	687b      	ldr	r3, [r7, #4]
    8fce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    8fd0:	4b1d      	ldr	r3, [pc, #116]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    8fd2:	4a1e      	ldr	r2, [pc, #120]	; (904c <HAL_SPI_MspInit+0x1a8>)
    8fd4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    8fd6:	4b1c      	ldr	r3, [pc, #112]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    8fd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    8fdc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    8fde:	4b1a      	ldr	r3, [pc, #104]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    8fe0:	2240      	movs	r2, #64	; 0x40
    8fe2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    8fe4:	4b18      	ldr	r3, [pc, #96]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    8fe6:	2200      	movs	r2, #0
    8fe8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    8fea:	4b17      	ldr	r3, [pc, #92]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    8fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8ff0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    8ff2:	4b15      	ldr	r3, [pc, #84]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    8ff4:	2200      	movs	r2, #0
    8ff6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    8ff8:	4b13      	ldr	r3, [pc, #76]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    8ffa:	2200      	movs	r2, #0
    8ffc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    8ffe:	4b12      	ldr	r3, [pc, #72]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    9000:	2200      	movs	r2, #0
    9002:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    9004:	4b10      	ldr	r3, [pc, #64]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    9006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    900a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    900c:	4b0e      	ldr	r3, [pc, #56]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    900e:	2200      	movs	r2, #0
    9010:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
    9012:	480d      	ldr	r0, [pc, #52]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    9014:	f002 fede 	bl	bdd4 <HAL_DMA_Init>
    9018:	4603      	mov	r3, r0
    901a:	2b00      	cmp	r3, #0
    901c:	d001      	beq.n	9022 <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
    901e:	f7ff fe48 	bl	8cb2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
    9022:	687b      	ldr	r3, [r7, #4]
    9024:	4a08      	ldr	r2, [pc, #32]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    9026:	655a      	str	r2, [r3, #84]	; 0x54
    9028:	4a07      	ldr	r2, [pc, #28]	; (9048 <HAL_SPI_MspInit+0x1a4>)
    902a:	687b      	ldr	r3, [r7, #4]
    902c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
    902e:	e1bb      	b.n	93a8 <HAL_SPI_MspInit+0x504>
    9030:	40013000 	.word	0x40013000
    9034:	40023800 	.word	0x40023800
    9038:	40020000 	.word	0x40020000
    903c:	40021800 	.word	0x40021800
    9040:	00033a2c 	.word	0x00033a2c
    9044:	40026440 	.word	0x40026440
    9048:	00033a8c 	.word	0x00033a8c
    904c:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
    9050:	687b      	ldr	r3, [r7, #4]
    9052:	681b      	ldr	r3, [r3, #0]
    9054:	4a9d      	ldr	r2, [pc, #628]	; (92cc <HAL_SPI_MspInit+0x428>)
    9056:	4293      	cmp	r3, r2
    9058:	f040 80a6 	bne.w	91a8 <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI3_CLK_ENABLE();
    905c:	4b9c      	ldr	r3, [pc, #624]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    905e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9060:	4a9b      	ldr	r2, [pc, #620]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    9062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9066:	6413      	str	r3, [r2, #64]	; 0x40
    9068:	4b99      	ldr	r3, [pc, #612]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    906a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    906c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    9070:	627b      	str	r3, [r7, #36]	; 0x24
    9072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
    9074:	4b96      	ldr	r3, [pc, #600]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    9076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9078:	4a95      	ldr	r2, [pc, #596]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    907a:	f043 0302 	orr.w	r3, r3, #2
    907e:	6313      	str	r3, [r2, #48]	; 0x30
    9080:	4b93      	ldr	r3, [pc, #588]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    9082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9084:	f003 0302 	and.w	r3, r3, #2
    9088:	623b      	str	r3, [r7, #32]
    908a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
    908c:	4b90      	ldr	r3, [pc, #576]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9090:	4a8f      	ldr	r2, [pc, #572]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    9092:	f043 0304 	orr.w	r3, r3, #4
    9096:	6313      	str	r3, [r2, #48]	; 0x30
    9098:	4b8d      	ldr	r3, [pc, #564]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    909c:	f003 0304 	and.w	r3, r3, #4
    90a0:	61fb      	str	r3, [r7, #28]
    90a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    90a4:	2304      	movs	r3, #4
    90a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    90a8:	2302      	movs	r3, #2
    90aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    90ac:	2300      	movs	r3, #0
    90ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    90b0:	2303      	movs	r3, #3
    90b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
    90b4:	2307      	movs	r3, #7
    90b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    90b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
    90bc:	4619      	mov	r1, r3
    90be:	4885      	ldr	r0, [pc, #532]	; (92d4 <HAL_SPI_MspInit+0x430>)
    90c0:	f003 f8e4 	bl	c28c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    90c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    90c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    90ca:	2302      	movs	r3, #2
    90cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    90ce:	2300      	movs	r3, #0
    90d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    90d2:	2303      	movs	r3, #3
    90d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    90d6:	2306      	movs	r3, #6
    90d8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    90da:	f107 0334 	add.w	r3, r7, #52	; 0x34
    90de:	4619      	mov	r1, r3
    90e0:	487d      	ldr	r0, [pc, #500]	; (92d8 <HAL_SPI_MspInit+0x434>)
    90e2:	f003 f8d3 	bl	c28c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
    90e6:	4b7d      	ldr	r3, [pc, #500]	; (92dc <HAL_SPI_MspInit+0x438>)
    90e8:	4a7d      	ldr	r2, [pc, #500]	; (92e0 <HAL_SPI_MspInit+0x43c>)
    90ea:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
    90ec:	4b7b      	ldr	r3, [pc, #492]	; (92dc <HAL_SPI_MspInit+0x438>)
    90ee:	2200      	movs	r2, #0
    90f0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    90f2:	4b7a      	ldr	r3, [pc, #488]	; (92dc <HAL_SPI_MspInit+0x438>)
    90f4:	2200      	movs	r2, #0
    90f6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    90f8:	4b78      	ldr	r3, [pc, #480]	; (92dc <HAL_SPI_MspInit+0x438>)
    90fa:	2200      	movs	r2, #0
    90fc:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
    90fe:	4b77      	ldr	r3, [pc, #476]	; (92dc <HAL_SPI_MspInit+0x438>)
    9100:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9104:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    9106:	4b75      	ldr	r3, [pc, #468]	; (92dc <HAL_SPI_MspInit+0x438>)
    9108:	f44f 6200 	mov.w	r2, #2048	; 0x800
    910c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    910e:	4b73      	ldr	r3, [pc, #460]	; (92dc <HAL_SPI_MspInit+0x438>)
    9110:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9114:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
    9116:	4b71      	ldr	r3, [pc, #452]	; (92dc <HAL_SPI_MspInit+0x438>)
    9118:	2200      	movs	r2, #0
    911a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
    911c:	4b6f      	ldr	r3, [pc, #444]	; (92dc <HAL_SPI_MspInit+0x438>)
    911e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9122:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    9124:	4b6d      	ldr	r3, [pc, #436]	; (92dc <HAL_SPI_MspInit+0x438>)
    9126:	2200      	movs	r2, #0
    9128:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
    912a:	486c      	ldr	r0, [pc, #432]	; (92dc <HAL_SPI_MspInit+0x438>)
    912c:	f002 fe52 	bl	bdd4 <HAL_DMA_Init>
    9130:	4603      	mov	r3, r0
    9132:	2b00      	cmp	r3, #0
    9134:	d001      	beq.n	913a <HAL_SPI_MspInit+0x296>
      Error_Handler();
    9136:	f7ff fdbc 	bl	8cb2 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	4a67      	ldr	r2, [pc, #412]	; (92dc <HAL_SPI_MspInit+0x438>)
    913e:	659a      	str	r2, [r3, #88]	; 0x58
    9140:	4a66      	ldr	r2, [pc, #408]	; (92dc <HAL_SPI_MspInit+0x438>)
    9142:	687b      	ldr	r3, [r7, #4]
    9144:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
    9146:	4b67      	ldr	r3, [pc, #412]	; (92e4 <HAL_SPI_MspInit+0x440>)
    9148:	4a67      	ldr	r2, [pc, #412]	; (92e8 <HAL_SPI_MspInit+0x444>)
    914a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
    914c:	4b65      	ldr	r3, [pc, #404]	; (92e4 <HAL_SPI_MspInit+0x440>)
    914e:	2200      	movs	r2, #0
    9150:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    9152:	4b64      	ldr	r3, [pc, #400]	; (92e4 <HAL_SPI_MspInit+0x440>)
    9154:	2240      	movs	r2, #64	; 0x40
    9156:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    9158:	4b62      	ldr	r3, [pc, #392]	; (92e4 <HAL_SPI_MspInit+0x440>)
    915a:	2200      	movs	r2, #0
    915c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
    915e:	4b61      	ldr	r3, [pc, #388]	; (92e4 <HAL_SPI_MspInit+0x440>)
    9160:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9164:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    9166:	4b5f      	ldr	r3, [pc, #380]	; (92e4 <HAL_SPI_MspInit+0x440>)
    9168:	f44f 6200 	mov.w	r2, #2048	; 0x800
    916c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    916e:	4b5d      	ldr	r3, [pc, #372]	; (92e4 <HAL_SPI_MspInit+0x440>)
    9170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9174:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
    9176:	4b5b      	ldr	r3, [pc, #364]	; (92e4 <HAL_SPI_MspInit+0x440>)
    9178:	2200      	movs	r2, #0
    917a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
    917c:	4b59      	ldr	r3, [pc, #356]	; (92e4 <HAL_SPI_MspInit+0x440>)
    917e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9182:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    9184:	4b57      	ldr	r3, [pc, #348]	; (92e4 <HAL_SPI_MspInit+0x440>)
    9186:	2200      	movs	r2, #0
    9188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
    918a:	4856      	ldr	r0, [pc, #344]	; (92e4 <HAL_SPI_MspInit+0x440>)
    918c:	f002 fe22 	bl	bdd4 <HAL_DMA_Init>
    9190:	4603      	mov	r3, r0
    9192:	2b00      	cmp	r3, #0
    9194:	d001      	beq.n	919a <HAL_SPI_MspInit+0x2f6>
      Error_Handler();
    9196:	f7ff fd8c 	bl	8cb2 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
    919a:	687b      	ldr	r3, [r7, #4]
    919c:	4a51      	ldr	r2, [pc, #324]	; (92e4 <HAL_SPI_MspInit+0x440>)
    919e:	655a      	str	r2, [r3, #84]	; 0x54
    91a0:	4a50      	ldr	r2, [pc, #320]	; (92e4 <HAL_SPI_MspInit+0x440>)
    91a2:	687b      	ldr	r3, [r7, #4]
    91a4:	6393      	str	r3, [r2, #56]	; 0x38
}
    91a6:	e0ff      	b.n	93a8 <HAL_SPI_MspInit+0x504>
  else if(spiHandle->Instance==SPI4)
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	681b      	ldr	r3, [r3, #0]
    91ac:	4a4f      	ldr	r2, [pc, #316]	; (92ec <HAL_SPI_MspInit+0x448>)
    91ae:	4293      	cmp	r3, r2
    91b0:	f040 80a8 	bne.w	9304 <HAL_SPI_MspInit+0x460>
    __HAL_RCC_SPI4_CLK_ENABLE();
    91b4:	4b46      	ldr	r3, [pc, #280]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    91b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    91b8:	4a45      	ldr	r2, [pc, #276]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    91ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    91be:	6453      	str	r3, [r2, #68]	; 0x44
    91c0:	4b43      	ldr	r3, [pc, #268]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    91c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    91c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    91c8:	61bb      	str	r3, [r7, #24]
    91ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
    91cc:	4b40      	ldr	r3, [pc, #256]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    91ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91d0:	4a3f      	ldr	r2, [pc, #252]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    91d2:	f043 0310 	orr.w	r3, r3, #16
    91d6:	6313      	str	r3, [r2, #48]	; 0x30
    91d8:	4b3d      	ldr	r3, [pc, #244]	; (92d0 <HAL_SPI_MspInit+0x42c>)
    91da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91dc:	f003 0310 	and.w	r3, r3, #16
    91e0:	617b      	str	r3, [r7, #20]
    91e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
    91e4:	f246 0304 	movw	r3, #24580	; 0x6004
    91e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    91ea:	2302      	movs	r3, #2
    91ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    91ee:	2300      	movs	r3, #0
    91f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    91f2:	2303      	movs	r3, #3
    91f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    91f6:	2305      	movs	r3, #5
    91f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
    91fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
    91fe:	4619      	mov	r1, r3
    9200:	483b      	ldr	r0, [pc, #236]	; (92f0 <HAL_SPI_MspInit+0x44c>)
    9202:	f003 f843 	bl	c28c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
    9206:	4b3b      	ldr	r3, [pc, #236]	; (92f4 <HAL_SPI_MspInit+0x450>)
    9208:	4a3b      	ldr	r2, [pc, #236]	; (92f8 <HAL_SPI_MspInit+0x454>)
    920a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
    920c:	4b39      	ldr	r3, [pc, #228]	; (92f4 <HAL_SPI_MspInit+0x450>)
    920e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    9212:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    9214:	4b37      	ldr	r3, [pc, #220]	; (92f4 <HAL_SPI_MspInit+0x450>)
    9216:	2200      	movs	r2, #0
    9218:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    921a:	4b36      	ldr	r3, [pc, #216]	; (92f4 <HAL_SPI_MspInit+0x450>)
    921c:	2200      	movs	r2, #0
    921e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
    9220:	4b34      	ldr	r3, [pc, #208]	; (92f4 <HAL_SPI_MspInit+0x450>)
    9222:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9226:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    9228:	4b32      	ldr	r3, [pc, #200]	; (92f4 <HAL_SPI_MspInit+0x450>)
    922a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    922e:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    9230:	4b30      	ldr	r3, [pc, #192]	; (92f4 <HAL_SPI_MspInit+0x450>)
    9232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9236:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
    9238:	4b2e      	ldr	r3, [pc, #184]	; (92f4 <HAL_SPI_MspInit+0x450>)
    923a:	2200      	movs	r2, #0
    923c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    923e:	4b2d      	ldr	r3, [pc, #180]	; (92f4 <HAL_SPI_MspInit+0x450>)
    9240:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9244:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    9246:	4b2b      	ldr	r3, [pc, #172]	; (92f4 <HAL_SPI_MspInit+0x450>)
    9248:	2200      	movs	r2, #0
    924a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
    924c:	4829      	ldr	r0, [pc, #164]	; (92f4 <HAL_SPI_MspInit+0x450>)
    924e:	f002 fdc1 	bl	bdd4 <HAL_DMA_Init>
    9252:	4603      	mov	r3, r0
    9254:	2b00      	cmp	r3, #0
    9256:	d001      	beq.n	925c <HAL_SPI_MspInit+0x3b8>
      Error_Handler();
    9258:	f7ff fd2b 	bl	8cb2 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
    925c:	687b      	ldr	r3, [r7, #4]
    925e:	4a25      	ldr	r2, [pc, #148]	; (92f4 <HAL_SPI_MspInit+0x450>)
    9260:	659a      	str	r2, [r3, #88]	; 0x58
    9262:	4a24      	ldr	r2, [pc, #144]	; (92f4 <HAL_SPI_MspInit+0x450>)
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
    9268:	4b24      	ldr	r3, [pc, #144]	; (92fc <HAL_SPI_MspInit+0x458>)
    926a:	4a25      	ldr	r2, [pc, #148]	; (9300 <HAL_SPI_MspInit+0x45c>)
    926c:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
    926e:	4b23      	ldr	r3, [pc, #140]	; (92fc <HAL_SPI_MspInit+0x458>)
    9270:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    9274:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    9276:	4b21      	ldr	r3, [pc, #132]	; (92fc <HAL_SPI_MspInit+0x458>)
    9278:	2240      	movs	r2, #64	; 0x40
    927a:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    927c:	4b1f      	ldr	r3, [pc, #124]	; (92fc <HAL_SPI_MspInit+0x458>)
    927e:	2200      	movs	r2, #0
    9280:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
    9282:	4b1e      	ldr	r3, [pc, #120]	; (92fc <HAL_SPI_MspInit+0x458>)
    9284:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9288:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    928a:	4b1c      	ldr	r3, [pc, #112]	; (92fc <HAL_SPI_MspInit+0x458>)
    928c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9290:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    9292:	4b1a      	ldr	r3, [pc, #104]	; (92fc <HAL_SPI_MspInit+0x458>)
    9294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9298:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
    929a:	4b18      	ldr	r3, [pc, #96]	; (92fc <HAL_SPI_MspInit+0x458>)
    929c:	2200      	movs	r2, #0
    929e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    92a0:	4b16      	ldr	r3, [pc, #88]	; (92fc <HAL_SPI_MspInit+0x458>)
    92a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    92a6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    92a8:	4b14      	ldr	r3, [pc, #80]	; (92fc <HAL_SPI_MspInit+0x458>)
    92aa:	2200      	movs	r2, #0
    92ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
    92ae:	4813      	ldr	r0, [pc, #76]	; (92fc <HAL_SPI_MspInit+0x458>)
    92b0:	f002 fd90 	bl	bdd4 <HAL_DMA_Init>
    92b4:	4603      	mov	r3, r0
    92b6:	2b00      	cmp	r3, #0
    92b8:	d001      	beq.n	92be <HAL_SPI_MspInit+0x41a>
      Error_Handler();
    92ba:	f7ff fcfa 	bl	8cb2 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	4a0e      	ldr	r2, [pc, #56]	; (92fc <HAL_SPI_MspInit+0x458>)
    92c2:	655a      	str	r2, [r3, #84]	; 0x54
    92c4:	4a0d      	ldr	r2, [pc, #52]	; (92fc <HAL_SPI_MspInit+0x458>)
    92c6:	687b      	ldr	r3, [r7, #4]
    92c8:	6393      	str	r3, [r2, #56]	; 0x38
}
    92ca:	e06d      	b.n	93a8 <HAL_SPI_MspInit+0x504>
    92cc:	40003c00 	.word	0x40003c00
    92d0:	40023800 	.word	0x40023800
    92d4:	40020400 	.word	0x40020400
    92d8:	40020800 	.word	0x40020800
    92dc:	00033aec 	.word	0x00033aec
    92e0:	40026010 	.word	0x40026010
    92e4:	000338a4 	.word	0x000338a4
    92e8:	40026088 	.word	0x40026088
    92ec:	40013400 	.word	0x40013400
    92f0:	40021000 	.word	0x40021000
    92f4:	0003377c 	.word	0x0003377c
    92f8:	40026410 	.word	0x40026410
    92fc:	00033904 	.word	0x00033904
    9300:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
    9304:	687b      	ldr	r3, [r7, #4]
    9306:	681b      	ldr	r3, [r3, #0]
    9308:	4a29      	ldr	r2, [pc, #164]	; (93b0 <HAL_SPI_MspInit+0x50c>)
    930a:	4293      	cmp	r3, r2
    930c:	d14c      	bne.n	93a8 <HAL_SPI_MspInit+0x504>
    __HAL_RCC_SPI6_CLK_ENABLE();
    930e:	4b29      	ldr	r3, [pc, #164]	; (93b4 <HAL_SPI_MspInit+0x510>)
    9310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9312:	4a28      	ldr	r2, [pc, #160]	; (93b4 <HAL_SPI_MspInit+0x510>)
    9314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    9318:	6453      	str	r3, [r2, #68]	; 0x44
    931a:	4b26      	ldr	r3, [pc, #152]	; (93b4 <HAL_SPI_MspInit+0x510>)
    931c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    931e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    9322:	613b      	str	r3, [r7, #16]
    9324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
    9326:	4b23      	ldr	r3, [pc, #140]	; (93b4 <HAL_SPI_MspInit+0x510>)
    9328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    932a:	4a22      	ldr	r2, [pc, #136]	; (93b4 <HAL_SPI_MspInit+0x510>)
    932c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9330:	6313      	str	r3, [r2, #48]	; 0x30
    9332:	4b20      	ldr	r3, [pc, #128]	; (93b4 <HAL_SPI_MspInit+0x510>)
    9334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9336:	f003 0340 	and.w	r3, r3, #64	; 0x40
    933a:	60fb      	str	r3, [r7, #12]
    933c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
    933e:	4b1d      	ldr	r3, [pc, #116]	; (93b4 <HAL_SPI_MspInit+0x510>)
    9340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9342:	4a1c      	ldr	r2, [pc, #112]	; (93b4 <HAL_SPI_MspInit+0x510>)
    9344:	f043 0302 	orr.w	r3, r3, #2
    9348:	6313      	str	r3, [r2, #48]	; 0x30
    934a:	4b1a      	ldr	r3, [pc, #104]	; (93b4 <HAL_SPI_MspInit+0x510>)
    934c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    934e:	f003 0302 	and.w	r3, r3, #2
    9352:	60bb      	str	r3, [r7, #8]
    9354:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
    9356:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    935a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    935c:	2302      	movs	r3, #2
    935e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    9360:	2300      	movs	r3, #0
    9362:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    9364:	2303      	movs	r3, #3
    9366:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
    9368:	2305      	movs	r3, #5
    936a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
    936c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    9370:	4619      	mov	r1, r3
    9372:	4811      	ldr	r0, [pc, #68]	; (93b8 <HAL_SPI_MspInit+0x514>)
    9374:	f002 ff8a 	bl	c28c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    9378:	2308      	movs	r3, #8
    937a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    937c:	2302      	movs	r3, #2
    937e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    9380:	2300      	movs	r3, #0
    9382:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    9384:	2303      	movs	r3, #3
    9386:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
    9388:	2308      	movs	r3, #8
    938a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    938c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    9390:	4619      	mov	r1, r3
    9392:	480a      	ldr	r0, [pc, #40]	; (93bc <HAL_SPI_MspInit+0x518>)
    9394:	f002 ff7a 	bl	c28c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
    9398:	2200      	movs	r2, #0
    939a:	2105      	movs	r1, #5
    939c:	2056      	movs	r0, #86	; 0x56
    939e:	f002 fcef 	bl	bd80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
    93a2:	2056      	movs	r0, #86	; 0x56
    93a4:	f002 fd08 	bl	bdb8 <HAL_NVIC_EnableIRQ>
}
    93a8:	bf00      	nop
    93aa:	3748      	adds	r7, #72	; 0x48
    93ac:	46bd      	mov	sp, r7
    93ae:	bd80      	pop	{r7, pc}
    93b0:	40015400 	.word	0x40015400
    93b4:	40023800 	.word	0x40023800
    93b8:	40021800 	.word	0x40021800
    93bc:	40020400 	.word	0x40020400

000093c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
    93c0:	b580      	push	{r7, lr}
    93c2:	b082      	sub	sp, #8
    93c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
    93c6:	4b11      	ldr	r3, [pc, #68]	; (940c <HAL_MspInit+0x4c>)
    93c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    93ca:	4a10      	ldr	r2, [pc, #64]	; (940c <HAL_MspInit+0x4c>)
    93cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    93d0:	6413      	str	r3, [r2, #64]	; 0x40
    93d2:	4b0e      	ldr	r3, [pc, #56]	; (940c <HAL_MspInit+0x4c>)
    93d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    93d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    93da:	607b      	str	r3, [r7, #4]
    93dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
    93de:	4b0b      	ldr	r3, [pc, #44]	; (940c <HAL_MspInit+0x4c>)
    93e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    93e2:	4a0a      	ldr	r2, [pc, #40]	; (940c <HAL_MspInit+0x4c>)
    93e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    93e8:	6453      	str	r3, [r2, #68]	; 0x44
    93ea:	4b08      	ldr	r3, [pc, #32]	; (940c <HAL_MspInit+0x4c>)
    93ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    93ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    93f2:	603b      	str	r3, [r7, #0]
    93f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
    93f6:	2200      	movs	r2, #0
    93f8:	210f      	movs	r1, #15
    93fa:	f06f 0001 	mvn.w	r0, #1
    93fe:	f002 fcbf 	bl	bd80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
    9402:	bf00      	nop
    9404:	3708      	adds	r7, #8
    9406:	46bd      	mov	sp, r7
    9408:	bd80      	pop	{r7, pc}
    940a:	bf00      	nop
    940c:	40023800 	.word	0x40023800

00009410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    9410:	b580      	push	{r7, lr}
    9412:	b08c      	sub	sp, #48	; 0x30
    9414:	af00      	add	r7, sp, #0
    9416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
    9418:	2300      	movs	r3, #0
    941a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
    941c:	2300      	movs	r3, #0
    941e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
    9420:	2200      	movs	r2, #0
    9422:	6879      	ldr	r1, [r7, #4]
    9424:	2032      	movs	r0, #50	; 0x32
    9426:	f002 fcab 	bl	bd80 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
    942a:	2032      	movs	r0, #50	; 0x32
    942c:	f002 fcc4 	bl	bdb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
    9430:	4b1f      	ldr	r3, [pc, #124]	; (94b0 <HAL_InitTick+0xa0>)
    9432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9434:	4a1e      	ldr	r2, [pc, #120]	; (94b0 <HAL_InitTick+0xa0>)
    9436:	f043 0308 	orr.w	r3, r3, #8
    943a:	6413      	str	r3, [r2, #64]	; 0x40
    943c:	4b1c      	ldr	r3, [pc, #112]	; (94b0 <HAL_InitTick+0xa0>)
    943e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9440:	f003 0308 	and.w	r3, r3, #8
    9444:	60fb      	str	r3, [r7, #12]
    9446:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
    9448:	f107 0210 	add.w	r2, r7, #16
    944c:	f107 0314 	add.w	r3, r7, #20
    9450:	4611      	mov	r1, r2
    9452:	4618      	mov	r0, r3
    9454:	f003 fed6 	bl	d204 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
    9458:	f003 feac 	bl	d1b4 <HAL_RCC_GetPCLK1Freq>
    945c:	4603      	mov	r3, r0
    945e:	005b      	lsls	r3, r3, #1
    9460:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
    9462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9464:	4a13      	ldr	r2, [pc, #76]	; (94b4 <HAL_InitTick+0xa4>)
    9466:	fba2 2303 	umull	r2, r3, r2, r3
    946a:	0c9b      	lsrs	r3, r3, #18
    946c:	3b01      	subs	r3, #1
    946e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
    9470:	4b11      	ldr	r3, [pc, #68]	; (94b8 <HAL_InitTick+0xa8>)
    9472:	4a12      	ldr	r2, [pc, #72]	; (94bc <HAL_InitTick+0xac>)
    9474:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
    9476:	4b10      	ldr	r3, [pc, #64]	; (94b8 <HAL_InitTick+0xa8>)
    9478:	f240 32e7 	movw	r2, #999	; 0x3e7
    947c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
    947e:	4a0e      	ldr	r2, [pc, #56]	; (94b8 <HAL_InitTick+0xa8>)
    9480:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9482:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
    9484:	4b0c      	ldr	r3, [pc, #48]	; (94b8 <HAL_InitTick+0xa8>)
    9486:	2200      	movs	r2, #0
    9488:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
    948a:	4b0b      	ldr	r3, [pc, #44]	; (94b8 <HAL_InitTick+0xa8>)
    948c:	2200      	movs	r2, #0
    948e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
    9490:	4809      	ldr	r0, [pc, #36]	; (94b8 <HAL_InitTick+0xa8>)
    9492:	f005 f99c 	bl	e7ce <HAL_TIM_Base_Init>
    9496:	4603      	mov	r3, r0
    9498:	2b00      	cmp	r3, #0
    949a:	d104      	bne.n	94a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
    949c:	4806      	ldr	r0, [pc, #24]	; (94b8 <HAL_InitTick+0xa8>)
    949e:	f005 f9c1 	bl	e824 <HAL_TIM_Base_Start_IT>
    94a2:	4603      	mov	r3, r0
    94a4:	e000      	b.n	94a8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
    94a6:	2301      	movs	r3, #1
}
    94a8:	4618      	mov	r0, r3
    94aa:	3730      	adds	r7, #48	; 0x30
    94ac:	46bd      	mov	sp, r7
    94ae:	bd80      	pop	{r7, pc}
    94b0:	40023800 	.word	0x40023800
    94b4:	431bde83 	.word	0x431bde83
    94b8:	00033b4c 	.word	0x00033b4c
    94bc:	40000c00 	.word	0x40000c00

000094c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
    94c0:	b580      	push	{r7, lr}
    94c2:	b09a      	sub	sp, #104	; 0x68
    94c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    94c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
    94ca:	2200      	movs	r2, #0
    94cc:	601a      	str	r2, [r3, #0]
    94ce:	605a      	str	r2, [r3, #4]
    94d0:	609a      	str	r2, [r3, #8]
    94d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
    94d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    94d8:	2200      	movs	r2, #0
    94da:	601a      	str	r2, [r3, #0]
    94dc:	605a      	str	r2, [r3, #4]
    94de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
    94e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
    94e4:	2200      	movs	r2, #0
    94e6:	601a      	str	r2, [r3, #0]
    94e8:	605a      	str	r2, [r3, #4]
    94ea:	609a      	str	r2, [r3, #8]
    94ec:	60da      	str	r2, [r3, #12]
    94ee:	611a      	str	r2, [r3, #16]
    94f0:	615a      	str	r2, [r3, #20]
    94f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
    94f4:	1d3b      	adds	r3, r7, #4
    94f6:	222c      	movs	r2, #44	; 0x2c
    94f8:	2100      	movs	r1, #0
    94fa:	4618      	mov	r0, r3
    94fc:	f00b fc55 	bl	14daa <memset>

  htim1.Instance = TIM1;
    9500:	4b4a      	ldr	r3, [pc, #296]	; (962c <MX_TIM1_Init+0x16c>)
    9502:	4a4b      	ldr	r2, [pc, #300]	; (9630 <MX_TIM1_Init+0x170>)
    9504:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
    9506:	4b49      	ldr	r3, [pc, #292]	; (962c <MX_TIM1_Init+0x16c>)
    9508:	f245 425f 	movw	r2, #21599	; 0x545f
    950c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
    950e:	4b47      	ldr	r3, [pc, #284]	; (962c <MX_TIM1_Init+0x16c>)
    9510:	2200      	movs	r2, #0
    9512:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
    9514:	4b45      	ldr	r3, [pc, #276]	; (962c <MX_TIM1_Init+0x16c>)
    9516:	f240 32e7 	movw	r2, #999	; 0x3e7
    951a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    951c:	4b43      	ldr	r3, [pc, #268]	; (962c <MX_TIM1_Init+0x16c>)
    951e:	2200      	movs	r2, #0
    9520:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
    9522:	4b42      	ldr	r3, [pc, #264]	; (962c <MX_TIM1_Init+0x16c>)
    9524:	2200      	movs	r2, #0
    9526:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    9528:	4b40      	ldr	r3, [pc, #256]	; (962c <MX_TIM1_Init+0x16c>)
    952a:	2200      	movs	r2, #0
    952c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
    952e:	483f      	ldr	r0, [pc, #252]	; (962c <MX_TIM1_Init+0x16c>)
    9530:	f005 f94d 	bl	e7ce <HAL_TIM_Base_Init>
    9534:	4603      	mov	r3, r0
    9536:	2b00      	cmp	r3, #0
    9538:	d001      	beq.n	953e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
    953a:	f7ff fbba 	bl	8cb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    953e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    9542:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
    9544:	f107 0358 	add.w	r3, r7, #88	; 0x58
    9548:	4619      	mov	r1, r3
    954a:	4838      	ldr	r0, [pc, #224]	; (962c <MX_TIM1_Init+0x16c>)
    954c:	f005 fb74 	bl	ec38 <HAL_TIM_ConfigClockSource>
    9550:	4603      	mov	r3, r0
    9552:	2b00      	cmp	r3, #0
    9554:	d001      	beq.n	955a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
    9556:	f7ff fbac 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
    955a:	4834      	ldr	r0, [pc, #208]	; (962c <MX_TIM1_Init+0x16c>)
    955c:	f005 f98c 	bl	e878 <HAL_TIM_PWM_Init>
    9560:	4603      	mov	r3, r0
    9562:	2b00      	cmp	r3, #0
    9564:	d001      	beq.n	956a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
    9566:	f7ff fba4 	bl	8cb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    956a:	2300      	movs	r3, #0
    956c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
    956e:	2300      	movs	r3, #0
    9570:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    9572:	2300      	movs	r3, #0
    9574:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
    9576:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    957a:	4619      	mov	r1, r3
    957c:	482b      	ldr	r0, [pc, #172]	; (962c <MX_TIM1_Init+0x16c>)
    957e:	f005 ffd3 	bl	f528 <HAL_TIMEx_MasterConfigSynchronization>
    9582:	4603      	mov	r3, r0
    9584:	2b00      	cmp	r3, #0
    9586:	d001      	beq.n	958c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
    9588:	f7ff fb93 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    958c:	2360      	movs	r3, #96	; 0x60
    958e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
    9590:	2300      	movs	r3, #0
    9592:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    9594:	2300      	movs	r3, #0
    9596:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
    9598:	2300      	movs	r3, #0
    959a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    959c:	2300      	movs	r3, #0
    959e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
    95a0:	2300      	movs	r3, #0
    95a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
    95a4:	2300      	movs	r3, #0
    95a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    95a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
    95ac:	2200      	movs	r2, #0
    95ae:	4619      	mov	r1, r3
    95b0:	481e      	ldr	r0, [pc, #120]	; (962c <MX_TIM1_Init+0x16c>)
    95b2:	f005 fa29 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    95b6:	4603      	mov	r3, r0
    95b8:	2b00      	cmp	r3, #0
    95ba:	d001      	beq.n	95c0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
    95bc:	f7ff fb79 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
    95c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
    95c4:	2204      	movs	r2, #4
    95c6:	4619      	mov	r1, r3
    95c8:	4818      	ldr	r0, [pc, #96]	; (962c <MX_TIM1_Init+0x16c>)
    95ca:	f005 fa1d 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    95ce:	4603      	mov	r3, r0
    95d0:	2b00      	cmp	r3, #0
    95d2:	d001      	beq.n	95d8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
    95d4:	f7ff fb6d 	bl	8cb2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
    95d8:	2300      	movs	r3, #0
    95da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
    95dc:	2300      	movs	r3, #0
    95de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
    95e0:	2300      	movs	r3, #0
    95e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
    95e4:	2300      	movs	r3, #0
    95e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
    95e8:	2300      	movs	r3, #0
    95ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
    95ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    95f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
    95f2:	2300      	movs	r3, #0
    95f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
    95f6:	2300      	movs	r3, #0
    95f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
    95fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    95fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
    9600:	2300      	movs	r3, #0
    9602:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
    9604:	2300      	movs	r3, #0
    9606:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
    9608:	1d3b      	adds	r3, r7, #4
    960a:	4619      	mov	r1, r3
    960c:	4807      	ldr	r0, [pc, #28]	; (962c <MX_TIM1_Init+0x16c>)
    960e:	f006 f819 	bl	f644 <HAL_TIMEx_ConfigBreakDeadTime>
    9612:	4603      	mov	r3, r0
    9614:	2b00      	cmp	r3, #0
    9616:	d001      	beq.n	961c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
    9618:	f7ff fb4b 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
    961c:	4803      	ldr	r0, [pc, #12]	; (962c <MX_TIM1_Init+0x16c>)
    961e:	f000 fcc3 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9622:	bf00      	nop
    9624:	3768      	adds	r7, #104	; 0x68
    9626:	46bd      	mov	sp, r7
    9628:	bd80      	pop	{r7, pc}
    962a:	bf00      	nop
    962c:	00033ccc 	.word	0x00033ccc
    9630:	40010000 	.word	0x40010000

00009634 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
    9634:	b580      	push	{r7, lr}
    9636:	b08e      	sub	sp, #56	; 0x38
    9638:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    963a:	f107 0328 	add.w	r3, r7, #40	; 0x28
    963e:	2200      	movs	r2, #0
    9640:	601a      	str	r2, [r3, #0]
    9642:	605a      	str	r2, [r3, #4]
    9644:	609a      	str	r2, [r3, #8]
    9646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
    9648:	f107 031c 	add.w	r3, r7, #28
    964c:	2200      	movs	r2, #0
    964e:	601a      	str	r2, [r3, #0]
    9650:	605a      	str	r2, [r3, #4]
    9652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
    9654:	463b      	mov	r3, r7
    9656:	2200      	movs	r2, #0
    9658:	601a      	str	r2, [r3, #0]
    965a:	605a      	str	r2, [r3, #4]
    965c:	609a      	str	r2, [r3, #8]
    965e:	60da      	str	r2, [r3, #12]
    9660:	611a      	str	r2, [r3, #16]
    9662:	615a      	str	r2, [r3, #20]
    9664:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
    9666:	4b39      	ldr	r3, [pc, #228]	; (974c <MX_TIM2_Init+0x118>)
    9668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    966c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
    966e:	4b37      	ldr	r3, [pc, #220]	; (974c <MX_TIM2_Init+0x118>)
    9670:	f642 222f 	movw	r2, #10799	; 0x2a2f
    9674:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    9676:	4b35      	ldr	r3, [pc, #212]	; (974c <MX_TIM2_Init+0x118>)
    9678:	2200      	movs	r2, #0
    967a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
    967c:	4b33      	ldr	r3, [pc, #204]	; (974c <MX_TIM2_Init+0x118>)
    967e:	f240 32e7 	movw	r2, #999	; 0x3e7
    9682:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    9684:	4b31      	ldr	r3, [pc, #196]	; (974c <MX_TIM2_Init+0x118>)
    9686:	2200      	movs	r2, #0
    9688:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    968a:	4b30      	ldr	r3, [pc, #192]	; (974c <MX_TIM2_Init+0x118>)
    968c:	2200      	movs	r2, #0
    968e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
    9690:	482e      	ldr	r0, [pc, #184]	; (974c <MX_TIM2_Init+0x118>)
    9692:	f005 f89c 	bl	e7ce <HAL_TIM_Base_Init>
    9696:	4603      	mov	r3, r0
    9698:	2b00      	cmp	r3, #0
    969a:	d001      	beq.n	96a0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
    969c:	f7ff fb09 	bl	8cb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    96a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    96a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
    96a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
    96aa:	4619      	mov	r1, r3
    96ac:	4827      	ldr	r0, [pc, #156]	; (974c <MX_TIM2_Init+0x118>)
    96ae:	f005 fac3 	bl	ec38 <HAL_TIM_ConfigClockSource>
    96b2:	4603      	mov	r3, r0
    96b4:	2b00      	cmp	r3, #0
    96b6:	d001      	beq.n	96bc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
    96b8:	f7ff fafb 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
    96bc:	4823      	ldr	r0, [pc, #140]	; (974c <MX_TIM2_Init+0x118>)
    96be:	f005 f8db 	bl	e878 <HAL_TIM_PWM_Init>
    96c2:	4603      	mov	r3, r0
    96c4:	2b00      	cmp	r3, #0
    96c6:	d001      	beq.n	96cc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
    96c8:	f7ff faf3 	bl	8cb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    96cc:	2300      	movs	r3, #0
    96ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    96d0:	2300      	movs	r3, #0
    96d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
    96d4:	f107 031c 	add.w	r3, r7, #28
    96d8:	4619      	mov	r1, r3
    96da:	481c      	ldr	r0, [pc, #112]	; (974c <MX_TIM2_Init+0x118>)
    96dc:	f005 ff24 	bl	f528 <HAL_TIMEx_MasterConfigSynchronization>
    96e0:	4603      	mov	r3, r0
    96e2:	2b00      	cmp	r3, #0
    96e4:	d001      	beq.n	96ea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
    96e6:	f7ff fae4 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    96ea:	2360      	movs	r3, #96	; 0x60
    96ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
    96ee:	2300      	movs	r3, #0
    96f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    96f2:	2300      	movs	r3, #0
    96f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    96f6:	2300      	movs	r3, #0
    96f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    96fa:	463b      	mov	r3, r7
    96fc:	2200      	movs	r2, #0
    96fe:	4619      	mov	r1, r3
    9700:	4812      	ldr	r0, [pc, #72]	; (974c <MX_TIM2_Init+0x118>)
    9702:	f005 f981 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9706:	4603      	mov	r3, r0
    9708:	2b00      	cmp	r3, #0
    970a:	d001      	beq.n	9710 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
    970c:	f7ff fad1 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
    9710:	463b      	mov	r3, r7
    9712:	2208      	movs	r2, #8
    9714:	4619      	mov	r1, r3
    9716:	480d      	ldr	r0, [pc, #52]	; (974c <MX_TIM2_Init+0x118>)
    9718:	f005 f976 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    971c:	4603      	mov	r3, r0
    971e:	2b00      	cmp	r3, #0
    9720:	d001      	beq.n	9726 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
    9722:	f7ff fac6 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
    9726:	463b      	mov	r3, r7
    9728:	220c      	movs	r2, #12
    972a:	4619      	mov	r1, r3
    972c:	4807      	ldr	r0, [pc, #28]	; (974c <MX_TIM2_Init+0x118>)
    972e:	f005 f96b 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9732:	4603      	mov	r3, r0
    9734:	2b00      	cmp	r3, #0
    9736:	d001      	beq.n	973c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
    9738:	f7ff fabb 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
    973c:	4803      	ldr	r0, [pc, #12]	; (974c <MX_TIM2_Init+0x118>)
    973e:	f000 fc33 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9742:	bf00      	nop
    9744:	3738      	adds	r7, #56	; 0x38
    9746:	46bd      	mov	sp, r7
    9748:	bd80      	pop	{r7, pc}
    974a:	bf00      	nop
    974c:	00033d4c 	.word	0x00033d4c

00009750 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
    9750:	b580      	push	{r7, lr}
    9752:	b08a      	sub	sp, #40	; 0x28
    9754:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
    9756:	f107 031c 	add.w	r3, r7, #28
    975a:	2200      	movs	r2, #0
    975c:	601a      	str	r2, [r3, #0]
    975e:	605a      	str	r2, [r3, #4]
    9760:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
    9762:	463b      	mov	r3, r7
    9764:	2200      	movs	r2, #0
    9766:	601a      	str	r2, [r3, #0]
    9768:	605a      	str	r2, [r3, #4]
    976a:	609a      	str	r2, [r3, #8]
    976c:	60da      	str	r2, [r3, #12]
    976e:	611a      	str	r2, [r3, #16]
    9770:	615a      	str	r2, [r3, #20]
    9772:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
    9774:	4b32      	ldr	r3, [pc, #200]	; (9840 <MX_TIM3_Init+0xf0>)
    9776:	4a33      	ldr	r2, [pc, #204]	; (9844 <MX_TIM3_Init+0xf4>)
    9778:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
    977a:	4b31      	ldr	r3, [pc, #196]	; (9840 <MX_TIM3_Init+0xf0>)
    977c:	f642 222f 	movw	r2, #10799	; 0x2a2f
    9780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
    9782:	4b2f      	ldr	r3, [pc, #188]	; (9840 <MX_TIM3_Init+0xf0>)
    9784:	2200      	movs	r2, #0
    9786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
    9788:	4b2d      	ldr	r3, [pc, #180]	; (9840 <MX_TIM3_Init+0xf0>)
    978a:	f240 32e7 	movw	r2, #999	; 0x3e7
    978e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    9790:	4b2b      	ldr	r3, [pc, #172]	; (9840 <MX_TIM3_Init+0xf0>)
    9792:	2200      	movs	r2, #0
    9794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    9796:	4b2a      	ldr	r3, [pc, #168]	; (9840 <MX_TIM3_Init+0xf0>)
    9798:	2200      	movs	r2, #0
    979a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
    979c:	4828      	ldr	r0, [pc, #160]	; (9840 <MX_TIM3_Init+0xf0>)
    979e:	f005 f86b 	bl	e878 <HAL_TIM_PWM_Init>
    97a2:	4603      	mov	r3, r0
    97a4:	2b00      	cmp	r3, #0
    97a6:	d001      	beq.n	97ac <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
    97a8:	f7ff fa83 	bl	8cb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    97ac:	2300      	movs	r3, #0
    97ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    97b0:	2300      	movs	r3, #0
    97b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
    97b4:	f107 031c 	add.w	r3, r7, #28
    97b8:	4619      	mov	r1, r3
    97ba:	4821      	ldr	r0, [pc, #132]	; (9840 <MX_TIM3_Init+0xf0>)
    97bc:	f005 feb4 	bl	f528 <HAL_TIMEx_MasterConfigSynchronization>
    97c0:	4603      	mov	r3, r0
    97c2:	2b00      	cmp	r3, #0
    97c4:	d001      	beq.n	97ca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
    97c6:	f7ff fa74 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    97ca:	2360      	movs	r3, #96	; 0x60
    97cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
    97ce:	2300      	movs	r3, #0
    97d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    97d2:	2300      	movs	r3, #0
    97d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    97d6:	2300      	movs	r3, #0
    97d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    97da:	463b      	mov	r3, r7
    97dc:	2200      	movs	r2, #0
    97de:	4619      	mov	r1, r3
    97e0:	4817      	ldr	r0, [pc, #92]	; (9840 <MX_TIM3_Init+0xf0>)
    97e2:	f005 f911 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    97e6:	4603      	mov	r3, r0
    97e8:	2b00      	cmp	r3, #0
    97ea:	d001      	beq.n	97f0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
    97ec:	f7ff fa61 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
    97f0:	463b      	mov	r3, r7
    97f2:	2204      	movs	r2, #4
    97f4:	4619      	mov	r1, r3
    97f6:	4812      	ldr	r0, [pc, #72]	; (9840 <MX_TIM3_Init+0xf0>)
    97f8:	f005 f906 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    97fc:	4603      	mov	r3, r0
    97fe:	2b00      	cmp	r3, #0
    9800:	d001      	beq.n	9806 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
    9802:	f7ff fa56 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
    9806:	463b      	mov	r3, r7
    9808:	2208      	movs	r2, #8
    980a:	4619      	mov	r1, r3
    980c:	480c      	ldr	r0, [pc, #48]	; (9840 <MX_TIM3_Init+0xf0>)
    980e:	f005 f8fb 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9812:	4603      	mov	r3, r0
    9814:	2b00      	cmp	r3, #0
    9816:	d001      	beq.n	981c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
    9818:	f7ff fa4b 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
    981c:	463b      	mov	r3, r7
    981e:	220c      	movs	r2, #12
    9820:	4619      	mov	r1, r3
    9822:	4807      	ldr	r0, [pc, #28]	; (9840 <MX_TIM3_Init+0xf0>)
    9824:	f005 f8f0 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9828:	4603      	mov	r3, r0
    982a:	2b00      	cmp	r3, #0
    982c:	d001      	beq.n	9832 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
    982e:	f7ff fa40 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
    9832:	4803      	ldr	r0, [pc, #12]	; (9840 <MX_TIM3_Init+0xf0>)
    9834:	f000 fbb8 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9838:	bf00      	nop
    983a:	3728      	adds	r7, #40	; 0x28
    983c:	46bd      	mov	sp, r7
    983e:	bd80      	pop	{r7, pc}
    9840:	00033c4c 	.word	0x00033c4c
    9844:	40000400 	.word	0x40000400

00009848 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
    9848:	b580      	push	{r7, lr}
    984a:	b08a      	sub	sp, #40	; 0x28
    984c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
    984e:	f107 031c 	add.w	r3, r7, #28
    9852:	2200      	movs	r2, #0
    9854:	601a      	str	r2, [r3, #0]
    9856:	605a      	str	r2, [r3, #4]
    9858:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
    985a:	463b      	mov	r3, r7
    985c:	2200      	movs	r2, #0
    985e:	601a      	str	r2, [r3, #0]
    9860:	605a      	str	r2, [r3, #4]
    9862:	609a      	str	r2, [r3, #8]
    9864:	60da      	str	r2, [r3, #12]
    9866:	611a      	str	r2, [r3, #16]
    9868:	615a      	str	r2, [r3, #20]
    986a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
    986c:	4b32      	ldr	r3, [pc, #200]	; (9938 <MX_TIM4_Init+0xf0>)
    986e:	4a33      	ldr	r2, [pc, #204]	; (993c <MX_TIM4_Init+0xf4>)
    9870:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
    9872:	4b31      	ldr	r3, [pc, #196]	; (9938 <MX_TIM4_Init+0xf0>)
    9874:	f642 222f 	movw	r2, #10799	; 0x2a2f
    9878:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
    987a:	4b2f      	ldr	r3, [pc, #188]	; (9938 <MX_TIM4_Init+0xf0>)
    987c:	2200      	movs	r2, #0
    987e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
    9880:	4b2d      	ldr	r3, [pc, #180]	; (9938 <MX_TIM4_Init+0xf0>)
    9882:	f240 32e7 	movw	r2, #999	; 0x3e7
    9886:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    9888:	4b2b      	ldr	r3, [pc, #172]	; (9938 <MX_TIM4_Init+0xf0>)
    988a:	2200      	movs	r2, #0
    988c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    988e:	4b2a      	ldr	r3, [pc, #168]	; (9938 <MX_TIM4_Init+0xf0>)
    9890:	2200      	movs	r2, #0
    9892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
    9894:	4828      	ldr	r0, [pc, #160]	; (9938 <MX_TIM4_Init+0xf0>)
    9896:	f004 ffef 	bl	e878 <HAL_TIM_PWM_Init>
    989a:	4603      	mov	r3, r0
    989c:	2b00      	cmp	r3, #0
    989e:	d001      	beq.n	98a4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
    98a0:	f7ff fa07 	bl	8cb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    98a4:	2300      	movs	r3, #0
    98a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    98a8:	2300      	movs	r3, #0
    98aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
    98ac:	f107 031c 	add.w	r3, r7, #28
    98b0:	4619      	mov	r1, r3
    98b2:	4821      	ldr	r0, [pc, #132]	; (9938 <MX_TIM4_Init+0xf0>)
    98b4:	f005 fe38 	bl	f528 <HAL_TIMEx_MasterConfigSynchronization>
    98b8:	4603      	mov	r3, r0
    98ba:	2b00      	cmp	r3, #0
    98bc:	d001      	beq.n	98c2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
    98be:	f7ff f9f8 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    98c2:	2360      	movs	r3, #96	; 0x60
    98c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
    98c6:	2300      	movs	r3, #0
    98c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    98ca:	2300      	movs	r3, #0
    98cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    98ce:	2300      	movs	r3, #0
    98d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    98d2:	463b      	mov	r3, r7
    98d4:	2200      	movs	r2, #0
    98d6:	4619      	mov	r1, r3
    98d8:	4817      	ldr	r0, [pc, #92]	; (9938 <MX_TIM4_Init+0xf0>)
    98da:	f005 f895 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    98de:	4603      	mov	r3, r0
    98e0:	2b00      	cmp	r3, #0
    98e2:	d001      	beq.n	98e8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
    98e4:	f7ff f9e5 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
    98e8:	463b      	mov	r3, r7
    98ea:	2204      	movs	r2, #4
    98ec:	4619      	mov	r1, r3
    98ee:	4812      	ldr	r0, [pc, #72]	; (9938 <MX_TIM4_Init+0xf0>)
    98f0:	f005 f88a 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    98f4:	4603      	mov	r3, r0
    98f6:	2b00      	cmp	r3, #0
    98f8:	d001      	beq.n	98fe <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
    98fa:	f7ff f9da 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
    98fe:	463b      	mov	r3, r7
    9900:	2208      	movs	r2, #8
    9902:	4619      	mov	r1, r3
    9904:	480c      	ldr	r0, [pc, #48]	; (9938 <MX_TIM4_Init+0xf0>)
    9906:	f005 f87f 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    990a:	4603      	mov	r3, r0
    990c:	2b00      	cmp	r3, #0
    990e:	d001      	beq.n	9914 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
    9910:	f7ff f9cf 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
    9914:	463b      	mov	r3, r7
    9916:	220c      	movs	r2, #12
    9918:	4619      	mov	r1, r3
    991a:	4807      	ldr	r0, [pc, #28]	; (9938 <MX_TIM4_Init+0xf0>)
    991c:	f005 f874 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9920:	4603      	mov	r3, r0
    9922:	2b00      	cmp	r3, #0
    9924:	d001      	beq.n	992a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
    9926:	f7ff f9c4 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
    992a:	4803      	ldr	r0, [pc, #12]	; (9938 <MX_TIM4_Init+0xf0>)
    992c:	f000 fb3c 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9930:	bf00      	nop
    9932:	3728      	adds	r7, #40	; 0x28
    9934:	46bd      	mov	sp, r7
    9936:	bd80      	pop	{r7, pc}
    9938:	00033bcc 	.word	0x00033bcc
    993c:	40000800 	.word	0x40000800

00009940 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
    9940:	b580      	push	{r7, lr}
    9942:	b084      	sub	sp, #16
    9944:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
    9946:	1d3b      	adds	r3, r7, #4
    9948:	2200      	movs	r2, #0
    994a:	601a      	str	r2, [r3, #0]
    994c:	605a      	str	r2, [r3, #4]
    994e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
    9950:	4b14      	ldr	r3, [pc, #80]	; (99a4 <MX_TIM7_Init+0x64>)
    9952:	4a15      	ldr	r2, [pc, #84]	; (99a8 <MX_TIM7_Init+0x68>)
    9954:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
    9956:	4b13      	ldr	r3, [pc, #76]	; (99a4 <MX_TIM7_Init+0x64>)
    9958:	2200      	movs	r2, #0
    995a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
    995c:	4b11      	ldr	r3, [pc, #68]	; (99a4 <MX_TIM7_Init+0x64>)
    995e:	2200      	movs	r2, #0
    9960:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
    9962:	4b10      	ldr	r3, [pc, #64]	; (99a4 <MX_TIM7_Init+0x64>)
    9964:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9968:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    996a:	4b0e      	ldr	r3, [pc, #56]	; (99a4 <MX_TIM7_Init+0x64>)
    996c:	2200      	movs	r2, #0
    996e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
    9970:	480c      	ldr	r0, [pc, #48]	; (99a4 <MX_TIM7_Init+0x64>)
    9972:	f004 ff2c 	bl	e7ce <HAL_TIM_Base_Init>
    9976:	4603      	mov	r3, r0
    9978:	2b00      	cmp	r3, #0
    997a:	d001      	beq.n	9980 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
    997c:	f7ff f999 	bl	8cb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    9980:	2300      	movs	r3, #0
    9982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    9984:	2300      	movs	r3, #0
    9986:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
    9988:	1d3b      	adds	r3, r7, #4
    998a:	4619      	mov	r1, r3
    998c:	4805      	ldr	r0, [pc, #20]	; (99a4 <MX_TIM7_Init+0x64>)
    998e:	f005 fdcb 	bl	f528 <HAL_TIMEx_MasterConfigSynchronization>
    9992:	4603      	mov	r3, r0
    9994:	2b00      	cmp	r3, #0
    9996:	d001      	beq.n	999c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
    9998:	f7ff f98b 	bl	8cb2 <Error_Handler>
  }

}
    999c:	bf00      	nop
    999e:	3710      	adds	r7, #16
    99a0:	46bd      	mov	sp, r7
    99a2:	bd80      	pop	{r7, pc}
    99a4:	00033dcc 	.word	0x00033dcc
    99a8:	40001400 	.word	0x40001400

000099ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
    99ac:	b580      	push	{r7, lr}
    99ae:	b09a      	sub	sp, #104	; 0x68
    99b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    99b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
    99b6:	2200      	movs	r2, #0
    99b8:	601a      	str	r2, [r3, #0]
    99ba:	605a      	str	r2, [r3, #4]
    99bc:	609a      	str	r2, [r3, #8]
    99be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
    99c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    99c4:	2200      	movs	r2, #0
    99c6:	601a      	str	r2, [r3, #0]
    99c8:	605a      	str	r2, [r3, #4]
    99ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
    99cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
    99d0:	2200      	movs	r2, #0
    99d2:	601a      	str	r2, [r3, #0]
    99d4:	605a      	str	r2, [r3, #4]
    99d6:	609a      	str	r2, [r3, #8]
    99d8:	60da      	str	r2, [r3, #12]
    99da:	611a      	str	r2, [r3, #16]
    99dc:	615a      	str	r2, [r3, #20]
    99de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
    99e0:	1d3b      	adds	r3, r7, #4
    99e2:	222c      	movs	r2, #44	; 0x2c
    99e4:	2100      	movs	r1, #0
    99e6:	4618      	mov	r0, r3
    99e8:	f00b f9df 	bl	14daa <memset>

  htim8.Instance = TIM8;
    99ec:	4b4a      	ldr	r3, [pc, #296]	; (9b18 <MX_TIM8_Init+0x16c>)
    99ee:	4a4b      	ldr	r2, [pc, #300]	; (9b1c <MX_TIM8_Init+0x170>)
    99f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
    99f2:	4b49      	ldr	r3, [pc, #292]	; (9b18 <MX_TIM8_Init+0x16c>)
    99f4:	f245 425f 	movw	r2, #21599	; 0x545f
    99f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
    99fa:	4b47      	ldr	r3, [pc, #284]	; (9b18 <MX_TIM8_Init+0x16c>)
    99fc:	2200      	movs	r2, #0
    99fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
    9a00:	4b45      	ldr	r3, [pc, #276]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a02:	f240 32e7 	movw	r2, #999	; 0x3e7
    9a06:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    9a08:	4b43      	ldr	r3, [pc, #268]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a0a:	2200      	movs	r2, #0
    9a0c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
    9a0e:	4b42      	ldr	r3, [pc, #264]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a10:	2200      	movs	r2, #0
    9a12:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    9a14:	4b40      	ldr	r3, [pc, #256]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a16:	2200      	movs	r2, #0
    9a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
    9a1a:	483f      	ldr	r0, [pc, #252]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a1c:	f004 fed7 	bl	e7ce <HAL_TIM_Base_Init>
    9a20:	4603      	mov	r3, r0
    9a22:	2b00      	cmp	r3, #0
    9a24:	d001      	beq.n	9a2a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
    9a26:	f7ff f944 	bl	8cb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    9a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    9a2e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
    9a30:	f107 0358 	add.w	r3, r7, #88	; 0x58
    9a34:	4619      	mov	r1, r3
    9a36:	4838      	ldr	r0, [pc, #224]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a38:	f005 f8fe 	bl	ec38 <HAL_TIM_ConfigClockSource>
    9a3c:	4603      	mov	r3, r0
    9a3e:	2b00      	cmp	r3, #0
    9a40:	d001      	beq.n	9a46 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
    9a42:	f7ff f936 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
    9a46:	4834      	ldr	r0, [pc, #208]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a48:	f004 ff16 	bl	e878 <HAL_TIM_PWM_Init>
    9a4c:	4603      	mov	r3, r0
    9a4e:	2b00      	cmp	r3, #0
    9a50:	d001      	beq.n	9a56 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
    9a52:	f7ff f92e 	bl	8cb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    9a56:	2300      	movs	r3, #0
    9a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
    9a5a:	2300      	movs	r3, #0
    9a5c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    9a5e:	2300      	movs	r3, #0
    9a60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
    9a62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    9a66:	4619      	mov	r1, r3
    9a68:	482b      	ldr	r0, [pc, #172]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a6a:	f005 fd5d 	bl	f528 <HAL_TIMEx_MasterConfigSynchronization>
    9a6e:	4603      	mov	r3, r0
    9a70:	2b00      	cmp	r3, #0
    9a72:	d001      	beq.n	9a78 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
    9a74:	f7ff f91d 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    9a78:	2360      	movs	r3, #96	; 0x60
    9a7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
    9a7c:	2300      	movs	r3, #0
    9a7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    9a80:	2300      	movs	r3, #0
    9a82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
    9a84:	2300      	movs	r3, #0
    9a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    9a88:	2300      	movs	r3, #0
    9a8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
    9a8c:	2300      	movs	r3, #0
    9a8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
    9a90:	2300      	movs	r3, #0
    9a92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    9a94:	f107 0330 	add.w	r3, r7, #48	; 0x30
    9a98:	2200      	movs	r2, #0
    9a9a:	4619      	mov	r1, r3
    9a9c:	481e      	ldr	r0, [pc, #120]	; (9b18 <MX_TIM8_Init+0x16c>)
    9a9e:	f004 ffb3 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9aa2:	4603      	mov	r3, r0
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	d001      	beq.n	9aac <MX_TIM8_Init+0x100>
  {
    Error_Handler();
    9aa8:	f7ff f903 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
    9aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
    9ab0:	2204      	movs	r2, #4
    9ab2:	4619      	mov	r1, r3
    9ab4:	4818      	ldr	r0, [pc, #96]	; (9b18 <MX_TIM8_Init+0x16c>)
    9ab6:	f004 ffa7 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9aba:	4603      	mov	r3, r0
    9abc:	2b00      	cmp	r3, #0
    9abe:	d001      	beq.n	9ac4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
    9ac0:	f7ff f8f7 	bl	8cb2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
    9ac4:	2300      	movs	r3, #0
    9ac6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
    9ac8:	2300      	movs	r3, #0
    9aca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
    9acc:	2300      	movs	r3, #0
    9ace:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
    9ad0:	2300      	movs	r3, #0
    9ad2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
    9ad4:	2300      	movs	r3, #0
    9ad6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
    9ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9adc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
    9ade:	2300      	movs	r3, #0
    9ae0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
    9ae2:	2300      	movs	r3, #0
    9ae4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
    9ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    9aea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
    9aec:	2300      	movs	r3, #0
    9aee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
    9af0:	2300      	movs	r3, #0
    9af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
    9af4:	1d3b      	adds	r3, r7, #4
    9af6:	4619      	mov	r1, r3
    9af8:	4807      	ldr	r0, [pc, #28]	; (9b18 <MX_TIM8_Init+0x16c>)
    9afa:	f005 fda3 	bl	f644 <HAL_TIMEx_ConfigBreakDeadTime>
    9afe:	4603      	mov	r3, r0
    9b00:	2b00      	cmp	r3, #0
    9b02:	d001      	beq.n	9b08 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
    9b04:	f7ff f8d5 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
    9b08:	4803      	ldr	r0, [pc, #12]	; (9b18 <MX_TIM8_Init+0x16c>)
    9b0a:	f000 fa4d 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9b0e:	bf00      	nop
    9b10:	3768      	adds	r7, #104	; 0x68
    9b12:	46bd      	mov	sp, r7
    9b14:	bd80      	pop	{r7, pc}
    9b16:	bf00      	nop
    9b18:	00033b8c 	.word	0x00033b8c
    9b1c:	40010400 	.word	0x40010400

00009b20 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
    9b20:	b580      	push	{r7, lr}
    9b22:	b08c      	sub	sp, #48	; 0x30
    9b24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    9b26:	f107 0320 	add.w	r3, r7, #32
    9b2a:	2200      	movs	r2, #0
    9b2c:	601a      	str	r2, [r3, #0]
    9b2e:	605a      	str	r2, [r3, #4]
    9b30:	609a      	str	r2, [r3, #8]
    9b32:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
    9b34:	1d3b      	adds	r3, r7, #4
    9b36:	2200      	movs	r2, #0
    9b38:	601a      	str	r2, [r3, #0]
    9b3a:	605a      	str	r2, [r3, #4]
    9b3c:	609a      	str	r2, [r3, #8]
    9b3e:	60da      	str	r2, [r3, #12]
    9b40:	611a      	str	r2, [r3, #16]
    9b42:	615a      	str	r2, [r3, #20]
    9b44:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
    9b46:	4b2b      	ldr	r3, [pc, #172]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b48:	4a2b      	ldr	r2, [pc, #172]	; (9bf8 <MX_TIM9_Init+0xd8>)
    9b4a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
    9b4c:	4b29      	ldr	r3, [pc, #164]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b4e:	f245 425f 	movw	r2, #21599	; 0x545f
    9b52:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
    9b54:	4b27      	ldr	r3, [pc, #156]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b56:	2200      	movs	r2, #0
    9b58:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
    9b5a:	4b26      	ldr	r3, [pc, #152]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b5c:	f240 32e7 	movw	r2, #999	; 0x3e7
    9b60:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    9b62:	4b24      	ldr	r3, [pc, #144]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b64:	2200      	movs	r2, #0
    9b66:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    9b68:	4b22      	ldr	r3, [pc, #136]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b6a:	2200      	movs	r2, #0
    9b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
    9b6e:	4821      	ldr	r0, [pc, #132]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b70:	f004 fe2d 	bl	e7ce <HAL_TIM_Base_Init>
    9b74:	4603      	mov	r3, r0
    9b76:	2b00      	cmp	r3, #0
    9b78:	d001      	beq.n	9b7e <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
    9b7a:	f7ff f89a 	bl	8cb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    9b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    9b82:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
    9b84:	f107 0320 	add.w	r3, r7, #32
    9b88:	4619      	mov	r1, r3
    9b8a:	481a      	ldr	r0, [pc, #104]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b8c:	f005 f854 	bl	ec38 <HAL_TIM_ConfigClockSource>
    9b90:	4603      	mov	r3, r0
    9b92:	2b00      	cmp	r3, #0
    9b94:	d001      	beq.n	9b9a <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
    9b96:	f7ff f88c 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
    9b9a:	4816      	ldr	r0, [pc, #88]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9b9c:	f004 fe6c 	bl	e878 <HAL_TIM_PWM_Init>
    9ba0:	4603      	mov	r3, r0
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	d001      	beq.n	9baa <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
    9ba6:	f7ff f884 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    9baa:	2360      	movs	r3, #96	; 0x60
    9bac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
    9bae:	2300      	movs	r3, #0
    9bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    9bb2:	2300      	movs	r3, #0
    9bb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    9bb6:	2300      	movs	r3, #0
    9bb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    9bba:	1d3b      	adds	r3, r7, #4
    9bbc:	2200      	movs	r2, #0
    9bbe:	4619      	mov	r1, r3
    9bc0:	480c      	ldr	r0, [pc, #48]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9bc2:	f004 ff21 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9bc6:	4603      	mov	r3, r0
    9bc8:	2b00      	cmp	r3, #0
    9bca:	d001      	beq.n	9bd0 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
    9bcc:	f7ff f871 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
    9bd0:	1d3b      	adds	r3, r7, #4
    9bd2:	2204      	movs	r2, #4
    9bd4:	4619      	mov	r1, r3
    9bd6:	4807      	ldr	r0, [pc, #28]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9bd8:	f004 ff16 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9bdc:	4603      	mov	r3, r0
    9bde:	2b00      	cmp	r3, #0
    9be0:	d001      	beq.n	9be6 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
    9be2:	f7ff f866 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
    9be6:	4803      	ldr	r0, [pc, #12]	; (9bf4 <MX_TIM9_Init+0xd4>)
    9be8:	f000 f9de 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9bec:	bf00      	nop
    9bee:	3730      	adds	r7, #48	; 0x30
    9bf0:	46bd      	mov	sp, r7
    9bf2:	bd80      	pop	{r7, pc}
    9bf4:	00033d0c 	.word	0x00033d0c
    9bf8:	40014000 	.word	0x40014000

00009bfc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
    9bfc:	b580      	push	{r7, lr}
    9bfe:	b088      	sub	sp, #32
    9c00:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
    9c02:	1d3b      	adds	r3, r7, #4
    9c04:	2200      	movs	r2, #0
    9c06:	601a      	str	r2, [r3, #0]
    9c08:	605a      	str	r2, [r3, #4]
    9c0a:	609a      	str	r2, [r3, #8]
    9c0c:	60da      	str	r2, [r3, #12]
    9c0e:	611a      	str	r2, [r3, #16]
    9c10:	615a      	str	r2, [r3, #20]
    9c12:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
    9c14:	4b1e      	ldr	r3, [pc, #120]	; (9c90 <MX_TIM10_Init+0x94>)
    9c16:	4a1f      	ldr	r2, [pc, #124]	; (9c94 <MX_TIM10_Init+0x98>)
    9c18:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
    9c1a:	4b1d      	ldr	r3, [pc, #116]	; (9c90 <MX_TIM10_Init+0x94>)
    9c1c:	f245 425f 	movw	r2, #21599	; 0x545f
    9c20:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
    9c22:	4b1b      	ldr	r3, [pc, #108]	; (9c90 <MX_TIM10_Init+0x94>)
    9c24:	2200      	movs	r2, #0
    9c26:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
    9c28:	4b19      	ldr	r3, [pc, #100]	; (9c90 <MX_TIM10_Init+0x94>)
    9c2a:	f240 32e7 	movw	r2, #999	; 0x3e7
    9c2e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    9c30:	4b17      	ldr	r3, [pc, #92]	; (9c90 <MX_TIM10_Init+0x94>)
    9c32:	2200      	movs	r2, #0
    9c34:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    9c36:	4b16      	ldr	r3, [pc, #88]	; (9c90 <MX_TIM10_Init+0x94>)
    9c38:	2200      	movs	r2, #0
    9c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
    9c3c:	4814      	ldr	r0, [pc, #80]	; (9c90 <MX_TIM10_Init+0x94>)
    9c3e:	f004 fdc6 	bl	e7ce <HAL_TIM_Base_Init>
    9c42:	4603      	mov	r3, r0
    9c44:	2b00      	cmp	r3, #0
    9c46:	d001      	beq.n	9c4c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
    9c48:	f7ff f833 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
    9c4c:	4810      	ldr	r0, [pc, #64]	; (9c90 <MX_TIM10_Init+0x94>)
    9c4e:	f004 fe13 	bl	e878 <HAL_TIM_PWM_Init>
    9c52:	4603      	mov	r3, r0
    9c54:	2b00      	cmp	r3, #0
    9c56:	d001      	beq.n	9c5c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
    9c58:	f7ff f82b 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    9c5c:	2360      	movs	r3, #96	; 0x60
    9c5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
    9c60:	2300      	movs	r3, #0
    9c62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    9c64:	2300      	movs	r3, #0
    9c66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    9c68:	2300      	movs	r3, #0
    9c6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    9c6c:	1d3b      	adds	r3, r7, #4
    9c6e:	2200      	movs	r2, #0
    9c70:	4619      	mov	r1, r3
    9c72:	4807      	ldr	r0, [pc, #28]	; (9c90 <MX_TIM10_Init+0x94>)
    9c74:	f004 fec8 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9c78:	4603      	mov	r3, r0
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	d001      	beq.n	9c82 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
    9c7e:	f7ff f818 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
    9c82:	4803      	ldr	r0, [pc, #12]	; (9c90 <MX_TIM10_Init+0x94>)
    9c84:	f000 f990 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9c88:	bf00      	nop
    9c8a:	3720      	adds	r7, #32
    9c8c:	46bd      	mov	sp, r7
    9c8e:	bd80      	pop	{r7, pc}
    9c90:	00033c0c 	.word	0x00033c0c
    9c94:	40014400 	.word	0x40014400

00009c98 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
    9c98:	b580      	push	{r7, lr}
    9c9a:	b088      	sub	sp, #32
    9c9c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
    9c9e:	1d3b      	adds	r3, r7, #4
    9ca0:	2200      	movs	r2, #0
    9ca2:	601a      	str	r2, [r3, #0]
    9ca4:	605a      	str	r2, [r3, #4]
    9ca6:	609a      	str	r2, [r3, #8]
    9ca8:	60da      	str	r2, [r3, #12]
    9caa:	611a      	str	r2, [r3, #16]
    9cac:	615a      	str	r2, [r3, #20]
    9cae:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
    9cb0:	4b1e      	ldr	r3, [pc, #120]	; (9d2c <MX_TIM11_Init+0x94>)
    9cb2:	4a1f      	ldr	r2, [pc, #124]	; (9d30 <MX_TIM11_Init+0x98>)
    9cb4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
    9cb6:	4b1d      	ldr	r3, [pc, #116]	; (9d2c <MX_TIM11_Init+0x94>)
    9cb8:	f245 425f 	movw	r2, #21599	; 0x545f
    9cbc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
    9cbe:	4b1b      	ldr	r3, [pc, #108]	; (9d2c <MX_TIM11_Init+0x94>)
    9cc0:	2200      	movs	r2, #0
    9cc2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
    9cc4:	4b19      	ldr	r3, [pc, #100]	; (9d2c <MX_TIM11_Init+0x94>)
    9cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
    9cca:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    9ccc:	4b17      	ldr	r3, [pc, #92]	; (9d2c <MX_TIM11_Init+0x94>)
    9cce:	2200      	movs	r2, #0
    9cd0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    9cd2:	4b16      	ldr	r3, [pc, #88]	; (9d2c <MX_TIM11_Init+0x94>)
    9cd4:	2200      	movs	r2, #0
    9cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
    9cd8:	4814      	ldr	r0, [pc, #80]	; (9d2c <MX_TIM11_Init+0x94>)
    9cda:	f004 fd78 	bl	e7ce <HAL_TIM_Base_Init>
    9cde:	4603      	mov	r3, r0
    9ce0:	2b00      	cmp	r3, #0
    9ce2:	d001      	beq.n	9ce8 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
    9ce4:	f7fe ffe5 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
    9ce8:	4810      	ldr	r0, [pc, #64]	; (9d2c <MX_TIM11_Init+0x94>)
    9cea:	f004 fdc5 	bl	e878 <HAL_TIM_PWM_Init>
    9cee:	4603      	mov	r3, r0
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d001      	beq.n	9cf8 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
    9cf4:	f7fe ffdd 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    9cf8:	2360      	movs	r3, #96	; 0x60
    9cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
    9cfc:	2300      	movs	r3, #0
    9cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    9d00:	2300      	movs	r3, #0
    9d02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    9d04:	2300      	movs	r3, #0
    9d06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    9d08:	1d3b      	adds	r3, r7, #4
    9d0a:	2200      	movs	r2, #0
    9d0c:	4619      	mov	r1, r3
    9d0e:	4807      	ldr	r0, [pc, #28]	; (9d2c <MX_TIM11_Init+0x94>)
    9d10:	f004 fe7a 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9d14:	4603      	mov	r3, r0
    9d16:	2b00      	cmp	r3, #0
    9d18:	d001      	beq.n	9d1e <MX_TIM11_Init+0x86>
  {
    Error_Handler();
    9d1a:	f7fe ffca 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
    9d1e:	4803      	ldr	r0, [pc, #12]	; (9d2c <MX_TIM11_Init+0x94>)
    9d20:	f000 f942 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9d24:	bf00      	nop
    9d26:	3720      	adds	r7, #32
    9d28:	46bd      	mov	sp, r7
    9d2a:	bd80      	pop	{r7, pc}
    9d2c:	00033c8c 	.word	0x00033c8c
    9d30:	40014800 	.word	0x40014800

00009d34 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
    9d34:	b580      	push	{r7, lr}
    9d36:	b088      	sub	sp, #32
    9d38:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
    9d3a:	1d3b      	adds	r3, r7, #4
    9d3c:	2200      	movs	r2, #0
    9d3e:	601a      	str	r2, [r3, #0]
    9d40:	605a      	str	r2, [r3, #4]
    9d42:	609a      	str	r2, [r3, #8]
    9d44:	60da      	str	r2, [r3, #12]
    9d46:	611a      	str	r2, [r3, #16]
    9d48:	615a      	str	r2, [r3, #20]
    9d4a:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
    9d4c:	4b1e      	ldr	r3, [pc, #120]	; (9dc8 <MX_TIM14_Init+0x94>)
    9d4e:	4a1f      	ldr	r2, [pc, #124]	; (9dcc <MX_TIM14_Init+0x98>)
    9d50:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
    9d52:	4b1d      	ldr	r3, [pc, #116]	; (9dc8 <MX_TIM14_Init+0x94>)
    9d54:	f642 222f 	movw	r2, #10799	; 0x2a2f
    9d58:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
    9d5a:	4b1b      	ldr	r3, [pc, #108]	; (9dc8 <MX_TIM14_Init+0x94>)
    9d5c:	2200      	movs	r2, #0
    9d5e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
    9d60:	4b19      	ldr	r3, [pc, #100]	; (9dc8 <MX_TIM14_Init+0x94>)
    9d62:	f240 32e7 	movw	r2, #999	; 0x3e7
    9d66:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    9d68:	4b17      	ldr	r3, [pc, #92]	; (9dc8 <MX_TIM14_Init+0x94>)
    9d6a:	2200      	movs	r2, #0
    9d6c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    9d6e:	4b16      	ldr	r3, [pc, #88]	; (9dc8 <MX_TIM14_Init+0x94>)
    9d70:	2200      	movs	r2, #0
    9d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
    9d74:	4814      	ldr	r0, [pc, #80]	; (9dc8 <MX_TIM14_Init+0x94>)
    9d76:	f004 fd2a 	bl	e7ce <HAL_TIM_Base_Init>
    9d7a:	4603      	mov	r3, r0
    9d7c:	2b00      	cmp	r3, #0
    9d7e:	d001      	beq.n	9d84 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
    9d80:	f7fe ff97 	bl	8cb2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
    9d84:	4810      	ldr	r0, [pc, #64]	; (9dc8 <MX_TIM14_Init+0x94>)
    9d86:	f004 fd77 	bl	e878 <HAL_TIM_PWM_Init>
    9d8a:	4603      	mov	r3, r0
    9d8c:	2b00      	cmp	r3, #0
    9d8e:	d001      	beq.n	9d94 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
    9d90:	f7fe ff8f 	bl	8cb2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
    9d94:	2360      	movs	r3, #96	; 0x60
    9d96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
    9d98:	2300      	movs	r3, #0
    9d9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    9d9c:	2300      	movs	r3, #0
    9d9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    9da0:	2300      	movs	r3, #0
    9da2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    9da4:	1d3b      	adds	r3, r7, #4
    9da6:	2200      	movs	r2, #0
    9da8:	4619      	mov	r1, r3
    9daa:	4807      	ldr	r0, [pc, #28]	; (9dc8 <MX_TIM14_Init+0x94>)
    9dac:	f004 fe2c 	bl	ea08 <HAL_TIM_PWM_ConfigChannel>
    9db0:	4603      	mov	r3, r0
    9db2:	2b00      	cmp	r3, #0
    9db4:	d001      	beq.n	9dba <MX_TIM14_Init+0x86>
  {
    Error_Handler();
    9db6:	f7fe ff7c 	bl	8cb2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
    9dba:	4803      	ldr	r0, [pc, #12]	; (9dc8 <MX_TIM14_Init+0x94>)
    9dbc:	f000 f8f4 	bl	9fa8 <HAL_TIM_MspPostInit>

}
    9dc0:	bf00      	nop
    9dc2:	3720      	adds	r7, #32
    9dc4:	46bd      	mov	sp, r7
    9dc6:	bd80      	pop	{r7, pc}
    9dc8:	00033d8c 	.word	0x00033d8c
    9dcc:	40002000 	.word	0x40002000

00009dd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
    9dd0:	b580      	push	{r7, lr}
    9dd2:	b08a      	sub	sp, #40	; 0x28
    9dd4:	af00      	add	r7, sp, #0
    9dd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
    9dd8:	687b      	ldr	r3, [r7, #4]
    9dda:	681b      	ldr	r3, [r3, #0]
    9ddc:	4a50      	ldr	r2, [pc, #320]	; (9f20 <HAL_TIM_Base_MspInit+0x150>)
    9dde:	4293      	cmp	r3, r2
    9de0:	d114      	bne.n	9e0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
    9de2:	4b50      	ldr	r3, [pc, #320]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9de6:	4a4f      	ldr	r2, [pc, #316]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9de8:	f043 0301 	orr.w	r3, r3, #1
    9dec:	6453      	str	r3, [r2, #68]	; 0x44
    9dee:	4b4d      	ldr	r3, [pc, #308]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9df2:	f003 0301 	and.w	r3, r3, #1
    9df6:	627b      	str	r3, [r7, #36]	; 0x24
    9df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
    9dfa:	2200      	movs	r2, #0
    9dfc:	2105      	movs	r1, #5
    9dfe:	2019      	movs	r0, #25
    9e00:	f001 ffbe 	bl	bd80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
    9e04:	2019      	movs	r0, #25
    9e06:	f001 ffd7 	bl	bdb8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
    9e0a:	e084      	b.n	9f16 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
    9e0c:	687b      	ldr	r3, [r7, #4]
    9e0e:	681b      	ldr	r3, [r3, #0]
    9e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9e14:	d10c      	bne.n	9e30 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
    9e16:	4b43      	ldr	r3, [pc, #268]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9e1a:	4a42      	ldr	r2, [pc, #264]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e1c:	f043 0301 	orr.w	r3, r3, #1
    9e20:	6413      	str	r3, [r2, #64]	; 0x40
    9e22:	4b40      	ldr	r3, [pc, #256]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9e26:	f003 0301 	and.w	r3, r3, #1
    9e2a:	623b      	str	r3, [r7, #32]
    9e2c:	6a3b      	ldr	r3, [r7, #32]
}
    9e2e:	e072      	b.n	9f16 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
    9e30:	687b      	ldr	r3, [r7, #4]
    9e32:	681b      	ldr	r3, [r3, #0]
    9e34:	4a3c      	ldr	r2, [pc, #240]	; (9f28 <HAL_TIM_Base_MspInit+0x158>)
    9e36:	4293      	cmp	r3, r2
    9e38:	d10c      	bne.n	9e54 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
    9e3a:	4b3a      	ldr	r3, [pc, #232]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9e3e:	4a39      	ldr	r2, [pc, #228]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e40:	f043 0320 	orr.w	r3, r3, #32
    9e44:	6413      	str	r3, [r2, #64]	; 0x40
    9e46:	4b37      	ldr	r3, [pc, #220]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9e4a:	f003 0320 	and.w	r3, r3, #32
    9e4e:	61fb      	str	r3, [r7, #28]
    9e50:	69fb      	ldr	r3, [r7, #28]
}
    9e52:	e060      	b.n	9f16 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
    9e54:	687b      	ldr	r3, [r7, #4]
    9e56:	681b      	ldr	r3, [r3, #0]
    9e58:	4a34      	ldr	r2, [pc, #208]	; (9f2c <HAL_TIM_Base_MspInit+0x15c>)
    9e5a:	4293      	cmp	r3, r2
    9e5c:	d10c      	bne.n	9e78 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
    9e5e:	4b31      	ldr	r3, [pc, #196]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9e62:	4a30      	ldr	r2, [pc, #192]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e64:	f043 0302 	orr.w	r3, r3, #2
    9e68:	6453      	str	r3, [r2, #68]	; 0x44
    9e6a:	4b2e      	ldr	r3, [pc, #184]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9e6e:	f003 0302 	and.w	r3, r3, #2
    9e72:	61bb      	str	r3, [r7, #24]
    9e74:	69bb      	ldr	r3, [r7, #24]
}
    9e76:	e04e      	b.n	9f16 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	681b      	ldr	r3, [r3, #0]
    9e7c:	4a2c      	ldr	r2, [pc, #176]	; (9f30 <HAL_TIM_Base_MspInit+0x160>)
    9e7e:	4293      	cmp	r3, r2
    9e80:	d10c      	bne.n	9e9c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
    9e82:	4b28      	ldr	r3, [pc, #160]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9e86:	4a27      	ldr	r2, [pc, #156]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9e8c:	6453      	str	r3, [r2, #68]	; 0x44
    9e8e:	4b25      	ldr	r3, [pc, #148]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    9e96:	617b      	str	r3, [r7, #20]
    9e98:	697b      	ldr	r3, [r7, #20]
}
    9e9a:	e03c      	b.n	9f16 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
    9e9c:	687b      	ldr	r3, [r7, #4]
    9e9e:	681b      	ldr	r3, [r3, #0]
    9ea0:	4a24      	ldr	r2, [pc, #144]	; (9f34 <HAL_TIM_Base_MspInit+0x164>)
    9ea2:	4293      	cmp	r3, r2
    9ea4:	d114      	bne.n	9ed0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
    9ea6:	4b1f      	ldr	r3, [pc, #124]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9eaa:	4a1e      	ldr	r2, [pc, #120]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9eb0:	6453      	str	r3, [r2, #68]	; 0x44
    9eb2:	4b1c      	ldr	r3, [pc, #112]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9eba:	613b      	str	r3, [r7, #16]
    9ebc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
    9ebe:	2200      	movs	r2, #0
    9ec0:	2105      	movs	r1, #5
    9ec2:	2019      	movs	r0, #25
    9ec4:	f001 ff5c 	bl	bd80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
    9ec8:	2019      	movs	r0, #25
    9eca:	f001 ff75 	bl	bdb8 <HAL_NVIC_EnableIRQ>
}
    9ece:	e022      	b.n	9f16 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
    9ed0:	687b      	ldr	r3, [r7, #4]
    9ed2:	681b      	ldr	r3, [r3, #0]
    9ed4:	4a18      	ldr	r2, [pc, #96]	; (9f38 <HAL_TIM_Base_MspInit+0x168>)
    9ed6:	4293      	cmp	r3, r2
    9ed8:	d10c      	bne.n	9ef4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
    9eda:	4b12      	ldr	r3, [pc, #72]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9ede:	4a11      	ldr	r2, [pc, #68]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    9ee4:	6453      	str	r3, [r2, #68]	; 0x44
    9ee6:	4b0f      	ldr	r3, [pc, #60]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    9eee:	60fb      	str	r3, [r7, #12]
    9ef0:	68fb      	ldr	r3, [r7, #12]
}
    9ef2:	e010      	b.n	9f16 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
    9ef4:	687b      	ldr	r3, [r7, #4]
    9ef6:	681b      	ldr	r3, [r3, #0]
    9ef8:	4a10      	ldr	r2, [pc, #64]	; (9f3c <HAL_TIM_Base_MspInit+0x16c>)
    9efa:	4293      	cmp	r3, r2
    9efc:	d10b      	bne.n	9f16 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
    9efe:	4b09      	ldr	r3, [pc, #36]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f02:	4a08      	ldr	r2, [pc, #32]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9f08:	6413      	str	r3, [r2, #64]	; 0x40
    9f0a:	4b06      	ldr	r3, [pc, #24]	; (9f24 <HAL_TIM_Base_MspInit+0x154>)
    9f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9f12:	60bb      	str	r3, [r7, #8]
    9f14:	68bb      	ldr	r3, [r7, #8]
}
    9f16:	bf00      	nop
    9f18:	3728      	adds	r7, #40	; 0x28
    9f1a:	46bd      	mov	sp, r7
    9f1c:	bd80      	pop	{r7, pc}
    9f1e:	bf00      	nop
    9f20:	40010000 	.word	0x40010000
    9f24:	40023800 	.word	0x40023800
    9f28:	40001400 	.word	0x40001400
    9f2c:	40010400 	.word	0x40010400
    9f30:	40014000 	.word	0x40014000
    9f34:	40014400 	.word	0x40014400
    9f38:	40014800 	.word	0x40014800
    9f3c:	40002000 	.word	0x40002000

00009f40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
    9f40:	b480      	push	{r7}
    9f42:	b085      	sub	sp, #20
    9f44:	af00      	add	r7, sp, #0
    9f46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
    9f48:	687b      	ldr	r3, [r7, #4]
    9f4a:	681b      	ldr	r3, [r3, #0]
    9f4c:	4a13      	ldr	r2, [pc, #76]	; (9f9c <HAL_TIM_PWM_MspInit+0x5c>)
    9f4e:	4293      	cmp	r3, r2
    9f50:	d10c      	bne.n	9f6c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    9f52:	4b13      	ldr	r3, [pc, #76]	; (9fa0 <HAL_TIM_PWM_MspInit+0x60>)
    9f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f56:	4a12      	ldr	r2, [pc, #72]	; (9fa0 <HAL_TIM_PWM_MspInit+0x60>)
    9f58:	f043 0302 	orr.w	r3, r3, #2
    9f5c:	6413      	str	r3, [r2, #64]	; 0x40
    9f5e:	4b10      	ldr	r3, [pc, #64]	; (9fa0 <HAL_TIM_PWM_MspInit+0x60>)
    9f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f62:	f003 0302 	and.w	r3, r3, #2
    9f66:	60fb      	str	r3, [r7, #12]
    9f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
    9f6a:	e010      	b.n	9f8e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
    9f6c:	687b      	ldr	r3, [r7, #4]
    9f6e:	681b      	ldr	r3, [r3, #0]
    9f70:	4a0c      	ldr	r2, [pc, #48]	; (9fa4 <HAL_TIM_PWM_MspInit+0x64>)
    9f72:	4293      	cmp	r3, r2
    9f74:	d10b      	bne.n	9f8e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
    9f76:	4b0a      	ldr	r3, [pc, #40]	; (9fa0 <HAL_TIM_PWM_MspInit+0x60>)
    9f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f7a:	4a09      	ldr	r2, [pc, #36]	; (9fa0 <HAL_TIM_PWM_MspInit+0x60>)
    9f7c:	f043 0304 	orr.w	r3, r3, #4
    9f80:	6413      	str	r3, [r2, #64]	; 0x40
    9f82:	4b07      	ldr	r3, [pc, #28]	; (9fa0 <HAL_TIM_PWM_MspInit+0x60>)
    9f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f86:	f003 0304 	and.w	r3, r3, #4
    9f8a:	60bb      	str	r3, [r7, #8]
    9f8c:	68bb      	ldr	r3, [r7, #8]
}
    9f8e:	bf00      	nop
    9f90:	3714      	adds	r7, #20
    9f92:	46bd      	mov	sp, r7
    9f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f98:	4770      	bx	lr
    9f9a:	bf00      	nop
    9f9c:	40000400 	.word	0x40000400
    9fa0:	40023800 	.word	0x40023800
    9fa4:	40000800 	.word	0x40000800

00009fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
    9fa8:	b580      	push	{r7, lr}
    9faa:	b092      	sub	sp, #72	; 0x48
    9fac:	af00      	add	r7, sp, #0
    9fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    9fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
    9fb4:	2200      	movs	r2, #0
    9fb6:	601a      	str	r2, [r3, #0]
    9fb8:	605a      	str	r2, [r3, #4]
    9fba:	609a      	str	r2, [r3, #8]
    9fbc:	60da      	str	r2, [r3, #12]
    9fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
    9fc0:	687b      	ldr	r3, [r7, #4]
    9fc2:	681b      	ldr	r3, [r3, #0]
    9fc4:	4aa5      	ldr	r2, [pc, #660]	; (a25c <HAL_TIM_MspPostInit+0x2b4>)
    9fc6:	4293      	cmp	r3, r2
    9fc8:	d11d      	bne.n	a006 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
    9fca:	4ba5      	ldr	r3, [pc, #660]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    9fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fce:	4aa4      	ldr	r2, [pc, #656]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    9fd0:	f043 0310 	orr.w	r3, r3, #16
    9fd4:	6313      	str	r3, [r2, #48]	; 0x30
    9fd6:	4ba2      	ldr	r3, [pc, #648]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    9fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fda:	f003 0310 	and.w	r3, r3, #16
    9fde:	633b      	str	r3, [r7, #48]	; 0x30
    9fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
    9fe2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    9fe6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    9fe8:	2302      	movs	r3, #2
    9fea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    9fec:	2300      	movs	r3, #0
    9fee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    9ff0:	2300      	movs	r3, #0
    9ff2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    9ff4:	2301      	movs	r3, #1
    9ff6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
    9ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
    9ffc:	4619      	mov	r1, r3
    9ffe:	4899      	ldr	r0, [pc, #612]	; (a264 <HAL_TIM_MspPostInit+0x2bc>)
    a000:	f002 f944 	bl	c28c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
    a004:	e168      	b.n	a2d8 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM2)
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	681b      	ldr	r3, [r3, #0]
    a00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a00e:	d13a      	bne.n	a086 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
    a010:	4b93      	ldr	r3, [pc, #588]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a014:	4a92      	ldr	r2, [pc, #584]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a016:	f043 0302 	orr.w	r3, r3, #2
    a01a:	6313      	str	r3, [r2, #48]	; 0x30
    a01c:	4b90      	ldr	r3, [pc, #576]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a020:	f003 0302 	and.w	r3, r3, #2
    a024:	62fb      	str	r3, [r7, #44]	; 0x2c
    a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
    a028:	4b8d      	ldr	r3, [pc, #564]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a02c:	4a8c      	ldr	r2, [pc, #560]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a02e:	f043 0301 	orr.w	r3, r3, #1
    a032:	6313      	str	r3, [r2, #48]	; 0x30
    a034:	4b8a      	ldr	r3, [pc, #552]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a038:	f003 0301 	and.w	r3, r3, #1
    a03c:	62bb      	str	r3, [r7, #40]	; 0x28
    a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
    a040:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    a044:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a046:	2302      	movs	r3, #2
    a048:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a04a:	2300      	movs	r3, #0
    a04c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a04e:	2300      	movs	r3, #0
    a050:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    a052:	2301      	movs	r3, #1
    a054:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    a056:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a05a:	4619      	mov	r1, r3
    a05c:	4882      	ldr	r0, [pc, #520]	; (a268 <HAL_TIM_MspPostInit+0x2c0>)
    a05e:	f002 f915 	bl	c28c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_2_Pin;
    a062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    a066:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a068:	2302      	movs	r3, #2
    a06a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a06c:	2300      	movs	r3, #0
    a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a070:	2300      	movs	r3, #0
    a072:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    a074:	2301      	movs	r3, #1
    a076:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
    a078:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a07c:	4619      	mov	r1, r3
    a07e:	487b      	ldr	r0, [pc, #492]	; (a26c <HAL_TIM_MspPostInit+0x2c4>)
    a080:	f002 f904 	bl	c28c <HAL_GPIO_Init>
}
    a084:	e128      	b.n	a2d8 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM3)
    a086:	687b      	ldr	r3, [r7, #4]
    a088:	681b      	ldr	r3, [r3, #0]
    a08a:	4a79      	ldr	r2, [pc, #484]	; (a270 <HAL_TIM_MspPostInit+0x2c8>)
    a08c:	4293      	cmp	r3, r2
    a08e:	d139      	bne.n	a104 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
    a090:	4b73      	ldr	r3, [pc, #460]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a094:	4a72      	ldr	r2, [pc, #456]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a096:	f043 0304 	orr.w	r3, r3, #4
    a09a:	6313      	str	r3, [r2, #48]	; 0x30
    a09c:	4b70      	ldr	r3, [pc, #448]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a0a0:	f003 0304 	and.w	r3, r3, #4
    a0a4:	627b      	str	r3, [r7, #36]	; 0x24
    a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
    a0a8:	4b6d      	ldr	r3, [pc, #436]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a0ac:	4a6c      	ldr	r2, [pc, #432]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a0ae:	f043 0302 	orr.w	r3, r3, #2
    a0b2:	6313      	str	r3, [r2, #48]	; 0x30
    a0b4:	4b6a      	ldr	r3, [pc, #424]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a0b8:	f003 0302 	and.w	r3, r3, #2
    a0bc:	623b      	str	r3, [r7, #32]
    a0be:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_7_Pin|PWM_8_Pin;
    a0c0:	f44f 7340 	mov.w	r3, #768	; 0x300
    a0c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a0c6:	2302      	movs	r3, #2
    a0c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a0ca:	2300      	movs	r3, #0
    a0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a0ce:	2300      	movs	r3, #0
    a0d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    a0d2:	2302      	movs	r3, #2
    a0d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    a0d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a0da:	4619      	mov	r1, r3
    a0dc:	4865      	ldr	r0, [pc, #404]	; (a274 <HAL_TIM_MspPostInit+0x2cc>)
    a0de:	f002 f8d5 	bl	c28c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin;
    a0e2:	2330      	movs	r3, #48	; 0x30
    a0e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a0e6:	2302      	movs	r3, #2
    a0e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a0ea:	2300      	movs	r3, #0
    a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a0ee:	2300      	movs	r3, #0
    a0f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    a0f2:	2302      	movs	r3, #2
    a0f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    a0f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a0fa:	4619      	mov	r1, r3
    a0fc:	485a      	ldr	r0, [pc, #360]	; (a268 <HAL_TIM_MspPostInit+0x2c0>)
    a0fe:	f002 f8c5 	bl	c28c <HAL_GPIO_Init>
}
    a102:	e0e9      	b.n	a2d8 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM4)
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	681b      	ldr	r3, [r3, #0]
    a108:	4a5b      	ldr	r2, [pc, #364]	; (a278 <HAL_TIM_MspPostInit+0x2d0>)
    a10a:	4293      	cmp	r3, r2
    a10c:	d11d      	bne.n	a14a <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
    a10e:	4b54      	ldr	r3, [pc, #336]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a112:	4a53      	ldr	r2, [pc, #332]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a114:	f043 0308 	orr.w	r3, r3, #8
    a118:	6313      	str	r3, [r2, #48]	; 0x30
    a11a:	4b51      	ldr	r3, [pc, #324]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a11e:	f003 0308 	and.w	r3, r3, #8
    a122:	61fb      	str	r3, [r7, #28]
    a124:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_9_Pin|PWM_10_Pin|PWM_11_Pin|PWM_12_Pin;
    a126:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    a12a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a12c:	2302      	movs	r3, #2
    a12e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a130:	2300      	movs	r3, #0
    a132:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a134:	2300      	movs	r3, #0
    a136:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    a138:	2302      	movs	r3, #2
    a13a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    a13c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a140:	4619      	mov	r1, r3
    a142:	484e      	ldr	r0, [pc, #312]	; (a27c <HAL_TIM_MspPostInit+0x2d4>)
    a144:	f002 f8a2 	bl	c28c <HAL_GPIO_Init>
}
    a148:	e0c6      	b.n	a2d8 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM8)
    a14a:	687b      	ldr	r3, [r7, #4]
    a14c:	681b      	ldr	r3, [r3, #0]
    a14e:	4a4c      	ldr	r2, [pc, #304]	; (a280 <HAL_TIM_MspPostInit+0x2d8>)
    a150:	4293      	cmp	r3, r2
    a152:	d11c      	bne.n	a18e <HAL_TIM_MspPostInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
    a154:	4b42      	ldr	r3, [pc, #264]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a158:	4a41      	ldr	r2, [pc, #260]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a15a:	f043 0304 	orr.w	r3, r3, #4
    a15e:	6313      	str	r3, [r2, #48]	; 0x30
    a160:	4b3f      	ldr	r3, [pc, #252]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a164:	f003 0304 	and.w	r3, r3, #4
    a168:	61bb      	str	r3, [r7, #24]
    a16a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_13_Pin|PWM_14_Pin;
    a16c:	23c0      	movs	r3, #192	; 0xc0
    a16e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a170:	2302      	movs	r3, #2
    a172:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a174:	2300      	movs	r3, #0
    a176:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a178:	2300      	movs	r3, #0
    a17a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    a17c:	2303      	movs	r3, #3
    a17e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    a180:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a184:	4619      	mov	r1, r3
    a186:	483b      	ldr	r0, [pc, #236]	; (a274 <HAL_TIM_MspPostInit+0x2cc>)
    a188:	f002 f880 	bl	c28c <HAL_GPIO_Init>
}
    a18c:	e0a4      	b.n	a2d8 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM9)
    a18e:	687b      	ldr	r3, [r7, #4]
    a190:	681b      	ldr	r3, [r3, #0]
    a192:	4a3c      	ldr	r2, [pc, #240]	; (a284 <HAL_TIM_MspPostInit+0x2dc>)
    a194:	4293      	cmp	r3, r2
    a196:	d11c      	bne.n	a1d2 <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
    a198:	4b31      	ldr	r3, [pc, #196]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a19c:	4a30      	ldr	r2, [pc, #192]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a19e:	f043 0310 	orr.w	r3, r3, #16
    a1a2:	6313      	str	r3, [r2, #48]	; 0x30
    a1a4:	4b2e      	ldr	r3, [pc, #184]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1a8:	f003 0310 	and.w	r3, r3, #16
    a1ac:	617b      	str	r3, [r7, #20]
    a1ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_15_Pin|PWM_16_Pin;
    a1b0:	2360      	movs	r3, #96	; 0x60
    a1b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a1b4:	2302      	movs	r3, #2
    a1b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a1b8:	2300      	movs	r3, #0
    a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a1bc:	2300      	movs	r3, #0
    a1be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    a1c0:	2303      	movs	r3, #3
    a1c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
    a1c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a1c8:	4619      	mov	r1, r3
    a1ca:	4826      	ldr	r0, [pc, #152]	; (a264 <HAL_TIM_MspPostInit+0x2bc>)
    a1cc:	f002 f85e 	bl	c28c <HAL_GPIO_Init>
}
    a1d0:	e082      	b.n	a2d8 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM10)
    a1d2:	687b      	ldr	r3, [r7, #4]
    a1d4:	681b      	ldr	r3, [r3, #0]
    a1d6:	4a2c      	ldr	r2, [pc, #176]	; (a288 <HAL_TIM_MspPostInit+0x2e0>)
    a1d8:	4293      	cmp	r3, r2
    a1da:	d11c      	bne.n	a216 <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
    a1dc:	4b20      	ldr	r3, [pc, #128]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1e0:	4a1f      	ldr	r2, [pc, #124]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a1e2:	f043 0320 	orr.w	r3, r3, #32
    a1e6:	6313      	str	r3, [r2, #48]	; 0x30
    a1e8:	4b1d      	ldr	r3, [pc, #116]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1ec:	f003 0320 	and.w	r3, r3, #32
    a1f0:	613b      	str	r3, [r7, #16]
    a1f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_17_Pin;
    a1f4:	2340      	movs	r3, #64	; 0x40
    a1f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a1f8:	2302      	movs	r3, #2
    a1fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a1fc:	2300      	movs	r3, #0
    a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a200:	2300      	movs	r3, #0
    a202:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
    a204:	2303      	movs	r3, #3
    a206:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_17_GPIO_Port, &GPIO_InitStruct);
    a208:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a20c:	4619      	mov	r1, r3
    a20e:	481f      	ldr	r0, [pc, #124]	; (a28c <HAL_TIM_MspPostInit+0x2e4>)
    a210:	f002 f83c 	bl	c28c <HAL_GPIO_Init>
}
    a214:	e060      	b.n	a2d8 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM11)
    a216:	687b      	ldr	r3, [r7, #4]
    a218:	681b      	ldr	r3, [r3, #0]
    a21a:	4a1d      	ldr	r2, [pc, #116]	; (a290 <HAL_TIM_MspPostInit+0x2e8>)
    a21c:	4293      	cmp	r3, r2
    a21e:	d139      	bne.n	a294 <HAL_TIM_MspPostInit+0x2ec>
    __HAL_RCC_GPIOF_CLK_ENABLE();
    a220:	4b0f      	ldr	r3, [pc, #60]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a224:	4a0e      	ldr	r2, [pc, #56]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a226:	f043 0320 	orr.w	r3, r3, #32
    a22a:	6313      	str	r3, [r2, #48]	; 0x30
    a22c:	4b0c      	ldr	r3, [pc, #48]	; (a260 <HAL_TIM_MspPostInit+0x2b8>)
    a22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a230:	f003 0320 	and.w	r3, r3, #32
    a234:	60fb      	str	r3, [r7, #12]
    a236:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_18_Pin;
    a238:	2380      	movs	r3, #128	; 0x80
    a23a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a23c:	2302      	movs	r3, #2
    a23e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a240:	2300      	movs	r3, #0
    a242:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a244:	2300      	movs	r3, #0
    a246:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    a248:	2303      	movs	r3, #3
    a24a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_18_GPIO_Port, &GPIO_InitStruct);
    a24c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a250:	4619      	mov	r1, r3
    a252:	480e      	ldr	r0, [pc, #56]	; (a28c <HAL_TIM_MspPostInit+0x2e4>)
    a254:	f002 f81a 	bl	c28c <HAL_GPIO_Init>
}
    a258:	e03e      	b.n	a2d8 <HAL_TIM_MspPostInit+0x330>
    a25a:	bf00      	nop
    a25c:	40010000 	.word	0x40010000
    a260:	40023800 	.word	0x40023800
    a264:	40021000 	.word	0x40021000
    a268:	40020400 	.word	0x40020400
    a26c:	40020000 	.word	0x40020000
    a270:	40000400 	.word	0x40000400
    a274:	40020800 	.word	0x40020800
    a278:	40000800 	.word	0x40000800
    a27c:	40020c00 	.word	0x40020c00
    a280:	40010400 	.word	0x40010400
    a284:	40014000 	.word	0x40014000
    a288:	40014400 	.word	0x40014400
    a28c:	40021400 	.word	0x40021400
    a290:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM14)
    a294:	687b      	ldr	r3, [r7, #4]
    a296:	681b      	ldr	r3, [r3, #0]
    a298:	4a11      	ldr	r2, [pc, #68]	; (a2e0 <HAL_TIM_MspPostInit+0x338>)
    a29a:	4293      	cmp	r3, r2
    a29c:	d11c      	bne.n	a2d8 <HAL_TIM_MspPostInit+0x330>
    __HAL_RCC_GPIOF_CLK_ENABLE();
    a29e:	4b11      	ldr	r3, [pc, #68]	; (a2e4 <HAL_TIM_MspPostInit+0x33c>)
    a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a2a2:	4a10      	ldr	r2, [pc, #64]	; (a2e4 <HAL_TIM_MspPostInit+0x33c>)
    a2a4:	f043 0320 	orr.w	r3, r3, #32
    a2a8:	6313      	str	r3, [r2, #48]	; 0x30
    a2aa:	4b0e      	ldr	r3, [pc, #56]	; (a2e4 <HAL_TIM_MspPostInit+0x33c>)
    a2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a2ae:	f003 0320 	and.w	r3, r3, #32
    a2b2:	60bb      	str	r3, [r7, #8]
    a2b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_19_Pin;
    a2b6:	f44f 7300 	mov.w	r3, #512	; 0x200
    a2ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a2bc:	2302      	movs	r3, #2
    a2be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    a2c0:	2300      	movs	r3, #0
    a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a2c4:	2300      	movs	r3, #0
    a2c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
    a2c8:	2309      	movs	r3, #9
    a2ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_19_GPIO_Port, &GPIO_InitStruct);
    a2cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a2d0:	4619      	mov	r1, r3
    a2d2:	4805      	ldr	r0, [pc, #20]	; (a2e8 <HAL_TIM_MspPostInit+0x340>)
    a2d4:	f001 ffda 	bl	c28c <HAL_GPIO_Init>
}
    a2d8:	bf00      	nop
    a2da:	3748      	adds	r7, #72	; 0x48
    a2dc:	46bd      	mov	sp, r7
    a2de:	bd80      	pop	{r7, pc}
    a2e0:	40002000 	.word	0x40002000
    a2e4:	40023800 	.word	0x40023800
    a2e8:	40021400 	.word	0x40021400

0000a2ec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
    a2ec:	b580      	push	{r7, lr}
    a2ee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
    a2f0:	4b14      	ldr	r3, [pc, #80]	; (a344 <MX_USART1_UART_Init+0x58>)
    a2f2:	4a15      	ldr	r2, [pc, #84]	; (a348 <MX_USART1_UART_Init+0x5c>)
    a2f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
    a2f6:	4b13      	ldr	r3, [pc, #76]	; (a344 <MX_USART1_UART_Init+0x58>)
    a2f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    a2fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
    a2fe:	4b11      	ldr	r3, [pc, #68]	; (a344 <MX_USART1_UART_Init+0x58>)
    a300:	2200      	movs	r2, #0
    a302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
    a304:	4b0f      	ldr	r3, [pc, #60]	; (a344 <MX_USART1_UART_Init+0x58>)
    a306:	2200      	movs	r2, #0
    a308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
    a30a:	4b0e      	ldr	r3, [pc, #56]	; (a344 <MX_USART1_UART_Init+0x58>)
    a30c:	2200      	movs	r2, #0
    a30e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
    a310:	4b0c      	ldr	r3, [pc, #48]	; (a344 <MX_USART1_UART_Init+0x58>)
    a312:	220c      	movs	r2, #12
    a314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    a316:	4b0b      	ldr	r3, [pc, #44]	; (a344 <MX_USART1_UART_Init+0x58>)
    a318:	2200      	movs	r2, #0
    a31a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    a31c:	4b09      	ldr	r3, [pc, #36]	; (a344 <MX_USART1_UART_Init+0x58>)
    a31e:	2200      	movs	r2, #0
    a320:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    a322:	4b08      	ldr	r3, [pc, #32]	; (a344 <MX_USART1_UART_Init+0x58>)
    a324:	2200      	movs	r2, #0
    a326:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    a328:	4b06      	ldr	r3, [pc, #24]	; (a344 <MX_USART1_UART_Init+0x58>)
    a32a:	2200      	movs	r2, #0
    a32c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
    a32e:	4805      	ldr	r0, [pc, #20]	; (a344 <MX_USART1_UART_Init+0x58>)
    a330:	f005 fa06 	bl	f740 <HAL_UART_Init>
    a334:	4603      	mov	r3, r0
    a336:	2b00      	cmp	r3, #0
    a338:	d001      	beq.n	a33e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
    a33a:	f7fe fcba 	bl	8cb2 <Error_Handler>
  }

}
    a33e:	bf00      	nop
    a340:	bd80      	pop	{r7, pc}
    a342:	bf00      	nop
    a344:	00033f4c 	.word	0x00033f4c
    a348:	40011000 	.word	0x40011000

0000a34c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
    a34c:	b580      	push	{r7, lr}
    a34e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
    a350:	4b14      	ldr	r3, [pc, #80]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a352:	4a15      	ldr	r2, [pc, #84]	; (a3a8 <MX_USART2_UART_Init+0x5c>)
    a354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
    a356:	4b13      	ldr	r3, [pc, #76]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    a35c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
    a35e:	4b11      	ldr	r3, [pc, #68]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a360:	2200      	movs	r2, #0
    a362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
    a364:	4b0f      	ldr	r3, [pc, #60]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a366:	2200      	movs	r2, #0
    a368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
    a36a:	4b0e      	ldr	r3, [pc, #56]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a36c:	2200      	movs	r2, #0
    a36e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
    a370:	4b0c      	ldr	r3, [pc, #48]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a372:	220c      	movs	r2, #12
    a374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    a376:	4b0b      	ldr	r3, [pc, #44]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a378:	2200      	movs	r2, #0
    a37a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    a37c:	4b09      	ldr	r3, [pc, #36]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a37e:	2200      	movs	r2, #0
    a380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    a382:	4b08      	ldr	r3, [pc, #32]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a384:	2200      	movs	r2, #0
    a386:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    a388:	4b06      	ldr	r3, [pc, #24]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a38a:	2200      	movs	r2, #0
    a38c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
    a38e:	4805      	ldr	r0, [pc, #20]	; (a3a4 <MX_USART2_UART_Init+0x58>)
    a390:	f005 f9d6 	bl	f740 <HAL_UART_Init>
    a394:	4603      	mov	r3, r0
    a396:	2b00      	cmp	r3, #0
    a398:	d001      	beq.n	a39e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
    a39a:	f7fe fc8a 	bl	8cb2 <Error_Handler>
  }

}
    a39e:	bf00      	nop
    a3a0:	bd80      	pop	{r7, pc}
    a3a2:	bf00      	nop
    a3a4:	00033fcc 	.word	0x00033fcc
    a3a8:	40004400 	.word	0x40004400

0000a3ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
    a3ac:	b580      	push	{r7, lr}
    a3ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
    a3b0:	4b14      	ldr	r3, [pc, #80]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3b2:	4a15      	ldr	r2, [pc, #84]	; (a408 <MX_USART3_UART_Init+0x5c>)
    a3b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
    a3b6:	4b13      	ldr	r3, [pc, #76]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3b8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
    a3bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
    a3be:	4b11      	ldr	r3, [pc, #68]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3c0:	2200      	movs	r2, #0
    a3c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
    a3c4:	4b0f      	ldr	r3, [pc, #60]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3c6:	2200      	movs	r2, #0
    a3c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
    a3ca:	4b0e      	ldr	r3, [pc, #56]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3cc:	2200      	movs	r2, #0
    a3ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
    a3d0:	4b0c      	ldr	r3, [pc, #48]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3d2:	220c      	movs	r2, #12
    a3d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    a3d6:	4b0b      	ldr	r3, [pc, #44]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3d8:	2200      	movs	r2, #0
    a3da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
    a3dc:	4b09      	ldr	r3, [pc, #36]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3de:	2200      	movs	r2, #0
    a3e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    a3e2:	4b08      	ldr	r3, [pc, #32]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3e4:	2200      	movs	r2, #0
    a3e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    a3e8:	4b06      	ldr	r3, [pc, #24]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3ea:	2200      	movs	r2, #0
    a3ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
    a3ee:	4805      	ldr	r0, [pc, #20]	; (a404 <MX_USART3_UART_Init+0x58>)
    a3f0:	f005 f9a6 	bl	f740 <HAL_UART_Init>
    a3f4:	4603      	mov	r3, r0
    a3f6:	2b00      	cmp	r3, #0
    a3f8:	d001      	beq.n	a3fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
    a3fa:	f7fe fc5a 	bl	8cb2 <Error_Handler>
  }

}
    a3fe:	bf00      	nop
    a400:	bd80      	pop	{r7, pc}
    a402:	bf00      	nop
    a404:	00033e6c 	.word	0x00033e6c
    a408:	40004800 	.word	0x40004800

0000a40c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
    a40c:	b580      	push	{r7, lr}
    a40e:	b08e      	sub	sp, #56	; 0x38
    a410:	af00      	add	r7, sp, #0
    a412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    a414:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a418:	2200      	movs	r2, #0
    a41a:	601a      	str	r2, [r3, #0]
    a41c:	605a      	str	r2, [r3, #4]
    a41e:	609a      	str	r2, [r3, #8]
    a420:	60da      	str	r2, [r3, #12]
    a422:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
    a424:	687b      	ldr	r3, [r7, #4]
    a426:	681b      	ldr	r3, [r3, #0]
    a428:	4a85      	ldr	r2, [pc, #532]	; (a640 <HAL_UART_MspInit+0x234>)
    a42a:	4293      	cmp	r3, r2
    a42c:	d141      	bne.n	a4b2 <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
    a42e:	4b85      	ldr	r3, [pc, #532]	; (a644 <HAL_UART_MspInit+0x238>)
    a430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a432:	4a84      	ldr	r2, [pc, #528]	; (a644 <HAL_UART_MspInit+0x238>)
    a434:	f043 0310 	orr.w	r3, r3, #16
    a438:	6453      	str	r3, [r2, #68]	; 0x44
    a43a:	4b82      	ldr	r3, [pc, #520]	; (a644 <HAL_UART_MspInit+0x238>)
    a43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a43e:	f003 0310 	and.w	r3, r3, #16
    a442:	623b      	str	r3, [r7, #32]
    a444:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
    a446:	4b7f      	ldr	r3, [pc, #508]	; (a644 <HAL_UART_MspInit+0x238>)
    a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a44a:	4a7e      	ldr	r2, [pc, #504]	; (a644 <HAL_UART_MspInit+0x238>)
    a44c:	f043 0302 	orr.w	r3, r3, #2
    a450:	6313      	str	r3, [r2, #48]	; 0x30
    a452:	4b7c      	ldr	r3, [pc, #496]	; (a644 <HAL_UART_MspInit+0x238>)
    a454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a456:	f003 0302 	and.w	r3, r3, #2
    a45a:	61fb      	str	r3, [r7, #28]
    a45c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    a45e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    a462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a464:	2302      	movs	r3, #2
    a466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    a468:	2302      	movs	r3, #2
    a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    a46c:	2303      	movs	r3, #3
    a46e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    a470:	2304      	movs	r3, #4
    a472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    a474:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a478:	4619      	mov	r1, r3
    a47a:	4873      	ldr	r0, [pc, #460]	; (a648 <HAL_UART_MspInit+0x23c>)
    a47c:	f001 ff06 	bl	c28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    a480:	2340      	movs	r3, #64	; 0x40
    a482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a484:	2302      	movs	r3, #2
    a486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    a488:	2302      	movs	r3, #2
    a48a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    a48c:	2303      	movs	r3, #3
    a48e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    a490:	2307      	movs	r3, #7
    a492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    a494:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a498:	4619      	mov	r1, r3
    a49a:	486b      	ldr	r0, [pc, #428]	; (a648 <HAL_UART_MspInit+0x23c>)
    a49c:	f001 fef6 	bl	c28c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
    a4a0:	2200      	movs	r2, #0
    a4a2:	2105      	movs	r1, #5
    a4a4:	2025      	movs	r0, #37	; 0x25
    a4a6:	f001 fc6b 	bl	bd80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
    a4aa:	2025      	movs	r0, #37	; 0x25
    a4ac:	f001 fc84 	bl	bdb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
    a4b0:	e0c2      	b.n	a638 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART2)
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	681b      	ldr	r3, [r3, #0]
    a4b6:	4a65      	ldr	r2, [pc, #404]	; (a64c <HAL_UART_MspInit+0x240>)
    a4b8:	4293      	cmp	r3, r2
    a4ba:	d128      	bne.n	a50e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
    a4bc:	4b61      	ldr	r3, [pc, #388]	; (a644 <HAL_UART_MspInit+0x238>)
    a4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a4c0:	4a60      	ldr	r2, [pc, #384]	; (a644 <HAL_UART_MspInit+0x238>)
    a4c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a4c6:	6413      	str	r3, [r2, #64]	; 0x40
    a4c8:	4b5e      	ldr	r3, [pc, #376]	; (a644 <HAL_UART_MspInit+0x238>)
    a4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a4cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a4d0:	61bb      	str	r3, [r7, #24]
    a4d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
    a4d4:	4b5b      	ldr	r3, [pc, #364]	; (a644 <HAL_UART_MspInit+0x238>)
    a4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a4d8:	4a5a      	ldr	r2, [pc, #360]	; (a644 <HAL_UART_MspInit+0x238>)
    a4da:	f043 0308 	orr.w	r3, r3, #8
    a4de:	6313      	str	r3, [r2, #48]	; 0x30
    a4e0:	4b58      	ldr	r3, [pc, #352]	; (a644 <HAL_UART_MspInit+0x238>)
    a4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a4e4:	f003 0308 	and.w	r3, r3, #8
    a4e8:	617b      	str	r3, [r7, #20]
    a4ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    a4ec:	2360      	movs	r3, #96	; 0x60
    a4ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a4f0:	2302      	movs	r3, #2
    a4f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    a4f4:	2302      	movs	r3, #2
    a4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    a4f8:	2303      	movs	r3, #3
    a4fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    a4fc:	2307      	movs	r3, #7
    a4fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    a500:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a504:	4619      	mov	r1, r3
    a506:	4852      	ldr	r0, [pc, #328]	; (a650 <HAL_UART_MspInit+0x244>)
    a508:	f001 fec0 	bl	c28c <HAL_GPIO_Init>
}
    a50c:	e094      	b.n	a638 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART3)
    a50e:	687b      	ldr	r3, [r7, #4]
    a510:	681b      	ldr	r3, [r3, #0]
    a512:	4a50      	ldr	r2, [pc, #320]	; (a654 <HAL_UART_MspInit+0x248>)
    a514:	4293      	cmp	r3, r2
    a516:	f040 808f 	bne.w	a638 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
    a51a:	4b4a      	ldr	r3, [pc, #296]	; (a644 <HAL_UART_MspInit+0x238>)
    a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a51e:	4a49      	ldr	r2, [pc, #292]	; (a644 <HAL_UART_MspInit+0x238>)
    a520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    a524:	6413      	str	r3, [r2, #64]	; 0x40
    a526:	4b47      	ldr	r3, [pc, #284]	; (a644 <HAL_UART_MspInit+0x238>)
    a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a52a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    a52e:	613b      	str	r3, [r7, #16]
    a530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
    a532:	4b44      	ldr	r3, [pc, #272]	; (a644 <HAL_UART_MspInit+0x238>)
    a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a536:	4a43      	ldr	r2, [pc, #268]	; (a644 <HAL_UART_MspInit+0x238>)
    a538:	f043 0308 	orr.w	r3, r3, #8
    a53c:	6313      	str	r3, [r2, #48]	; 0x30
    a53e:	4b41      	ldr	r3, [pc, #260]	; (a644 <HAL_UART_MspInit+0x238>)
    a540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a542:	f003 0308 	and.w	r3, r3, #8
    a546:	60fb      	str	r3, [r7, #12]
    a548:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    a54a:	f44f 7340 	mov.w	r3, #768	; 0x300
    a54e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a550:	2302      	movs	r3, #2
    a552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    a554:	2302      	movs	r3, #2
    a556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    a558:	2303      	movs	r3, #3
    a55a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    a55c:	2307      	movs	r3, #7
    a55e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    a560:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a564:	4619      	mov	r1, r3
    a566:	483a      	ldr	r0, [pc, #232]	; (a650 <HAL_UART_MspInit+0x244>)
    a568:	f001 fe90 	bl	c28c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
    a56c:	4b3a      	ldr	r3, [pc, #232]	; (a658 <HAL_UART_MspInit+0x24c>)
    a56e:	4a3b      	ldr	r2, [pc, #236]	; (a65c <HAL_UART_MspInit+0x250>)
    a570:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
    a572:	4b39      	ldr	r3, [pc, #228]	; (a658 <HAL_UART_MspInit+0x24c>)
    a574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    a578:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    a57a:	4b37      	ldr	r3, [pc, #220]	; (a658 <HAL_UART_MspInit+0x24c>)
    a57c:	2200      	movs	r2, #0
    a57e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    a580:	4b35      	ldr	r3, [pc, #212]	; (a658 <HAL_UART_MspInit+0x24c>)
    a582:	2200      	movs	r2, #0
    a584:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    a586:	4b34      	ldr	r3, [pc, #208]	; (a658 <HAL_UART_MspInit+0x24c>)
    a588:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a58c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    a58e:	4b32      	ldr	r3, [pc, #200]	; (a658 <HAL_UART_MspInit+0x24c>)
    a590:	2200      	movs	r2, #0
    a592:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    a594:	4b30      	ldr	r3, [pc, #192]	; (a658 <HAL_UART_MspInit+0x24c>)
    a596:	2200      	movs	r2, #0
    a598:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    a59a:	4b2f      	ldr	r3, [pc, #188]	; (a658 <HAL_UART_MspInit+0x24c>)
    a59c:	2200      	movs	r2, #0
    a59e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
    a5a0:	4b2d      	ldr	r3, [pc, #180]	; (a658 <HAL_UART_MspInit+0x24c>)
    a5a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a5a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    a5a8:	4b2b      	ldr	r3, [pc, #172]	; (a658 <HAL_UART_MspInit+0x24c>)
    a5aa:	2200      	movs	r2, #0
    a5ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    a5ae:	482a      	ldr	r0, [pc, #168]	; (a658 <HAL_UART_MspInit+0x24c>)
    a5b0:	f001 fc10 	bl	bdd4 <HAL_DMA_Init>
    a5b4:	4603      	mov	r3, r0
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	d001      	beq.n	a5be <HAL_UART_MspInit+0x1b2>
      Error_Handler();
    a5ba:	f7fe fb7a 	bl	8cb2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
    a5be:	687b      	ldr	r3, [r7, #4]
    a5c0:	4a25      	ldr	r2, [pc, #148]	; (a658 <HAL_UART_MspInit+0x24c>)
    a5c2:	66da      	str	r2, [r3, #108]	; 0x6c
    a5c4:	4a24      	ldr	r2, [pc, #144]	; (a658 <HAL_UART_MspInit+0x24c>)
    a5c6:	687b      	ldr	r3, [r7, #4]
    a5c8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
    a5ca:	4b25      	ldr	r3, [pc, #148]	; (a660 <HAL_UART_MspInit+0x254>)
    a5cc:	4a25      	ldr	r2, [pc, #148]	; (a664 <HAL_UART_MspInit+0x258>)
    a5ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
    a5d0:	4b23      	ldr	r3, [pc, #140]	; (a660 <HAL_UART_MspInit+0x254>)
    a5d2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
    a5d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    a5d8:	4b21      	ldr	r3, [pc, #132]	; (a660 <HAL_UART_MspInit+0x254>)
    a5da:	2240      	movs	r2, #64	; 0x40
    a5dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    a5de:	4b20      	ldr	r3, [pc, #128]	; (a660 <HAL_UART_MspInit+0x254>)
    a5e0:	2200      	movs	r2, #0
    a5e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    a5e4:	4b1e      	ldr	r3, [pc, #120]	; (a660 <HAL_UART_MspInit+0x254>)
    a5e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a5ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    a5ec:	4b1c      	ldr	r3, [pc, #112]	; (a660 <HAL_UART_MspInit+0x254>)
    a5ee:	2200      	movs	r2, #0
    a5f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    a5f2:	4b1b      	ldr	r3, [pc, #108]	; (a660 <HAL_UART_MspInit+0x254>)
    a5f4:	2200      	movs	r2, #0
    a5f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    a5f8:	4b19      	ldr	r3, [pc, #100]	; (a660 <HAL_UART_MspInit+0x254>)
    a5fa:	2200      	movs	r2, #0
    a5fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    a5fe:	4b18      	ldr	r3, [pc, #96]	; (a660 <HAL_UART_MspInit+0x254>)
    a600:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a604:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    a606:	4b16      	ldr	r3, [pc, #88]	; (a660 <HAL_UART_MspInit+0x254>)
    a608:	2200      	movs	r2, #0
    a60a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
    a60c:	4814      	ldr	r0, [pc, #80]	; (a660 <HAL_UART_MspInit+0x254>)
    a60e:	f001 fbe1 	bl	bdd4 <HAL_DMA_Init>
    a612:	4603      	mov	r3, r0
    a614:	2b00      	cmp	r3, #0
    a616:	d001      	beq.n	a61c <HAL_UART_MspInit+0x210>
      Error_Handler();
    a618:	f7fe fb4b 	bl	8cb2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
    a61c:	687b      	ldr	r3, [r7, #4]
    a61e:	4a10      	ldr	r2, [pc, #64]	; (a660 <HAL_UART_MspInit+0x254>)
    a620:	669a      	str	r2, [r3, #104]	; 0x68
    a622:	4a0f      	ldr	r2, [pc, #60]	; (a660 <HAL_UART_MspInit+0x254>)
    a624:	687b      	ldr	r3, [r7, #4]
    a626:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
    a628:	2200      	movs	r2, #0
    a62a:	2105      	movs	r1, #5
    a62c:	2027      	movs	r0, #39	; 0x27
    a62e:	f001 fba7 	bl	bd80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
    a632:	2027      	movs	r0, #39	; 0x27
    a634:	f001 fbc0 	bl	bdb8 <HAL_NVIC_EnableIRQ>
}
    a638:	bf00      	nop
    a63a:	3738      	adds	r7, #56	; 0x38
    a63c:	46bd      	mov	sp, r7
    a63e:	bd80      	pop	{r7, pc}
    a640:	40011000 	.word	0x40011000
    a644:	40023800 	.word	0x40023800
    a648:	40020400 	.word	0x40020400
    a64c:	40004400 	.word	0x40004400
    a650:	40020c00 	.word	0x40020c00
    a654:	40004800 	.word	0x40004800
    a658:	00033e0c 	.word	0x00033e0c
    a65c:	40026028 	.word	0x40026028
    a660:	00033eec 	.word	0x00033eec
    a664:	40026070 	.word	0x40026070

0000a668 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
    a668:	b480      	push	{r7}
    a66a:	b091      	sub	sp, #68	; 0x44
    a66c:	af00      	add	r7, sp, #0
    a66e:	60f8      	str	r0, [r7, #12]
    a670:	60b9      	str	r1, [r7, #8]
    a672:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
    a674:	68fb      	ldr	r3, [r7, #12]
    a676:	685b      	ldr	r3, [r3, #4]
    a678:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
    a67a:	68bb      	ldr	r3, [r7, #8]
    a67c:	685b      	ldr	r3, [r3, #4]
    a67e:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
    a680:	687b      	ldr	r3, [r7, #4]
    a682:	685b      	ldr	r3, [r3, #4]
    a684:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
    a686:	68fb      	ldr	r3, [r7, #12]
    a688:	881b      	ldrh	r3, [r3, #0]
    a68a:	461a      	mov	r2, r3
    a68c:	68fb      	ldr	r3, [r7, #12]
    a68e:	885b      	ldrh	r3, [r3, #2]
    a690:	fb03 f302 	mul.w	r3, r3, r2
    a694:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
    a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a698:	089b      	lsrs	r3, r3, #2
    a69a:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
    a69c:	e052      	b.n	a744 <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
    a69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a6a0:	681b      	ldr	r3, [r3, #0]
    a6a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
    a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a6a6:	681b      	ldr	r3, [r3, #0]
    a6a8:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
    a6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a6ac:	685b      	ldr	r3, [r3, #4]
    a6ae:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
    a6b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    a6b4:	edd7 7a08 	vldr	s15, [r7, #32]
    a6b8:	ee77 7a27 	vadd.f32	s15, s14, s15
    a6bc:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
    a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a6c2:	685b      	ldr	r3, [r3, #4]
    a6c4:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
    a6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a6c8:	689b      	ldr	r3, [r3, #8]
    a6ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
    a6cc:	ed97 7a07 	vldr	s14, [r7, #28]
    a6d0:	edd7 7a05 	vldr	s15, [r7, #20]
    a6d4:	ee77 7a27 	vadd.f32	s15, s14, s15
    a6d8:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
    a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a6de:	689b      	ldr	r3, [r3, #8]
    a6e0:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
    a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a6e4:	69ba      	ldr	r2, [r7, #24]
    a6e6:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
    a6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a6ea:	3304      	adds	r3, #4
    a6ec:	693a      	ldr	r2, [r7, #16]
    a6ee:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
    a6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a6f2:	68db      	ldr	r3, [r3, #12]
    a6f4:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
    a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a6f8:	68db      	ldr	r3, [r3, #12]
    a6fa:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
    a6fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    a700:	edd7 7a08 	vldr	s15, [r7, #32]
    a704:	ee77 7a27 	vadd.f32	s15, s14, s15
    a708:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
    a70c:	ed97 7a07 	vldr	s14, [r7, #28]
    a710:	edd7 7a05 	vldr	s15, [r7, #20]
    a714:	ee77 7a27 	vadd.f32	s15, s14, s15
    a718:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
    a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a71e:	3308      	adds	r3, #8
    a720:	69ba      	ldr	r2, [r7, #24]
    a722:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
    a724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a726:	330c      	adds	r3, #12
    a728:	693a      	ldr	r2, [r7, #16]
    a72a:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
    a72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a72e:	3310      	adds	r3, #16
    a730:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
    a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a734:	3310      	adds	r3, #16
    a736:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
    a738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a73a:	3310      	adds	r3, #16
    a73c:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
    a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a740:	3b01      	subs	r3, #1
    a742:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
    a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a746:	2b00      	cmp	r3, #0
    a748:	d1a9      	bne.n	a69e <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
    a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a74c:	f003 0303 	and.w	r3, r3, #3
    a750:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
    a752:	e013      	b.n	a77c <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
    a754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a756:	1d1a      	adds	r2, r3, #4
    a758:	63fa      	str	r2, [r7, #60]	; 0x3c
    a75a:	ed93 7a00 	vldr	s14, [r3]
    a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a760:	1d1a      	adds	r2, r3, #4
    a762:	63ba      	str	r2, [r7, #56]	; 0x38
    a764:	edd3 7a00 	vldr	s15, [r3]
    a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a76a:	1d1a      	adds	r2, r3, #4
    a76c:	637a      	str	r2, [r7, #52]	; 0x34
    a76e:	ee77 7a27 	vadd.f32	s15, s14, s15
    a772:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
    a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a778:	3b01      	subs	r3, #1
    a77a:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
    a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a77e:	2b00      	cmp	r3, #0
    a780:	d1e8      	bne.n	a754 <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
    a782:	2300      	movs	r3, #0
    a784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
    a788:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
    a78c:	4618      	mov	r0, r3
    a78e:	3744      	adds	r7, #68	; 0x44
    a790:	46bd      	mov	sp, r7
    a792:	f85d 7b04 	ldr.w	r7, [sp], #4
    a796:	4770      	bx	lr

0000a798 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
    a798:	b480      	push	{r7}
    a79a:	b085      	sub	sp, #20
    a79c:	af00      	add	r7, sp, #0
    a79e:	60f8      	str	r0, [r7, #12]
    a7a0:	607b      	str	r3, [r7, #4]
    a7a2:	460b      	mov	r3, r1
    a7a4:	817b      	strh	r3, [r7, #10]
    a7a6:	4613      	mov	r3, r2
    a7a8:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
    a7aa:	68fb      	ldr	r3, [r7, #12]
    a7ac:	897a      	ldrh	r2, [r7, #10]
    a7ae:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
    a7b0:	68fb      	ldr	r3, [r7, #12]
    a7b2:	893a      	ldrh	r2, [r7, #8]
    a7b4:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
    a7b6:	68fb      	ldr	r3, [r7, #12]
    a7b8:	687a      	ldr	r2, [r7, #4]
    a7ba:	605a      	str	r2, [r3, #4]
}
    a7bc:	bf00      	nop
    a7be:	3714      	adds	r7, #20
    a7c0:	46bd      	mov	sp, r7
    a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7c6:	4770      	bx	lr

0000a7c8 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
    a7c8:	b480      	push	{r7}
    a7ca:	b09b      	sub	sp, #108	; 0x6c
    a7cc:	af00      	add	r7, sp, #0
    a7ce:	6078      	str	r0, [r7, #4]
    a7d0:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
    a7d2:	687b      	ldr	r3, [r7, #4]
    a7d4:	685b      	ldr	r3, [r3, #4]
    a7d6:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
    a7d8:	683b      	ldr	r3, [r7, #0]
    a7da:	685b      	ldr	r3, [r3, #4]
    a7dc:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
    a7de:	687b      	ldr	r3, [r7, #4]
    a7e0:	881b      	ldrh	r3, [r3, #0]
    a7e2:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
    a7e4:	687b      	ldr	r3, [r7, #4]
    a7e6:	885b      	ldrh	r3, [r3, #2]
    a7e8:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
    a7ea:	f04f 0300 	mov.w	r3, #0
    a7ee:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
    a7f0:	2300      	movs	r3, #0
    a7f2:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
    a7f4:	6a3b      	ldr	r3, [r7, #32]
    a7f6:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
    a7f8:	69fb      	ldr	r3, [r7, #28]
    a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
    a7fc:	e029      	b.n	a852 <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
    a7fe:	69fa      	ldr	r2, [r7, #28]
    a800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a802:	1ad3      	subs	r3, r2, r3
    a804:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
    a806:	e008      	b.n	a81a <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
    a808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a80a:	1d1a      	adds	r2, r3, #4
    a80c:	65ba      	str	r2, [r7, #88]	; 0x58
    a80e:	f04f 0200 	mov.w	r2, #0
    a812:	601a      	str	r2, [r3, #0]
        j--;
    a814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a816:	3b01      	subs	r3, #1
    a818:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
    a81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a81c:	2b00      	cmp	r3, #0
    a81e:	d1f3      	bne.n	a808 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
    a820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a822:	1d1a      	adds	r2, r3, #4
    a824:	65ba      	str	r2, [r7, #88]	; 0x58
    a826:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    a82a:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
    a82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a82e:	3b01      	subs	r3, #1
    a830:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
    a832:	e008      	b.n	a846 <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
    a834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a836:	1d1a      	adds	r2, r3, #4
    a838:	65ba      	str	r2, [r7, #88]	; 0x58
    a83a:	f04f 0200 	mov.w	r2, #0
    a83e:	601a      	str	r2, [r3, #0]
        j--;
    a840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a842:	3b01      	subs	r3, #1
    a844:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
    a846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a848:	2b00      	cmp	r3, #0
    a84a:	d1f3      	bne.n	a834 <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
    a84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a84e:	3b01      	subs	r3, #1
    a850:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
    a852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a854:	2b00      	cmp	r3, #0
    a856:	d1d2      	bne.n	a7fe <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
    a858:	69bb      	ldr	r3, [r7, #24]
    a85a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
    a85c:	2300      	movs	r3, #0
    a85e:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
    a860:	e1aa      	b.n	abb8 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
    a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a864:	69ba      	ldr	r2, [r7, #24]
    a866:	fb02 f303 	mul.w	r3, r2, r3
    a86a:	009b      	lsls	r3, r3, #2
    a86c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    a86e:	4413      	add	r3, r2
    a870:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
    a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a874:	69ba      	ldr	r2, [r7, #24]
    a876:	fb02 f303 	mul.w	r3, r2, r3
    a87a:	009b      	lsls	r3, r3, #2
    a87c:	6a3a      	ldr	r2, [r7, #32]
    a87e:	4413      	add	r3, r2
    a880:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
    a882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a884:	681b      	ldr	r3, [r3, #0]
    a886:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
    a888:	f04f 0300 	mov.w	r3, #0
    a88c:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
    a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a890:	643b      	str	r3, [r7, #64]	; 0x40
    a892:	e036      	b.n	a902 <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
    a894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a896:	edd3 7a00 	vldr	s15, [r3]
    a89a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8a2:	dd10      	ble.n	a8c6 <arm_mat_inverse_f32+0xfe>
    a8a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a8a6:	edd3 7a00 	vldr	s15, [r3]
    a8aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    a8ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
    a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8b6:	d503      	bpl.n	a8c0 <arm_mat_inverse_f32+0xf8>
    a8b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a8ba:	edd3 7a00 	vldr	s15, [r3]
    a8be:	e016      	b.n	a8ee <arm_mat_inverse_f32+0x126>
    a8c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
    a8c4:	e013      	b.n	a8ee <arm_mat_inverse_f32+0x126>
    a8c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a8c8:	edd3 7a00 	vldr	s15, [r3]
    a8cc:	eef1 7a67 	vneg.f32	s15, s15
    a8d0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    a8d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    a8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8dc:	d505      	bpl.n	a8ea <arm_mat_inverse_f32+0x122>
    a8de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a8e0:	edd3 7a00 	vldr	s15, [r3]
    a8e4:	eef1 7a67 	vneg.f32	s15, s15
    a8e8:	e001      	b.n	a8ee <arm_mat_inverse_f32+0x126>
    a8ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
    a8ee:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
    a8f2:	69bb      	ldr	r3, [r7, #24]
    a8f4:	009b      	lsls	r3, r3, #2
    a8f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    a8f8:	4413      	add	r3, r2
    a8fa:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
    a8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a8fe:	3301      	adds	r3, #1
    a900:	643b      	str	r3, [r7, #64]	; 0x40
    a902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a904:	69fb      	ldr	r3, [r7, #28]
    a906:	429a      	cmp	r2, r3
    a908:	d3c4      	bcc.n	a894 <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
    a90a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
    a90e:	eef5 7a40 	vcmp.f32	s15, #0.0
    a912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a916:	d102      	bne.n	a91e <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
    a918:	f06f 0304 	mvn.w	r3, #4
    a91c:	e186      	b.n	ac2c <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
    a91e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a920:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
    a922:	2301      	movs	r3, #1
    a924:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
    a926:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
    a92a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a932:	dd02      	ble.n	a93a <arm_mat_inverse_f32+0x172>
    a934:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
    a938:	e003      	b.n	a942 <arm_mat_inverse_f32+0x17a>
    a93a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
    a93e:	eef1 7a67 	vneg.f32	s15, s15
    a942:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    a946:	eef4 7a47 	vcmp.f32	s15, s14
    a94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a94e:	d069      	beq.n	aa24 <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
    a950:	69fa      	ldr	r2, [r7, #28]
    a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a954:	1ad3      	subs	r3, r2, r3
    a956:	3b01      	subs	r3, #1
    a958:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
    a95a:	e060      	b.n	aa1e <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
    a95c:	69bb      	ldr	r3, [r7, #24]
    a95e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a960:	fb02 f303 	mul.w	r3, r2, r3
    a964:	009b      	lsls	r3, r3, #2
    a966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    a968:	4413      	add	r3, r2
    a96a:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
    a96c:	69bb      	ldr	r3, [r7, #24]
    a96e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a970:	fb02 f303 	mul.w	r3, r2, r3
    a974:	009b      	lsls	r3, r3, #2
    a976:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a978:	4413      	add	r3, r2
    a97a:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
    a97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a97e:	edd3 7a00 	vldr	s15, [r3]
    a982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a98a:	dd03      	ble.n	a994 <arm_mat_inverse_f32+0x1cc>
    a98c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a98e:	edd3 7a00 	vldr	s15, [r3]
    a992:	e004      	b.n	a99e <arm_mat_inverse_f32+0x1d6>
    a994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a996:	edd3 7a00 	vldr	s15, [r3]
    a99a:	eef1 7a67 	vneg.f32	s15, s15
    a99e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    a9a2:	eef4 7a47 	vcmp.f32	s15, s14
    a9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a9aa:	d132      	bne.n	aa12 <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
    a9ac:	69ba      	ldr	r2, [r7, #24]
    a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a9b0:	1ad3      	subs	r3, r2, r3
    a9b2:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
    a9b4:	e010      	b.n	a9d8 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
    a9b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a9b8:	681b      	ldr	r3, [r3, #0]
    a9ba:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
    a9bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a9be:	1d1a      	adds	r2, r3, #4
    a9c0:	65fa      	str	r2, [r7, #92]	; 0x5c
    a9c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    a9c4:	6812      	ldr	r2, [r2, #0]
    a9c6:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
    a9c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a9ca:	1d1a      	adds	r2, r3, #4
    a9cc:	663a      	str	r2, [r7, #96]	; 0x60
    a9ce:	697a      	ldr	r2, [r7, #20]
    a9d0:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
    a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a9d4:	3b01      	subs	r3, #1
    a9d6:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
    a9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a9da:	2b00      	cmp	r3, #0
    a9dc:	d1eb      	bne.n	a9b6 <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
    a9de:	69bb      	ldr	r3, [r7, #24]
    a9e0:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
    a9e2:	e010      	b.n	aa06 <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
    a9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a9e6:	681b      	ldr	r3, [r3, #0]
    a9e8:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
    a9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a9ec:	1d1a      	adds	r2, r3, #4
    a9ee:	657a      	str	r2, [r7, #84]	; 0x54
    a9f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a9f2:	6812      	ldr	r2, [r2, #0]
    a9f4:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
    a9f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a9f8:	1d1a      	adds	r2, r3, #4
    a9fa:	65ba      	str	r2, [r7, #88]	; 0x58
    a9fc:	697a      	ldr	r2, [r7, #20]
    a9fe:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
    aa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa02:	3b01      	subs	r3, #1
    aa04:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
    aa06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa08:	2b00      	cmp	r3, #0
    aa0a:	d1eb      	bne.n	a9e4 <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
    aa0c:	2301      	movs	r3, #1
    aa0e:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
    aa10:	e008      	b.n	aa24 <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
    aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa14:	3301      	adds	r3, #1
    aa16:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
    aa18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aa1a:	3b01      	subs	r3, #1
    aa1c:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
    aa1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aa20:	2b00      	cmp	r3, #0
    aa22:	d19b      	bne.n	a95c <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
    aa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aa26:	2b01      	cmp	r3, #1
    aa28:	d009      	beq.n	aa3e <arm_mat_inverse_f32+0x276>
    aa2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
    aa2e:	eef5 7a40 	vcmp.f32	s15, #0.0
    aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aa36:	d102      	bne.n	aa3e <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
    aa38:	f06f 0304 	mvn.w	r3, #4
    aa3c:	e0f6      	b.n	ac2c <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
    aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa40:	69ba      	ldr	r2, [r7, #24]
    aa42:	fb02 f303 	mul.w	r3, r2, r3
    aa46:	009b      	lsls	r3, r3, #2
    aa48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    aa4a:	4413      	add	r3, r2
    aa4c:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
    aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa50:	69ba      	ldr	r2, [r7, #24]
    aa52:	fb02 f303 	mul.w	r3, r2, r3
    aa56:	009b      	lsls	r3, r3, #2
    aa58:	6a3a      	ldr	r2, [r7, #32]
    aa5a:	4413      	add	r3, r2
    aa5c:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
    aa5e:	693b      	ldr	r3, [r7, #16]
    aa60:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
    aa62:	68fb      	ldr	r3, [r7, #12]
    aa64:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
    aa66:	693b      	ldr	r3, [r7, #16]
    aa68:	681b      	ldr	r3, [r3, #0]
    aa6a:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
    aa6c:	69ba      	ldr	r2, [r7, #24]
    aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa70:	1ad3      	subs	r3, r2, r3
    aa72:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
    aa74:	e010      	b.n	aa98 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
    aa76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    aa78:	681b      	ldr	r3, [r3, #0]
    aa7a:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
    aa7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    aa7e:	1d1a      	adds	r2, r3, #4
    aa80:	663a      	str	r2, [r7, #96]	; 0x60
    aa82:	edd7 6a02 	vldr	s13, [r7, #8]
    aa86:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
    aa8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    aa8e:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
    aa92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa94:	3b01      	subs	r3, #1
    aa96:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
    aa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	d1eb      	bne.n	aa76 <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
    aa9e:	69bb      	ldr	r3, [r7, #24]
    aaa0:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
    aaa2:	e010      	b.n	aac6 <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
    aaa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    aaa6:	681b      	ldr	r3, [r3, #0]
    aaa8:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
    aaaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    aaac:	1d1a      	adds	r2, r3, #4
    aaae:	65fa      	str	r2, [r7, #92]	; 0x5c
    aab0:	edd7 6a02 	vldr	s13, [r7, #8]
    aab4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
    aab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    aabc:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
    aac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aac2:	3b01      	subs	r3, #1
    aac4:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
    aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aac8:	2b00      	cmp	r3, #0
    aaca:	d1eb      	bne.n	aaa4 <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
    aacc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    aace:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
    aad0:	6a3b      	ldr	r3, [r7, #32]
    aad2:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
    aad4:	2300      	movs	r3, #0
    aad6:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
    aad8:	69fb      	ldr	r3, [r7, #28]
    aada:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
    aadc:	e060      	b.n	aba0 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
    aade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aae2:	429a      	cmp	r2, r3
    aae4:	d10c      	bne.n	ab00 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
    aae6:	69ba      	ldr	r2, [r7, #24]
    aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aaea:	1ad3      	subs	r3, r2, r3
    aaec:	009b      	lsls	r3, r3, #2
    aaee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    aaf0:	4413      	add	r3, r2
    aaf2:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
    aaf4:	69bb      	ldr	r3, [r7, #24]
    aaf6:	009b      	lsls	r3, r3, #2
    aaf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    aafa:	4413      	add	r3, r2
    aafc:	65fb      	str	r3, [r7, #92]	; 0x5c
    aafe:	e044      	b.n	ab8a <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
    ab00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    ab02:	681b      	ldr	r3, [r3, #0]
    ab04:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
    ab06:	693b      	ldr	r3, [r7, #16]
    ab08:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
    ab0a:	68fb      	ldr	r3, [r7, #12]
    ab0c:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
    ab0e:	69ba      	ldr	r2, [r7, #24]
    ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ab12:	1ad3      	subs	r3, r2, r3
    ab14:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
    ab16:	e017      	b.n	ab48 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
    ab18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    ab1a:	681b      	ldr	r3, [r3, #0]
    ab1c:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
    ab1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ab20:	1d1a      	adds	r2, r3, #4
    ab22:	653a      	str	r2, [r7, #80]	; 0x50
    ab24:	ed93 7a00 	vldr	s14, [r3]
    ab28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
    ab2c:	ee67 7a27 	vmul.f32	s15, s14, s15
    ab30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    ab32:	1d1a      	adds	r2, r3, #4
    ab34:	663a      	str	r2, [r7, #96]	; 0x60
    ab36:	ed97 7a02 	vldr	s14, [r7, #8]
    ab3a:	ee77 7a67 	vsub.f32	s15, s14, s15
    ab3e:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
    ab42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab44:	3b01      	subs	r3, #1
    ab46:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
    ab48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab4a:	2b00      	cmp	r3, #0
    ab4c:	d1e4      	bne.n	ab18 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
    ab4e:	69bb      	ldr	r3, [r7, #24]
    ab50:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
    ab52:	e017      	b.n	ab84 <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
    ab54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ab56:	681b      	ldr	r3, [r3, #0]
    ab58:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
    ab5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ab5c:	1d1a      	adds	r2, r3, #4
    ab5e:	64fa      	str	r2, [r7, #76]	; 0x4c
    ab60:	ed93 7a00 	vldr	s14, [r3]
    ab64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
    ab68:	ee67 7a27 	vmul.f32	s15, s14, s15
    ab6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ab6e:	1d1a      	adds	r2, r3, #4
    ab70:	65fa      	str	r2, [r7, #92]	; 0x5c
    ab72:	ed97 7a02 	vldr	s14, [r7, #8]
    ab76:	ee77 7a67 	vsub.f32	s15, s14, s15
    ab7a:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
    ab7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab80:	3b01      	subs	r3, #1
    ab82:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
    ab84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab86:	2b00      	cmp	r3, #0
    ab88:	d1e4      	bne.n	ab54 <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
    ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ab8c:	009b      	lsls	r3, r3, #2
    ab8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    ab90:	4413      	add	r3, r2
    ab92:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
    ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab96:	3b01      	subs	r3, #1
    ab98:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
    ab9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ab9c:	3301      	adds	r3, #1
    ab9e:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
    aba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aba2:	2b00      	cmp	r3, #0
    aba4:	d19b      	bne.n	aade <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
    aba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    aba8:	3304      	adds	r3, #4
    abaa:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
    abac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    abae:	3b01      	subs	r3, #1
    abb0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
    abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    abb4:	3301      	adds	r3, #1
    abb6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
    abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    abba:	2b00      	cmp	r3, #0
    abbc:	f47f ae51 	bne.w	a862 <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
    abc0:	2300      	movs	r3, #0
    abc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
    abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    abc8:	2b01      	cmp	r3, #1
    abca:	d02d      	beq.n	ac28 <arm_mat_inverse_f32+0x460>
    abcc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
    abd0:	eef5 7a40 	vcmp.f32	s15, #0.0
    abd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abd8:	d126      	bne.n	ac28 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
    abda:	687b      	ldr	r3, [r7, #4]
    abdc:	685b      	ldr	r3, [r3, #4]
    abde:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
    abe0:	2300      	movs	r3, #0
    abe2:	643b      	str	r3, [r7, #64]	; 0x40
    abe4:	e00d      	b.n	ac02 <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
    abe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    abe8:	009b      	lsls	r3, r3, #2
    abea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    abec:	4413      	add	r3, r2
    abee:	edd3 7a00 	vldr	s15, [r3]
    abf2:	eef5 7a40 	vcmp.f32	s15, #0.0
    abf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abfa:	d10a      	bne.n	ac12 <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
    abfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    abfe:	3301      	adds	r3, #1
    ac00:	643b      	str	r3, [r7, #64]	; 0x40
    ac02:	69fb      	ldr	r3, [r7, #28]
    ac04:	69ba      	ldr	r2, [r7, #24]
    ac06:	fb02 f303 	mul.w	r3, r2, r3
    ac0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ac0c:	429a      	cmp	r2, r3
    ac0e:	d3ea      	bcc.n	abe6 <arm_mat_inverse_f32+0x41e>
    ac10:	e000      	b.n	ac14 <arm_mat_inverse_f32+0x44c>
            break;
    ac12:	bf00      	nop
      }

      if (i == numRows * numCols)
    ac14:	69fb      	ldr	r3, [r7, #28]
    ac16:	69ba      	ldr	r2, [r7, #24]
    ac18:	fb02 f303 	mul.w	r3, r2, r3
    ac1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ac1e:	429a      	cmp	r2, r3
    ac20:	d102      	bne.n	ac28 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
    ac22:	23fb      	movs	r3, #251	; 0xfb
    ac24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
    ac28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
    ac2c:	4618      	mov	r0, r3
    ac2e:	376c      	adds	r7, #108	; 0x6c
    ac30:	46bd      	mov	sp, r7
    ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac36:	4770      	bx	lr

0000ac38 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
    ac38:	b480      	push	{r7}
    ac3a:	b095      	sub	sp, #84	; 0x54
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	60f8      	str	r0, [r7, #12]
    ac40:	60b9      	str	r1, [r7, #8]
    ac42:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
    ac44:	68fb      	ldr	r3, [r7, #12]
    ac46:	685b      	ldr	r3, [r3, #4]
    ac48:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
    ac4a:	68bb      	ldr	r3, [r7, #8]
    ac4c:	685b      	ldr	r3, [r3, #4]
    ac4e:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
    ac50:	68fb      	ldr	r3, [r7, #12]
    ac52:	685b      	ldr	r3, [r3, #4]
    ac54:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
    ac56:	687b      	ldr	r3, [r7, #4]
    ac58:	685b      	ldr	r3, [r3, #4]
    ac5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
    ac5c:	68fb      	ldr	r3, [r7, #12]
    ac5e:	881b      	ldrh	r3, [r3, #0]
    ac60:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
    ac62:	68bb      	ldr	r3, [r7, #8]
    ac64:	885b      	ldrh	r3, [r3, #2]
    ac66:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
    ac68:	68fb      	ldr	r3, [r7, #12]
    ac6a:	885b      	ldrh	r3, [r3, #2]
    ac6c:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
    ac6e:	2300      	movs	r3, #0
    ac70:	873b      	strh	r3, [r7, #56]	; 0x38
    ac72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    ac74:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
    ac76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    ac78:	009b      	lsls	r3, r3, #2
    ac7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ac7c:	4413      	add	r3, r2
    ac7e:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
    ac80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    ac82:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
    ac84:	68bb      	ldr	r3, [r7, #8]
    ac86:	685b      	ldr	r3, [r3, #4]
    ac88:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
    ac8a:	2300      	movs	r3, #0
    ac8c:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
    ac8e:	f04f 0300 	mov.w	r3, #0
    ac92:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
    ac94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ac96:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
    ac98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ac9a:	089b      	lsrs	r3, r3, #2
    ac9c:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
    ac9e:	e061      	b.n	ad64 <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
    aca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aca2:	681b      	ldr	r3, [r3, #0]
    aca4:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
    aca6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    aca8:	009b      	lsls	r3, r3, #2
    acaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
    acac:	4413      	add	r3, r2
    acae:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
    acb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    acb2:	681b      	ldr	r3, [r3, #0]
    acb4:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
    acb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    acb8:	685b      	ldr	r3, [r3, #4]
    acba:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
    acbc:	ed97 7a07 	vldr	s14, [r7, #28]
    acc0:	edd7 7a08 	vldr	s15, [r7, #32]
    acc4:	ee67 7a27 	vmul.f32	s15, s14, s15
    acc8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
    accc:	ee77 7a27 	vadd.f32	s15, s14, s15
    acd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
    acd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    acd6:	681b      	ldr	r3, [r3, #0]
    acd8:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
    acda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    acdc:	009b      	lsls	r3, r3, #2
    acde:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ace0:	4413      	add	r3, r2
    ace2:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
    ace4:	ed97 7a06 	vldr	s14, [r7, #24]
    ace8:	edd7 7a05 	vldr	s15, [r7, #20]
    acec:	ee67 7a27 	vmul.f32	s15, s14, s15
    acf0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
    acf4:	ee77 7a27 	vadd.f32	s15, s14, s15
    acf8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
    acfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    acfe:	681b      	ldr	r3, [r3, #0]
    ad00:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
    ad02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    ad04:	009b      	lsls	r3, r3, #2
    ad06:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ad08:	4413      	add	r3, r2
    ad0a:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
    ad0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad0e:	689b      	ldr	r3, [r3, #8]
    ad10:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
    ad12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad14:	68db      	ldr	r3, [r3, #12]
    ad16:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
    ad18:	ed97 7a07 	vldr	s14, [r7, #28]
    ad1c:	edd7 7a08 	vldr	s15, [r7, #32]
    ad20:	ee67 7a27 	vmul.f32	s15, s14, s15
    ad24:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
    ad28:	ee77 7a27 	vadd.f32	s15, s14, s15
    ad2c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
    ad30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ad32:	681b      	ldr	r3, [r3, #0]
    ad34:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
    ad36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    ad38:	009b      	lsls	r3, r3, #2
    ad3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ad3c:	4413      	add	r3, r2
    ad3e:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
    ad40:	ed97 7a06 	vldr	s14, [r7, #24]
    ad44:	edd7 7a05 	vldr	s15, [r7, #20]
    ad48:	ee67 7a27 	vmul.f32	s15, s14, s15
    ad4c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
    ad50:	ee77 7a27 	vadd.f32	s15, s14, s15
    ad54:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
    ad58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad5a:	3310      	adds	r3, #16
    ad5c:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
    ad5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    ad60:	3b01      	subs	r3, #1
    ad62:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
    ad64:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    ad66:	2b00      	cmp	r3, #0
    ad68:	d19a      	bne.n	aca0 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
    ad6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ad6c:	f003 0303 	and.w	r3, r3, #3
    ad70:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
    ad72:	e017      	b.n	ada4 <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
    ad74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad76:	1d1a      	adds	r2, r3, #4
    ad78:	64fa      	str	r2, [r7, #76]	; 0x4c
    ad7a:	ed93 7a00 	vldr	s14, [r3]
    ad7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ad80:	edd3 7a00 	vldr	s15, [r3]
    ad84:	ee67 7a27 	vmul.f32	s15, s14, s15
    ad88:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
    ad8c:	ee77 7a27 	vadd.f32	s15, s14, s15
    ad90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
    ad94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    ad96:	009b      	lsls	r3, r3, #2
    ad98:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ad9a:	4413      	add	r3, r2
    ad9c:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
    ad9e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    ada0:	3b01      	subs	r3, #1
    ada2:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
    ada4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    ada6:	2b00      	cmp	r3, #0
    ada8:	d1e4      	bne.n	ad74 <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
    adaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    adac:	1d1a      	adds	r2, r3, #4
    adae:	643a      	str	r2, [r7, #64]	; 0x40
    adb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    adb2:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
    adb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    adb6:	3301      	adds	r3, #1
    adb8:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
    adba:	68bb      	ldr	r3, [r7, #8]
    adbc:	685a      	ldr	r2, [r3, #4]
    adbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    adc0:	009b      	lsls	r3, r3, #2
    adc2:	4413      	add	r3, r2
    adc4:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
    adc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    adc8:	3b01      	subs	r3, #1
    adca:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
    adcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    adce:	2b00      	cmp	r3, #0
    add0:	f47f af5d 	bne.w	ac8e <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
    add4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
    add6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    add8:	4413      	add	r3, r2
    adda:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
    addc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    adde:	009b      	lsls	r3, r3, #2
    ade0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ade2:	4413      	add	r3, r2
    ade4:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
    ade6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    ade8:	3b01      	subs	r3, #1
    adea:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
    adec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    adee:	2b00      	cmp	r3, #0
    adf0:	f47f af41 	bne.w	ac76 <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
    adf4:	2300      	movs	r3, #0
    adf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
    adfa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
    adfe:	4618      	mov	r0, r3
    ae00:	3754      	adds	r7, #84	; 0x54
    ae02:	46bd      	mov	sp, r7
    ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae08:	4770      	bx	lr

0000ae0a <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
    ae0a:	b480      	push	{r7}
    ae0c:	b091      	sub	sp, #68	; 0x44
    ae0e:	af00      	add	r7, sp, #0
    ae10:	60f8      	str	r0, [r7, #12]
    ae12:	60b9      	str	r1, [r7, #8]
    ae14:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
    ae16:	68fb      	ldr	r3, [r7, #12]
    ae18:	685b      	ldr	r3, [r3, #4]
    ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
    ae1c:	68bb      	ldr	r3, [r7, #8]
    ae1e:	685b      	ldr	r3, [r3, #4]
    ae20:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
    ae22:	687b      	ldr	r3, [r7, #4]
    ae24:	685b      	ldr	r3, [r3, #4]
    ae26:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
    ae28:	68fb      	ldr	r3, [r7, #12]
    ae2a:	881b      	ldrh	r3, [r3, #0]
    ae2c:	461a      	mov	r2, r3
    ae2e:	68fb      	ldr	r3, [r7, #12]
    ae30:	885b      	ldrh	r3, [r3, #2]
    ae32:	fb03 f302 	mul.w	r3, r3, r2
    ae36:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
    ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae3a:	089b      	lsrs	r3, r3, #2
    ae3c:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
    ae3e:	e052      	b.n	aee6 <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
    ae40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae42:	681b      	ldr	r3, [r3, #0]
    ae44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
    ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae48:	681b      	ldr	r3, [r3, #0]
    ae4a:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
    ae4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae4e:	685b      	ldr	r3, [r3, #4]
    ae50:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
    ae52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    ae56:	edd7 7a08 	vldr	s15, [r7, #32]
    ae5a:	ee77 7a67 	vsub.f32	s15, s14, s15
    ae5e:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
    ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae64:	685b      	ldr	r3, [r3, #4]
    ae66:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
    ae68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae6a:	689b      	ldr	r3, [r3, #8]
    ae6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
    ae6e:	ed97 7a07 	vldr	s14, [r7, #28]
    ae72:	edd7 7a05 	vldr	s15, [r7, #20]
    ae76:	ee77 7a67 	vsub.f32	s15, s14, s15
    ae7a:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
    ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae80:	689b      	ldr	r3, [r3, #8]
    ae82:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
    ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ae86:	69ba      	ldr	r2, [r7, #24]
    ae88:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
    ae8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ae8c:	3304      	adds	r3, #4
    ae8e:	693a      	ldr	r2, [r7, #16]
    ae90:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
    ae92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae94:	68db      	ldr	r3, [r3, #12]
    ae96:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
    ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae9a:	68db      	ldr	r3, [r3, #12]
    ae9c:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
    ae9e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    aea2:	edd7 7a08 	vldr	s15, [r7, #32]
    aea6:	ee77 7a67 	vsub.f32	s15, s14, s15
    aeaa:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
    aeae:	ed97 7a07 	vldr	s14, [r7, #28]
    aeb2:	edd7 7a05 	vldr	s15, [r7, #20]
    aeb6:	ee77 7a67 	vsub.f32	s15, s14, s15
    aeba:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
    aebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aec0:	3308      	adds	r3, #8
    aec2:	69ba      	ldr	r2, [r7, #24]
    aec4:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
    aec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aec8:	330c      	adds	r3, #12
    aeca:	693a      	ldr	r2, [r7, #16]
    aecc:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
    aece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aed0:	3310      	adds	r3, #16
    aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
    aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aed6:	3310      	adds	r3, #16
    aed8:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
    aeda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aedc:	3310      	adds	r3, #16
    aede:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
    aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aee2:	3b01      	subs	r3, #1
    aee4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
    aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aee8:	2b00      	cmp	r3, #0
    aeea:	d1a9      	bne.n	ae40 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
    aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aeee:	f003 0303 	and.w	r3, r3, #3
    aef2:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
    aef4:	e013      	b.n	af1e <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
    aef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aef8:	1d1a      	adds	r2, r3, #4
    aefa:	63fa      	str	r2, [r7, #60]	; 0x3c
    aefc:	ed93 7a00 	vldr	s14, [r3]
    af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    af02:	1d1a      	adds	r2, r3, #4
    af04:	63ba      	str	r2, [r7, #56]	; 0x38
    af06:	edd3 7a00 	vldr	s15, [r3]
    af0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    af0c:	1d1a      	adds	r2, r3, #4
    af0e:	637a      	str	r2, [r7, #52]	; 0x34
    af10:	ee77 7a67 	vsub.f32	s15, s14, s15
    af14:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
    af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af1a:	3b01      	subs	r3, #1
    af1c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
    af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af20:	2b00      	cmp	r3, #0
    af22:	d1e8      	bne.n	aef6 <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
    af24:	2300      	movs	r3, #0
    af26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
    af2a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
    af2e:	4618      	mov	r0, r3
    af30:	3744      	adds	r7, #68	; 0x44
    af32:	46bd      	mov	sp, r7
    af34:	f85d 7b04 	ldr.w	r7, [sp], #4
    af38:	4770      	bx	lr

0000af3a <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
    af3a:	b480      	push	{r7}
    af3c:	b08b      	sub	sp, #44	; 0x2c
    af3e:	af00      	add	r7, sp, #0
    af40:	6078      	str	r0, [r7, #4]
    af42:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
    af44:	687b      	ldr	r3, [r7, #4]
    af46:	685b      	ldr	r3, [r3, #4]
    af48:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
    af4a:	683b      	ldr	r3, [r7, #0]
    af4c:	685b      	ldr	r3, [r3, #4]
    af4e:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
    af50:	687b      	ldr	r3, [r7, #4]
    af52:	881b      	ldrh	r3, [r3, #0]
    af54:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
    af56:	687b      	ldr	r3, [r7, #4]
    af58:	885b      	ldrh	r3, [r3, #2]
    af5a:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
    af5c:	2300      	movs	r3, #0
    af5e:	83bb      	strh	r3, [r7, #28]
    af60:	8a7b      	ldrh	r3, [r7, #18]
    af62:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
    af64:	8a3b      	ldrh	r3, [r7, #16]
    af66:	089b      	lsrs	r3, r3, #2
    af68:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
    af6a:	8bbb      	ldrh	r3, [r7, #28]
    af6c:	009b      	lsls	r3, r3, #2
    af6e:	697a      	ldr	r2, [r7, #20]
    af70:	4413      	add	r3, r2
    af72:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
    af74:	e02e      	b.n	afd4 <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
    af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af78:	1d1a      	adds	r2, r3, #4
    af7a:	627a      	str	r2, [r7, #36]	; 0x24
    af7c:	681a      	ldr	r2, [r3, #0]
    af7e:	6a3b      	ldr	r3, [r7, #32]
    af80:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
    af82:	8a7b      	ldrh	r3, [r7, #18]
    af84:	009b      	lsls	r3, r3, #2
    af86:	6a3a      	ldr	r2, [r7, #32]
    af88:	4413      	add	r3, r2
    af8a:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
    af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af8e:	1d1a      	adds	r2, r3, #4
    af90:	627a      	str	r2, [r7, #36]	; 0x24
    af92:	681a      	ldr	r2, [r3, #0]
    af94:	6a3b      	ldr	r3, [r7, #32]
    af96:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
    af98:	8a7b      	ldrh	r3, [r7, #18]
    af9a:	009b      	lsls	r3, r3, #2
    af9c:	6a3a      	ldr	r2, [r7, #32]
    af9e:	4413      	add	r3, r2
    afa0:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
    afa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afa4:	1d1a      	adds	r2, r3, #4
    afa6:	627a      	str	r2, [r7, #36]	; 0x24
    afa8:	681a      	ldr	r2, [r3, #0]
    afaa:	6a3b      	ldr	r3, [r7, #32]
    afac:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
    afae:	8a7b      	ldrh	r3, [r7, #18]
    afb0:	009b      	lsls	r3, r3, #2
    afb2:	6a3a      	ldr	r2, [r7, #32]
    afb4:	4413      	add	r3, r2
    afb6:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
    afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afba:	1d1a      	adds	r2, r3, #4
    afbc:	627a      	str	r2, [r7, #36]	; 0x24
    afbe:	681a      	ldr	r2, [r3, #0]
    afc0:	6a3b      	ldr	r3, [r7, #32]
    afc2:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
    afc4:	8a7b      	ldrh	r3, [r7, #18]
    afc6:	009b      	lsls	r3, r3, #2
    afc8:	6a3a      	ldr	r2, [r7, #32]
    afca:	4413      	add	r3, r2
    afcc:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
    afce:	8bfb      	ldrh	r3, [r7, #30]
    afd0:	3b01      	subs	r3, #1
    afd2:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
    afd4:	8bfb      	ldrh	r3, [r7, #30]
    afd6:	2b00      	cmp	r3, #0
    afd8:	d1cd      	bne.n	af76 <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
    afda:	8a3b      	ldrh	r3, [r7, #16]
    afdc:	f003 0303 	and.w	r3, r3, #3
    afe0:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
    afe2:	e00d      	b.n	b000 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
    afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afe6:	1d1a      	adds	r2, r3, #4
    afe8:	627a      	str	r2, [r7, #36]	; 0x24
    afea:	681a      	ldr	r2, [r3, #0]
    afec:	6a3b      	ldr	r3, [r7, #32]
    afee:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
    aff0:	8a7b      	ldrh	r3, [r7, #18]
    aff2:	009b      	lsls	r3, r3, #2
    aff4:	6a3a      	ldr	r2, [r7, #32]
    aff6:	4413      	add	r3, r2
    aff8:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
    affa:	8bfb      	ldrh	r3, [r7, #30]
    affc:	3b01      	subs	r3, #1
    affe:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
    b000:	8bfb      	ldrh	r3, [r7, #30]
    b002:	2b00      	cmp	r3, #0
    b004:	d1ee      	bne.n	afe4 <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
    b006:	8bbb      	ldrh	r3, [r7, #28]
    b008:	3301      	adds	r3, #1
    b00a:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
    b00c:	8b7b      	ldrh	r3, [r7, #26]
    b00e:	3b01      	subs	r3, #1
    b010:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
    b012:	8b7b      	ldrh	r3, [r7, #26]
    b014:	2b00      	cmp	r3, #0
    b016:	d1a5      	bne.n	af64 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
    b018:	2300      	movs	r3, #0
    b01a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
    b01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
    b020:	4618      	mov	r0, r3
    b022:	372c      	adds	r7, #44	; 0x2c
    b024:	46bd      	mov	sp, r7
    b026:	f85d 7b04 	ldr.w	r7, [sp], #4
    b02a:	4770      	bx	lr

0000b02c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
    b02c:	b580      	push	{r7, lr}
    b02e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    b030:	2003      	movs	r0, #3
    b032:	f000 fe9a 	bl	bd6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
    b036:	2000      	movs	r0, #0
    b038:	f7fe f9ea 	bl	9410 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
    b03c:	f7fe f9c0 	bl	93c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
    b040:	2300      	movs	r3, #0
}
    b042:	4618      	mov	r0, r3
    b044:	bd80      	pop	{r7, pc}
	...

0000b048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
    b048:	b480      	push	{r7}
    b04a:	af00      	add	r7, sp, #0
  return uwTick;
    b04c:	4b03      	ldr	r3, [pc, #12]	; (b05c <HAL_GetTick+0x14>)
    b04e:	681b      	ldr	r3, [r3, #0]
}
    b050:	4618      	mov	r0, r3
    b052:	46bd      	mov	sp, r7
    b054:	f85d 7b04 	ldr.w	r7, [sp], #4
    b058:	4770      	bx	lr
    b05a:	bf00      	nop
    b05c:	0003404c 	.word	0x0003404c

0000b060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
    b060:	b580      	push	{r7, lr}
    b062:	b084      	sub	sp, #16
    b064:	af00      	add	r7, sp, #0
    b066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
    b068:	f7ff ffee 	bl	b048 <HAL_GetTick>
    b06c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
    b06e:	687b      	ldr	r3, [r7, #4]
    b070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
    b072:	68fb      	ldr	r3, [r7, #12]
    b074:	f1b3 3fff 	cmp.w	r3, #4294967295
    b078:	d005      	beq.n	b086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
    b07a:	4b09      	ldr	r3, [pc, #36]	; (b0a0 <HAL_Delay+0x40>)
    b07c:	781b      	ldrb	r3, [r3, #0]
    b07e:	461a      	mov	r2, r3
    b080:	68fb      	ldr	r3, [r7, #12]
    b082:	4413      	add	r3, r2
    b084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
    b086:	bf00      	nop
    b088:	f7ff ffde 	bl	b048 <HAL_GetTick>
    b08c:	4602      	mov	r2, r0
    b08e:	68bb      	ldr	r3, [r7, #8]
    b090:	1ad3      	subs	r3, r2, r3
    b092:	68fa      	ldr	r2, [r7, #12]
    b094:	429a      	cmp	r2, r3
    b096:	d8f7      	bhi.n	b088 <HAL_Delay+0x28>
  {
  }
}
    b098:	bf00      	nop
    b09a:	3710      	adds	r7, #16
    b09c:	46bd      	mov	sp, r7
    b09e:	bd80      	pop	{r7, pc}
    b0a0:	00029ad8 	.word	0x00029ad8

0000b0a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
    b0a4:	b580      	push	{r7, lr}
    b0a6:	b084      	sub	sp, #16
    b0a8:	af00      	add	r7, sp, #0
    b0aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
    b0ac:	2300      	movs	r3, #0
    b0ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
    b0b0:	687b      	ldr	r3, [r7, #4]
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d101      	bne.n	b0ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
    b0b6:	2301      	movs	r3, #1
    b0b8:	e031      	b.n	b11e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d109      	bne.n	b0d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
    b0c2:	6878      	ldr	r0, [r7, #4]
    b0c4:	f7fd f8c4 	bl	8250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    b0c8:	687b      	ldr	r3, [r7, #4]
    b0ca:	2200      	movs	r2, #0
    b0cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
    b0ce:	687b      	ldr	r3, [r7, #4]
    b0d0:	2200      	movs	r2, #0
    b0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
    b0d6:	687b      	ldr	r3, [r7, #4]
    b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b0da:	f003 0310 	and.w	r3, r3, #16
    b0de:	2b00      	cmp	r3, #0
    b0e0:	d116      	bne.n	b110 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b0e6:	4b10      	ldr	r3, [pc, #64]	; (b128 <HAL_ADC_Init+0x84>)
    b0e8:	4013      	ands	r3, r2
    b0ea:	f043 0202 	orr.w	r2, r3, #2
    b0ee:	687b      	ldr	r3, [r7, #4]
    b0f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    b0f2:	6878      	ldr	r0, [r7, #4]
    b0f4:	f000 f964 	bl	b3c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    b0f8:	687b      	ldr	r3, [r7, #4]
    b0fa:	2200      	movs	r2, #0
    b0fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
    b0fe:	687b      	ldr	r3, [r7, #4]
    b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b102:	f023 0303 	bic.w	r3, r3, #3
    b106:	f043 0201 	orr.w	r2, r3, #1
    b10a:	687b      	ldr	r3, [r7, #4]
    b10c:	641a      	str	r2, [r3, #64]	; 0x40
    b10e:	e001      	b.n	b114 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
    b110:	2301      	movs	r3, #1
    b112:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
    b114:	687b      	ldr	r3, [r7, #4]
    b116:	2200      	movs	r2, #0
    b118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
    b11c:	7bfb      	ldrb	r3, [r7, #15]
}
    b11e:	4618      	mov	r0, r3
    b120:	3710      	adds	r7, #16
    b122:	46bd      	mov	sp, r7
    b124:	bd80      	pop	{r7, pc}
    b126:	bf00      	nop
    b128:	ffffeefd 	.word	0xffffeefd

0000b12c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
    b12c:	b480      	push	{r7}
    b12e:	b085      	sub	sp, #20
    b130:	af00      	add	r7, sp, #0
    b132:	6078      	str	r0, [r7, #4]
    b134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
    b136:	2300      	movs	r3, #0
    b138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
    b13a:	687b      	ldr	r3, [r7, #4]
    b13c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    b140:	2b01      	cmp	r3, #1
    b142:	d101      	bne.n	b148 <HAL_ADC_ConfigChannel+0x1c>
    b144:	2302      	movs	r3, #2
    b146:	e12a      	b.n	b39e <HAL_ADC_ConfigChannel+0x272>
    b148:	687b      	ldr	r3, [r7, #4]
    b14a:	2201      	movs	r2, #1
    b14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
    b150:	683b      	ldr	r3, [r7, #0]
    b152:	681b      	ldr	r3, [r3, #0]
    b154:	2b09      	cmp	r3, #9
    b156:	d93a      	bls.n	b1ce <HAL_ADC_ConfigChannel+0xa2>
    b158:	683b      	ldr	r3, [r7, #0]
    b15a:	681b      	ldr	r3, [r3, #0]
    b15c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b160:	d035      	beq.n	b1ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
    b162:	687b      	ldr	r3, [r7, #4]
    b164:	681b      	ldr	r3, [r3, #0]
    b166:	68d9      	ldr	r1, [r3, #12]
    b168:	683b      	ldr	r3, [r7, #0]
    b16a:	681b      	ldr	r3, [r3, #0]
    b16c:	b29b      	uxth	r3, r3
    b16e:	461a      	mov	r2, r3
    b170:	4613      	mov	r3, r2
    b172:	005b      	lsls	r3, r3, #1
    b174:	4413      	add	r3, r2
    b176:	3b1e      	subs	r3, #30
    b178:	2207      	movs	r2, #7
    b17a:	fa02 f303 	lsl.w	r3, r2, r3
    b17e:	43da      	mvns	r2, r3
    b180:	687b      	ldr	r3, [r7, #4]
    b182:	681b      	ldr	r3, [r3, #0]
    b184:	400a      	ands	r2, r1
    b186:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    b188:	683b      	ldr	r3, [r7, #0]
    b18a:	681b      	ldr	r3, [r3, #0]
    b18c:	4a87      	ldr	r2, [pc, #540]	; (b3ac <HAL_ADC_ConfigChannel+0x280>)
    b18e:	4293      	cmp	r3, r2
    b190:	d10a      	bne.n	b1a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
    b192:	687b      	ldr	r3, [r7, #4]
    b194:	681b      	ldr	r3, [r3, #0]
    b196:	68d9      	ldr	r1, [r3, #12]
    b198:	683b      	ldr	r3, [r7, #0]
    b19a:	689b      	ldr	r3, [r3, #8]
    b19c:	061a      	lsls	r2, r3, #24
    b19e:	687b      	ldr	r3, [r7, #4]
    b1a0:	681b      	ldr	r3, [r3, #0]
    b1a2:	430a      	orrs	r2, r1
    b1a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    b1a6:	e035      	b.n	b214 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
    b1a8:	687b      	ldr	r3, [r7, #4]
    b1aa:	681b      	ldr	r3, [r3, #0]
    b1ac:	68d9      	ldr	r1, [r3, #12]
    b1ae:	683b      	ldr	r3, [r7, #0]
    b1b0:	689a      	ldr	r2, [r3, #8]
    b1b2:	683b      	ldr	r3, [r7, #0]
    b1b4:	681b      	ldr	r3, [r3, #0]
    b1b6:	b29b      	uxth	r3, r3
    b1b8:	4618      	mov	r0, r3
    b1ba:	4603      	mov	r3, r0
    b1bc:	005b      	lsls	r3, r3, #1
    b1be:	4403      	add	r3, r0
    b1c0:	3b1e      	subs	r3, #30
    b1c2:	409a      	lsls	r2, r3
    b1c4:	687b      	ldr	r3, [r7, #4]
    b1c6:	681b      	ldr	r3, [r3, #0]
    b1c8:	430a      	orrs	r2, r1
    b1ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    b1cc:	e022      	b.n	b214 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
    b1ce:	687b      	ldr	r3, [r7, #4]
    b1d0:	681b      	ldr	r3, [r3, #0]
    b1d2:	6919      	ldr	r1, [r3, #16]
    b1d4:	683b      	ldr	r3, [r7, #0]
    b1d6:	681b      	ldr	r3, [r3, #0]
    b1d8:	b29b      	uxth	r3, r3
    b1da:	461a      	mov	r2, r3
    b1dc:	4613      	mov	r3, r2
    b1de:	005b      	lsls	r3, r3, #1
    b1e0:	4413      	add	r3, r2
    b1e2:	2207      	movs	r2, #7
    b1e4:	fa02 f303 	lsl.w	r3, r2, r3
    b1e8:	43da      	mvns	r2, r3
    b1ea:	687b      	ldr	r3, [r7, #4]
    b1ec:	681b      	ldr	r3, [r3, #0]
    b1ee:	400a      	ands	r2, r1
    b1f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
    b1f2:	687b      	ldr	r3, [r7, #4]
    b1f4:	681b      	ldr	r3, [r3, #0]
    b1f6:	6919      	ldr	r1, [r3, #16]
    b1f8:	683b      	ldr	r3, [r7, #0]
    b1fa:	689a      	ldr	r2, [r3, #8]
    b1fc:	683b      	ldr	r3, [r7, #0]
    b1fe:	681b      	ldr	r3, [r3, #0]
    b200:	b29b      	uxth	r3, r3
    b202:	4618      	mov	r0, r3
    b204:	4603      	mov	r3, r0
    b206:	005b      	lsls	r3, r3, #1
    b208:	4403      	add	r3, r0
    b20a:	409a      	lsls	r2, r3
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	681b      	ldr	r3, [r3, #0]
    b210:	430a      	orrs	r2, r1
    b212:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
    b214:	683b      	ldr	r3, [r7, #0]
    b216:	685b      	ldr	r3, [r3, #4]
    b218:	2b06      	cmp	r3, #6
    b21a:	d824      	bhi.n	b266 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
    b21c:	687b      	ldr	r3, [r7, #4]
    b21e:	681b      	ldr	r3, [r3, #0]
    b220:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b222:	683b      	ldr	r3, [r7, #0]
    b224:	685a      	ldr	r2, [r3, #4]
    b226:	4613      	mov	r3, r2
    b228:	009b      	lsls	r3, r3, #2
    b22a:	4413      	add	r3, r2
    b22c:	3b05      	subs	r3, #5
    b22e:	221f      	movs	r2, #31
    b230:	fa02 f303 	lsl.w	r3, r2, r3
    b234:	43da      	mvns	r2, r3
    b236:	687b      	ldr	r3, [r7, #4]
    b238:	681b      	ldr	r3, [r3, #0]
    b23a:	400a      	ands	r2, r1
    b23c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
    b23e:	687b      	ldr	r3, [r7, #4]
    b240:	681b      	ldr	r3, [r3, #0]
    b242:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b244:	683b      	ldr	r3, [r7, #0]
    b246:	681b      	ldr	r3, [r3, #0]
    b248:	b29b      	uxth	r3, r3
    b24a:	4618      	mov	r0, r3
    b24c:	683b      	ldr	r3, [r7, #0]
    b24e:	685a      	ldr	r2, [r3, #4]
    b250:	4613      	mov	r3, r2
    b252:	009b      	lsls	r3, r3, #2
    b254:	4413      	add	r3, r2
    b256:	3b05      	subs	r3, #5
    b258:	fa00 f203 	lsl.w	r2, r0, r3
    b25c:	687b      	ldr	r3, [r7, #4]
    b25e:	681b      	ldr	r3, [r3, #0]
    b260:	430a      	orrs	r2, r1
    b262:	635a      	str	r2, [r3, #52]	; 0x34
    b264:	e04c      	b.n	b300 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
    b266:	683b      	ldr	r3, [r7, #0]
    b268:	685b      	ldr	r3, [r3, #4]
    b26a:	2b0c      	cmp	r3, #12
    b26c:	d824      	bhi.n	b2b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
    b26e:	687b      	ldr	r3, [r7, #4]
    b270:	681b      	ldr	r3, [r3, #0]
    b272:	6b19      	ldr	r1, [r3, #48]	; 0x30
    b274:	683b      	ldr	r3, [r7, #0]
    b276:	685a      	ldr	r2, [r3, #4]
    b278:	4613      	mov	r3, r2
    b27a:	009b      	lsls	r3, r3, #2
    b27c:	4413      	add	r3, r2
    b27e:	3b23      	subs	r3, #35	; 0x23
    b280:	221f      	movs	r2, #31
    b282:	fa02 f303 	lsl.w	r3, r2, r3
    b286:	43da      	mvns	r2, r3
    b288:	687b      	ldr	r3, [r7, #4]
    b28a:	681b      	ldr	r3, [r3, #0]
    b28c:	400a      	ands	r2, r1
    b28e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
    b290:	687b      	ldr	r3, [r7, #4]
    b292:	681b      	ldr	r3, [r3, #0]
    b294:	6b19      	ldr	r1, [r3, #48]	; 0x30
    b296:	683b      	ldr	r3, [r7, #0]
    b298:	681b      	ldr	r3, [r3, #0]
    b29a:	b29b      	uxth	r3, r3
    b29c:	4618      	mov	r0, r3
    b29e:	683b      	ldr	r3, [r7, #0]
    b2a0:	685a      	ldr	r2, [r3, #4]
    b2a2:	4613      	mov	r3, r2
    b2a4:	009b      	lsls	r3, r3, #2
    b2a6:	4413      	add	r3, r2
    b2a8:	3b23      	subs	r3, #35	; 0x23
    b2aa:	fa00 f203 	lsl.w	r2, r0, r3
    b2ae:	687b      	ldr	r3, [r7, #4]
    b2b0:	681b      	ldr	r3, [r3, #0]
    b2b2:	430a      	orrs	r2, r1
    b2b4:	631a      	str	r2, [r3, #48]	; 0x30
    b2b6:	e023      	b.n	b300 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
    b2b8:	687b      	ldr	r3, [r7, #4]
    b2ba:	681b      	ldr	r3, [r3, #0]
    b2bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b2be:	683b      	ldr	r3, [r7, #0]
    b2c0:	685a      	ldr	r2, [r3, #4]
    b2c2:	4613      	mov	r3, r2
    b2c4:	009b      	lsls	r3, r3, #2
    b2c6:	4413      	add	r3, r2
    b2c8:	3b41      	subs	r3, #65	; 0x41
    b2ca:	221f      	movs	r2, #31
    b2cc:	fa02 f303 	lsl.w	r3, r2, r3
    b2d0:	43da      	mvns	r2, r3
    b2d2:	687b      	ldr	r3, [r7, #4]
    b2d4:	681b      	ldr	r3, [r3, #0]
    b2d6:	400a      	ands	r2, r1
    b2d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
    b2da:	687b      	ldr	r3, [r7, #4]
    b2dc:	681b      	ldr	r3, [r3, #0]
    b2de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b2e0:	683b      	ldr	r3, [r7, #0]
    b2e2:	681b      	ldr	r3, [r3, #0]
    b2e4:	b29b      	uxth	r3, r3
    b2e6:	4618      	mov	r0, r3
    b2e8:	683b      	ldr	r3, [r7, #0]
    b2ea:	685a      	ldr	r2, [r3, #4]
    b2ec:	4613      	mov	r3, r2
    b2ee:	009b      	lsls	r3, r3, #2
    b2f0:	4413      	add	r3, r2
    b2f2:	3b41      	subs	r3, #65	; 0x41
    b2f4:	fa00 f203 	lsl.w	r2, r0, r3
    b2f8:	687b      	ldr	r3, [r7, #4]
    b2fa:	681b      	ldr	r3, [r3, #0]
    b2fc:	430a      	orrs	r2, r1
    b2fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
    b300:	687b      	ldr	r3, [r7, #4]
    b302:	681b      	ldr	r3, [r3, #0]
    b304:	4a2a      	ldr	r2, [pc, #168]	; (b3b0 <HAL_ADC_ConfigChannel+0x284>)
    b306:	4293      	cmp	r3, r2
    b308:	d10a      	bne.n	b320 <HAL_ADC_ConfigChannel+0x1f4>
    b30a:	683b      	ldr	r3, [r7, #0]
    b30c:	681b      	ldr	r3, [r3, #0]
    b30e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b312:	d105      	bne.n	b320 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
    b314:	4b27      	ldr	r3, [pc, #156]	; (b3b4 <HAL_ADC_ConfigChannel+0x288>)
    b316:	685b      	ldr	r3, [r3, #4]
    b318:	4a26      	ldr	r2, [pc, #152]	; (b3b4 <HAL_ADC_ConfigChannel+0x288>)
    b31a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    b31e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
    b320:	687b      	ldr	r3, [r7, #4]
    b322:	681b      	ldr	r3, [r3, #0]
    b324:	4a22      	ldr	r2, [pc, #136]	; (b3b0 <HAL_ADC_ConfigChannel+0x284>)
    b326:	4293      	cmp	r3, r2
    b328:	d109      	bne.n	b33e <HAL_ADC_ConfigChannel+0x212>
    b32a:	683b      	ldr	r3, [r7, #0]
    b32c:	681b      	ldr	r3, [r3, #0]
    b32e:	2b12      	cmp	r3, #18
    b330:	d105      	bne.n	b33e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
    b332:	4b20      	ldr	r3, [pc, #128]	; (b3b4 <HAL_ADC_ConfigChannel+0x288>)
    b334:	685b      	ldr	r3, [r3, #4]
    b336:	4a1f      	ldr	r2, [pc, #124]	; (b3b4 <HAL_ADC_ConfigChannel+0x288>)
    b338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    b33c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
    b33e:	687b      	ldr	r3, [r7, #4]
    b340:	681b      	ldr	r3, [r3, #0]
    b342:	4a1b      	ldr	r2, [pc, #108]	; (b3b0 <HAL_ADC_ConfigChannel+0x284>)
    b344:	4293      	cmp	r3, r2
    b346:	d125      	bne.n	b394 <HAL_ADC_ConfigChannel+0x268>
    b348:	683b      	ldr	r3, [r7, #0]
    b34a:	681b      	ldr	r3, [r3, #0]
    b34c:	4a17      	ldr	r2, [pc, #92]	; (b3ac <HAL_ADC_ConfigChannel+0x280>)
    b34e:	4293      	cmp	r3, r2
    b350:	d003      	beq.n	b35a <HAL_ADC_ConfigChannel+0x22e>
    b352:	683b      	ldr	r3, [r7, #0]
    b354:	681b      	ldr	r3, [r3, #0]
    b356:	2b11      	cmp	r3, #17
    b358:	d11c      	bne.n	b394 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
    b35a:	4b16      	ldr	r3, [pc, #88]	; (b3b4 <HAL_ADC_ConfigChannel+0x288>)
    b35c:	685b      	ldr	r3, [r3, #4]
    b35e:	4a15      	ldr	r2, [pc, #84]	; (b3b4 <HAL_ADC_ConfigChannel+0x288>)
    b360:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    b364:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    b366:	683b      	ldr	r3, [r7, #0]
    b368:	681b      	ldr	r3, [r3, #0]
    b36a:	4a10      	ldr	r2, [pc, #64]	; (b3ac <HAL_ADC_ConfigChannel+0x280>)
    b36c:	4293      	cmp	r3, r2
    b36e:	d111      	bne.n	b394 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
    b370:	4b11      	ldr	r3, [pc, #68]	; (b3b8 <HAL_ADC_ConfigChannel+0x28c>)
    b372:	681b      	ldr	r3, [r3, #0]
    b374:	4a11      	ldr	r2, [pc, #68]	; (b3bc <HAL_ADC_ConfigChannel+0x290>)
    b376:	fba2 2303 	umull	r2, r3, r2, r3
    b37a:	0c9a      	lsrs	r2, r3, #18
    b37c:	4613      	mov	r3, r2
    b37e:	009b      	lsls	r3, r3, #2
    b380:	4413      	add	r3, r2
    b382:	005b      	lsls	r3, r3, #1
    b384:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
    b386:	e002      	b.n	b38e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
    b388:	68fb      	ldr	r3, [r7, #12]
    b38a:	3b01      	subs	r3, #1
    b38c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
    b38e:	68fb      	ldr	r3, [r7, #12]
    b390:	2b00      	cmp	r3, #0
    b392:	d1f9      	bne.n	b388 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	2200      	movs	r2, #0
    b398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
    b39c:	2300      	movs	r3, #0
}
    b39e:	4618      	mov	r0, r3
    b3a0:	3714      	adds	r7, #20
    b3a2:	46bd      	mov	sp, r7
    b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3a8:	4770      	bx	lr
    b3aa:	bf00      	nop
    b3ac:	10000012 	.word	0x10000012
    b3b0:	40012000 	.word	0x40012000
    b3b4:	40012300 	.word	0x40012300
    b3b8:	00029ad0 	.word	0x00029ad0
    b3bc:	431bde83 	.word	0x431bde83

0000b3c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
    b3c0:	b480      	push	{r7}
    b3c2:	b083      	sub	sp, #12
    b3c4:	af00      	add	r7, sp, #0
    b3c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
    b3c8:	4b78      	ldr	r3, [pc, #480]	; (b5ac <ADC_Init+0x1ec>)
    b3ca:	685b      	ldr	r3, [r3, #4]
    b3cc:	4a77      	ldr	r2, [pc, #476]	; (b5ac <ADC_Init+0x1ec>)
    b3ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    b3d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
    b3d4:	4b75      	ldr	r3, [pc, #468]	; (b5ac <ADC_Init+0x1ec>)
    b3d6:	685a      	ldr	r2, [r3, #4]
    b3d8:	687b      	ldr	r3, [r7, #4]
    b3da:	685b      	ldr	r3, [r3, #4]
    b3dc:	4973      	ldr	r1, [pc, #460]	; (b5ac <ADC_Init+0x1ec>)
    b3de:	4313      	orrs	r3, r2
    b3e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
    b3e2:	687b      	ldr	r3, [r7, #4]
    b3e4:	681b      	ldr	r3, [r3, #0]
    b3e6:	685a      	ldr	r2, [r3, #4]
    b3e8:	687b      	ldr	r3, [r7, #4]
    b3ea:	681b      	ldr	r3, [r3, #0]
    b3ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    b3f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	681b      	ldr	r3, [r3, #0]
    b3f6:	6859      	ldr	r1, [r3, #4]
    b3f8:	687b      	ldr	r3, [r7, #4]
    b3fa:	691b      	ldr	r3, [r3, #16]
    b3fc:	021a      	lsls	r2, r3, #8
    b3fe:	687b      	ldr	r3, [r7, #4]
    b400:	681b      	ldr	r3, [r3, #0]
    b402:	430a      	orrs	r2, r1
    b404:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
    b406:	687b      	ldr	r3, [r7, #4]
    b408:	681b      	ldr	r3, [r3, #0]
    b40a:	685a      	ldr	r2, [r3, #4]
    b40c:	687b      	ldr	r3, [r7, #4]
    b40e:	681b      	ldr	r3, [r3, #0]
    b410:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    b414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
    b416:	687b      	ldr	r3, [r7, #4]
    b418:	681b      	ldr	r3, [r3, #0]
    b41a:	6859      	ldr	r1, [r3, #4]
    b41c:	687b      	ldr	r3, [r7, #4]
    b41e:	689a      	ldr	r2, [r3, #8]
    b420:	687b      	ldr	r3, [r7, #4]
    b422:	681b      	ldr	r3, [r3, #0]
    b424:	430a      	orrs	r2, r1
    b426:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
    b428:	687b      	ldr	r3, [r7, #4]
    b42a:	681b      	ldr	r3, [r3, #0]
    b42c:	689a      	ldr	r2, [r3, #8]
    b42e:	687b      	ldr	r3, [r7, #4]
    b430:	681b      	ldr	r3, [r3, #0]
    b432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    b436:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
    b438:	687b      	ldr	r3, [r7, #4]
    b43a:	681b      	ldr	r3, [r3, #0]
    b43c:	6899      	ldr	r1, [r3, #8]
    b43e:	687b      	ldr	r3, [r7, #4]
    b440:	68da      	ldr	r2, [r3, #12]
    b442:	687b      	ldr	r3, [r7, #4]
    b444:	681b      	ldr	r3, [r3, #0]
    b446:	430a      	orrs	r2, r1
    b448:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
    b44a:	687b      	ldr	r3, [r7, #4]
    b44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b44e:	4a58      	ldr	r2, [pc, #352]	; (b5b0 <ADC_Init+0x1f0>)
    b450:	4293      	cmp	r3, r2
    b452:	d022      	beq.n	b49a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    b454:	687b      	ldr	r3, [r7, #4]
    b456:	681b      	ldr	r3, [r3, #0]
    b458:	689a      	ldr	r2, [r3, #8]
    b45a:	687b      	ldr	r3, [r7, #4]
    b45c:	681b      	ldr	r3, [r3, #0]
    b45e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    b462:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    b464:	687b      	ldr	r3, [r7, #4]
    b466:	681b      	ldr	r3, [r3, #0]
    b468:	6899      	ldr	r1, [r3, #8]
    b46a:	687b      	ldr	r3, [r7, #4]
    b46c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b46e:	687b      	ldr	r3, [r7, #4]
    b470:	681b      	ldr	r3, [r3, #0]
    b472:	430a      	orrs	r2, r1
    b474:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    b476:	687b      	ldr	r3, [r7, #4]
    b478:	681b      	ldr	r3, [r3, #0]
    b47a:	689a      	ldr	r2, [r3, #8]
    b47c:	687b      	ldr	r3, [r7, #4]
    b47e:	681b      	ldr	r3, [r3, #0]
    b480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    b484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
    b486:	687b      	ldr	r3, [r7, #4]
    b488:	681b      	ldr	r3, [r3, #0]
    b48a:	6899      	ldr	r1, [r3, #8]
    b48c:	687b      	ldr	r3, [r7, #4]
    b48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b490:	687b      	ldr	r3, [r7, #4]
    b492:	681b      	ldr	r3, [r3, #0]
    b494:	430a      	orrs	r2, r1
    b496:	609a      	str	r2, [r3, #8]
    b498:	e00f      	b.n	b4ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    b49a:	687b      	ldr	r3, [r7, #4]
    b49c:	681b      	ldr	r3, [r3, #0]
    b49e:	689a      	ldr	r2, [r3, #8]
    b4a0:	687b      	ldr	r3, [r7, #4]
    b4a2:	681b      	ldr	r3, [r3, #0]
    b4a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    b4a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    b4aa:	687b      	ldr	r3, [r7, #4]
    b4ac:	681b      	ldr	r3, [r3, #0]
    b4ae:	689a      	ldr	r2, [r3, #8]
    b4b0:	687b      	ldr	r3, [r7, #4]
    b4b2:	681b      	ldr	r3, [r3, #0]
    b4b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    b4b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	681b      	ldr	r3, [r3, #0]
    b4be:	689a      	ldr	r2, [r3, #8]
    b4c0:	687b      	ldr	r3, [r7, #4]
    b4c2:	681b      	ldr	r3, [r3, #0]
    b4c4:	f022 0202 	bic.w	r2, r2, #2
    b4c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	681b      	ldr	r3, [r3, #0]
    b4ce:	6899      	ldr	r1, [r3, #8]
    b4d0:	687b      	ldr	r3, [r7, #4]
    b4d2:	699b      	ldr	r3, [r3, #24]
    b4d4:	005a      	lsls	r2, r3, #1
    b4d6:	687b      	ldr	r3, [r7, #4]
    b4d8:	681b      	ldr	r3, [r3, #0]
    b4da:	430a      	orrs	r2, r1
    b4dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
    b4de:	687b      	ldr	r3, [r7, #4]
    b4e0:	f893 3020 	ldrb.w	r3, [r3, #32]
    b4e4:	2b00      	cmp	r3, #0
    b4e6:	d01b      	beq.n	b520 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
    b4e8:	687b      	ldr	r3, [r7, #4]
    b4ea:	681b      	ldr	r3, [r3, #0]
    b4ec:	685a      	ldr	r2, [r3, #4]
    b4ee:	687b      	ldr	r3, [r7, #4]
    b4f0:	681b      	ldr	r3, [r3, #0]
    b4f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b4f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    b4f8:	687b      	ldr	r3, [r7, #4]
    b4fa:	681b      	ldr	r3, [r3, #0]
    b4fc:	685a      	ldr	r2, [r3, #4]
    b4fe:	687b      	ldr	r3, [r7, #4]
    b500:	681b      	ldr	r3, [r3, #0]
    b502:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
    b506:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
    b508:	687b      	ldr	r3, [r7, #4]
    b50a:	681b      	ldr	r3, [r3, #0]
    b50c:	6859      	ldr	r1, [r3, #4]
    b50e:	687b      	ldr	r3, [r7, #4]
    b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b512:	3b01      	subs	r3, #1
    b514:	035a      	lsls	r2, r3, #13
    b516:	687b      	ldr	r3, [r7, #4]
    b518:	681b      	ldr	r3, [r3, #0]
    b51a:	430a      	orrs	r2, r1
    b51c:	605a      	str	r2, [r3, #4]
    b51e:	e007      	b.n	b530 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
    b520:	687b      	ldr	r3, [r7, #4]
    b522:	681b      	ldr	r3, [r3, #0]
    b524:	685a      	ldr	r2, [r3, #4]
    b526:	687b      	ldr	r3, [r7, #4]
    b528:	681b      	ldr	r3, [r3, #0]
    b52a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    b52e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
    b530:	687b      	ldr	r3, [r7, #4]
    b532:	681b      	ldr	r3, [r3, #0]
    b534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b536:	687b      	ldr	r3, [r7, #4]
    b538:	681b      	ldr	r3, [r3, #0]
    b53a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b53e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
    b540:	687b      	ldr	r3, [r7, #4]
    b542:	681b      	ldr	r3, [r3, #0]
    b544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b546:	687b      	ldr	r3, [r7, #4]
    b548:	69db      	ldr	r3, [r3, #28]
    b54a:	3b01      	subs	r3, #1
    b54c:	051a      	lsls	r2, r3, #20
    b54e:	687b      	ldr	r3, [r7, #4]
    b550:	681b      	ldr	r3, [r3, #0]
    b552:	430a      	orrs	r2, r1
    b554:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
    b556:	687b      	ldr	r3, [r7, #4]
    b558:	681b      	ldr	r3, [r3, #0]
    b55a:	689a      	ldr	r2, [r3, #8]
    b55c:	687b      	ldr	r3, [r7, #4]
    b55e:	681b      	ldr	r3, [r3, #0]
    b560:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    b564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
    b566:	687b      	ldr	r3, [r7, #4]
    b568:	681b      	ldr	r3, [r3, #0]
    b56a:	6899      	ldr	r1, [r3, #8]
    b56c:	687b      	ldr	r3, [r7, #4]
    b56e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    b572:	025a      	lsls	r2, r3, #9
    b574:	687b      	ldr	r3, [r7, #4]
    b576:	681b      	ldr	r3, [r3, #0]
    b578:	430a      	orrs	r2, r1
    b57a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
    b57c:	687b      	ldr	r3, [r7, #4]
    b57e:	681b      	ldr	r3, [r3, #0]
    b580:	689a      	ldr	r2, [r3, #8]
    b582:	687b      	ldr	r3, [r7, #4]
    b584:	681b      	ldr	r3, [r3, #0]
    b586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    b58a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
    b58c:	687b      	ldr	r3, [r7, #4]
    b58e:	681b      	ldr	r3, [r3, #0]
    b590:	6899      	ldr	r1, [r3, #8]
    b592:	687b      	ldr	r3, [r7, #4]
    b594:	695b      	ldr	r3, [r3, #20]
    b596:	029a      	lsls	r2, r3, #10
    b598:	687b      	ldr	r3, [r7, #4]
    b59a:	681b      	ldr	r3, [r3, #0]
    b59c:	430a      	orrs	r2, r1
    b59e:	609a      	str	r2, [r3, #8]
}
    b5a0:	bf00      	nop
    b5a2:	370c      	adds	r7, #12
    b5a4:	46bd      	mov	sp, r7
    b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5aa:	4770      	bx	lr
    b5ac:	40012300 	.word	0x40012300
    b5b0:	0f000001 	.word	0x0f000001

0000b5b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
    b5b4:	b580      	push	{r7, lr}
    b5b6:	b084      	sub	sp, #16
    b5b8:	af00      	add	r7, sp, #0
    b5ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
    b5bc:	687b      	ldr	r3, [r7, #4]
    b5be:	2b00      	cmp	r3, #0
    b5c0:	d101      	bne.n	b5c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
    b5c2:	2301      	movs	r3, #1
    b5c4:	e0ed      	b.n	b7a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
    b5c6:	687b      	ldr	r3, [r7, #4]
    b5c8:	f893 3020 	ldrb.w	r3, [r3, #32]
    b5cc:	b2db      	uxtb	r3, r3
    b5ce:	2b00      	cmp	r3, #0
    b5d0:	d102      	bne.n	b5d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
    b5d2:	6878      	ldr	r0, [r7, #4]
    b5d4:	f7fc ff1a 	bl	840c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
    b5d8:	687b      	ldr	r3, [r7, #4]
    b5da:	681b      	ldr	r3, [r3, #0]
    b5dc:	681a      	ldr	r2, [r3, #0]
    b5de:	687b      	ldr	r3, [r7, #4]
    b5e0:	681b      	ldr	r3, [r3, #0]
    b5e2:	f022 0202 	bic.w	r2, r2, #2
    b5e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
    b5e8:	f7ff fd2e 	bl	b048 <HAL_GetTick>
    b5ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
    b5ee:	e012      	b.n	b616 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
    b5f0:	f7ff fd2a 	bl	b048 <HAL_GetTick>
    b5f4:	4602      	mov	r2, r0
    b5f6:	68fb      	ldr	r3, [r7, #12]
    b5f8:	1ad3      	subs	r3, r2, r3
    b5fa:	2b0a      	cmp	r3, #10
    b5fc:	d90b      	bls.n	b616 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
    b5fe:	687b      	ldr	r3, [r7, #4]
    b600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b602:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
    b606:	687b      	ldr	r3, [r7, #4]
    b608:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
    b60a:	687b      	ldr	r3, [r7, #4]
    b60c:	2205      	movs	r2, #5
    b60e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
    b612:	2301      	movs	r3, #1
    b614:	e0c5      	b.n	b7a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
    b616:	687b      	ldr	r3, [r7, #4]
    b618:	681b      	ldr	r3, [r3, #0]
    b61a:	685b      	ldr	r3, [r3, #4]
    b61c:	f003 0302 	and.w	r3, r3, #2
    b620:	2b00      	cmp	r3, #0
    b622:	d1e5      	bne.n	b5f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
    b624:	687b      	ldr	r3, [r7, #4]
    b626:	681b      	ldr	r3, [r3, #0]
    b628:	681a      	ldr	r2, [r3, #0]
    b62a:	687b      	ldr	r3, [r7, #4]
    b62c:	681b      	ldr	r3, [r3, #0]
    b62e:	f042 0201 	orr.w	r2, r2, #1
    b632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
    b634:	f7ff fd08 	bl	b048 <HAL_GetTick>
    b638:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
    b63a:	e012      	b.n	b662 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
    b63c:	f7ff fd04 	bl	b048 <HAL_GetTick>
    b640:	4602      	mov	r2, r0
    b642:	68fb      	ldr	r3, [r7, #12]
    b644:	1ad3      	subs	r3, r2, r3
    b646:	2b0a      	cmp	r3, #10
    b648:	d90b      	bls.n	b662 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
    b64a:	687b      	ldr	r3, [r7, #4]
    b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b64e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
    b652:	687b      	ldr	r3, [r7, #4]
    b654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
    b656:	687b      	ldr	r3, [r7, #4]
    b658:	2205      	movs	r2, #5
    b65a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
    b65e:	2301      	movs	r3, #1
    b660:	e09f      	b.n	b7a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
    b662:	687b      	ldr	r3, [r7, #4]
    b664:	681b      	ldr	r3, [r3, #0]
    b666:	685b      	ldr	r3, [r3, #4]
    b668:	f003 0301 	and.w	r3, r3, #1
    b66c:	2b00      	cmp	r3, #0
    b66e:	d0e5      	beq.n	b63c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
    b670:	687b      	ldr	r3, [r7, #4]
    b672:	7e1b      	ldrb	r3, [r3, #24]
    b674:	2b01      	cmp	r3, #1
    b676:	d108      	bne.n	b68a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
    b678:	687b      	ldr	r3, [r7, #4]
    b67a:	681b      	ldr	r3, [r3, #0]
    b67c:	681a      	ldr	r2, [r3, #0]
    b67e:	687b      	ldr	r3, [r7, #4]
    b680:	681b      	ldr	r3, [r3, #0]
    b682:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b686:	601a      	str	r2, [r3, #0]
    b688:	e007      	b.n	b69a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
    b68a:	687b      	ldr	r3, [r7, #4]
    b68c:	681b      	ldr	r3, [r3, #0]
    b68e:	681a      	ldr	r2, [r3, #0]
    b690:	687b      	ldr	r3, [r7, #4]
    b692:	681b      	ldr	r3, [r3, #0]
    b694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b698:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
    b69a:	687b      	ldr	r3, [r7, #4]
    b69c:	7e5b      	ldrb	r3, [r3, #25]
    b69e:	2b01      	cmp	r3, #1
    b6a0:	d108      	bne.n	b6b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
    b6a2:	687b      	ldr	r3, [r7, #4]
    b6a4:	681b      	ldr	r3, [r3, #0]
    b6a6:	681a      	ldr	r2, [r3, #0]
    b6a8:	687b      	ldr	r3, [r7, #4]
    b6aa:	681b      	ldr	r3, [r3, #0]
    b6ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    b6b0:	601a      	str	r2, [r3, #0]
    b6b2:	e007      	b.n	b6c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	681b      	ldr	r3, [r3, #0]
    b6b8:	681a      	ldr	r2, [r3, #0]
    b6ba:	687b      	ldr	r3, [r7, #4]
    b6bc:	681b      	ldr	r3, [r3, #0]
    b6be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    b6c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
    b6c4:	687b      	ldr	r3, [r7, #4]
    b6c6:	7e9b      	ldrb	r3, [r3, #26]
    b6c8:	2b01      	cmp	r3, #1
    b6ca:	d108      	bne.n	b6de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
    b6cc:	687b      	ldr	r3, [r7, #4]
    b6ce:	681b      	ldr	r3, [r3, #0]
    b6d0:	681a      	ldr	r2, [r3, #0]
    b6d2:	687b      	ldr	r3, [r7, #4]
    b6d4:	681b      	ldr	r3, [r3, #0]
    b6d6:	f042 0220 	orr.w	r2, r2, #32
    b6da:	601a      	str	r2, [r3, #0]
    b6dc:	e007      	b.n	b6ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
    b6de:	687b      	ldr	r3, [r7, #4]
    b6e0:	681b      	ldr	r3, [r3, #0]
    b6e2:	681a      	ldr	r2, [r3, #0]
    b6e4:	687b      	ldr	r3, [r7, #4]
    b6e6:	681b      	ldr	r3, [r3, #0]
    b6e8:	f022 0220 	bic.w	r2, r2, #32
    b6ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
    b6ee:	687b      	ldr	r3, [r7, #4]
    b6f0:	7edb      	ldrb	r3, [r3, #27]
    b6f2:	2b01      	cmp	r3, #1
    b6f4:	d108      	bne.n	b708 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
    b6f6:	687b      	ldr	r3, [r7, #4]
    b6f8:	681b      	ldr	r3, [r3, #0]
    b6fa:	681a      	ldr	r2, [r3, #0]
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	681b      	ldr	r3, [r3, #0]
    b700:	f022 0210 	bic.w	r2, r2, #16
    b704:	601a      	str	r2, [r3, #0]
    b706:	e007      	b.n	b718 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
    b708:	687b      	ldr	r3, [r7, #4]
    b70a:	681b      	ldr	r3, [r3, #0]
    b70c:	681a      	ldr	r2, [r3, #0]
    b70e:	687b      	ldr	r3, [r7, #4]
    b710:	681b      	ldr	r3, [r3, #0]
    b712:	f042 0210 	orr.w	r2, r2, #16
    b716:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
    b718:	687b      	ldr	r3, [r7, #4]
    b71a:	7f1b      	ldrb	r3, [r3, #28]
    b71c:	2b01      	cmp	r3, #1
    b71e:	d108      	bne.n	b732 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
    b720:	687b      	ldr	r3, [r7, #4]
    b722:	681b      	ldr	r3, [r3, #0]
    b724:	681a      	ldr	r2, [r3, #0]
    b726:	687b      	ldr	r3, [r7, #4]
    b728:	681b      	ldr	r3, [r3, #0]
    b72a:	f042 0208 	orr.w	r2, r2, #8
    b72e:	601a      	str	r2, [r3, #0]
    b730:	e007      	b.n	b742 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
    b732:	687b      	ldr	r3, [r7, #4]
    b734:	681b      	ldr	r3, [r3, #0]
    b736:	681a      	ldr	r2, [r3, #0]
    b738:	687b      	ldr	r3, [r7, #4]
    b73a:	681b      	ldr	r3, [r3, #0]
    b73c:	f022 0208 	bic.w	r2, r2, #8
    b740:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
    b742:	687b      	ldr	r3, [r7, #4]
    b744:	7f5b      	ldrb	r3, [r3, #29]
    b746:	2b01      	cmp	r3, #1
    b748:	d108      	bne.n	b75c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
    b74a:	687b      	ldr	r3, [r7, #4]
    b74c:	681b      	ldr	r3, [r3, #0]
    b74e:	681a      	ldr	r2, [r3, #0]
    b750:	687b      	ldr	r3, [r7, #4]
    b752:	681b      	ldr	r3, [r3, #0]
    b754:	f042 0204 	orr.w	r2, r2, #4
    b758:	601a      	str	r2, [r3, #0]
    b75a:	e007      	b.n	b76c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
    b75c:	687b      	ldr	r3, [r7, #4]
    b75e:	681b      	ldr	r3, [r3, #0]
    b760:	681a      	ldr	r2, [r3, #0]
    b762:	687b      	ldr	r3, [r7, #4]
    b764:	681b      	ldr	r3, [r3, #0]
    b766:	f022 0204 	bic.w	r2, r2, #4
    b76a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
    b76c:	687b      	ldr	r3, [r7, #4]
    b76e:	689a      	ldr	r2, [r3, #8]
    b770:	687b      	ldr	r3, [r7, #4]
    b772:	68db      	ldr	r3, [r3, #12]
    b774:	431a      	orrs	r2, r3
    b776:	687b      	ldr	r3, [r7, #4]
    b778:	691b      	ldr	r3, [r3, #16]
    b77a:	431a      	orrs	r2, r3
    b77c:	687b      	ldr	r3, [r7, #4]
    b77e:	695b      	ldr	r3, [r3, #20]
    b780:	ea42 0103 	orr.w	r1, r2, r3
    b784:	687b      	ldr	r3, [r7, #4]
    b786:	685b      	ldr	r3, [r3, #4]
    b788:	1e5a      	subs	r2, r3, #1
    b78a:	687b      	ldr	r3, [r7, #4]
    b78c:	681b      	ldr	r3, [r3, #0]
    b78e:	430a      	orrs	r2, r1
    b790:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
    b792:	687b      	ldr	r3, [r7, #4]
    b794:	2200      	movs	r2, #0
    b796:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
    b798:	687b      	ldr	r3, [r7, #4]
    b79a:	2201      	movs	r2, #1
    b79c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
    b7a0:	2300      	movs	r3, #0
}
    b7a2:	4618      	mov	r0, r3
    b7a4:	3710      	adds	r7, #16
    b7a6:	46bd      	mov	sp, r7
    b7a8:	bd80      	pop	{r7, pc}
	...

0000b7ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
    b7ac:	b480      	push	{r7}
    b7ae:	b087      	sub	sp, #28
    b7b0:	af00      	add	r7, sp, #0
    b7b2:	6078      	str	r0, [r7, #4]
    b7b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
    b7b6:	687b      	ldr	r3, [r7, #4]
    b7b8:	681b      	ldr	r3, [r3, #0]
    b7ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
    b7bc:	687b      	ldr	r3, [r7, #4]
    b7be:	f893 3020 	ldrb.w	r3, [r3, #32]
    b7c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
    b7c4:	7cfb      	ldrb	r3, [r7, #19]
    b7c6:	2b01      	cmp	r3, #1
    b7c8:	d003      	beq.n	b7d2 <HAL_CAN_ConfigFilter+0x26>
    b7ca:	7cfb      	ldrb	r3, [r7, #19]
    b7cc:	2b02      	cmp	r3, #2
    b7ce:	f040 80c7 	bne.w	b960 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
    b7d2:	687b      	ldr	r3, [r7, #4]
    b7d4:	681b      	ldr	r3, [r3, #0]
    b7d6:	4a69      	ldr	r2, [pc, #420]	; (b97c <HAL_CAN_ConfigFilter+0x1d0>)
    b7d8:	4293      	cmp	r3, r2
    b7da:	d001      	beq.n	b7e0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
    b7dc:	4b68      	ldr	r3, [pc, #416]	; (b980 <HAL_CAN_ConfigFilter+0x1d4>)
    b7de:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
    b7e0:	697b      	ldr	r3, [r7, #20]
    b7e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    b7e6:	f043 0201 	orr.w	r2, r3, #1
    b7ea:	697b      	ldr	r3, [r7, #20]
    b7ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
    b7f0:	697b      	ldr	r3, [r7, #20]
    b7f2:	4a63      	ldr	r2, [pc, #396]	; (b980 <HAL_CAN_ConfigFilter+0x1d4>)
    b7f4:	4293      	cmp	r3, r2
    b7f6:	d111      	bne.n	b81c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    b7f8:	697b      	ldr	r3, [r7, #20]
    b7fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    b7fe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
    b802:	697b      	ldr	r3, [r7, #20]
    b804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    b808:	697b      	ldr	r3, [r7, #20]
    b80a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    b80e:	683b      	ldr	r3, [r7, #0]
    b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b812:	021b      	lsls	r3, r3, #8
    b814:	431a      	orrs	r2, r3
    b816:	697b      	ldr	r3, [r7, #20]
    b818:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
    b81c:	683b      	ldr	r3, [r7, #0]
    b81e:	695b      	ldr	r3, [r3, #20]
    b820:	f003 031f 	and.w	r3, r3, #31
    b824:	2201      	movs	r2, #1
    b826:	fa02 f303 	lsl.w	r3, r2, r3
    b82a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
    b82c:	697b      	ldr	r3, [r7, #20]
    b82e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
    b832:	68fb      	ldr	r3, [r7, #12]
    b834:	43db      	mvns	r3, r3
    b836:	401a      	ands	r2, r3
    b838:	697b      	ldr	r3, [r7, #20]
    b83a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
    b83e:	683b      	ldr	r3, [r7, #0]
    b840:	69db      	ldr	r3, [r3, #28]
    b842:	2b00      	cmp	r3, #0
    b844:	d123      	bne.n	b88e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
    b846:	697b      	ldr	r3, [r7, #20]
    b848:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
    b84c:	68fb      	ldr	r3, [r7, #12]
    b84e:	43db      	mvns	r3, r3
    b850:	401a      	ands	r2, r3
    b852:	697b      	ldr	r3, [r7, #20]
    b854:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
    b858:	683b      	ldr	r3, [r7, #0]
    b85a:	68db      	ldr	r3, [r3, #12]
    b85c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
    b85e:	683b      	ldr	r3, [r7, #0]
    b860:	685b      	ldr	r3, [r3, #4]
    b862:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
    b864:	683a      	ldr	r2, [r7, #0]
    b866:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
    b868:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
    b86a:	697b      	ldr	r3, [r7, #20]
    b86c:	3248      	adds	r2, #72	; 0x48
    b86e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
    b872:	683b      	ldr	r3, [r7, #0]
    b874:	689b      	ldr	r3, [r3, #8]
    b876:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
    b878:	683b      	ldr	r3, [r7, #0]
    b87a:	681b      	ldr	r3, [r3, #0]
    b87c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
    b87e:	683b      	ldr	r3, [r7, #0]
    b880:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
    b882:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
    b884:	6979      	ldr	r1, [r7, #20]
    b886:	3348      	adds	r3, #72	; 0x48
    b888:	00db      	lsls	r3, r3, #3
    b88a:	440b      	add	r3, r1
    b88c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
    b88e:	683b      	ldr	r3, [r7, #0]
    b890:	69db      	ldr	r3, [r3, #28]
    b892:	2b01      	cmp	r3, #1
    b894:	d122      	bne.n	b8dc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
    b896:	697b      	ldr	r3, [r7, #20]
    b898:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
    b89c:	68fb      	ldr	r3, [r7, #12]
    b89e:	431a      	orrs	r2, r3
    b8a0:	697b      	ldr	r3, [r7, #20]
    b8a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
    b8a6:	683b      	ldr	r3, [r7, #0]
    b8a8:	681b      	ldr	r3, [r3, #0]
    b8aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
    b8ac:	683b      	ldr	r3, [r7, #0]
    b8ae:	685b      	ldr	r3, [r3, #4]
    b8b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
    b8b2:	683a      	ldr	r2, [r7, #0]
    b8b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
    b8b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
    b8b8:	697b      	ldr	r3, [r7, #20]
    b8ba:	3248      	adds	r2, #72	; 0x48
    b8bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
    b8c0:	683b      	ldr	r3, [r7, #0]
    b8c2:	689b      	ldr	r3, [r3, #8]
    b8c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    b8c6:	683b      	ldr	r3, [r7, #0]
    b8c8:	68db      	ldr	r3, [r3, #12]
    b8ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
    b8cc:	683b      	ldr	r3, [r7, #0]
    b8ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
    b8d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
    b8d2:	6979      	ldr	r1, [r7, #20]
    b8d4:	3348      	adds	r3, #72	; 0x48
    b8d6:	00db      	lsls	r3, r3, #3
    b8d8:	440b      	add	r3, r1
    b8da:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
    b8dc:	683b      	ldr	r3, [r7, #0]
    b8de:	699b      	ldr	r3, [r3, #24]
    b8e0:	2b00      	cmp	r3, #0
    b8e2:	d109      	bne.n	b8f8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
    b8e4:	697b      	ldr	r3, [r7, #20]
    b8e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    b8ea:	68fb      	ldr	r3, [r7, #12]
    b8ec:	43db      	mvns	r3, r3
    b8ee:	401a      	ands	r2, r3
    b8f0:	697b      	ldr	r3, [r7, #20]
    b8f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    b8f6:	e007      	b.n	b908 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
    b8f8:	697b      	ldr	r3, [r7, #20]
    b8fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    b8fe:	68fb      	ldr	r3, [r7, #12]
    b900:	431a      	orrs	r2, r3
    b902:	697b      	ldr	r3, [r7, #20]
    b904:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
    b908:	683b      	ldr	r3, [r7, #0]
    b90a:	691b      	ldr	r3, [r3, #16]
    b90c:	2b00      	cmp	r3, #0
    b90e:	d109      	bne.n	b924 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
    b910:	697b      	ldr	r3, [r7, #20]
    b912:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    b916:	68fb      	ldr	r3, [r7, #12]
    b918:	43db      	mvns	r3, r3
    b91a:	401a      	ands	r2, r3
    b91c:	697b      	ldr	r3, [r7, #20]
    b91e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    b922:	e007      	b.n	b934 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    b924:	697b      	ldr	r3, [r7, #20]
    b926:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    b92a:	68fb      	ldr	r3, [r7, #12]
    b92c:	431a      	orrs	r2, r3
    b92e:	697b      	ldr	r3, [r7, #20]
    b930:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
    b934:	683b      	ldr	r3, [r7, #0]
    b936:	6a1b      	ldr	r3, [r3, #32]
    b938:	2b01      	cmp	r3, #1
    b93a:	d107      	bne.n	b94c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
    b93c:	697b      	ldr	r3, [r7, #20]
    b93e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
    b942:	68fb      	ldr	r3, [r7, #12]
    b944:	431a      	orrs	r2, r3
    b946:	697b      	ldr	r3, [r7, #20]
    b948:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
    b94c:	697b      	ldr	r3, [r7, #20]
    b94e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    b952:	f023 0201 	bic.w	r2, r3, #1
    b956:	697b      	ldr	r3, [r7, #20]
    b958:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
    b95c:	2300      	movs	r3, #0
    b95e:	e006      	b.n	b96e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
    b960:	687b      	ldr	r3, [r7, #4]
    b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b964:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    b968:	687b      	ldr	r3, [r7, #4]
    b96a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
    b96c:	2301      	movs	r3, #1
  }
}
    b96e:	4618      	mov	r0, r3
    b970:	371c      	adds	r7, #28
    b972:	46bd      	mov	sp, r7
    b974:	f85d 7b04 	ldr.w	r7, [sp], #4
    b978:	4770      	bx	lr
    b97a:	bf00      	nop
    b97c:	40003400 	.word	0x40003400
    b980:	40006400 	.word	0x40006400

0000b984 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
    b984:	b580      	push	{r7, lr}
    b986:	b084      	sub	sp, #16
    b988:	af00      	add	r7, sp, #0
    b98a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
    b98c:	687b      	ldr	r3, [r7, #4]
    b98e:	f893 3020 	ldrb.w	r3, [r3, #32]
    b992:	b2db      	uxtb	r3, r3
    b994:	2b01      	cmp	r3, #1
    b996:	d12e      	bne.n	b9f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
    b998:	687b      	ldr	r3, [r7, #4]
    b99a:	2202      	movs	r2, #2
    b99c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
    b9a0:	687b      	ldr	r3, [r7, #4]
    b9a2:	681b      	ldr	r3, [r3, #0]
    b9a4:	681a      	ldr	r2, [r3, #0]
    b9a6:	687b      	ldr	r3, [r7, #4]
    b9a8:	681b      	ldr	r3, [r3, #0]
    b9aa:	f022 0201 	bic.w	r2, r2, #1
    b9ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
    b9b0:	f7ff fb4a 	bl	b048 <HAL_GetTick>
    b9b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
    b9b6:	e012      	b.n	b9de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
    b9b8:	f7ff fb46 	bl	b048 <HAL_GetTick>
    b9bc:	4602      	mov	r2, r0
    b9be:	68fb      	ldr	r3, [r7, #12]
    b9c0:	1ad3      	subs	r3, r2, r3
    b9c2:	2b0a      	cmp	r3, #10
    b9c4:	d90b      	bls.n	b9de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
    b9c6:	687b      	ldr	r3, [r7, #4]
    b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b9ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
    b9ce:	687b      	ldr	r3, [r7, #4]
    b9d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
    b9d2:	687b      	ldr	r3, [r7, #4]
    b9d4:	2205      	movs	r2, #5
    b9d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
    b9da:	2301      	movs	r3, #1
    b9dc:	e012      	b.n	ba04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
    b9de:	687b      	ldr	r3, [r7, #4]
    b9e0:	681b      	ldr	r3, [r3, #0]
    b9e2:	685b      	ldr	r3, [r3, #4]
    b9e4:	f003 0301 	and.w	r3, r3, #1
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d1e5      	bne.n	b9b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
    b9ec:	687b      	ldr	r3, [r7, #4]
    b9ee:	2200      	movs	r2, #0
    b9f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
    b9f2:	2300      	movs	r3, #0
    b9f4:	e006      	b.n	ba04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
    b9f6:	687b      	ldr	r3, [r7, #4]
    b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b9fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    b9fe:	687b      	ldr	r3, [r7, #4]
    ba00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
    ba02:	2301      	movs	r3, #1
  }
}
    ba04:	4618      	mov	r0, r3
    ba06:	3710      	adds	r7, #16
    ba08:	46bd      	mov	sp, r7
    ba0a:	bd80      	pop	{r7, pc}

0000ba0c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
    ba0c:	b480      	push	{r7}
    ba0e:	b089      	sub	sp, #36	; 0x24
    ba10:	af00      	add	r7, sp, #0
    ba12:	60f8      	str	r0, [r7, #12]
    ba14:	60b9      	str	r1, [r7, #8]
    ba16:	607a      	str	r2, [r7, #4]
    ba18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
    ba1a:	68fb      	ldr	r3, [r7, #12]
    ba1c:	f893 3020 	ldrb.w	r3, [r3, #32]
    ba20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
    ba22:	68fb      	ldr	r3, [r7, #12]
    ba24:	681b      	ldr	r3, [r3, #0]
    ba26:	689b      	ldr	r3, [r3, #8]
    ba28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
    ba2a:	7ffb      	ldrb	r3, [r7, #31]
    ba2c:	2b01      	cmp	r3, #1
    ba2e:	d003      	beq.n	ba38 <HAL_CAN_AddTxMessage+0x2c>
    ba30:	7ffb      	ldrb	r3, [r7, #31]
    ba32:	2b02      	cmp	r3, #2
    ba34:	f040 80b8 	bne.w	bba8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
    ba38:	69bb      	ldr	r3, [r7, #24]
    ba3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    ba3e:	2b00      	cmp	r3, #0
    ba40:	d10a      	bne.n	ba58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
    ba42:	69bb      	ldr	r3, [r7, #24]
    ba44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
    ba48:	2b00      	cmp	r3, #0
    ba4a:	d105      	bne.n	ba58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
    ba4c:	69bb      	ldr	r3, [r7, #24]
    ba4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
    ba52:	2b00      	cmp	r3, #0
    ba54:	f000 80a0 	beq.w	bb98 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
    ba58:	69bb      	ldr	r3, [r7, #24]
    ba5a:	0e1b      	lsrs	r3, r3, #24
    ba5c:	f003 0303 	and.w	r3, r3, #3
    ba60:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
    ba62:	697b      	ldr	r3, [r7, #20]
    ba64:	2b02      	cmp	r3, #2
    ba66:	d907      	bls.n	ba78 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
    ba68:	68fb      	ldr	r3, [r7, #12]
    ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ba6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
    ba70:	68fb      	ldr	r3, [r7, #12]
    ba72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
    ba74:	2301      	movs	r3, #1
    ba76:	e09e      	b.n	bbb6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
    ba78:	2201      	movs	r2, #1
    ba7a:	697b      	ldr	r3, [r7, #20]
    ba7c:	409a      	lsls	r2, r3
    ba7e:	683b      	ldr	r3, [r7, #0]
    ba80:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
    ba82:	68bb      	ldr	r3, [r7, #8]
    ba84:	689b      	ldr	r3, [r3, #8]
    ba86:	2b00      	cmp	r3, #0
    ba88:	d10d      	bne.n	baa6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
    ba8a:	68bb      	ldr	r3, [r7, #8]
    ba8c:	681b      	ldr	r3, [r3, #0]
    ba8e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
    ba90:	68bb      	ldr	r3, [r7, #8]
    ba92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
    ba94:	68f9      	ldr	r1, [r7, #12]
    ba96:	6809      	ldr	r1, [r1, #0]
    ba98:	431a      	orrs	r2, r3
    ba9a:	697b      	ldr	r3, [r7, #20]
    ba9c:	3318      	adds	r3, #24
    ba9e:	011b      	lsls	r3, r3, #4
    baa0:	440b      	add	r3, r1
    baa2:	601a      	str	r2, [r3, #0]
    baa4:	e00f      	b.n	bac6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
    baa6:	68bb      	ldr	r3, [r7, #8]
    baa8:	685b      	ldr	r3, [r3, #4]
    baaa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
    baac:	68bb      	ldr	r3, [r7, #8]
    baae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
    bab0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
    bab2:	68bb      	ldr	r3, [r7, #8]
    bab4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
    bab6:	68f9      	ldr	r1, [r7, #12]
    bab8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
    baba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
    babc:	697b      	ldr	r3, [r7, #20]
    babe:	3318      	adds	r3, #24
    bac0:	011b      	lsls	r3, r3, #4
    bac2:	440b      	add	r3, r1
    bac4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
    bac6:	68fb      	ldr	r3, [r7, #12]
    bac8:	6819      	ldr	r1, [r3, #0]
    baca:	68bb      	ldr	r3, [r7, #8]
    bacc:	691a      	ldr	r2, [r3, #16]
    bace:	697b      	ldr	r3, [r7, #20]
    bad0:	3318      	adds	r3, #24
    bad2:	011b      	lsls	r3, r3, #4
    bad4:	440b      	add	r3, r1
    bad6:	3304      	adds	r3, #4
    bad8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
    bada:	68bb      	ldr	r3, [r7, #8]
    badc:	7d1b      	ldrb	r3, [r3, #20]
    bade:	2b01      	cmp	r3, #1
    bae0:	d111      	bne.n	bb06 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
    bae2:	68fb      	ldr	r3, [r7, #12]
    bae4:	681a      	ldr	r2, [r3, #0]
    bae6:	697b      	ldr	r3, [r7, #20]
    bae8:	3318      	adds	r3, #24
    baea:	011b      	lsls	r3, r3, #4
    baec:	4413      	add	r3, r2
    baee:	3304      	adds	r3, #4
    baf0:	681b      	ldr	r3, [r3, #0]
    baf2:	68fa      	ldr	r2, [r7, #12]
    baf4:	6811      	ldr	r1, [r2, #0]
    baf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    bafa:	697b      	ldr	r3, [r7, #20]
    bafc:	3318      	adds	r3, #24
    bafe:	011b      	lsls	r3, r3, #4
    bb00:	440b      	add	r3, r1
    bb02:	3304      	adds	r3, #4
    bb04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
    bb06:	687b      	ldr	r3, [r7, #4]
    bb08:	3307      	adds	r3, #7
    bb0a:	781b      	ldrb	r3, [r3, #0]
    bb0c:	061a      	lsls	r2, r3, #24
    bb0e:	687b      	ldr	r3, [r7, #4]
    bb10:	3306      	adds	r3, #6
    bb12:	781b      	ldrb	r3, [r3, #0]
    bb14:	041b      	lsls	r3, r3, #16
    bb16:	431a      	orrs	r2, r3
    bb18:	687b      	ldr	r3, [r7, #4]
    bb1a:	3305      	adds	r3, #5
    bb1c:	781b      	ldrb	r3, [r3, #0]
    bb1e:	021b      	lsls	r3, r3, #8
    bb20:	4313      	orrs	r3, r2
    bb22:	687a      	ldr	r2, [r7, #4]
    bb24:	3204      	adds	r2, #4
    bb26:	7812      	ldrb	r2, [r2, #0]
    bb28:	4610      	mov	r0, r2
    bb2a:	68fa      	ldr	r2, [r7, #12]
    bb2c:	6811      	ldr	r1, [r2, #0]
    bb2e:	ea43 0200 	orr.w	r2, r3, r0
    bb32:	697b      	ldr	r3, [r7, #20]
    bb34:	011b      	lsls	r3, r3, #4
    bb36:	440b      	add	r3, r1
    bb38:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
    bb3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
    bb3e:	687b      	ldr	r3, [r7, #4]
    bb40:	3303      	adds	r3, #3
    bb42:	781b      	ldrb	r3, [r3, #0]
    bb44:	061a      	lsls	r2, r3, #24
    bb46:	687b      	ldr	r3, [r7, #4]
    bb48:	3302      	adds	r3, #2
    bb4a:	781b      	ldrb	r3, [r3, #0]
    bb4c:	041b      	lsls	r3, r3, #16
    bb4e:	431a      	orrs	r2, r3
    bb50:	687b      	ldr	r3, [r7, #4]
    bb52:	3301      	adds	r3, #1
    bb54:	781b      	ldrb	r3, [r3, #0]
    bb56:	021b      	lsls	r3, r3, #8
    bb58:	4313      	orrs	r3, r2
    bb5a:	687a      	ldr	r2, [r7, #4]
    bb5c:	7812      	ldrb	r2, [r2, #0]
    bb5e:	4610      	mov	r0, r2
    bb60:	68fa      	ldr	r2, [r7, #12]
    bb62:	6811      	ldr	r1, [r2, #0]
    bb64:	ea43 0200 	orr.w	r2, r3, r0
    bb68:	697b      	ldr	r3, [r7, #20]
    bb6a:	011b      	lsls	r3, r3, #4
    bb6c:	440b      	add	r3, r1
    bb6e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
    bb72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
    bb74:	68fb      	ldr	r3, [r7, #12]
    bb76:	681a      	ldr	r2, [r3, #0]
    bb78:	697b      	ldr	r3, [r7, #20]
    bb7a:	3318      	adds	r3, #24
    bb7c:	011b      	lsls	r3, r3, #4
    bb7e:	4413      	add	r3, r2
    bb80:	681b      	ldr	r3, [r3, #0]
    bb82:	68fa      	ldr	r2, [r7, #12]
    bb84:	6811      	ldr	r1, [r2, #0]
    bb86:	f043 0201 	orr.w	r2, r3, #1
    bb8a:	697b      	ldr	r3, [r7, #20]
    bb8c:	3318      	adds	r3, #24
    bb8e:	011b      	lsls	r3, r3, #4
    bb90:	440b      	add	r3, r1
    bb92:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
    bb94:	2300      	movs	r3, #0
    bb96:	e00e      	b.n	bbb6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
    bb98:	68fb      	ldr	r3, [r7, #12]
    bb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    bba0:	68fb      	ldr	r3, [r7, #12]
    bba2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
    bba4:	2301      	movs	r3, #1
    bba6:	e006      	b.n	bbb6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
    bba8:	68fb      	ldr	r3, [r7, #12]
    bbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bbac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    bbb0:	68fb      	ldr	r3, [r7, #12]
    bbb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
    bbb4:	2301      	movs	r3, #1
  }
}
    bbb6:	4618      	mov	r0, r3
    bbb8:	3724      	adds	r7, #36	; 0x24
    bbba:	46bd      	mov	sp, r7
    bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbc0:	4770      	bx	lr

0000bbc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
    bbc2:	b480      	push	{r7}
    bbc4:	b085      	sub	sp, #20
    bbc6:	af00      	add	r7, sp, #0
    bbc8:	6078      	str	r0, [r7, #4]
    bbca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
    bbcc:	687b      	ldr	r3, [r7, #4]
    bbce:	f893 3020 	ldrb.w	r3, [r3, #32]
    bbd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
    bbd4:	7bfb      	ldrb	r3, [r7, #15]
    bbd6:	2b01      	cmp	r3, #1
    bbd8:	d002      	beq.n	bbe0 <HAL_CAN_ActivateNotification+0x1e>
    bbda:	7bfb      	ldrb	r3, [r7, #15]
    bbdc:	2b02      	cmp	r3, #2
    bbde:	d109      	bne.n	bbf4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
    bbe0:	687b      	ldr	r3, [r7, #4]
    bbe2:	681b      	ldr	r3, [r3, #0]
    bbe4:	6959      	ldr	r1, [r3, #20]
    bbe6:	687b      	ldr	r3, [r7, #4]
    bbe8:	681b      	ldr	r3, [r3, #0]
    bbea:	683a      	ldr	r2, [r7, #0]
    bbec:	430a      	orrs	r2, r1
    bbee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
    bbf0:	2300      	movs	r3, #0
    bbf2:	e006      	b.n	bc02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
    bbf4:	687b      	ldr	r3, [r7, #4]
    bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bbf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    bbfc:	687b      	ldr	r3, [r7, #4]
    bbfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
    bc00:	2301      	movs	r3, #1
  }
}
    bc02:	4618      	mov	r0, r3
    bc04:	3714      	adds	r7, #20
    bc06:	46bd      	mov	sp, r7
    bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc0c:	4770      	bx	lr
	...

0000bc10 <__NVIC_SetPriorityGrouping>:
{
    bc10:	b480      	push	{r7}
    bc12:	b085      	sub	sp, #20
    bc14:	af00      	add	r7, sp, #0
    bc16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
    bc18:	687b      	ldr	r3, [r7, #4]
    bc1a:	f003 0307 	and.w	r3, r3, #7
    bc1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    bc20:	4b0b      	ldr	r3, [pc, #44]	; (bc50 <__NVIC_SetPriorityGrouping+0x40>)
    bc22:	68db      	ldr	r3, [r3, #12]
    bc24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
    bc26:	68ba      	ldr	r2, [r7, #8]
    bc28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
    bc2c:	4013      	ands	r3, r2
    bc2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
    bc30:	68fb      	ldr	r3, [r7, #12]
    bc32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    bc34:	68bb      	ldr	r3, [r7, #8]
    bc36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
    bc38:	4b06      	ldr	r3, [pc, #24]	; (bc54 <__NVIC_SetPriorityGrouping+0x44>)
    bc3a:	4313      	orrs	r3, r2
    bc3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
    bc3e:	4a04      	ldr	r2, [pc, #16]	; (bc50 <__NVIC_SetPriorityGrouping+0x40>)
    bc40:	68bb      	ldr	r3, [r7, #8]
    bc42:	60d3      	str	r3, [r2, #12]
}
    bc44:	bf00      	nop
    bc46:	3714      	adds	r7, #20
    bc48:	46bd      	mov	sp, r7
    bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc4e:	4770      	bx	lr
    bc50:	e000ed00 	.word	0xe000ed00
    bc54:	05fa0000 	.word	0x05fa0000

0000bc58 <__NVIC_GetPriorityGrouping>:
{
    bc58:	b480      	push	{r7}
    bc5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
    bc5c:	4b04      	ldr	r3, [pc, #16]	; (bc70 <__NVIC_GetPriorityGrouping+0x18>)
    bc5e:	68db      	ldr	r3, [r3, #12]
    bc60:	0a1b      	lsrs	r3, r3, #8
    bc62:	f003 0307 	and.w	r3, r3, #7
}
    bc66:	4618      	mov	r0, r3
    bc68:	46bd      	mov	sp, r7
    bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc6e:	4770      	bx	lr
    bc70:	e000ed00 	.word	0xe000ed00

0000bc74 <__NVIC_EnableIRQ>:
{
    bc74:	b480      	push	{r7}
    bc76:	b083      	sub	sp, #12
    bc78:	af00      	add	r7, sp, #0
    bc7a:	4603      	mov	r3, r0
    bc7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    bc7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bc82:	2b00      	cmp	r3, #0
    bc84:	db0b      	blt.n	bc9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bc86:	79fb      	ldrb	r3, [r7, #7]
    bc88:	f003 021f 	and.w	r2, r3, #31
    bc8c:	4907      	ldr	r1, [pc, #28]	; (bcac <__NVIC_EnableIRQ+0x38>)
    bc8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bc92:	095b      	lsrs	r3, r3, #5
    bc94:	2001      	movs	r0, #1
    bc96:	fa00 f202 	lsl.w	r2, r0, r2
    bc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc9e:	bf00      	nop
    bca0:	370c      	adds	r7, #12
    bca2:	46bd      	mov	sp, r7
    bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bca8:	4770      	bx	lr
    bcaa:	bf00      	nop
    bcac:	e000e100 	.word	0xe000e100

0000bcb0 <__NVIC_SetPriority>:
{
    bcb0:	b480      	push	{r7}
    bcb2:	b083      	sub	sp, #12
    bcb4:	af00      	add	r7, sp, #0
    bcb6:	4603      	mov	r3, r0
    bcb8:	6039      	str	r1, [r7, #0]
    bcba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    bcbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	db0a      	blt.n	bcda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bcc4:	683b      	ldr	r3, [r7, #0]
    bcc6:	b2da      	uxtb	r2, r3
    bcc8:	490c      	ldr	r1, [pc, #48]	; (bcfc <__NVIC_SetPriority+0x4c>)
    bcca:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bcce:	0112      	lsls	r2, r2, #4
    bcd0:	b2d2      	uxtb	r2, r2
    bcd2:	440b      	add	r3, r1
    bcd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    bcd8:	e00a      	b.n	bcf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bcda:	683b      	ldr	r3, [r7, #0]
    bcdc:	b2da      	uxtb	r2, r3
    bcde:	4908      	ldr	r1, [pc, #32]	; (bd00 <__NVIC_SetPriority+0x50>)
    bce0:	79fb      	ldrb	r3, [r7, #7]
    bce2:	f003 030f 	and.w	r3, r3, #15
    bce6:	3b04      	subs	r3, #4
    bce8:	0112      	lsls	r2, r2, #4
    bcea:	b2d2      	uxtb	r2, r2
    bcec:	440b      	add	r3, r1
    bcee:	761a      	strb	r2, [r3, #24]
}
    bcf0:	bf00      	nop
    bcf2:	370c      	adds	r7, #12
    bcf4:	46bd      	mov	sp, r7
    bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcfa:	4770      	bx	lr
    bcfc:	e000e100 	.word	0xe000e100
    bd00:	e000ed00 	.word	0xe000ed00

0000bd04 <NVIC_EncodePriority>:
{
    bd04:	b480      	push	{r7}
    bd06:	b089      	sub	sp, #36	; 0x24
    bd08:	af00      	add	r7, sp, #0
    bd0a:	60f8      	str	r0, [r7, #12]
    bd0c:	60b9      	str	r1, [r7, #8]
    bd0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
    bd10:	68fb      	ldr	r3, [r7, #12]
    bd12:	f003 0307 	and.w	r3, r3, #7
    bd16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
    bd18:	69fb      	ldr	r3, [r7, #28]
    bd1a:	f1c3 0307 	rsb	r3, r3, #7
    bd1e:	2b04      	cmp	r3, #4
    bd20:	bf28      	it	cs
    bd22:	2304      	movcs	r3, #4
    bd24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
    bd26:	69fb      	ldr	r3, [r7, #28]
    bd28:	3304      	adds	r3, #4
    bd2a:	2b06      	cmp	r3, #6
    bd2c:	d902      	bls.n	bd34 <NVIC_EncodePriority+0x30>
    bd2e:	69fb      	ldr	r3, [r7, #28]
    bd30:	3b03      	subs	r3, #3
    bd32:	e000      	b.n	bd36 <NVIC_EncodePriority+0x32>
    bd34:	2300      	movs	r3, #0
    bd36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    bd38:	f04f 32ff 	mov.w	r2, #4294967295
    bd3c:	69bb      	ldr	r3, [r7, #24]
    bd3e:	fa02 f303 	lsl.w	r3, r2, r3
    bd42:	43da      	mvns	r2, r3
    bd44:	68bb      	ldr	r3, [r7, #8]
    bd46:	401a      	ands	r2, r3
    bd48:	697b      	ldr	r3, [r7, #20]
    bd4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
    bd4c:	f04f 31ff 	mov.w	r1, #4294967295
    bd50:	697b      	ldr	r3, [r7, #20]
    bd52:	fa01 f303 	lsl.w	r3, r1, r3
    bd56:	43d9      	mvns	r1, r3
    bd58:	687b      	ldr	r3, [r7, #4]
    bd5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    bd5c:	4313      	orrs	r3, r2
}
    bd5e:	4618      	mov	r0, r3
    bd60:	3724      	adds	r7, #36	; 0x24
    bd62:	46bd      	mov	sp, r7
    bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd68:	4770      	bx	lr

0000bd6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    bd6a:	b580      	push	{r7, lr}
    bd6c:	b082      	sub	sp, #8
    bd6e:	af00      	add	r7, sp, #0
    bd70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
    bd72:	6878      	ldr	r0, [r7, #4]
    bd74:	f7ff ff4c 	bl	bc10 <__NVIC_SetPriorityGrouping>
}
    bd78:	bf00      	nop
    bd7a:	3708      	adds	r7, #8
    bd7c:	46bd      	mov	sp, r7
    bd7e:	bd80      	pop	{r7, pc}

0000bd80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
    bd80:	b580      	push	{r7, lr}
    bd82:	b086      	sub	sp, #24
    bd84:	af00      	add	r7, sp, #0
    bd86:	4603      	mov	r3, r0
    bd88:	60b9      	str	r1, [r7, #8]
    bd8a:	607a      	str	r2, [r7, #4]
    bd8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
    bd8e:	2300      	movs	r3, #0
    bd90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
    bd92:	f7ff ff61 	bl	bc58 <__NVIC_GetPriorityGrouping>
    bd96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
    bd98:	687a      	ldr	r2, [r7, #4]
    bd9a:	68b9      	ldr	r1, [r7, #8]
    bd9c:	6978      	ldr	r0, [r7, #20]
    bd9e:	f7ff ffb1 	bl	bd04 <NVIC_EncodePriority>
    bda2:	4602      	mov	r2, r0
    bda4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    bda8:	4611      	mov	r1, r2
    bdaa:	4618      	mov	r0, r3
    bdac:	f7ff ff80 	bl	bcb0 <__NVIC_SetPriority>
}
    bdb0:	bf00      	nop
    bdb2:	3718      	adds	r7, #24
    bdb4:	46bd      	mov	sp, r7
    bdb6:	bd80      	pop	{r7, pc}

0000bdb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
    bdb8:	b580      	push	{r7, lr}
    bdba:	b082      	sub	sp, #8
    bdbc:	af00      	add	r7, sp, #0
    bdbe:	4603      	mov	r3, r0
    bdc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
    bdc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bdc6:	4618      	mov	r0, r3
    bdc8:	f7ff ff54 	bl	bc74 <__NVIC_EnableIRQ>
}
    bdcc:	bf00      	nop
    bdce:	3708      	adds	r7, #8
    bdd0:	46bd      	mov	sp, r7
    bdd2:	bd80      	pop	{r7, pc}

0000bdd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
    bdd4:	b580      	push	{r7, lr}
    bdd6:	b086      	sub	sp, #24
    bdd8:	af00      	add	r7, sp, #0
    bdda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
    bddc:	2300      	movs	r3, #0
    bdde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
    bde0:	f7ff f932 	bl	b048 <HAL_GetTick>
    bde4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
    bde6:	687b      	ldr	r3, [r7, #4]
    bde8:	2b00      	cmp	r3, #0
    bdea:	d101      	bne.n	bdf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
    bdec:	2301      	movs	r3, #1
    bdee:	e099      	b.n	bf24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
    bdf0:	687b      	ldr	r3, [r7, #4]
    bdf2:	2200      	movs	r2, #0
    bdf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	2202      	movs	r2, #2
    bdfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
    be00:	687b      	ldr	r3, [r7, #4]
    be02:	681b      	ldr	r3, [r3, #0]
    be04:	681a      	ldr	r2, [r3, #0]
    be06:	687b      	ldr	r3, [r7, #4]
    be08:	681b      	ldr	r3, [r3, #0]
    be0a:	f022 0201 	bic.w	r2, r2, #1
    be0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
    be10:	e00f      	b.n	be32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    be12:	f7ff f919 	bl	b048 <HAL_GetTick>
    be16:	4602      	mov	r2, r0
    be18:	693b      	ldr	r3, [r7, #16]
    be1a:	1ad3      	subs	r3, r2, r3
    be1c:	2b05      	cmp	r3, #5
    be1e:	d908      	bls.n	be32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
    be20:	687b      	ldr	r3, [r7, #4]
    be22:	2220      	movs	r2, #32
    be24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
    be26:	687b      	ldr	r3, [r7, #4]
    be28:	2203      	movs	r2, #3
    be2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
    be2e:	2303      	movs	r3, #3
    be30:	e078      	b.n	bf24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
    be32:	687b      	ldr	r3, [r7, #4]
    be34:	681b      	ldr	r3, [r3, #0]
    be36:	681b      	ldr	r3, [r3, #0]
    be38:	f003 0301 	and.w	r3, r3, #1
    be3c:	2b00      	cmp	r3, #0
    be3e:	d1e8      	bne.n	be12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
    be40:	687b      	ldr	r3, [r7, #4]
    be42:	681b      	ldr	r3, [r3, #0]
    be44:	681b      	ldr	r3, [r3, #0]
    be46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
    be48:	697a      	ldr	r2, [r7, #20]
    be4a:	4b38      	ldr	r3, [pc, #224]	; (bf2c <HAL_DMA_Init+0x158>)
    be4c:	4013      	ands	r3, r2
    be4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
    be50:	687b      	ldr	r3, [r7, #4]
    be52:	685a      	ldr	r2, [r3, #4]
    be54:	687b      	ldr	r3, [r7, #4]
    be56:	689b      	ldr	r3, [r3, #8]
    be58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
    be5a:	687b      	ldr	r3, [r7, #4]
    be5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
    be5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
    be60:	687b      	ldr	r3, [r7, #4]
    be62:	691b      	ldr	r3, [r3, #16]
    be64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
    be66:	687b      	ldr	r3, [r7, #4]
    be68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
    be6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
    be6c:	687b      	ldr	r3, [r7, #4]
    be6e:	699b      	ldr	r3, [r3, #24]
    be70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
    be72:	687b      	ldr	r3, [r7, #4]
    be74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
    be76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
    be78:	687b      	ldr	r3, [r7, #4]
    be7a:	6a1b      	ldr	r3, [r3, #32]
    be7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
    be7e:	697a      	ldr	r2, [r7, #20]
    be80:	4313      	orrs	r3, r2
    be82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
    be84:	687b      	ldr	r3, [r7, #4]
    be86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    be88:	2b04      	cmp	r3, #4
    be8a:	d107      	bne.n	be9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
    be8c:	687b      	ldr	r3, [r7, #4]
    be8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be90:	687b      	ldr	r3, [r7, #4]
    be92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    be94:	4313      	orrs	r3, r2
    be96:	697a      	ldr	r2, [r7, #20]
    be98:	4313      	orrs	r3, r2
    be9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
    be9c:	687b      	ldr	r3, [r7, #4]
    be9e:	681b      	ldr	r3, [r3, #0]
    bea0:	697a      	ldr	r2, [r7, #20]
    bea2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
    bea4:	687b      	ldr	r3, [r7, #4]
    bea6:	681b      	ldr	r3, [r3, #0]
    bea8:	695b      	ldr	r3, [r3, #20]
    beaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
    beac:	697b      	ldr	r3, [r7, #20]
    beae:	f023 0307 	bic.w	r3, r3, #7
    beb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
    beb4:	687b      	ldr	r3, [r7, #4]
    beb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    beb8:	697a      	ldr	r2, [r7, #20]
    beba:	4313      	orrs	r3, r2
    bebc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
    bebe:	687b      	ldr	r3, [r7, #4]
    bec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bec2:	2b04      	cmp	r3, #4
    bec4:	d117      	bne.n	bef6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    beca:	697a      	ldr	r2, [r7, #20]
    becc:	4313      	orrs	r3, r2
    bece:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
    bed0:	687b      	ldr	r3, [r7, #4]
    bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bed4:	2b00      	cmp	r3, #0
    bed6:	d00e      	beq.n	bef6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
    bed8:	6878      	ldr	r0, [r7, #4]
    beda:	f000 f95d 	bl	c198 <DMA_CheckFifoParam>
    bede:	4603      	mov	r3, r0
    bee0:	2b00      	cmp	r3, #0
    bee2:	d008      	beq.n	bef6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
    bee4:	687b      	ldr	r3, [r7, #4]
    bee6:	2240      	movs	r2, #64	; 0x40
    bee8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
    beea:	687b      	ldr	r3, [r7, #4]
    beec:	2201      	movs	r2, #1
    beee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
    bef2:	2301      	movs	r3, #1
    bef4:	e016      	b.n	bf24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
    bef6:	687b      	ldr	r3, [r7, #4]
    bef8:	681b      	ldr	r3, [r3, #0]
    befa:	697a      	ldr	r2, [r7, #20]
    befc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
    befe:	6878      	ldr	r0, [r7, #4]
    bf00:	f000 f914 	bl	c12c <DMA_CalcBaseAndBitshift>
    bf04:	4603      	mov	r3, r0
    bf06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
    bf08:	687b      	ldr	r3, [r7, #4]
    bf0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    bf0c:	223f      	movs	r2, #63	; 0x3f
    bf0e:	409a      	lsls	r2, r3
    bf10:	68fb      	ldr	r3, [r7, #12]
    bf12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    bf14:	687b      	ldr	r3, [r7, #4]
    bf16:	2200      	movs	r2, #0
    bf18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
    bf1a:	687b      	ldr	r3, [r7, #4]
    bf1c:	2201      	movs	r2, #1
    bf1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
    bf22:	2300      	movs	r3, #0
}
    bf24:	4618      	mov	r0, r3
    bf26:	3718      	adds	r7, #24
    bf28:	46bd      	mov	sp, r7
    bf2a:	bd80      	pop	{r7, pc}
    bf2c:	e010803f 	.word	0xe010803f

0000bf30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
    bf30:	b580      	push	{r7, lr}
    bf32:	b086      	sub	sp, #24
    bf34:	af00      	add	r7, sp, #0
    bf36:	60f8      	str	r0, [r7, #12]
    bf38:	60b9      	str	r1, [r7, #8]
    bf3a:	607a      	str	r2, [r7, #4]
    bf3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
    bf3e:	2300      	movs	r3, #0
    bf40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
    bf42:	68fb      	ldr	r3, [r7, #12]
    bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    bf46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
    bf48:	68fb      	ldr	r3, [r7, #12]
    bf4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    bf4e:	2b01      	cmp	r3, #1
    bf50:	d101      	bne.n	bf56 <HAL_DMA_Start_IT+0x26>
    bf52:	2302      	movs	r3, #2
    bf54:	e048      	b.n	bfe8 <HAL_DMA_Start_IT+0xb8>
    bf56:	68fb      	ldr	r3, [r7, #12]
    bf58:	2201      	movs	r2, #1
    bf5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
    bf5e:	68fb      	ldr	r3, [r7, #12]
    bf60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
    bf64:	b2db      	uxtb	r3, r3
    bf66:	2b01      	cmp	r3, #1
    bf68:	d137      	bne.n	bfda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    bf6a:	68fb      	ldr	r3, [r7, #12]
    bf6c:	2202      	movs	r2, #2
    bf6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    bf72:	68fb      	ldr	r3, [r7, #12]
    bf74:	2200      	movs	r2, #0
    bf76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    bf78:	683b      	ldr	r3, [r7, #0]
    bf7a:	687a      	ldr	r2, [r7, #4]
    bf7c:	68b9      	ldr	r1, [r7, #8]
    bf7e:	68f8      	ldr	r0, [r7, #12]
    bf80:	f000 f8a6 	bl	c0d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    bf84:	68fb      	ldr	r3, [r7, #12]
    bf86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    bf88:	223f      	movs	r2, #63	; 0x3f
    bf8a:	409a      	lsls	r2, r3
    bf8c:	693b      	ldr	r3, [r7, #16]
    bf8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
    bf90:	68fb      	ldr	r3, [r7, #12]
    bf92:	681b      	ldr	r3, [r3, #0]
    bf94:	681a      	ldr	r2, [r3, #0]
    bf96:	68fb      	ldr	r3, [r7, #12]
    bf98:	681b      	ldr	r3, [r3, #0]
    bf9a:	f042 0216 	orr.w	r2, r2, #22
    bf9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
    bfa0:	68fb      	ldr	r3, [r7, #12]
    bfa2:	681b      	ldr	r3, [r3, #0]
    bfa4:	695a      	ldr	r2, [r3, #20]
    bfa6:	68fb      	ldr	r3, [r7, #12]
    bfa8:	681b      	ldr	r3, [r3, #0]
    bfaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    bfae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
    bfb0:	68fb      	ldr	r3, [r7, #12]
    bfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d007      	beq.n	bfc8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    bfb8:	68fb      	ldr	r3, [r7, #12]
    bfba:	681b      	ldr	r3, [r3, #0]
    bfbc:	681a      	ldr	r2, [r3, #0]
    bfbe:	68fb      	ldr	r3, [r7, #12]
    bfc0:	681b      	ldr	r3, [r3, #0]
    bfc2:	f042 0208 	orr.w	r2, r2, #8
    bfc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
    bfc8:	68fb      	ldr	r3, [r7, #12]
    bfca:	681b      	ldr	r3, [r3, #0]
    bfcc:	681a      	ldr	r2, [r3, #0]
    bfce:	68fb      	ldr	r3, [r7, #12]
    bfd0:	681b      	ldr	r3, [r3, #0]
    bfd2:	f042 0201 	orr.w	r2, r2, #1
    bfd6:	601a      	str	r2, [r3, #0]
    bfd8:	e005      	b.n	bfe6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
    bfda:	68fb      	ldr	r3, [r7, #12]
    bfdc:	2200      	movs	r2, #0
    bfde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
    bfe2:	2302      	movs	r3, #2
    bfe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
    bfe6:	7dfb      	ldrb	r3, [r7, #23]
}
    bfe8:	4618      	mov	r0, r3
    bfea:	3718      	adds	r7, #24
    bfec:	46bd      	mov	sp, r7
    bfee:	bd80      	pop	{r7, pc}

0000bff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
    bff0:	b580      	push	{r7, lr}
    bff2:	b084      	sub	sp, #16
    bff4:	af00      	add	r7, sp, #0
    bff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
    bff8:	687b      	ldr	r3, [r7, #4]
    bffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    bffc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
    bffe:	f7ff f823 	bl	b048 <HAL_GetTick>
    c002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
    c004:	687b      	ldr	r3, [r7, #4]
    c006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
    c00a:	b2db      	uxtb	r3, r3
    c00c:	2b02      	cmp	r3, #2
    c00e:	d008      	beq.n	c022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    c010:	687b      	ldr	r3, [r7, #4]
    c012:	2280      	movs	r2, #128	; 0x80
    c014:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    c016:	687b      	ldr	r3, [r7, #4]
    c018:	2200      	movs	r2, #0
    c01a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
    c01e:	2301      	movs	r3, #1
    c020:	e052      	b.n	c0c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
    c022:	687b      	ldr	r3, [r7, #4]
    c024:	681b      	ldr	r3, [r3, #0]
    c026:	681a      	ldr	r2, [r3, #0]
    c028:	687b      	ldr	r3, [r7, #4]
    c02a:	681b      	ldr	r3, [r3, #0]
    c02c:	f022 0216 	bic.w	r2, r2, #22
    c030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
    c032:	687b      	ldr	r3, [r7, #4]
    c034:	681b      	ldr	r3, [r3, #0]
    c036:	695a      	ldr	r2, [r3, #20]
    c038:	687b      	ldr	r3, [r7, #4]
    c03a:	681b      	ldr	r3, [r3, #0]
    c03c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    c040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
    c042:	687b      	ldr	r3, [r7, #4]
    c044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c046:	2b00      	cmp	r3, #0
    c048:	d103      	bne.n	c052 <HAL_DMA_Abort+0x62>
    c04a:	687b      	ldr	r3, [r7, #4]
    c04c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c04e:	2b00      	cmp	r3, #0
    c050:	d007      	beq.n	c062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
    c052:	687b      	ldr	r3, [r7, #4]
    c054:	681b      	ldr	r3, [r3, #0]
    c056:	681a      	ldr	r2, [r3, #0]
    c058:	687b      	ldr	r3, [r7, #4]
    c05a:	681b      	ldr	r3, [r3, #0]
    c05c:	f022 0208 	bic.w	r2, r2, #8
    c060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
    c062:	687b      	ldr	r3, [r7, #4]
    c064:	681b      	ldr	r3, [r3, #0]
    c066:	681a      	ldr	r2, [r3, #0]
    c068:	687b      	ldr	r3, [r7, #4]
    c06a:	681b      	ldr	r3, [r3, #0]
    c06c:	f022 0201 	bic.w	r2, r2, #1
    c070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
    c072:	e013      	b.n	c09c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    c074:	f7fe ffe8 	bl	b048 <HAL_GetTick>
    c078:	4602      	mov	r2, r0
    c07a:	68bb      	ldr	r3, [r7, #8]
    c07c:	1ad3      	subs	r3, r2, r3
    c07e:	2b05      	cmp	r3, #5
    c080:	d90c      	bls.n	c09c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
    c082:	687b      	ldr	r3, [r7, #4]
    c084:	2220      	movs	r2, #32
    c086:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
    c088:	687b      	ldr	r3, [r7, #4]
    c08a:	2200      	movs	r2, #0
    c08c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
    c090:	687b      	ldr	r3, [r7, #4]
    c092:	2203      	movs	r2, #3
    c094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
    c098:	2303      	movs	r3, #3
    c09a:	e015      	b.n	c0c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
    c09c:	687b      	ldr	r3, [r7, #4]
    c09e:	681b      	ldr	r3, [r3, #0]
    c0a0:	681b      	ldr	r3, [r3, #0]
    c0a2:	f003 0301 	and.w	r3, r3, #1
    c0a6:	2b00      	cmp	r3, #0
    c0a8:	d1e4      	bne.n	c074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    c0aa:	687b      	ldr	r3, [r7, #4]
    c0ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c0ae:	223f      	movs	r2, #63	; 0x3f
    c0b0:	409a      	lsls	r2, r3
    c0b2:	68fb      	ldr	r3, [r7, #12]
    c0b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    c0b6:	687b      	ldr	r3, [r7, #4]
    c0b8:	2200      	movs	r2, #0
    c0ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
    c0be:	687b      	ldr	r3, [r7, #4]
    c0c0:	2201      	movs	r2, #1
    c0c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
    c0c6:	2300      	movs	r3, #0
}
    c0c8:	4618      	mov	r0, r3
    c0ca:	3710      	adds	r7, #16
    c0cc:	46bd      	mov	sp, r7
    c0ce:	bd80      	pop	{r7, pc}

0000c0d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
    c0d0:	b480      	push	{r7}
    c0d2:	b085      	sub	sp, #20
    c0d4:	af00      	add	r7, sp, #0
    c0d6:	60f8      	str	r0, [r7, #12]
    c0d8:	60b9      	str	r1, [r7, #8]
    c0da:	607a      	str	r2, [r7, #4]
    c0dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
    c0de:	68fb      	ldr	r3, [r7, #12]
    c0e0:	681b      	ldr	r3, [r3, #0]
    c0e2:	681a      	ldr	r2, [r3, #0]
    c0e4:	68fb      	ldr	r3, [r7, #12]
    c0e6:	681b      	ldr	r3, [r3, #0]
    c0e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    c0ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
    c0ee:	68fb      	ldr	r3, [r7, #12]
    c0f0:	681b      	ldr	r3, [r3, #0]
    c0f2:	683a      	ldr	r2, [r7, #0]
    c0f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
    c0f6:	68fb      	ldr	r3, [r7, #12]
    c0f8:	689b      	ldr	r3, [r3, #8]
    c0fa:	2b40      	cmp	r3, #64	; 0x40
    c0fc:	d108      	bne.n	c110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
    c0fe:	68fb      	ldr	r3, [r7, #12]
    c100:	681b      	ldr	r3, [r3, #0]
    c102:	687a      	ldr	r2, [r7, #4]
    c104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
    c106:	68fb      	ldr	r3, [r7, #12]
    c108:	681b      	ldr	r3, [r3, #0]
    c10a:	68ba      	ldr	r2, [r7, #8]
    c10c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
    c10e:	e007      	b.n	c120 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
    c110:	68fb      	ldr	r3, [r7, #12]
    c112:	681b      	ldr	r3, [r3, #0]
    c114:	68ba      	ldr	r2, [r7, #8]
    c116:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
    c118:	68fb      	ldr	r3, [r7, #12]
    c11a:	681b      	ldr	r3, [r3, #0]
    c11c:	687a      	ldr	r2, [r7, #4]
    c11e:	60da      	str	r2, [r3, #12]
}
    c120:	bf00      	nop
    c122:	3714      	adds	r7, #20
    c124:	46bd      	mov	sp, r7
    c126:	f85d 7b04 	ldr.w	r7, [sp], #4
    c12a:	4770      	bx	lr

0000c12c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
    c12c:	b480      	push	{r7}
    c12e:	b085      	sub	sp, #20
    c130:	af00      	add	r7, sp, #0
    c132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
    c134:	687b      	ldr	r3, [r7, #4]
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	b2db      	uxtb	r3, r3
    c13a:	3b10      	subs	r3, #16
    c13c:	4a13      	ldr	r2, [pc, #76]	; (c18c <DMA_CalcBaseAndBitshift+0x60>)
    c13e:	fba2 2303 	umull	r2, r3, r2, r3
    c142:	091b      	lsrs	r3, r3, #4
    c144:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
    c146:	4a12      	ldr	r2, [pc, #72]	; (c190 <DMA_CalcBaseAndBitshift+0x64>)
    c148:	68fb      	ldr	r3, [r7, #12]
    c14a:	4413      	add	r3, r2
    c14c:	781b      	ldrb	r3, [r3, #0]
    c14e:	461a      	mov	r2, r3
    c150:	687b      	ldr	r3, [r7, #4]
    c152:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
    c154:	68fb      	ldr	r3, [r7, #12]
    c156:	2b03      	cmp	r3, #3
    c158:	d908      	bls.n	c16c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
    c15a:	687b      	ldr	r3, [r7, #4]
    c15c:	681b      	ldr	r3, [r3, #0]
    c15e:	461a      	mov	r2, r3
    c160:	4b0c      	ldr	r3, [pc, #48]	; (c194 <DMA_CalcBaseAndBitshift+0x68>)
    c162:	4013      	ands	r3, r2
    c164:	1d1a      	adds	r2, r3, #4
    c166:	687b      	ldr	r3, [r7, #4]
    c168:	659a      	str	r2, [r3, #88]	; 0x58
    c16a:	e006      	b.n	c17a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
    c16c:	687b      	ldr	r3, [r7, #4]
    c16e:	681b      	ldr	r3, [r3, #0]
    c170:	461a      	mov	r2, r3
    c172:	4b08      	ldr	r3, [pc, #32]	; (c194 <DMA_CalcBaseAndBitshift+0x68>)
    c174:	4013      	ands	r3, r2
    c176:	687a      	ldr	r2, [r7, #4]
    c178:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
    c17a:	687b      	ldr	r3, [r7, #4]
    c17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
    c17e:	4618      	mov	r0, r3
    c180:	3714      	adds	r7, #20
    c182:	46bd      	mov	sp, r7
    c184:	f85d 7b04 	ldr.w	r7, [sp], #4
    c188:	4770      	bx	lr
    c18a:	bf00      	nop
    c18c:	aaaaaaab 	.word	0xaaaaaaab
    c190:	000195a0 	.word	0x000195a0
    c194:	fffffc00 	.word	0xfffffc00

0000c198 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
    c198:	b480      	push	{r7}
    c19a:	b085      	sub	sp, #20
    c19c:	af00      	add	r7, sp, #0
    c19e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
    c1a0:	2300      	movs	r3, #0
    c1a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
    c1a4:	687b      	ldr	r3, [r7, #4]
    c1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c1a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	699b      	ldr	r3, [r3, #24]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	d11f      	bne.n	c1f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
    c1b2:	68bb      	ldr	r3, [r7, #8]
    c1b4:	2b03      	cmp	r3, #3
    c1b6:	d855      	bhi.n	c264 <DMA_CheckFifoParam+0xcc>
    c1b8:	a201      	add	r2, pc, #4	; (adr r2, c1c0 <DMA_CheckFifoParam+0x28>)
    c1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c1be:	bf00      	nop
    c1c0:	0000c1d1 	.word	0x0000c1d1
    c1c4:	0000c1e3 	.word	0x0000c1e3
    c1c8:	0000c1d1 	.word	0x0000c1d1
    c1cc:	0000c265 	.word	0x0000c265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
    c1d0:	687b      	ldr	r3, [r7, #4]
    c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c1d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d045      	beq.n	c268 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
    c1dc:	2301      	movs	r3, #1
    c1de:	73fb      	strb	r3, [r7, #15]
      }
      break;
    c1e0:	e042      	b.n	c268 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
    c1e2:	687b      	ldr	r3, [r7, #4]
    c1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c1e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
    c1ea:	d13f      	bne.n	c26c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
    c1ec:	2301      	movs	r3, #1
    c1ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
    c1f0:	e03c      	b.n	c26c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
    c1f2:	687b      	ldr	r3, [r7, #4]
    c1f4:	699b      	ldr	r3, [r3, #24]
    c1f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c1fa:	d121      	bne.n	c240 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
    c1fc:	68bb      	ldr	r3, [r7, #8]
    c1fe:	2b03      	cmp	r3, #3
    c200:	d836      	bhi.n	c270 <DMA_CheckFifoParam+0xd8>
    c202:	a201      	add	r2, pc, #4	; (adr r2, c208 <DMA_CheckFifoParam+0x70>)
    c204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c208:	0000c219 	.word	0x0000c219
    c20c:	0000c21f 	.word	0x0000c21f
    c210:	0000c219 	.word	0x0000c219
    c214:	0000c231 	.word	0x0000c231
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
    c218:	2301      	movs	r3, #1
    c21a:	73fb      	strb	r3, [r7, #15]
      break;
    c21c:	e02f      	b.n	c27e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
    c21e:	687b      	ldr	r3, [r7, #4]
    c220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    c226:	2b00      	cmp	r3, #0
    c228:	d024      	beq.n	c274 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
    c22a:	2301      	movs	r3, #1
    c22c:	73fb      	strb	r3, [r7, #15]
      }
      break;
    c22e:	e021      	b.n	c274 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
    c230:	687b      	ldr	r3, [r7, #4]
    c232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c234:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
    c238:	d11e      	bne.n	c278 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
    c23a:	2301      	movs	r3, #1
    c23c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
    c23e:	e01b      	b.n	c278 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
    c240:	68bb      	ldr	r3, [r7, #8]
    c242:	2b02      	cmp	r3, #2
    c244:	d902      	bls.n	c24c <DMA_CheckFifoParam+0xb4>
    c246:	2b03      	cmp	r3, #3
    c248:	d003      	beq.n	c252 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
    c24a:	e018      	b.n	c27e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
    c24c:	2301      	movs	r3, #1
    c24e:	73fb      	strb	r3, [r7, #15]
      break;
    c250:	e015      	b.n	c27e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
    c252:	687b      	ldr	r3, [r7, #4]
    c254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    c25a:	2b00      	cmp	r3, #0
    c25c:	d00e      	beq.n	c27c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
    c25e:	2301      	movs	r3, #1
    c260:	73fb      	strb	r3, [r7, #15]
      break;
    c262:	e00b      	b.n	c27c <DMA_CheckFifoParam+0xe4>
      break;
    c264:	bf00      	nop
    c266:	e00a      	b.n	c27e <DMA_CheckFifoParam+0xe6>
      break;
    c268:	bf00      	nop
    c26a:	e008      	b.n	c27e <DMA_CheckFifoParam+0xe6>
      break;
    c26c:	bf00      	nop
    c26e:	e006      	b.n	c27e <DMA_CheckFifoParam+0xe6>
      break;
    c270:	bf00      	nop
    c272:	e004      	b.n	c27e <DMA_CheckFifoParam+0xe6>
      break;
    c274:	bf00      	nop
    c276:	e002      	b.n	c27e <DMA_CheckFifoParam+0xe6>
      break;   
    c278:	bf00      	nop
    c27a:	e000      	b.n	c27e <DMA_CheckFifoParam+0xe6>
      break;
    c27c:	bf00      	nop
    }
  } 
  
  return status; 
    c27e:	7bfb      	ldrb	r3, [r7, #15]
}
    c280:	4618      	mov	r0, r3
    c282:	3714      	adds	r7, #20
    c284:	46bd      	mov	sp, r7
    c286:	f85d 7b04 	ldr.w	r7, [sp], #4
    c28a:	4770      	bx	lr

0000c28c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
    c28c:	b480      	push	{r7}
    c28e:	b089      	sub	sp, #36	; 0x24
    c290:	af00      	add	r7, sp, #0
    c292:	6078      	str	r0, [r7, #4]
    c294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
    c296:	2300      	movs	r3, #0
    c298:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
    c29a:	2300      	movs	r3, #0
    c29c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
    c29e:	2300      	movs	r3, #0
    c2a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
    c2a2:	2300      	movs	r3, #0
    c2a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
    c2a6:	2300      	movs	r3, #0
    c2a8:	61fb      	str	r3, [r7, #28]
    c2aa:	e175      	b.n	c598 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    c2ac:	2201      	movs	r2, #1
    c2ae:	69fb      	ldr	r3, [r7, #28]
    c2b0:	fa02 f303 	lsl.w	r3, r2, r3
    c2b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
    c2b6:	683b      	ldr	r3, [r7, #0]
    c2b8:	681b      	ldr	r3, [r3, #0]
    c2ba:	697a      	ldr	r2, [r7, #20]
    c2bc:	4013      	ands	r3, r2
    c2be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
    c2c0:	693a      	ldr	r2, [r7, #16]
    c2c2:	697b      	ldr	r3, [r7, #20]
    c2c4:	429a      	cmp	r2, r3
    c2c6:	f040 8164 	bne.w	c592 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    c2ca:	683b      	ldr	r3, [r7, #0]
    c2cc:	685b      	ldr	r3, [r3, #4]
    c2ce:	2b01      	cmp	r3, #1
    c2d0:	d00b      	beq.n	c2ea <HAL_GPIO_Init+0x5e>
    c2d2:	683b      	ldr	r3, [r7, #0]
    c2d4:	685b      	ldr	r3, [r3, #4]
    c2d6:	2b02      	cmp	r3, #2
    c2d8:	d007      	beq.n	c2ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    c2da:	683b      	ldr	r3, [r7, #0]
    c2dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    c2de:	2b11      	cmp	r3, #17
    c2e0:	d003      	beq.n	c2ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    c2e2:	683b      	ldr	r3, [r7, #0]
    c2e4:	685b      	ldr	r3, [r3, #4]
    c2e6:	2b12      	cmp	r3, #18
    c2e8:	d130      	bne.n	c34c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
    c2ea:	687b      	ldr	r3, [r7, #4]
    c2ec:	689b      	ldr	r3, [r3, #8]
    c2ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
    c2f0:	69fb      	ldr	r3, [r7, #28]
    c2f2:	005b      	lsls	r3, r3, #1
    c2f4:	2203      	movs	r2, #3
    c2f6:	fa02 f303 	lsl.w	r3, r2, r3
    c2fa:	43db      	mvns	r3, r3
    c2fc:	69ba      	ldr	r2, [r7, #24]
    c2fe:	4013      	ands	r3, r2
    c300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
    c302:	683b      	ldr	r3, [r7, #0]
    c304:	68da      	ldr	r2, [r3, #12]
    c306:	69fb      	ldr	r3, [r7, #28]
    c308:	005b      	lsls	r3, r3, #1
    c30a:	fa02 f303 	lsl.w	r3, r2, r3
    c30e:	69ba      	ldr	r2, [r7, #24]
    c310:	4313      	orrs	r3, r2
    c312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
    c314:	687b      	ldr	r3, [r7, #4]
    c316:	69ba      	ldr	r2, [r7, #24]
    c318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
    c31a:	687b      	ldr	r3, [r7, #4]
    c31c:	685b      	ldr	r3, [r3, #4]
    c31e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
    c320:	2201      	movs	r2, #1
    c322:	69fb      	ldr	r3, [r7, #28]
    c324:	fa02 f303 	lsl.w	r3, r2, r3
    c328:	43db      	mvns	r3, r3
    c32a:	69ba      	ldr	r2, [r7, #24]
    c32c:	4013      	ands	r3, r2
    c32e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
    c330:	683b      	ldr	r3, [r7, #0]
    c332:	685b      	ldr	r3, [r3, #4]
    c334:	091b      	lsrs	r3, r3, #4
    c336:	f003 0201 	and.w	r2, r3, #1
    c33a:	69fb      	ldr	r3, [r7, #28]
    c33c:	fa02 f303 	lsl.w	r3, r2, r3
    c340:	69ba      	ldr	r2, [r7, #24]
    c342:	4313      	orrs	r3, r2
    c344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
    c346:	687b      	ldr	r3, [r7, #4]
    c348:	69ba      	ldr	r2, [r7, #24]
    c34a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
    c34c:	687b      	ldr	r3, [r7, #4]
    c34e:	68db      	ldr	r3, [r3, #12]
    c350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
    c352:	69fb      	ldr	r3, [r7, #28]
    c354:	005b      	lsls	r3, r3, #1
    c356:	2203      	movs	r2, #3
    c358:	fa02 f303 	lsl.w	r3, r2, r3
    c35c:	43db      	mvns	r3, r3
    c35e:	69ba      	ldr	r2, [r7, #24]
    c360:	4013      	ands	r3, r2
    c362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
    c364:	683b      	ldr	r3, [r7, #0]
    c366:	689a      	ldr	r2, [r3, #8]
    c368:	69fb      	ldr	r3, [r7, #28]
    c36a:	005b      	lsls	r3, r3, #1
    c36c:	fa02 f303 	lsl.w	r3, r2, r3
    c370:	69ba      	ldr	r2, [r7, #24]
    c372:	4313      	orrs	r3, r2
    c374:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
    c376:	687b      	ldr	r3, [r7, #4]
    c378:	69ba      	ldr	r2, [r7, #24]
    c37a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    c37c:	683b      	ldr	r3, [r7, #0]
    c37e:	685b      	ldr	r3, [r3, #4]
    c380:	2b02      	cmp	r3, #2
    c382:	d003      	beq.n	c38c <HAL_GPIO_Init+0x100>
    c384:	683b      	ldr	r3, [r7, #0]
    c386:	685b      	ldr	r3, [r3, #4]
    c388:	2b12      	cmp	r3, #18
    c38a:	d123      	bne.n	c3d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
    c38c:	69fb      	ldr	r3, [r7, #28]
    c38e:	08da      	lsrs	r2, r3, #3
    c390:	687b      	ldr	r3, [r7, #4]
    c392:	3208      	adds	r2, #8
    c394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
    c39a:	69fb      	ldr	r3, [r7, #28]
    c39c:	f003 0307 	and.w	r3, r3, #7
    c3a0:	009b      	lsls	r3, r3, #2
    c3a2:	220f      	movs	r2, #15
    c3a4:	fa02 f303 	lsl.w	r3, r2, r3
    c3a8:	43db      	mvns	r3, r3
    c3aa:	69ba      	ldr	r2, [r7, #24]
    c3ac:	4013      	ands	r3, r2
    c3ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
    c3b0:	683b      	ldr	r3, [r7, #0]
    c3b2:	691a      	ldr	r2, [r3, #16]
    c3b4:	69fb      	ldr	r3, [r7, #28]
    c3b6:	f003 0307 	and.w	r3, r3, #7
    c3ba:	009b      	lsls	r3, r3, #2
    c3bc:	fa02 f303 	lsl.w	r3, r2, r3
    c3c0:	69ba      	ldr	r2, [r7, #24]
    c3c2:	4313      	orrs	r3, r2
    c3c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
    c3c6:	69fb      	ldr	r3, [r7, #28]
    c3c8:	08da      	lsrs	r2, r3, #3
    c3ca:	687b      	ldr	r3, [r7, #4]
    c3cc:	3208      	adds	r2, #8
    c3ce:	69b9      	ldr	r1, [r7, #24]
    c3d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
    c3d4:	687b      	ldr	r3, [r7, #4]
    c3d6:	681b      	ldr	r3, [r3, #0]
    c3d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
    c3da:	69fb      	ldr	r3, [r7, #28]
    c3dc:	005b      	lsls	r3, r3, #1
    c3de:	2203      	movs	r2, #3
    c3e0:	fa02 f303 	lsl.w	r3, r2, r3
    c3e4:	43db      	mvns	r3, r3
    c3e6:	69ba      	ldr	r2, [r7, #24]
    c3e8:	4013      	ands	r3, r2
    c3ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
    c3ec:	683b      	ldr	r3, [r7, #0]
    c3ee:	685b      	ldr	r3, [r3, #4]
    c3f0:	f003 0203 	and.w	r2, r3, #3
    c3f4:	69fb      	ldr	r3, [r7, #28]
    c3f6:	005b      	lsls	r3, r3, #1
    c3f8:	fa02 f303 	lsl.w	r3, r2, r3
    c3fc:	69ba      	ldr	r2, [r7, #24]
    c3fe:	4313      	orrs	r3, r2
    c400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
    c402:	687b      	ldr	r3, [r7, #4]
    c404:	69ba      	ldr	r2, [r7, #24]
    c406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
    c408:	683b      	ldr	r3, [r7, #0]
    c40a:	685b      	ldr	r3, [r3, #4]
    c40c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    c410:	2b00      	cmp	r3, #0
    c412:	f000 80be 	beq.w	c592 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
    c416:	4b65      	ldr	r3, [pc, #404]	; (c5ac <HAL_GPIO_Init+0x320>)
    c418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c41a:	4a64      	ldr	r2, [pc, #400]	; (c5ac <HAL_GPIO_Init+0x320>)
    c41c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    c420:	6453      	str	r3, [r2, #68]	; 0x44
    c422:	4b62      	ldr	r3, [pc, #392]	; (c5ac <HAL_GPIO_Init+0x320>)
    c424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    c42a:	60fb      	str	r3, [r7, #12]
    c42c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
    c42e:	4a60      	ldr	r2, [pc, #384]	; (c5b0 <HAL_GPIO_Init+0x324>)
    c430:	69fb      	ldr	r3, [r7, #28]
    c432:	089b      	lsrs	r3, r3, #2
    c434:	3302      	adds	r3, #2
    c436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c43a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
    c43c:	69fb      	ldr	r3, [r7, #28]
    c43e:	f003 0303 	and.w	r3, r3, #3
    c442:	009b      	lsls	r3, r3, #2
    c444:	220f      	movs	r2, #15
    c446:	fa02 f303 	lsl.w	r3, r2, r3
    c44a:	43db      	mvns	r3, r3
    c44c:	69ba      	ldr	r2, [r7, #24]
    c44e:	4013      	ands	r3, r2
    c450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
    c452:	687b      	ldr	r3, [r7, #4]
    c454:	4a57      	ldr	r2, [pc, #348]	; (c5b4 <HAL_GPIO_Init+0x328>)
    c456:	4293      	cmp	r3, r2
    c458:	d037      	beq.n	c4ca <HAL_GPIO_Init+0x23e>
    c45a:	687b      	ldr	r3, [r7, #4]
    c45c:	4a56      	ldr	r2, [pc, #344]	; (c5b8 <HAL_GPIO_Init+0x32c>)
    c45e:	4293      	cmp	r3, r2
    c460:	d031      	beq.n	c4c6 <HAL_GPIO_Init+0x23a>
    c462:	687b      	ldr	r3, [r7, #4]
    c464:	4a55      	ldr	r2, [pc, #340]	; (c5bc <HAL_GPIO_Init+0x330>)
    c466:	4293      	cmp	r3, r2
    c468:	d02b      	beq.n	c4c2 <HAL_GPIO_Init+0x236>
    c46a:	687b      	ldr	r3, [r7, #4]
    c46c:	4a54      	ldr	r2, [pc, #336]	; (c5c0 <HAL_GPIO_Init+0x334>)
    c46e:	4293      	cmp	r3, r2
    c470:	d025      	beq.n	c4be <HAL_GPIO_Init+0x232>
    c472:	687b      	ldr	r3, [r7, #4]
    c474:	4a53      	ldr	r2, [pc, #332]	; (c5c4 <HAL_GPIO_Init+0x338>)
    c476:	4293      	cmp	r3, r2
    c478:	d01f      	beq.n	c4ba <HAL_GPIO_Init+0x22e>
    c47a:	687b      	ldr	r3, [r7, #4]
    c47c:	4a52      	ldr	r2, [pc, #328]	; (c5c8 <HAL_GPIO_Init+0x33c>)
    c47e:	4293      	cmp	r3, r2
    c480:	d019      	beq.n	c4b6 <HAL_GPIO_Init+0x22a>
    c482:	687b      	ldr	r3, [r7, #4]
    c484:	4a51      	ldr	r2, [pc, #324]	; (c5cc <HAL_GPIO_Init+0x340>)
    c486:	4293      	cmp	r3, r2
    c488:	d013      	beq.n	c4b2 <HAL_GPIO_Init+0x226>
    c48a:	687b      	ldr	r3, [r7, #4]
    c48c:	4a50      	ldr	r2, [pc, #320]	; (c5d0 <HAL_GPIO_Init+0x344>)
    c48e:	4293      	cmp	r3, r2
    c490:	d00d      	beq.n	c4ae <HAL_GPIO_Init+0x222>
    c492:	687b      	ldr	r3, [r7, #4]
    c494:	4a4f      	ldr	r2, [pc, #316]	; (c5d4 <HAL_GPIO_Init+0x348>)
    c496:	4293      	cmp	r3, r2
    c498:	d007      	beq.n	c4aa <HAL_GPIO_Init+0x21e>
    c49a:	687b      	ldr	r3, [r7, #4]
    c49c:	4a4e      	ldr	r2, [pc, #312]	; (c5d8 <HAL_GPIO_Init+0x34c>)
    c49e:	4293      	cmp	r3, r2
    c4a0:	d101      	bne.n	c4a6 <HAL_GPIO_Init+0x21a>
    c4a2:	2309      	movs	r3, #9
    c4a4:	e012      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4a6:	230a      	movs	r3, #10
    c4a8:	e010      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4aa:	2308      	movs	r3, #8
    c4ac:	e00e      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4ae:	2307      	movs	r3, #7
    c4b0:	e00c      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4b2:	2306      	movs	r3, #6
    c4b4:	e00a      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4b6:	2305      	movs	r3, #5
    c4b8:	e008      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4ba:	2304      	movs	r3, #4
    c4bc:	e006      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4be:	2303      	movs	r3, #3
    c4c0:	e004      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4c2:	2302      	movs	r3, #2
    c4c4:	e002      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4c6:	2301      	movs	r3, #1
    c4c8:	e000      	b.n	c4cc <HAL_GPIO_Init+0x240>
    c4ca:	2300      	movs	r3, #0
    c4cc:	69fa      	ldr	r2, [r7, #28]
    c4ce:	f002 0203 	and.w	r2, r2, #3
    c4d2:	0092      	lsls	r2, r2, #2
    c4d4:	4093      	lsls	r3, r2
    c4d6:	69ba      	ldr	r2, [r7, #24]
    c4d8:	4313      	orrs	r3, r2
    c4da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
    c4dc:	4934      	ldr	r1, [pc, #208]	; (c5b0 <HAL_GPIO_Init+0x324>)
    c4de:	69fb      	ldr	r3, [r7, #28]
    c4e0:	089b      	lsrs	r3, r3, #2
    c4e2:	3302      	adds	r3, #2
    c4e4:	69ba      	ldr	r2, [r7, #24]
    c4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
    c4ea:	4b3c      	ldr	r3, [pc, #240]	; (c5dc <HAL_GPIO_Init+0x350>)
    c4ec:	681b      	ldr	r3, [r3, #0]
    c4ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    c4f0:	693b      	ldr	r3, [r7, #16]
    c4f2:	43db      	mvns	r3, r3
    c4f4:	69ba      	ldr	r2, [r7, #24]
    c4f6:	4013      	ands	r3, r2
    c4f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
    c4fa:	683b      	ldr	r3, [r7, #0]
    c4fc:	685b      	ldr	r3, [r3, #4]
    c4fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    c502:	2b00      	cmp	r3, #0
    c504:	d003      	beq.n	c50e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
    c506:	69ba      	ldr	r2, [r7, #24]
    c508:	693b      	ldr	r3, [r7, #16]
    c50a:	4313      	orrs	r3, r2
    c50c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
    c50e:	4a33      	ldr	r2, [pc, #204]	; (c5dc <HAL_GPIO_Init+0x350>)
    c510:	69bb      	ldr	r3, [r7, #24]
    c512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
    c514:	4b31      	ldr	r3, [pc, #196]	; (c5dc <HAL_GPIO_Init+0x350>)
    c516:	685b      	ldr	r3, [r3, #4]
    c518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    c51a:	693b      	ldr	r3, [r7, #16]
    c51c:	43db      	mvns	r3, r3
    c51e:	69ba      	ldr	r2, [r7, #24]
    c520:	4013      	ands	r3, r2
    c522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
    c524:	683b      	ldr	r3, [r7, #0]
    c526:	685b      	ldr	r3, [r3, #4]
    c528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    c52c:	2b00      	cmp	r3, #0
    c52e:	d003      	beq.n	c538 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
    c530:	69ba      	ldr	r2, [r7, #24]
    c532:	693b      	ldr	r3, [r7, #16]
    c534:	4313      	orrs	r3, r2
    c536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
    c538:	4a28      	ldr	r2, [pc, #160]	; (c5dc <HAL_GPIO_Init+0x350>)
    c53a:	69bb      	ldr	r3, [r7, #24]
    c53c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
    c53e:	4b27      	ldr	r3, [pc, #156]	; (c5dc <HAL_GPIO_Init+0x350>)
    c540:	689b      	ldr	r3, [r3, #8]
    c542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    c544:	693b      	ldr	r3, [r7, #16]
    c546:	43db      	mvns	r3, r3
    c548:	69ba      	ldr	r2, [r7, #24]
    c54a:	4013      	ands	r3, r2
    c54c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
    c54e:	683b      	ldr	r3, [r7, #0]
    c550:	685b      	ldr	r3, [r3, #4]
    c552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    c556:	2b00      	cmp	r3, #0
    c558:	d003      	beq.n	c562 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
    c55a:	69ba      	ldr	r2, [r7, #24]
    c55c:	693b      	ldr	r3, [r7, #16]
    c55e:	4313      	orrs	r3, r2
    c560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
    c562:	4a1e      	ldr	r2, [pc, #120]	; (c5dc <HAL_GPIO_Init+0x350>)
    c564:	69bb      	ldr	r3, [r7, #24]
    c566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
    c568:	4b1c      	ldr	r3, [pc, #112]	; (c5dc <HAL_GPIO_Init+0x350>)
    c56a:	68db      	ldr	r3, [r3, #12]
    c56c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    c56e:	693b      	ldr	r3, [r7, #16]
    c570:	43db      	mvns	r3, r3
    c572:	69ba      	ldr	r2, [r7, #24]
    c574:	4013      	ands	r3, r2
    c576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
    c578:	683b      	ldr	r3, [r7, #0]
    c57a:	685b      	ldr	r3, [r3, #4]
    c57c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    c580:	2b00      	cmp	r3, #0
    c582:	d003      	beq.n	c58c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
    c584:	69ba      	ldr	r2, [r7, #24]
    c586:	693b      	ldr	r3, [r7, #16]
    c588:	4313      	orrs	r3, r2
    c58a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
    c58c:	4a13      	ldr	r2, [pc, #76]	; (c5dc <HAL_GPIO_Init+0x350>)
    c58e:	69bb      	ldr	r3, [r7, #24]
    c590:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
    c592:	69fb      	ldr	r3, [r7, #28]
    c594:	3301      	adds	r3, #1
    c596:	61fb      	str	r3, [r7, #28]
    c598:	69fb      	ldr	r3, [r7, #28]
    c59a:	2b0f      	cmp	r3, #15
    c59c:	f67f ae86 	bls.w	c2ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
    c5a0:	bf00      	nop
    c5a2:	3724      	adds	r7, #36	; 0x24
    c5a4:	46bd      	mov	sp, r7
    c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5aa:	4770      	bx	lr
    c5ac:	40023800 	.word	0x40023800
    c5b0:	40013800 	.word	0x40013800
    c5b4:	40020000 	.word	0x40020000
    c5b8:	40020400 	.word	0x40020400
    c5bc:	40020800 	.word	0x40020800
    c5c0:	40020c00 	.word	0x40020c00
    c5c4:	40021000 	.word	0x40021000
    c5c8:	40021400 	.word	0x40021400
    c5cc:	40021800 	.word	0x40021800
    c5d0:	40021c00 	.word	0x40021c00
    c5d4:	40022000 	.word	0x40022000
    c5d8:	40022400 	.word	0x40022400
    c5dc:	40013c00 	.word	0x40013c00

0000c5e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
    c5e0:	b480      	push	{r7}
    c5e2:	b083      	sub	sp, #12
    c5e4:	af00      	add	r7, sp, #0
    c5e6:	6078      	str	r0, [r7, #4]
    c5e8:	460b      	mov	r3, r1
    c5ea:	807b      	strh	r3, [r7, #2]
    c5ec:	4613      	mov	r3, r2
    c5ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
    c5f0:	787b      	ldrb	r3, [r7, #1]
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	d003      	beq.n	c5fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    c5f6:	887a      	ldrh	r2, [r7, #2]
    c5f8:	687b      	ldr	r3, [r7, #4]
    c5fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
    c5fc:	e003      	b.n	c606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
    c5fe:	887b      	ldrh	r3, [r7, #2]
    c600:	041a      	lsls	r2, r3, #16
    c602:	687b      	ldr	r3, [r7, #4]
    c604:	619a      	str	r2, [r3, #24]
}
    c606:	bf00      	nop
    c608:	370c      	adds	r7, #12
    c60a:	46bd      	mov	sp, r7
    c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c610:	4770      	bx	lr
	...

0000c614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
    c614:	b580      	push	{r7, lr}
    c616:	b082      	sub	sp, #8
    c618:	af00      	add	r7, sp, #0
    c61a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
    c61c:	687b      	ldr	r3, [r7, #4]
    c61e:	2b00      	cmp	r3, #0
    c620:	d101      	bne.n	c626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
    c622:	2301      	movs	r3, #1
    c624:	e07f      	b.n	c726 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
    c626:	687b      	ldr	r3, [r7, #4]
    c628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    c62c:	b2db      	uxtb	r3, r3
    c62e:	2b00      	cmp	r3, #0
    c630:	d106      	bne.n	c640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	2200      	movs	r2, #0
    c636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
    c63a:	6878      	ldr	r0, [r7, #4]
    c63c:	f7fc f96e 	bl	891c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
    c640:	687b      	ldr	r3, [r7, #4]
    c642:	2224      	movs	r2, #36	; 0x24
    c644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
    c648:	687b      	ldr	r3, [r7, #4]
    c64a:	681b      	ldr	r3, [r3, #0]
    c64c:	681a      	ldr	r2, [r3, #0]
    c64e:	687b      	ldr	r3, [r7, #4]
    c650:	681b      	ldr	r3, [r3, #0]
    c652:	f022 0201 	bic.w	r2, r2, #1
    c656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
    c658:	687b      	ldr	r3, [r7, #4]
    c65a:	685a      	ldr	r2, [r3, #4]
    c65c:	687b      	ldr	r3, [r7, #4]
    c65e:	681b      	ldr	r3, [r3, #0]
    c660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    c664:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
    c666:	687b      	ldr	r3, [r7, #4]
    c668:	681b      	ldr	r3, [r3, #0]
    c66a:	689a      	ldr	r2, [r3, #8]
    c66c:	687b      	ldr	r3, [r7, #4]
    c66e:	681b      	ldr	r3, [r3, #0]
    c670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    c674:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
    c676:	687b      	ldr	r3, [r7, #4]
    c678:	68db      	ldr	r3, [r3, #12]
    c67a:	2b01      	cmp	r3, #1
    c67c:	d107      	bne.n	c68e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
    c67e:	687b      	ldr	r3, [r7, #4]
    c680:	689a      	ldr	r2, [r3, #8]
    c682:	687b      	ldr	r3, [r7, #4]
    c684:	681b      	ldr	r3, [r3, #0]
    c686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    c68a:	609a      	str	r2, [r3, #8]
    c68c:	e006      	b.n	c69c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
    c68e:	687b      	ldr	r3, [r7, #4]
    c690:	689a      	ldr	r2, [r3, #8]
    c692:	687b      	ldr	r3, [r7, #4]
    c694:	681b      	ldr	r3, [r3, #0]
    c696:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
    c69a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
    c69c:	687b      	ldr	r3, [r7, #4]
    c69e:	68db      	ldr	r3, [r3, #12]
    c6a0:	2b02      	cmp	r3, #2
    c6a2:	d104      	bne.n	c6ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
    c6a4:	687b      	ldr	r3, [r7, #4]
    c6a6:	681b      	ldr	r3, [r3, #0]
    c6a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c6ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
    c6ae:	687b      	ldr	r3, [r7, #4]
    c6b0:	681b      	ldr	r3, [r3, #0]
    c6b2:	6859      	ldr	r1, [r3, #4]
    c6b4:	687b      	ldr	r3, [r7, #4]
    c6b6:	681a      	ldr	r2, [r3, #0]
    c6b8:	4b1d      	ldr	r3, [pc, #116]	; (c730 <HAL_I2C_Init+0x11c>)
    c6ba:	430b      	orrs	r3, r1
    c6bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
    c6be:	687b      	ldr	r3, [r7, #4]
    c6c0:	681b      	ldr	r3, [r3, #0]
    c6c2:	68da      	ldr	r2, [r3, #12]
    c6c4:	687b      	ldr	r3, [r7, #4]
    c6c6:	681b      	ldr	r3, [r3, #0]
    c6c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    c6cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
    c6ce:	687b      	ldr	r3, [r7, #4]
    c6d0:	691a      	ldr	r2, [r3, #16]
    c6d2:	687b      	ldr	r3, [r7, #4]
    c6d4:	695b      	ldr	r3, [r3, #20]
    c6d6:	ea42 0103 	orr.w	r1, r2, r3
    c6da:	687b      	ldr	r3, [r7, #4]
    c6dc:	699b      	ldr	r3, [r3, #24]
    c6de:	021a      	lsls	r2, r3, #8
    c6e0:	687b      	ldr	r3, [r7, #4]
    c6e2:	681b      	ldr	r3, [r3, #0]
    c6e4:	430a      	orrs	r2, r1
    c6e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
    c6e8:	687b      	ldr	r3, [r7, #4]
    c6ea:	69d9      	ldr	r1, [r3, #28]
    c6ec:	687b      	ldr	r3, [r7, #4]
    c6ee:	6a1a      	ldr	r2, [r3, #32]
    c6f0:	687b      	ldr	r3, [r7, #4]
    c6f2:	681b      	ldr	r3, [r3, #0]
    c6f4:	430a      	orrs	r2, r1
    c6f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
    c6f8:	687b      	ldr	r3, [r7, #4]
    c6fa:	681b      	ldr	r3, [r3, #0]
    c6fc:	681a      	ldr	r2, [r3, #0]
    c6fe:	687b      	ldr	r3, [r7, #4]
    c700:	681b      	ldr	r3, [r3, #0]
    c702:	f042 0201 	orr.w	r2, r2, #1
    c706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    c708:	687b      	ldr	r3, [r7, #4]
    c70a:	2200      	movs	r2, #0
    c70c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
    c70e:	687b      	ldr	r3, [r7, #4]
    c710:	2220      	movs	r2, #32
    c712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
    c716:	687b      	ldr	r3, [r7, #4]
    c718:	2200      	movs	r2, #0
    c71a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
    c71c:	687b      	ldr	r3, [r7, #4]
    c71e:	2200      	movs	r2, #0
    c720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
    c724:	2300      	movs	r3, #0
}
    c726:	4618      	mov	r0, r3
    c728:	3708      	adds	r7, #8
    c72a:	46bd      	mov	sp, r7
    c72c:	bd80      	pop	{r7, pc}
    c72e:	bf00      	nop
    c730:	02008000 	.word	0x02008000

0000c734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
    c734:	b480      	push	{r7}
    c736:	b083      	sub	sp, #12
    c738:	af00      	add	r7, sp, #0
    c73a:	6078      	str	r0, [r7, #4]
    c73c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
    c73e:	687b      	ldr	r3, [r7, #4]
    c740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    c744:	b2db      	uxtb	r3, r3
    c746:	2b20      	cmp	r3, #32
    c748:	d138      	bne.n	c7bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
    c74a:	687b      	ldr	r3, [r7, #4]
    c74c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    c750:	2b01      	cmp	r3, #1
    c752:	d101      	bne.n	c758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
    c754:	2302      	movs	r3, #2
    c756:	e032      	b.n	c7be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
    c758:	687b      	ldr	r3, [r7, #4]
    c75a:	2201      	movs	r2, #1
    c75c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
    c760:	687b      	ldr	r3, [r7, #4]
    c762:	2224      	movs	r2, #36	; 0x24
    c764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
    c768:	687b      	ldr	r3, [r7, #4]
    c76a:	681b      	ldr	r3, [r3, #0]
    c76c:	681a      	ldr	r2, [r3, #0]
    c76e:	687b      	ldr	r3, [r7, #4]
    c770:	681b      	ldr	r3, [r3, #0]
    c772:	f022 0201 	bic.w	r2, r2, #1
    c776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
    c778:	687b      	ldr	r3, [r7, #4]
    c77a:	681b      	ldr	r3, [r3, #0]
    c77c:	681a      	ldr	r2, [r3, #0]
    c77e:	687b      	ldr	r3, [r7, #4]
    c780:	681b      	ldr	r3, [r3, #0]
    c782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    c786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
    c788:	687b      	ldr	r3, [r7, #4]
    c78a:	681b      	ldr	r3, [r3, #0]
    c78c:	6819      	ldr	r1, [r3, #0]
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	681b      	ldr	r3, [r3, #0]
    c792:	683a      	ldr	r2, [r7, #0]
    c794:	430a      	orrs	r2, r1
    c796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
    c798:	687b      	ldr	r3, [r7, #4]
    c79a:	681b      	ldr	r3, [r3, #0]
    c79c:	681a      	ldr	r2, [r3, #0]
    c79e:	687b      	ldr	r3, [r7, #4]
    c7a0:	681b      	ldr	r3, [r3, #0]
    c7a2:	f042 0201 	orr.w	r2, r2, #1
    c7a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
    c7a8:	687b      	ldr	r3, [r7, #4]
    c7aa:	2220      	movs	r2, #32
    c7ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    c7b0:	687b      	ldr	r3, [r7, #4]
    c7b2:	2200      	movs	r2, #0
    c7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
    c7b8:	2300      	movs	r3, #0
    c7ba:	e000      	b.n	c7be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
    c7bc:	2302      	movs	r3, #2
  }
}
    c7be:	4618      	mov	r0, r3
    c7c0:	370c      	adds	r7, #12
    c7c2:	46bd      	mov	sp, r7
    c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7c8:	4770      	bx	lr

0000c7ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
    c7ca:	b480      	push	{r7}
    c7cc:	b085      	sub	sp, #20
    c7ce:	af00      	add	r7, sp, #0
    c7d0:	6078      	str	r0, [r7, #4]
    c7d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
    c7d4:	687b      	ldr	r3, [r7, #4]
    c7d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    c7da:	b2db      	uxtb	r3, r3
    c7dc:	2b20      	cmp	r3, #32
    c7de:	d139      	bne.n	c854 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
    c7e0:	687b      	ldr	r3, [r7, #4]
    c7e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    c7e6:	2b01      	cmp	r3, #1
    c7e8:	d101      	bne.n	c7ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
    c7ea:	2302      	movs	r3, #2
    c7ec:	e033      	b.n	c856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	2201      	movs	r2, #1
    c7f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	2224      	movs	r2, #36	; 0x24
    c7fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
    c7fe:	687b      	ldr	r3, [r7, #4]
    c800:	681b      	ldr	r3, [r3, #0]
    c802:	681a      	ldr	r2, [r3, #0]
    c804:	687b      	ldr	r3, [r7, #4]
    c806:	681b      	ldr	r3, [r3, #0]
    c808:	f022 0201 	bic.w	r2, r2, #1
    c80c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
    c80e:	687b      	ldr	r3, [r7, #4]
    c810:	681b      	ldr	r3, [r3, #0]
    c812:	681b      	ldr	r3, [r3, #0]
    c814:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
    c816:	68fb      	ldr	r3, [r7, #12]
    c818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    c81c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
    c81e:	683b      	ldr	r3, [r7, #0]
    c820:	021b      	lsls	r3, r3, #8
    c822:	68fa      	ldr	r2, [r7, #12]
    c824:	4313      	orrs	r3, r2
    c826:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
    c828:	687b      	ldr	r3, [r7, #4]
    c82a:	681b      	ldr	r3, [r3, #0]
    c82c:	68fa      	ldr	r2, [r7, #12]
    c82e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
    c830:	687b      	ldr	r3, [r7, #4]
    c832:	681b      	ldr	r3, [r3, #0]
    c834:	681a      	ldr	r2, [r3, #0]
    c836:	687b      	ldr	r3, [r7, #4]
    c838:	681b      	ldr	r3, [r3, #0]
    c83a:	f042 0201 	orr.w	r2, r2, #1
    c83e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
    c840:	687b      	ldr	r3, [r7, #4]
    c842:	2220      	movs	r2, #32
    c844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    c848:	687b      	ldr	r3, [r7, #4]
    c84a:	2200      	movs	r2, #0
    c84c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
    c850:	2300      	movs	r3, #0
    c852:	e000      	b.n	c856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
    c854:	2302      	movs	r3, #2
  }
}
    c856:	4618      	mov	r0, r3
    c858:	3714      	adds	r7, #20
    c85a:	46bd      	mov	sp, r7
    c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c860:	4770      	bx	lr
	...

0000c864 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
    c864:	b580      	push	{r7, lr}
    c866:	b082      	sub	sp, #8
    c868:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
    c86a:	2300      	movs	r3, #0
    c86c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
    c86e:	4b23      	ldr	r3, [pc, #140]	; (c8fc <HAL_PWREx_EnableOverDrive+0x98>)
    c870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c872:	4a22      	ldr	r2, [pc, #136]	; (c8fc <HAL_PWREx_EnableOverDrive+0x98>)
    c874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c878:	6413      	str	r3, [r2, #64]	; 0x40
    c87a:	4b20      	ldr	r3, [pc, #128]	; (c8fc <HAL_PWREx_EnableOverDrive+0x98>)
    c87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c87e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    c882:	603b      	str	r3, [r7, #0]
    c884:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
    c886:	4b1e      	ldr	r3, [pc, #120]	; (c900 <HAL_PWREx_EnableOverDrive+0x9c>)
    c888:	681b      	ldr	r3, [r3, #0]
    c88a:	4a1d      	ldr	r2, [pc, #116]	; (c900 <HAL_PWREx_EnableOverDrive+0x9c>)
    c88c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c890:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
    c892:	f7fe fbd9 	bl	b048 <HAL_GetTick>
    c896:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
    c898:	e009      	b.n	c8ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    c89a:	f7fe fbd5 	bl	b048 <HAL_GetTick>
    c89e:	4602      	mov	r2, r0
    c8a0:	687b      	ldr	r3, [r7, #4]
    c8a2:	1ad3      	subs	r3, r2, r3
    c8a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c8a8:	d901      	bls.n	c8ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
    c8aa:	2303      	movs	r3, #3
    c8ac:	e022      	b.n	c8f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
    c8ae:	4b14      	ldr	r3, [pc, #80]	; (c900 <HAL_PWREx_EnableOverDrive+0x9c>)
    c8b0:	685b      	ldr	r3, [r3, #4]
    c8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    c8b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c8ba:	d1ee      	bne.n	c89a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
    c8bc:	4b10      	ldr	r3, [pc, #64]	; (c900 <HAL_PWREx_EnableOverDrive+0x9c>)
    c8be:	681b      	ldr	r3, [r3, #0]
    c8c0:	4a0f      	ldr	r2, [pc, #60]	; (c900 <HAL_PWREx_EnableOverDrive+0x9c>)
    c8c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c8c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
    c8c8:	f7fe fbbe 	bl	b048 <HAL_GetTick>
    c8cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
    c8ce:	e009      	b.n	c8e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    c8d0:	f7fe fbba 	bl	b048 <HAL_GetTick>
    c8d4:	4602      	mov	r2, r0
    c8d6:	687b      	ldr	r3, [r7, #4]
    c8d8:	1ad3      	subs	r3, r2, r3
    c8da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c8de:	d901      	bls.n	c8e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
    c8e0:	2303      	movs	r3, #3
    c8e2:	e007      	b.n	c8f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
    c8e4:	4b06      	ldr	r3, [pc, #24]	; (c900 <HAL_PWREx_EnableOverDrive+0x9c>)
    c8e6:	685b      	ldr	r3, [r3, #4]
    c8e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    c8ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    c8f0:	d1ee      	bne.n	c8d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
    c8f2:	2300      	movs	r3, #0
}
    c8f4:	4618      	mov	r0, r3
    c8f6:	3708      	adds	r7, #8
    c8f8:	46bd      	mov	sp, r7
    c8fa:	bd80      	pop	{r7, pc}
    c8fc:	40023800 	.word	0x40023800
    c900:	40007000 	.word	0x40007000

0000c904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
    c904:	b580      	push	{r7, lr}
    c906:	b086      	sub	sp, #24
    c908:	af00      	add	r7, sp, #0
    c90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
    c90c:	2300      	movs	r3, #0
    c90e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
    c910:	687b      	ldr	r3, [r7, #4]
    c912:	2b00      	cmp	r3, #0
    c914:	d101      	bne.n	c91a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
    c916:	2301      	movs	r3, #1
    c918:	e29b      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	681b      	ldr	r3, [r3, #0]
    c91e:	f003 0301 	and.w	r3, r3, #1
    c922:	2b00      	cmp	r3, #0
    c924:	f000 8087 	beq.w	ca36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
    c928:	4b96      	ldr	r3, [pc, #600]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c92a:	689b      	ldr	r3, [r3, #8]
    c92c:	f003 030c 	and.w	r3, r3, #12
    c930:	2b04      	cmp	r3, #4
    c932:	d00c      	beq.n	c94e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    c934:	4b93      	ldr	r3, [pc, #588]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c936:	689b      	ldr	r3, [r3, #8]
    c938:	f003 030c 	and.w	r3, r3, #12
    c93c:	2b08      	cmp	r3, #8
    c93e:	d112      	bne.n	c966 <HAL_RCC_OscConfig+0x62>
    c940:	4b90      	ldr	r3, [pc, #576]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c942:	685b      	ldr	r3, [r3, #4]
    c944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    c948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    c94c:	d10b      	bne.n	c966 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    c94e:	4b8d      	ldr	r3, [pc, #564]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c950:	681b      	ldr	r3, [r3, #0]
    c952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    c956:	2b00      	cmp	r3, #0
    c958:	d06c      	beq.n	ca34 <HAL_RCC_OscConfig+0x130>
    c95a:	687b      	ldr	r3, [r7, #4]
    c95c:	685b      	ldr	r3, [r3, #4]
    c95e:	2b00      	cmp	r3, #0
    c960:	d168      	bne.n	ca34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
    c962:	2301      	movs	r3, #1
    c964:	e275      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
    c966:	687b      	ldr	r3, [r7, #4]
    c968:	685b      	ldr	r3, [r3, #4]
    c96a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c96e:	d106      	bne.n	c97e <HAL_RCC_OscConfig+0x7a>
    c970:	4b84      	ldr	r3, [pc, #528]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c972:	681b      	ldr	r3, [r3, #0]
    c974:	4a83      	ldr	r2, [pc, #524]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c97a:	6013      	str	r3, [r2, #0]
    c97c:	e02e      	b.n	c9dc <HAL_RCC_OscConfig+0xd8>
    c97e:	687b      	ldr	r3, [r7, #4]
    c980:	685b      	ldr	r3, [r3, #4]
    c982:	2b00      	cmp	r3, #0
    c984:	d10c      	bne.n	c9a0 <HAL_RCC_OscConfig+0x9c>
    c986:	4b7f      	ldr	r3, [pc, #508]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c988:	681b      	ldr	r3, [r3, #0]
    c98a:	4a7e      	ldr	r2, [pc, #504]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c98c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c990:	6013      	str	r3, [r2, #0]
    c992:	4b7c      	ldr	r3, [pc, #496]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c994:	681b      	ldr	r3, [r3, #0]
    c996:	4a7b      	ldr	r2, [pc, #492]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    c99c:	6013      	str	r3, [r2, #0]
    c99e:	e01d      	b.n	c9dc <HAL_RCC_OscConfig+0xd8>
    c9a0:	687b      	ldr	r3, [r7, #4]
    c9a2:	685b      	ldr	r3, [r3, #4]
    c9a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    c9a8:	d10c      	bne.n	c9c4 <HAL_RCC_OscConfig+0xc0>
    c9aa:	4b76      	ldr	r3, [pc, #472]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c9ac:	681b      	ldr	r3, [r3, #0]
    c9ae:	4a75      	ldr	r2, [pc, #468]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c9b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    c9b4:	6013      	str	r3, [r2, #0]
    c9b6:	4b73      	ldr	r3, [pc, #460]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c9b8:	681b      	ldr	r3, [r3, #0]
    c9ba:	4a72      	ldr	r2, [pc, #456]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c9bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c9c0:	6013      	str	r3, [r2, #0]
    c9c2:	e00b      	b.n	c9dc <HAL_RCC_OscConfig+0xd8>
    c9c4:	4b6f      	ldr	r3, [pc, #444]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c9c6:	681b      	ldr	r3, [r3, #0]
    c9c8:	4a6e      	ldr	r2, [pc, #440]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c9ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c9ce:	6013      	str	r3, [r2, #0]
    c9d0:	4b6c      	ldr	r3, [pc, #432]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c9d2:	681b      	ldr	r3, [r3, #0]
    c9d4:	4a6b      	ldr	r2, [pc, #428]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    c9d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    c9da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
    c9dc:	687b      	ldr	r3, [r7, #4]
    c9de:	685b      	ldr	r3, [r3, #4]
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d013      	beq.n	ca0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    c9e4:	f7fe fb30 	bl	b048 <HAL_GetTick>
    c9e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    c9ea:	e008      	b.n	c9fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
    c9ec:	f7fe fb2c 	bl	b048 <HAL_GetTick>
    c9f0:	4602      	mov	r2, r0
    c9f2:	693b      	ldr	r3, [r7, #16]
    c9f4:	1ad3      	subs	r3, r2, r3
    c9f6:	2b64      	cmp	r3, #100	; 0x64
    c9f8:	d901      	bls.n	c9fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
    c9fa:	2303      	movs	r3, #3
    c9fc:	e229      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    c9fe:	4b61      	ldr	r3, [pc, #388]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca00:	681b      	ldr	r3, [r3, #0]
    ca02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    ca06:	2b00      	cmp	r3, #0
    ca08:	d0f0      	beq.n	c9ec <HAL_RCC_OscConfig+0xe8>
    ca0a:	e014      	b.n	ca36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    ca0c:	f7fe fb1c 	bl	b048 <HAL_GetTick>
    ca10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    ca12:	e008      	b.n	ca26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
    ca14:	f7fe fb18 	bl	b048 <HAL_GetTick>
    ca18:	4602      	mov	r2, r0
    ca1a:	693b      	ldr	r3, [r7, #16]
    ca1c:	1ad3      	subs	r3, r2, r3
    ca1e:	2b64      	cmp	r3, #100	; 0x64
    ca20:	d901      	bls.n	ca26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
    ca22:	2303      	movs	r3, #3
    ca24:	e215      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    ca26:	4b57      	ldr	r3, [pc, #348]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca28:	681b      	ldr	r3, [r3, #0]
    ca2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    ca2e:	2b00      	cmp	r3, #0
    ca30:	d1f0      	bne.n	ca14 <HAL_RCC_OscConfig+0x110>
    ca32:	e000      	b.n	ca36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    ca34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
    ca36:	687b      	ldr	r3, [r7, #4]
    ca38:	681b      	ldr	r3, [r3, #0]
    ca3a:	f003 0302 	and.w	r3, r3, #2
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d069      	beq.n	cb16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
    ca42:	4b50      	ldr	r3, [pc, #320]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca44:	689b      	ldr	r3, [r3, #8]
    ca46:	f003 030c 	and.w	r3, r3, #12
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d00b      	beq.n	ca66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    ca4e:	4b4d      	ldr	r3, [pc, #308]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca50:	689b      	ldr	r3, [r3, #8]
    ca52:	f003 030c 	and.w	r3, r3, #12
    ca56:	2b08      	cmp	r3, #8
    ca58:	d11c      	bne.n	ca94 <HAL_RCC_OscConfig+0x190>
    ca5a:	4b4a      	ldr	r3, [pc, #296]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca5c:	685b      	ldr	r3, [r3, #4]
    ca5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    ca62:	2b00      	cmp	r3, #0
    ca64:	d116      	bne.n	ca94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    ca66:	4b47      	ldr	r3, [pc, #284]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca68:	681b      	ldr	r3, [r3, #0]
    ca6a:	f003 0302 	and.w	r3, r3, #2
    ca6e:	2b00      	cmp	r3, #0
    ca70:	d005      	beq.n	ca7e <HAL_RCC_OscConfig+0x17a>
    ca72:	687b      	ldr	r3, [r7, #4]
    ca74:	68db      	ldr	r3, [r3, #12]
    ca76:	2b01      	cmp	r3, #1
    ca78:	d001      	beq.n	ca7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
    ca7a:	2301      	movs	r3, #1
    ca7c:	e1e9      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    ca7e:	4b41      	ldr	r3, [pc, #260]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca80:	681b      	ldr	r3, [r3, #0]
    ca82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    ca86:	687b      	ldr	r3, [r7, #4]
    ca88:	691b      	ldr	r3, [r3, #16]
    ca8a:	00db      	lsls	r3, r3, #3
    ca8c:	493d      	ldr	r1, [pc, #244]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca8e:	4313      	orrs	r3, r2
    ca90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    ca92:	e040      	b.n	cb16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
    ca94:	687b      	ldr	r3, [r7, #4]
    ca96:	68db      	ldr	r3, [r3, #12]
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d023      	beq.n	cae4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
    ca9c:	4b39      	ldr	r3, [pc, #228]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    ca9e:	681b      	ldr	r3, [r3, #0]
    caa0:	4a38      	ldr	r2, [pc, #224]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    caa2:	f043 0301 	orr.w	r3, r3, #1
    caa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    caa8:	f7fe face 	bl	b048 <HAL_GetTick>
    caac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    caae:	e008      	b.n	cac2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
    cab0:	f7fe faca 	bl	b048 <HAL_GetTick>
    cab4:	4602      	mov	r2, r0
    cab6:	693b      	ldr	r3, [r7, #16]
    cab8:	1ad3      	subs	r3, r2, r3
    caba:	2b02      	cmp	r3, #2
    cabc:	d901      	bls.n	cac2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
    cabe:	2303      	movs	r3, #3
    cac0:	e1c7      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    cac2:	4b30      	ldr	r3, [pc, #192]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cac4:	681b      	ldr	r3, [r3, #0]
    cac6:	f003 0302 	and.w	r3, r3, #2
    caca:	2b00      	cmp	r3, #0
    cacc:	d0f0      	beq.n	cab0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    cace:	4b2d      	ldr	r3, [pc, #180]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cad0:	681b      	ldr	r3, [r3, #0]
    cad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    cad6:	687b      	ldr	r3, [r7, #4]
    cad8:	691b      	ldr	r3, [r3, #16]
    cada:	00db      	lsls	r3, r3, #3
    cadc:	4929      	ldr	r1, [pc, #164]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cade:	4313      	orrs	r3, r2
    cae0:	600b      	str	r3, [r1, #0]
    cae2:	e018      	b.n	cb16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
    cae4:	4b27      	ldr	r3, [pc, #156]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cae6:	681b      	ldr	r3, [r3, #0]
    cae8:	4a26      	ldr	r2, [pc, #152]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    caea:	f023 0301 	bic.w	r3, r3, #1
    caee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    caf0:	f7fe faaa 	bl	b048 <HAL_GetTick>
    caf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    caf6:	e008      	b.n	cb0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
    caf8:	f7fe faa6 	bl	b048 <HAL_GetTick>
    cafc:	4602      	mov	r2, r0
    cafe:	693b      	ldr	r3, [r7, #16]
    cb00:	1ad3      	subs	r3, r2, r3
    cb02:	2b02      	cmp	r3, #2
    cb04:	d901      	bls.n	cb0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
    cb06:	2303      	movs	r3, #3
    cb08:	e1a3      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    cb0a:	4b1e      	ldr	r3, [pc, #120]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cb0c:	681b      	ldr	r3, [r3, #0]
    cb0e:	f003 0302 	and.w	r3, r3, #2
    cb12:	2b00      	cmp	r3, #0
    cb14:	d1f0      	bne.n	caf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
    cb16:	687b      	ldr	r3, [r7, #4]
    cb18:	681b      	ldr	r3, [r3, #0]
    cb1a:	f003 0308 	and.w	r3, r3, #8
    cb1e:	2b00      	cmp	r3, #0
    cb20:	d038      	beq.n	cb94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
    cb22:	687b      	ldr	r3, [r7, #4]
    cb24:	695b      	ldr	r3, [r3, #20]
    cb26:	2b00      	cmp	r3, #0
    cb28:	d019      	beq.n	cb5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
    cb2a:	4b16      	ldr	r3, [pc, #88]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cb2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cb2e:	4a15      	ldr	r2, [pc, #84]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cb30:	f043 0301 	orr.w	r3, r3, #1
    cb34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    cb36:	f7fe fa87 	bl	b048 <HAL_GetTick>
    cb3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    cb3c:	e008      	b.n	cb50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
    cb3e:	f7fe fa83 	bl	b048 <HAL_GetTick>
    cb42:	4602      	mov	r2, r0
    cb44:	693b      	ldr	r3, [r7, #16]
    cb46:	1ad3      	subs	r3, r2, r3
    cb48:	2b02      	cmp	r3, #2
    cb4a:	d901      	bls.n	cb50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
    cb4c:	2303      	movs	r3, #3
    cb4e:	e180      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    cb50:	4b0c      	ldr	r3, [pc, #48]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cb52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cb54:	f003 0302 	and.w	r3, r3, #2
    cb58:	2b00      	cmp	r3, #0
    cb5a:	d0f0      	beq.n	cb3e <HAL_RCC_OscConfig+0x23a>
    cb5c:	e01a      	b.n	cb94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
    cb5e:	4b09      	ldr	r3, [pc, #36]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cb60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cb62:	4a08      	ldr	r2, [pc, #32]	; (cb84 <HAL_RCC_OscConfig+0x280>)
    cb64:	f023 0301 	bic.w	r3, r3, #1
    cb68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    cb6a:	f7fe fa6d 	bl	b048 <HAL_GetTick>
    cb6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    cb70:	e00a      	b.n	cb88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
    cb72:	f7fe fa69 	bl	b048 <HAL_GetTick>
    cb76:	4602      	mov	r2, r0
    cb78:	693b      	ldr	r3, [r7, #16]
    cb7a:	1ad3      	subs	r3, r2, r3
    cb7c:	2b02      	cmp	r3, #2
    cb7e:	d903      	bls.n	cb88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
    cb80:	2303      	movs	r3, #3
    cb82:	e166      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
    cb84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    cb88:	4b92      	ldr	r3, [pc, #584]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cb8c:	f003 0302 	and.w	r3, r3, #2
    cb90:	2b00      	cmp	r3, #0
    cb92:	d1ee      	bne.n	cb72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
    cb94:	687b      	ldr	r3, [r7, #4]
    cb96:	681b      	ldr	r3, [r3, #0]
    cb98:	f003 0304 	and.w	r3, r3, #4
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	f000 80a4 	beq.w	ccea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
    cba2:	4b8c      	ldr	r3, [pc, #560]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    cbaa:	2b00      	cmp	r3, #0
    cbac:	d10d      	bne.n	cbca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
    cbae:	4b89      	ldr	r3, [pc, #548]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cbb2:	4a88      	ldr	r2, [pc, #544]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cbb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cbb8:	6413      	str	r3, [r2, #64]	; 0x40
    cbba:	4b86      	ldr	r3, [pc, #536]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cbbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    cbc2:	60bb      	str	r3, [r7, #8]
    cbc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
    cbc6:	2301      	movs	r3, #1
    cbc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    cbca:	4b83      	ldr	r3, [pc, #524]	; (cdd8 <HAL_RCC_OscConfig+0x4d4>)
    cbcc:	681b      	ldr	r3, [r3, #0]
    cbce:	f403 7380 	and.w	r3, r3, #256	; 0x100
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d118      	bne.n	cc08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
    cbd6:	4b80      	ldr	r3, [pc, #512]	; (cdd8 <HAL_RCC_OscConfig+0x4d4>)
    cbd8:	681b      	ldr	r3, [r3, #0]
    cbda:	4a7f      	ldr	r2, [pc, #508]	; (cdd8 <HAL_RCC_OscConfig+0x4d4>)
    cbdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cbe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    cbe2:	f7fe fa31 	bl	b048 <HAL_GetTick>
    cbe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    cbe8:	e008      	b.n	cbfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    cbea:	f7fe fa2d 	bl	b048 <HAL_GetTick>
    cbee:	4602      	mov	r2, r0
    cbf0:	693b      	ldr	r3, [r7, #16]
    cbf2:	1ad3      	subs	r3, r2, r3
    cbf4:	2b64      	cmp	r3, #100	; 0x64
    cbf6:	d901      	bls.n	cbfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
    cbf8:	2303      	movs	r3, #3
    cbfa:	e12a      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    cbfc:	4b76      	ldr	r3, [pc, #472]	; (cdd8 <HAL_RCC_OscConfig+0x4d4>)
    cbfe:	681b      	ldr	r3, [r3, #0]
    cc00:	f403 7380 	and.w	r3, r3, #256	; 0x100
    cc04:	2b00      	cmp	r3, #0
    cc06:	d0f0      	beq.n	cbea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    cc08:	687b      	ldr	r3, [r7, #4]
    cc0a:	689b      	ldr	r3, [r3, #8]
    cc0c:	2b01      	cmp	r3, #1
    cc0e:	d106      	bne.n	cc1e <HAL_RCC_OscConfig+0x31a>
    cc10:	4b70      	ldr	r3, [pc, #448]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    cc14:	4a6f      	ldr	r2, [pc, #444]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc16:	f043 0301 	orr.w	r3, r3, #1
    cc1a:	6713      	str	r3, [r2, #112]	; 0x70
    cc1c:	e02d      	b.n	cc7a <HAL_RCC_OscConfig+0x376>
    cc1e:	687b      	ldr	r3, [r7, #4]
    cc20:	689b      	ldr	r3, [r3, #8]
    cc22:	2b00      	cmp	r3, #0
    cc24:	d10c      	bne.n	cc40 <HAL_RCC_OscConfig+0x33c>
    cc26:	4b6b      	ldr	r3, [pc, #428]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    cc2a:	4a6a      	ldr	r2, [pc, #424]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc2c:	f023 0301 	bic.w	r3, r3, #1
    cc30:	6713      	str	r3, [r2, #112]	; 0x70
    cc32:	4b68      	ldr	r3, [pc, #416]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    cc36:	4a67      	ldr	r2, [pc, #412]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc38:	f023 0304 	bic.w	r3, r3, #4
    cc3c:	6713      	str	r3, [r2, #112]	; 0x70
    cc3e:	e01c      	b.n	cc7a <HAL_RCC_OscConfig+0x376>
    cc40:	687b      	ldr	r3, [r7, #4]
    cc42:	689b      	ldr	r3, [r3, #8]
    cc44:	2b05      	cmp	r3, #5
    cc46:	d10c      	bne.n	cc62 <HAL_RCC_OscConfig+0x35e>
    cc48:	4b62      	ldr	r3, [pc, #392]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    cc4c:	4a61      	ldr	r2, [pc, #388]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc4e:	f043 0304 	orr.w	r3, r3, #4
    cc52:	6713      	str	r3, [r2, #112]	; 0x70
    cc54:	4b5f      	ldr	r3, [pc, #380]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    cc58:	4a5e      	ldr	r2, [pc, #376]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc5a:	f043 0301 	orr.w	r3, r3, #1
    cc5e:	6713      	str	r3, [r2, #112]	; 0x70
    cc60:	e00b      	b.n	cc7a <HAL_RCC_OscConfig+0x376>
    cc62:	4b5c      	ldr	r3, [pc, #368]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    cc66:	4a5b      	ldr	r2, [pc, #364]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc68:	f023 0301 	bic.w	r3, r3, #1
    cc6c:	6713      	str	r3, [r2, #112]	; 0x70
    cc6e:	4b59      	ldr	r3, [pc, #356]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    cc72:	4a58      	ldr	r2, [pc, #352]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cc74:	f023 0304 	bic.w	r3, r3, #4
    cc78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    cc7a:	687b      	ldr	r3, [r7, #4]
    cc7c:	689b      	ldr	r3, [r3, #8]
    cc7e:	2b00      	cmp	r3, #0
    cc80:	d015      	beq.n	ccae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    cc82:	f7fe f9e1 	bl	b048 <HAL_GetTick>
    cc86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    cc88:	e00a      	b.n	cca0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    cc8a:	f7fe f9dd 	bl	b048 <HAL_GetTick>
    cc8e:	4602      	mov	r2, r0
    cc90:	693b      	ldr	r3, [r7, #16]
    cc92:	1ad3      	subs	r3, r2, r3
    cc94:	f241 3288 	movw	r2, #5000	; 0x1388
    cc98:	4293      	cmp	r3, r2
    cc9a:	d901      	bls.n	cca0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
    cc9c:	2303      	movs	r3, #3
    cc9e:	e0d8      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    cca0:	4b4c      	ldr	r3, [pc, #304]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    cca4:	f003 0302 	and.w	r3, r3, #2
    cca8:	2b00      	cmp	r3, #0
    ccaa:	d0ee      	beq.n	cc8a <HAL_RCC_OscConfig+0x386>
    ccac:	e014      	b.n	ccd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    ccae:	f7fe f9cb 	bl	b048 <HAL_GetTick>
    ccb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    ccb4:	e00a      	b.n	cccc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    ccb6:	f7fe f9c7 	bl	b048 <HAL_GetTick>
    ccba:	4602      	mov	r2, r0
    ccbc:	693b      	ldr	r3, [r7, #16]
    ccbe:	1ad3      	subs	r3, r2, r3
    ccc0:	f241 3288 	movw	r2, #5000	; 0x1388
    ccc4:	4293      	cmp	r3, r2
    ccc6:	d901      	bls.n	cccc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
    ccc8:	2303      	movs	r3, #3
    ccca:	e0c2      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    cccc:	4b41      	ldr	r3, [pc, #260]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    ccce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    ccd0:	f003 0302 	and.w	r3, r3, #2
    ccd4:	2b00      	cmp	r3, #0
    ccd6:	d1ee      	bne.n	ccb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
    ccd8:	7dfb      	ldrb	r3, [r7, #23]
    ccda:	2b01      	cmp	r3, #1
    ccdc:	d105      	bne.n	ccea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    ccde:	4b3d      	ldr	r3, [pc, #244]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cce2:	4a3c      	ldr	r2, [pc, #240]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    cce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
    ccea:	687b      	ldr	r3, [r7, #4]
    ccec:	699b      	ldr	r3, [r3, #24]
    ccee:	2b00      	cmp	r3, #0
    ccf0:	f000 80ae 	beq.w	ce50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    ccf4:	4b37      	ldr	r3, [pc, #220]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    ccf6:	689b      	ldr	r3, [r3, #8]
    ccf8:	f003 030c 	and.w	r3, r3, #12
    ccfc:	2b08      	cmp	r3, #8
    ccfe:	d06d      	beq.n	cddc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
    cd00:	687b      	ldr	r3, [r7, #4]
    cd02:	699b      	ldr	r3, [r3, #24]
    cd04:	2b02      	cmp	r3, #2
    cd06:	d14b      	bne.n	cda0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    cd08:	4b32      	ldr	r3, [pc, #200]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cd0a:	681b      	ldr	r3, [r3, #0]
    cd0c:	4a31      	ldr	r2, [pc, #196]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cd0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    cd12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    cd14:	f7fe f998 	bl	b048 <HAL_GetTick>
    cd18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    cd1a:	e008      	b.n	cd2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    cd1c:	f7fe f994 	bl	b048 <HAL_GetTick>
    cd20:	4602      	mov	r2, r0
    cd22:	693b      	ldr	r3, [r7, #16]
    cd24:	1ad3      	subs	r3, r2, r3
    cd26:	2b02      	cmp	r3, #2
    cd28:	d901      	bls.n	cd2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
    cd2a:	2303      	movs	r3, #3
    cd2c:	e091      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    cd2e:	4b29      	ldr	r3, [pc, #164]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cd30:	681b      	ldr	r3, [r3, #0]
    cd32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    cd36:	2b00      	cmp	r3, #0
    cd38:	d1f0      	bne.n	cd1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
    cd3a:	687b      	ldr	r3, [r7, #4]
    cd3c:	69da      	ldr	r2, [r3, #28]
    cd3e:	687b      	ldr	r3, [r7, #4]
    cd40:	6a1b      	ldr	r3, [r3, #32]
    cd42:	431a      	orrs	r2, r3
    cd44:	687b      	ldr	r3, [r7, #4]
    cd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cd48:	019b      	lsls	r3, r3, #6
    cd4a:	431a      	orrs	r2, r3
    cd4c:	687b      	ldr	r3, [r7, #4]
    cd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd50:	085b      	lsrs	r3, r3, #1
    cd52:	3b01      	subs	r3, #1
    cd54:	041b      	lsls	r3, r3, #16
    cd56:	431a      	orrs	r2, r3
    cd58:	687b      	ldr	r3, [r7, #4]
    cd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cd5c:	061b      	lsls	r3, r3, #24
    cd5e:	431a      	orrs	r2, r3
    cd60:	687b      	ldr	r3, [r7, #4]
    cd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    cd64:	071b      	lsls	r3, r3, #28
    cd66:	491b      	ldr	r1, [pc, #108]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cd68:	4313      	orrs	r3, r2
    cd6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
    cd6c:	4b19      	ldr	r3, [pc, #100]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cd6e:	681b      	ldr	r3, [r3, #0]
    cd70:	4a18      	ldr	r2, [pc, #96]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cd72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    cd76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    cd78:	f7fe f966 	bl	b048 <HAL_GetTick>
    cd7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    cd7e:	e008      	b.n	cd92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    cd80:	f7fe f962 	bl	b048 <HAL_GetTick>
    cd84:	4602      	mov	r2, r0
    cd86:	693b      	ldr	r3, [r7, #16]
    cd88:	1ad3      	subs	r3, r2, r3
    cd8a:	2b02      	cmp	r3, #2
    cd8c:	d901      	bls.n	cd92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
    cd8e:	2303      	movs	r3, #3
    cd90:	e05f      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    cd92:	4b10      	ldr	r3, [pc, #64]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cd94:	681b      	ldr	r3, [r3, #0]
    cd96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    cd9a:	2b00      	cmp	r3, #0
    cd9c:	d0f0      	beq.n	cd80 <HAL_RCC_OscConfig+0x47c>
    cd9e:	e057      	b.n	ce50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    cda0:	4b0c      	ldr	r3, [pc, #48]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cda2:	681b      	ldr	r3, [r3, #0]
    cda4:	4a0b      	ldr	r2, [pc, #44]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cda6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    cdaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    cdac:	f7fe f94c 	bl	b048 <HAL_GetTick>
    cdb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    cdb2:	e008      	b.n	cdc6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    cdb4:	f7fe f948 	bl	b048 <HAL_GetTick>
    cdb8:	4602      	mov	r2, r0
    cdba:	693b      	ldr	r3, [r7, #16]
    cdbc:	1ad3      	subs	r3, r2, r3
    cdbe:	2b02      	cmp	r3, #2
    cdc0:	d901      	bls.n	cdc6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
    cdc2:	2303      	movs	r3, #3
    cdc4:	e045      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    cdc6:	4b03      	ldr	r3, [pc, #12]	; (cdd4 <HAL_RCC_OscConfig+0x4d0>)
    cdc8:	681b      	ldr	r3, [r3, #0]
    cdca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d1f0      	bne.n	cdb4 <HAL_RCC_OscConfig+0x4b0>
    cdd2:	e03d      	b.n	ce50 <HAL_RCC_OscConfig+0x54c>
    cdd4:	40023800 	.word	0x40023800
    cdd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
    cddc:	4b1f      	ldr	r3, [pc, #124]	; (ce5c <HAL_RCC_OscConfig+0x558>)
    cdde:	685b      	ldr	r3, [r3, #4]
    cde0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
    cde2:	687b      	ldr	r3, [r7, #4]
    cde4:	699b      	ldr	r3, [r3, #24]
    cde6:	2b01      	cmp	r3, #1
    cde8:	d030      	beq.n	ce4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    cdea:	68fb      	ldr	r3, [r7, #12]
    cdec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
    cdf0:	687b      	ldr	r3, [r7, #4]
    cdf2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
    cdf4:	429a      	cmp	r2, r3
    cdf6:	d129      	bne.n	ce4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
    cdf8:	68fb      	ldr	r3, [r7, #12]
    cdfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cdfe:	687b      	ldr	r3, [r7, #4]
    ce00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    ce02:	429a      	cmp	r2, r3
    ce04:	d122      	bne.n	ce4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
    ce06:	68fa      	ldr	r2, [r7, #12]
    ce08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
    ce0c:	4013      	ands	r3, r2
    ce0e:	687a      	ldr	r2, [r7, #4]
    ce10:	6a52      	ldr	r2, [r2, #36]	; 0x24
    ce12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
    ce14:	4293      	cmp	r3, r2
    ce16:	d119      	bne.n	ce4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
    ce18:	68fb      	ldr	r3, [r7, #12]
    ce1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
    ce1e:	687b      	ldr	r3, [r7, #4]
    ce20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce22:	085b      	lsrs	r3, r3, #1
    ce24:	3b01      	subs	r3, #1
    ce26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
    ce28:	429a      	cmp	r2, r3
    ce2a:	d10f      	bne.n	ce4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
    ce2c:	68fb      	ldr	r3, [r7, #12]
    ce2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    ce32:	687b      	ldr	r3, [r7, #4]
    ce34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ce36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
    ce38:	429a      	cmp	r2, r3
    ce3a:	d107      	bne.n	ce4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
    ce3c:	68fb      	ldr	r3, [r7, #12]
    ce3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
    ce42:	687b      	ldr	r3, [r7, #4]
    ce44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ce46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
    ce48:	429a      	cmp	r2, r3
    ce4a:	d001      	beq.n	ce50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
    ce4c:	2301      	movs	r3, #1
    ce4e:	e000      	b.n	ce52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
    ce50:	2300      	movs	r3, #0
}
    ce52:	4618      	mov	r0, r3
    ce54:	3718      	adds	r7, #24
    ce56:	46bd      	mov	sp, r7
    ce58:	bd80      	pop	{r7, pc}
    ce5a:	bf00      	nop
    ce5c:	40023800 	.word	0x40023800

0000ce60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
    ce60:	b580      	push	{r7, lr}
    ce62:	b084      	sub	sp, #16
    ce64:	af00      	add	r7, sp, #0
    ce66:	6078      	str	r0, [r7, #4]
    ce68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
    ce6a:	2300      	movs	r3, #0
    ce6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
    ce6e:	687b      	ldr	r3, [r7, #4]
    ce70:	2b00      	cmp	r3, #0
    ce72:	d101      	bne.n	ce78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
    ce74:	2301      	movs	r3, #1
    ce76:	e0d0      	b.n	d01a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
    ce78:	4b6a      	ldr	r3, [pc, #424]	; (d024 <HAL_RCC_ClockConfig+0x1c4>)
    ce7a:	681b      	ldr	r3, [r3, #0]
    ce7c:	f003 030f 	and.w	r3, r3, #15
    ce80:	683a      	ldr	r2, [r7, #0]
    ce82:	429a      	cmp	r2, r3
    ce84:	d910      	bls.n	cea8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    ce86:	4b67      	ldr	r3, [pc, #412]	; (d024 <HAL_RCC_ClockConfig+0x1c4>)
    ce88:	681b      	ldr	r3, [r3, #0]
    ce8a:	f023 020f 	bic.w	r2, r3, #15
    ce8e:	4965      	ldr	r1, [pc, #404]	; (d024 <HAL_RCC_ClockConfig+0x1c4>)
    ce90:	683b      	ldr	r3, [r7, #0]
    ce92:	4313      	orrs	r3, r2
    ce94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
    ce96:	4b63      	ldr	r3, [pc, #396]	; (d024 <HAL_RCC_ClockConfig+0x1c4>)
    ce98:	681b      	ldr	r3, [r3, #0]
    ce9a:	f003 030f 	and.w	r3, r3, #15
    ce9e:	683a      	ldr	r2, [r7, #0]
    cea0:	429a      	cmp	r2, r3
    cea2:	d001      	beq.n	cea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
    cea4:	2301      	movs	r3, #1
    cea6:	e0b8      	b.n	d01a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    cea8:	687b      	ldr	r3, [r7, #4]
    ceaa:	681b      	ldr	r3, [r3, #0]
    ceac:	f003 0302 	and.w	r3, r3, #2
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	d020      	beq.n	cef6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    ceb4:	687b      	ldr	r3, [r7, #4]
    ceb6:	681b      	ldr	r3, [r3, #0]
    ceb8:	f003 0304 	and.w	r3, r3, #4
    cebc:	2b00      	cmp	r3, #0
    cebe:	d005      	beq.n	cecc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
    cec0:	4b59      	ldr	r3, [pc, #356]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cec2:	689b      	ldr	r3, [r3, #8]
    cec4:	4a58      	ldr	r2, [pc, #352]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
    ceca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    cecc:	687b      	ldr	r3, [r7, #4]
    cece:	681b      	ldr	r3, [r3, #0]
    ced0:	f003 0308 	and.w	r3, r3, #8
    ced4:	2b00      	cmp	r3, #0
    ced6:	d005      	beq.n	cee4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
    ced8:	4b53      	ldr	r3, [pc, #332]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    ceda:	689b      	ldr	r3, [r3, #8]
    cedc:	4a52      	ldr	r2, [pc, #328]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
    cee2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    cee4:	4b50      	ldr	r3, [pc, #320]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cee6:	689b      	ldr	r3, [r3, #8]
    cee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    ceec:	687b      	ldr	r3, [r7, #4]
    ceee:	689b      	ldr	r3, [r3, #8]
    cef0:	494d      	ldr	r1, [pc, #308]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cef2:	4313      	orrs	r3, r2
    cef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    cef6:	687b      	ldr	r3, [r7, #4]
    cef8:	681b      	ldr	r3, [r3, #0]
    cefa:	f003 0301 	and.w	r3, r3, #1
    cefe:	2b00      	cmp	r3, #0
    cf00:	d040      	beq.n	cf84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    cf02:	687b      	ldr	r3, [r7, #4]
    cf04:	685b      	ldr	r3, [r3, #4]
    cf06:	2b01      	cmp	r3, #1
    cf08:	d107      	bne.n	cf1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    cf0a:	4b47      	ldr	r3, [pc, #284]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cf0c:	681b      	ldr	r3, [r3, #0]
    cf0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    cf12:	2b00      	cmp	r3, #0
    cf14:	d115      	bne.n	cf42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
    cf16:	2301      	movs	r3, #1
    cf18:	e07f      	b.n	d01a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    cf1a:	687b      	ldr	r3, [r7, #4]
    cf1c:	685b      	ldr	r3, [r3, #4]
    cf1e:	2b02      	cmp	r3, #2
    cf20:	d107      	bne.n	cf32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    cf22:	4b41      	ldr	r3, [pc, #260]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cf24:	681b      	ldr	r3, [r3, #0]
    cf26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	d109      	bne.n	cf42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
    cf2e:	2301      	movs	r3, #1
    cf30:	e073      	b.n	d01a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    cf32:	4b3d      	ldr	r3, [pc, #244]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cf34:	681b      	ldr	r3, [r3, #0]
    cf36:	f003 0302 	and.w	r3, r3, #2
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d101      	bne.n	cf42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
    cf3e:	2301      	movs	r3, #1
    cf40:	e06b      	b.n	d01a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    cf42:	4b39      	ldr	r3, [pc, #228]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cf44:	689b      	ldr	r3, [r3, #8]
    cf46:	f023 0203 	bic.w	r2, r3, #3
    cf4a:	687b      	ldr	r3, [r7, #4]
    cf4c:	685b      	ldr	r3, [r3, #4]
    cf4e:	4936      	ldr	r1, [pc, #216]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cf50:	4313      	orrs	r3, r2
    cf52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    cf54:	f7fe f878 	bl	b048 <HAL_GetTick>
    cf58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    cf5a:	e00a      	b.n	cf72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
    cf5c:	f7fe f874 	bl	b048 <HAL_GetTick>
    cf60:	4602      	mov	r2, r0
    cf62:	68fb      	ldr	r3, [r7, #12]
    cf64:	1ad3      	subs	r3, r2, r3
    cf66:	f241 3288 	movw	r2, #5000	; 0x1388
    cf6a:	4293      	cmp	r3, r2
    cf6c:	d901      	bls.n	cf72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
    cf6e:	2303      	movs	r3, #3
    cf70:	e053      	b.n	d01a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    cf72:	4b2d      	ldr	r3, [pc, #180]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cf74:	689b      	ldr	r3, [r3, #8]
    cf76:	f003 020c 	and.w	r2, r3, #12
    cf7a:	687b      	ldr	r3, [r7, #4]
    cf7c:	685b      	ldr	r3, [r3, #4]
    cf7e:	009b      	lsls	r3, r3, #2
    cf80:	429a      	cmp	r2, r3
    cf82:	d1eb      	bne.n	cf5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
    cf84:	4b27      	ldr	r3, [pc, #156]	; (d024 <HAL_RCC_ClockConfig+0x1c4>)
    cf86:	681b      	ldr	r3, [r3, #0]
    cf88:	f003 030f 	and.w	r3, r3, #15
    cf8c:	683a      	ldr	r2, [r7, #0]
    cf8e:	429a      	cmp	r2, r3
    cf90:	d210      	bcs.n	cfb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    cf92:	4b24      	ldr	r3, [pc, #144]	; (d024 <HAL_RCC_ClockConfig+0x1c4>)
    cf94:	681b      	ldr	r3, [r3, #0]
    cf96:	f023 020f 	bic.w	r2, r3, #15
    cf9a:	4922      	ldr	r1, [pc, #136]	; (d024 <HAL_RCC_ClockConfig+0x1c4>)
    cf9c:	683b      	ldr	r3, [r7, #0]
    cf9e:	4313      	orrs	r3, r2
    cfa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
    cfa2:	4b20      	ldr	r3, [pc, #128]	; (d024 <HAL_RCC_ClockConfig+0x1c4>)
    cfa4:	681b      	ldr	r3, [r3, #0]
    cfa6:	f003 030f 	and.w	r3, r3, #15
    cfaa:	683a      	ldr	r2, [r7, #0]
    cfac:	429a      	cmp	r2, r3
    cfae:	d001      	beq.n	cfb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
    cfb0:	2301      	movs	r3, #1
    cfb2:	e032      	b.n	d01a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    cfb4:	687b      	ldr	r3, [r7, #4]
    cfb6:	681b      	ldr	r3, [r3, #0]
    cfb8:	f003 0304 	and.w	r3, r3, #4
    cfbc:	2b00      	cmp	r3, #0
    cfbe:	d008      	beq.n	cfd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
    cfc0:	4b19      	ldr	r3, [pc, #100]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cfc2:	689b      	ldr	r3, [r3, #8]
    cfc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
    cfc8:	687b      	ldr	r3, [r7, #4]
    cfca:	68db      	ldr	r3, [r3, #12]
    cfcc:	4916      	ldr	r1, [pc, #88]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cfce:	4313      	orrs	r3, r2
    cfd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    cfd2:	687b      	ldr	r3, [r7, #4]
    cfd4:	681b      	ldr	r3, [r3, #0]
    cfd6:	f003 0308 	and.w	r3, r3, #8
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d009      	beq.n	cff2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
    cfde:	4b12      	ldr	r3, [pc, #72]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cfe0:	689b      	ldr	r3, [r3, #8]
    cfe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
    cfe6:	687b      	ldr	r3, [r7, #4]
    cfe8:	691b      	ldr	r3, [r3, #16]
    cfea:	00db      	lsls	r3, r3, #3
    cfec:	490e      	ldr	r1, [pc, #56]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cfee:	4313      	orrs	r3, r2
    cff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
    cff2:	f000 f821 	bl	d038 <HAL_RCC_GetSysClockFreq>
    cff6:	4601      	mov	r1, r0
    cff8:	4b0b      	ldr	r3, [pc, #44]	; (d028 <HAL_RCC_ClockConfig+0x1c8>)
    cffa:	689b      	ldr	r3, [r3, #8]
    cffc:	091b      	lsrs	r3, r3, #4
    cffe:	f003 030f 	and.w	r3, r3, #15
    d002:	4a0a      	ldr	r2, [pc, #40]	; (d02c <HAL_RCC_ClockConfig+0x1cc>)
    d004:	5cd3      	ldrb	r3, [r2, r3]
    d006:	fa21 f303 	lsr.w	r3, r1, r3
    d00a:	4a09      	ldr	r2, [pc, #36]	; (d030 <HAL_RCC_ClockConfig+0x1d0>)
    d00c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
    d00e:	4b09      	ldr	r3, [pc, #36]	; (d034 <HAL_RCC_ClockConfig+0x1d4>)
    d010:	681b      	ldr	r3, [r3, #0]
    d012:	4618      	mov	r0, r3
    d014:	f7fc f9fc 	bl	9410 <HAL_InitTick>

  return HAL_OK;
    d018:	2300      	movs	r3, #0
}
    d01a:	4618      	mov	r0, r3
    d01c:	3710      	adds	r7, #16
    d01e:	46bd      	mov	sp, r7
    d020:	bd80      	pop	{r7, pc}
    d022:	bf00      	nop
    d024:	40023c00 	.word	0x40023c00
    d028:	40023800 	.word	0x40023800
    d02c:	00019588 	.word	0x00019588
    d030:	00029ad0 	.word	0x00029ad0
    d034:	00029ad4 	.word	0x00029ad4

0000d038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
    d038:	b5f0      	push	{r4, r5, r6, r7, lr}
    d03a:	b085      	sub	sp, #20
    d03c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
    d03e:	2300      	movs	r3, #0
    d040:	607b      	str	r3, [r7, #4]
    d042:	2300      	movs	r3, #0
    d044:	60fb      	str	r3, [r7, #12]
    d046:	2300      	movs	r3, #0
    d048:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
    d04a:	2300      	movs	r3, #0
    d04c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
    d04e:	4b50      	ldr	r3, [pc, #320]	; (d190 <HAL_RCC_GetSysClockFreq+0x158>)
    d050:	689b      	ldr	r3, [r3, #8]
    d052:	f003 030c 	and.w	r3, r3, #12
    d056:	2b04      	cmp	r3, #4
    d058:	d007      	beq.n	d06a <HAL_RCC_GetSysClockFreq+0x32>
    d05a:	2b08      	cmp	r3, #8
    d05c:	d008      	beq.n	d070 <HAL_RCC_GetSysClockFreq+0x38>
    d05e:	2b00      	cmp	r3, #0
    d060:	f040 808d 	bne.w	d17e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
    d064:	4b4b      	ldr	r3, [pc, #300]	; (d194 <HAL_RCC_GetSysClockFreq+0x15c>)
    d066:	60bb      	str	r3, [r7, #8]
      break;
    d068:	e08c      	b.n	d184 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
    d06a:	4b4b      	ldr	r3, [pc, #300]	; (d198 <HAL_RCC_GetSysClockFreq+0x160>)
    d06c:	60bb      	str	r3, [r7, #8]
      break;
    d06e:	e089      	b.n	d184 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    d070:	4b47      	ldr	r3, [pc, #284]	; (d190 <HAL_RCC_GetSysClockFreq+0x158>)
    d072:	685b      	ldr	r3, [r3, #4]
    d074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d078:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
    d07a:	4b45      	ldr	r3, [pc, #276]	; (d190 <HAL_RCC_GetSysClockFreq+0x158>)
    d07c:	685b      	ldr	r3, [r3, #4]
    d07e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    d082:	2b00      	cmp	r3, #0
    d084:	d023      	beq.n	d0ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
    d086:	4b42      	ldr	r3, [pc, #264]	; (d190 <HAL_RCC_GetSysClockFreq+0x158>)
    d088:	685b      	ldr	r3, [r3, #4]
    d08a:	099b      	lsrs	r3, r3, #6
    d08c:	f04f 0400 	mov.w	r4, #0
    d090:	f240 11ff 	movw	r1, #511	; 0x1ff
    d094:	f04f 0200 	mov.w	r2, #0
    d098:	ea03 0501 	and.w	r5, r3, r1
    d09c:	ea04 0602 	and.w	r6, r4, r2
    d0a0:	4a3d      	ldr	r2, [pc, #244]	; (d198 <HAL_RCC_GetSysClockFreq+0x160>)
    d0a2:	fb02 f106 	mul.w	r1, r2, r6
    d0a6:	2200      	movs	r2, #0
    d0a8:	fb02 f205 	mul.w	r2, r2, r5
    d0ac:	440a      	add	r2, r1
    d0ae:	493a      	ldr	r1, [pc, #232]	; (d198 <HAL_RCC_GetSysClockFreq+0x160>)
    d0b0:	fba5 0101 	umull	r0, r1, r5, r1
    d0b4:	1853      	adds	r3, r2, r1
    d0b6:	4619      	mov	r1, r3
    d0b8:	687b      	ldr	r3, [r7, #4]
    d0ba:	f04f 0400 	mov.w	r4, #0
    d0be:	461a      	mov	r2, r3
    d0c0:	4623      	mov	r3, r4
    d0c2:	f00c f86b 	bl	1919c <__aeabi_uldivmod>
    d0c6:	4603      	mov	r3, r0
    d0c8:	460c      	mov	r4, r1
    d0ca:	60fb      	str	r3, [r7, #12]
    d0cc:	e049      	b.n	d162 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
    d0ce:	4b30      	ldr	r3, [pc, #192]	; (d190 <HAL_RCC_GetSysClockFreq+0x158>)
    d0d0:	685b      	ldr	r3, [r3, #4]
    d0d2:	099b      	lsrs	r3, r3, #6
    d0d4:	f04f 0400 	mov.w	r4, #0
    d0d8:	f240 11ff 	movw	r1, #511	; 0x1ff
    d0dc:	f04f 0200 	mov.w	r2, #0
    d0e0:	ea03 0501 	and.w	r5, r3, r1
    d0e4:	ea04 0602 	and.w	r6, r4, r2
    d0e8:	4629      	mov	r1, r5
    d0ea:	4632      	mov	r2, r6
    d0ec:	f04f 0300 	mov.w	r3, #0
    d0f0:	f04f 0400 	mov.w	r4, #0
    d0f4:	0154      	lsls	r4, r2, #5
    d0f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    d0fa:	014b      	lsls	r3, r1, #5
    d0fc:	4619      	mov	r1, r3
    d0fe:	4622      	mov	r2, r4
    d100:	1b49      	subs	r1, r1, r5
    d102:	eb62 0206 	sbc.w	r2, r2, r6
    d106:	f04f 0300 	mov.w	r3, #0
    d10a:	f04f 0400 	mov.w	r4, #0
    d10e:	0194      	lsls	r4, r2, #6
    d110:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
    d114:	018b      	lsls	r3, r1, #6
    d116:	1a5b      	subs	r3, r3, r1
    d118:	eb64 0402 	sbc.w	r4, r4, r2
    d11c:	f04f 0100 	mov.w	r1, #0
    d120:	f04f 0200 	mov.w	r2, #0
    d124:	00e2      	lsls	r2, r4, #3
    d126:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    d12a:	00d9      	lsls	r1, r3, #3
    d12c:	460b      	mov	r3, r1
    d12e:	4614      	mov	r4, r2
    d130:	195b      	adds	r3, r3, r5
    d132:	eb44 0406 	adc.w	r4, r4, r6
    d136:	f04f 0100 	mov.w	r1, #0
    d13a:	f04f 0200 	mov.w	r2, #0
    d13e:	02a2      	lsls	r2, r4, #10
    d140:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
    d144:	0299      	lsls	r1, r3, #10
    d146:	460b      	mov	r3, r1
    d148:	4614      	mov	r4, r2
    d14a:	4618      	mov	r0, r3
    d14c:	4621      	mov	r1, r4
    d14e:	687b      	ldr	r3, [r7, #4]
    d150:	f04f 0400 	mov.w	r4, #0
    d154:	461a      	mov	r2, r3
    d156:	4623      	mov	r3, r4
    d158:	f00c f820 	bl	1919c <__aeabi_uldivmod>
    d15c:	4603      	mov	r3, r0
    d15e:	460c      	mov	r4, r1
    d160:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
    d162:	4b0b      	ldr	r3, [pc, #44]	; (d190 <HAL_RCC_GetSysClockFreq+0x158>)
    d164:	685b      	ldr	r3, [r3, #4]
    d166:	0c1b      	lsrs	r3, r3, #16
    d168:	f003 0303 	and.w	r3, r3, #3
    d16c:	3301      	adds	r3, #1
    d16e:	005b      	lsls	r3, r3, #1
    d170:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
    d172:	68fa      	ldr	r2, [r7, #12]
    d174:	683b      	ldr	r3, [r7, #0]
    d176:	fbb2 f3f3 	udiv	r3, r2, r3
    d17a:	60bb      	str	r3, [r7, #8]
      break;
    d17c:	e002      	b.n	d184 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
    d17e:	4b05      	ldr	r3, [pc, #20]	; (d194 <HAL_RCC_GetSysClockFreq+0x15c>)
    d180:	60bb      	str	r3, [r7, #8]
      break;
    d182:	bf00      	nop
    }
  }
  return sysclockfreq;
    d184:	68bb      	ldr	r3, [r7, #8]
}
    d186:	4618      	mov	r0, r3
    d188:	3714      	adds	r7, #20
    d18a:	46bd      	mov	sp, r7
    d18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d18e:	bf00      	nop
    d190:	40023800 	.word	0x40023800
    d194:	00f42400 	.word	0x00f42400
    d198:	017d7840 	.word	0x017d7840

0000d19c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    d19c:	b480      	push	{r7}
    d19e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
    d1a0:	4b03      	ldr	r3, [pc, #12]	; (d1b0 <HAL_RCC_GetHCLKFreq+0x14>)
    d1a2:	681b      	ldr	r3, [r3, #0]
}
    d1a4:	4618      	mov	r0, r3
    d1a6:	46bd      	mov	sp, r7
    d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1ac:	4770      	bx	lr
    d1ae:	bf00      	nop
    d1b0:	00029ad0 	.word	0x00029ad0

0000d1b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    d1b4:	b580      	push	{r7, lr}
    d1b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
    d1b8:	f7ff fff0 	bl	d19c <HAL_RCC_GetHCLKFreq>
    d1bc:	4601      	mov	r1, r0
    d1be:	4b05      	ldr	r3, [pc, #20]	; (d1d4 <HAL_RCC_GetPCLK1Freq+0x20>)
    d1c0:	689b      	ldr	r3, [r3, #8]
    d1c2:	0a9b      	lsrs	r3, r3, #10
    d1c4:	f003 0307 	and.w	r3, r3, #7
    d1c8:	4a03      	ldr	r2, [pc, #12]	; (d1d8 <HAL_RCC_GetPCLK1Freq+0x24>)
    d1ca:	5cd3      	ldrb	r3, [r2, r3]
    d1cc:	fa21 f303 	lsr.w	r3, r1, r3
}
    d1d0:	4618      	mov	r0, r3
    d1d2:	bd80      	pop	{r7, pc}
    d1d4:	40023800 	.word	0x40023800
    d1d8:	00019598 	.word	0x00019598

0000d1dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
    d1dc:	b580      	push	{r7, lr}
    d1de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
    d1e0:	f7ff ffdc 	bl	d19c <HAL_RCC_GetHCLKFreq>
    d1e4:	4601      	mov	r1, r0
    d1e6:	4b05      	ldr	r3, [pc, #20]	; (d1fc <HAL_RCC_GetPCLK2Freq+0x20>)
    d1e8:	689b      	ldr	r3, [r3, #8]
    d1ea:	0b5b      	lsrs	r3, r3, #13
    d1ec:	f003 0307 	and.w	r3, r3, #7
    d1f0:	4a03      	ldr	r2, [pc, #12]	; (d200 <HAL_RCC_GetPCLK2Freq+0x24>)
    d1f2:	5cd3      	ldrb	r3, [r2, r3]
    d1f4:	fa21 f303 	lsr.w	r3, r1, r3
}
    d1f8:	4618      	mov	r0, r3
    d1fa:	bd80      	pop	{r7, pc}
    d1fc:	40023800 	.word	0x40023800
    d200:	00019598 	.word	0x00019598

0000d204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
    d204:	b480      	push	{r7}
    d206:	b083      	sub	sp, #12
    d208:	af00      	add	r7, sp, #0
    d20a:	6078      	str	r0, [r7, #4]
    d20c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    d20e:	687b      	ldr	r3, [r7, #4]
    d210:	220f      	movs	r2, #15
    d212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
    d214:	4b12      	ldr	r3, [pc, #72]	; (d260 <HAL_RCC_GetClockConfig+0x5c>)
    d216:	689b      	ldr	r3, [r3, #8]
    d218:	f003 0203 	and.w	r2, r3, #3
    d21c:	687b      	ldr	r3, [r7, #4]
    d21e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
    d220:	4b0f      	ldr	r3, [pc, #60]	; (d260 <HAL_RCC_GetClockConfig+0x5c>)
    d222:	689b      	ldr	r3, [r3, #8]
    d224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    d228:	687b      	ldr	r3, [r7, #4]
    d22a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
    d22c:	4b0c      	ldr	r3, [pc, #48]	; (d260 <HAL_RCC_GetClockConfig+0x5c>)
    d22e:	689b      	ldr	r3, [r3, #8]
    d230:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
    d238:	4b09      	ldr	r3, [pc, #36]	; (d260 <HAL_RCC_GetClockConfig+0x5c>)
    d23a:	689b      	ldr	r3, [r3, #8]
    d23c:	08db      	lsrs	r3, r3, #3
    d23e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
    d242:	687b      	ldr	r3, [r7, #4]
    d244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
    d246:	4b07      	ldr	r3, [pc, #28]	; (d264 <HAL_RCC_GetClockConfig+0x60>)
    d248:	681b      	ldr	r3, [r3, #0]
    d24a:	f003 020f 	and.w	r2, r3, #15
    d24e:	683b      	ldr	r3, [r7, #0]
    d250:	601a      	str	r2, [r3, #0]
}
    d252:	bf00      	nop
    d254:	370c      	adds	r7, #12
    d256:	46bd      	mov	sp, r7
    d258:	f85d 7b04 	ldr.w	r7, [sp], #4
    d25c:	4770      	bx	lr
    d25e:	bf00      	nop
    d260:	40023800 	.word	0x40023800
    d264:	40023c00 	.word	0x40023c00

0000d268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
    d268:	b580      	push	{r7, lr}
    d26a:	b088      	sub	sp, #32
    d26c:	af00      	add	r7, sp, #0
    d26e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
    d270:	2300      	movs	r3, #0
    d272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
    d274:	2300      	movs	r3, #0
    d276:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
    d278:	2300      	movs	r3, #0
    d27a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
    d27c:	2300      	movs	r3, #0
    d27e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
    d280:	2300      	movs	r3, #0
    d282:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
    d284:	687b      	ldr	r3, [r7, #4]
    d286:	681b      	ldr	r3, [r3, #0]
    d288:	f003 0301 	and.w	r3, r3, #1
    d28c:	2b00      	cmp	r3, #0
    d28e:	d012      	beq.n	d2b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
    d290:	4b69      	ldr	r3, [pc, #420]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d292:	689b      	ldr	r3, [r3, #8]
    d294:	4a68      	ldr	r2, [pc, #416]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d296:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    d29a:	6093      	str	r3, [r2, #8]
    d29c:	4b66      	ldr	r3, [pc, #408]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d29e:	689a      	ldr	r2, [r3, #8]
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d2a4:	4964      	ldr	r1, [pc, #400]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d2a6:	4313      	orrs	r3, r2
    d2a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
    d2aa:	687b      	ldr	r3, [r7, #4]
    d2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d101      	bne.n	d2b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
    d2b2:	2301      	movs	r3, #1
    d2b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
    d2b6:	687b      	ldr	r3, [r7, #4]
    d2b8:	681b      	ldr	r3, [r3, #0]
    d2ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    d2be:	2b00      	cmp	r3, #0
    d2c0:	d017      	beq.n	d2f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
    d2c2:	4b5d      	ldr	r3, [pc, #372]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d2c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    d2cc:	687b      	ldr	r3, [r7, #4]
    d2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d2d0:	4959      	ldr	r1, [pc, #356]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d2d2:	4313      	orrs	r3, r2
    d2d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    d2d8:	687b      	ldr	r3, [r7, #4]
    d2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d2dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    d2e0:	d101      	bne.n	d2e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
    d2e2:	2301      	movs	r3, #1
    d2e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
    d2e6:	687b      	ldr	r3, [r7, #4]
    d2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	d101      	bne.n	d2f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
    d2ee:	2301      	movs	r3, #1
    d2f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
    d2f2:	687b      	ldr	r3, [r7, #4]
    d2f4:	681b      	ldr	r3, [r3, #0]
    d2f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	d017      	beq.n	d32e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    d2fe:	4b4e      	ldr	r3, [pc, #312]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d304:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
    d308:	687b      	ldr	r3, [r7, #4]
    d30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d30c:	494a      	ldr	r1, [pc, #296]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d30e:	4313      	orrs	r3, r2
    d310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    d31c:	d101      	bne.n	d322 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
    d31e:	2301      	movs	r3, #1
    d320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    d322:	687b      	ldr	r3, [r7, #4]
    d324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d326:	2b00      	cmp	r3, #0
    d328:	d101      	bne.n	d32e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
    d32a:	2301      	movs	r3, #1
    d32c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
    d32e:	687b      	ldr	r3, [r7, #4]
    d330:	681b      	ldr	r3, [r3, #0]
    d332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    d336:	2b00      	cmp	r3, #0
    d338:	d001      	beq.n	d33e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
    d33a:	2301      	movs	r3, #1
    d33c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
    d33e:	687b      	ldr	r3, [r7, #4]
    d340:	681b      	ldr	r3, [r3, #0]
    d342:	f003 0320 	and.w	r3, r3, #32
    d346:	2b00      	cmp	r3, #0
    d348:	f000 808b 	beq.w	d462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
    d34c:	4b3a      	ldr	r3, [pc, #232]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d350:	4a39      	ldr	r2, [pc, #228]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d356:	6413      	str	r3, [r2, #64]	; 0x40
    d358:	4b37      	ldr	r3, [pc, #220]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d35c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    d360:	60bb      	str	r3, [r7, #8]
    d362:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
    d364:	4b35      	ldr	r3, [pc, #212]	; (d43c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
    d366:	681b      	ldr	r3, [r3, #0]
    d368:	4a34      	ldr	r2, [pc, #208]	; (d43c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
    d36a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d36e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    d370:	f7fd fe6a 	bl	b048 <HAL_GetTick>
    d374:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    d376:	e008      	b.n	d38a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    d378:	f7fd fe66 	bl	b048 <HAL_GetTick>
    d37c:	4602      	mov	r2, r0
    d37e:	697b      	ldr	r3, [r7, #20]
    d380:	1ad3      	subs	r3, r2, r3
    d382:	2b64      	cmp	r3, #100	; 0x64
    d384:	d901      	bls.n	d38a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
    d386:	2303      	movs	r3, #3
    d388:	e38d      	b.n	daa6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    d38a:	4b2c      	ldr	r3, [pc, #176]	; (d43c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
    d38c:	681b      	ldr	r3, [r3, #0]
    d38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d392:	2b00      	cmp	r3, #0
    d394:	d0f0      	beq.n	d378 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    d396:	4b28      	ldr	r3, [pc, #160]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    d39a:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d39e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    d3a0:	693b      	ldr	r3, [r7, #16]
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	d035      	beq.n	d412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    d3a6:	687b      	ldr	r3, [r7, #4]
    d3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d3aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d3ae:	693a      	ldr	r2, [r7, #16]
    d3b0:	429a      	cmp	r2, r3
    d3b2:	d02e      	beq.n	d412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
    d3b4:	4b20      	ldr	r3, [pc, #128]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    d3b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d3bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
    d3be:	4b1e      	ldr	r3, [pc, #120]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    d3c2:	4a1d      	ldr	r2, [pc, #116]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d3c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d3c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
    d3ca:	4b1b      	ldr	r3, [pc, #108]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    d3ce:	4a1a      	ldr	r2, [pc, #104]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d3d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    d3d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
    d3d6:	4a18      	ldr	r2, [pc, #96]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d3d8:	693b      	ldr	r3, [r7, #16]
    d3da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
    d3dc:	4b16      	ldr	r3, [pc, #88]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    d3e0:	f003 0301 	and.w	r3, r3, #1
    d3e4:	2b01      	cmp	r3, #1
    d3e6:	d114      	bne.n	d412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    d3e8:	f7fd fe2e 	bl	b048 <HAL_GetTick>
    d3ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    d3ee:	e00a      	b.n	d406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    d3f0:	f7fd fe2a 	bl	b048 <HAL_GetTick>
    d3f4:	4602      	mov	r2, r0
    d3f6:	697b      	ldr	r3, [r7, #20]
    d3f8:	1ad3      	subs	r3, r2, r3
    d3fa:	f241 3288 	movw	r2, #5000	; 0x1388
    d3fe:	4293      	cmp	r3, r2
    d400:	d901      	bls.n	d406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
    d402:	2303      	movs	r3, #3
    d404:	e34f      	b.n	daa6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    d406:	4b0c      	ldr	r3, [pc, #48]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    d40a:	f003 0302 	and.w	r3, r3, #2
    d40e:	2b00      	cmp	r3, #0
    d410:	d0ee      	beq.n	d3f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    d412:	687b      	ldr	r3, [r7, #4]
    d414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d416:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d41a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    d41e:	d111      	bne.n	d444 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    d420:	4b05      	ldr	r3, [pc, #20]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d422:	689b      	ldr	r3, [r3, #8]
    d424:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
    d428:	687b      	ldr	r3, [r7, #4]
    d42a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    d42c:	4b04      	ldr	r3, [pc, #16]	; (d440 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
    d42e:	400b      	ands	r3, r1
    d430:	4901      	ldr	r1, [pc, #4]	; (d438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    d432:	4313      	orrs	r3, r2
    d434:	608b      	str	r3, [r1, #8]
    d436:	e00b      	b.n	d450 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    d438:	40023800 	.word	0x40023800
    d43c:	40007000 	.word	0x40007000
    d440:	0ffffcff 	.word	0x0ffffcff
    d444:	4bb3      	ldr	r3, [pc, #716]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d446:	689b      	ldr	r3, [r3, #8]
    d448:	4ab2      	ldr	r2, [pc, #712]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d44a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    d44e:	6093      	str	r3, [r2, #8]
    d450:	4bb0      	ldr	r3, [pc, #704]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    d454:	687b      	ldr	r3, [r7, #4]
    d456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d458:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d45c:	49ad      	ldr	r1, [pc, #692]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d45e:	4313      	orrs	r3, r2
    d460:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
    d462:	687b      	ldr	r3, [r7, #4]
    d464:	681b      	ldr	r3, [r3, #0]
    d466:	f003 0310 	and.w	r3, r3, #16
    d46a:	2b00      	cmp	r3, #0
    d46c:	d010      	beq.n	d490 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
    d46e:	4ba9      	ldr	r3, [pc, #676]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d474:	4aa7      	ldr	r2, [pc, #668]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d47a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    d47e:	4ba5      	ldr	r3, [pc, #660]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d480:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    d484:	687b      	ldr	r3, [r7, #4]
    d486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d488:	49a2      	ldr	r1, [pc, #648]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d48a:	4313      	orrs	r3, r2
    d48c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
    d490:	687b      	ldr	r3, [r7, #4]
    d492:	681b      	ldr	r3, [r3, #0]
    d494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    d498:	2b00      	cmp	r3, #0
    d49a:	d00a      	beq.n	d4b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
    d49c:	4b9d      	ldr	r3, [pc, #628]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d4a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
    d4a6:	687b      	ldr	r3, [r7, #4]
    d4a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d4aa:	499a      	ldr	r1, [pc, #616]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d4ac:	4313      	orrs	r3, r2
    d4ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
    d4b2:	687b      	ldr	r3, [r7, #4]
    d4b4:	681b      	ldr	r3, [r3, #0]
    d4b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d00a      	beq.n	d4d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
    d4be:	4b95      	ldr	r3, [pc, #596]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d4c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    d4cc:	4991      	ldr	r1, [pc, #580]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d4ce:	4313      	orrs	r3, r2
    d4d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
    d4d4:	687b      	ldr	r3, [r7, #4]
    d4d6:	681b      	ldr	r3, [r3, #0]
    d4d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    d4dc:	2b00      	cmp	r3, #0
    d4de:	d00a      	beq.n	d4f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
    d4e0:	4b8c      	ldr	r3, [pc, #560]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d4e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    d4ea:	687b      	ldr	r3, [r7, #4]
    d4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    d4ee:	4989      	ldr	r1, [pc, #548]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d4f0:	4313      	orrs	r3, r2
    d4f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
    d4f6:	687b      	ldr	r3, [r7, #4]
    d4f8:	681b      	ldr	r3, [r3, #0]
    d4fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d4fe:	2b00      	cmp	r3, #0
    d500:	d00a      	beq.n	d518 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
    d502:	4b84      	ldr	r3, [pc, #528]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d508:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
    d50c:	687b      	ldr	r3, [r7, #4]
    d50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    d510:	4980      	ldr	r1, [pc, #512]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d512:	4313      	orrs	r3, r2
    d514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
    d518:	687b      	ldr	r3, [r7, #4]
    d51a:	681b      	ldr	r3, [r3, #0]
    d51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d520:	2b00      	cmp	r3, #0
    d522:	d00a      	beq.n	d53a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
    d524:	4b7b      	ldr	r3, [pc, #492]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d52a:	f023 0203 	bic.w	r2, r3, #3
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d532:	4978      	ldr	r1, [pc, #480]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d534:	4313      	orrs	r3, r2
    d536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
    d53a:	687b      	ldr	r3, [r7, #4]
    d53c:	681b      	ldr	r3, [r3, #0]
    d53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d542:	2b00      	cmp	r3, #0
    d544:	d00a      	beq.n	d55c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
    d546:	4b73      	ldr	r3, [pc, #460]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d54c:	f023 020c 	bic.w	r2, r3, #12
    d550:	687b      	ldr	r3, [r7, #4]
    d552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    d554:	496f      	ldr	r1, [pc, #444]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d556:	4313      	orrs	r3, r2
    d558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
    d55c:	687b      	ldr	r3, [r7, #4]
    d55e:	681b      	ldr	r3, [r3, #0]
    d560:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d564:	2b00      	cmp	r3, #0
    d566:	d00a      	beq.n	d57e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
    d568:	4b6a      	ldr	r3, [pc, #424]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d56e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
    d572:	687b      	ldr	r3, [r7, #4]
    d574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d576:	4967      	ldr	r1, [pc, #412]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d578:	4313      	orrs	r3, r2
    d57a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
    d57e:	687b      	ldr	r3, [r7, #4]
    d580:	681b      	ldr	r3, [r3, #0]
    d582:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d586:	2b00      	cmp	r3, #0
    d588:	d00a      	beq.n	d5a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
    d58a:	4b62      	ldr	r3, [pc, #392]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d590:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    d594:	687b      	ldr	r3, [r7, #4]
    d596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    d598:	495e      	ldr	r1, [pc, #376]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d59a:	4313      	orrs	r3, r2
    d59c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
    d5a0:	687b      	ldr	r3, [r7, #4]
    d5a2:	681b      	ldr	r3, [r3, #0]
    d5a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d5a8:	2b00      	cmp	r3, #0
    d5aa:	d00a      	beq.n	d5c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
    d5ac:	4b59      	ldr	r3, [pc, #356]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d5b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
    d5b6:	687b      	ldr	r3, [r7, #4]
    d5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d5ba:	4956      	ldr	r1, [pc, #344]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d5bc:	4313      	orrs	r3, r2
    d5be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
    d5c2:	687b      	ldr	r3, [r7, #4]
    d5c4:	681b      	ldr	r3, [r3, #0]
    d5c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	d00a      	beq.n	d5e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
    d5ce:	4b51      	ldr	r3, [pc, #324]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d5d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
    d5d8:	687b      	ldr	r3, [r7, #4]
    d5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d5dc:	494d      	ldr	r1, [pc, #308]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d5de:	4313      	orrs	r3, r2
    d5e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
    d5e4:	687b      	ldr	r3, [r7, #4]
    d5e6:	681b      	ldr	r3, [r3, #0]
    d5e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    d5ec:	2b00      	cmp	r3, #0
    d5ee:	d00a      	beq.n	d606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
    d5f0:	4b48      	ldr	r3, [pc, #288]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d5f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    d5fe:	4945      	ldr	r1, [pc, #276]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d600:	4313      	orrs	r3, r2
    d602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
    d606:	687b      	ldr	r3, [r7, #4]
    d608:	681b      	ldr	r3, [r3, #0]
    d60a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    d60e:	2b00      	cmp	r3, #0
    d610:	d00a      	beq.n	d628 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
    d612:	4b40      	ldr	r3, [pc, #256]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d618:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
    d61c:	687b      	ldr	r3, [r7, #4]
    d61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d620:	493c      	ldr	r1, [pc, #240]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d622:	4313      	orrs	r3, r2
    d624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
    d628:	687b      	ldr	r3, [r7, #4]
    d62a:	681b      	ldr	r3, [r3, #0]
    d62c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    d630:	2b00      	cmp	r3, #0
    d632:	d00a      	beq.n	d64a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
    d634:	4b37      	ldr	r3, [pc, #220]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d63a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
    d63e:	687b      	ldr	r3, [r7, #4]
    d640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    d642:	4934      	ldr	r1, [pc, #208]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d644:	4313      	orrs	r3, r2
    d646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
    d64a:	687b      	ldr	r3, [r7, #4]
    d64c:	681b      	ldr	r3, [r3, #0]
    d64e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    d652:	2b00      	cmp	r3, #0
    d654:	d011      	beq.n	d67a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
    d656:	4b2f      	ldr	r3, [pc, #188]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d65c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
    d660:	687b      	ldr	r3, [r7, #4]
    d662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    d664:	492b      	ldr	r1, [pc, #172]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d666:	4313      	orrs	r3, r2
    d668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    d66c:	687b      	ldr	r3, [r7, #4]
    d66e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    d670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
    d674:	d101      	bne.n	d67a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
    d676:	2301      	movs	r3, #1
    d678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
    d67a:	687b      	ldr	r3, [r7, #4]
    d67c:	681b      	ldr	r3, [r3, #0]
    d67e:	f003 0308 	and.w	r3, r3, #8
    d682:	2b00      	cmp	r3, #0
    d684:	d001      	beq.n	d68a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
    d686:	2301      	movs	r3, #1
    d688:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
    d68a:	687b      	ldr	r3, [r7, #4]
    d68c:	681b      	ldr	r3, [r3, #0]
    d68e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    d692:	2b00      	cmp	r3, #0
    d694:	d00a      	beq.n	d6ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
    d696:	4b1f      	ldr	r3, [pc, #124]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d69c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    d6a4:	491b      	ldr	r1, [pc, #108]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d6a6:	4313      	orrs	r3, r2
    d6a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
    d6ac:	687b      	ldr	r3, [r7, #4]
    d6ae:	681b      	ldr	r3, [r3, #0]
    d6b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    d6b4:	2b00      	cmp	r3, #0
    d6b6:	d00b      	beq.n	d6d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
    d6b8:	4b16      	ldr	r3, [pc, #88]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d6be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    d6c2:	687b      	ldr	r3, [r7, #4]
    d6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    d6c8:	4912      	ldr	r1, [pc, #72]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d6ca:	4313      	orrs	r3, r2
    d6cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
    d6d0:	687b      	ldr	r3, [r7, #4]
    d6d2:	681b      	ldr	r3, [r3, #0]
    d6d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    d6d8:	2b00      	cmp	r3, #0
    d6da:	d00b      	beq.n	d6f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
    d6dc:	4b0d      	ldr	r3, [pc, #52]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d6e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
    d6e6:	687b      	ldr	r3, [r7, #4]
    d6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d6ec:	4909      	ldr	r1, [pc, #36]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d6ee:	4313      	orrs	r3, r2
    d6f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
    d6f4:	687b      	ldr	r3, [r7, #4]
    d6f6:	681b      	ldr	r3, [r3, #0]
    d6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d00f      	beq.n	d720 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
    d700:	4b04      	ldr	r3, [pc, #16]	; (d714 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
    d702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d706:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
    d70a:	687b      	ldr	r3, [r7, #4]
    d70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d710:	e002      	b.n	d718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    d712:	bf00      	nop
    d714:	40023800 	.word	0x40023800
    d718:	4985      	ldr	r1, [pc, #532]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d71a:	4313      	orrs	r3, r2
    d71c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
    d720:	687b      	ldr	r3, [r7, #4]
    d722:	681b      	ldr	r3, [r3, #0]
    d724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    d728:	2b00      	cmp	r3, #0
    d72a:	d00b      	beq.n	d744 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
    d72c:	4b80      	ldr	r3, [pc, #512]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d72e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d732:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
    d736:	687b      	ldr	r3, [r7, #4]
    d738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d73c:	497c      	ldr	r1, [pc, #496]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d73e:	4313      	orrs	r3, r2
    d740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
    d744:	69fb      	ldr	r3, [r7, #28]
    d746:	2b01      	cmp	r3, #1
    d748:	d005      	beq.n	d756 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    d74a:	687b      	ldr	r3, [r7, #4]
    d74c:	681b      	ldr	r3, [r3, #0]
    d74e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d752:	f040 80d6 	bne.w	d902 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
    d756:	4b76      	ldr	r3, [pc, #472]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d758:	681b      	ldr	r3, [r3, #0]
    d75a:	4a75      	ldr	r2, [pc, #468]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d75c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
    d760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    d762:	f7fd fc71 	bl	b048 <HAL_GetTick>
    d766:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
    d768:	e008      	b.n	d77c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
    d76a:	f7fd fc6d 	bl	b048 <HAL_GetTick>
    d76e:	4602      	mov	r2, r0
    d770:	697b      	ldr	r3, [r7, #20]
    d772:	1ad3      	subs	r3, r2, r3
    d774:	2b64      	cmp	r3, #100	; 0x64
    d776:	d901      	bls.n	d77c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
    d778:	2303      	movs	r3, #3
    d77a:	e194      	b.n	daa6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
    d77c:	4b6c      	ldr	r3, [pc, #432]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d77e:	681b      	ldr	r3, [r3, #0]
    d780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    d784:	2b00      	cmp	r3, #0
    d786:	d1f0      	bne.n	d76a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
    d788:	687b      	ldr	r3, [r7, #4]
    d78a:	681b      	ldr	r3, [r3, #0]
    d78c:	f003 0301 	and.w	r3, r3, #1
    d790:	2b00      	cmp	r3, #0
    d792:	d021      	beq.n	d7d8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    d794:	687b      	ldr	r3, [r7, #4]
    d796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d798:	2b00      	cmp	r3, #0
    d79a:	d11d      	bne.n	d7d8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
    d79c:	4b64      	ldr	r3, [pc, #400]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d7a2:	0c1b      	lsrs	r3, r3, #16
    d7a4:	f003 0303 	and.w	r3, r3, #3
    d7a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
    d7aa:	4b61      	ldr	r3, [pc, #388]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d7b0:	0e1b      	lsrs	r3, r3, #24
    d7b2:	f003 030f 	and.w	r3, r3, #15
    d7b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
    d7b8:	687b      	ldr	r3, [r7, #4]
    d7ba:	685b      	ldr	r3, [r3, #4]
    d7bc:	019a      	lsls	r2, r3, #6
    d7be:	693b      	ldr	r3, [r7, #16]
    d7c0:	041b      	lsls	r3, r3, #16
    d7c2:	431a      	orrs	r2, r3
    d7c4:	68fb      	ldr	r3, [r7, #12]
    d7c6:	061b      	lsls	r3, r3, #24
    d7c8:	431a      	orrs	r2, r3
    d7ca:	687b      	ldr	r3, [r7, #4]
    d7cc:	689b      	ldr	r3, [r3, #8]
    d7ce:	071b      	lsls	r3, r3, #28
    d7d0:	4957      	ldr	r1, [pc, #348]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d7d2:	4313      	orrs	r3, r2
    d7d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
    d7d8:	687b      	ldr	r3, [r7, #4]
    d7da:	681b      	ldr	r3, [r3, #0]
    d7dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    d7e0:	2b00      	cmp	r3, #0
    d7e2:	d004      	beq.n	d7ee <HAL_RCCEx_PeriphCLKConfig+0x586>
    d7e4:	687b      	ldr	r3, [r7, #4]
    d7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d7e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    d7ec:	d00a      	beq.n	d804 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
    d7ee:	687b      	ldr	r3, [r7, #4]
    d7f0:	681b      	ldr	r3, [r3, #0]
    d7f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
    d7f6:	2b00      	cmp	r3, #0
    d7f8:	d02e      	beq.n	d858 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
    d7fa:	687b      	ldr	r3, [r7, #4]
    d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d7fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    d802:	d129      	bne.n	d858 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
    d804:	4b4a      	ldr	r3, [pc, #296]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d80a:	0c1b      	lsrs	r3, r3, #16
    d80c:	f003 0303 	and.w	r3, r3, #3
    d810:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
    d812:	4b47      	ldr	r3, [pc, #284]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d818:	0f1b      	lsrs	r3, r3, #28
    d81a:	f003 0307 	and.w	r3, r3, #7
    d81e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
    d820:	687b      	ldr	r3, [r7, #4]
    d822:	685b      	ldr	r3, [r3, #4]
    d824:	019a      	lsls	r2, r3, #6
    d826:	693b      	ldr	r3, [r7, #16]
    d828:	041b      	lsls	r3, r3, #16
    d82a:	431a      	orrs	r2, r3
    d82c:	687b      	ldr	r3, [r7, #4]
    d82e:	68db      	ldr	r3, [r3, #12]
    d830:	061b      	lsls	r3, r3, #24
    d832:	431a      	orrs	r2, r3
    d834:	68fb      	ldr	r3, [r7, #12]
    d836:	071b      	lsls	r3, r3, #28
    d838:	493d      	ldr	r1, [pc, #244]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d83a:	4313      	orrs	r3, r2
    d83c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    d840:	4b3b      	ldr	r3, [pc, #236]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d846:	f023 021f 	bic.w	r2, r3, #31
    d84a:	687b      	ldr	r3, [r7, #4]
    d84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d84e:	3b01      	subs	r3, #1
    d850:	4937      	ldr	r1, [pc, #220]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d852:	4313      	orrs	r3, r2
    d854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
    d858:	687b      	ldr	r3, [r7, #4]
    d85a:	681b      	ldr	r3, [r3, #0]
    d85c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    d860:	2b00      	cmp	r3, #0
    d862:	d01d      	beq.n	d8a0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
    d864:	4b32      	ldr	r3, [pc, #200]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d86a:	0e1b      	lsrs	r3, r3, #24
    d86c:	f003 030f 	and.w	r3, r3, #15
    d870:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
    d872:	4b2f      	ldr	r3, [pc, #188]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d878:	0f1b      	lsrs	r3, r3, #28
    d87a:	f003 0307 	and.w	r3, r3, #7
    d87e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
    d880:	687b      	ldr	r3, [r7, #4]
    d882:	685b      	ldr	r3, [r3, #4]
    d884:	019a      	lsls	r2, r3, #6
    d886:	687b      	ldr	r3, [r7, #4]
    d888:	691b      	ldr	r3, [r3, #16]
    d88a:	041b      	lsls	r3, r3, #16
    d88c:	431a      	orrs	r2, r3
    d88e:	693b      	ldr	r3, [r7, #16]
    d890:	061b      	lsls	r3, r3, #24
    d892:	431a      	orrs	r2, r3
    d894:	68fb      	ldr	r3, [r7, #12]
    d896:	071b      	lsls	r3, r3, #28
    d898:	4925      	ldr	r1, [pc, #148]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d89a:	4313      	orrs	r3, r2
    d89c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
    d8a0:	687b      	ldr	r3, [r7, #4]
    d8a2:	681b      	ldr	r3, [r3, #0]
    d8a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    d8a8:	2b00      	cmp	r3, #0
    d8aa:	d011      	beq.n	d8d0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    d8ac:	687b      	ldr	r3, [r7, #4]
    d8ae:	685b      	ldr	r3, [r3, #4]
    d8b0:	019a      	lsls	r2, r3, #6
    d8b2:	687b      	ldr	r3, [r7, #4]
    d8b4:	691b      	ldr	r3, [r3, #16]
    d8b6:	041b      	lsls	r3, r3, #16
    d8b8:	431a      	orrs	r2, r3
    d8ba:	687b      	ldr	r3, [r7, #4]
    d8bc:	68db      	ldr	r3, [r3, #12]
    d8be:	061b      	lsls	r3, r3, #24
    d8c0:	431a      	orrs	r2, r3
    d8c2:	687b      	ldr	r3, [r7, #4]
    d8c4:	689b      	ldr	r3, [r3, #8]
    d8c6:	071b      	lsls	r3, r3, #28
    d8c8:	4919      	ldr	r1, [pc, #100]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d8ca:	4313      	orrs	r3, r2
    d8cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
    d8d0:	4b17      	ldr	r3, [pc, #92]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d8d2:	681b      	ldr	r3, [r3, #0]
    d8d4:	4a16      	ldr	r2, [pc, #88]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d8d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    d8da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    d8dc:	f7fd fbb4 	bl	b048 <HAL_GetTick>
    d8e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
    d8e2:	e008      	b.n	d8f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
    d8e4:	f7fd fbb0 	bl	b048 <HAL_GetTick>
    d8e8:	4602      	mov	r2, r0
    d8ea:	697b      	ldr	r3, [r7, #20]
    d8ec:	1ad3      	subs	r3, r2, r3
    d8ee:	2b64      	cmp	r3, #100	; 0x64
    d8f0:	d901      	bls.n	d8f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
    d8f2:	2303      	movs	r3, #3
    d8f4:	e0d7      	b.n	daa6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
    d8f6:	4b0e      	ldr	r3, [pc, #56]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d8f8:	681b      	ldr	r3, [r3, #0]
    d8fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    d8fe:	2b00      	cmp	r3, #0
    d900:	d0f0      	beq.n	d8e4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
    d902:	69bb      	ldr	r3, [r7, #24]
    d904:	2b01      	cmp	r3, #1
    d906:	f040 80cd 	bne.w	daa4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
    d90a:	4b09      	ldr	r3, [pc, #36]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d90c:	681b      	ldr	r3, [r3, #0]
    d90e:	4a08      	ldr	r2, [pc, #32]	; (d930 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    d910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    d914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    d916:	f7fd fb97 	bl	b048 <HAL_GetTick>
    d91a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    d91c:	e00a      	b.n	d934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
    d91e:	f7fd fb93 	bl	b048 <HAL_GetTick>
    d922:	4602      	mov	r2, r0
    d924:	697b      	ldr	r3, [r7, #20]
    d926:	1ad3      	subs	r3, r2, r3
    d928:	2b64      	cmp	r3, #100	; 0x64
    d92a:	d903      	bls.n	d934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
    d92c:	2303      	movs	r3, #3
    d92e:	e0ba      	b.n	daa6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    d930:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    d934:	4b5e      	ldr	r3, [pc, #376]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    d936:	681b      	ldr	r3, [r3, #0]
    d938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d93c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    d940:	d0ed      	beq.n	d91e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	681b      	ldr	r3, [r3, #0]
    d946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    d94a:	2b00      	cmp	r3, #0
    d94c:	d003      	beq.n	d956 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    d94e:	687b      	ldr	r3, [r7, #4]
    d950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d952:	2b00      	cmp	r3, #0
    d954:	d009      	beq.n	d96a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
    d956:	687b      	ldr	r3, [r7, #4]
    d958:	681b      	ldr	r3, [r3, #0]
    d95a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
    d95e:	2b00      	cmp	r3, #0
    d960:	d02e      	beq.n	d9c0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
    d962:	687b      	ldr	r3, [r7, #4]
    d964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d966:	2b00      	cmp	r3, #0
    d968:	d12a      	bne.n	d9c0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
    d96a:	4b51      	ldr	r3, [pc, #324]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    d96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d970:	0c1b      	lsrs	r3, r3, #16
    d972:	f003 0303 	and.w	r3, r3, #3
    d976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
    d978:	4b4d      	ldr	r3, [pc, #308]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    d97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d97e:	0f1b      	lsrs	r3, r3, #28
    d980:	f003 0307 	and.w	r3, r3, #7
    d984:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
    d986:	687b      	ldr	r3, [r7, #4]
    d988:	695b      	ldr	r3, [r3, #20]
    d98a:	019a      	lsls	r2, r3, #6
    d98c:	693b      	ldr	r3, [r7, #16]
    d98e:	041b      	lsls	r3, r3, #16
    d990:	431a      	orrs	r2, r3
    d992:	687b      	ldr	r3, [r7, #4]
    d994:	699b      	ldr	r3, [r3, #24]
    d996:	061b      	lsls	r3, r3, #24
    d998:	431a      	orrs	r2, r3
    d99a:	68fb      	ldr	r3, [r7, #12]
    d99c:	071b      	lsls	r3, r3, #28
    d99e:	4944      	ldr	r1, [pc, #272]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    d9a0:	4313      	orrs	r3, r2
    d9a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    d9a6:	4b42      	ldr	r3, [pc, #264]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    d9a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d9ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d9b4:	3b01      	subs	r3, #1
    d9b6:	021b      	lsls	r3, r3, #8
    d9b8:	493d      	ldr	r1, [pc, #244]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    d9ba:	4313      	orrs	r3, r2
    d9bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
    d9c0:	687b      	ldr	r3, [r7, #4]
    d9c2:	681b      	ldr	r3, [r3, #0]
    d9c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    d9c8:	2b00      	cmp	r3, #0
    d9ca:	d022      	beq.n	da12 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    d9cc:	687b      	ldr	r3, [r7, #4]
    d9ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    d9d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
    d9d4:	d11d      	bne.n	da12 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
    d9d6:	4b36      	ldr	r3, [pc, #216]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    d9d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d9dc:	0e1b      	lsrs	r3, r3, #24
    d9de:	f003 030f 	and.w	r3, r3, #15
    d9e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
    d9e4:	4b32      	ldr	r3, [pc, #200]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    d9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d9ea:	0f1b      	lsrs	r3, r3, #28
    d9ec:	f003 0307 	and.w	r3, r3, #7
    d9f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    d9f2:	687b      	ldr	r3, [r7, #4]
    d9f4:	695b      	ldr	r3, [r3, #20]
    d9f6:	019a      	lsls	r2, r3, #6
    d9f8:	687b      	ldr	r3, [r7, #4]
    d9fa:	6a1b      	ldr	r3, [r3, #32]
    d9fc:	041b      	lsls	r3, r3, #16
    d9fe:	431a      	orrs	r2, r3
    da00:	693b      	ldr	r3, [r7, #16]
    da02:	061b      	lsls	r3, r3, #24
    da04:	431a      	orrs	r2, r3
    da06:	68fb      	ldr	r3, [r7, #12]
    da08:	071b      	lsls	r3, r3, #28
    da0a:	4929      	ldr	r1, [pc, #164]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da0c:	4313      	orrs	r3, r2
    da0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
    da12:	687b      	ldr	r3, [r7, #4]
    da14:	681b      	ldr	r3, [r3, #0]
    da16:	f003 0308 	and.w	r3, r3, #8
    da1a:	2b00      	cmp	r3, #0
    da1c:	d028      	beq.n	da70 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
    da1e:	4b24      	ldr	r3, [pc, #144]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    da24:	0e1b      	lsrs	r3, r3, #24
    da26:	f003 030f 	and.w	r3, r3, #15
    da2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
    da2c:	4b20      	ldr	r3, [pc, #128]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    da32:	0c1b      	lsrs	r3, r3, #16
    da34:	f003 0303 	and.w	r3, r3, #3
    da38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
    da3a:	687b      	ldr	r3, [r7, #4]
    da3c:	695b      	ldr	r3, [r3, #20]
    da3e:	019a      	lsls	r2, r3, #6
    da40:	68fb      	ldr	r3, [r7, #12]
    da42:	041b      	lsls	r3, r3, #16
    da44:	431a      	orrs	r2, r3
    da46:	693b      	ldr	r3, [r7, #16]
    da48:	061b      	lsls	r3, r3, #24
    da4a:	431a      	orrs	r2, r3
    da4c:	687b      	ldr	r3, [r7, #4]
    da4e:	69db      	ldr	r3, [r3, #28]
    da50:	071b      	lsls	r3, r3, #28
    da52:	4917      	ldr	r1, [pc, #92]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da54:	4313      	orrs	r3, r2
    da56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    da5a:	4b15      	ldr	r3, [pc, #84]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    da60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
    da64:	687b      	ldr	r3, [r7, #4]
    da66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    da68:	4911      	ldr	r1, [pc, #68]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da6a:	4313      	orrs	r3, r2
    da6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
    da70:	4b0f      	ldr	r3, [pc, #60]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da72:	681b      	ldr	r3, [r3, #0]
    da74:	4a0e      	ldr	r2, [pc, #56]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    da7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    da7c:	f7fd fae4 	bl	b048 <HAL_GetTick>
    da80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    da82:	e008      	b.n	da96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
    da84:	f7fd fae0 	bl	b048 <HAL_GetTick>
    da88:	4602      	mov	r2, r0
    da8a:	697b      	ldr	r3, [r7, #20]
    da8c:	1ad3      	subs	r3, r2, r3
    da8e:	2b64      	cmp	r3, #100	; 0x64
    da90:	d901      	bls.n	da96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
    da92:	2303      	movs	r3, #3
    da94:	e007      	b.n	daa6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    da96:	4b06      	ldr	r3, [pc, #24]	; (dab0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
    da98:	681b      	ldr	r3, [r3, #0]
    da9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    da9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    daa2:	d1ef      	bne.n	da84 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
    daa4:	2300      	movs	r3, #0
}
    daa6:	4618      	mov	r0, r3
    daa8:	3720      	adds	r7, #32
    daaa:	46bd      	mov	sp, r7
    daac:	bd80      	pop	{r7, pc}
    daae:	bf00      	nop
    dab0:	40023800 	.word	0x40023800

0000dab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
    dab4:	b580      	push	{r7, lr}
    dab6:	b084      	sub	sp, #16
    dab8:	af00      	add	r7, sp, #0
    daba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
    dabc:	687b      	ldr	r3, [r7, #4]
    dabe:	2b00      	cmp	r3, #0
    dac0:	d101      	bne.n	dac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
    dac2:	2301      	movs	r3, #1
    dac4:	e084      	b.n	dbd0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    dac6:	687b      	ldr	r3, [r7, #4]
    dac8:	2200      	movs	r2, #0
    daca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
    dacc:	687b      	ldr	r3, [r7, #4]
    dace:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    dad2:	b2db      	uxtb	r3, r3
    dad4:	2b00      	cmp	r3, #0
    dad6:	d106      	bne.n	dae6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
    dad8:	687b      	ldr	r3, [r7, #4]
    dada:	2200      	movs	r2, #0
    dadc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
    dae0:	6878      	ldr	r0, [r7, #4]
    dae2:	f7fb f9df 	bl	8ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
    dae6:	687b      	ldr	r3, [r7, #4]
    dae8:	2202      	movs	r2, #2
    daea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
    daee:	687b      	ldr	r3, [r7, #4]
    daf0:	681b      	ldr	r3, [r3, #0]
    daf2:	681a      	ldr	r2, [r3, #0]
    daf4:	687b      	ldr	r3, [r7, #4]
    daf6:	681b      	ldr	r3, [r3, #0]
    daf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    dafc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
    dafe:	687b      	ldr	r3, [r7, #4]
    db00:	68db      	ldr	r3, [r3, #12]
    db02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    db06:	d902      	bls.n	db0e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
    db08:	2300      	movs	r3, #0
    db0a:	60fb      	str	r3, [r7, #12]
    db0c:	e002      	b.n	db14 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
    db0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    db12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
    db14:	687b      	ldr	r3, [r7, #4]
    db16:	68db      	ldr	r3, [r3, #12]
    db18:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
    db1c:	d007      	beq.n	db2e <HAL_SPI_Init+0x7a>
    db1e:	687b      	ldr	r3, [r7, #4]
    db20:	68db      	ldr	r3, [r3, #12]
    db22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    db26:	d002      	beq.n	db2e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    db28:	687b      	ldr	r3, [r7, #4]
    db2a:	2200      	movs	r2, #0
    db2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
    db2e:	687b      	ldr	r3, [r7, #4]
    db30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    db32:	2b00      	cmp	r3, #0
    db34:	d10b      	bne.n	db4e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
    db36:	687b      	ldr	r3, [r7, #4]
    db38:	68db      	ldr	r3, [r3, #12]
    db3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    db3e:	d903      	bls.n	db48 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
    db40:	687b      	ldr	r3, [r7, #4]
    db42:	2202      	movs	r2, #2
    db44:	631a      	str	r2, [r3, #48]	; 0x30
    db46:	e002      	b.n	db4e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
    db48:	687b      	ldr	r3, [r7, #4]
    db4a:	2201      	movs	r2, #1
    db4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
    db4e:	687b      	ldr	r3, [r7, #4]
    db50:	685a      	ldr	r2, [r3, #4]
    db52:	687b      	ldr	r3, [r7, #4]
    db54:	689b      	ldr	r3, [r3, #8]
    db56:	431a      	orrs	r2, r3
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	691b      	ldr	r3, [r3, #16]
    db5c:	431a      	orrs	r2, r3
    db5e:	687b      	ldr	r3, [r7, #4]
    db60:	695b      	ldr	r3, [r3, #20]
    db62:	431a      	orrs	r2, r3
    db64:	687b      	ldr	r3, [r7, #4]
    db66:	699b      	ldr	r3, [r3, #24]
    db68:	f403 7300 	and.w	r3, r3, #512	; 0x200
    db6c:	431a      	orrs	r2, r3
    db6e:	687b      	ldr	r3, [r7, #4]
    db70:	69db      	ldr	r3, [r3, #28]
    db72:	431a      	orrs	r2, r3
    db74:	687b      	ldr	r3, [r7, #4]
    db76:	6a1b      	ldr	r3, [r3, #32]
    db78:	ea42 0103 	orr.w	r1, r2, r3
    db7c:	687b      	ldr	r3, [r7, #4]
    db7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db80:	687b      	ldr	r3, [r7, #4]
    db82:	681b      	ldr	r3, [r3, #0]
    db84:	430a      	orrs	r2, r1
    db86:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
    db88:	687b      	ldr	r3, [r7, #4]
    db8a:	699b      	ldr	r3, [r3, #24]
    db8c:	0c1b      	lsrs	r3, r3, #16
    db8e:	f003 0204 	and.w	r2, r3, #4
    db92:	687b      	ldr	r3, [r7, #4]
    db94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    db96:	431a      	orrs	r2, r3
    db98:	687b      	ldr	r3, [r7, #4]
    db9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    db9c:	431a      	orrs	r2, r3
    db9e:	687b      	ldr	r3, [r7, #4]
    dba0:	68db      	ldr	r3, [r3, #12]
    dba2:	ea42 0103 	orr.w	r1, r2, r3
    dba6:	687b      	ldr	r3, [r7, #4]
    dba8:	681b      	ldr	r3, [r3, #0]
    dbaa:	68fa      	ldr	r2, [r7, #12]
    dbac:	430a      	orrs	r2, r1
    dbae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	681b      	ldr	r3, [r3, #0]
    dbb4:	69da      	ldr	r2, [r3, #28]
    dbb6:	687b      	ldr	r3, [r7, #4]
    dbb8:	681b      	ldr	r3, [r3, #0]
    dbba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    dbbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
    dbc0:	687b      	ldr	r3, [r7, #4]
    dbc2:	2200      	movs	r2, #0
    dbc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
    dbc6:	687b      	ldr	r3, [r7, #4]
    dbc8:	2201      	movs	r2, #1
    dbca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
    dbce:	2300      	movs	r3, #0
}
    dbd0:	4618      	mov	r0, r3
    dbd2:	3710      	adds	r7, #16
    dbd4:	46bd      	mov	sp, r7
    dbd6:	bd80      	pop	{r7, pc}

0000dbd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
    dbd8:	b580      	push	{r7, lr}
    dbda:	b08a      	sub	sp, #40	; 0x28
    dbdc:	af00      	add	r7, sp, #0
    dbde:	60f8      	str	r0, [r7, #12]
    dbe0:	60b9      	str	r1, [r7, #8]
    dbe2:	607a      	str	r2, [r7, #4]
    dbe4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
    dbe6:	2301      	movs	r3, #1
    dbe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
    dbea:	2300      	movs	r3, #0
    dbec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
    dbf0:	68fb      	ldr	r3, [r7, #12]
    dbf2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    dbf6:	2b01      	cmp	r3, #1
    dbf8:	d101      	bne.n	dbfe <HAL_SPI_TransmitReceive+0x26>
    dbfa:	2302      	movs	r3, #2
    dbfc:	e1fb      	b.n	dff6 <HAL_SPI_TransmitReceive+0x41e>
    dbfe:	68fb      	ldr	r3, [r7, #12]
    dc00:	2201      	movs	r2, #1
    dc02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
    dc06:	f7fd fa1f 	bl	b048 <HAL_GetTick>
    dc0a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
    dc0c:	68fb      	ldr	r3, [r7, #12]
    dc0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    dc12:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
    dc14:	68fb      	ldr	r3, [r7, #12]
    dc16:	685b      	ldr	r3, [r3, #4]
    dc18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
    dc1a:	887b      	ldrh	r3, [r7, #2]
    dc1c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
    dc1e:	887b      	ldrh	r3, [r7, #2]
    dc20:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
    dc22:	7efb      	ldrb	r3, [r7, #27]
    dc24:	2b01      	cmp	r3, #1
    dc26:	d00e      	beq.n	dc46 <HAL_SPI_TransmitReceive+0x6e>
    dc28:	697b      	ldr	r3, [r7, #20]
    dc2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    dc2e:	d106      	bne.n	dc3e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
    dc30:	68fb      	ldr	r3, [r7, #12]
    dc32:	689b      	ldr	r3, [r3, #8]
    dc34:	2b00      	cmp	r3, #0
    dc36:	d102      	bne.n	dc3e <HAL_SPI_TransmitReceive+0x66>
    dc38:	7efb      	ldrb	r3, [r7, #27]
    dc3a:	2b04      	cmp	r3, #4
    dc3c:	d003      	beq.n	dc46 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
    dc3e:	2302      	movs	r3, #2
    dc40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
    dc44:	e1cd      	b.n	dfe2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
    dc46:	68bb      	ldr	r3, [r7, #8]
    dc48:	2b00      	cmp	r3, #0
    dc4a:	d005      	beq.n	dc58 <HAL_SPI_TransmitReceive+0x80>
    dc4c:	687b      	ldr	r3, [r7, #4]
    dc4e:	2b00      	cmp	r3, #0
    dc50:	d002      	beq.n	dc58 <HAL_SPI_TransmitReceive+0x80>
    dc52:	887b      	ldrh	r3, [r7, #2]
    dc54:	2b00      	cmp	r3, #0
    dc56:	d103      	bne.n	dc60 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
    dc58:	2301      	movs	r3, #1
    dc5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
    dc5e:	e1c0      	b.n	dfe2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
    dc60:	68fb      	ldr	r3, [r7, #12]
    dc62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    dc66:	b2db      	uxtb	r3, r3
    dc68:	2b04      	cmp	r3, #4
    dc6a:	d003      	beq.n	dc74 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
    dc6c:	68fb      	ldr	r3, [r7, #12]
    dc6e:	2205      	movs	r2, #5
    dc70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
    dc74:	68fb      	ldr	r3, [r7, #12]
    dc76:	2200      	movs	r2, #0
    dc78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
    dc7a:	68fb      	ldr	r3, [r7, #12]
    dc7c:	687a      	ldr	r2, [r7, #4]
    dc7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
    dc80:	68fb      	ldr	r3, [r7, #12]
    dc82:	887a      	ldrh	r2, [r7, #2]
    dc84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
    dc88:	68fb      	ldr	r3, [r7, #12]
    dc8a:	887a      	ldrh	r2, [r7, #2]
    dc8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
    dc90:	68fb      	ldr	r3, [r7, #12]
    dc92:	68ba      	ldr	r2, [r7, #8]
    dc94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
    dc96:	68fb      	ldr	r3, [r7, #12]
    dc98:	887a      	ldrh	r2, [r7, #2]
    dc9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
    dc9c:	68fb      	ldr	r3, [r7, #12]
    dc9e:	887a      	ldrh	r2, [r7, #2]
    dca0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
    dca2:	68fb      	ldr	r3, [r7, #12]
    dca4:	2200      	movs	r2, #0
    dca6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
    dca8:	68fb      	ldr	r3, [r7, #12]
    dcaa:	2200      	movs	r2, #0
    dcac:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
    dcae:	68fb      	ldr	r3, [r7, #12]
    dcb0:	68db      	ldr	r3, [r3, #12]
    dcb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    dcb6:	d802      	bhi.n	dcbe <HAL_SPI_TransmitReceive+0xe6>
    dcb8:	8a3b      	ldrh	r3, [r7, #16]
    dcba:	2b01      	cmp	r3, #1
    dcbc:	d908      	bls.n	dcd0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
    dcbe:	68fb      	ldr	r3, [r7, #12]
    dcc0:	681b      	ldr	r3, [r3, #0]
    dcc2:	685a      	ldr	r2, [r3, #4]
    dcc4:	68fb      	ldr	r3, [r7, #12]
    dcc6:	681b      	ldr	r3, [r3, #0]
    dcc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    dccc:	605a      	str	r2, [r3, #4]
    dcce:	e007      	b.n	dce0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
    dcd0:	68fb      	ldr	r3, [r7, #12]
    dcd2:	681b      	ldr	r3, [r3, #0]
    dcd4:	685a      	ldr	r2, [r3, #4]
    dcd6:	68fb      	ldr	r3, [r7, #12]
    dcd8:	681b      	ldr	r3, [r3, #0]
    dcda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    dcde:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
    dce0:	68fb      	ldr	r3, [r7, #12]
    dce2:	681b      	ldr	r3, [r3, #0]
    dce4:	681b      	ldr	r3, [r3, #0]
    dce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dcea:	2b40      	cmp	r3, #64	; 0x40
    dcec:	d007      	beq.n	dcfe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
    dcee:	68fb      	ldr	r3, [r7, #12]
    dcf0:	681b      	ldr	r3, [r3, #0]
    dcf2:	681a      	ldr	r2, [r3, #0]
    dcf4:	68fb      	ldr	r3, [r7, #12]
    dcf6:	681b      	ldr	r3, [r3, #0]
    dcf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dcfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
    dcfe:	68fb      	ldr	r3, [r7, #12]
    dd00:	68db      	ldr	r3, [r3, #12]
    dd02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    dd06:	d97c      	bls.n	de02 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
    dd08:	68fb      	ldr	r3, [r7, #12]
    dd0a:	685b      	ldr	r3, [r3, #4]
    dd0c:	2b00      	cmp	r3, #0
    dd0e:	d002      	beq.n	dd16 <HAL_SPI_TransmitReceive+0x13e>
    dd10:	8a7b      	ldrh	r3, [r7, #18]
    dd12:	2b01      	cmp	r3, #1
    dd14:	d169      	bne.n	ddea <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
    dd16:	68fb      	ldr	r3, [r7, #12]
    dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dd1a:	881a      	ldrh	r2, [r3, #0]
    dd1c:	68fb      	ldr	r3, [r7, #12]
    dd1e:	681b      	ldr	r3, [r3, #0]
    dd20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
    dd22:	68fb      	ldr	r3, [r7, #12]
    dd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dd26:	1c9a      	adds	r2, r3, #2
    dd28:	68fb      	ldr	r3, [r7, #12]
    dd2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
    dd2c:	68fb      	ldr	r3, [r7, #12]
    dd2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    dd30:	b29b      	uxth	r3, r3
    dd32:	3b01      	subs	r3, #1
    dd34:	b29a      	uxth	r2, r3
    dd36:	68fb      	ldr	r3, [r7, #12]
    dd38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    dd3a:	e056      	b.n	ddea <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
    dd3c:	68fb      	ldr	r3, [r7, #12]
    dd3e:	681b      	ldr	r3, [r3, #0]
    dd40:	689b      	ldr	r3, [r3, #8]
    dd42:	f003 0302 	and.w	r3, r3, #2
    dd46:	2b02      	cmp	r3, #2
    dd48:	d11b      	bne.n	dd82 <HAL_SPI_TransmitReceive+0x1aa>
    dd4a:	68fb      	ldr	r3, [r7, #12]
    dd4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    dd4e:	b29b      	uxth	r3, r3
    dd50:	2b00      	cmp	r3, #0
    dd52:	d016      	beq.n	dd82 <HAL_SPI_TransmitReceive+0x1aa>
    dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dd56:	2b01      	cmp	r3, #1
    dd58:	d113      	bne.n	dd82 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
    dd5a:	68fb      	ldr	r3, [r7, #12]
    dd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dd5e:	881a      	ldrh	r2, [r3, #0]
    dd60:	68fb      	ldr	r3, [r7, #12]
    dd62:	681b      	ldr	r3, [r3, #0]
    dd64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
    dd66:	68fb      	ldr	r3, [r7, #12]
    dd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dd6a:	1c9a      	adds	r2, r3, #2
    dd6c:	68fb      	ldr	r3, [r7, #12]
    dd6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
    dd70:	68fb      	ldr	r3, [r7, #12]
    dd72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    dd74:	b29b      	uxth	r3, r3
    dd76:	3b01      	subs	r3, #1
    dd78:	b29a      	uxth	r2, r3
    dd7a:	68fb      	ldr	r3, [r7, #12]
    dd7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
    dd7e:	2300      	movs	r3, #0
    dd80:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
    dd82:	68fb      	ldr	r3, [r7, #12]
    dd84:	681b      	ldr	r3, [r3, #0]
    dd86:	689b      	ldr	r3, [r3, #8]
    dd88:	f003 0301 	and.w	r3, r3, #1
    dd8c:	2b01      	cmp	r3, #1
    dd8e:	d11c      	bne.n	ddca <HAL_SPI_TransmitReceive+0x1f2>
    dd90:	68fb      	ldr	r3, [r7, #12]
    dd92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    dd96:	b29b      	uxth	r3, r3
    dd98:	2b00      	cmp	r3, #0
    dd9a:	d016      	beq.n	ddca <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
    dd9c:	68fb      	ldr	r3, [r7, #12]
    dd9e:	681b      	ldr	r3, [r3, #0]
    dda0:	68da      	ldr	r2, [r3, #12]
    dda2:	68fb      	ldr	r3, [r7, #12]
    dda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dda6:	b292      	uxth	r2, r2
    dda8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
    ddaa:	68fb      	ldr	r3, [r7, #12]
    ddac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ddae:	1c9a      	adds	r2, r3, #2
    ddb0:	68fb      	ldr	r3, [r7, #12]
    ddb2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
    ddb4:	68fb      	ldr	r3, [r7, #12]
    ddb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    ddba:	b29b      	uxth	r3, r3
    ddbc:	3b01      	subs	r3, #1
    ddbe:	b29a      	uxth	r2, r3
    ddc0:	68fb      	ldr	r3, [r7, #12]
    ddc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
    ddc6:	2301      	movs	r3, #1
    ddc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
    ddca:	f7fd f93d 	bl	b048 <HAL_GetTick>
    ddce:	4602      	mov	r2, r0
    ddd0:	69fb      	ldr	r3, [r7, #28]
    ddd2:	1ad3      	subs	r3, r2, r3
    ddd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ddd6:	429a      	cmp	r2, r3
    ddd8:	d807      	bhi.n	ddea <HAL_SPI_TransmitReceive+0x212>
    ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dddc:	f1b3 3fff 	cmp.w	r3, #4294967295
    dde0:	d003      	beq.n	ddea <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
    dde2:	2303      	movs	r3, #3
    dde4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
    dde8:	e0fb      	b.n	dfe2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    ddea:	68fb      	ldr	r3, [r7, #12]
    ddec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    ddee:	b29b      	uxth	r3, r3
    ddf0:	2b00      	cmp	r3, #0
    ddf2:	d1a3      	bne.n	dd3c <HAL_SPI_TransmitReceive+0x164>
    ddf4:	68fb      	ldr	r3, [r7, #12]
    ddf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    ddfa:	b29b      	uxth	r3, r3
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	d19d      	bne.n	dd3c <HAL_SPI_TransmitReceive+0x164>
    de00:	e0df      	b.n	dfc2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
    de02:	68fb      	ldr	r3, [r7, #12]
    de04:	685b      	ldr	r3, [r3, #4]
    de06:	2b00      	cmp	r3, #0
    de08:	d003      	beq.n	de12 <HAL_SPI_TransmitReceive+0x23a>
    de0a:	8a7b      	ldrh	r3, [r7, #18]
    de0c:	2b01      	cmp	r3, #1
    de0e:	f040 80cb 	bne.w	dfa8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
    de12:	68fb      	ldr	r3, [r7, #12]
    de14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    de16:	b29b      	uxth	r3, r3
    de18:	2b01      	cmp	r3, #1
    de1a:	d912      	bls.n	de42 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
    de1c:	68fb      	ldr	r3, [r7, #12]
    de1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    de20:	881a      	ldrh	r2, [r3, #0]
    de22:	68fb      	ldr	r3, [r7, #12]
    de24:	681b      	ldr	r3, [r3, #0]
    de26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
    de28:	68fb      	ldr	r3, [r7, #12]
    de2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    de2c:	1c9a      	adds	r2, r3, #2
    de2e:	68fb      	ldr	r3, [r7, #12]
    de30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
    de32:	68fb      	ldr	r3, [r7, #12]
    de34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    de36:	b29b      	uxth	r3, r3
    de38:	3b02      	subs	r3, #2
    de3a:	b29a      	uxth	r2, r3
    de3c:	68fb      	ldr	r3, [r7, #12]
    de3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    de40:	e0b2      	b.n	dfa8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
    de42:	68fb      	ldr	r3, [r7, #12]
    de44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    de46:	68fb      	ldr	r3, [r7, #12]
    de48:	681b      	ldr	r3, [r3, #0]
    de4a:	330c      	adds	r3, #12
    de4c:	7812      	ldrb	r2, [r2, #0]
    de4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
    de50:	68fb      	ldr	r3, [r7, #12]
    de52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    de54:	1c5a      	adds	r2, r3, #1
    de56:	68fb      	ldr	r3, [r7, #12]
    de58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
    de5a:	68fb      	ldr	r3, [r7, #12]
    de5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    de5e:	b29b      	uxth	r3, r3
    de60:	3b01      	subs	r3, #1
    de62:	b29a      	uxth	r2, r3
    de64:	68fb      	ldr	r3, [r7, #12]
    de66:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    de68:	e09e      	b.n	dfa8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
    de6a:	68fb      	ldr	r3, [r7, #12]
    de6c:	681b      	ldr	r3, [r3, #0]
    de6e:	689b      	ldr	r3, [r3, #8]
    de70:	f003 0302 	and.w	r3, r3, #2
    de74:	2b02      	cmp	r3, #2
    de76:	d134      	bne.n	dee2 <HAL_SPI_TransmitReceive+0x30a>
    de78:	68fb      	ldr	r3, [r7, #12]
    de7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    de7c:	b29b      	uxth	r3, r3
    de7e:	2b00      	cmp	r3, #0
    de80:	d02f      	beq.n	dee2 <HAL_SPI_TransmitReceive+0x30a>
    de82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    de84:	2b01      	cmp	r3, #1
    de86:	d12c      	bne.n	dee2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
    de88:	68fb      	ldr	r3, [r7, #12]
    de8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    de8c:	b29b      	uxth	r3, r3
    de8e:	2b01      	cmp	r3, #1
    de90:	d912      	bls.n	deb8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
    de92:	68fb      	ldr	r3, [r7, #12]
    de94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    de96:	881a      	ldrh	r2, [r3, #0]
    de98:	68fb      	ldr	r3, [r7, #12]
    de9a:	681b      	ldr	r3, [r3, #0]
    de9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
    de9e:	68fb      	ldr	r3, [r7, #12]
    dea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dea2:	1c9a      	adds	r2, r3, #2
    dea4:	68fb      	ldr	r3, [r7, #12]
    dea6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
    dea8:	68fb      	ldr	r3, [r7, #12]
    deaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    deac:	b29b      	uxth	r3, r3
    deae:	3b02      	subs	r3, #2
    deb0:	b29a      	uxth	r2, r3
    deb2:	68fb      	ldr	r3, [r7, #12]
    deb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    deb6:	e012      	b.n	dede <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
    deb8:	68fb      	ldr	r3, [r7, #12]
    deba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    debc:	68fb      	ldr	r3, [r7, #12]
    debe:	681b      	ldr	r3, [r3, #0]
    dec0:	330c      	adds	r3, #12
    dec2:	7812      	ldrb	r2, [r2, #0]
    dec4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
    dec6:	68fb      	ldr	r3, [r7, #12]
    dec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    deca:	1c5a      	adds	r2, r3, #1
    decc:	68fb      	ldr	r3, [r7, #12]
    dece:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
    ded0:	68fb      	ldr	r3, [r7, #12]
    ded2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    ded4:	b29b      	uxth	r3, r3
    ded6:	3b01      	subs	r3, #1
    ded8:	b29a      	uxth	r2, r3
    deda:	68fb      	ldr	r3, [r7, #12]
    dedc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
    dede:	2300      	movs	r3, #0
    dee0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
    dee2:	68fb      	ldr	r3, [r7, #12]
    dee4:	681b      	ldr	r3, [r3, #0]
    dee6:	689b      	ldr	r3, [r3, #8]
    dee8:	f003 0301 	and.w	r3, r3, #1
    deec:	2b01      	cmp	r3, #1
    deee:	d148      	bne.n	df82 <HAL_SPI_TransmitReceive+0x3aa>
    def0:	68fb      	ldr	r3, [r7, #12]
    def2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    def6:	b29b      	uxth	r3, r3
    def8:	2b00      	cmp	r3, #0
    defa:	d042      	beq.n	df82 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
    defc:	68fb      	ldr	r3, [r7, #12]
    defe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    df02:	b29b      	uxth	r3, r3
    df04:	2b01      	cmp	r3, #1
    df06:	d923      	bls.n	df50 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
    df08:	68fb      	ldr	r3, [r7, #12]
    df0a:	681b      	ldr	r3, [r3, #0]
    df0c:	68da      	ldr	r2, [r3, #12]
    df0e:	68fb      	ldr	r3, [r7, #12]
    df10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    df12:	b292      	uxth	r2, r2
    df14:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
    df16:	68fb      	ldr	r3, [r7, #12]
    df18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    df1a:	1c9a      	adds	r2, r3, #2
    df1c:	68fb      	ldr	r3, [r7, #12]
    df1e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
    df20:	68fb      	ldr	r3, [r7, #12]
    df22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    df26:	b29b      	uxth	r3, r3
    df28:	3b02      	subs	r3, #2
    df2a:	b29a      	uxth	r2, r3
    df2c:	68fb      	ldr	r3, [r7, #12]
    df2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
    df32:	68fb      	ldr	r3, [r7, #12]
    df34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    df38:	b29b      	uxth	r3, r3
    df3a:	2b01      	cmp	r3, #1
    df3c:	d81f      	bhi.n	df7e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
    df3e:	68fb      	ldr	r3, [r7, #12]
    df40:	681b      	ldr	r3, [r3, #0]
    df42:	685a      	ldr	r2, [r3, #4]
    df44:	68fb      	ldr	r3, [r7, #12]
    df46:	681b      	ldr	r3, [r3, #0]
    df48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    df4c:	605a      	str	r2, [r3, #4]
    df4e:	e016      	b.n	df7e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
    df50:	68fb      	ldr	r3, [r7, #12]
    df52:	681b      	ldr	r3, [r3, #0]
    df54:	f103 020c 	add.w	r2, r3, #12
    df58:	68fb      	ldr	r3, [r7, #12]
    df5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    df5c:	7812      	ldrb	r2, [r2, #0]
    df5e:	b2d2      	uxtb	r2, r2
    df60:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
    df62:	68fb      	ldr	r3, [r7, #12]
    df64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    df66:	1c5a      	adds	r2, r3, #1
    df68:	68fb      	ldr	r3, [r7, #12]
    df6a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
    df6c:	68fb      	ldr	r3, [r7, #12]
    df6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    df72:	b29b      	uxth	r3, r3
    df74:	3b01      	subs	r3, #1
    df76:	b29a      	uxth	r2, r3
    df78:	68fb      	ldr	r3, [r7, #12]
    df7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
    df7e:	2301      	movs	r3, #1
    df80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
    df82:	f7fd f861 	bl	b048 <HAL_GetTick>
    df86:	4602      	mov	r2, r0
    df88:	69fb      	ldr	r3, [r7, #28]
    df8a:	1ad3      	subs	r3, r2, r3
    df8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    df8e:	429a      	cmp	r2, r3
    df90:	d803      	bhi.n	df9a <HAL_SPI_TransmitReceive+0x3c2>
    df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    df94:	f1b3 3fff 	cmp.w	r3, #4294967295
    df98:	d102      	bne.n	dfa0 <HAL_SPI_TransmitReceive+0x3c8>
    df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    df9c:	2b00      	cmp	r3, #0
    df9e:	d103      	bne.n	dfa8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
    dfa0:	2303      	movs	r3, #3
    dfa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
    dfa6:	e01c      	b.n	dfe2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    dfa8:	68fb      	ldr	r3, [r7, #12]
    dfaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    dfac:	b29b      	uxth	r3, r3
    dfae:	2b00      	cmp	r3, #0
    dfb0:	f47f af5b 	bne.w	de6a <HAL_SPI_TransmitReceive+0x292>
    dfb4:	68fb      	ldr	r3, [r7, #12]
    dfb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    dfba:	b29b      	uxth	r3, r3
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	f47f af54 	bne.w	de6a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
    dfc2:	69fa      	ldr	r2, [r7, #28]
    dfc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    dfc6:	68f8      	ldr	r0, [r7, #12]
    dfc8:	f000 fbbb 	bl	e742 <SPI_EndRxTxTransaction>
    dfcc:	4603      	mov	r3, r0
    dfce:	2b00      	cmp	r3, #0
    dfd0:	d006      	beq.n	dfe0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
    dfd2:	2301      	movs	r3, #1
    dfd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    dfd8:	68fb      	ldr	r3, [r7, #12]
    dfda:	2220      	movs	r2, #32
    dfdc:	661a      	str	r2, [r3, #96]	; 0x60
    dfde:	e000      	b.n	dfe2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
    dfe0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
    dfe2:	68fb      	ldr	r3, [r7, #12]
    dfe4:	2201      	movs	r2, #1
    dfe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
    dfea:	68fb      	ldr	r3, [r7, #12]
    dfec:	2200      	movs	r2, #0
    dfee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
    dff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
    dff6:	4618      	mov	r0, r3
    dff8:	3728      	adds	r7, #40	; 0x28
    dffa:	46bd      	mov	sp, r7
    dffc:	bd80      	pop	{r7, pc}
	...

0000e000 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
    e000:	b580      	push	{r7, lr}
    e002:	b086      	sub	sp, #24
    e004:	af00      	add	r7, sp, #0
    e006:	60f8      	str	r0, [r7, #12]
    e008:	60b9      	str	r1, [r7, #8]
    e00a:	607a      	str	r2, [r7, #4]
    e00c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
    e00e:	2300      	movs	r3, #0
    e010:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
    e012:	68fb      	ldr	r3, [r7, #12]
    e014:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    e018:	2b01      	cmp	r3, #1
    e01a:	d101      	bne.n	e020 <HAL_SPI_TransmitReceive_DMA+0x20>
    e01c:	2302      	movs	r3, #2
    e01e:	e16c      	b.n	e2fa <HAL_SPI_TransmitReceive_DMA+0x2fa>
    e020:	68fb      	ldr	r3, [r7, #12]
    e022:	2201      	movs	r2, #1
    e024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
    e028:	68fb      	ldr	r3, [r7, #12]
    e02a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    e02e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
    e030:	68fb      	ldr	r3, [r7, #12]
    e032:	685b      	ldr	r3, [r3, #4]
    e034:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
    e036:	7dbb      	ldrb	r3, [r7, #22]
    e038:	2b01      	cmp	r3, #1
    e03a:	d00d      	beq.n	e058 <HAL_SPI_TransmitReceive_DMA+0x58>
    e03c:	693b      	ldr	r3, [r7, #16]
    e03e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    e042:	d106      	bne.n	e052 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
    e044:	68fb      	ldr	r3, [r7, #12]
    e046:	689b      	ldr	r3, [r3, #8]
    e048:	2b00      	cmp	r3, #0
    e04a:	d102      	bne.n	e052 <HAL_SPI_TransmitReceive_DMA+0x52>
    e04c:	7dbb      	ldrb	r3, [r7, #22]
    e04e:	2b04      	cmp	r3, #4
    e050:	d002      	beq.n	e058 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
    e052:	2302      	movs	r3, #2
    e054:	75fb      	strb	r3, [r7, #23]
    goto error;
    e056:	e14b      	b.n	e2f0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
    e058:	68bb      	ldr	r3, [r7, #8]
    e05a:	2b00      	cmp	r3, #0
    e05c:	d005      	beq.n	e06a <HAL_SPI_TransmitReceive_DMA+0x6a>
    e05e:	687b      	ldr	r3, [r7, #4]
    e060:	2b00      	cmp	r3, #0
    e062:	d002      	beq.n	e06a <HAL_SPI_TransmitReceive_DMA+0x6a>
    e064:	887b      	ldrh	r3, [r7, #2]
    e066:	2b00      	cmp	r3, #0
    e068:	d102      	bne.n	e070 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
    e06a:	2301      	movs	r3, #1
    e06c:	75fb      	strb	r3, [r7, #23]
    goto error;
    e06e:	e13f      	b.n	e2f0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
    e070:	68fb      	ldr	r3, [r7, #12]
    e072:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    e076:	b2db      	uxtb	r3, r3
    e078:	2b04      	cmp	r3, #4
    e07a:	d003      	beq.n	e084 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
    e07c:	68fb      	ldr	r3, [r7, #12]
    e07e:	2205      	movs	r2, #5
    e080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
    e084:	68fb      	ldr	r3, [r7, #12]
    e086:	2200      	movs	r2, #0
    e088:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
    e08a:	68fb      	ldr	r3, [r7, #12]
    e08c:	68ba      	ldr	r2, [r7, #8]
    e08e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
    e090:	68fb      	ldr	r3, [r7, #12]
    e092:	887a      	ldrh	r2, [r7, #2]
    e094:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
    e096:	68fb      	ldr	r3, [r7, #12]
    e098:	887a      	ldrh	r2, [r7, #2]
    e09a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
    e09c:	68fb      	ldr	r3, [r7, #12]
    e09e:	687a      	ldr	r2, [r7, #4]
    e0a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
    e0a2:	68fb      	ldr	r3, [r7, #12]
    e0a4:	887a      	ldrh	r2, [r7, #2]
    e0a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
    e0aa:	68fb      	ldr	r3, [r7, #12]
    e0ac:	887a      	ldrh	r2, [r7, #2]
    e0ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
    e0b2:	68fb      	ldr	r3, [r7, #12]
    e0b4:	2200      	movs	r2, #0
    e0b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
    e0b8:	68fb      	ldr	r3, [r7, #12]
    e0ba:	2200      	movs	r2, #0
    e0bc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
    e0be:	68fb      	ldr	r3, [r7, #12]
    e0c0:	681b      	ldr	r3, [r3, #0]
    e0c2:	685a      	ldr	r2, [r3, #4]
    e0c4:	68fb      	ldr	r3, [r7, #12]
    e0c6:	681b      	ldr	r3, [r3, #0]
    e0c8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
    e0cc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
    e0ce:	68fb      	ldr	r3, [r7, #12]
    e0d0:	68db      	ldr	r3, [r3, #12]
    e0d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    e0d6:	d908      	bls.n	e0ea <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
    e0d8:	68fb      	ldr	r3, [r7, #12]
    e0da:	681b      	ldr	r3, [r3, #0]
    e0dc:	685a      	ldr	r2, [r3, #4]
    e0de:	68fb      	ldr	r3, [r7, #12]
    e0e0:	681b      	ldr	r3, [r3, #0]
    e0e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    e0e6:	605a      	str	r2, [r3, #4]
    e0e8:	e06f      	b.n	e1ca <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
    e0ea:	68fb      	ldr	r3, [r7, #12]
    e0ec:	681b      	ldr	r3, [r3, #0]
    e0ee:	685a      	ldr	r2, [r3, #4]
    e0f0:	68fb      	ldr	r3, [r7, #12]
    e0f2:	681b      	ldr	r3, [r3, #0]
    e0f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    e0f8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
    e0fa:	68fb      	ldr	r3, [r7, #12]
    e0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e0fe:	699b      	ldr	r3, [r3, #24]
    e100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e104:	d126      	bne.n	e154 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
    e106:	68fb      	ldr	r3, [r7, #12]
    e108:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    e10a:	f003 0301 	and.w	r3, r3, #1
    e10e:	2b00      	cmp	r3, #0
    e110:	d10f      	bne.n	e132 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
    e112:	68fb      	ldr	r3, [r7, #12]
    e114:	681b      	ldr	r3, [r3, #0]
    e116:	685a      	ldr	r2, [r3, #4]
    e118:	68fb      	ldr	r3, [r7, #12]
    e11a:	681b      	ldr	r3, [r3, #0]
    e11c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    e120:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
    e122:	68fb      	ldr	r3, [r7, #12]
    e124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e126:	b29b      	uxth	r3, r3
    e128:	085b      	lsrs	r3, r3, #1
    e12a:	b29a      	uxth	r2, r3
    e12c:	68fb      	ldr	r3, [r7, #12]
    e12e:	87da      	strh	r2, [r3, #62]	; 0x3e
    e130:	e010      	b.n	e154 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
    e132:	68fb      	ldr	r3, [r7, #12]
    e134:	681b      	ldr	r3, [r3, #0]
    e136:	685a      	ldr	r2, [r3, #4]
    e138:	68fb      	ldr	r3, [r7, #12]
    e13a:	681b      	ldr	r3, [r3, #0]
    e13c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    e140:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
    e142:	68fb      	ldr	r3, [r7, #12]
    e144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e146:	b29b      	uxth	r3, r3
    e148:	085b      	lsrs	r3, r3, #1
    e14a:	b29b      	uxth	r3, r3
    e14c:	3301      	adds	r3, #1
    e14e:	b29a      	uxth	r2, r3
    e150:	68fb      	ldr	r3, [r7, #12]
    e152:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
    e154:	68fb      	ldr	r3, [r7, #12]
    e156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e158:	699b      	ldr	r3, [r3, #24]
    e15a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e15e:	d134      	bne.n	e1ca <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
    e160:	68fb      	ldr	r3, [r7, #12]
    e162:	681b      	ldr	r3, [r3, #0]
    e164:	685a      	ldr	r2, [r3, #4]
    e166:	68fb      	ldr	r3, [r7, #12]
    e168:	681b      	ldr	r3, [r3, #0]
    e16a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    e16e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
    e170:	68fb      	ldr	r3, [r7, #12]
    e172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    e176:	b29b      	uxth	r3, r3
    e178:	f003 0301 	and.w	r3, r3, #1
    e17c:	2b00      	cmp	r3, #0
    e17e:	d111      	bne.n	e1a4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
    e180:	68fb      	ldr	r3, [r7, #12]
    e182:	681b      	ldr	r3, [r3, #0]
    e184:	685a      	ldr	r2, [r3, #4]
    e186:	68fb      	ldr	r3, [r7, #12]
    e188:	681b      	ldr	r3, [r3, #0]
    e18a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    e18e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
    e190:	68fb      	ldr	r3, [r7, #12]
    e192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    e196:	b29b      	uxth	r3, r3
    e198:	085b      	lsrs	r3, r3, #1
    e19a:	b29a      	uxth	r2, r3
    e19c:	68fb      	ldr	r3, [r7, #12]
    e19e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    e1a2:	e012      	b.n	e1ca <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
    e1a4:	68fb      	ldr	r3, [r7, #12]
    e1a6:	681b      	ldr	r3, [r3, #0]
    e1a8:	685a      	ldr	r2, [r3, #4]
    e1aa:	68fb      	ldr	r3, [r7, #12]
    e1ac:	681b      	ldr	r3, [r3, #0]
    e1ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e1b2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
    e1b4:	68fb      	ldr	r3, [r7, #12]
    e1b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    e1ba:	b29b      	uxth	r3, r3
    e1bc:	085b      	lsrs	r3, r3, #1
    e1be:	b29b      	uxth	r3, r3
    e1c0:	3301      	adds	r3, #1
    e1c2:	b29a      	uxth	r2, r3
    e1c4:	68fb      	ldr	r3, [r7, #12]
    e1c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
    e1ca:	68fb      	ldr	r3, [r7, #12]
    e1cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    e1d0:	b2db      	uxtb	r3, r3
    e1d2:	2b04      	cmp	r3, #4
    e1d4:	d108      	bne.n	e1e8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
    e1d6:	68fb      	ldr	r3, [r7, #12]
    e1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e1da:	4a4a      	ldr	r2, [pc, #296]	; (e304 <HAL_SPI_TransmitReceive_DMA+0x304>)
    e1dc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
    e1de:	68fb      	ldr	r3, [r7, #12]
    e1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e1e2:	4a49      	ldr	r2, [pc, #292]	; (e308 <HAL_SPI_TransmitReceive_DMA+0x308>)
    e1e4:	63da      	str	r2, [r3, #60]	; 0x3c
    e1e6:	e007      	b.n	e1f8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
    e1e8:	68fb      	ldr	r3, [r7, #12]
    e1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e1ec:	4a47      	ldr	r2, [pc, #284]	; (e30c <HAL_SPI_TransmitReceive_DMA+0x30c>)
    e1ee:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
    e1f0:	68fb      	ldr	r3, [r7, #12]
    e1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e1f4:	4a46      	ldr	r2, [pc, #280]	; (e310 <HAL_SPI_TransmitReceive_DMA+0x310>)
    e1f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
    e1f8:	68fb      	ldr	r3, [r7, #12]
    e1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e1fc:	4a45      	ldr	r2, [pc, #276]	; (e314 <HAL_SPI_TransmitReceive_DMA+0x314>)
    e1fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
    e200:	68fb      	ldr	r3, [r7, #12]
    e202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e204:	2200      	movs	r2, #0
    e206:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
    e208:	68fb      	ldr	r3, [r7, #12]
    e20a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    e20c:	68fb      	ldr	r3, [r7, #12]
    e20e:	681b      	ldr	r3, [r3, #0]
    e210:	330c      	adds	r3, #12
    e212:	4619      	mov	r1, r3
    e214:	68fb      	ldr	r3, [r7, #12]
    e216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e218:	461a      	mov	r2, r3
    e21a:	68fb      	ldr	r3, [r7, #12]
    e21c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    e220:	b29b      	uxth	r3, r3
    e222:	f7fd fe85 	bl	bf30 <HAL_DMA_Start_IT>
    e226:	4603      	mov	r3, r0
    e228:	2b00      	cmp	r3, #0
    e22a:	d00c      	beq.n	e246 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
    e22c:	68fb      	ldr	r3, [r7, #12]
    e22e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e230:	f043 0210 	orr.w	r2, r3, #16
    e234:	68fb      	ldr	r3, [r7, #12]
    e236:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
    e238:	2301      	movs	r3, #1
    e23a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
    e23c:	68fb      	ldr	r3, [r7, #12]
    e23e:	2201      	movs	r2, #1
    e240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
    e244:	e054      	b.n	e2f0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
    e246:	68fb      	ldr	r3, [r7, #12]
    e248:	681b      	ldr	r3, [r3, #0]
    e24a:	685a      	ldr	r2, [r3, #4]
    e24c:	68fb      	ldr	r3, [r7, #12]
    e24e:	681b      	ldr	r3, [r3, #0]
    e250:	f042 0201 	orr.w	r2, r2, #1
    e254:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
    e256:	68fb      	ldr	r3, [r7, #12]
    e258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e25a:	2200      	movs	r2, #0
    e25c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
    e25e:	68fb      	ldr	r3, [r7, #12]
    e260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e262:	2200      	movs	r2, #0
    e264:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
    e266:	68fb      	ldr	r3, [r7, #12]
    e268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e26a:	2200      	movs	r2, #0
    e26c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
    e26e:	68fb      	ldr	r3, [r7, #12]
    e270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e272:	2200      	movs	r2, #0
    e274:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
    e276:	68fb      	ldr	r3, [r7, #12]
    e278:	6d58      	ldr	r0, [r3, #84]	; 0x54
    e27a:	68fb      	ldr	r3, [r7, #12]
    e27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e27e:	4619      	mov	r1, r3
    e280:	68fb      	ldr	r3, [r7, #12]
    e282:	681b      	ldr	r3, [r3, #0]
    e284:	330c      	adds	r3, #12
    e286:	461a      	mov	r2, r3
    e288:	68fb      	ldr	r3, [r7, #12]
    e28a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e28c:	b29b      	uxth	r3, r3
    e28e:	f7fd fe4f 	bl	bf30 <HAL_DMA_Start_IT>
    e292:	4603      	mov	r3, r0
    e294:	2b00      	cmp	r3, #0
    e296:	d00c      	beq.n	e2b2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
    e298:	68fb      	ldr	r3, [r7, #12]
    e29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e29c:	f043 0210 	orr.w	r2, r3, #16
    e2a0:	68fb      	ldr	r3, [r7, #12]
    e2a2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
    e2a4:	2301      	movs	r3, #1
    e2a6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
    e2a8:	68fb      	ldr	r3, [r7, #12]
    e2aa:	2201      	movs	r2, #1
    e2ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
    e2b0:	e01e      	b.n	e2f0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
    e2b2:	68fb      	ldr	r3, [r7, #12]
    e2b4:	681b      	ldr	r3, [r3, #0]
    e2b6:	681b      	ldr	r3, [r3, #0]
    e2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e2bc:	2b40      	cmp	r3, #64	; 0x40
    e2be:	d007      	beq.n	e2d0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
    e2c0:	68fb      	ldr	r3, [r7, #12]
    e2c2:	681b      	ldr	r3, [r3, #0]
    e2c4:	681a      	ldr	r2, [r3, #0]
    e2c6:	68fb      	ldr	r3, [r7, #12]
    e2c8:	681b      	ldr	r3, [r3, #0]
    e2ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e2ce:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
    e2d0:	68fb      	ldr	r3, [r7, #12]
    e2d2:	681b      	ldr	r3, [r3, #0]
    e2d4:	685a      	ldr	r2, [r3, #4]
    e2d6:	68fb      	ldr	r3, [r7, #12]
    e2d8:	681b      	ldr	r3, [r3, #0]
    e2da:	f042 0220 	orr.w	r2, r2, #32
    e2de:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
    e2e0:	68fb      	ldr	r3, [r7, #12]
    e2e2:	681b      	ldr	r3, [r3, #0]
    e2e4:	685a      	ldr	r2, [r3, #4]
    e2e6:	68fb      	ldr	r3, [r7, #12]
    e2e8:	681b      	ldr	r3, [r3, #0]
    e2ea:	f042 0202 	orr.w	r2, r2, #2
    e2ee:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
    e2f0:	68fb      	ldr	r3, [r7, #12]
    e2f2:	2200      	movs	r2, #0
    e2f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
    e2f8:	7dfb      	ldrb	r3, [r7, #23]
}
    e2fa:	4618      	mov	r0, r3
    e2fc:	3718      	adds	r7, #24
    e2fe:	46bd      	mov	sp, r7
    e300:	bd80      	pop	{r7, pc}
    e302:	bf00      	nop
    e304:	0000e46d 	.word	0x0000e46d
    e308:	0000e355 	.word	0x0000e355
    e30c:	0000e489 	.word	0x0000e489
    e310:	0000e3db 	.word	0x0000e3db
    e314:	0000e4a5 	.word	0x0000e4a5

0000e318 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    e318:	b480      	push	{r7}
    e31a:	b083      	sub	sp, #12
    e31c:	af00      	add	r7, sp, #0
    e31e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
    e320:	bf00      	nop
    e322:	370c      	adds	r7, #12
    e324:	46bd      	mov	sp, r7
    e326:	f85d 7b04 	ldr.w	r7, [sp], #4
    e32a:	4770      	bx	lr

0000e32c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
    e32c:	b480      	push	{r7}
    e32e:	b083      	sub	sp, #12
    e330:	af00      	add	r7, sp, #0
    e332:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
    e334:	bf00      	nop
    e336:	370c      	adds	r7, #12
    e338:	46bd      	mov	sp, r7
    e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e33e:	4770      	bx	lr

0000e340 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
    e340:	b480      	push	{r7}
    e342:	b083      	sub	sp, #12
    e344:	af00      	add	r7, sp, #0
    e346:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
    e348:	bf00      	nop
    e34a:	370c      	adds	r7, #12
    e34c:	46bd      	mov	sp, r7
    e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e352:	4770      	bx	lr

0000e354 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
    e354:	b580      	push	{r7, lr}
    e356:	b084      	sub	sp, #16
    e358:	af00      	add	r7, sp, #0
    e35a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
    e35c:	687b      	ldr	r3, [r7, #4]
    e35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e360:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
    e362:	f7fc fe71 	bl	b048 <HAL_GetTick>
    e366:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
    e368:	687b      	ldr	r3, [r7, #4]
    e36a:	681b      	ldr	r3, [r3, #0]
    e36c:	681b      	ldr	r3, [r3, #0]
    e36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    e372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e376:	d02a      	beq.n	e3ce <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
    e378:	68fb      	ldr	r3, [r7, #12]
    e37a:	681b      	ldr	r3, [r3, #0]
    e37c:	685a      	ldr	r2, [r3, #4]
    e37e:	68fb      	ldr	r3, [r7, #12]
    e380:	681b      	ldr	r3, [r3, #0]
    e382:	f022 0220 	bic.w	r2, r2, #32
    e386:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
    e388:	68fb      	ldr	r3, [r7, #12]
    e38a:	681b      	ldr	r3, [r3, #0]
    e38c:	685a      	ldr	r2, [r3, #4]
    e38e:	68fb      	ldr	r3, [r7, #12]
    e390:	681b      	ldr	r3, [r3, #0]
    e392:	f022 0203 	bic.w	r2, r2, #3
    e396:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
    e398:	68ba      	ldr	r2, [r7, #8]
    e39a:	2164      	movs	r1, #100	; 0x64
    e39c:	68f8      	ldr	r0, [r7, #12]
    e39e:	f000 f978 	bl	e692 <SPI_EndRxTransaction>
    e3a2:	4603      	mov	r3, r0
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d002      	beq.n	e3ae <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    e3a8:	68fb      	ldr	r3, [r7, #12]
    e3aa:	2220      	movs	r2, #32
    e3ac:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
    e3ae:	68fb      	ldr	r3, [r7, #12]
    e3b0:	2200      	movs	r2, #0
    e3b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
    e3b6:	68fb      	ldr	r3, [r7, #12]
    e3b8:	2201      	movs	r2, #1
    e3ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
    e3be:	68fb      	ldr	r3, [r7, #12]
    e3c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e3c2:	2b00      	cmp	r3, #0
    e3c4:	d003      	beq.n	e3ce <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
    e3c6:	68f8      	ldr	r0, [r7, #12]
    e3c8:	f7fa fc68 	bl	8c9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
    e3cc:	e002      	b.n	e3d4 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
    e3ce:	68f8      	ldr	r0, [r7, #12]
    e3d0:	f7ff ffa2 	bl	e318 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
    e3d4:	3710      	adds	r7, #16
    e3d6:	46bd      	mov	sp, r7
    e3d8:	bd80      	pop	{r7, pc}

0000e3da <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
    e3da:	b580      	push	{r7, lr}
    e3dc:	b084      	sub	sp, #16
    e3de:	af00      	add	r7, sp, #0
    e3e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
    e3e2:	687b      	ldr	r3, [r7, #4]
    e3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e3e6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
    e3e8:	f7fc fe2e 	bl	b048 <HAL_GetTick>
    e3ec:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
    e3ee:	687b      	ldr	r3, [r7, #4]
    e3f0:	681b      	ldr	r3, [r3, #0]
    e3f2:	681b      	ldr	r3, [r3, #0]
    e3f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    e3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e3fc:	d030      	beq.n	e460 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
    e3fe:	68fb      	ldr	r3, [r7, #12]
    e400:	681b      	ldr	r3, [r3, #0]
    e402:	685a      	ldr	r2, [r3, #4]
    e404:	68fb      	ldr	r3, [r7, #12]
    e406:	681b      	ldr	r3, [r3, #0]
    e408:	f022 0220 	bic.w	r2, r2, #32
    e40c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
    e40e:	68ba      	ldr	r2, [r7, #8]
    e410:	2164      	movs	r1, #100	; 0x64
    e412:	68f8      	ldr	r0, [r7, #12]
    e414:	f000 f995 	bl	e742 <SPI_EndRxTxTransaction>
    e418:	4603      	mov	r3, r0
    e41a:	2b00      	cmp	r3, #0
    e41c:	d005      	beq.n	e42a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    e41e:	68fb      	ldr	r3, [r7, #12]
    e420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e422:	f043 0220 	orr.w	r2, r3, #32
    e426:	68fb      	ldr	r3, [r7, #12]
    e428:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
    e42a:	68fb      	ldr	r3, [r7, #12]
    e42c:	681b      	ldr	r3, [r3, #0]
    e42e:	685a      	ldr	r2, [r3, #4]
    e430:	68fb      	ldr	r3, [r7, #12]
    e432:	681b      	ldr	r3, [r3, #0]
    e434:	f022 0203 	bic.w	r2, r2, #3
    e438:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
    e43a:	68fb      	ldr	r3, [r7, #12]
    e43c:	2200      	movs	r2, #0
    e43e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
    e440:	68fb      	ldr	r3, [r7, #12]
    e442:	2200      	movs	r2, #0
    e444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
    e448:	68fb      	ldr	r3, [r7, #12]
    e44a:	2201      	movs	r2, #1
    e44c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
    e450:	68fb      	ldr	r3, [r7, #12]
    e452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e454:	2b00      	cmp	r3, #0
    e456:	d003      	beq.n	e460 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
    e458:	68f8      	ldr	r0, [r7, #12]
    e45a:	f7fa fc1f 	bl	8c9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
    e45e:	e002      	b.n	e466 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
    e460:	68f8      	ldr	r0, [r7, #12]
    e462:	f7fa fc0d 	bl	8c80 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
    e466:	3710      	adds	r7, #16
    e468:	46bd      	mov	sp, r7
    e46a:	bd80      	pop	{r7, pc}

0000e46c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
    e46c:	b580      	push	{r7, lr}
    e46e:	b084      	sub	sp, #16
    e470:	af00      	add	r7, sp, #0
    e472:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e478:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
    e47a:	68f8      	ldr	r0, [r7, #12]
    e47c:	f7ff ff56 	bl	e32c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
    e480:	bf00      	nop
    e482:	3710      	adds	r7, #16
    e484:	46bd      	mov	sp, r7
    e486:	bd80      	pop	{r7, pc}

0000e488 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
    e488:	b580      	push	{r7, lr}
    e48a:	b084      	sub	sp, #16
    e48c:	af00      	add	r7, sp, #0
    e48e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
    e490:	687b      	ldr	r3, [r7, #4]
    e492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e494:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
    e496:	68f8      	ldr	r0, [r7, #12]
    e498:	f7ff ff52 	bl	e340 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
    e49c:	bf00      	nop
    e49e:	3710      	adds	r7, #16
    e4a0:	46bd      	mov	sp, r7
    e4a2:	bd80      	pop	{r7, pc}

0000e4a4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
    e4a4:	b580      	push	{r7, lr}
    e4a6:	b084      	sub	sp, #16
    e4a8:	af00      	add	r7, sp, #0
    e4aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
    e4ac:	687b      	ldr	r3, [r7, #4]
    e4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e4b0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
    e4b2:	68fb      	ldr	r3, [r7, #12]
    e4b4:	681b      	ldr	r3, [r3, #0]
    e4b6:	685a      	ldr	r2, [r3, #4]
    e4b8:	68fb      	ldr	r3, [r7, #12]
    e4ba:	681b      	ldr	r3, [r3, #0]
    e4bc:	f022 0203 	bic.w	r2, r2, #3
    e4c0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
    e4c2:	68fb      	ldr	r3, [r7, #12]
    e4c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e4c6:	f043 0210 	orr.w	r2, r3, #16
    e4ca:	68fb      	ldr	r3, [r7, #12]
    e4cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
    e4ce:	68fb      	ldr	r3, [r7, #12]
    e4d0:	2201      	movs	r2, #1
    e4d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
    e4d6:	68f8      	ldr	r0, [r7, #12]
    e4d8:	f7fa fbe0 	bl	8c9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
    e4dc:	bf00      	nop
    e4de:	3710      	adds	r7, #16
    e4e0:	46bd      	mov	sp, r7
    e4e2:	bd80      	pop	{r7, pc}

0000e4e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
    e4e4:	b580      	push	{r7, lr}
    e4e6:	b084      	sub	sp, #16
    e4e8:	af00      	add	r7, sp, #0
    e4ea:	60f8      	str	r0, [r7, #12]
    e4ec:	60b9      	str	r1, [r7, #8]
    e4ee:	603b      	str	r3, [r7, #0]
    e4f0:	4613      	mov	r3, r2
    e4f2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
    e4f4:	e04c      	b.n	e590 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
    e4f6:	683b      	ldr	r3, [r7, #0]
    e4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    e4fc:	d048      	beq.n	e590 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
    e4fe:	f7fc fda3 	bl	b048 <HAL_GetTick>
    e502:	4602      	mov	r2, r0
    e504:	69bb      	ldr	r3, [r7, #24]
    e506:	1ad3      	subs	r3, r2, r3
    e508:	683a      	ldr	r2, [r7, #0]
    e50a:	429a      	cmp	r2, r3
    e50c:	d902      	bls.n	e514 <SPI_WaitFlagStateUntilTimeout+0x30>
    e50e:	683b      	ldr	r3, [r7, #0]
    e510:	2b00      	cmp	r3, #0
    e512:	d13d      	bne.n	e590 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
    e514:	68fb      	ldr	r3, [r7, #12]
    e516:	681b      	ldr	r3, [r3, #0]
    e518:	685a      	ldr	r2, [r3, #4]
    e51a:	68fb      	ldr	r3, [r7, #12]
    e51c:	681b      	ldr	r3, [r3, #0]
    e51e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
    e522:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
    e524:	68fb      	ldr	r3, [r7, #12]
    e526:	685b      	ldr	r3, [r3, #4]
    e528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    e52c:	d111      	bne.n	e552 <SPI_WaitFlagStateUntilTimeout+0x6e>
    e52e:	68fb      	ldr	r3, [r7, #12]
    e530:	689b      	ldr	r3, [r3, #8]
    e532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e536:	d004      	beq.n	e542 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
    e538:	68fb      	ldr	r3, [r7, #12]
    e53a:	689b      	ldr	r3, [r3, #8]
    e53c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e540:	d107      	bne.n	e552 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
    e542:	68fb      	ldr	r3, [r7, #12]
    e544:	681b      	ldr	r3, [r3, #0]
    e546:	681a      	ldr	r2, [r3, #0]
    e548:	68fb      	ldr	r3, [r7, #12]
    e54a:	681b      	ldr	r3, [r3, #0]
    e54c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e550:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    e552:	68fb      	ldr	r3, [r7, #12]
    e554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e55a:	d10f      	bne.n	e57c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
    e55c:	68fb      	ldr	r3, [r7, #12]
    e55e:	681b      	ldr	r3, [r3, #0]
    e560:	681a      	ldr	r2, [r3, #0]
    e562:	68fb      	ldr	r3, [r7, #12]
    e564:	681b      	ldr	r3, [r3, #0]
    e566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    e56a:	601a      	str	r2, [r3, #0]
    e56c:	68fb      	ldr	r3, [r7, #12]
    e56e:	681b      	ldr	r3, [r3, #0]
    e570:	681a      	ldr	r2, [r3, #0]
    e572:	68fb      	ldr	r3, [r7, #12]
    e574:	681b      	ldr	r3, [r3, #0]
    e576:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e57a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
    e57c:	68fb      	ldr	r3, [r7, #12]
    e57e:	2201      	movs	r2, #1
    e580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
    e584:	68fb      	ldr	r3, [r7, #12]
    e586:	2200      	movs	r2, #0
    e588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
    e58c:	2303      	movs	r3, #3
    e58e:	e00f      	b.n	e5b0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
    e590:	68fb      	ldr	r3, [r7, #12]
    e592:	681b      	ldr	r3, [r3, #0]
    e594:	689a      	ldr	r2, [r3, #8]
    e596:	68bb      	ldr	r3, [r7, #8]
    e598:	4013      	ands	r3, r2
    e59a:	68ba      	ldr	r2, [r7, #8]
    e59c:	429a      	cmp	r2, r3
    e59e:	bf0c      	ite	eq
    e5a0:	2301      	moveq	r3, #1
    e5a2:	2300      	movne	r3, #0
    e5a4:	b2db      	uxtb	r3, r3
    e5a6:	461a      	mov	r2, r3
    e5a8:	79fb      	ldrb	r3, [r7, #7]
    e5aa:	429a      	cmp	r2, r3
    e5ac:	d1a3      	bne.n	e4f6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
    e5ae:	2300      	movs	r3, #0
}
    e5b0:	4618      	mov	r0, r3
    e5b2:	3710      	adds	r7, #16
    e5b4:	46bd      	mov	sp, r7
    e5b6:	bd80      	pop	{r7, pc}

0000e5b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
    e5b8:	b580      	push	{r7, lr}
    e5ba:	b084      	sub	sp, #16
    e5bc:	af00      	add	r7, sp, #0
    e5be:	60f8      	str	r0, [r7, #12]
    e5c0:	60b9      	str	r1, [r7, #8]
    e5c2:	607a      	str	r2, [r7, #4]
    e5c4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
    e5c6:	e057      	b.n	e678 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    e5c8:	68bb      	ldr	r3, [r7, #8]
    e5ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    e5ce:	d106      	bne.n	e5de <SPI_WaitFifoStateUntilTimeout+0x26>
    e5d0:	687b      	ldr	r3, [r7, #4]
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d103      	bne.n	e5de <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    e5d6:	68fb      	ldr	r3, [r7, #12]
    e5d8:	681b      	ldr	r3, [r3, #0]
    e5da:	330c      	adds	r3, #12
    e5dc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
    e5de:	683b      	ldr	r3, [r7, #0]
    e5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    e5e4:	d048      	beq.n	e678 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
    e5e6:	f7fc fd2f 	bl	b048 <HAL_GetTick>
    e5ea:	4602      	mov	r2, r0
    e5ec:	69bb      	ldr	r3, [r7, #24]
    e5ee:	1ad3      	subs	r3, r2, r3
    e5f0:	683a      	ldr	r2, [r7, #0]
    e5f2:	429a      	cmp	r2, r3
    e5f4:	d902      	bls.n	e5fc <SPI_WaitFifoStateUntilTimeout+0x44>
    e5f6:	683b      	ldr	r3, [r7, #0]
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d13d      	bne.n	e678 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
    e5fc:	68fb      	ldr	r3, [r7, #12]
    e5fe:	681b      	ldr	r3, [r3, #0]
    e600:	685a      	ldr	r2, [r3, #4]
    e602:	68fb      	ldr	r3, [r7, #12]
    e604:	681b      	ldr	r3, [r3, #0]
    e606:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
    e60a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
    e60c:	68fb      	ldr	r3, [r7, #12]
    e60e:	685b      	ldr	r3, [r3, #4]
    e610:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    e614:	d111      	bne.n	e63a <SPI_WaitFifoStateUntilTimeout+0x82>
    e616:	68fb      	ldr	r3, [r7, #12]
    e618:	689b      	ldr	r3, [r3, #8]
    e61a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e61e:	d004      	beq.n	e62a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
    e620:	68fb      	ldr	r3, [r7, #12]
    e622:	689b      	ldr	r3, [r3, #8]
    e624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e628:	d107      	bne.n	e63a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
    e62a:	68fb      	ldr	r3, [r7, #12]
    e62c:	681b      	ldr	r3, [r3, #0]
    e62e:	681a      	ldr	r2, [r3, #0]
    e630:	68fb      	ldr	r3, [r7, #12]
    e632:	681b      	ldr	r3, [r3, #0]
    e634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e638:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    e63a:	68fb      	ldr	r3, [r7, #12]
    e63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e63e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e642:	d10f      	bne.n	e664 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
    e644:	68fb      	ldr	r3, [r7, #12]
    e646:	681b      	ldr	r3, [r3, #0]
    e648:	681a      	ldr	r2, [r3, #0]
    e64a:	68fb      	ldr	r3, [r7, #12]
    e64c:	681b      	ldr	r3, [r3, #0]
    e64e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    e652:	601a      	str	r2, [r3, #0]
    e654:	68fb      	ldr	r3, [r7, #12]
    e656:	681b      	ldr	r3, [r3, #0]
    e658:	681a      	ldr	r2, [r3, #0]
    e65a:	68fb      	ldr	r3, [r7, #12]
    e65c:	681b      	ldr	r3, [r3, #0]
    e65e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e662:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
    e664:	68fb      	ldr	r3, [r7, #12]
    e666:	2201      	movs	r2, #1
    e668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
    e66c:	68fb      	ldr	r3, [r7, #12]
    e66e:	2200      	movs	r2, #0
    e670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
    e674:	2303      	movs	r3, #3
    e676:	e008      	b.n	e68a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
    e678:	68fb      	ldr	r3, [r7, #12]
    e67a:	681b      	ldr	r3, [r3, #0]
    e67c:	689a      	ldr	r2, [r3, #8]
    e67e:	68bb      	ldr	r3, [r7, #8]
    e680:	4013      	ands	r3, r2
    e682:	687a      	ldr	r2, [r7, #4]
    e684:	429a      	cmp	r2, r3
    e686:	d19f      	bne.n	e5c8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
    e688:	2300      	movs	r3, #0
}
    e68a:	4618      	mov	r0, r3
    e68c:	3710      	adds	r7, #16
    e68e:	46bd      	mov	sp, r7
    e690:	bd80      	pop	{r7, pc}

0000e692 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
    e692:	b580      	push	{r7, lr}
    e694:	b086      	sub	sp, #24
    e696:	af02      	add	r7, sp, #8
    e698:	60f8      	str	r0, [r7, #12]
    e69a:	60b9      	str	r1, [r7, #8]
    e69c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
    e69e:	68fb      	ldr	r3, [r7, #12]
    e6a0:	685b      	ldr	r3, [r3, #4]
    e6a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    e6a6:	d111      	bne.n	e6cc <SPI_EndRxTransaction+0x3a>
    e6a8:	68fb      	ldr	r3, [r7, #12]
    e6aa:	689b      	ldr	r3, [r3, #8]
    e6ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e6b0:	d004      	beq.n	e6bc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
    e6b2:	68fb      	ldr	r3, [r7, #12]
    e6b4:	689b      	ldr	r3, [r3, #8]
    e6b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e6ba:	d107      	bne.n	e6cc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
    e6bc:	68fb      	ldr	r3, [r7, #12]
    e6be:	681b      	ldr	r3, [r3, #0]
    e6c0:	681a      	ldr	r2, [r3, #0]
    e6c2:	68fb      	ldr	r3, [r7, #12]
    e6c4:	681b      	ldr	r3, [r3, #0]
    e6c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e6ca:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
    e6cc:	687b      	ldr	r3, [r7, #4]
    e6ce:	9300      	str	r3, [sp, #0]
    e6d0:	68bb      	ldr	r3, [r7, #8]
    e6d2:	2200      	movs	r2, #0
    e6d4:	2180      	movs	r1, #128	; 0x80
    e6d6:	68f8      	ldr	r0, [r7, #12]
    e6d8:	f7ff ff04 	bl	e4e4 <SPI_WaitFlagStateUntilTimeout>
    e6dc:	4603      	mov	r3, r0
    e6de:	2b00      	cmp	r3, #0
    e6e0:	d007      	beq.n	e6f2 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    e6e2:	68fb      	ldr	r3, [r7, #12]
    e6e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e6e6:	f043 0220 	orr.w	r2, r3, #32
    e6ea:	68fb      	ldr	r3, [r7, #12]
    e6ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
    e6ee:	2303      	movs	r3, #3
    e6f0:	e023      	b.n	e73a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
    e6f2:	68fb      	ldr	r3, [r7, #12]
    e6f4:	685b      	ldr	r3, [r3, #4]
    e6f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    e6fa:	d11d      	bne.n	e738 <SPI_EndRxTransaction+0xa6>
    e6fc:	68fb      	ldr	r3, [r7, #12]
    e6fe:	689b      	ldr	r3, [r3, #8]
    e700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e704:	d004      	beq.n	e710 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
    e706:	68fb      	ldr	r3, [r7, #12]
    e708:	689b      	ldr	r3, [r3, #8]
    e70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e70e:	d113      	bne.n	e738 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    e710:	687b      	ldr	r3, [r7, #4]
    e712:	9300      	str	r3, [sp, #0]
    e714:	68bb      	ldr	r3, [r7, #8]
    e716:	2200      	movs	r2, #0
    e718:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    e71c:	68f8      	ldr	r0, [r7, #12]
    e71e:	f7ff ff4b 	bl	e5b8 <SPI_WaitFifoStateUntilTimeout>
    e722:	4603      	mov	r3, r0
    e724:	2b00      	cmp	r3, #0
    e726:	d007      	beq.n	e738 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    e728:	68fb      	ldr	r3, [r7, #12]
    e72a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e72c:	f043 0220 	orr.w	r2, r3, #32
    e730:	68fb      	ldr	r3, [r7, #12]
    e732:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
    e734:	2303      	movs	r3, #3
    e736:	e000      	b.n	e73a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
    e738:	2300      	movs	r3, #0
}
    e73a:	4618      	mov	r0, r3
    e73c:	3710      	adds	r7, #16
    e73e:	46bd      	mov	sp, r7
    e740:	bd80      	pop	{r7, pc}

0000e742 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
    e742:	b580      	push	{r7, lr}
    e744:	b086      	sub	sp, #24
    e746:	af02      	add	r7, sp, #8
    e748:	60f8      	str	r0, [r7, #12]
    e74a:	60b9      	str	r1, [r7, #8]
    e74c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    e74e:	687b      	ldr	r3, [r7, #4]
    e750:	9300      	str	r3, [sp, #0]
    e752:	68bb      	ldr	r3, [r7, #8]
    e754:	2200      	movs	r2, #0
    e756:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
    e75a:	68f8      	ldr	r0, [r7, #12]
    e75c:	f7ff ff2c 	bl	e5b8 <SPI_WaitFifoStateUntilTimeout>
    e760:	4603      	mov	r3, r0
    e762:	2b00      	cmp	r3, #0
    e764:	d007      	beq.n	e776 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    e766:	68fb      	ldr	r3, [r7, #12]
    e768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e76a:	f043 0220 	orr.w	r2, r3, #32
    e76e:	68fb      	ldr	r3, [r7, #12]
    e770:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
    e772:	2303      	movs	r3, #3
    e774:	e027      	b.n	e7c6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
    e776:	687b      	ldr	r3, [r7, #4]
    e778:	9300      	str	r3, [sp, #0]
    e77a:	68bb      	ldr	r3, [r7, #8]
    e77c:	2200      	movs	r2, #0
    e77e:	2180      	movs	r1, #128	; 0x80
    e780:	68f8      	ldr	r0, [r7, #12]
    e782:	f7ff feaf 	bl	e4e4 <SPI_WaitFlagStateUntilTimeout>
    e786:	4603      	mov	r3, r0
    e788:	2b00      	cmp	r3, #0
    e78a:	d007      	beq.n	e79c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    e78c:	68fb      	ldr	r3, [r7, #12]
    e78e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e790:	f043 0220 	orr.w	r2, r3, #32
    e794:	68fb      	ldr	r3, [r7, #12]
    e796:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
    e798:	2303      	movs	r3, #3
    e79a:	e014      	b.n	e7c6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    e79c:	687b      	ldr	r3, [r7, #4]
    e79e:	9300      	str	r3, [sp, #0]
    e7a0:	68bb      	ldr	r3, [r7, #8]
    e7a2:	2200      	movs	r2, #0
    e7a4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    e7a8:	68f8      	ldr	r0, [r7, #12]
    e7aa:	f7ff ff05 	bl	e5b8 <SPI_WaitFifoStateUntilTimeout>
    e7ae:	4603      	mov	r3, r0
    e7b0:	2b00      	cmp	r3, #0
    e7b2:	d007      	beq.n	e7c4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    e7b4:	68fb      	ldr	r3, [r7, #12]
    e7b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e7b8:	f043 0220 	orr.w	r2, r3, #32
    e7bc:	68fb      	ldr	r3, [r7, #12]
    e7be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
    e7c0:	2303      	movs	r3, #3
    e7c2:	e000      	b.n	e7c6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
    e7c4:	2300      	movs	r3, #0
}
    e7c6:	4618      	mov	r0, r3
    e7c8:	3710      	adds	r7, #16
    e7ca:	46bd      	mov	sp, r7
    e7cc:	bd80      	pop	{r7, pc}

0000e7ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
    e7ce:	b580      	push	{r7, lr}
    e7d0:	b082      	sub	sp, #8
    e7d2:	af00      	add	r7, sp, #0
    e7d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
    e7d6:	687b      	ldr	r3, [r7, #4]
    e7d8:	2b00      	cmp	r3, #0
    e7da:	d101      	bne.n	e7e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
    e7dc:	2301      	movs	r3, #1
    e7de:	e01d      	b.n	e81c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
    e7e0:	687b      	ldr	r3, [r7, #4]
    e7e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e7e6:	b2db      	uxtb	r3, r3
    e7e8:	2b00      	cmp	r3, #0
    e7ea:	d106      	bne.n	e7fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
    e7ec:	687b      	ldr	r3, [r7, #4]
    e7ee:	2200      	movs	r2, #0
    e7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
    e7f4:	6878      	ldr	r0, [r7, #4]
    e7f6:	f7fb faeb 	bl	9dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    e7fa:	687b      	ldr	r3, [r7, #4]
    e7fc:	2202      	movs	r2, #2
    e7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
    e802:	687b      	ldr	r3, [r7, #4]
    e804:	681a      	ldr	r2, [r3, #0]
    e806:	687b      	ldr	r3, [r7, #4]
    e808:	3304      	adds	r3, #4
    e80a:	4619      	mov	r1, r3
    e80c:	4610      	mov	r0, r2
    e80e:	f000 facd 	bl	edac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
    e812:	687b      	ldr	r3, [r7, #4]
    e814:	2201      	movs	r2, #1
    e816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
    e81a:	2300      	movs	r3, #0
}
    e81c:	4618      	mov	r0, r3
    e81e:	3708      	adds	r7, #8
    e820:	46bd      	mov	sp, r7
    e822:	bd80      	pop	{r7, pc}

0000e824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
    e824:	b480      	push	{r7}
    e826:	b085      	sub	sp, #20
    e828:	af00      	add	r7, sp, #0
    e82a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
    e82c:	687b      	ldr	r3, [r7, #4]
    e82e:	681b      	ldr	r3, [r3, #0]
    e830:	68da      	ldr	r2, [r3, #12]
    e832:	687b      	ldr	r3, [r7, #4]
    e834:	681b      	ldr	r3, [r3, #0]
    e836:	f042 0201 	orr.w	r2, r2, #1
    e83a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    e83c:	687b      	ldr	r3, [r7, #4]
    e83e:	681b      	ldr	r3, [r3, #0]
    e840:	689a      	ldr	r2, [r3, #8]
    e842:	4b0c      	ldr	r3, [pc, #48]	; (e874 <HAL_TIM_Base_Start_IT+0x50>)
    e844:	4013      	ands	r3, r2
    e846:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    e848:	68fb      	ldr	r3, [r7, #12]
    e84a:	2b06      	cmp	r3, #6
    e84c:	d00b      	beq.n	e866 <HAL_TIM_Base_Start_IT+0x42>
    e84e:	68fb      	ldr	r3, [r7, #12]
    e850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e854:	d007      	beq.n	e866 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
    e856:	687b      	ldr	r3, [r7, #4]
    e858:	681b      	ldr	r3, [r3, #0]
    e85a:	681a      	ldr	r2, [r3, #0]
    e85c:	687b      	ldr	r3, [r7, #4]
    e85e:	681b      	ldr	r3, [r3, #0]
    e860:	f042 0201 	orr.w	r2, r2, #1
    e864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
    e866:	2300      	movs	r3, #0
}
    e868:	4618      	mov	r0, r3
    e86a:	3714      	adds	r7, #20
    e86c:	46bd      	mov	sp, r7
    e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e872:	4770      	bx	lr
    e874:	00010007 	.word	0x00010007

0000e878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
    e878:	b580      	push	{r7, lr}
    e87a:	b082      	sub	sp, #8
    e87c:	af00      	add	r7, sp, #0
    e87e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
    e880:	687b      	ldr	r3, [r7, #4]
    e882:	2b00      	cmp	r3, #0
    e884:	d101      	bne.n	e88a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
    e886:	2301      	movs	r3, #1
    e888:	e01d      	b.n	e8c6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
    e88a:	687b      	ldr	r3, [r7, #4]
    e88c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e890:	b2db      	uxtb	r3, r3
    e892:	2b00      	cmp	r3, #0
    e894:	d106      	bne.n	e8a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
    e896:	687b      	ldr	r3, [r7, #4]
    e898:	2200      	movs	r2, #0
    e89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
    e89e:	6878      	ldr	r0, [r7, #4]
    e8a0:	f7fb fb4e 	bl	9f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    e8a4:	687b      	ldr	r3, [r7, #4]
    e8a6:	2202      	movs	r2, #2
    e8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	681a      	ldr	r2, [r3, #0]
    e8b0:	687b      	ldr	r3, [r7, #4]
    e8b2:	3304      	adds	r3, #4
    e8b4:	4619      	mov	r1, r3
    e8b6:	4610      	mov	r0, r2
    e8b8:	f000 fa78 	bl	edac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
    e8bc:	687b      	ldr	r3, [r7, #4]
    e8be:	2201      	movs	r2, #1
    e8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
    e8c4:	2300      	movs	r3, #0
}
    e8c6:	4618      	mov	r0, r3
    e8c8:	3708      	adds	r7, #8
    e8ca:	46bd      	mov	sp, r7
    e8cc:	bd80      	pop	{r7, pc}
	...

0000e8d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
    e8d0:	b580      	push	{r7, lr}
    e8d2:	b084      	sub	sp, #16
    e8d4:	af00      	add	r7, sp, #0
    e8d6:	6078      	str	r0, [r7, #4]
    e8d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
    e8da:	687b      	ldr	r3, [r7, #4]
    e8dc:	681b      	ldr	r3, [r3, #0]
    e8de:	2201      	movs	r2, #1
    e8e0:	6839      	ldr	r1, [r7, #0]
    e8e2:	4618      	mov	r0, r3
    e8e4:	f000 fdfa 	bl	f4dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
    e8e8:	687b      	ldr	r3, [r7, #4]
    e8ea:	681b      	ldr	r3, [r3, #0]
    e8ec:	4a17      	ldr	r2, [pc, #92]	; (e94c <HAL_TIM_PWM_Start+0x7c>)
    e8ee:	4293      	cmp	r3, r2
    e8f0:	d004      	beq.n	e8fc <HAL_TIM_PWM_Start+0x2c>
    e8f2:	687b      	ldr	r3, [r7, #4]
    e8f4:	681b      	ldr	r3, [r3, #0]
    e8f6:	4a16      	ldr	r2, [pc, #88]	; (e950 <HAL_TIM_PWM_Start+0x80>)
    e8f8:	4293      	cmp	r3, r2
    e8fa:	d101      	bne.n	e900 <HAL_TIM_PWM_Start+0x30>
    e8fc:	2301      	movs	r3, #1
    e8fe:	e000      	b.n	e902 <HAL_TIM_PWM_Start+0x32>
    e900:	2300      	movs	r3, #0
    e902:	2b00      	cmp	r3, #0
    e904:	d007      	beq.n	e916 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
    e906:	687b      	ldr	r3, [r7, #4]
    e908:	681b      	ldr	r3, [r3, #0]
    e90a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e90c:	687b      	ldr	r3, [r7, #4]
    e90e:	681b      	ldr	r3, [r3, #0]
    e910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e914:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    e916:	687b      	ldr	r3, [r7, #4]
    e918:	681b      	ldr	r3, [r3, #0]
    e91a:	689a      	ldr	r2, [r3, #8]
    e91c:	4b0d      	ldr	r3, [pc, #52]	; (e954 <HAL_TIM_PWM_Start+0x84>)
    e91e:	4013      	ands	r3, r2
    e920:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    e922:	68fb      	ldr	r3, [r7, #12]
    e924:	2b06      	cmp	r3, #6
    e926:	d00b      	beq.n	e940 <HAL_TIM_PWM_Start+0x70>
    e928:	68fb      	ldr	r3, [r7, #12]
    e92a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e92e:	d007      	beq.n	e940 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
    e930:	687b      	ldr	r3, [r7, #4]
    e932:	681b      	ldr	r3, [r3, #0]
    e934:	681a      	ldr	r2, [r3, #0]
    e936:	687b      	ldr	r3, [r7, #4]
    e938:	681b      	ldr	r3, [r3, #0]
    e93a:	f042 0201 	orr.w	r2, r2, #1
    e93e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
    e940:	2300      	movs	r3, #0
}
    e942:	4618      	mov	r0, r3
    e944:	3710      	adds	r7, #16
    e946:	46bd      	mov	sp, r7
    e948:	bd80      	pop	{r7, pc}
    e94a:	bf00      	nop
    e94c:	40010000 	.word	0x40010000
    e950:	40010400 	.word	0x40010400
    e954:	00010007 	.word	0x00010007

0000e958 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
    e958:	b580      	push	{r7, lr}
    e95a:	b082      	sub	sp, #8
    e95c:	af00      	add	r7, sp, #0
    e95e:	6078      	str	r0, [r7, #4]
    e960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
    e962:	687b      	ldr	r3, [r7, #4]
    e964:	681b      	ldr	r3, [r3, #0]
    e966:	2200      	movs	r2, #0
    e968:	6839      	ldr	r1, [r7, #0]
    e96a:	4618      	mov	r0, r3
    e96c:	f000 fdb6 	bl	f4dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
    e970:	687b      	ldr	r3, [r7, #4]
    e972:	681b      	ldr	r3, [r3, #0]
    e974:	4a22      	ldr	r2, [pc, #136]	; (ea00 <HAL_TIM_PWM_Stop+0xa8>)
    e976:	4293      	cmp	r3, r2
    e978:	d004      	beq.n	e984 <HAL_TIM_PWM_Stop+0x2c>
    e97a:	687b      	ldr	r3, [r7, #4]
    e97c:	681b      	ldr	r3, [r3, #0]
    e97e:	4a21      	ldr	r2, [pc, #132]	; (ea04 <HAL_TIM_PWM_Stop+0xac>)
    e980:	4293      	cmp	r3, r2
    e982:	d101      	bne.n	e988 <HAL_TIM_PWM_Stop+0x30>
    e984:	2301      	movs	r3, #1
    e986:	e000      	b.n	e98a <HAL_TIM_PWM_Stop+0x32>
    e988:	2300      	movs	r3, #0
    e98a:	2b00      	cmp	r3, #0
    e98c:	d017      	beq.n	e9be <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
    e98e:	687b      	ldr	r3, [r7, #4]
    e990:	681b      	ldr	r3, [r3, #0]
    e992:	6a1a      	ldr	r2, [r3, #32]
    e994:	f241 1311 	movw	r3, #4369	; 0x1111
    e998:	4013      	ands	r3, r2
    e99a:	2b00      	cmp	r3, #0
    e99c:	d10f      	bne.n	e9be <HAL_TIM_PWM_Stop+0x66>
    e99e:	687b      	ldr	r3, [r7, #4]
    e9a0:	681b      	ldr	r3, [r3, #0]
    e9a2:	6a1a      	ldr	r2, [r3, #32]
    e9a4:	f240 4344 	movw	r3, #1092	; 0x444
    e9a8:	4013      	ands	r3, r2
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d107      	bne.n	e9be <HAL_TIM_PWM_Stop+0x66>
    e9ae:	687b      	ldr	r3, [r7, #4]
    e9b0:	681b      	ldr	r3, [r3, #0]
    e9b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e9b4:	687b      	ldr	r3, [r7, #4]
    e9b6:	681b      	ldr	r3, [r3, #0]
    e9b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    e9bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
    e9be:	687b      	ldr	r3, [r7, #4]
    e9c0:	681b      	ldr	r3, [r3, #0]
    e9c2:	6a1a      	ldr	r2, [r3, #32]
    e9c4:	f241 1311 	movw	r3, #4369	; 0x1111
    e9c8:	4013      	ands	r3, r2
    e9ca:	2b00      	cmp	r3, #0
    e9cc:	d10f      	bne.n	e9ee <HAL_TIM_PWM_Stop+0x96>
    e9ce:	687b      	ldr	r3, [r7, #4]
    e9d0:	681b      	ldr	r3, [r3, #0]
    e9d2:	6a1a      	ldr	r2, [r3, #32]
    e9d4:	f240 4344 	movw	r3, #1092	; 0x444
    e9d8:	4013      	ands	r3, r2
    e9da:	2b00      	cmp	r3, #0
    e9dc:	d107      	bne.n	e9ee <HAL_TIM_PWM_Stop+0x96>
    e9de:	687b      	ldr	r3, [r7, #4]
    e9e0:	681b      	ldr	r3, [r3, #0]
    e9e2:	681a      	ldr	r2, [r3, #0]
    e9e4:	687b      	ldr	r3, [r7, #4]
    e9e6:	681b      	ldr	r3, [r3, #0]
    e9e8:	f022 0201 	bic.w	r2, r2, #1
    e9ec:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
    e9ee:	687b      	ldr	r3, [r7, #4]
    e9f0:	2201      	movs	r2, #1
    e9f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
    e9f6:	2300      	movs	r3, #0
}
    e9f8:	4618      	mov	r0, r3
    e9fa:	3708      	adds	r7, #8
    e9fc:	46bd      	mov	sp, r7
    e9fe:	bd80      	pop	{r7, pc}
    ea00:	40010000 	.word	0x40010000
    ea04:	40010400 	.word	0x40010400

0000ea08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
    ea08:	b580      	push	{r7, lr}
    ea0a:	b084      	sub	sp, #16
    ea0c:	af00      	add	r7, sp, #0
    ea0e:	60f8      	str	r0, [r7, #12]
    ea10:	60b9      	str	r1, [r7, #8]
    ea12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
    ea14:	68fb      	ldr	r3, [r7, #12]
    ea16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    ea1a:	2b01      	cmp	r3, #1
    ea1c:	d101      	bne.n	ea22 <HAL_TIM_PWM_ConfigChannel+0x1a>
    ea1e:	2302      	movs	r3, #2
    ea20:	e105      	b.n	ec2e <HAL_TIM_PWM_ConfigChannel+0x226>
    ea22:	68fb      	ldr	r3, [r7, #12]
    ea24:	2201      	movs	r2, #1
    ea26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
    ea2a:	68fb      	ldr	r3, [r7, #12]
    ea2c:	2202      	movs	r2, #2
    ea2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
    ea32:	687b      	ldr	r3, [r7, #4]
    ea34:	2b14      	cmp	r3, #20
    ea36:	f200 80f0 	bhi.w	ec1a <HAL_TIM_PWM_ConfigChannel+0x212>
    ea3a:	a201      	add	r2, pc, #4	; (adr r2, ea40 <HAL_TIM_PWM_ConfigChannel+0x38>)
    ea3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ea40:	0000ea95 	.word	0x0000ea95
    ea44:	0000ec1b 	.word	0x0000ec1b
    ea48:	0000ec1b 	.word	0x0000ec1b
    ea4c:	0000ec1b 	.word	0x0000ec1b
    ea50:	0000ead5 	.word	0x0000ead5
    ea54:	0000ec1b 	.word	0x0000ec1b
    ea58:	0000ec1b 	.word	0x0000ec1b
    ea5c:	0000ec1b 	.word	0x0000ec1b
    ea60:	0000eb17 	.word	0x0000eb17
    ea64:	0000ec1b 	.word	0x0000ec1b
    ea68:	0000ec1b 	.word	0x0000ec1b
    ea6c:	0000ec1b 	.word	0x0000ec1b
    ea70:	0000eb57 	.word	0x0000eb57
    ea74:	0000ec1b 	.word	0x0000ec1b
    ea78:	0000ec1b 	.word	0x0000ec1b
    ea7c:	0000ec1b 	.word	0x0000ec1b
    ea80:	0000eb99 	.word	0x0000eb99
    ea84:	0000ec1b 	.word	0x0000ec1b
    ea88:	0000ec1b 	.word	0x0000ec1b
    ea8c:	0000ec1b 	.word	0x0000ec1b
    ea90:	0000ebd9 	.word	0x0000ebd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
    ea94:	68fb      	ldr	r3, [r7, #12]
    ea96:	681b      	ldr	r3, [r3, #0]
    ea98:	68b9      	ldr	r1, [r7, #8]
    ea9a:	4618      	mov	r0, r3
    ea9c:	f000 fa26 	bl	eeec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
    eaa0:	68fb      	ldr	r3, [r7, #12]
    eaa2:	681b      	ldr	r3, [r3, #0]
    eaa4:	699a      	ldr	r2, [r3, #24]
    eaa6:	68fb      	ldr	r3, [r7, #12]
    eaa8:	681b      	ldr	r3, [r3, #0]
    eaaa:	f042 0208 	orr.w	r2, r2, #8
    eaae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
    eab0:	68fb      	ldr	r3, [r7, #12]
    eab2:	681b      	ldr	r3, [r3, #0]
    eab4:	699a      	ldr	r2, [r3, #24]
    eab6:	68fb      	ldr	r3, [r7, #12]
    eab8:	681b      	ldr	r3, [r3, #0]
    eaba:	f022 0204 	bic.w	r2, r2, #4
    eabe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
    eac0:	68fb      	ldr	r3, [r7, #12]
    eac2:	681b      	ldr	r3, [r3, #0]
    eac4:	6999      	ldr	r1, [r3, #24]
    eac6:	68bb      	ldr	r3, [r7, #8]
    eac8:	691a      	ldr	r2, [r3, #16]
    eaca:	68fb      	ldr	r3, [r7, #12]
    eacc:	681b      	ldr	r3, [r3, #0]
    eace:	430a      	orrs	r2, r1
    ead0:	619a      	str	r2, [r3, #24]
      break;
    ead2:	e0a3      	b.n	ec1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
    ead4:	68fb      	ldr	r3, [r7, #12]
    ead6:	681b      	ldr	r3, [r3, #0]
    ead8:	68b9      	ldr	r1, [r7, #8]
    eada:	4618      	mov	r0, r3
    eadc:	f000 fa78 	bl	efd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
    eae0:	68fb      	ldr	r3, [r7, #12]
    eae2:	681b      	ldr	r3, [r3, #0]
    eae4:	699a      	ldr	r2, [r3, #24]
    eae6:	68fb      	ldr	r3, [r7, #12]
    eae8:	681b      	ldr	r3, [r3, #0]
    eaea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    eaee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
    eaf0:	68fb      	ldr	r3, [r7, #12]
    eaf2:	681b      	ldr	r3, [r3, #0]
    eaf4:	699a      	ldr	r2, [r3, #24]
    eaf6:	68fb      	ldr	r3, [r7, #12]
    eaf8:	681b      	ldr	r3, [r3, #0]
    eafa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    eafe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
    eb00:	68fb      	ldr	r3, [r7, #12]
    eb02:	681b      	ldr	r3, [r3, #0]
    eb04:	6999      	ldr	r1, [r3, #24]
    eb06:	68bb      	ldr	r3, [r7, #8]
    eb08:	691b      	ldr	r3, [r3, #16]
    eb0a:	021a      	lsls	r2, r3, #8
    eb0c:	68fb      	ldr	r3, [r7, #12]
    eb0e:	681b      	ldr	r3, [r3, #0]
    eb10:	430a      	orrs	r2, r1
    eb12:	619a      	str	r2, [r3, #24]
      break;
    eb14:	e082      	b.n	ec1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
    eb16:	68fb      	ldr	r3, [r7, #12]
    eb18:	681b      	ldr	r3, [r3, #0]
    eb1a:	68b9      	ldr	r1, [r7, #8]
    eb1c:	4618      	mov	r0, r3
    eb1e:	f000 facf 	bl	f0c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
    eb22:	68fb      	ldr	r3, [r7, #12]
    eb24:	681b      	ldr	r3, [r3, #0]
    eb26:	69da      	ldr	r2, [r3, #28]
    eb28:	68fb      	ldr	r3, [r7, #12]
    eb2a:	681b      	ldr	r3, [r3, #0]
    eb2c:	f042 0208 	orr.w	r2, r2, #8
    eb30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
    eb32:	68fb      	ldr	r3, [r7, #12]
    eb34:	681b      	ldr	r3, [r3, #0]
    eb36:	69da      	ldr	r2, [r3, #28]
    eb38:	68fb      	ldr	r3, [r7, #12]
    eb3a:	681b      	ldr	r3, [r3, #0]
    eb3c:	f022 0204 	bic.w	r2, r2, #4
    eb40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
    eb42:	68fb      	ldr	r3, [r7, #12]
    eb44:	681b      	ldr	r3, [r3, #0]
    eb46:	69d9      	ldr	r1, [r3, #28]
    eb48:	68bb      	ldr	r3, [r7, #8]
    eb4a:	691a      	ldr	r2, [r3, #16]
    eb4c:	68fb      	ldr	r3, [r7, #12]
    eb4e:	681b      	ldr	r3, [r3, #0]
    eb50:	430a      	orrs	r2, r1
    eb52:	61da      	str	r2, [r3, #28]
      break;
    eb54:	e062      	b.n	ec1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
    eb56:	68fb      	ldr	r3, [r7, #12]
    eb58:	681b      	ldr	r3, [r3, #0]
    eb5a:	68b9      	ldr	r1, [r7, #8]
    eb5c:	4618      	mov	r0, r3
    eb5e:	f000 fb25 	bl	f1ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
    eb62:	68fb      	ldr	r3, [r7, #12]
    eb64:	681b      	ldr	r3, [r3, #0]
    eb66:	69da      	ldr	r2, [r3, #28]
    eb68:	68fb      	ldr	r3, [r7, #12]
    eb6a:	681b      	ldr	r3, [r3, #0]
    eb6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    eb70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
    eb72:	68fb      	ldr	r3, [r7, #12]
    eb74:	681b      	ldr	r3, [r3, #0]
    eb76:	69da      	ldr	r2, [r3, #28]
    eb78:	68fb      	ldr	r3, [r7, #12]
    eb7a:	681b      	ldr	r3, [r3, #0]
    eb7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    eb80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    eb82:	68fb      	ldr	r3, [r7, #12]
    eb84:	681b      	ldr	r3, [r3, #0]
    eb86:	69d9      	ldr	r1, [r3, #28]
    eb88:	68bb      	ldr	r3, [r7, #8]
    eb8a:	691b      	ldr	r3, [r3, #16]
    eb8c:	021a      	lsls	r2, r3, #8
    eb8e:	68fb      	ldr	r3, [r7, #12]
    eb90:	681b      	ldr	r3, [r3, #0]
    eb92:	430a      	orrs	r2, r1
    eb94:	61da      	str	r2, [r3, #28]
      break;
    eb96:	e041      	b.n	ec1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
    eb98:	68fb      	ldr	r3, [r7, #12]
    eb9a:	681b      	ldr	r3, [r3, #0]
    eb9c:	68b9      	ldr	r1, [r7, #8]
    eb9e:	4618      	mov	r0, r3
    eba0:	f000 fb5c 	bl	f25c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
    eba4:	68fb      	ldr	r3, [r7, #12]
    eba6:	681b      	ldr	r3, [r3, #0]
    eba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ebaa:	68fb      	ldr	r3, [r7, #12]
    ebac:	681b      	ldr	r3, [r3, #0]
    ebae:	f042 0208 	orr.w	r2, r2, #8
    ebb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
    ebb4:	68fb      	ldr	r3, [r7, #12]
    ebb6:	681b      	ldr	r3, [r3, #0]
    ebb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ebba:	68fb      	ldr	r3, [r7, #12]
    ebbc:	681b      	ldr	r3, [r3, #0]
    ebbe:	f022 0204 	bic.w	r2, r2, #4
    ebc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
    ebc4:	68fb      	ldr	r3, [r7, #12]
    ebc6:	681b      	ldr	r3, [r3, #0]
    ebc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
    ebca:	68bb      	ldr	r3, [r7, #8]
    ebcc:	691a      	ldr	r2, [r3, #16]
    ebce:	68fb      	ldr	r3, [r7, #12]
    ebd0:	681b      	ldr	r3, [r3, #0]
    ebd2:	430a      	orrs	r2, r1
    ebd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
    ebd6:	e021      	b.n	ec1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
    ebd8:	68fb      	ldr	r3, [r7, #12]
    ebda:	681b      	ldr	r3, [r3, #0]
    ebdc:	68b9      	ldr	r1, [r7, #8]
    ebde:	4618      	mov	r0, r3
    ebe0:	f000 fb8e 	bl	f300 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
    ebe4:	68fb      	ldr	r3, [r7, #12]
    ebe6:	681b      	ldr	r3, [r3, #0]
    ebe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ebea:	68fb      	ldr	r3, [r7, #12]
    ebec:	681b      	ldr	r3, [r3, #0]
    ebee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    ebf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
    ebf4:	68fb      	ldr	r3, [r7, #12]
    ebf6:	681b      	ldr	r3, [r3, #0]
    ebf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ebfa:	68fb      	ldr	r3, [r7, #12]
    ebfc:	681b      	ldr	r3, [r3, #0]
    ebfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    ec02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
    ec04:	68fb      	ldr	r3, [r7, #12]
    ec06:	681b      	ldr	r3, [r3, #0]
    ec08:	6d59      	ldr	r1, [r3, #84]	; 0x54
    ec0a:	68bb      	ldr	r3, [r7, #8]
    ec0c:	691b      	ldr	r3, [r3, #16]
    ec0e:	021a      	lsls	r2, r3, #8
    ec10:	68fb      	ldr	r3, [r7, #12]
    ec12:	681b      	ldr	r3, [r3, #0]
    ec14:	430a      	orrs	r2, r1
    ec16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
    ec18:	e000      	b.n	ec1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
    ec1a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
    ec1c:	68fb      	ldr	r3, [r7, #12]
    ec1e:	2201      	movs	r2, #1
    ec20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
    ec24:	68fb      	ldr	r3, [r7, #12]
    ec26:	2200      	movs	r2, #0
    ec28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
    ec2c:	2300      	movs	r3, #0
}
    ec2e:	4618      	mov	r0, r3
    ec30:	3710      	adds	r7, #16
    ec32:	46bd      	mov	sp, r7
    ec34:	bd80      	pop	{r7, pc}
    ec36:	bf00      	nop

0000ec38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
    ec38:	b580      	push	{r7, lr}
    ec3a:	b084      	sub	sp, #16
    ec3c:	af00      	add	r7, sp, #0
    ec3e:	6078      	str	r0, [r7, #4]
    ec40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
    ec42:	687b      	ldr	r3, [r7, #4]
    ec44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    ec48:	2b01      	cmp	r3, #1
    ec4a:	d101      	bne.n	ec50 <HAL_TIM_ConfigClockSource+0x18>
    ec4c:	2302      	movs	r3, #2
    ec4e:	e0a6      	b.n	ed9e <HAL_TIM_ConfigClockSource+0x166>
    ec50:	687b      	ldr	r3, [r7, #4]
    ec52:	2201      	movs	r2, #1
    ec54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
    ec58:	687b      	ldr	r3, [r7, #4]
    ec5a:	2202      	movs	r2, #2
    ec5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
    ec60:	687b      	ldr	r3, [r7, #4]
    ec62:	681b      	ldr	r3, [r3, #0]
    ec64:	689b      	ldr	r3, [r3, #8]
    ec66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
    ec68:	68fa      	ldr	r2, [r7, #12]
    ec6a:	4b4f      	ldr	r3, [pc, #316]	; (eda8 <HAL_TIM_ConfigClockSource+0x170>)
    ec6c:	4013      	ands	r3, r2
    ec6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
    ec70:	68fb      	ldr	r3, [r7, #12]
    ec72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    ec76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
    ec78:	687b      	ldr	r3, [r7, #4]
    ec7a:	681b      	ldr	r3, [r3, #0]
    ec7c:	68fa      	ldr	r2, [r7, #12]
    ec7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
    ec80:	683b      	ldr	r3, [r7, #0]
    ec82:	681b      	ldr	r3, [r3, #0]
    ec84:	2b40      	cmp	r3, #64	; 0x40
    ec86:	d067      	beq.n	ed58 <HAL_TIM_ConfigClockSource+0x120>
    ec88:	2b40      	cmp	r3, #64	; 0x40
    ec8a:	d80b      	bhi.n	eca4 <HAL_TIM_ConfigClockSource+0x6c>
    ec8c:	2b10      	cmp	r3, #16
    ec8e:	d073      	beq.n	ed78 <HAL_TIM_ConfigClockSource+0x140>
    ec90:	2b10      	cmp	r3, #16
    ec92:	d802      	bhi.n	ec9a <HAL_TIM_ConfigClockSource+0x62>
    ec94:	2b00      	cmp	r3, #0
    ec96:	d06f      	beq.n	ed78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
    ec98:	e078      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
    ec9a:	2b20      	cmp	r3, #32
    ec9c:	d06c      	beq.n	ed78 <HAL_TIM_ConfigClockSource+0x140>
    ec9e:	2b30      	cmp	r3, #48	; 0x30
    eca0:	d06a      	beq.n	ed78 <HAL_TIM_ConfigClockSource+0x140>
      break;
    eca2:	e073      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
    eca4:	2b70      	cmp	r3, #112	; 0x70
    eca6:	d00d      	beq.n	ecc4 <HAL_TIM_ConfigClockSource+0x8c>
    eca8:	2b70      	cmp	r3, #112	; 0x70
    ecaa:	d804      	bhi.n	ecb6 <HAL_TIM_ConfigClockSource+0x7e>
    ecac:	2b50      	cmp	r3, #80	; 0x50
    ecae:	d033      	beq.n	ed18 <HAL_TIM_ConfigClockSource+0xe0>
    ecb0:	2b60      	cmp	r3, #96	; 0x60
    ecb2:	d041      	beq.n	ed38 <HAL_TIM_ConfigClockSource+0x100>
      break;
    ecb4:	e06a      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
    ecb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ecba:	d066      	beq.n	ed8a <HAL_TIM_ConfigClockSource+0x152>
    ecbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ecc0:	d017      	beq.n	ecf2 <HAL_TIM_ConfigClockSource+0xba>
      break;
    ecc2:	e063      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
    ecc4:	687b      	ldr	r3, [r7, #4]
    ecc6:	6818      	ldr	r0, [r3, #0]
    ecc8:	683b      	ldr	r3, [r7, #0]
    ecca:	6899      	ldr	r1, [r3, #8]
    eccc:	683b      	ldr	r3, [r7, #0]
    ecce:	685a      	ldr	r2, [r3, #4]
    ecd0:	683b      	ldr	r3, [r7, #0]
    ecd2:	68db      	ldr	r3, [r3, #12]
    ecd4:	f000 fbe2 	bl	f49c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
    ecd8:	687b      	ldr	r3, [r7, #4]
    ecda:	681b      	ldr	r3, [r3, #0]
    ecdc:	689b      	ldr	r3, [r3, #8]
    ecde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
    ece0:	68fb      	ldr	r3, [r7, #12]
    ece2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
    ece6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
    ece8:	687b      	ldr	r3, [r7, #4]
    ecea:	681b      	ldr	r3, [r3, #0]
    ecec:	68fa      	ldr	r2, [r7, #12]
    ecee:	609a      	str	r2, [r3, #8]
      break;
    ecf0:	e04c      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
    ecf2:	687b      	ldr	r3, [r7, #4]
    ecf4:	6818      	ldr	r0, [r3, #0]
    ecf6:	683b      	ldr	r3, [r7, #0]
    ecf8:	6899      	ldr	r1, [r3, #8]
    ecfa:	683b      	ldr	r3, [r7, #0]
    ecfc:	685a      	ldr	r2, [r3, #4]
    ecfe:	683b      	ldr	r3, [r7, #0]
    ed00:	68db      	ldr	r3, [r3, #12]
    ed02:	f000 fbcb 	bl	f49c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
    ed06:	687b      	ldr	r3, [r7, #4]
    ed08:	681b      	ldr	r3, [r3, #0]
    ed0a:	689a      	ldr	r2, [r3, #8]
    ed0c:	687b      	ldr	r3, [r7, #4]
    ed0e:	681b      	ldr	r3, [r3, #0]
    ed10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    ed14:	609a      	str	r2, [r3, #8]
      break;
    ed16:	e039      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
    ed18:	687b      	ldr	r3, [r7, #4]
    ed1a:	6818      	ldr	r0, [r3, #0]
    ed1c:	683b      	ldr	r3, [r7, #0]
    ed1e:	6859      	ldr	r1, [r3, #4]
    ed20:	683b      	ldr	r3, [r7, #0]
    ed22:	68db      	ldr	r3, [r3, #12]
    ed24:	461a      	mov	r2, r3
    ed26:	f000 fb3f 	bl	f3a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
    ed2a:	687b      	ldr	r3, [r7, #4]
    ed2c:	681b      	ldr	r3, [r3, #0]
    ed2e:	2150      	movs	r1, #80	; 0x50
    ed30:	4618      	mov	r0, r3
    ed32:	f000 fb98 	bl	f466 <TIM_ITRx_SetConfig>
      break;
    ed36:	e029      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
    ed38:	687b      	ldr	r3, [r7, #4]
    ed3a:	6818      	ldr	r0, [r3, #0]
    ed3c:	683b      	ldr	r3, [r7, #0]
    ed3e:	6859      	ldr	r1, [r3, #4]
    ed40:	683b      	ldr	r3, [r7, #0]
    ed42:	68db      	ldr	r3, [r3, #12]
    ed44:	461a      	mov	r2, r3
    ed46:	f000 fb5e 	bl	f406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
    ed4a:	687b      	ldr	r3, [r7, #4]
    ed4c:	681b      	ldr	r3, [r3, #0]
    ed4e:	2160      	movs	r1, #96	; 0x60
    ed50:	4618      	mov	r0, r3
    ed52:	f000 fb88 	bl	f466 <TIM_ITRx_SetConfig>
      break;
    ed56:	e019      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
    ed58:	687b      	ldr	r3, [r7, #4]
    ed5a:	6818      	ldr	r0, [r3, #0]
    ed5c:	683b      	ldr	r3, [r7, #0]
    ed5e:	6859      	ldr	r1, [r3, #4]
    ed60:	683b      	ldr	r3, [r7, #0]
    ed62:	68db      	ldr	r3, [r3, #12]
    ed64:	461a      	mov	r2, r3
    ed66:	f000 fb1f 	bl	f3a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
    ed6a:	687b      	ldr	r3, [r7, #4]
    ed6c:	681b      	ldr	r3, [r3, #0]
    ed6e:	2140      	movs	r1, #64	; 0x40
    ed70:	4618      	mov	r0, r3
    ed72:	f000 fb78 	bl	f466 <TIM_ITRx_SetConfig>
      break;
    ed76:	e009      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
    ed78:	687b      	ldr	r3, [r7, #4]
    ed7a:	681a      	ldr	r2, [r3, #0]
    ed7c:	683b      	ldr	r3, [r7, #0]
    ed7e:	681b      	ldr	r3, [r3, #0]
    ed80:	4619      	mov	r1, r3
    ed82:	4610      	mov	r0, r2
    ed84:	f000 fb6f 	bl	f466 <TIM_ITRx_SetConfig>
      break;
    ed88:	e000      	b.n	ed8c <HAL_TIM_ConfigClockSource+0x154>
      break;
    ed8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
    ed8c:	687b      	ldr	r3, [r7, #4]
    ed8e:	2201      	movs	r2, #1
    ed90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
    ed94:	687b      	ldr	r3, [r7, #4]
    ed96:	2200      	movs	r2, #0
    ed98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
    ed9c:	2300      	movs	r3, #0
}
    ed9e:	4618      	mov	r0, r3
    eda0:	3710      	adds	r7, #16
    eda2:	46bd      	mov	sp, r7
    eda4:	bd80      	pop	{r7, pc}
    eda6:	bf00      	nop
    eda8:	fffeff88 	.word	0xfffeff88

0000edac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
    edac:	b480      	push	{r7}
    edae:	b085      	sub	sp, #20
    edb0:	af00      	add	r7, sp, #0
    edb2:	6078      	str	r0, [r7, #4]
    edb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
    edb6:	687b      	ldr	r3, [r7, #4]
    edb8:	681b      	ldr	r3, [r3, #0]
    edba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
    edbc:	687b      	ldr	r3, [r7, #4]
    edbe:	4a40      	ldr	r2, [pc, #256]	; (eec0 <TIM_Base_SetConfig+0x114>)
    edc0:	4293      	cmp	r3, r2
    edc2:	d013      	beq.n	edec <TIM_Base_SetConfig+0x40>
    edc4:	687b      	ldr	r3, [r7, #4]
    edc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    edca:	d00f      	beq.n	edec <TIM_Base_SetConfig+0x40>
    edcc:	687b      	ldr	r3, [r7, #4]
    edce:	4a3d      	ldr	r2, [pc, #244]	; (eec4 <TIM_Base_SetConfig+0x118>)
    edd0:	4293      	cmp	r3, r2
    edd2:	d00b      	beq.n	edec <TIM_Base_SetConfig+0x40>
    edd4:	687b      	ldr	r3, [r7, #4]
    edd6:	4a3c      	ldr	r2, [pc, #240]	; (eec8 <TIM_Base_SetConfig+0x11c>)
    edd8:	4293      	cmp	r3, r2
    edda:	d007      	beq.n	edec <TIM_Base_SetConfig+0x40>
    eddc:	687b      	ldr	r3, [r7, #4]
    edde:	4a3b      	ldr	r2, [pc, #236]	; (eecc <TIM_Base_SetConfig+0x120>)
    ede0:	4293      	cmp	r3, r2
    ede2:	d003      	beq.n	edec <TIM_Base_SetConfig+0x40>
    ede4:	687b      	ldr	r3, [r7, #4]
    ede6:	4a3a      	ldr	r2, [pc, #232]	; (eed0 <TIM_Base_SetConfig+0x124>)
    ede8:	4293      	cmp	r3, r2
    edea:	d108      	bne.n	edfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    edec:	68fb      	ldr	r3, [r7, #12]
    edee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    edf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
    edf4:	683b      	ldr	r3, [r7, #0]
    edf6:	685b      	ldr	r3, [r3, #4]
    edf8:	68fa      	ldr	r2, [r7, #12]
    edfa:	4313      	orrs	r3, r2
    edfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
    edfe:	687b      	ldr	r3, [r7, #4]
    ee00:	4a2f      	ldr	r2, [pc, #188]	; (eec0 <TIM_Base_SetConfig+0x114>)
    ee02:	4293      	cmp	r3, r2
    ee04:	d02b      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee06:	687b      	ldr	r3, [r7, #4]
    ee08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    ee0c:	d027      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee0e:	687b      	ldr	r3, [r7, #4]
    ee10:	4a2c      	ldr	r2, [pc, #176]	; (eec4 <TIM_Base_SetConfig+0x118>)
    ee12:	4293      	cmp	r3, r2
    ee14:	d023      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee16:	687b      	ldr	r3, [r7, #4]
    ee18:	4a2b      	ldr	r2, [pc, #172]	; (eec8 <TIM_Base_SetConfig+0x11c>)
    ee1a:	4293      	cmp	r3, r2
    ee1c:	d01f      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee1e:	687b      	ldr	r3, [r7, #4]
    ee20:	4a2a      	ldr	r2, [pc, #168]	; (eecc <TIM_Base_SetConfig+0x120>)
    ee22:	4293      	cmp	r3, r2
    ee24:	d01b      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee26:	687b      	ldr	r3, [r7, #4]
    ee28:	4a29      	ldr	r2, [pc, #164]	; (eed0 <TIM_Base_SetConfig+0x124>)
    ee2a:	4293      	cmp	r3, r2
    ee2c:	d017      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee2e:	687b      	ldr	r3, [r7, #4]
    ee30:	4a28      	ldr	r2, [pc, #160]	; (eed4 <TIM_Base_SetConfig+0x128>)
    ee32:	4293      	cmp	r3, r2
    ee34:	d013      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee36:	687b      	ldr	r3, [r7, #4]
    ee38:	4a27      	ldr	r2, [pc, #156]	; (eed8 <TIM_Base_SetConfig+0x12c>)
    ee3a:	4293      	cmp	r3, r2
    ee3c:	d00f      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee3e:	687b      	ldr	r3, [r7, #4]
    ee40:	4a26      	ldr	r2, [pc, #152]	; (eedc <TIM_Base_SetConfig+0x130>)
    ee42:	4293      	cmp	r3, r2
    ee44:	d00b      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee46:	687b      	ldr	r3, [r7, #4]
    ee48:	4a25      	ldr	r2, [pc, #148]	; (eee0 <TIM_Base_SetConfig+0x134>)
    ee4a:	4293      	cmp	r3, r2
    ee4c:	d007      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	4a24      	ldr	r2, [pc, #144]	; (eee4 <TIM_Base_SetConfig+0x138>)
    ee52:	4293      	cmp	r3, r2
    ee54:	d003      	beq.n	ee5e <TIM_Base_SetConfig+0xb2>
    ee56:	687b      	ldr	r3, [r7, #4]
    ee58:	4a23      	ldr	r2, [pc, #140]	; (eee8 <TIM_Base_SetConfig+0x13c>)
    ee5a:	4293      	cmp	r3, r2
    ee5c:	d108      	bne.n	ee70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    ee5e:	68fb      	ldr	r3, [r7, #12]
    ee60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    ee64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
    ee66:	683b      	ldr	r3, [r7, #0]
    ee68:	68db      	ldr	r3, [r3, #12]
    ee6a:	68fa      	ldr	r2, [r7, #12]
    ee6c:	4313      	orrs	r3, r2
    ee6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
    ee70:	68fb      	ldr	r3, [r7, #12]
    ee72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    ee76:	683b      	ldr	r3, [r7, #0]
    ee78:	695b      	ldr	r3, [r3, #20]
    ee7a:	4313      	orrs	r3, r2
    ee7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
    ee7e:	687b      	ldr	r3, [r7, #4]
    ee80:	68fa      	ldr	r2, [r7, #12]
    ee82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
    ee84:	683b      	ldr	r3, [r7, #0]
    ee86:	689a      	ldr	r2, [r3, #8]
    ee88:	687b      	ldr	r3, [r7, #4]
    ee8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
    ee8c:	683b      	ldr	r3, [r7, #0]
    ee8e:	681a      	ldr	r2, [r3, #0]
    ee90:	687b      	ldr	r3, [r7, #4]
    ee92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
    ee94:	687b      	ldr	r3, [r7, #4]
    ee96:	4a0a      	ldr	r2, [pc, #40]	; (eec0 <TIM_Base_SetConfig+0x114>)
    ee98:	4293      	cmp	r3, r2
    ee9a:	d003      	beq.n	eea4 <TIM_Base_SetConfig+0xf8>
    ee9c:	687b      	ldr	r3, [r7, #4]
    ee9e:	4a0c      	ldr	r2, [pc, #48]	; (eed0 <TIM_Base_SetConfig+0x124>)
    eea0:	4293      	cmp	r3, r2
    eea2:	d103      	bne.n	eeac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
    eea4:	683b      	ldr	r3, [r7, #0]
    eea6:	691a      	ldr	r2, [r3, #16]
    eea8:	687b      	ldr	r3, [r7, #4]
    eeaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
    eeac:	687b      	ldr	r3, [r7, #4]
    eeae:	2201      	movs	r2, #1
    eeb0:	615a      	str	r2, [r3, #20]
}
    eeb2:	bf00      	nop
    eeb4:	3714      	adds	r7, #20
    eeb6:	46bd      	mov	sp, r7
    eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    eebc:	4770      	bx	lr
    eebe:	bf00      	nop
    eec0:	40010000 	.word	0x40010000
    eec4:	40000400 	.word	0x40000400
    eec8:	40000800 	.word	0x40000800
    eecc:	40000c00 	.word	0x40000c00
    eed0:	40010400 	.word	0x40010400
    eed4:	40014000 	.word	0x40014000
    eed8:	40014400 	.word	0x40014400
    eedc:	40014800 	.word	0x40014800
    eee0:	40001800 	.word	0x40001800
    eee4:	40001c00 	.word	0x40001c00
    eee8:	40002000 	.word	0x40002000

0000eeec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
    eeec:	b480      	push	{r7}
    eeee:	b087      	sub	sp, #28
    eef0:	af00      	add	r7, sp, #0
    eef2:	6078      	str	r0, [r7, #4]
    eef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
    eef6:	687b      	ldr	r3, [r7, #4]
    eef8:	6a1b      	ldr	r3, [r3, #32]
    eefa:	f023 0201 	bic.w	r2, r3, #1
    eefe:	687b      	ldr	r3, [r7, #4]
    ef00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    ef02:	687b      	ldr	r3, [r7, #4]
    ef04:	6a1b      	ldr	r3, [r3, #32]
    ef06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    ef08:	687b      	ldr	r3, [r7, #4]
    ef0a:	685b      	ldr	r3, [r3, #4]
    ef0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    ef0e:	687b      	ldr	r3, [r7, #4]
    ef10:	699b      	ldr	r3, [r3, #24]
    ef12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
    ef14:	68fa      	ldr	r2, [r7, #12]
    ef16:	4b2b      	ldr	r3, [pc, #172]	; (efc4 <TIM_OC1_SetConfig+0xd8>)
    ef18:	4013      	ands	r3, r2
    ef1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
    ef1c:	68fb      	ldr	r3, [r7, #12]
    ef1e:	f023 0303 	bic.w	r3, r3, #3
    ef22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
    ef24:	683b      	ldr	r3, [r7, #0]
    ef26:	681b      	ldr	r3, [r3, #0]
    ef28:	68fa      	ldr	r2, [r7, #12]
    ef2a:	4313      	orrs	r3, r2
    ef2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
    ef2e:	697b      	ldr	r3, [r7, #20]
    ef30:	f023 0302 	bic.w	r3, r3, #2
    ef34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
    ef36:	683b      	ldr	r3, [r7, #0]
    ef38:	689b      	ldr	r3, [r3, #8]
    ef3a:	697a      	ldr	r2, [r7, #20]
    ef3c:	4313      	orrs	r3, r2
    ef3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
    ef40:	687b      	ldr	r3, [r7, #4]
    ef42:	4a21      	ldr	r2, [pc, #132]	; (efc8 <TIM_OC1_SetConfig+0xdc>)
    ef44:	4293      	cmp	r3, r2
    ef46:	d003      	beq.n	ef50 <TIM_OC1_SetConfig+0x64>
    ef48:	687b      	ldr	r3, [r7, #4]
    ef4a:	4a20      	ldr	r2, [pc, #128]	; (efcc <TIM_OC1_SetConfig+0xe0>)
    ef4c:	4293      	cmp	r3, r2
    ef4e:	d10c      	bne.n	ef6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    ef50:	697b      	ldr	r3, [r7, #20]
    ef52:	f023 0308 	bic.w	r3, r3, #8
    ef56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    ef58:	683b      	ldr	r3, [r7, #0]
    ef5a:	68db      	ldr	r3, [r3, #12]
    ef5c:	697a      	ldr	r2, [r7, #20]
    ef5e:	4313      	orrs	r3, r2
    ef60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    ef62:	697b      	ldr	r3, [r7, #20]
    ef64:	f023 0304 	bic.w	r3, r3, #4
    ef68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
    ef6a:	687b      	ldr	r3, [r7, #4]
    ef6c:	4a16      	ldr	r2, [pc, #88]	; (efc8 <TIM_OC1_SetConfig+0xdc>)
    ef6e:	4293      	cmp	r3, r2
    ef70:	d003      	beq.n	ef7a <TIM_OC1_SetConfig+0x8e>
    ef72:	687b      	ldr	r3, [r7, #4]
    ef74:	4a15      	ldr	r2, [pc, #84]	; (efcc <TIM_OC1_SetConfig+0xe0>)
    ef76:	4293      	cmp	r3, r2
    ef78:	d111      	bne.n	ef9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    ef7a:	693b      	ldr	r3, [r7, #16]
    ef7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ef80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
    ef82:	693b      	ldr	r3, [r7, #16]
    ef84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    ef88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    ef8a:	683b      	ldr	r3, [r7, #0]
    ef8c:	695b      	ldr	r3, [r3, #20]
    ef8e:	693a      	ldr	r2, [r7, #16]
    ef90:	4313      	orrs	r3, r2
    ef92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
    ef94:	683b      	ldr	r3, [r7, #0]
    ef96:	699b      	ldr	r3, [r3, #24]
    ef98:	693a      	ldr	r2, [r7, #16]
    ef9a:	4313      	orrs	r3, r2
    ef9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    ef9e:	687b      	ldr	r3, [r7, #4]
    efa0:	693a      	ldr	r2, [r7, #16]
    efa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    efa4:	687b      	ldr	r3, [r7, #4]
    efa6:	68fa      	ldr	r2, [r7, #12]
    efa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
    efaa:	683b      	ldr	r3, [r7, #0]
    efac:	685a      	ldr	r2, [r3, #4]
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    efb2:	687b      	ldr	r3, [r7, #4]
    efb4:	697a      	ldr	r2, [r7, #20]
    efb6:	621a      	str	r2, [r3, #32]
}
    efb8:	bf00      	nop
    efba:	371c      	adds	r7, #28
    efbc:	46bd      	mov	sp, r7
    efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    efc2:	4770      	bx	lr
    efc4:	fffeff8f 	.word	0xfffeff8f
    efc8:	40010000 	.word	0x40010000
    efcc:	40010400 	.word	0x40010400

0000efd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
    efd0:	b480      	push	{r7}
    efd2:	b087      	sub	sp, #28
    efd4:	af00      	add	r7, sp, #0
    efd6:	6078      	str	r0, [r7, #4]
    efd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
    efda:	687b      	ldr	r3, [r7, #4]
    efdc:	6a1b      	ldr	r3, [r3, #32]
    efde:	f023 0210 	bic.w	r2, r3, #16
    efe2:	687b      	ldr	r3, [r7, #4]
    efe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    efe6:	687b      	ldr	r3, [r7, #4]
    efe8:	6a1b      	ldr	r3, [r3, #32]
    efea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    efec:	687b      	ldr	r3, [r7, #4]
    efee:	685b      	ldr	r3, [r3, #4]
    eff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    eff2:	687b      	ldr	r3, [r7, #4]
    eff4:	699b      	ldr	r3, [r3, #24]
    eff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
    eff8:	68fa      	ldr	r2, [r7, #12]
    effa:	4b2e      	ldr	r3, [pc, #184]	; (f0b4 <TIM_OC2_SetConfig+0xe4>)
    effc:	4013      	ands	r3, r2
    effe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
    f000:	68fb      	ldr	r3, [r7, #12]
    f002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
    f008:	683b      	ldr	r3, [r7, #0]
    f00a:	681b      	ldr	r3, [r3, #0]
    f00c:	021b      	lsls	r3, r3, #8
    f00e:	68fa      	ldr	r2, [r7, #12]
    f010:	4313      	orrs	r3, r2
    f012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
    f014:	697b      	ldr	r3, [r7, #20]
    f016:	f023 0320 	bic.w	r3, r3, #32
    f01a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
    f01c:	683b      	ldr	r3, [r7, #0]
    f01e:	689b      	ldr	r3, [r3, #8]
    f020:	011b      	lsls	r3, r3, #4
    f022:	697a      	ldr	r2, [r7, #20]
    f024:	4313      	orrs	r3, r2
    f026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
    f028:	687b      	ldr	r3, [r7, #4]
    f02a:	4a23      	ldr	r2, [pc, #140]	; (f0b8 <TIM_OC2_SetConfig+0xe8>)
    f02c:	4293      	cmp	r3, r2
    f02e:	d003      	beq.n	f038 <TIM_OC2_SetConfig+0x68>
    f030:	687b      	ldr	r3, [r7, #4]
    f032:	4a22      	ldr	r2, [pc, #136]	; (f0bc <TIM_OC2_SetConfig+0xec>)
    f034:	4293      	cmp	r3, r2
    f036:	d10d      	bne.n	f054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    f038:	697b      	ldr	r3, [r7, #20]
    f03a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f03e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    f040:	683b      	ldr	r3, [r7, #0]
    f042:	68db      	ldr	r3, [r3, #12]
    f044:	011b      	lsls	r3, r3, #4
    f046:	697a      	ldr	r2, [r7, #20]
    f048:	4313      	orrs	r3, r2
    f04a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    f04c:	697b      	ldr	r3, [r7, #20]
    f04e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    f052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
    f054:	687b      	ldr	r3, [r7, #4]
    f056:	4a18      	ldr	r2, [pc, #96]	; (f0b8 <TIM_OC2_SetConfig+0xe8>)
    f058:	4293      	cmp	r3, r2
    f05a:	d003      	beq.n	f064 <TIM_OC2_SetConfig+0x94>
    f05c:	687b      	ldr	r3, [r7, #4]
    f05e:	4a17      	ldr	r2, [pc, #92]	; (f0bc <TIM_OC2_SetConfig+0xec>)
    f060:	4293      	cmp	r3, r2
    f062:	d113      	bne.n	f08c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    f064:	693b      	ldr	r3, [r7, #16]
    f066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    f06a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
    f06c:	693b      	ldr	r3, [r7, #16]
    f06e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    f074:	683b      	ldr	r3, [r7, #0]
    f076:	695b      	ldr	r3, [r3, #20]
    f078:	009b      	lsls	r3, r3, #2
    f07a:	693a      	ldr	r2, [r7, #16]
    f07c:	4313      	orrs	r3, r2
    f07e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
    f080:	683b      	ldr	r3, [r7, #0]
    f082:	699b      	ldr	r3, [r3, #24]
    f084:	009b      	lsls	r3, r3, #2
    f086:	693a      	ldr	r2, [r7, #16]
    f088:	4313      	orrs	r3, r2
    f08a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    f08c:	687b      	ldr	r3, [r7, #4]
    f08e:	693a      	ldr	r2, [r7, #16]
    f090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    f092:	687b      	ldr	r3, [r7, #4]
    f094:	68fa      	ldr	r2, [r7, #12]
    f096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
    f098:	683b      	ldr	r3, [r7, #0]
    f09a:	685a      	ldr	r2, [r3, #4]
    f09c:	687b      	ldr	r3, [r7, #4]
    f09e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    f0a0:	687b      	ldr	r3, [r7, #4]
    f0a2:	697a      	ldr	r2, [r7, #20]
    f0a4:	621a      	str	r2, [r3, #32]
}
    f0a6:	bf00      	nop
    f0a8:	371c      	adds	r7, #28
    f0aa:	46bd      	mov	sp, r7
    f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    f0b0:	4770      	bx	lr
    f0b2:	bf00      	nop
    f0b4:	feff8fff 	.word	0xfeff8fff
    f0b8:	40010000 	.word	0x40010000
    f0bc:	40010400 	.word	0x40010400

0000f0c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
    f0c0:	b480      	push	{r7}
    f0c2:	b087      	sub	sp, #28
    f0c4:	af00      	add	r7, sp, #0
    f0c6:	6078      	str	r0, [r7, #4]
    f0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
    f0ca:	687b      	ldr	r3, [r7, #4]
    f0cc:	6a1b      	ldr	r3, [r3, #32]
    f0ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    f0d2:	687b      	ldr	r3, [r7, #4]
    f0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    f0d6:	687b      	ldr	r3, [r7, #4]
    f0d8:	6a1b      	ldr	r3, [r3, #32]
    f0da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    f0dc:	687b      	ldr	r3, [r7, #4]
    f0de:	685b      	ldr	r3, [r3, #4]
    f0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    f0e2:	687b      	ldr	r3, [r7, #4]
    f0e4:	69db      	ldr	r3, [r3, #28]
    f0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
    f0e8:	68fa      	ldr	r2, [r7, #12]
    f0ea:	4b2d      	ldr	r3, [pc, #180]	; (f1a0 <TIM_OC3_SetConfig+0xe0>)
    f0ec:	4013      	ands	r3, r2
    f0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
    f0f0:	68fb      	ldr	r3, [r7, #12]
    f0f2:	f023 0303 	bic.w	r3, r3, #3
    f0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
    f0f8:	683b      	ldr	r3, [r7, #0]
    f0fa:	681b      	ldr	r3, [r3, #0]
    f0fc:	68fa      	ldr	r2, [r7, #12]
    f0fe:	4313      	orrs	r3, r2
    f100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
    f102:	697b      	ldr	r3, [r7, #20]
    f104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    f108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
    f10a:	683b      	ldr	r3, [r7, #0]
    f10c:	689b      	ldr	r3, [r3, #8]
    f10e:	021b      	lsls	r3, r3, #8
    f110:	697a      	ldr	r2, [r7, #20]
    f112:	4313      	orrs	r3, r2
    f114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
    f116:	687b      	ldr	r3, [r7, #4]
    f118:	4a22      	ldr	r2, [pc, #136]	; (f1a4 <TIM_OC3_SetConfig+0xe4>)
    f11a:	4293      	cmp	r3, r2
    f11c:	d003      	beq.n	f126 <TIM_OC3_SetConfig+0x66>
    f11e:	687b      	ldr	r3, [r7, #4]
    f120:	4a21      	ldr	r2, [pc, #132]	; (f1a8 <TIM_OC3_SetConfig+0xe8>)
    f122:	4293      	cmp	r3, r2
    f124:	d10d      	bne.n	f142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    f126:	697b      	ldr	r3, [r7, #20]
    f128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f12c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    f12e:	683b      	ldr	r3, [r7, #0]
    f130:	68db      	ldr	r3, [r3, #12]
    f132:	021b      	lsls	r3, r3, #8
    f134:	697a      	ldr	r2, [r7, #20]
    f136:	4313      	orrs	r3, r2
    f138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    f13a:	697b      	ldr	r3, [r7, #20]
    f13c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    f140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
    f142:	687b      	ldr	r3, [r7, #4]
    f144:	4a17      	ldr	r2, [pc, #92]	; (f1a4 <TIM_OC3_SetConfig+0xe4>)
    f146:	4293      	cmp	r3, r2
    f148:	d003      	beq.n	f152 <TIM_OC3_SetConfig+0x92>
    f14a:	687b      	ldr	r3, [r7, #4]
    f14c:	4a16      	ldr	r2, [pc, #88]	; (f1a8 <TIM_OC3_SetConfig+0xe8>)
    f14e:	4293      	cmp	r3, r2
    f150:	d113      	bne.n	f17a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    f152:	693b      	ldr	r3, [r7, #16]
    f154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    f158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
    f15a:	693b      	ldr	r3, [r7, #16]
    f15c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    f162:	683b      	ldr	r3, [r7, #0]
    f164:	695b      	ldr	r3, [r3, #20]
    f166:	011b      	lsls	r3, r3, #4
    f168:	693a      	ldr	r2, [r7, #16]
    f16a:	4313      	orrs	r3, r2
    f16c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
    f16e:	683b      	ldr	r3, [r7, #0]
    f170:	699b      	ldr	r3, [r3, #24]
    f172:	011b      	lsls	r3, r3, #4
    f174:	693a      	ldr	r2, [r7, #16]
    f176:	4313      	orrs	r3, r2
    f178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    f17a:	687b      	ldr	r3, [r7, #4]
    f17c:	693a      	ldr	r2, [r7, #16]
    f17e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    f180:	687b      	ldr	r3, [r7, #4]
    f182:	68fa      	ldr	r2, [r7, #12]
    f184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
    f186:	683b      	ldr	r3, [r7, #0]
    f188:	685a      	ldr	r2, [r3, #4]
    f18a:	687b      	ldr	r3, [r7, #4]
    f18c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    f18e:	687b      	ldr	r3, [r7, #4]
    f190:	697a      	ldr	r2, [r7, #20]
    f192:	621a      	str	r2, [r3, #32]
}
    f194:	bf00      	nop
    f196:	371c      	adds	r7, #28
    f198:	46bd      	mov	sp, r7
    f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f19e:	4770      	bx	lr
    f1a0:	fffeff8f 	.word	0xfffeff8f
    f1a4:	40010000 	.word	0x40010000
    f1a8:	40010400 	.word	0x40010400

0000f1ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
    f1ac:	b480      	push	{r7}
    f1ae:	b087      	sub	sp, #28
    f1b0:	af00      	add	r7, sp, #0
    f1b2:	6078      	str	r0, [r7, #4]
    f1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
    f1b6:	687b      	ldr	r3, [r7, #4]
    f1b8:	6a1b      	ldr	r3, [r3, #32]
    f1ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    f1be:	687b      	ldr	r3, [r7, #4]
    f1c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    f1c2:	687b      	ldr	r3, [r7, #4]
    f1c4:	6a1b      	ldr	r3, [r3, #32]
    f1c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    f1c8:	687b      	ldr	r3, [r7, #4]
    f1ca:	685b      	ldr	r3, [r3, #4]
    f1cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    f1ce:	687b      	ldr	r3, [r7, #4]
    f1d0:	69db      	ldr	r3, [r3, #28]
    f1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
    f1d4:	68fa      	ldr	r2, [r7, #12]
    f1d6:	4b1e      	ldr	r3, [pc, #120]	; (f250 <TIM_OC4_SetConfig+0xa4>)
    f1d8:	4013      	ands	r3, r2
    f1da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
    f1dc:	68fb      	ldr	r3, [r7, #12]
    f1de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f1e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
    f1e4:	683b      	ldr	r3, [r7, #0]
    f1e6:	681b      	ldr	r3, [r3, #0]
    f1e8:	021b      	lsls	r3, r3, #8
    f1ea:	68fa      	ldr	r2, [r7, #12]
    f1ec:	4313      	orrs	r3, r2
    f1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
    f1f0:	693b      	ldr	r3, [r7, #16]
    f1f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f1f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
    f1f8:	683b      	ldr	r3, [r7, #0]
    f1fa:	689b      	ldr	r3, [r3, #8]
    f1fc:	031b      	lsls	r3, r3, #12
    f1fe:	693a      	ldr	r2, [r7, #16]
    f200:	4313      	orrs	r3, r2
    f202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
    f204:	687b      	ldr	r3, [r7, #4]
    f206:	4a13      	ldr	r2, [pc, #76]	; (f254 <TIM_OC4_SetConfig+0xa8>)
    f208:	4293      	cmp	r3, r2
    f20a:	d003      	beq.n	f214 <TIM_OC4_SetConfig+0x68>
    f20c:	687b      	ldr	r3, [r7, #4]
    f20e:	4a12      	ldr	r2, [pc, #72]	; (f258 <TIM_OC4_SetConfig+0xac>)
    f210:	4293      	cmp	r3, r2
    f212:	d109      	bne.n	f228 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    f214:	697b      	ldr	r3, [r7, #20]
    f216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    f21a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    f21c:	683b      	ldr	r3, [r7, #0]
    f21e:	695b      	ldr	r3, [r3, #20]
    f220:	019b      	lsls	r3, r3, #6
    f222:	697a      	ldr	r2, [r7, #20]
    f224:	4313      	orrs	r3, r2
    f226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    f228:	687b      	ldr	r3, [r7, #4]
    f22a:	697a      	ldr	r2, [r7, #20]
    f22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    f22e:	687b      	ldr	r3, [r7, #4]
    f230:	68fa      	ldr	r2, [r7, #12]
    f232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
    f234:	683b      	ldr	r3, [r7, #0]
    f236:	685a      	ldr	r2, [r3, #4]
    f238:	687b      	ldr	r3, [r7, #4]
    f23a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    f23c:	687b      	ldr	r3, [r7, #4]
    f23e:	693a      	ldr	r2, [r7, #16]
    f240:	621a      	str	r2, [r3, #32]
}
    f242:	bf00      	nop
    f244:	371c      	adds	r7, #28
    f246:	46bd      	mov	sp, r7
    f248:	f85d 7b04 	ldr.w	r7, [sp], #4
    f24c:	4770      	bx	lr
    f24e:	bf00      	nop
    f250:	feff8fff 	.word	0xfeff8fff
    f254:	40010000 	.word	0x40010000
    f258:	40010400 	.word	0x40010400

0000f25c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
    f25c:	b480      	push	{r7}
    f25e:	b087      	sub	sp, #28
    f260:	af00      	add	r7, sp, #0
    f262:	6078      	str	r0, [r7, #4]
    f264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
    f266:	687b      	ldr	r3, [r7, #4]
    f268:	6a1b      	ldr	r3, [r3, #32]
    f26a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    f26e:	687b      	ldr	r3, [r7, #4]
    f270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    f272:	687b      	ldr	r3, [r7, #4]
    f274:	6a1b      	ldr	r3, [r3, #32]
    f276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    f278:	687b      	ldr	r3, [r7, #4]
    f27a:	685b      	ldr	r3, [r3, #4]
    f27c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    f27e:	687b      	ldr	r3, [r7, #4]
    f280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
    f284:	68fa      	ldr	r2, [r7, #12]
    f286:	4b1b      	ldr	r3, [pc, #108]	; (f2f4 <TIM_OC5_SetConfig+0x98>)
    f288:	4013      	ands	r3, r2
    f28a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
    f28c:	683b      	ldr	r3, [r7, #0]
    f28e:	681b      	ldr	r3, [r3, #0]
    f290:	68fa      	ldr	r2, [r7, #12]
    f292:	4313      	orrs	r3, r2
    f294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
    f296:	693b      	ldr	r3, [r7, #16]
    f298:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    f29c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
    f29e:	683b      	ldr	r3, [r7, #0]
    f2a0:	689b      	ldr	r3, [r3, #8]
    f2a2:	041b      	lsls	r3, r3, #16
    f2a4:	693a      	ldr	r2, [r7, #16]
    f2a6:	4313      	orrs	r3, r2
    f2a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
    f2aa:	687b      	ldr	r3, [r7, #4]
    f2ac:	4a12      	ldr	r2, [pc, #72]	; (f2f8 <TIM_OC5_SetConfig+0x9c>)
    f2ae:	4293      	cmp	r3, r2
    f2b0:	d003      	beq.n	f2ba <TIM_OC5_SetConfig+0x5e>
    f2b2:	687b      	ldr	r3, [r7, #4]
    f2b4:	4a11      	ldr	r2, [pc, #68]	; (f2fc <TIM_OC5_SetConfig+0xa0>)
    f2b6:	4293      	cmp	r3, r2
    f2b8:	d109      	bne.n	f2ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    f2ba:	697b      	ldr	r3, [r7, #20]
    f2bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    f2c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
    f2c2:	683b      	ldr	r3, [r7, #0]
    f2c4:	695b      	ldr	r3, [r3, #20]
    f2c6:	021b      	lsls	r3, r3, #8
    f2c8:	697a      	ldr	r2, [r7, #20]
    f2ca:	4313      	orrs	r3, r2
    f2cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    f2ce:	687b      	ldr	r3, [r7, #4]
    f2d0:	697a      	ldr	r2, [r7, #20]
    f2d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
    f2d4:	687b      	ldr	r3, [r7, #4]
    f2d6:	68fa      	ldr	r2, [r7, #12]
    f2d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
    f2da:	683b      	ldr	r3, [r7, #0]
    f2dc:	685a      	ldr	r2, [r3, #4]
    f2de:	687b      	ldr	r3, [r7, #4]
    f2e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    f2e2:	687b      	ldr	r3, [r7, #4]
    f2e4:	693a      	ldr	r2, [r7, #16]
    f2e6:	621a      	str	r2, [r3, #32]
}
    f2e8:	bf00      	nop
    f2ea:	371c      	adds	r7, #28
    f2ec:	46bd      	mov	sp, r7
    f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    f2f2:	4770      	bx	lr
    f2f4:	fffeff8f 	.word	0xfffeff8f
    f2f8:	40010000 	.word	0x40010000
    f2fc:	40010400 	.word	0x40010400

0000f300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
    f300:	b480      	push	{r7}
    f302:	b087      	sub	sp, #28
    f304:	af00      	add	r7, sp, #0
    f306:	6078      	str	r0, [r7, #4]
    f308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
    f30a:	687b      	ldr	r3, [r7, #4]
    f30c:	6a1b      	ldr	r3, [r3, #32]
    f30e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    f312:	687b      	ldr	r3, [r7, #4]
    f314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    f316:	687b      	ldr	r3, [r7, #4]
    f318:	6a1b      	ldr	r3, [r3, #32]
    f31a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    f31c:	687b      	ldr	r3, [r7, #4]
    f31e:	685b      	ldr	r3, [r3, #4]
    f320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
    f328:	68fa      	ldr	r2, [r7, #12]
    f32a:	4b1c      	ldr	r3, [pc, #112]	; (f39c <TIM_OC6_SetConfig+0x9c>)
    f32c:	4013      	ands	r3, r2
    f32e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
    f330:	683b      	ldr	r3, [r7, #0]
    f332:	681b      	ldr	r3, [r3, #0]
    f334:	021b      	lsls	r3, r3, #8
    f336:	68fa      	ldr	r2, [r7, #12]
    f338:	4313      	orrs	r3, r2
    f33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
    f33c:	693b      	ldr	r3, [r7, #16]
    f33e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    f342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
    f344:	683b      	ldr	r3, [r7, #0]
    f346:	689b      	ldr	r3, [r3, #8]
    f348:	051b      	lsls	r3, r3, #20
    f34a:	693a      	ldr	r2, [r7, #16]
    f34c:	4313      	orrs	r3, r2
    f34e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
    f350:	687b      	ldr	r3, [r7, #4]
    f352:	4a13      	ldr	r2, [pc, #76]	; (f3a0 <TIM_OC6_SetConfig+0xa0>)
    f354:	4293      	cmp	r3, r2
    f356:	d003      	beq.n	f360 <TIM_OC6_SetConfig+0x60>
    f358:	687b      	ldr	r3, [r7, #4]
    f35a:	4a12      	ldr	r2, [pc, #72]	; (f3a4 <TIM_OC6_SetConfig+0xa4>)
    f35c:	4293      	cmp	r3, r2
    f35e:	d109      	bne.n	f374 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    f360:	697b      	ldr	r3, [r7, #20]
    f362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    f366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
    f368:	683b      	ldr	r3, [r7, #0]
    f36a:	695b      	ldr	r3, [r3, #20]
    f36c:	029b      	lsls	r3, r3, #10
    f36e:	697a      	ldr	r2, [r7, #20]
    f370:	4313      	orrs	r3, r2
    f372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    f374:	687b      	ldr	r3, [r7, #4]
    f376:	697a      	ldr	r2, [r7, #20]
    f378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
    f37a:	687b      	ldr	r3, [r7, #4]
    f37c:	68fa      	ldr	r2, [r7, #12]
    f37e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
    f380:	683b      	ldr	r3, [r7, #0]
    f382:	685a      	ldr	r2, [r3, #4]
    f384:	687b      	ldr	r3, [r7, #4]
    f386:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    f388:	687b      	ldr	r3, [r7, #4]
    f38a:	693a      	ldr	r2, [r7, #16]
    f38c:	621a      	str	r2, [r3, #32]
}
    f38e:	bf00      	nop
    f390:	371c      	adds	r7, #28
    f392:	46bd      	mov	sp, r7
    f394:	f85d 7b04 	ldr.w	r7, [sp], #4
    f398:	4770      	bx	lr
    f39a:	bf00      	nop
    f39c:	feff8fff 	.word	0xfeff8fff
    f3a0:	40010000 	.word	0x40010000
    f3a4:	40010400 	.word	0x40010400

0000f3a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
    f3a8:	b480      	push	{r7}
    f3aa:	b087      	sub	sp, #28
    f3ac:	af00      	add	r7, sp, #0
    f3ae:	60f8      	str	r0, [r7, #12]
    f3b0:	60b9      	str	r1, [r7, #8]
    f3b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
    f3b4:	68fb      	ldr	r3, [r7, #12]
    f3b6:	6a1b      	ldr	r3, [r3, #32]
    f3b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
    f3ba:	68fb      	ldr	r3, [r7, #12]
    f3bc:	6a1b      	ldr	r3, [r3, #32]
    f3be:	f023 0201 	bic.w	r2, r3, #1
    f3c2:	68fb      	ldr	r3, [r7, #12]
    f3c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    f3c6:	68fb      	ldr	r3, [r7, #12]
    f3c8:	699b      	ldr	r3, [r3, #24]
    f3ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
    f3cc:	693b      	ldr	r3, [r7, #16]
    f3ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    f3d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
    f3d4:	687b      	ldr	r3, [r7, #4]
    f3d6:	011b      	lsls	r3, r3, #4
    f3d8:	693a      	ldr	r2, [r7, #16]
    f3da:	4313      	orrs	r3, r2
    f3dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
    f3de:	697b      	ldr	r3, [r7, #20]
    f3e0:	f023 030a 	bic.w	r3, r3, #10
    f3e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
    f3e6:	697a      	ldr	r2, [r7, #20]
    f3e8:	68bb      	ldr	r3, [r7, #8]
    f3ea:	4313      	orrs	r3, r2
    f3ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    f3ee:	68fb      	ldr	r3, [r7, #12]
    f3f0:	693a      	ldr	r2, [r7, #16]
    f3f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    f3f4:	68fb      	ldr	r3, [r7, #12]
    f3f6:	697a      	ldr	r2, [r7, #20]
    f3f8:	621a      	str	r2, [r3, #32]
}
    f3fa:	bf00      	nop
    f3fc:	371c      	adds	r7, #28
    f3fe:	46bd      	mov	sp, r7
    f400:	f85d 7b04 	ldr.w	r7, [sp], #4
    f404:	4770      	bx	lr

0000f406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
    f406:	b480      	push	{r7}
    f408:	b087      	sub	sp, #28
    f40a:	af00      	add	r7, sp, #0
    f40c:	60f8      	str	r0, [r7, #12]
    f40e:	60b9      	str	r1, [r7, #8]
    f410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
    f412:	68fb      	ldr	r3, [r7, #12]
    f414:	6a1b      	ldr	r3, [r3, #32]
    f416:	f023 0210 	bic.w	r2, r3, #16
    f41a:	68fb      	ldr	r3, [r7, #12]
    f41c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    f41e:	68fb      	ldr	r3, [r7, #12]
    f420:	699b      	ldr	r3, [r3, #24]
    f422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    f424:	68fb      	ldr	r3, [r7, #12]
    f426:	6a1b      	ldr	r3, [r3, #32]
    f428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
    f42a:	697b      	ldr	r3, [r7, #20]
    f42c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    f430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
    f432:	687b      	ldr	r3, [r7, #4]
    f434:	031b      	lsls	r3, r3, #12
    f436:	697a      	ldr	r2, [r7, #20]
    f438:	4313      	orrs	r3, r2
    f43a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
    f43c:	693b      	ldr	r3, [r7, #16]
    f43e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    f442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
    f444:	68bb      	ldr	r3, [r7, #8]
    f446:	011b      	lsls	r3, r3, #4
    f448:	693a      	ldr	r2, [r7, #16]
    f44a:	4313      	orrs	r3, r2
    f44c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    f44e:	68fb      	ldr	r3, [r7, #12]
    f450:	697a      	ldr	r2, [r7, #20]
    f452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    f454:	68fb      	ldr	r3, [r7, #12]
    f456:	693a      	ldr	r2, [r7, #16]
    f458:	621a      	str	r2, [r3, #32]
}
    f45a:	bf00      	nop
    f45c:	371c      	adds	r7, #28
    f45e:	46bd      	mov	sp, r7
    f460:	f85d 7b04 	ldr.w	r7, [sp], #4
    f464:	4770      	bx	lr

0000f466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
    f466:	b480      	push	{r7}
    f468:	b085      	sub	sp, #20
    f46a:	af00      	add	r7, sp, #0
    f46c:	6078      	str	r0, [r7, #4]
    f46e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    f470:	687b      	ldr	r3, [r7, #4]
    f472:	689b      	ldr	r3, [r3, #8]
    f474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
    f476:	68fb      	ldr	r3, [r7, #12]
    f478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    f47c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
    f47e:	683a      	ldr	r2, [r7, #0]
    f480:	68fb      	ldr	r3, [r7, #12]
    f482:	4313      	orrs	r3, r2
    f484:	f043 0307 	orr.w	r3, r3, #7
    f488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    f48a:	687b      	ldr	r3, [r7, #4]
    f48c:	68fa      	ldr	r2, [r7, #12]
    f48e:	609a      	str	r2, [r3, #8]
}
    f490:	bf00      	nop
    f492:	3714      	adds	r7, #20
    f494:	46bd      	mov	sp, r7
    f496:	f85d 7b04 	ldr.w	r7, [sp], #4
    f49a:	4770      	bx	lr

0000f49c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
    f49c:	b480      	push	{r7}
    f49e:	b087      	sub	sp, #28
    f4a0:	af00      	add	r7, sp, #0
    f4a2:	60f8      	str	r0, [r7, #12]
    f4a4:	60b9      	str	r1, [r7, #8]
    f4a6:	607a      	str	r2, [r7, #4]
    f4a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
    f4aa:	68fb      	ldr	r3, [r7, #12]
    f4ac:	689b      	ldr	r3, [r3, #8]
    f4ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
    f4b0:	697b      	ldr	r3, [r7, #20]
    f4b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    f4b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
    f4b8:	683b      	ldr	r3, [r7, #0]
    f4ba:	021a      	lsls	r2, r3, #8
    f4bc:	687b      	ldr	r3, [r7, #4]
    f4be:	431a      	orrs	r2, r3
    f4c0:	68bb      	ldr	r3, [r7, #8]
    f4c2:	4313      	orrs	r3, r2
    f4c4:	697a      	ldr	r2, [r7, #20]
    f4c6:	4313      	orrs	r3, r2
    f4c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    f4ca:	68fb      	ldr	r3, [r7, #12]
    f4cc:	697a      	ldr	r2, [r7, #20]
    f4ce:	609a      	str	r2, [r3, #8]
}
    f4d0:	bf00      	nop
    f4d2:	371c      	adds	r7, #28
    f4d4:	46bd      	mov	sp, r7
    f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    f4da:	4770      	bx	lr

0000f4dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
    f4dc:	b480      	push	{r7}
    f4de:	b087      	sub	sp, #28
    f4e0:	af00      	add	r7, sp, #0
    f4e2:	60f8      	str	r0, [r7, #12]
    f4e4:	60b9      	str	r1, [r7, #8]
    f4e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
    f4e8:	68bb      	ldr	r3, [r7, #8]
    f4ea:	f003 031f 	and.w	r3, r3, #31
    f4ee:	2201      	movs	r2, #1
    f4f0:	fa02 f303 	lsl.w	r3, r2, r3
    f4f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
    f4f6:	68fb      	ldr	r3, [r7, #12]
    f4f8:	6a1a      	ldr	r2, [r3, #32]
    f4fa:	697b      	ldr	r3, [r7, #20]
    f4fc:	43db      	mvns	r3, r3
    f4fe:	401a      	ands	r2, r3
    f500:	68fb      	ldr	r3, [r7, #12]
    f502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
    f504:	68fb      	ldr	r3, [r7, #12]
    f506:	6a1a      	ldr	r2, [r3, #32]
    f508:	68bb      	ldr	r3, [r7, #8]
    f50a:	f003 031f 	and.w	r3, r3, #31
    f50e:	6879      	ldr	r1, [r7, #4]
    f510:	fa01 f303 	lsl.w	r3, r1, r3
    f514:	431a      	orrs	r2, r3
    f516:	68fb      	ldr	r3, [r7, #12]
    f518:	621a      	str	r2, [r3, #32]
}
    f51a:	bf00      	nop
    f51c:	371c      	adds	r7, #28
    f51e:	46bd      	mov	sp, r7
    f520:	f85d 7b04 	ldr.w	r7, [sp], #4
    f524:	4770      	bx	lr
	...

0000f528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
    f528:	b480      	push	{r7}
    f52a:	b085      	sub	sp, #20
    f52c:	af00      	add	r7, sp, #0
    f52e:	6078      	str	r0, [r7, #4]
    f530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
    f532:	687b      	ldr	r3, [r7, #4]
    f534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    f538:	2b01      	cmp	r3, #1
    f53a:	d101      	bne.n	f540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
    f53c:	2302      	movs	r3, #2
    f53e:	e06d      	b.n	f61c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
    f540:	687b      	ldr	r3, [r7, #4]
    f542:	2201      	movs	r2, #1
    f544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
    f548:	687b      	ldr	r3, [r7, #4]
    f54a:	2202      	movs	r2, #2
    f54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
    f550:	687b      	ldr	r3, [r7, #4]
    f552:	681b      	ldr	r3, [r3, #0]
    f554:	685b      	ldr	r3, [r3, #4]
    f556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
    f558:	687b      	ldr	r3, [r7, #4]
    f55a:	681b      	ldr	r3, [r3, #0]
    f55c:	689b      	ldr	r3, [r3, #8]
    f55e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
    f560:	687b      	ldr	r3, [r7, #4]
    f562:	681b      	ldr	r3, [r3, #0]
    f564:	4a30      	ldr	r2, [pc, #192]	; (f628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
    f566:	4293      	cmp	r3, r2
    f568:	d004      	beq.n	f574 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    f56a:	687b      	ldr	r3, [r7, #4]
    f56c:	681b      	ldr	r3, [r3, #0]
    f56e:	4a2f      	ldr	r2, [pc, #188]	; (f62c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
    f570:	4293      	cmp	r3, r2
    f572:	d108      	bne.n	f586 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    f574:	68fb      	ldr	r3, [r7, #12]
    f576:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    f57a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
    f57c:	683b      	ldr	r3, [r7, #0]
    f57e:	685b      	ldr	r3, [r3, #4]
    f580:	68fa      	ldr	r2, [r7, #12]
    f582:	4313      	orrs	r3, r2
    f584:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
    f586:	68fb      	ldr	r3, [r7, #12]
    f588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    f58c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
    f58e:	683b      	ldr	r3, [r7, #0]
    f590:	681b      	ldr	r3, [r3, #0]
    f592:	68fa      	ldr	r2, [r7, #12]
    f594:	4313      	orrs	r3, r2
    f596:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
    f598:	687b      	ldr	r3, [r7, #4]
    f59a:	681b      	ldr	r3, [r3, #0]
    f59c:	68fa      	ldr	r2, [r7, #12]
    f59e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
    f5a0:	687b      	ldr	r3, [r7, #4]
    f5a2:	681b      	ldr	r3, [r3, #0]
    f5a4:	4a20      	ldr	r2, [pc, #128]	; (f628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
    f5a6:	4293      	cmp	r3, r2
    f5a8:	d022      	beq.n	f5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
    f5aa:	687b      	ldr	r3, [r7, #4]
    f5ac:	681b      	ldr	r3, [r3, #0]
    f5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    f5b2:	d01d      	beq.n	f5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
    f5b4:	687b      	ldr	r3, [r7, #4]
    f5b6:	681b      	ldr	r3, [r3, #0]
    f5b8:	4a1d      	ldr	r2, [pc, #116]	; (f630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
    f5ba:	4293      	cmp	r3, r2
    f5bc:	d018      	beq.n	f5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
    f5be:	687b      	ldr	r3, [r7, #4]
    f5c0:	681b      	ldr	r3, [r3, #0]
    f5c2:	4a1c      	ldr	r2, [pc, #112]	; (f634 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
    f5c4:	4293      	cmp	r3, r2
    f5c6:	d013      	beq.n	f5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
    f5c8:	687b      	ldr	r3, [r7, #4]
    f5ca:	681b      	ldr	r3, [r3, #0]
    f5cc:	4a1a      	ldr	r2, [pc, #104]	; (f638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
    f5ce:	4293      	cmp	r3, r2
    f5d0:	d00e      	beq.n	f5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
    f5d2:	687b      	ldr	r3, [r7, #4]
    f5d4:	681b      	ldr	r3, [r3, #0]
    f5d6:	4a15      	ldr	r2, [pc, #84]	; (f62c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
    f5d8:	4293      	cmp	r3, r2
    f5da:	d009      	beq.n	f5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
    f5dc:	687b      	ldr	r3, [r7, #4]
    f5de:	681b      	ldr	r3, [r3, #0]
    f5e0:	4a16      	ldr	r2, [pc, #88]	; (f63c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
    f5e2:	4293      	cmp	r3, r2
    f5e4:	d004      	beq.n	f5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
    f5e6:	687b      	ldr	r3, [r7, #4]
    f5e8:	681b      	ldr	r3, [r3, #0]
    f5ea:	4a15      	ldr	r2, [pc, #84]	; (f640 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
    f5ec:	4293      	cmp	r3, r2
    f5ee:	d10c      	bne.n	f60a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    f5f0:	68bb      	ldr	r3, [r7, #8]
    f5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f5f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
    f5f8:	683b      	ldr	r3, [r7, #0]
    f5fa:	689b      	ldr	r3, [r3, #8]
    f5fc:	68ba      	ldr	r2, [r7, #8]
    f5fe:	4313      	orrs	r3, r2
    f600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
    f602:	687b      	ldr	r3, [r7, #4]
    f604:	681b      	ldr	r3, [r3, #0]
    f606:	68ba      	ldr	r2, [r7, #8]
    f608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
    f60a:	687b      	ldr	r3, [r7, #4]
    f60c:	2201      	movs	r2, #1
    f60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
    f612:	687b      	ldr	r3, [r7, #4]
    f614:	2200      	movs	r2, #0
    f616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
    f61a:	2300      	movs	r3, #0
}
    f61c:	4618      	mov	r0, r3
    f61e:	3714      	adds	r7, #20
    f620:	46bd      	mov	sp, r7
    f622:	f85d 7b04 	ldr.w	r7, [sp], #4
    f626:	4770      	bx	lr
    f628:	40010000 	.word	0x40010000
    f62c:	40010400 	.word	0x40010400
    f630:	40000400 	.word	0x40000400
    f634:	40000800 	.word	0x40000800
    f638:	40000c00 	.word	0x40000c00
    f63c:	40014000 	.word	0x40014000
    f640:	40001800 	.word	0x40001800

0000f644 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
    f644:	b480      	push	{r7}
    f646:	b085      	sub	sp, #20
    f648:	af00      	add	r7, sp, #0
    f64a:	6078      	str	r0, [r7, #4]
    f64c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
    f64e:	2300      	movs	r3, #0
    f650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
    f652:	687b      	ldr	r3, [r7, #4]
    f654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    f658:	2b01      	cmp	r3, #1
    f65a:	d101      	bne.n	f660 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
    f65c:	2302      	movs	r3, #2
    f65e:	e065      	b.n	f72c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    f660:	687b      	ldr	r3, [r7, #4]
    f662:	2201      	movs	r2, #1
    f664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
    f668:	68fb      	ldr	r3, [r7, #12]
    f66a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
    f66e:	683b      	ldr	r3, [r7, #0]
    f670:	68db      	ldr	r3, [r3, #12]
    f672:	4313      	orrs	r3, r2
    f674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
    f676:	68fb      	ldr	r3, [r7, #12]
    f678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
    f67c:	683b      	ldr	r3, [r7, #0]
    f67e:	689b      	ldr	r3, [r3, #8]
    f680:	4313      	orrs	r3, r2
    f682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
    f684:	68fb      	ldr	r3, [r7, #12]
    f686:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    f68a:	683b      	ldr	r3, [r7, #0]
    f68c:	685b      	ldr	r3, [r3, #4]
    f68e:	4313      	orrs	r3, r2
    f690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
    f692:	68fb      	ldr	r3, [r7, #12]
    f694:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    f698:	683b      	ldr	r3, [r7, #0]
    f69a:	681b      	ldr	r3, [r3, #0]
    f69c:	4313      	orrs	r3, r2
    f69e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
    f6a0:	68fb      	ldr	r3, [r7, #12]
    f6a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    f6a6:	683b      	ldr	r3, [r7, #0]
    f6a8:	691b      	ldr	r3, [r3, #16]
    f6aa:	4313      	orrs	r3, r2
    f6ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
    f6ae:	68fb      	ldr	r3, [r7, #12]
    f6b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
    f6b4:	683b      	ldr	r3, [r7, #0]
    f6b6:	695b      	ldr	r3, [r3, #20]
    f6b8:	4313      	orrs	r3, r2
    f6ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
    f6bc:	68fb      	ldr	r3, [r7, #12]
    f6be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
    f6c2:	683b      	ldr	r3, [r7, #0]
    f6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f6c6:	4313      	orrs	r3, r2
    f6c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
    f6ca:	68fb      	ldr	r3, [r7, #12]
    f6cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    f6d0:	683b      	ldr	r3, [r7, #0]
    f6d2:	699b      	ldr	r3, [r3, #24]
    f6d4:	041b      	lsls	r3, r3, #16
    f6d6:	4313      	orrs	r3, r2
    f6d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
    f6da:	687b      	ldr	r3, [r7, #4]
    f6dc:	681b      	ldr	r3, [r3, #0]
    f6de:	4a16      	ldr	r2, [pc, #88]	; (f738 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
    f6e0:	4293      	cmp	r3, r2
    f6e2:	d004      	beq.n	f6ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
    f6e4:	687b      	ldr	r3, [r7, #4]
    f6e6:	681b      	ldr	r3, [r3, #0]
    f6e8:	4a14      	ldr	r2, [pc, #80]	; (f73c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
    f6ea:	4293      	cmp	r3, r2
    f6ec:	d115      	bne.n	f71a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
    f6ee:	68fb      	ldr	r3, [r7, #12]
    f6f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
    f6f4:	683b      	ldr	r3, [r7, #0]
    f6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f6f8:	051b      	lsls	r3, r3, #20
    f6fa:	4313      	orrs	r3, r2
    f6fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    f6fe:	68fb      	ldr	r3, [r7, #12]
    f700:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
    f704:	683b      	ldr	r3, [r7, #0]
    f706:	69db      	ldr	r3, [r3, #28]
    f708:	4313      	orrs	r3, r2
    f70a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    f70c:	68fb      	ldr	r3, [r7, #12]
    f70e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
    f712:	683b      	ldr	r3, [r7, #0]
    f714:	6a1b      	ldr	r3, [r3, #32]
    f716:	4313      	orrs	r3, r2
    f718:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
    f71a:	687b      	ldr	r3, [r7, #4]
    f71c:	681b      	ldr	r3, [r3, #0]
    f71e:	68fa      	ldr	r2, [r7, #12]
    f720:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
    f722:	687b      	ldr	r3, [r7, #4]
    f724:	2200      	movs	r2, #0
    f726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
    f72a:	2300      	movs	r3, #0
}
    f72c:	4618      	mov	r0, r3
    f72e:	3714      	adds	r7, #20
    f730:	46bd      	mov	sp, r7
    f732:	f85d 7b04 	ldr.w	r7, [sp], #4
    f736:	4770      	bx	lr
    f738:	40010000 	.word	0x40010000
    f73c:	40010400 	.word	0x40010400

0000f740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
    f740:	b580      	push	{r7, lr}
    f742:	b082      	sub	sp, #8
    f744:	af00      	add	r7, sp, #0
    f746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
    f748:	687b      	ldr	r3, [r7, #4]
    f74a:	2b00      	cmp	r3, #0
    f74c:	d101      	bne.n	f752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
    f74e:	2301      	movs	r3, #1
    f750:	e040      	b.n	f7d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
    f752:	687b      	ldr	r3, [r7, #4]
    f754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    f756:	2b00      	cmp	r3, #0
    f758:	d106      	bne.n	f768 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
    f75a:	687b      	ldr	r3, [r7, #4]
    f75c:	2200      	movs	r2, #0
    f75e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
    f762:	6878      	ldr	r0, [r7, #4]
    f764:	f7fa fe52 	bl	a40c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
    f768:	687b      	ldr	r3, [r7, #4]
    f76a:	2224      	movs	r2, #36	; 0x24
    f76c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
    f76e:	687b      	ldr	r3, [r7, #4]
    f770:	681b      	ldr	r3, [r3, #0]
    f772:	681a      	ldr	r2, [r3, #0]
    f774:	687b      	ldr	r3, [r7, #4]
    f776:	681b      	ldr	r3, [r3, #0]
    f778:	f022 0201 	bic.w	r2, r2, #1
    f77c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
    f77e:	6878      	ldr	r0, [r7, #4]
    f780:	f000 f94a 	bl	fa18 <UART_SetConfig>
    f784:	4603      	mov	r3, r0
    f786:	2b01      	cmp	r3, #1
    f788:	d101      	bne.n	f78e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
    f78a:	2301      	movs	r3, #1
    f78c:	e022      	b.n	f7d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
    f78e:	687b      	ldr	r3, [r7, #4]
    f790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f792:	2b00      	cmp	r3, #0
    f794:	d002      	beq.n	f79c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
    f796:	6878      	ldr	r0, [r7, #4]
    f798:	f000 fbe8 	bl	ff6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
    f79c:	687b      	ldr	r3, [r7, #4]
    f79e:	681b      	ldr	r3, [r3, #0]
    f7a0:	685a      	ldr	r2, [r3, #4]
    f7a2:	687b      	ldr	r3, [r7, #4]
    f7a4:	681b      	ldr	r3, [r3, #0]
    f7a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    f7aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
    f7ac:	687b      	ldr	r3, [r7, #4]
    f7ae:	681b      	ldr	r3, [r3, #0]
    f7b0:	689a      	ldr	r2, [r3, #8]
    f7b2:	687b      	ldr	r3, [r7, #4]
    f7b4:	681b      	ldr	r3, [r3, #0]
    f7b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
    f7ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
    f7bc:	687b      	ldr	r3, [r7, #4]
    f7be:	681b      	ldr	r3, [r3, #0]
    f7c0:	681a      	ldr	r2, [r3, #0]
    f7c2:	687b      	ldr	r3, [r7, #4]
    f7c4:	681b      	ldr	r3, [r3, #0]
    f7c6:	f042 0201 	orr.w	r2, r2, #1
    f7ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
    f7cc:	6878      	ldr	r0, [r7, #4]
    f7ce:	f000 fc6f 	bl	100b0 <UART_CheckIdleState>
    f7d2:	4603      	mov	r3, r0
}
    f7d4:	4618      	mov	r0, r3
    f7d6:	3708      	adds	r7, #8
    f7d8:	46bd      	mov	sp, r7
    f7da:	bd80      	pop	{r7, pc}

0000f7dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
    f7dc:	b580      	push	{r7, lr}
    f7de:	b084      	sub	sp, #16
    f7e0:	af00      	add	r7, sp, #0
    f7e2:	60f8      	str	r0, [r7, #12]
    f7e4:	60b9      	str	r1, [r7, #8]
    f7e6:	4613      	mov	r3, r2
    f7e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
    f7ea:	68fb      	ldr	r3, [r7, #12]
    f7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    f7ee:	2b20      	cmp	r3, #32
    f7f0:	d164      	bne.n	f8bc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
    f7f2:	68bb      	ldr	r3, [r7, #8]
    f7f4:	2b00      	cmp	r3, #0
    f7f6:	d002      	beq.n	f7fe <HAL_UART_Transmit_DMA+0x22>
    f7f8:	88fb      	ldrh	r3, [r7, #6]
    f7fa:	2b00      	cmp	r3, #0
    f7fc:	d101      	bne.n	f802 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
    f7fe:	2301      	movs	r3, #1
    f800:	e05d      	b.n	f8be <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
    f802:	68fb      	ldr	r3, [r7, #12]
    f804:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    f808:	2b01      	cmp	r3, #1
    f80a:	d101      	bne.n	f810 <HAL_UART_Transmit_DMA+0x34>
    f80c:	2302      	movs	r3, #2
    f80e:	e056      	b.n	f8be <HAL_UART_Transmit_DMA+0xe2>
    f810:	68fb      	ldr	r3, [r7, #12]
    f812:	2201      	movs	r2, #1
    f814:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
    f818:	68fb      	ldr	r3, [r7, #12]
    f81a:	68ba      	ldr	r2, [r7, #8]
    f81c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
    f81e:	68fb      	ldr	r3, [r7, #12]
    f820:	88fa      	ldrh	r2, [r7, #6]
    f822:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
    f826:	68fb      	ldr	r3, [r7, #12]
    f828:	88fa      	ldrh	r2, [r7, #6]
    f82a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    f82e:	68fb      	ldr	r3, [r7, #12]
    f830:	2200      	movs	r2, #0
    f832:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
    f834:	68fb      	ldr	r3, [r7, #12]
    f836:	2221      	movs	r2, #33	; 0x21
    f838:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
    f83a:	68fb      	ldr	r3, [r7, #12]
    f83c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    f83e:	2b00      	cmp	r3, #0
    f840:	d02a      	beq.n	f898 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
    f842:	68fb      	ldr	r3, [r7, #12]
    f844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    f846:	4a20      	ldr	r2, [pc, #128]	; (f8c8 <HAL_UART_Transmit_DMA+0xec>)
    f848:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
    f84a:	68fb      	ldr	r3, [r7, #12]
    f84c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    f84e:	4a1f      	ldr	r2, [pc, #124]	; (f8cc <HAL_UART_Transmit_DMA+0xf0>)
    f850:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
    f852:	68fb      	ldr	r3, [r7, #12]
    f854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    f856:	4a1e      	ldr	r2, [pc, #120]	; (f8d0 <HAL_UART_Transmit_DMA+0xf4>)
    f858:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
    f85a:	68fb      	ldr	r3, [r7, #12]
    f85c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    f85e:	2200      	movs	r2, #0
    f860:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
    f862:	68fb      	ldr	r3, [r7, #12]
    f864:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f866:	68fb      	ldr	r3, [r7, #12]
    f868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f86a:	4619      	mov	r1, r3
    f86c:	68fb      	ldr	r3, [r7, #12]
    f86e:	681b      	ldr	r3, [r3, #0]
    f870:	3328      	adds	r3, #40	; 0x28
    f872:	461a      	mov	r2, r3
    f874:	88fb      	ldrh	r3, [r7, #6]
    f876:	f7fc fb5b 	bl	bf30 <HAL_DMA_Start_IT>
    f87a:	4603      	mov	r3, r0
    f87c:	2b00      	cmp	r3, #0
    f87e:	d00b      	beq.n	f898 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
    f880:	68fb      	ldr	r3, [r7, #12]
    f882:	2210      	movs	r2, #16
    f884:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
    f886:	68fb      	ldr	r3, [r7, #12]
    f888:	2200      	movs	r2, #0
    f88a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
    f88e:	68fb      	ldr	r3, [r7, #12]
    f890:	2220      	movs	r2, #32
    f892:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
    f894:	2301      	movs	r3, #1
    f896:	e012      	b.n	f8be <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
    f898:	68fb      	ldr	r3, [r7, #12]
    f89a:	681b      	ldr	r3, [r3, #0]
    f89c:	2240      	movs	r2, #64	; 0x40
    f89e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
    f8a0:	68fb      	ldr	r3, [r7, #12]
    f8a2:	2200      	movs	r2, #0
    f8a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    f8a8:	68fb      	ldr	r3, [r7, #12]
    f8aa:	681b      	ldr	r3, [r3, #0]
    f8ac:	689a      	ldr	r2, [r3, #8]
    f8ae:	68fb      	ldr	r3, [r7, #12]
    f8b0:	681b      	ldr	r3, [r3, #0]
    f8b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f8b6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
    f8b8:	2300      	movs	r3, #0
    f8ba:	e000      	b.n	f8be <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
    f8bc:	2302      	movs	r3, #2
  }
}
    f8be:	4618      	mov	r0, r3
    f8c0:	3710      	adds	r7, #16
    f8c2:	46bd      	mov	sp, r7
    f8c4:	bd80      	pop	{r7, pc}
    f8c6:	bf00      	nop
    f8c8:	0001029b 	.word	0x0001029b
    f8cc:	000102eb 	.word	0x000102eb
    f8d0:	00010387 	.word	0x00010387

0000f8d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
    f8d4:	b580      	push	{r7, lr}
    f8d6:	b084      	sub	sp, #16
    f8d8:	af00      	add	r7, sp, #0
    f8da:	60f8      	str	r0, [r7, #12]
    f8dc:	60b9      	str	r1, [r7, #8]
    f8de:	4613      	mov	r3, r2
    f8e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
    f8e2:	68fb      	ldr	r3, [r7, #12]
    f8e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f8e6:	2b20      	cmp	r3, #32
    f8e8:	d16c      	bne.n	f9c4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
    f8ea:	68bb      	ldr	r3, [r7, #8]
    f8ec:	2b00      	cmp	r3, #0
    f8ee:	d002      	beq.n	f8f6 <HAL_UART_Receive_DMA+0x22>
    f8f0:	88fb      	ldrh	r3, [r7, #6]
    f8f2:	2b00      	cmp	r3, #0
    f8f4:	d101      	bne.n	f8fa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
    f8f6:	2301      	movs	r3, #1
    f8f8:	e065      	b.n	f9c6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
    f8fa:	68fb      	ldr	r3, [r7, #12]
    f8fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    f900:	2b01      	cmp	r3, #1
    f902:	d101      	bne.n	f908 <HAL_UART_Receive_DMA+0x34>
    f904:	2302      	movs	r3, #2
    f906:	e05e      	b.n	f9c6 <HAL_UART_Receive_DMA+0xf2>
    f908:	68fb      	ldr	r3, [r7, #12]
    f90a:	2201      	movs	r2, #1
    f90c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
    f910:	68fb      	ldr	r3, [r7, #12]
    f912:	68ba      	ldr	r2, [r7, #8]
    f914:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
    f916:	68fb      	ldr	r3, [r7, #12]
    f918:	88fa      	ldrh	r2, [r7, #6]
    f91a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    f91e:	68fb      	ldr	r3, [r7, #12]
    f920:	2200      	movs	r2, #0
    f922:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    f924:	68fb      	ldr	r3, [r7, #12]
    f926:	2222      	movs	r2, #34	; 0x22
    f928:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
    f92a:	68fb      	ldr	r3, [r7, #12]
    f92c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f92e:	2b00      	cmp	r3, #0
    f930:	d02a      	beq.n	f988 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
    f932:	68fb      	ldr	r3, [r7, #12]
    f934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f936:	4a26      	ldr	r2, [pc, #152]	; (f9d0 <HAL_UART_Receive_DMA+0xfc>)
    f938:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
    f93a:	68fb      	ldr	r3, [r7, #12]
    f93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f93e:	4a25      	ldr	r2, [pc, #148]	; (f9d4 <HAL_UART_Receive_DMA+0x100>)
    f940:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
    f942:	68fb      	ldr	r3, [r7, #12]
    f944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f946:	4a24      	ldr	r2, [pc, #144]	; (f9d8 <HAL_UART_Receive_DMA+0x104>)
    f948:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
    f94a:	68fb      	ldr	r3, [r7, #12]
    f94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f94e:	2200      	movs	r2, #0
    f950:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
    f952:	68fb      	ldr	r3, [r7, #12]
    f954:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    f956:	68fb      	ldr	r3, [r7, #12]
    f958:	681b      	ldr	r3, [r3, #0]
    f95a:	3324      	adds	r3, #36	; 0x24
    f95c:	4619      	mov	r1, r3
    f95e:	68fb      	ldr	r3, [r7, #12]
    f960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f962:	461a      	mov	r2, r3
    f964:	88fb      	ldrh	r3, [r7, #6]
    f966:	f7fc fae3 	bl	bf30 <HAL_DMA_Start_IT>
    f96a:	4603      	mov	r3, r0
    f96c:	2b00      	cmp	r3, #0
    f96e:	d00b      	beq.n	f988 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
    f970:	68fb      	ldr	r3, [r7, #12]
    f972:	2210      	movs	r2, #16
    f974:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
    f976:	68fb      	ldr	r3, [r7, #12]
    f978:	2200      	movs	r2, #0
    f97a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
    f97e:	68fb      	ldr	r3, [r7, #12]
    f980:	2220      	movs	r2, #32
    f982:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
    f984:	2301      	movs	r3, #1
    f986:	e01e      	b.n	f9c6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
    f988:	68fb      	ldr	r3, [r7, #12]
    f98a:	2200      	movs	r2, #0
    f98c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
    f990:	68fb      	ldr	r3, [r7, #12]
    f992:	681b      	ldr	r3, [r3, #0]
    f994:	681a      	ldr	r2, [r3, #0]
    f996:	68fb      	ldr	r3, [r7, #12]
    f998:	681b      	ldr	r3, [r3, #0]
    f99a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    f99e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
    f9a0:	68fb      	ldr	r3, [r7, #12]
    f9a2:	681b      	ldr	r3, [r3, #0]
    f9a4:	689a      	ldr	r2, [r3, #8]
    f9a6:	68fb      	ldr	r3, [r7, #12]
    f9a8:	681b      	ldr	r3, [r3, #0]
    f9aa:	f042 0201 	orr.w	r2, r2, #1
    f9ae:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    f9b0:	68fb      	ldr	r3, [r7, #12]
    f9b2:	681b      	ldr	r3, [r3, #0]
    f9b4:	689a      	ldr	r2, [r3, #8]
    f9b6:	68fb      	ldr	r3, [r7, #12]
    f9b8:	681b      	ldr	r3, [r3, #0]
    f9ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f9be:	609a      	str	r2, [r3, #8]

    return HAL_OK;
    f9c0:	2300      	movs	r3, #0
    f9c2:	e000      	b.n	f9c6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
    f9c4:	2302      	movs	r3, #2
  }
}
    f9c6:	4618      	mov	r0, r3
    f9c8:	3710      	adds	r7, #16
    f9ca:	46bd      	mov	sp, r7
    f9cc:	bd80      	pop	{r7, pc}
    f9ce:	bf00      	nop
    f9d0:	00010307 	.word	0x00010307
    f9d4:	0001036b 	.word	0x0001036b
    f9d8:	00010387 	.word	0x00010387

0000f9dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
    f9dc:	b480      	push	{r7}
    f9de:	b083      	sub	sp, #12
    f9e0:	af00      	add	r7, sp, #0
    f9e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
    f9e4:	bf00      	nop
    f9e6:	370c      	adds	r7, #12
    f9e8:	46bd      	mov	sp, r7
    f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    f9ee:	4770      	bx	lr

0000f9f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
    f9f0:	b480      	push	{r7}
    f9f2:	b083      	sub	sp, #12
    f9f4:	af00      	add	r7, sp, #0
    f9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
    f9f8:	bf00      	nop
    f9fa:	370c      	adds	r7, #12
    f9fc:	46bd      	mov	sp, r7
    f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa02:	4770      	bx	lr

0000fa04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    fa04:	b480      	push	{r7}
    fa06:	b083      	sub	sp, #12
    fa08:	af00      	add	r7, sp, #0
    fa0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
    fa0c:	bf00      	nop
    fa0e:	370c      	adds	r7, #12
    fa10:	46bd      	mov	sp, r7
    fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa16:	4770      	bx	lr

0000fa18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
    fa18:	b580      	push	{r7, lr}
    fa1a:	b088      	sub	sp, #32
    fa1c:	af00      	add	r7, sp, #0
    fa1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
    fa20:	2300      	movs	r3, #0
    fa22:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
    fa24:	2300      	movs	r3, #0
    fa26:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
    fa28:	687b      	ldr	r3, [r7, #4]
    fa2a:	689a      	ldr	r2, [r3, #8]
    fa2c:	687b      	ldr	r3, [r7, #4]
    fa2e:	691b      	ldr	r3, [r3, #16]
    fa30:	431a      	orrs	r2, r3
    fa32:	687b      	ldr	r3, [r7, #4]
    fa34:	695b      	ldr	r3, [r3, #20]
    fa36:	431a      	orrs	r2, r3
    fa38:	687b      	ldr	r3, [r7, #4]
    fa3a:	69db      	ldr	r3, [r3, #28]
    fa3c:	4313      	orrs	r3, r2
    fa3e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
    fa40:	687b      	ldr	r3, [r7, #4]
    fa42:	681b      	ldr	r3, [r3, #0]
    fa44:	681a      	ldr	r2, [r3, #0]
    fa46:	4bb1      	ldr	r3, [pc, #708]	; (fd0c <UART_SetConfig+0x2f4>)
    fa48:	4013      	ands	r3, r2
    fa4a:	687a      	ldr	r2, [r7, #4]
    fa4c:	6812      	ldr	r2, [r2, #0]
    fa4e:	6939      	ldr	r1, [r7, #16]
    fa50:	430b      	orrs	r3, r1
    fa52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
    fa54:	687b      	ldr	r3, [r7, #4]
    fa56:	681b      	ldr	r3, [r3, #0]
    fa58:	685b      	ldr	r3, [r3, #4]
    fa5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
    fa5e:	687b      	ldr	r3, [r7, #4]
    fa60:	68da      	ldr	r2, [r3, #12]
    fa62:	687b      	ldr	r3, [r7, #4]
    fa64:	681b      	ldr	r3, [r3, #0]
    fa66:	430a      	orrs	r2, r1
    fa68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
    fa6a:	687b      	ldr	r3, [r7, #4]
    fa6c:	699b      	ldr	r3, [r3, #24]
    fa6e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
    fa70:	687b      	ldr	r3, [r7, #4]
    fa72:	6a1b      	ldr	r3, [r3, #32]
    fa74:	693a      	ldr	r2, [r7, #16]
    fa76:	4313      	orrs	r3, r2
    fa78:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
    fa7a:	687b      	ldr	r3, [r7, #4]
    fa7c:	681b      	ldr	r3, [r3, #0]
    fa7e:	689b      	ldr	r3, [r3, #8]
    fa80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
    fa84:	687b      	ldr	r3, [r7, #4]
    fa86:	681b      	ldr	r3, [r3, #0]
    fa88:	693a      	ldr	r2, [r7, #16]
    fa8a:	430a      	orrs	r2, r1
    fa8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
    fa8e:	687b      	ldr	r3, [r7, #4]
    fa90:	681b      	ldr	r3, [r3, #0]
    fa92:	4a9f      	ldr	r2, [pc, #636]	; (fd10 <UART_SetConfig+0x2f8>)
    fa94:	4293      	cmp	r3, r2
    fa96:	d121      	bne.n	fadc <UART_SetConfig+0xc4>
    fa98:	4b9e      	ldr	r3, [pc, #632]	; (fd14 <UART_SetConfig+0x2fc>)
    fa9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    fa9e:	f003 0303 	and.w	r3, r3, #3
    faa2:	2b03      	cmp	r3, #3
    faa4:	d816      	bhi.n	fad4 <UART_SetConfig+0xbc>
    faa6:	a201      	add	r2, pc, #4	; (adr r2, faac <UART_SetConfig+0x94>)
    faa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    faac:	0000fabd 	.word	0x0000fabd
    fab0:	0000fac9 	.word	0x0000fac9
    fab4:	0000fac3 	.word	0x0000fac3
    fab8:	0000facf 	.word	0x0000facf
    fabc:	2301      	movs	r3, #1
    fabe:	77fb      	strb	r3, [r7, #31]
    fac0:	e151      	b.n	fd66 <UART_SetConfig+0x34e>
    fac2:	2302      	movs	r3, #2
    fac4:	77fb      	strb	r3, [r7, #31]
    fac6:	e14e      	b.n	fd66 <UART_SetConfig+0x34e>
    fac8:	2304      	movs	r3, #4
    faca:	77fb      	strb	r3, [r7, #31]
    facc:	e14b      	b.n	fd66 <UART_SetConfig+0x34e>
    face:	2308      	movs	r3, #8
    fad0:	77fb      	strb	r3, [r7, #31]
    fad2:	e148      	b.n	fd66 <UART_SetConfig+0x34e>
    fad4:	2310      	movs	r3, #16
    fad6:	77fb      	strb	r3, [r7, #31]
    fad8:	bf00      	nop
    fada:	e144      	b.n	fd66 <UART_SetConfig+0x34e>
    fadc:	687b      	ldr	r3, [r7, #4]
    fade:	681b      	ldr	r3, [r3, #0]
    fae0:	4a8d      	ldr	r2, [pc, #564]	; (fd18 <UART_SetConfig+0x300>)
    fae2:	4293      	cmp	r3, r2
    fae4:	d134      	bne.n	fb50 <UART_SetConfig+0x138>
    fae6:	4b8b      	ldr	r3, [pc, #556]	; (fd14 <UART_SetConfig+0x2fc>)
    fae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    faec:	f003 030c 	and.w	r3, r3, #12
    faf0:	2b0c      	cmp	r3, #12
    faf2:	d829      	bhi.n	fb48 <UART_SetConfig+0x130>
    faf4:	a201      	add	r2, pc, #4	; (adr r2, fafc <UART_SetConfig+0xe4>)
    faf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fafa:	bf00      	nop
    fafc:	0000fb31 	.word	0x0000fb31
    fb00:	0000fb49 	.word	0x0000fb49
    fb04:	0000fb49 	.word	0x0000fb49
    fb08:	0000fb49 	.word	0x0000fb49
    fb0c:	0000fb3d 	.word	0x0000fb3d
    fb10:	0000fb49 	.word	0x0000fb49
    fb14:	0000fb49 	.word	0x0000fb49
    fb18:	0000fb49 	.word	0x0000fb49
    fb1c:	0000fb37 	.word	0x0000fb37
    fb20:	0000fb49 	.word	0x0000fb49
    fb24:	0000fb49 	.word	0x0000fb49
    fb28:	0000fb49 	.word	0x0000fb49
    fb2c:	0000fb43 	.word	0x0000fb43
    fb30:	2300      	movs	r3, #0
    fb32:	77fb      	strb	r3, [r7, #31]
    fb34:	e117      	b.n	fd66 <UART_SetConfig+0x34e>
    fb36:	2302      	movs	r3, #2
    fb38:	77fb      	strb	r3, [r7, #31]
    fb3a:	e114      	b.n	fd66 <UART_SetConfig+0x34e>
    fb3c:	2304      	movs	r3, #4
    fb3e:	77fb      	strb	r3, [r7, #31]
    fb40:	e111      	b.n	fd66 <UART_SetConfig+0x34e>
    fb42:	2308      	movs	r3, #8
    fb44:	77fb      	strb	r3, [r7, #31]
    fb46:	e10e      	b.n	fd66 <UART_SetConfig+0x34e>
    fb48:	2310      	movs	r3, #16
    fb4a:	77fb      	strb	r3, [r7, #31]
    fb4c:	bf00      	nop
    fb4e:	e10a      	b.n	fd66 <UART_SetConfig+0x34e>
    fb50:	687b      	ldr	r3, [r7, #4]
    fb52:	681b      	ldr	r3, [r3, #0]
    fb54:	4a71      	ldr	r2, [pc, #452]	; (fd1c <UART_SetConfig+0x304>)
    fb56:	4293      	cmp	r3, r2
    fb58:	d120      	bne.n	fb9c <UART_SetConfig+0x184>
    fb5a:	4b6e      	ldr	r3, [pc, #440]	; (fd14 <UART_SetConfig+0x2fc>)
    fb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    fb60:	f003 0330 	and.w	r3, r3, #48	; 0x30
    fb64:	2b10      	cmp	r3, #16
    fb66:	d00f      	beq.n	fb88 <UART_SetConfig+0x170>
    fb68:	2b10      	cmp	r3, #16
    fb6a:	d802      	bhi.n	fb72 <UART_SetConfig+0x15a>
    fb6c:	2b00      	cmp	r3, #0
    fb6e:	d005      	beq.n	fb7c <UART_SetConfig+0x164>
    fb70:	e010      	b.n	fb94 <UART_SetConfig+0x17c>
    fb72:	2b20      	cmp	r3, #32
    fb74:	d005      	beq.n	fb82 <UART_SetConfig+0x16a>
    fb76:	2b30      	cmp	r3, #48	; 0x30
    fb78:	d009      	beq.n	fb8e <UART_SetConfig+0x176>
    fb7a:	e00b      	b.n	fb94 <UART_SetConfig+0x17c>
    fb7c:	2300      	movs	r3, #0
    fb7e:	77fb      	strb	r3, [r7, #31]
    fb80:	e0f1      	b.n	fd66 <UART_SetConfig+0x34e>
    fb82:	2302      	movs	r3, #2
    fb84:	77fb      	strb	r3, [r7, #31]
    fb86:	e0ee      	b.n	fd66 <UART_SetConfig+0x34e>
    fb88:	2304      	movs	r3, #4
    fb8a:	77fb      	strb	r3, [r7, #31]
    fb8c:	e0eb      	b.n	fd66 <UART_SetConfig+0x34e>
    fb8e:	2308      	movs	r3, #8
    fb90:	77fb      	strb	r3, [r7, #31]
    fb92:	e0e8      	b.n	fd66 <UART_SetConfig+0x34e>
    fb94:	2310      	movs	r3, #16
    fb96:	77fb      	strb	r3, [r7, #31]
    fb98:	bf00      	nop
    fb9a:	e0e4      	b.n	fd66 <UART_SetConfig+0x34e>
    fb9c:	687b      	ldr	r3, [r7, #4]
    fb9e:	681b      	ldr	r3, [r3, #0]
    fba0:	4a5f      	ldr	r2, [pc, #380]	; (fd20 <UART_SetConfig+0x308>)
    fba2:	4293      	cmp	r3, r2
    fba4:	d120      	bne.n	fbe8 <UART_SetConfig+0x1d0>
    fba6:	4b5b      	ldr	r3, [pc, #364]	; (fd14 <UART_SetConfig+0x2fc>)
    fba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    fbac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fbb0:	2b40      	cmp	r3, #64	; 0x40
    fbb2:	d00f      	beq.n	fbd4 <UART_SetConfig+0x1bc>
    fbb4:	2b40      	cmp	r3, #64	; 0x40
    fbb6:	d802      	bhi.n	fbbe <UART_SetConfig+0x1a6>
    fbb8:	2b00      	cmp	r3, #0
    fbba:	d005      	beq.n	fbc8 <UART_SetConfig+0x1b0>
    fbbc:	e010      	b.n	fbe0 <UART_SetConfig+0x1c8>
    fbbe:	2b80      	cmp	r3, #128	; 0x80
    fbc0:	d005      	beq.n	fbce <UART_SetConfig+0x1b6>
    fbc2:	2bc0      	cmp	r3, #192	; 0xc0
    fbc4:	d009      	beq.n	fbda <UART_SetConfig+0x1c2>
    fbc6:	e00b      	b.n	fbe0 <UART_SetConfig+0x1c8>
    fbc8:	2300      	movs	r3, #0
    fbca:	77fb      	strb	r3, [r7, #31]
    fbcc:	e0cb      	b.n	fd66 <UART_SetConfig+0x34e>
    fbce:	2302      	movs	r3, #2
    fbd0:	77fb      	strb	r3, [r7, #31]
    fbd2:	e0c8      	b.n	fd66 <UART_SetConfig+0x34e>
    fbd4:	2304      	movs	r3, #4
    fbd6:	77fb      	strb	r3, [r7, #31]
    fbd8:	e0c5      	b.n	fd66 <UART_SetConfig+0x34e>
    fbda:	2308      	movs	r3, #8
    fbdc:	77fb      	strb	r3, [r7, #31]
    fbde:	e0c2      	b.n	fd66 <UART_SetConfig+0x34e>
    fbe0:	2310      	movs	r3, #16
    fbe2:	77fb      	strb	r3, [r7, #31]
    fbe4:	bf00      	nop
    fbe6:	e0be      	b.n	fd66 <UART_SetConfig+0x34e>
    fbe8:	687b      	ldr	r3, [r7, #4]
    fbea:	681b      	ldr	r3, [r3, #0]
    fbec:	4a4d      	ldr	r2, [pc, #308]	; (fd24 <UART_SetConfig+0x30c>)
    fbee:	4293      	cmp	r3, r2
    fbf0:	d124      	bne.n	fc3c <UART_SetConfig+0x224>
    fbf2:	4b48      	ldr	r3, [pc, #288]	; (fd14 <UART_SetConfig+0x2fc>)
    fbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    fbf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    fbfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fc00:	d012      	beq.n	fc28 <UART_SetConfig+0x210>
    fc02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fc06:	d802      	bhi.n	fc0e <UART_SetConfig+0x1f6>
    fc08:	2b00      	cmp	r3, #0
    fc0a:	d007      	beq.n	fc1c <UART_SetConfig+0x204>
    fc0c:	e012      	b.n	fc34 <UART_SetConfig+0x21c>
    fc0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fc12:	d006      	beq.n	fc22 <UART_SetConfig+0x20a>
    fc14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    fc18:	d009      	beq.n	fc2e <UART_SetConfig+0x216>
    fc1a:	e00b      	b.n	fc34 <UART_SetConfig+0x21c>
    fc1c:	2300      	movs	r3, #0
    fc1e:	77fb      	strb	r3, [r7, #31]
    fc20:	e0a1      	b.n	fd66 <UART_SetConfig+0x34e>
    fc22:	2302      	movs	r3, #2
    fc24:	77fb      	strb	r3, [r7, #31]
    fc26:	e09e      	b.n	fd66 <UART_SetConfig+0x34e>
    fc28:	2304      	movs	r3, #4
    fc2a:	77fb      	strb	r3, [r7, #31]
    fc2c:	e09b      	b.n	fd66 <UART_SetConfig+0x34e>
    fc2e:	2308      	movs	r3, #8
    fc30:	77fb      	strb	r3, [r7, #31]
    fc32:	e098      	b.n	fd66 <UART_SetConfig+0x34e>
    fc34:	2310      	movs	r3, #16
    fc36:	77fb      	strb	r3, [r7, #31]
    fc38:	bf00      	nop
    fc3a:	e094      	b.n	fd66 <UART_SetConfig+0x34e>
    fc3c:	687b      	ldr	r3, [r7, #4]
    fc3e:	681b      	ldr	r3, [r3, #0]
    fc40:	4a39      	ldr	r2, [pc, #228]	; (fd28 <UART_SetConfig+0x310>)
    fc42:	4293      	cmp	r3, r2
    fc44:	d124      	bne.n	fc90 <UART_SetConfig+0x278>
    fc46:	4b33      	ldr	r3, [pc, #204]	; (fd14 <UART_SetConfig+0x2fc>)
    fc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    fc4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
    fc50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fc54:	d012      	beq.n	fc7c <UART_SetConfig+0x264>
    fc56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fc5a:	d802      	bhi.n	fc62 <UART_SetConfig+0x24a>
    fc5c:	2b00      	cmp	r3, #0
    fc5e:	d007      	beq.n	fc70 <UART_SetConfig+0x258>
    fc60:	e012      	b.n	fc88 <UART_SetConfig+0x270>
    fc62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    fc66:	d006      	beq.n	fc76 <UART_SetConfig+0x25e>
    fc68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    fc6c:	d009      	beq.n	fc82 <UART_SetConfig+0x26a>
    fc6e:	e00b      	b.n	fc88 <UART_SetConfig+0x270>
    fc70:	2301      	movs	r3, #1
    fc72:	77fb      	strb	r3, [r7, #31]
    fc74:	e077      	b.n	fd66 <UART_SetConfig+0x34e>
    fc76:	2302      	movs	r3, #2
    fc78:	77fb      	strb	r3, [r7, #31]
    fc7a:	e074      	b.n	fd66 <UART_SetConfig+0x34e>
    fc7c:	2304      	movs	r3, #4
    fc7e:	77fb      	strb	r3, [r7, #31]
    fc80:	e071      	b.n	fd66 <UART_SetConfig+0x34e>
    fc82:	2308      	movs	r3, #8
    fc84:	77fb      	strb	r3, [r7, #31]
    fc86:	e06e      	b.n	fd66 <UART_SetConfig+0x34e>
    fc88:	2310      	movs	r3, #16
    fc8a:	77fb      	strb	r3, [r7, #31]
    fc8c:	bf00      	nop
    fc8e:	e06a      	b.n	fd66 <UART_SetConfig+0x34e>
    fc90:	687b      	ldr	r3, [r7, #4]
    fc92:	681b      	ldr	r3, [r3, #0]
    fc94:	4a25      	ldr	r2, [pc, #148]	; (fd2c <UART_SetConfig+0x314>)
    fc96:	4293      	cmp	r3, r2
    fc98:	d124      	bne.n	fce4 <UART_SetConfig+0x2cc>
    fc9a:	4b1e      	ldr	r3, [pc, #120]	; (fd14 <UART_SetConfig+0x2fc>)
    fc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    fca0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    fca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    fca8:	d012      	beq.n	fcd0 <UART_SetConfig+0x2b8>
    fcaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    fcae:	d802      	bhi.n	fcb6 <UART_SetConfig+0x29e>
    fcb0:	2b00      	cmp	r3, #0
    fcb2:	d007      	beq.n	fcc4 <UART_SetConfig+0x2ac>
    fcb4:	e012      	b.n	fcdc <UART_SetConfig+0x2c4>
    fcb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    fcba:	d006      	beq.n	fcca <UART_SetConfig+0x2b2>
    fcbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    fcc0:	d009      	beq.n	fcd6 <UART_SetConfig+0x2be>
    fcc2:	e00b      	b.n	fcdc <UART_SetConfig+0x2c4>
    fcc4:	2300      	movs	r3, #0
    fcc6:	77fb      	strb	r3, [r7, #31]
    fcc8:	e04d      	b.n	fd66 <UART_SetConfig+0x34e>
    fcca:	2302      	movs	r3, #2
    fccc:	77fb      	strb	r3, [r7, #31]
    fcce:	e04a      	b.n	fd66 <UART_SetConfig+0x34e>
    fcd0:	2304      	movs	r3, #4
    fcd2:	77fb      	strb	r3, [r7, #31]
    fcd4:	e047      	b.n	fd66 <UART_SetConfig+0x34e>
    fcd6:	2308      	movs	r3, #8
    fcd8:	77fb      	strb	r3, [r7, #31]
    fcda:	e044      	b.n	fd66 <UART_SetConfig+0x34e>
    fcdc:	2310      	movs	r3, #16
    fcde:	77fb      	strb	r3, [r7, #31]
    fce0:	bf00      	nop
    fce2:	e040      	b.n	fd66 <UART_SetConfig+0x34e>
    fce4:	687b      	ldr	r3, [r7, #4]
    fce6:	681b      	ldr	r3, [r3, #0]
    fce8:	4a11      	ldr	r2, [pc, #68]	; (fd30 <UART_SetConfig+0x318>)
    fcea:	4293      	cmp	r3, r2
    fcec:	d139      	bne.n	fd62 <UART_SetConfig+0x34a>
    fcee:	4b09      	ldr	r3, [pc, #36]	; (fd14 <UART_SetConfig+0x2fc>)
    fcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    fcf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    fcf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    fcfc:	d027      	beq.n	fd4e <UART_SetConfig+0x336>
    fcfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    fd02:	d817      	bhi.n	fd34 <UART_SetConfig+0x31c>
    fd04:	2b00      	cmp	r3, #0
    fd06:	d01c      	beq.n	fd42 <UART_SetConfig+0x32a>
    fd08:	e027      	b.n	fd5a <UART_SetConfig+0x342>
    fd0a:	bf00      	nop
    fd0c:	efff69f3 	.word	0xefff69f3
    fd10:	40011000 	.word	0x40011000
    fd14:	40023800 	.word	0x40023800
    fd18:	40004400 	.word	0x40004400
    fd1c:	40004800 	.word	0x40004800
    fd20:	40004c00 	.word	0x40004c00
    fd24:	40005000 	.word	0x40005000
    fd28:	40011400 	.word	0x40011400
    fd2c:	40007800 	.word	0x40007800
    fd30:	40007c00 	.word	0x40007c00
    fd34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd38:	d006      	beq.n	fd48 <UART_SetConfig+0x330>
    fd3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
    fd3e:	d009      	beq.n	fd54 <UART_SetConfig+0x33c>
    fd40:	e00b      	b.n	fd5a <UART_SetConfig+0x342>
    fd42:	2300      	movs	r3, #0
    fd44:	77fb      	strb	r3, [r7, #31]
    fd46:	e00e      	b.n	fd66 <UART_SetConfig+0x34e>
    fd48:	2302      	movs	r3, #2
    fd4a:	77fb      	strb	r3, [r7, #31]
    fd4c:	e00b      	b.n	fd66 <UART_SetConfig+0x34e>
    fd4e:	2304      	movs	r3, #4
    fd50:	77fb      	strb	r3, [r7, #31]
    fd52:	e008      	b.n	fd66 <UART_SetConfig+0x34e>
    fd54:	2308      	movs	r3, #8
    fd56:	77fb      	strb	r3, [r7, #31]
    fd58:	e005      	b.n	fd66 <UART_SetConfig+0x34e>
    fd5a:	2310      	movs	r3, #16
    fd5c:	77fb      	strb	r3, [r7, #31]
    fd5e:	bf00      	nop
    fd60:	e001      	b.n	fd66 <UART_SetConfig+0x34e>
    fd62:	2310      	movs	r3, #16
    fd64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
    fd66:	687b      	ldr	r3, [r7, #4]
    fd68:	69db      	ldr	r3, [r3, #28]
    fd6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd6e:	d17f      	bne.n	fe70 <UART_SetConfig+0x458>
  {
    switch (clocksource)
    fd70:	7ffb      	ldrb	r3, [r7, #31]
    fd72:	2b08      	cmp	r3, #8
    fd74:	d85c      	bhi.n	fe30 <UART_SetConfig+0x418>
    fd76:	a201      	add	r2, pc, #4	; (adr r2, fd7c <UART_SetConfig+0x364>)
    fd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fd7c:	0000fda1 	.word	0x0000fda1
    fd80:	0000fdc1 	.word	0x0000fdc1
    fd84:	0000fde1 	.word	0x0000fde1
    fd88:	0000fe31 	.word	0x0000fe31
    fd8c:	0000fdf9 	.word	0x0000fdf9
    fd90:	0000fe31 	.word	0x0000fe31
    fd94:	0000fe31 	.word	0x0000fe31
    fd98:	0000fe31 	.word	0x0000fe31
    fd9c:	0000fe19 	.word	0x0000fe19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
    fda0:	f7fd fa08 	bl	d1b4 <HAL_RCC_GetPCLK1Freq>
    fda4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
    fda6:	68fb      	ldr	r3, [r7, #12]
    fda8:	005a      	lsls	r2, r3, #1
    fdaa:	687b      	ldr	r3, [r7, #4]
    fdac:	685b      	ldr	r3, [r3, #4]
    fdae:	085b      	lsrs	r3, r3, #1
    fdb0:	441a      	add	r2, r3
    fdb2:	687b      	ldr	r3, [r7, #4]
    fdb4:	685b      	ldr	r3, [r3, #4]
    fdb6:	fbb2 f3f3 	udiv	r3, r2, r3
    fdba:	b29b      	uxth	r3, r3
    fdbc:	61bb      	str	r3, [r7, #24]
        break;
    fdbe:	e03a      	b.n	fe36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
    fdc0:	f7fd fa0c 	bl	d1dc <HAL_RCC_GetPCLK2Freq>
    fdc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
    fdc6:	68fb      	ldr	r3, [r7, #12]
    fdc8:	005a      	lsls	r2, r3, #1
    fdca:	687b      	ldr	r3, [r7, #4]
    fdcc:	685b      	ldr	r3, [r3, #4]
    fdce:	085b      	lsrs	r3, r3, #1
    fdd0:	441a      	add	r2, r3
    fdd2:	687b      	ldr	r3, [r7, #4]
    fdd4:	685b      	ldr	r3, [r3, #4]
    fdd6:	fbb2 f3f3 	udiv	r3, r2, r3
    fdda:	b29b      	uxth	r3, r3
    fddc:	61bb      	str	r3, [r7, #24]
        break;
    fdde:	e02a      	b.n	fe36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
    fde0:	687b      	ldr	r3, [r7, #4]
    fde2:	685b      	ldr	r3, [r3, #4]
    fde4:	085a      	lsrs	r2, r3, #1
    fde6:	4b5f      	ldr	r3, [pc, #380]	; (ff64 <UART_SetConfig+0x54c>)
    fde8:	4413      	add	r3, r2
    fdea:	687a      	ldr	r2, [r7, #4]
    fdec:	6852      	ldr	r2, [r2, #4]
    fdee:	fbb3 f3f2 	udiv	r3, r3, r2
    fdf2:	b29b      	uxth	r3, r3
    fdf4:	61bb      	str	r3, [r7, #24]
        break;
    fdf6:	e01e      	b.n	fe36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
    fdf8:	f7fd f91e 	bl	d038 <HAL_RCC_GetSysClockFreq>
    fdfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
    fdfe:	68fb      	ldr	r3, [r7, #12]
    fe00:	005a      	lsls	r2, r3, #1
    fe02:	687b      	ldr	r3, [r7, #4]
    fe04:	685b      	ldr	r3, [r3, #4]
    fe06:	085b      	lsrs	r3, r3, #1
    fe08:	441a      	add	r2, r3
    fe0a:	687b      	ldr	r3, [r7, #4]
    fe0c:	685b      	ldr	r3, [r3, #4]
    fe0e:	fbb2 f3f3 	udiv	r3, r2, r3
    fe12:	b29b      	uxth	r3, r3
    fe14:	61bb      	str	r3, [r7, #24]
        break;
    fe16:	e00e      	b.n	fe36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
    fe18:	687b      	ldr	r3, [r7, #4]
    fe1a:	685b      	ldr	r3, [r3, #4]
    fe1c:	085b      	lsrs	r3, r3, #1
    fe1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
    fe22:	687b      	ldr	r3, [r7, #4]
    fe24:	685b      	ldr	r3, [r3, #4]
    fe26:	fbb2 f3f3 	udiv	r3, r2, r3
    fe2a:	b29b      	uxth	r3, r3
    fe2c:	61bb      	str	r3, [r7, #24]
        break;
    fe2e:	e002      	b.n	fe36 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
    fe30:	2301      	movs	r3, #1
    fe32:	75fb      	strb	r3, [r7, #23]
        break;
    fe34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
    fe36:	69bb      	ldr	r3, [r7, #24]
    fe38:	2b0f      	cmp	r3, #15
    fe3a:	d916      	bls.n	fe6a <UART_SetConfig+0x452>
    fe3c:	69bb      	ldr	r3, [r7, #24]
    fe3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    fe42:	d212      	bcs.n	fe6a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
    fe44:	69bb      	ldr	r3, [r7, #24]
    fe46:	b29b      	uxth	r3, r3
    fe48:	f023 030f 	bic.w	r3, r3, #15
    fe4c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    fe4e:	69bb      	ldr	r3, [r7, #24]
    fe50:	085b      	lsrs	r3, r3, #1
    fe52:	b29b      	uxth	r3, r3
    fe54:	f003 0307 	and.w	r3, r3, #7
    fe58:	b29a      	uxth	r2, r3
    fe5a:	897b      	ldrh	r3, [r7, #10]
    fe5c:	4313      	orrs	r3, r2
    fe5e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
    fe60:	687b      	ldr	r3, [r7, #4]
    fe62:	681b      	ldr	r3, [r3, #0]
    fe64:	897a      	ldrh	r2, [r7, #10]
    fe66:	60da      	str	r2, [r3, #12]
    fe68:	e070      	b.n	ff4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
    fe6a:	2301      	movs	r3, #1
    fe6c:	75fb      	strb	r3, [r7, #23]
    fe6e:	e06d      	b.n	ff4c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
    fe70:	7ffb      	ldrb	r3, [r7, #31]
    fe72:	2b08      	cmp	r3, #8
    fe74:	d859      	bhi.n	ff2a <UART_SetConfig+0x512>
    fe76:	a201      	add	r2, pc, #4	; (adr r2, fe7c <UART_SetConfig+0x464>)
    fe78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fe7c:	0000fea1 	.word	0x0000fea1
    fe80:	0000febf 	.word	0x0000febf
    fe84:	0000fedd 	.word	0x0000fedd
    fe88:	0000ff2b 	.word	0x0000ff2b
    fe8c:	0000fef5 	.word	0x0000fef5
    fe90:	0000ff2b 	.word	0x0000ff2b
    fe94:	0000ff2b 	.word	0x0000ff2b
    fe98:	0000ff2b 	.word	0x0000ff2b
    fe9c:	0000ff13 	.word	0x0000ff13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
    fea0:	f7fd f988 	bl	d1b4 <HAL_RCC_GetPCLK1Freq>
    fea4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
    fea6:	687b      	ldr	r3, [r7, #4]
    fea8:	685b      	ldr	r3, [r3, #4]
    feaa:	085a      	lsrs	r2, r3, #1
    feac:	68fb      	ldr	r3, [r7, #12]
    feae:	441a      	add	r2, r3
    feb0:	687b      	ldr	r3, [r7, #4]
    feb2:	685b      	ldr	r3, [r3, #4]
    feb4:	fbb2 f3f3 	udiv	r3, r2, r3
    feb8:	b29b      	uxth	r3, r3
    feba:	61bb      	str	r3, [r7, #24]
        break;
    febc:	e038      	b.n	ff30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
    febe:	f7fd f98d 	bl	d1dc <HAL_RCC_GetPCLK2Freq>
    fec2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
    fec4:	687b      	ldr	r3, [r7, #4]
    fec6:	685b      	ldr	r3, [r3, #4]
    fec8:	085a      	lsrs	r2, r3, #1
    feca:	68fb      	ldr	r3, [r7, #12]
    fecc:	441a      	add	r2, r3
    fece:	687b      	ldr	r3, [r7, #4]
    fed0:	685b      	ldr	r3, [r3, #4]
    fed2:	fbb2 f3f3 	udiv	r3, r2, r3
    fed6:	b29b      	uxth	r3, r3
    fed8:	61bb      	str	r3, [r7, #24]
        break;
    feda:	e029      	b.n	ff30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
    fedc:	687b      	ldr	r3, [r7, #4]
    fede:	685b      	ldr	r3, [r3, #4]
    fee0:	085a      	lsrs	r2, r3, #1
    fee2:	4b21      	ldr	r3, [pc, #132]	; (ff68 <UART_SetConfig+0x550>)
    fee4:	4413      	add	r3, r2
    fee6:	687a      	ldr	r2, [r7, #4]
    fee8:	6852      	ldr	r2, [r2, #4]
    feea:	fbb3 f3f2 	udiv	r3, r3, r2
    feee:	b29b      	uxth	r3, r3
    fef0:	61bb      	str	r3, [r7, #24]
        break;
    fef2:	e01d      	b.n	ff30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
    fef4:	f7fd f8a0 	bl	d038 <HAL_RCC_GetSysClockFreq>
    fef8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
    fefa:	687b      	ldr	r3, [r7, #4]
    fefc:	685b      	ldr	r3, [r3, #4]
    fefe:	085a      	lsrs	r2, r3, #1
    ff00:	68fb      	ldr	r3, [r7, #12]
    ff02:	441a      	add	r2, r3
    ff04:	687b      	ldr	r3, [r7, #4]
    ff06:	685b      	ldr	r3, [r3, #4]
    ff08:	fbb2 f3f3 	udiv	r3, r2, r3
    ff0c:	b29b      	uxth	r3, r3
    ff0e:	61bb      	str	r3, [r7, #24]
        break;
    ff10:	e00e      	b.n	ff30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
    ff12:	687b      	ldr	r3, [r7, #4]
    ff14:	685b      	ldr	r3, [r3, #4]
    ff16:	085b      	lsrs	r3, r3, #1
    ff18:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    ff1c:	687b      	ldr	r3, [r7, #4]
    ff1e:	685b      	ldr	r3, [r3, #4]
    ff20:	fbb2 f3f3 	udiv	r3, r2, r3
    ff24:	b29b      	uxth	r3, r3
    ff26:	61bb      	str	r3, [r7, #24]
        break;
    ff28:	e002      	b.n	ff30 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
    ff2a:	2301      	movs	r3, #1
    ff2c:	75fb      	strb	r3, [r7, #23]
        break;
    ff2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
    ff30:	69bb      	ldr	r3, [r7, #24]
    ff32:	2b0f      	cmp	r3, #15
    ff34:	d908      	bls.n	ff48 <UART_SetConfig+0x530>
    ff36:	69bb      	ldr	r3, [r7, #24]
    ff38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ff3c:	d204      	bcs.n	ff48 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
    ff3e:	687b      	ldr	r3, [r7, #4]
    ff40:	681b      	ldr	r3, [r3, #0]
    ff42:	69ba      	ldr	r2, [r7, #24]
    ff44:	60da      	str	r2, [r3, #12]
    ff46:	e001      	b.n	ff4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
    ff48:	2301      	movs	r3, #1
    ff4a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
    ff4c:	687b      	ldr	r3, [r7, #4]
    ff4e:	2200      	movs	r2, #0
    ff50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
    ff52:	687b      	ldr	r3, [r7, #4]
    ff54:	2200      	movs	r2, #0
    ff56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
    ff58:	7dfb      	ldrb	r3, [r7, #23]
}
    ff5a:	4618      	mov	r0, r3
    ff5c:	3720      	adds	r7, #32
    ff5e:	46bd      	mov	sp, r7
    ff60:	bd80      	pop	{r7, pc}
    ff62:	bf00      	nop
    ff64:	01e84800 	.word	0x01e84800
    ff68:	00f42400 	.word	0x00f42400

0000ff6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
    ff6c:	b480      	push	{r7}
    ff6e:	b083      	sub	sp, #12
    ff70:	af00      	add	r7, sp, #0
    ff72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
    ff74:	687b      	ldr	r3, [r7, #4]
    ff76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ff78:	f003 0301 	and.w	r3, r3, #1
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	d00a      	beq.n	ff96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
    ff80:	687b      	ldr	r3, [r7, #4]
    ff82:	681b      	ldr	r3, [r3, #0]
    ff84:	685b      	ldr	r3, [r3, #4]
    ff86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
    ff8a:	687b      	ldr	r3, [r7, #4]
    ff8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ff8e:	687b      	ldr	r3, [r7, #4]
    ff90:	681b      	ldr	r3, [r3, #0]
    ff92:	430a      	orrs	r2, r1
    ff94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
    ff96:	687b      	ldr	r3, [r7, #4]
    ff98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ff9a:	f003 0302 	and.w	r3, r3, #2
    ff9e:	2b00      	cmp	r3, #0
    ffa0:	d00a      	beq.n	ffb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
    ffa2:	687b      	ldr	r3, [r7, #4]
    ffa4:	681b      	ldr	r3, [r3, #0]
    ffa6:	685b      	ldr	r3, [r3, #4]
    ffa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
    ffac:	687b      	ldr	r3, [r7, #4]
    ffae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ffb0:	687b      	ldr	r3, [r7, #4]
    ffb2:	681b      	ldr	r3, [r3, #0]
    ffb4:	430a      	orrs	r2, r1
    ffb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
    ffb8:	687b      	ldr	r3, [r7, #4]
    ffba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ffbc:	f003 0304 	and.w	r3, r3, #4
    ffc0:	2b00      	cmp	r3, #0
    ffc2:	d00a      	beq.n	ffda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
    ffc4:	687b      	ldr	r3, [r7, #4]
    ffc6:	681b      	ldr	r3, [r3, #0]
    ffc8:	685b      	ldr	r3, [r3, #4]
    ffca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
    ffce:	687b      	ldr	r3, [r7, #4]
    ffd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ffd2:	687b      	ldr	r3, [r7, #4]
    ffd4:	681b      	ldr	r3, [r3, #0]
    ffd6:	430a      	orrs	r2, r1
    ffd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
    ffda:	687b      	ldr	r3, [r7, #4]
    ffdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ffde:	f003 0308 	and.w	r3, r3, #8
    ffe2:	2b00      	cmp	r3, #0
    ffe4:	d00a      	beq.n	fffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
    ffe6:	687b      	ldr	r3, [r7, #4]
    ffe8:	681b      	ldr	r3, [r3, #0]
    ffea:	685b      	ldr	r3, [r3, #4]
    ffec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
    fff0:	687b      	ldr	r3, [r7, #4]
    fff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    fff4:	687b      	ldr	r3, [r7, #4]
    fff6:	681b      	ldr	r3, [r3, #0]
    fff8:	430a      	orrs	r2, r1
    fffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
    fffc:	687b      	ldr	r3, [r7, #4]
    fffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10000:	f003 0310 	and.w	r3, r3, #16
   10004:	2b00      	cmp	r3, #0
   10006:	d00a      	beq.n	1001e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
   10008:	687b      	ldr	r3, [r7, #4]
   1000a:	681b      	ldr	r3, [r3, #0]
   1000c:	689b      	ldr	r3, [r3, #8]
   1000e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   10012:	687b      	ldr	r3, [r7, #4]
   10014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10016:	687b      	ldr	r3, [r7, #4]
   10018:	681b      	ldr	r3, [r3, #0]
   1001a:	430a      	orrs	r2, r1
   1001c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
   1001e:	687b      	ldr	r3, [r7, #4]
   10020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10022:	f003 0320 	and.w	r3, r3, #32
   10026:	2b00      	cmp	r3, #0
   10028:	d00a      	beq.n	10040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
   1002a:	687b      	ldr	r3, [r7, #4]
   1002c:	681b      	ldr	r3, [r3, #0]
   1002e:	689b      	ldr	r3, [r3, #8]
   10030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
   10034:	687b      	ldr	r3, [r7, #4]
   10036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10038:	687b      	ldr	r3, [r7, #4]
   1003a:	681b      	ldr	r3, [r3, #0]
   1003c:	430a      	orrs	r2, r1
   1003e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
   10040:	687b      	ldr	r3, [r7, #4]
   10042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10044:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10048:	2b00      	cmp	r3, #0
   1004a:	d01a      	beq.n	10082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
   1004c:	687b      	ldr	r3, [r7, #4]
   1004e:	681b      	ldr	r3, [r3, #0]
   10050:	685b      	ldr	r3, [r3, #4]
   10052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
   10056:	687b      	ldr	r3, [r7, #4]
   10058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1005a:	687b      	ldr	r3, [r7, #4]
   1005c:	681b      	ldr	r3, [r3, #0]
   1005e:	430a      	orrs	r2, r1
   10060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
   10062:	687b      	ldr	r3, [r7, #4]
   10064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1006a:	d10a      	bne.n	10082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
   1006c:	687b      	ldr	r3, [r7, #4]
   1006e:	681b      	ldr	r3, [r3, #0]
   10070:	685b      	ldr	r3, [r3, #4]
   10072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
   10076:	687b      	ldr	r3, [r7, #4]
   10078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1007a:	687b      	ldr	r3, [r7, #4]
   1007c:	681b      	ldr	r3, [r3, #0]
   1007e:	430a      	orrs	r2, r1
   10080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
   10082:	687b      	ldr	r3, [r7, #4]
   10084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10086:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1008a:	2b00      	cmp	r3, #0
   1008c:	d00a      	beq.n	100a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
   1008e:	687b      	ldr	r3, [r7, #4]
   10090:	681b      	ldr	r3, [r3, #0]
   10092:	685b      	ldr	r3, [r3, #4]
   10094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
   10098:	687b      	ldr	r3, [r7, #4]
   1009a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1009c:	687b      	ldr	r3, [r7, #4]
   1009e:	681b      	ldr	r3, [r3, #0]
   100a0:	430a      	orrs	r2, r1
   100a2:	605a      	str	r2, [r3, #4]
  }
}
   100a4:	bf00      	nop
   100a6:	370c      	adds	r7, #12
   100a8:	46bd      	mov	sp, r7
   100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   100ae:	4770      	bx	lr

000100b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
   100b0:	b580      	push	{r7, lr}
   100b2:	b086      	sub	sp, #24
   100b4:	af02      	add	r7, sp, #8
   100b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
   100b8:	687b      	ldr	r3, [r7, #4]
   100ba:	2200      	movs	r2, #0
   100bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
   100be:	f7fa ffc3 	bl	b048 <HAL_GetTick>
   100c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
   100c4:	687b      	ldr	r3, [r7, #4]
   100c6:	681b      	ldr	r3, [r3, #0]
   100c8:	681b      	ldr	r3, [r3, #0]
   100ca:	f003 0308 	and.w	r3, r3, #8
   100ce:	2b08      	cmp	r3, #8
   100d0:	d10e      	bne.n	100f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
   100d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
   100d6:	9300      	str	r3, [sp, #0]
   100d8:	68fb      	ldr	r3, [r7, #12]
   100da:	2200      	movs	r2, #0
   100dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   100e0:	6878      	ldr	r0, [r7, #4]
   100e2:	f000 f82a 	bl	1013a <UART_WaitOnFlagUntilTimeout>
   100e6:	4603      	mov	r3, r0
   100e8:	2b00      	cmp	r3, #0
   100ea:	d001      	beq.n	100f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
   100ec:	2303      	movs	r3, #3
   100ee:	e020      	b.n	10132 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
   100f0:	687b      	ldr	r3, [r7, #4]
   100f2:	681b      	ldr	r3, [r3, #0]
   100f4:	681b      	ldr	r3, [r3, #0]
   100f6:	f003 0304 	and.w	r3, r3, #4
   100fa:	2b04      	cmp	r3, #4
   100fc:	d10e      	bne.n	1011c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
   100fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
   10102:	9300      	str	r3, [sp, #0]
   10104:	68fb      	ldr	r3, [r7, #12]
   10106:	2200      	movs	r2, #0
   10108:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1010c:	6878      	ldr	r0, [r7, #4]
   1010e:	f000 f814 	bl	1013a <UART_WaitOnFlagUntilTimeout>
   10112:	4603      	mov	r3, r0
   10114:	2b00      	cmp	r3, #0
   10116:	d001      	beq.n	1011c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
   10118:	2303      	movs	r3, #3
   1011a:	e00a      	b.n	10132 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
   1011c:	687b      	ldr	r3, [r7, #4]
   1011e:	2220      	movs	r2, #32
   10120:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
   10122:	687b      	ldr	r3, [r7, #4]
   10124:	2220      	movs	r2, #32
   10126:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
   10128:	687b      	ldr	r3, [r7, #4]
   1012a:	2200      	movs	r2, #0
   1012c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
   10130:	2300      	movs	r3, #0
}
   10132:	4618      	mov	r0, r3
   10134:	3710      	adds	r7, #16
   10136:	46bd      	mov	sp, r7
   10138:	bd80      	pop	{r7, pc}

0001013a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
   1013a:	b580      	push	{r7, lr}
   1013c:	b084      	sub	sp, #16
   1013e:	af00      	add	r7, sp, #0
   10140:	60f8      	str	r0, [r7, #12]
   10142:	60b9      	str	r1, [r7, #8]
   10144:	603b      	str	r3, [r7, #0]
   10146:	4613      	mov	r3, r2
   10148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
   1014a:	e05d      	b.n	10208 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
   1014c:	69bb      	ldr	r3, [r7, #24]
   1014e:	f1b3 3fff 	cmp.w	r3, #4294967295
   10152:	d059      	beq.n	10208 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
   10154:	f7fa ff78 	bl	b048 <HAL_GetTick>
   10158:	4602      	mov	r2, r0
   1015a:	683b      	ldr	r3, [r7, #0]
   1015c:	1ad3      	subs	r3, r2, r3
   1015e:	69ba      	ldr	r2, [r7, #24]
   10160:	429a      	cmp	r2, r3
   10162:	d302      	bcc.n	1016a <UART_WaitOnFlagUntilTimeout+0x30>
   10164:	69bb      	ldr	r3, [r7, #24]
   10166:	2b00      	cmp	r3, #0
   10168:	d11b      	bne.n	101a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
   1016a:	68fb      	ldr	r3, [r7, #12]
   1016c:	681b      	ldr	r3, [r3, #0]
   1016e:	681a      	ldr	r2, [r3, #0]
   10170:	68fb      	ldr	r3, [r7, #12]
   10172:	681b      	ldr	r3, [r3, #0]
   10174:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   10178:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
   1017a:	68fb      	ldr	r3, [r7, #12]
   1017c:	681b      	ldr	r3, [r3, #0]
   1017e:	689a      	ldr	r2, [r3, #8]
   10180:	68fb      	ldr	r3, [r7, #12]
   10182:	681b      	ldr	r3, [r3, #0]
   10184:	f022 0201 	bic.w	r2, r2, #1
   10188:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
   1018a:	68fb      	ldr	r3, [r7, #12]
   1018c:	2220      	movs	r2, #32
   1018e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
   10190:	68fb      	ldr	r3, [r7, #12]
   10192:	2220      	movs	r2, #32
   10194:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
   10196:	68fb      	ldr	r3, [r7, #12]
   10198:	2200      	movs	r2, #0
   1019a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
   1019e:	2303      	movs	r3, #3
   101a0:	e042      	b.n	10228 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
   101a2:	68fb      	ldr	r3, [r7, #12]
   101a4:	681b      	ldr	r3, [r3, #0]
   101a6:	681b      	ldr	r3, [r3, #0]
   101a8:	f003 0304 	and.w	r3, r3, #4
   101ac:	2b00      	cmp	r3, #0
   101ae:	d02b      	beq.n	10208 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
   101b0:	68fb      	ldr	r3, [r7, #12]
   101b2:	681b      	ldr	r3, [r3, #0]
   101b4:	69db      	ldr	r3, [r3, #28]
   101b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   101ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   101be:	d123      	bne.n	10208 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
   101c0:	68fb      	ldr	r3, [r7, #12]
   101c2:	681b      	ldr	r3, [r3, #0]
   101c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   101c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
   101ca:	68fb      	ldr	r3, [r7, #12]
   101cc:	681b      	ldr	r3, [r3, #0]
   101ce:	681a      	ldr	r2, [r3, #0]
   101d0:	68fb      	ldr	r3, [r7, #12]
   101d2:	681b      	ldr	r3, [r3, #0]
   101d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   101d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
   101da:	68fb      	ldr	r3, [r7, #12]
   101dc:	681b      	ldr	r3, [r3, #0]
   101de:	689a      	ldr	r2, [r3, #8]
   101e0:	68fb      	ldr	r3, [r7, #12]
   101e2:	681b      	ldr	r3, [r3, #0]
   101e4:	f022 0201 	bic.w	r2, r2, #1
   101e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
   101ea:	68fb      	ldr	r3, [r7, #12]
   101ec:	2220      	movs	r2, #32
   101ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
   101f0:	68fb      	ldr	r3, [r7, #12]
   101f2:	2220      	movs	r2, #32
   101f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
   101f6:	68fb      	ldr	r3, [r7, #12]
   101f8:	2220      	movs	r2, #32
   101fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
   101fc:	68fb      	ldr	r3, [r7, #12]
   101fe:	2200      	movs	r2, #0
   10200:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
   10204:	2303      	movs	r3, #3
   10206:	e00f      	b.n	10228 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
   10208:	68fb      	ldr	r3, [r7, #12]
   1020a:	681b      	ldr	r3, [r3, #0]
   1020c:	69da      	ldr	r2, [r3, #28]
   1020e:	68bb      	ldr	r3, [r7, #8]
   10210:	4013      	ands	r3, r2
   10212:	68ba      	ldr	r2, [r7, #8]
   10214:	429a      	cmp	r2, r3
   10216:	bf0c      	ite	eq
   10218:	2301      	moveq	r3, #1
   1021a:	2300      	movne	r3, #0
   1021c:	b2db      	uxtb	r3, r3
   1021e:	461a      	mov	r2, r3
   10220:	79fb      	ldrb	r3, [r7, #7]
   10222:	429a      	cmp	r2, r3
   10224:	d092      	beq.n	1014c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
   10226:	2300      	movs	r3, #0
}
   10228:	4618      	mov	r0, r3
   1022a:	3710      	adds	r7, #16
   1022c:	46bd      	mov	sp, r7
   1022e:	bd80      	pop	{r7, pc}

00010230 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
   10230:	b480      	push	{r7}
   10232:	b083      	sub	sp, #12
   10234:	af00      	add	r7, sp, #0
   10236:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
   10238:	687b      	ldr	r3, [r7, #4]
   1023a:	681b      	ldr	r3, [r3, #0]
   1023c:	681a      	ldr	r2, [r3, #0]
   1023e:	687b      	ldr	r3, [r7, #4]
   10240:	681b      	ldr	r3, [r3, #0]
   10242:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   10246:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
   10248:	687b      	ldr	r3, [r7, #4]
   1024a:	2220      	movs	r2, #32
   1024c:	675a      	str	r2, [r3, #116]	; 0x74
}
   1024e:	bf00      	nop
   10250:	370c      	adds	r7, #12
   10252:	46bd      	mov	sp, r7
   10254:	f85d 7b04 	ldr.w	r7, [sp], #4
   10258:	4770      	bx	lr

0001025a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
   1025a:	b480      	push	{r7}
   1025c:	b083      	sub	sp, #12
   1025e:	af00      	add	r7, sp, #0
   10260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
   10262:	687b      	ldr	r3, [r7, #4]
   10264:	681b      	ldr	r3, [r3, #0]
   10266:	681a      	ldr	r2, [r3, #0]
   10268:	687b      	ldr	r3, [r7, #4]
   1026a:	681b      	ldr	r3, [r3, #0]
   1026c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   10270:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
   10272:	687b      	ldr	r3, [r7, #4]
   10274:	681b      	ldr	r3, [r3, #0]
   10276:	689a      	ldr	r2, [r3, #8]
   10278:	687b      	ldr	r3, [r7, #4]
   1027a:	681b      	ldr	r3, [r3, #0]
   1027c:	f022 0201 	bic.w	r2, r2, #1
   10280:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
   10282:	687b      	ldr	r3, [r7, #4]
   10284:	2220      	movs	r2, #32
   10286:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
   10288:	687b      	ldr	r3, [r7, #4]
   1028a:	2200      	movs	r2, #0
   1028c:	661a      	str	r2, [r3, #96]	; 0x60
}
   1028e:	bf00      	nop
   10290:	370c      	adds	r7, #12
   10292:	46bd      	mov	sp, r7
   10294:	f85d 7b04 	ldr.w	r7, [sp], #4
   10298:	4770      	bx	lr

0001029a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
   1029a:	b580      	push	{r7, lr}
   1029c:	b084      	sub	sp, #16
   1029e:	af00      	add	r7, sp, #0
   102a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
   102a2:	687b      	ldr	r3, [r7, #4]
   102a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   102a6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
   102a8:	687b      	ldr	r3, [r7, #4]
   102aa:	69db      	ldr	r3, [r3, #28]
   102ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   102b0:	d014      	beq.n	102dc <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
   102b2:	68fb      	ldr	r3, [r7, #12]
   102b4:	2200      	movs	r2, #0
   102b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
   102ba:	68fb      	ldr	r3, [r7, #12]
   102bc:	681b      	ldr	r3, [r3, #0]
   102be:	689a      	ldr	r2, [r3, #8]
   102c0:	68fb      	ldr	r3, [r7, #12]
   102c2:	681b      	ldr	r3, [r3, #0]
   102c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   102c8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
   102ca:	68fb      	ldr	r3, [r7, #12]
   102cc:	681b      	ldr	r3, [r3, #0]
   102ce:	681a      	ldr	r2, [r3, #0]
   102d0:	68fb      	ldr	r3, [r7, #12]
   102d2:	681b      	ldr	r3, [r3, #0]
   102d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   102d8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
   102da:	e002      	b.n	102e2 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
   102dc:	68f8      	ldr	r0, [r7, #12]
   102de:	f004 facb 	bl	14878 <HAL_UART_TxCpltCallback>
}
   102e2:	bf00      	nop
   102e4:	3710      	adds	r7, #16
   102e6:	46bd      	mov	sp, r7
   102e8:	bd80      	pop	{r7, pc}

000102ea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
   102ea:	b580      	push	{r7, lr}
   102ec:	b084      	sub	sp, #16
   102ee:	af00      	add	r7, sp, #0
   102f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
   102f2:	687b      	ldr	r3, [r7, #4]
   102f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   102f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
   102f8:	68f8      	ldr	r0, [r7, #12]
   102fa:	f7ff fb6f 	bl	f9dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
   102fe:	bf00      	nop
   10300:	3710      	adds	r7, #16
   10302:	46bd      	mov	sp, r7
   10304:	bd80      	pop	{r7, pc}

00010306 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
   10306:	b580      	push	{r7, lr}
   10308:	b084      	sub	sp, #16
   1030a:	af00      	add	r7, sp, #0
   1030c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
   1030e:	687b      	ldr	r3, [r7, #4]
   10310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10312:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
   10314:	687b      	ldr	r3, [r7, #4]
   10316:	69db      	ldr	r3, [r3, #28]
   10318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1031c:	d01e      	beq.n	1035c <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
   1031e:	68fb      	ldr	r3, [r7, #12]
   10320:	2200      	movs	r2, #0
   10322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
   10326:	68fb      	ldr	r3, [r7, #12]
   10328:	681b      	ldr	r3, [r3, #0]
   1032a:	681a      	ldr	r2, [r3, #0]
   1032c:	68fb      	ldr	r3, [r7, #12]
   1032e:	681b      	ldr	r3, [r3, #0]
   10330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   10334:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
   10336:	68fb      	ldr	r3, [r7, #12]
   10338:	681b      	ldr	r3, [r3, #0]
   1033a:	689a      	ldr	r2, [r3, #8]
   1033c:	68fb      	ldr	r3, [r7, #12]
   1033e:	681b      	ldr	r3, [r3, #0]
   10340:	f022 0201 	bic.w	r2, r2, #1
   10344:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
   10346:	68fb      	ldr	r3, [r7, #12]
   10348:	681b      	ldr	r3, [r3, #0]
   1034a:	689a      	ldr	r2, [r3, #8]
   1034c:	68fb      	ldr	r3, [r7, #12]
   1034e:	681b      	ldr	r3, [r3, #0]
   10350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10354:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
   10356:	68fb      	ldr	r3, [r7, #12]
   10358:	2220      	movs	r2, #32
   1035a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
   1035c:	68f8      	ldr	r0, [r7, #12]
   1035e:	f004 fa81 	bl	14864 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
   10362:	bf00      	nop
   10364:	3710      	adds	r7, #16
   10366:	46bd      	mov	sp, r7
   10368:	bd80      	pop	{r7, pc}

0001036a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
   1036a:	b580      	push	{r7, lr}
   1036c:	b084      	sub	sp, #16
   1036e:	af00      	add	r7, sp, #0
   10370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
   10372:	687b      	ldr	r3, [r7, #4]
   10374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10376:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
   10378:	68f8      	ldr	r0, [r7, #12]
   1037a:	f7ff fb39 	bl	f9f0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
   1037e:	bf00      	nop
   10380:	3710      	adds	r7, #16
   10382:	46bd      	mov	sp, r7
   10384:	bd80      	pop	{r7, pc}

00010386 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
   10386:	b580      	push	{r7, lr}
   10388:	b086      	sub	sp, #24
   1038a:	af00      	add	r7, sp, #0
   1038c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
   1038e:	687b      	ldr	r3, [r7, #4]
   10390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10392:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
   10394:	697b      	ldr	r3, [r7, #20]
   10396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   10398:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
   1039a:	697b      	ldr	r3, [r7, #20]
   1039c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1039e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
   103a0:	697b      	ldr	r3, [r7, #20]
   103a2:	681b      	ldr	r3, [r3, #0]
   103a4:	689b      	ldr	r3, [r3, #8]
   103a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   103aa:	2b80      	cmp	r3, #128	; 0x80
   103ac:	d109      	bne.n	103c2 <UART_DMAError+0x3c>
   103ae:	693b      	ldr	r3, [r7, #16]
   103b0:	2b21      	cmp	r3, #33	; 0x21
   103b2:	d106      	bne.n	103c2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
   103b4:	697b      	ldr	r3, [r7, #20]
   103b6:	2200      	movs	r2, #0
   103b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
   103bc:	6978      	ldr	r0, [r7, #20]
   103be:	f7ff ff37 	bl	10230 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
   103c2:	697b      	ldr	r3, [r7, #20]
   103c4:	681b      	ldr	r3, [r3, #0]
   103c6:	689b      	ldr	r3, [r3, #8]
   103c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   103cc:	2b40      	cmp	r3, #64	; 0x40
   103ce:	d109      	bne.n	103e4 <UART_DMAError+0x5e>
   103d0:	68fb      	ldr	r3, [r7, #12]
   103d2:	2b22      	cmp	r3, #34	; 0x22
   103d4:	d106      	bne.n	103e4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
   103d6:	697b      	ldr	r3, [r7, #20]
   103d8:	2200      	movs	r2, #0
   103da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
   103de:	6978      	ldr	r0, [r7, #20]
   103e0:	f7ff ff3b 	bl	1025a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
   103e4:	697b      	ldr	r3, [r7, #20]
   103e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   103e8:	f043 0210 	orr.w	r2, r3, #16
   103ec:	697b      	ldr	r3, [r7, #20]
   103ee:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
   103f0:	6978      	ldr	r0, [r7, #20]
   103f2:	f7ff fb07 	bl	fa04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
   103f6:	bf00      	nop
   103f8:	3718      	adds	r7, #24
   103fa:	46bd      	mov	sp, r7
   103fc:	bd80      	pop	{r7, pc}

000103fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
   103fe:	b480      	push	{r7}
   10400:	b085      	sub	sp, #20
   10402:	af00      	add	r7, sp, #0
   10404:	4603      	mov	r3, r0
   10406:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
   10408:	2300      	movs	r3, #0
   1040a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
   1040c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   10410:	2b84      	cmp	r3, #132	; 0x84
   10412:	d005      	beq.n	10420 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
   10414:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   10418:	68fb      	ldr	r3, [r7, #12]
   1041a:	4413      	add	r3, r2
   1041c:	3303      	adds	r3, #3
   1041e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
   10420:	68fb      	ldr	r3, [r7, #12]
}
   10422:	4618      	mov	r0, r3
   10424:	3714      	adds	r7, #20
   10426:	46bd      	mov	sp, r7
   10428:	f85d 7b04 	ldr.w	r7, [sp], #4
   1042c:	4770      	bx	lr

0001042e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
   1042e:	b580      	push	{r7, lr}
   10430:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
   10432:	f000 faab 	bl	1098c <vTaskStartScheduler>
  
  return osOK;
   10436:	2300      	movs	r3, #0
}
   10438:	4618      	mov	r0, r3
   1043a:	bd80      	pop	{r7, pc}

0001043c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
   1043c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1043e:	b089      	sub	sp, #36	; 0x24
   10440:	af04      	add	r7, sp, #16
   10442:	6078      	str	r0, [r7, #4]
   10444:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
   10446:	687b      	ldr	r3, [r7, #4]
   10448:	685c      	ldr	r4, [r3, #4]
   1044a:	687b      	ldr	r3, [r7, #4]
   1044c:	681d      	ldr	r5, [r3, #0]
   1044e:	687b      	ldr	r3, [r7, #4]
   10450:	691e      	ldr	r6, [r3, #16]
   10452:	687b      	ldr	r3, [r7, #4]
   10454:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
   10458:	4618      	mov	r0, r3
   1045a:	f7ff ffd0 	bl	103fe <makeFreeRtosPriority>
   1045e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
   10460:	687b      	ldr	r3, [r7, #4]
   10462:	695b      	ldr	r3, [r3, #20]
   10464:	687a      	ldr	r2, [r7, #4]
   10466:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
   10468:	9202      	str	r2, [sp, #8]
   1046a:	9301      	str	r3, [sp, #4]
   1046c:	9100      	str	r1, [sp, #0]
   1046e:	683b      	ldr	r3, [r7, #0]
   10470:	4632      	mov	r2, r6
   10472:	4629      	mov	r1, r5
   10474:	4620      	mov	r0, r4
   10476:	f000 f8ba 	bl	105ee <xTaskCreateStatic>
   1047a:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
   1047c:	68fb      	ldr	r3, [r7, #12]
}
   1047e:	4618      	mov	r0, r3
   10480:	3714      	adds	r7, #20
   10482:	46bd      	mov	sp, r7
   10484:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010486 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   10486:	b480      	push	{r7}
   10488:	b083      	sub	sp, #12
   1048a:	af00      	add	r7, sp, #0
   1048c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1048e:	687b      	ldr	r3, [r7, #4]
   10490:	f103 0208 	add.w	r2, r3, #8
   10494:	687b      	ldr	r3, [r7, #4]
   10496:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   10498:	687b      	ldr	r3, [r7, #4]
   1049a:	f04f 32ff 	mov.w	r2, #4294967295
   1049e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   104a0:	687b      	ldr	r3, [r7, #4]
   104a2:	f103 0208 	add.w	r2, r3, #8
   104a6:	687b      	ldr	r3, [r7, #4]
   104a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   104aa:	687b      	ldr	r3, [r7, #4]
   104ac:	f103 0208 	add.w	r2, r3, #8
   104b0:	687b      	ldr	r3, [r7, #4]
   104b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   104b4:	687b      	ldr	r3, [r7, #4]
   104b6:	2200      	movs	r2, #0
   104b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   104ba:	bf00      	nop
   104bc:	370c      	adds	r7, #12
   104be:	46bd      	mov	sp, r7
   104c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   104c4:	4770      	bx	lr

000104c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   104c6:	b480      	push	{r7}
   104c8:	b083      	sub	sp, #12
   104ca:	af00      	add	r7, sp, #0
   104cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   104ce:	687b      	ldr	r3, [r7, #4]
   104d0:	2200      	movs	r2, #0
   104d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   104d4:	bf00      	nop
   104d6:	370c      	adds	r7, #12
   104d8:	46bd      	mov	sp, r7
   104da:	f85d 7b04 	ldr.w	r7, [sp], #4
   104de:	4770      	bx	lr

000104e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   104e0:	b480      	push	{r7}
   104e2:	b085      	sub	sp, #20
   104e4:	af00      	add	r7, sp, #0
   104e6:	6078      	str	r0, [r7, #4]
   104e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   104ea:	687b      	ldr	r3, [r7, #4]
   104ec:	685b      	ldr	r3, [r3, #4]
   104ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   104f0:	683b      	ldr	r3, [r7, #0]
   104f2:	68fa      	ldr	r2, [r7, #12]
   104f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   104f6:	68fb      	ldr	r3, [r7, #12]
   104f8:	689a      	ldr	r2, [r3, #8]
   104fa:	683b      	ldr	r3, [r7, #0]
   104fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   104fe:	68fb      	ldr	r3, [r7, #12]
   10500:	689b      	ldr	r3, [r3, #8]
   10502:	683a      	ldr	r2, [r7, #0]
   10504:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   10506:	68fb      	ldr	r3, [r7, #12]
   10508:	683a      	ldr	r2, [r7, #0]
   1050a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   1050c:	683b      	ldr	r3, [r7, #0]
   1050e:	687a      	ldr	r2, [r7, #4]
   10510:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10512:	687b      	ldr	r3, [r7, #4]
   10514:	681b      	ldr	r3, [r3, #0]
   10516:	1c5a      	adds	r2, r3, #1
   10518:	687b      	ldr	r3, [r7, #4]
   1051a:	601a      	str	r2, [r3, #0]
}
   1051c:	bf00      	nop
   1051e:	3714      	adds	r7, #20
   10520:	46bd      	mov	sp, r7
   10522:	f85d 7b04 	ldr.w	r7, [sp], #4
   10526:	4770      	bx	lr

00010528 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   10528:	b480      	push	{r7}
   1052a:	b085      	sub	sp, #20
   1052c:	af00      	add	r7, sp, #0
   1052e:	6078      	str	r0, [r7, #4]
   10530:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   10532:	683b      	ldr	r3, [r7, #0]
   10534:	681b      	ldr	r3, [r3, #0]
   10536:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10538:	68bb      	ldr	r3, [r7, #8]
   1053a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1053e:	d103      	bne.n	10548 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   10540:	687b      	ldr	r3, [r7, #4]
   10542:	691b      	ldr	r3, [r3, #16]
   10544:	60fb      	str	r3, [r7, #12]
   10546:	e00c      	b.n	10562 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   10548:	687b      	ldr	r3, [r7, #4]
   1054a:	3308      	adds	r3, #8
   1054c:	60fb      	str	r3, [r7, #12]
   1054e:	e002      	b.n	10556 <vListInsert+0x2e>
   10550:	68fb      	ldr	r3, [r7, #12]
   10552:	685b      	ldr	r3, [r3, #4]
   10554:	60fb      	str	r3, [r7, #12]
   10556:	68fb      	ldr	r3, [r7, #12]
   10558:	685b      	ldr	r3, [r3, #4]
   1055a:	681b      	ldr	r3, [r3, #0]
   1055c:	68ba      	ldr	r2, [r7, #8]
   1055e:	429a      	cmp	r2, r3
   10560:	d2f6      	bcs.n	10550 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   10562:	68fb      	ldr	r3, [r7, #12]
   10564:	685a      	ldr	r2, [r3, #4]
   10566:	683b      	ldr	r3, [r7, #0]
   10568:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1056a:	683b      	ldr	r3, [r7, #0]
   1056c:	685b      	ldr	r3, [r3, #4]
   1056e:	683a      	ldr	r2, [r7, #0]
   10570:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   10572:	683b      	ldr	r3, [r7, #0]
   10574:	68fa      	ldr	r2, [r7, #12]
   10576:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   10578:	68fb      	ldr	r3, [r7, #12]
   1057a:	683a      	ldr	r2, [r7, #0]
   1057c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   1057e:	683b      	ldr	r3, [r7, #0]
   10580:	687a      	ldr	r2, [r7, #4]
   10582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10584:	687b      	ldr	r3, [r7, #4]
   10586:	681b      	ldr	r3, [r3, #0]
   10588:	1c5a      	adds	r2, r3, #1
   1058a:	687b      	ldr	r3, [r7, #4]
   1058c:	601a      	str	r2, [r3, #0]
}
   1058e:	bf00      	nop
   10590:	3714      	adds	r7, #20
   10592:	46bd      	mov	sp, r7
   10594:	f85d 7b04 	ldr.w	r7, [sp], #4
   10598:	4770      	bx	lr

0001059a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1059a:	b480      	push	{r7}
   1059c:	b085      	sub	sp, #20
   1059e:	af00      	add	r7, sp, #0
   105a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   105a2:	687b      	ldr	r3, [r7, #4]
   105a4:	691b      	ldr	r3, [r3, #16]
   105a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   105a8:	687b      	ldr	r3, [r7, #4]
   105aa:	685b      	ldr	r3, [r3, #4]
   105ac:	687a      	ldr	r2, [r7, #4]
   105ae:	6892      	ldr	r2, [r2, #8]
   105b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   105b2:	687b      	ldr	r3, [r7, #4]
   105b4:	689b      	ldr	r3, [r3, #8]
   105b6:	687a      	ldr	r2, [r7, #4]
   105b8:	6852      	ldr	r2, [r2, #4]
   105ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   105bc:	68fb      	ldr	r3, [r7, #12]
   105be:	685b      	ldr	r3, [r3, #4]
   105c0:	687a      	ldr	r2, [r7, #4]
   105c2:	429a      	cmp	r2, r3
   105c4:	d103      	bne.n	105ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   105c6:	687b      	ldr	r3, [r7, #4]
   105c8:	689a      	ldr	r2, [r3, #8]
   105ca:	68fb      	ldr	r3, [r7, #12]
   105cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   105ce:	687b      	ldr	r3, [r7, #4]
   105d0:	2200      	movs	r2, #0
   105d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   105d4:	68fb      	ldr	r3, [r7, #12]
   105d6:	681b      	ldr	r3, [r3, #0]
   105d8:	1e5a      	subs	r2, r3, #1
   105da:	68fb      	ldr	r3, [r7, #12]
   105dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   105de:	68fb      	ldr	r3, [r7, #12]
   105e0:	681b      	ldr	r3, [r3, #0]
}
   105e2:	4618      	mov	r0, r3
   105e4:	3714      	adds	r7, #20
   105e6:	46bd      	mov	sp, r7
   105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   105ec:	4770      	bx	lr

000105ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
   105ee:	b580      	push	{r7, lr}
   105f0:	b08e      	sub	sp, #56	; 0x38
   105f2:	af04      	add	r7, sp, #16
   105f4:	60f8      	str	r0, [r7, #12]
   105f6:	60b9      	str	r1, [r7, #8]
   105f8:	607a      	str	r2, [r7, #4]
   105fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
   105fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105fe:	2b00      	cmp	r3, #0
   10600:	d10b      	bne.n	1061a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   10602:	f04f 0350 	mov.w	r3, #80	; 0x50
   10606:	b672      	cpsid	i
   10608:	f383 8811 	msr	BASEPRI, r3
   1060c:	f3bf 8f6f 	isb	sy
   10610:	f3bf 8f4f 	dsb	sy
   10614:	b662      	cpsie	i
   10616:	623b      	str	r3, [r7, #32]
   10618:	e7fe      	b.n	10618 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
   1061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1061c:	2b00      	cmp	r3, #0
   1061e:	d10b      	bne.n	10638 <xTaskCreateStatic+0x4a>
   10620:	f04f 0350 	mov.w	r3, #80	; 0x50
   10624:	b672      	cpsid	i
   10626:	f383 8811 	msr	BASEPRI, r3
   1062a:	f3bf 8f6f 	isb	sy
   1062e:	f3bf 8f4f 	dsb	sy
   10632:	b662      	cpsie	i
   10634:	61fb      	str	r3, [r7, #28]
   10636:	e7fe      	b.n	10636 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
   10638:	2354      	movs	r3, #84	; 0x54
   1063a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
   1063c:	693b      	ldr	r3, [r7, #16]
   1063e:	2b54      	cmp	r3, #84	; 0x54
   10640:	d00b      	beq.n	1065a <xTaskCreateStatic+0x6c>
   10642:	f04f 0350 	mov.w	r3, #80	; 0x50
   10646:	b672      	cpsid	i
   10648:	f383 8811 	msr	BASEPRI, r3
   1064c:	f3bf 8f6f 	isb	sy
   10650:	f3bf 8f4f 	dsb	sy
   10654:	b662      	cpsie	i
   10656:	61bb      	str	r3, [r7, #24]
   10658:	e7fe      	b.n	10658 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
   1065a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
   1065c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1065e:	2b00      	cmp	r3, #0
   10660:	d01a      	beq.n	10698 <xTaskCreateStatic+0xaa>
   10662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10664:	2b00      	cmp	r3, #0
   10666:	d017      	beq.n	10698 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
   10668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1066a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
   1066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1066e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10670:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
   10672:	2300      	movs	r3, #0
   10674:	9303      	str	r3, [sp, #12]
   10676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10678:	9302      	str	r3, [sp, #8]
   1067a:	f107 0314 	add.w	r3, r7, #20
   1067e:	9301      	str	r3, [sp, #4]
   10680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10682:	9300      	str	r3, [sp, #0]
   10684:	683b      	ldr	r3, [r7, #0]
   10686:	687a      	ldr	r2, [r7, #4]
   10688:	68b9      	ldr	r1, [r7, #8]
   1068a:	68f8      	ldr	r0, [r7, #12]
   1068c:	f000 f80b 	bl	106a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   10690:	6a78      	ldr	r0, [r7, #36]	; 0x24
   10692:	f000 f891 	bl	107b8 <prvAddNewTaskToReadyList>
   10696:	e001      	b.n	1069c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
   10698:	2300      	movs	r3, #0
   1069a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
   1069c:	697b      	ldr	r3, [r7, #20]
	}
   1069e:	4618      	mov	r0, r3
   106a0:	3728      	adds	r7, #40	; 0x28
   106a2:	46bd      	mov	sp, r7
   106a4:	bd80      	pop	{r7, pc}

000106a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   106a6:	b580      	push	{r7, lr}
   106a8:	b088      	sub	sp, #32
   106aa:	af00      	add	r7, sp, #0
   106ac:	60f8      	str	r0, [r7, #12]
   106ae:	60b9      	str	r1, [r7, #8]
   106b0:	607a      	str	r2, [r7, #4]
   106b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   106b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   106b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   106b8:	6879      	ldr	r1, [r7, #4]
   106ba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   106be:	440b      	add	r3, r1
   106c0:	009b      	lsls	r3, r3, #2
   106c2:	4413      	add	r3, r2
   106c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   106c6:	69bb      	ldr	r3, [r7, #24]
   106c8:	f023 0307 	bic.w	r3, r3, #7
   106cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   106ce:	69bb      	ldr	r3, [r7, #24]
   106d0:	f003 0307 	and.w	r3, r3, #7
   106d4:	2b00      	cmp	r3, #0
   106d6:	d00b      	beq.n	106f0 <prvInitialiseNewTask+0x4a>
   106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
   106dc:	b672      	cpsid	i
   106de:	f383 8811 	msr	BASEPRI, r3
   106e2:	f3bf 8f6f 	isb	sy
   106e6:	f3bf 8f4f 	dsb	sy
   106ea:	b662      	cpsie	i
   106ec:	617b      	str	r3, [r7, #20]
   106ee:	e7fe      	b.n	106ee <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
   106f0:	68bb      	ldr	r3, [r7, #8]
   106f2:	2b00      	cmp	r3, #0
   106f4:	d01f      	beq.n	10736 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   106f6:	2300      	movs	r3, #0
   106f8:	61fb      	str	r3, [r7, #28]
   106fa:	e012      	b.n	10722 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   106fc:	68ba      	ldr	r2, [r7, #8]
   106fe:	69fb      	ldr	r3, [r7, #28]
   10700:	4413      	add	r3, r2
   10702:	7819      	ldrb	r1, [r3, #0]
   10704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10706:	69fb      	ldr	r3, [r7, #28]
   10708:	4413      	add	r3, r2
   1070a:	3334      	adds	r3, #52	; 0x34
   1070c:	460a      	mov	r2, r1
   1070e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
   10710:	68ba      	ldr	r2, [r7, #8]
   10712:	69fb      	ldr	r3, [r7, #28]
   10714:	4413      	add	r3, r2
   10716:	781b      	ldrb	r3, [r3, #0]
   10718:	2b00      	cmp	r3, #0
   1071a:	d006      	beq.n	1072a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1071c:	69fb      	ldr	r3, [r7, #28]
   1071e:	3301      	adds	r3, #1
   10720:	61fb      	str	r3, [r7, #28]
   10722:	69fb      	ldr	r3, [r7, #28]
   10724:	2b0f      	cmp	r3, #15
   10726:	d9e9      	bls.n	106fc <prvInitialiseNewTask+0x56>
   10728:	e000      	b.n	1072c <prvInitialiseNewTask+0x86>
			{
				break;
   1072a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1072e:	2200      	movs	r2, #0
   10730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   10734:	e003      	b.n	1073e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
   10736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10738:	2200      	movs	r2, #0
   1073a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10740:	2b06      	cmp	r3, #6
   10742:	d901      	bls.n	10748 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   10744:	2306      	movs	r3, #6
   10746:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   10748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1074a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1074c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1074e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10750:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10752:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   10754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10756:	2200      	movs	r2, #0
   10758:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1075c:	3304      	adds	r3, #4
   1075e:	4618      	mov	r0, r3
   10760:	f7ff feb1 	bl	104c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   10764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10766:	3318      	adds	r3, #24
   10768:	4618      	mov	r0, r3
   1076a:	f7ff feac 	bl	104c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1076e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10772:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   10774:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10776:	f1c3 0207 	rsb	r2, r3, #7
   1077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1077c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1077e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10782:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   10784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10786:	2200      	movs	r2, #0
   10788:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1078c:	2200      	movs	r2, #0
   1078e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   10792:	683a      	ldr	r2, [r7, #0]
   10794:	68f9      	ldr	r1, [r7, #12]
   10796:	69b8      	ldr	r0, [r7, #24]
   10798:	f000 fc40 	bl	1101c <pxPortInitialiseStack>
   1079c:	4602      	mov	r2, r0
   1079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   107a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107a4:	2b00      	cmp	r3, #0
   107a6:	d002      	beq.n	107ae <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   107a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   107ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   107ae:	bf00      	nop
   107b0:	3720      	adds	r7, #32
   107b2:	46bd      	mov	sp, r7
   107b4:	bd80      	pop	{r7, pc}
	...

000107b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   107b8:	b580      	push	{r7, lr}
   107ba:	b082      	sub	sp, #8
   107bc:	af00      	add	r7, sp, #0
   107be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   107c0:	f000 fd1e 	bl	11200 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   107c4:	4b2a      	ldr	r3, [pc, #168]	; (10870 <prvAddNewTaskToReadyList+0xb8>)
   107c6:	681b      	ldr	r3, [r3, #0]
   107c8:	3301      	adds	r3, #1
   107ca:	4a29      	ldr	r2, [pc, #164]	; (10870 <prvAddNewTaskToReadyList+0xb8>)
   107cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   107ce:	4b29      	ldr	r3, [pc, #164]	; (10874 <prvAddNewTaskToReadyList+0xbc>)
   107d0:	681b      	ldr	r3, [r3, #0]
   107d2:	2b00      	cmp	r3, #0
   107d4:	d109      	bne.n	107ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   107d6:	4a27      	ldr	r2, [pc, #156]	; (10874 <prvAddNewTaskToReadyList+0xbc>)
   107d8:	687b      	ldr	r3, [r7, #4]
   107da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   107dc:	4b24      	ldr	r3, [pc, #144]	; (10870 <prvAddNewTaskToReadyList+0xb8>)
   107de:	681b      	ldr	r3, [r3, #0]
   107e0:	2b01      	cmp	r3, #1
   107e2:	d110      	bne.n	10806 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   107e4:	f000 fb1e 	bl	10e24 <prvInitialiseTaskLists>
   107e8:	e00d      	b.n	10806 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   107ea:	4b23      	ldr	r3, [pc, #140]	; (10878 <prvAddNewTaskToReadyList+0xc0>)
   107ec:	681b      	ldr	r3, [r3, #0]
   107ee:	2b00      	cmp	r3, #0
   107f0:	d109      	bne.n	10806 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   107f2:	4b20      	ldr	r3, [pc, #128]	; (10874 <prvAddNewTaskToReadyList+0xbc>)
   107f4:	681b      	ldr	r3, [r3, #0]
   107f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   107f8:	687b      	ldr	r3, [r7, #4]
   107fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   107fc:	429a      	cmp	r2, r3
   107fe:	d802      	bhi.n	10806 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   10800:	4a1c      	ldr	r2, [pc, #112]	; (10874 <prvAddNewTaskToReadyList+0xbc>)
   10802:	687b      	ldr	r3, [r7, #4]
   10804:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   10806:	4b1d      	ldr	r3, [pc, #116]	; (1087c <prvAddNewTaskToReadyList+0xc4>)
   10808:	681b      	ldr	r3, [r3, #0]
   1080a:	3301      	adds	r3, #1
   1080c:	4a1b      	ldr	r2, [pc, #108]	; (1087c <prvAddNewTaskToReadyList+0xc4>)
   1080e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   10810:	687b      	ldr	r3, [r7, #4]
   10812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10814:	2201      	movs	r2, #1
   10816:	409a      	lsls	r2, r3
   10818:	4b19      	ldr	r3, [pc, #100]	; (10880 <prvAddNewTaskToReadyList+0xc8>)
   1081a:	681b      	ldr	r3, [r3, #0]
   1081c:	4313      	orrs	r3, r2
   1081e:	4a18      	ldr	r2, [pc, #96]	; (10880 <prvAddNewTaskToReadyList+0xc8>)
   10820:	6013      	str	r3, [r2, #0]
   10822:	687b      	ldr	r3, [r7, #4]
   10824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10826:	4613      	mov	r3, r2
   10828:	009b      	lsls	r3, r3, #2
   1082a:	4413      	add	r3, r2
   1082c:	009b      	lsls	r3, r3, #2
   1082e:	4a15      	ldr	r2, [pc, #84]	; (10884 <prvAddNewTaskToReadyList+0xcc>)
   10830:	441a      	add	r2, r3
   10832:	687b      	ldr	r3, [r7, #4]
   10834:	3304      	adds	r3, #4
   10836:	4619      	mov	r1, r3
   10838:	4610      	mov	r0, r2
   1083a:	f7ff fe51 	bl	104e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1083e:	f000 fd11 	bl	11264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   10842:	4b0d      	ldr	r3, [pc, #52]	; (10878 <prvAddNewTaskToReadyList+0xc0>)
   10844:	681b      	ldr	r3, [r3, #0]
   10846:	2b00      	cmp	r3, #0
   10848:	d00e      	beq.n	10868 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1084a:	4b0a      	ldr	r3, [pc, #40]	; (10874 <prvAddNewTaskToReadyList+0xbc>)
   1084c:	681b      	ldr	r3, [r3, #0]
   1084e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10850:	687b      	ldr	r3, [r7, #4]
   10852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10854:	429a      	cmp	r2, r3
   10856:	d207      	bcs.n	10868 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
   10858:	4b0b      	ldr	r3, [pc, #44]	; (10888 <prvAddNewTaskToReadyList+0xd0>)
   1085a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1085e:	601a      	str	r2, [r3, #0]
   10860:	f3bf 8f4f 	dsb	sy
   10864:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   10868:	bf00      	nop
   1086a:	3708      	adds	r7, #8
   1086c:	46bd      	mov	sp, r7
   1086e:	bd80      	pop	{r7, pc}
   10870:	0002a370 	.word	0x0002a370
   10874:	0002a270 	.word	0x0002a270
   10878:	0002a37c 	.word	0x0002a37c
   1087c:	0002a38c 	.word	0x0002a38c
   10880:	0002a378 	.word	0x0002a378
   10884:	0002a274 	.word	0x0002a274
   10888:	e000ed04 	.word	0xe000ed04

0001088c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   1088c:	b580      	push	{r7, lr}
   1088e:	b08a      	sub	sp, #40	; 0x28
   10890:	af00      	add	r7, sp, #0
   10892:	6078      	str	r0, [r7, #4]
   10894:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   10896:	2300      	movs	r3, #0
   10898:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
   1089a:	687b      	ldr	r3, [r7, #4]
   1089c:	2b00      	cmp	r3, #0
   1089e:	d10b      	bne.n	108b8 <vTaskDelayUntil+0x2c>
   108a0:	f04f 0350 	mov.w	r3, #80	; 0x50
   108a4:	b672      	cpsid	i
   108a6:	f383 8811 	msr	BASEPRI, r3
   108aa:	f3bf 8f6f 	isb	sy
   108ae:	f3bf 8f4f 	dsb	sy
   108b2:	b662      	cpsie	i
   108b4:	617b      	str	r3, [r7, #20]
   108b6:	e7fe      	b.n	108b6 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
   108b8:	683b      	ldr	r3, [r7, #0]
   108ba:	2b00      	cmp	r3, #0
   108bc:	d10b      	bne.n	108d6 <vTaskDelayUntil+0x4a>
   108be:	f04f 0350 	mov.w	r3, #80	; 0x50
   108c2:	b672      	cpsid	i
   108c4:	f383 8811 	msr	BASEPRI, r3
   108c8:	f3bf 8f6f 	isb	sy
   108cc:	f3bf 8f4f 	dsb	sy
   108d0:	b662      	cpsie	i
   108d2:	613b      	str	r3, [r7, #16]
   108d4:	e7fe      	b.n	108d4 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
   108d6:	4b2a      	ldr	r3, [pc, #168]	; (10980 <vTaskDelayUntil+0xf4>)
   108d8:	681b      	ldr	r3, [r3, #0]
   108da:	2b00      	cmp	r3, #0
   108dc:	d00b      	beq.n	108f6 <vTaskDelayUntil+0x6a>
   108de:	f04f 0350 	mov.w	r3, #80	; 0x50
   108e2:	b672      	cpsid	i
   108e4:	f383 8811 	msr	BASEPRI, r3
   108e8:	f3bf 8f6f 	isb	sy
   108ec:	f3bf 8f4f 	dsb	sy
   108f0:	b662      	cpsie	i
   108f2:	60fb      	str	r3, [r7, #12]
   108f4:	e7fe      	b.n	108f4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
   108f6:	f000 f8ab 	bl	10a50 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   108fa:	4b22      	ldr	r3, [pc, #136]	; (10984 <vTaskDelayUntil+0xf8>)
   108fc:	681b      	ldr	r3, [r3, #0]
   108fe:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   10900:	687b      	ldr	r3, [r7, #4]
   10902:	681b      	ldr	r3, [r3, #0]
   10904:	683a      	ldr	r2, [r7, #0]
   10906:	4413      	add	r3, r2
   10908:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
   1090a:	687b      	ldr	r3, [r7, #4]
   1090c:	681b      	ldr	r3, [r3, #0]
   1090e:	6a3a      	ldr	r2, [r7, #32]
   10910:	429a      	cmp	r2, r3
   10912:	d20b      	bcs.n	1092c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   10914:	687b      	ldr	r3, [r7, #4]
   10916:	681b      	ldr	r3, [r3, #0]
   10918:	69fa      	ldr	r2, [r7, #28]
   1091a:	429a      	cmp	r2, r3
   1091c:	d211      	bcs.n	10942 <vTaskDelayUntil+0xb6>
   1091e:	69fa      	ldr	r2, [r7, #28]
   10920:	6a3b      	ldr	r3, [r7, #32]
   10922:	429a      	cmp	r2, r3
   10924:	d90d      	bls.n	10942 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
   10926:	2301      	movs	r3, #1
   10928:	627b      	str	r3, [r7, #36]	; 0x24
   1092a:	e00a      	b.n	10942 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   1092c:	687b      	ldr	r3, [r7, #4]
   1092e:	681b      	ldr	r3, [r3, #0]
   10930:	69fa      	ldr	r2, [r7, #28]
   10932:	429a      	cmp	r2, r3
   10934:	d303      	bcc.n	1093e <vTaskDelayUntil+0xb2>
   10936:	69fa      	ldr	r2, [r7, #28]
   10938:	6a3b      	ldr	r3, [r7, #32]
   1093a:	429a      	cmp	r2, r3
   1093c:	d901      	bls.n	10942 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
   1093e:	2301      	movs	r3, #1
   10940:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   10942:	687b      	ldr	r3, [r7, #4]
   10944:	69fa      	ldr	r2, [r7, #28]
   10946:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   10948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1094a:	2b00      	cmp	r3, #0
   1094c:	d006      	beq.n	1095c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   1094e:	69fa      	ldr	r2, [r7, #28]
   10950:	6a3b      	ldr	r3, [r7, #32]
   10952:	1ad3      	subs	r3, r2, r3
   10954:	2100      	movs	r1, #0
   10956:	4618      	mov	r0, r3
   10958:	f000 fafa 	bl	10f50 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   1095c:	f000 f886 	bl	10a6c <xTaskResumeAll>
   10960:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   10962:	69bb      	ldr	r3, [r7, #24]
   10964:	2b00      	cmp	r3, #0
   10966:	d107      	bne.n	10978 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
   10968:	4b07      	ldr	r3, [pc, #28]	; (10988 <vTaskDelayUntil+0xfc>)
   1096a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1096e:	601a      	str	r2, [r3, #0]
   10970:	f3bf 8f4f 	dsb	sy
   10974:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   10978:	bf00      	nop
   1097a:	3728      	adds	r7, #40	; 0x28
   1097c:	46bd      	mov	sp, r7
   1097e:	bd80      	pop	{r7, pc}
   10980:	0002a398 	.word	0x0002a398
   10984:	0002a374 	.word	0x0002a374
   10988:	e000ed04 	.word	0xe000ed04

0001098c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1098c:	b580      	push	{r7, lr}
   1098e:	b08a      	sub	sp, #40	; 0x28
   10990:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
   10992:	2300      	movs	r3, #0
   10994:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
   10996:	2300      	movs	r3, #0
   10998:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
   1099a:	463a      	mov	r2, r7
   1099c:	1d39      	adds	r1, r7, #4
   1099e:	f107 0308 	add.w	r3, r7, #8
   109a2:	4618      	mov	r0, r3
   109a4:	f7f7 fdf8 	bl	8598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
   109a8:	6839      	ldr	r1, [r7, #0]
   109aa:	687b      	ldr	r3, [r7, #4]
   109ac:	68ba      	ldr	r2, [r7, #8]
   109ae:	9202      	str	r2, [sp, #8]
   109b0:	9301      	str	r3, [sp, #4]
   109b2:	2300      	movs	r3, #0
   109b4:	9300      	str	r3, [sp, #0]
   109b6:	2300      	movs	r3, #0
   109b8:	460a      	mov	r2, r1
   109ba:	491f      	ldr	r1, [pc, #124]	; (10a38 <vTaskStartScheduler+0xac>)
   109bc:	481f      	ldr	r0, [pc, #124]	; (10a3c <vTaskStartScheduler+0xb0>)
   109be:	f7ff fe16 	bl	105ee <xTaskCreateStatic>
   109c2:	4602      	mov	r2, r0
   109c4:	4b1e      	ldr	r3, [pc, #120]	; (10a40 <vTaskStartScheduler+0xb4>)
   109c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
   109c8:	4b1d      	ldr	r3, [pc, #116]	; (10a40 <vTaskStartScheduler+0xb4>)
   109ca:	681b      	ldr	r3, [r3, #0]
   109cc:	2b00      	cmp	r3, #0
   109ce:	d002      	beq.n	109d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
   109d0:	2301      	movs	r3, #1
   109d2:	617b      	str	r3, [r7, #20]
   109d4:	e001      	b.n	109da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
   109d6:	2300      	movs	r3, #0
   109d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   109da:	697b      	ldr	r3, [r7, #20]
   109dc:	2b01      	cmp	r3, #1
   109de:	d117      	bne.n	10a10 <vTaskStartScheduler+0x84>
   109e0:	f04f 0350 	mov.w	r3, #80	; 0x50
   109e4:	b672      	cpsid	i
   109e6:	f383 8811 	msr	BASEPRI, r3
   109ea:	f3bf 8f6f 	isb	sy
   109ee:	f3bf 8f4f 	dsb	sy
   109f2:	b662      	cpsie	i
   109f4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   109f6:	4b13      	ldr	r3, [pc, #76]	; (10a44 <vTaskStartScheduler+0xb8>)
   109f8:	f04f 32ff 	mov.w	r2, #4294967295
   109fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   109fe:	4b12      	ldr	r3, [pc, #72]	; (10a48 <vTaskStartScheduler+0xbc>)
   10a00:	2201      	movs	r2, #1
   10a02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   10a04:	4b11      	ldr	r3, [pc, #68]	; (10a4c <vTaskStartScheduler+0xc0>)
   10a06:	2200      	movs	r2, #0
   10a08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   10a0a:	f000 fb7d 	bl	11108 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   10a0e:	e00f      	b.n	10a30 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   10a10:	697b      	ldr	r3, [r7, #20]
   10a12:	f1b3 3fff 	cmp.w	r3, #4294967295
   10a16:	d10b      	bne.n	10a30 <vTaskStartScheduler+0xa4>
   10a18:	f04f 0350 	mov.w	r3, #80	; 0x50
   10a1c:	b672      	cpsid	i
   10a1e:	f383 8811 	msr	BASEPRI, r3
   10a22:	f3bf 8f6f 	isb	sy
   10a26:	f3bf 8f4f 	dsb	sy
   10a2a:	b662      	cpsie	i
   10a2c:	60fb      	str	r3, [r7, #12]
   10a2e:	e7fe      	b.n	10a2e <vTaskStartScheduler+0xa2>
}
   10a30:	bf00      	nop
   10a32:	3718      	adds	r7, #24
   10a34:	46bd      	mov	sp, r7
   10a36:	bd80      	pop	{r7, pc}
   10a38:	000195a8 	.word	0x000195a8
   10a3c:	00010df5 	.word	0x00010df5
   10a40:	0002a394 	.word	0x0002a394
   10a44:	0002a390 	.word	0x0002a390
   10a48:	0002a37c 	.word	0x0002a37c
   10a4c:	0002a374 	.word	0x0002a374

00010a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   10a50:	b480      	push	{r7}
   10a52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   10a54:	4b04      	ldr	r3, [pc, #16]	; (10a68 <vTaskSuspendAll+0x18>)
   10a56:	681b      	ldr	r3, [r3, #0]
   10a58:	3301      	adds	r3, #1
   10a5a:	4a03      	ldr	r2, [pc, #12]	; (10a68 <vTaskSuspendAll+0x18>)
   10a5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
   10a5e:	bf00      	nop
   10a60:	46bd      	mov	sp, r7
   10a62:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a66:	4770      	bx	lr
   10a68:	0002a398 	.word	0x0002a398

00010a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   10a6c:	b580      	push	{r7, lr}
   10a6e:	b084      	sub	sp, #16
   10a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   10a72:	2300      	movs	r3, #0
   10a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   10a76:	2300      	movs	r3, #0
   10a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   10a7a:	4b42      	ldr	r3, [pc, #264]	; (10b84 <xTaskResumeAll+0x118>)
   10a7c:	681b      	ldr	r3, [r3, #0]
   10a7e:	2b00      	cmp	r3, #0
   10a80:	d10b      	bne.n	10a9a <xTaskResumeAll+0x2e>
   10a82:	f04f 0350 	mov.w	r3, #80	; 0x50
   10a86:	b672      	cpsid	i
   10a88:	f383 8811 	msr	BASEPRI, r3
   10a8c:	f3bf 8f6f 	isb	sy
   10a90:	f3bf 8f4f 	dsb	sy
   10a94:	b662      	cpsie	i
   10a96:	603b      	str	r3, [r7, #0]
   10a98:	e7fe      	b.n	10a98 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   10a9a:	f000 fbb1 	bl	11200 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   10a9e:	4b39      	ldr	r3, [pc, #228]	; (10b84 <xTaskResumeAll+0x118>)
   10aa0:	681b      	ldr	r3, [r3, #0]
   10aa2:	3b01      	subs	r3, #1
   10aa4:	4a37      	ldr	r2, [pc, #220]	; (10b84 <xTaskResumeAll+0x118>)
   10aa6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   10aa8:	4b36      	ldr	r3, [pc, #216]	; (10b84 <xTaskResumeAll+0x118>)
   10aaa:	681b      	ldr	r3, [r3, #0]
   10aac:	2b00      	cmp	r3, #0
   10aae:	d161      	bne.n	10b74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   10ab0:	4b35      	ldr	r3, [pc, #212]	; (10b88 <xTaskResumeAll+0x11c>)
   10ab2:	681b      	ldr	r3, [r3, #0]
   10ab4:	2b00      	cmp	r3, #0
   10ab6:	d05d      	beq.n	10b74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   10ab8:	e02e      	b.n	10b18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   10aba:	4b34      	ldr	r3, [pc, #208]	; (10b8c <xTaskResumeAll+0x120>)
   10abc:	68db      	ldr	r3, [r3, #12]
   10abe:	68db      	ldr	r3, [r3, #12]
   10ac0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   10ac2:	68fb      	ldr	r3, [r7, #12]
   10ac4:	3318      	adds	r3, #24
   10ac6:	4618      	mov	r0, r3
   10ac8:	f7ff fd67 	bl	1059a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   10acc:	68fb      	ldr	r3, [r7, #12]
   10ace:	3304      	adds	r3, #4
   10ad0:	4618      	mov	r0, r3
   10ad2:	f7ff fd62 	bl	1059a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   10ad6:	68fb      	ldr	r3, [r7, #12]
   10ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10ada:	2201      	movs	r2, #1
   10adc:	409a      	lsls	r2, r3
   10ade:	4b2c      	ldr	r3, [pc, #176]	; (10b90 <xTaskResumeAll+0x124>)
   10ae0:	681b      	ldr	r3, [r3, #0]
   10ae2:	4313      	orrs	r3, r2
   10ae4:	4a2a      	ldr	r2, [pc, #168]	; (10b90 <xTaskResumeAll+0x124>)
   10ae6:	6013      	str	r3, [r2, #0]
   10ae8:	68fb      	ldr	r3, [r7, #12]
   10aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10aec:	4613      	mov	r3, r2
   10aee:	009b      	lsls	r3, r3, #2
   10af0:	4413      	add	r3, r2
   10af2:	009b      	lsls	r3, r3, #2
   10af4:	4a27      	ldr	r2, [pc, #156]	; (10b94 <xTaskResumeAll+0x128>)
   10af6:	441a      	add	r2, r3
   10af8:	68fb      	ldr	r3, [r7, #12]
   10afa:	3304      	adds	r3, #4
   10afc:	4619      	mov	r1, r3
   10afe:	4610      	mov	r0, r2
   10b00:	f7ff fcee 	bl	104e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   10b04:	68fb      	ldr	r3, [r7, #12]
   10b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10b08:	4b23      	ldr	r3, [pc, #140]	; (10b98 <xTaskResumeAll+0x12c>)
   10b0a:	681b      	ldr	r3, [r3, #0]
   10b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10b0e:	429a      	cmp	r2, r3
   10b10:	d302      	bcc.n	10b18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
   10b12:	4b22      	ldr	r3, [pc, #136]	; (10b9c <xTaskResumeAll+0x130>)
   10b14:	2201      	movs	r2, #1
   10b16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   10b18:	4b1c      	ldr	r3, [pc, #112]	; (10b8c <xTaskResumeAll+0x120>)
   10b1a:	681b      	ldr	r3, [r3, #0]
   10b1c:	2b00      	cmp	r3, #0
   10b1e:	d1cc      	bne.n	10aba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   10b20:	68fb      	ldr	r3, [r7, #12]
   10b22:	2b00      	cmp	r3, #0
   10b24:	d001      	beq.n	10b2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   10b26:	f000 f9f3 	bl	10f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   10b2a:	4b1d      	ldr	r3, [pc, #116]	; (10ba0 <xTaskResumeAll+0x134>)
   10b2c:	681b      	ldr	r3, [r3, #0]
   10b2e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   10b30:	687b      	ldr	r3, [r7, #4]
   10b32:	2b00      	cmp	r3, #0
   10b34:	d010      	beq.n	10b58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   10b36:	f000 f847 	bl	10bc8 <xTaskIncrementTick>
   10b3a:	4603      	mov	r3, r0
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	d002      	beq.n	10b46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
   10b40:	4b16      	ldr	r3, [pc, #88]	; (10b9c <xTaskResumeAll+0x130>)
   10b42:	2201      	movs	r2, #1
   10b44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   10b46:	687b      	ldr	r3, [r7, #4]
   10b48:	3b01      	subs	r3, #1
   10b4a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   10b4c:	687b      	ldr	r3, [r7, #4]
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d1f1      	bne.n	10b36 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
   10b52:	4b13      	ldr	r3, [pc, #76]	; (10ba0 <xTaskResumeAll+0x134>)
   10b54:	2200      	movs	r2, #0
   10b56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   10b58:	4b10      	ldr	r3, [pc, #64]	; (10b9c <xTaskResumeAll+0x130>)
   10b5a:	681b      	ldr	r3, [r3, #0]
   10b5c:	2b00      	cmp	r3, #0
   10b5e:	d009      	beq.n	10b74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   10b60:	2301      	movs	r3, #1
   10b62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   10b64:	4b0f      	ldr	r3, [pc, #60]	; (10ba4 <xTaskResumeAll+0x138>)
   10b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10b6a:	601a      	str	r2, [r3, #0]
   10b6c:	f3bf 8f4f 	dsb	sy
   10b70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   10b74:	f000 fb76 	bl	11264 <vPortExitCritical>

	return xAlreadyYielded;
   10b78:	68bb      	ldr	r3, [r7, #8]
}
   10b7a:	4618      	mov	r0, r3
   10b7c:	3710      	adds	r7, #16
   10b7e:	46bd      	mov	sp, r7
   10b80:	bd80      	pop	{r7, pc}
   10b82:	bf00      	nop
   10b84:	0002a398 	.word	0x0002a398
   10b88:	0002a370 	.word	0x0002a370
   10b8c:	0002a330 	.word	0x0002a330
   10b90:	0002a378 	.word	0x0002a378
   10b94:	0002a274 	.word	0x0002a274
   10b98:	0002a270 	.word	0x0002a270
   10b9c:	0002a384 	.word	0x0002a384
   10ba0:	0002a380 	.word	0x0002a380
   10ba4:	e000ed04 	.word	0xe000ed04

00010ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   10ba8:	b480      	push	{r7}
   10baa:	b083      	sub	sp, #12
   10bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   10bae:	4b05      	ldr	r3, [pc, #20]	; (10bc4 <xTaskGetTickCount+0x1c>)
   10bb0:	681b      	ldr	r3, [r3, #0]
   10bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   10bb4:	687b      	ldr	r3, [r7, #4]
}
   10bb6:	4618      	mov	r0, r3
   10bb8:	370c      	adds	r7, #12
   10bba:	46bd      	mov	sp, r7
   10bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10bc0:	4770      	bx	lr
   10bc2:	bf00      	nop
   10bc4:	0002a374 	.word	0x0002a374

00010bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   10bc8:	b580      	push	{r7, lr}
   10bca:	b086      	sub	sp, #24
   10bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   10bce:	2300      	movs	r3, #0
   10bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   10bd2:	4b4f      	ldr	r3, [pc, #316]	; (10d10 <xTaskIncrementTick+0x148>)
   10bd4:	681b      	ldr	r3, [r3, #0]
   10bd6:	2b00      	cmp	r3, #0
   10bd8:	f040 8089 	bne.w	10cee <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   10bdc:	4b4d      	ldr	r3, [pc, #308]	; (10d14 <xTaskIncrementTick+0x14c>)
   10bde:	681b      	ldr	r3, [r3, #0]
   10be0:	3301      	adds	r3, #1
   10be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   10be4:	4a4b      	ldr	r2, [pc, #300]	; (10d14 <xTaskIncrementTick+0x14c>)
   10be6:	693b      	ldr	r3, [r7, #16]
   10be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   10bea:	693b      	ldr	r3, [r7, #16]
   10bec:	2b00      	cmp	r3, #0
   10bee:	d121      	bne.n	10c34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
   10bf0:	4b49      	ldr	r3, [pc, #292]	; (10d18 <xTaskIncrementTick+0x150>)
   10bf2:	681b      	ldr	r3, [r3, #0]
   10bf4:	681b      	ldr	r3, [r3, #0]
   10bf6:	2b00      	cmp	r3, #0
   10bf8:	d00b      	beq.n	10c12 <xTaskIncrementTick+0x4a>
   10bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
   10bfe:	b672      	cpsid	i
   10c00:	f383 8811 	msr	BASEPRI, r3
   10c04:	f3bf 8f6f 	isb	sy
   10c08:	f3bf 8f4f 	dsb	sy
   10c0c:	b662      	cpsie	i
   10c0e:	603b      	str	r3, [r7, #0]
   10c10:	e7fe      	b.n	10c10 <xTaskIncrementTick+0x48>
   10c12:	4b41      	ldr	r3, [pc, #260]	; (10d18 <xTaskIncrementTick+0x150>)
   10c14:	681b      	ldr	r3, [r3, #0]
   10c16:	60fb      	str	r3, [r7, #12]
   10c18:	4b40      	ldr	r3, [pc, #256]	; (10d1c <xTaskIncrementTick+0x154>)
   10c1a:	681b      	ldr	r3, [r3, #0]
   10c1c:	4a3e      	ldr	r2, [pc, #248]	; (10d18 <xTaskIncrementTick+0x150>)
   10c1e:	6013      	str	r3, [r2, #0]
   10c20:	4a3e      	ldr	r2, [pc, #248]	; (10d1c <xTaskIncrementTick+0x154>)
   10c22:	68fb      	ldr	r3, [r7, #12]
   10c24:	6013      	str	r3, [r2, #0]
   10c26:	4b3e      	ldr	r3, [pc, #248]	; (10d20 <xTaskIncrementTick+0x158>)
   10c28:	681b      	ldr	r3, [r3, #0]
   10c2a:	3301      	adds	r3, #1
   10c2c:	4a3c      	ldr	r2, [pc, #240]	; (10d20 <xTaskIncrementTick+0x158>)
   10c2e:	6013      	str	r3, [r2, #0]
   10c30:	f000 f96e 	bl	10f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   10c34:	4b3b      	ldr	r3, [pc, #236]	; (10d24 <xTaskIncrementTick+0x15c>)
   10c36:	681b      	ldr	r3, [r3, #0]
   10c38:	693a      	ldr	r2, [r7, #16]
   10c3a:	429a      	cmp	r2, r3
   10c3c:	d348      	bcc.n	10cd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   10c3e:	4b36      	ldr	r3, [pc, #216]	; (10d18 <xTaskIncrementTick+0x150>)
   10c40:	681b      	ldr	r3, [r3, #0]
   10c42:	681b      	ldr	r3, [r3, #0]
   10c44:	2b00      	cmp	r3, #0
   10c46:	d104      	bne.n	10c52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   10c48:	4b36      	ldr	r3, [pc, #216]	; (10d24 <xTaskIncrementTick+0x15c>)
   10c4a:	f04f 32ff 	mov.w	r2, #4294967295
   10c4e:	601a      	str	r2, [r3, #0]
					break;
   10c50:	e03e      	b.n	10cd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   10c52:	4b31      	ldr	r3, [pc, #196]	; (10d18 <xTaskIncrementTick+0x150>)
   10c54:	681b      	ldr	r3, [r3, #0]
   10c56:	68db      	ldr	r3, [r3, #12]
   10c58:	68db      	ldr	r3, [r3, #12]
   10c5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   10c5c:	68bb      	ldr	r3, [r7, #8]
   10c5e:	685b      	ldr	r3, [r3, #4]
   10c60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   10c62:	693a      	ldr	r2, [r7, #16]
   10c64:	687b      	ldr	r3, [r7, #4]
   10c66:	429a      	cmp	r2, r3
   10c68:	d203      	bcs.n	10c72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   10c6a:	4a2e      	ldr	r2, [pc, #184]	; (10d24 <xTaskIncrementTick+0x15c>)
   10c6c:	687b      	ldr	r3, [r7, #4]
   10c6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   10c70:	e02e      	b.n	10cd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   10c72:	68bb      	ldr	r3, [r7, #8]
   10c74:	3304      	adds	r3, #4
   10c76:	4618      	mov	r0, r3
   10c78:	f7ff fc8f 	bl	1059a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   10c7c:	68bb      	ldr	r3, [r7, #8]
   10c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c80:	2b00      	cmp	r3, #0
   10c82:	d004      	beq.n	10c8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   10c84:	68bb      	ldr	r3, [r7, #8]
   10c86:	3318      	adds	r3, #24
   10c88:	4618      	mov	r0, r3
   10c8a:	f7ff fc86 	bl	1059a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   10c8e:	68bb      	ldr	r3, [r7, #8]
   10c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10c92:	2201      	movs	r2, #1
   10c94:	409a      	lsls	r2, r3
   10c96:	4b24      	ldr	r3, [pc, #144]	; (10d28 <xTaskIncrementTick+0x160>)
   10c98:	681b      	ldr	r3, [r3, #0]
   10c9a:	4313      	orrs	r3, r2
   10c9c:	4a22      	ldr	r2, [pc, #136]	; (10d28 <xTaskIncrementTick+0x160>)
   10c9e:	6013      	str	r3, [r2, #0]
   10ca0:	68bb      	ldr	r3, [r7, #8]
   10ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10ca4:	4613      	mov	r3, r2
   10ca6:	009b      	lsls	r3, r3, #2
   10ca8:	4413      	add	r3, r2
   10caa:	009b      	lsls	r3, r3, #2
   10cac:	4a1f      	ldr	r2, [pc, #124]	; (10d2c <xTaskIncrementTick+0x164>)
   10cae:	441a      	add	r2, r3
   10cb0:	68bb      	ldr	r3, [r7, #8]
   10cb2:	3304      	adds	r3, #4
   10cb4:	4619      	mov	r1, r3
   10cb6:	4610      	mov	r0, r2
   10cb8:	f7ff fc12 	bl	104e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   10cbc:	68bb      	ldr	r3, [r7, #8]
   10cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10cc0:	4b1b      	ldr	r3, [pc, #108]	; (10d30 <xTaskIncrementTick+0x168>)
   10cc2:	681b      	ldr	r3, [r3, #0]
   10cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10cc6:	429a      	cmp	r2, r3
   10cc8:	d3b9      	bcc.n	10c3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
   10cca:	2301      	movs	r3, #1
   10ccc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   10cce:	e7b6      	b.n	10c3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   10cd0:	4b17      	ldr	r3, [pc, #92]	; (10d30 <xTaskIncrementTick+0x168>)
   10cd2:	681b      	ldr	r3, [r3, #0]
   10cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10cd6:	4915      	ldr	r1, [pc, #84]	; (10d2c <xTaskIncrementTick+0x164>)
   10cd8:	4613      	mov	r3, r2
   10cda:	009b      	lsls	r3, r3, #2
   10cdc:	4413      	add	r3, r2
   10cde:	009b      	lsls	r3, r3, #2
   10ce0:	440b      	add	r3, r1
   10ce2:	681b      	ldr	r3, [r3, #0]
   10ce4:	2b01      	cmp	r3, #1
   10ce6:	d907      	bls.n	10cf8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
   10ce8:	2301      	movs	r3, #1
   10cea:	617b      	str	r3, [r7, #20]
   10cec:	e004      	b.n	10cf8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   10cee:	4b11      	ldr	r3, [pc, #68]	; (10d34 <xTaskIncrementTick+0x16c>)
   10cf0:	681b      	ldr	r3, [r3, #0]
   10cf2:	3301      	adds	r3, #1
   10cf4:	4a0f      	ldr	r2, [pc, #60]	; (10d34 <xTaskIncrementTick+0x16c>)
   10cf6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   10cf8:	4b0f      	ldr	r3, [pc, #60]	; (10d38 <xTaskIncrementTick+0x170>)
   10cfa:	681b      	ldr	r3, [r3, #0]
   10cfc:	2b00      	cmp	r3, #0
   10cfe:	d001      	beq.n	10d04 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
   10d00:	2301      	movs	r3, #1
   10d02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   10d04:	697b      	ldr	r3, [r7, #20]
}
   10d06:	4618      	mov	r0, r3
   10d08:	3718      	adds	r7, #24
   10d0a:	46bd      	mov	sp, r7
   10d0c:	bd80      	pop	{r7, pc}
   10d0e:	bf00      	nop
   10d10:	0002a398 	.word	0x0002a398
   10d14:	0002a374 	.word	0x0002a374
   10d18:	0002a328 	.word	0x0002a328
   10d1c:	0002a32c 	.word	0x0002a32c
   10d20:	0002a388 	.word	0x0002a388
   10d24:	0002a390 	.word	0x0002a390
   10d28:	0002a378 	.word	0x0002a378
   10d2c:	0002a274 	.word	0x0002a274
   10d30:	0002a270 	.word	0x0002a270
   10d34:	0002a380 	.word	0x0002a380
   10d38:	0002a384 	.word	0x0002a384

00010d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   10d3c:	b480      	push	{r7}
   10d3e:	b087      	sub	sp, #28
   10d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   10d42:	4b27      	ldr	r3, [pc, #156]	; (10de0 <vTaskSwitchContext+0xa4>)
   10d44:	681b      	ldr	r3, [r3, #0]
   10d46:	2b00      	cmp	r3, #0
   10d48:	d003      	beq.n	10d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   10d4a:	4b26      	ldr	r3, [pc, #152]	; (10de4 <vTaskSwitchContext+0xa8>)
   10d4c:	2201      	movs	r2, #1
   10d4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   10d50:	e040      	b.n	10dd4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
   10d52:	4b24      	ldr	r3, [pc, #144]	; (10de4 <vTaskSwitchContext+0xa8>)
   10d54:	2200      	movs	r2, #0
   10d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   10d58:	4b23      	ldr	r3, [pc, #140]	; (10de8 <vTaskSwitchContext+0xac>)
   10d5a:	681b      	ldr	r3, [r3, #0]
   10d5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   10d5e:	68fb      	ldr	r3, [r7, #12]
   10d60:	fab3 f383 	clz	r3, r3
   10d64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
   10d66:	7afb      	ldrb	r3, [r7, #11]
   10d68:	f1c3 031f 	rsb	r3, r3, #31
   10d6c:	617b      	str	r3, [r7, #20]
   10d6e:	491f      	ldr	r1, [pc, #124]	; (10dec <vTaskSwitchContext+0xb0>)
   10d70:	697a      	ldr	r2, [r7, #20]
   10d72:	4613      	mov	r3, r2
   10d74:	009b      	lsls	r3, r3, #2
   10d76:	4413      	add	r3, r2
   10d78:	009b      	lsls	r3, r3, #2
   10d7a:	440b      	add	r3, r1
   10d7c:	681b      	ldr	r3, [r3, #0]
   10d7e:	2b00      	cmp	r3, #0
   10d80:	d10b      	bne.n	10d9a <vTaskSwitchContext+0x5e>
	__asm volatile
   10d82:	f04f 0350 	mov.w	r3, #80	; 0x50
   10d86:	b672      	cpsid	i
   10d88:	f383 8811 	msr	BASEPRI, r3
   10d8c:	f3bf 8f6f 	isb	sy
   10d90:	f3bf 8f4f 	dsb	sy
   10d94:	b662      	cpsie	i
   10d96:	607b      	str	r3, [r7, #4]
   10d98:	e7fe      	b.n	10d98 <vTaskSwitchContext+0x5c>
   10d9a:	697a      	ldr	r2, [r7, #20]
   10d9c:	4613      	mov	r3, r2
   10d9e:	009b      	lsls	r3, r3, #2
   10da0:	4413      	add	r3, r2
   10da2:	009b      	lsls	r3, r3, #2
   10da4:	4a11      	ldr	r2, [pc, #68]	; (10dec <vTaskSwitchContext+0xb0>)
   10da6:	4413      	add	r3, r2
   10da8:	613b      	str	r3, [r7, #16]
   10daa:	693b      	ldr	r3, [r7, #16]
   10dac:	685b      	ldr	r3, [r3, #4]
   10dae:	685a      	ldr	r2, [r3, #4]
   10db0:	693b      	ldr	r3, [r7, #16]
   10db2:	605a      	str	r2, [r3, #4]
   10db4:	693b      	ldr	r3, [r7, #16]
   10db6:	685a      	ldr	r2, [r3, #4]
   10db8:	693b      	ldr	r3, [r7, #16]
   10dba:	3308      	adds	r3, #8
   10dbc:	429a      	cmp	r2, r3
   10dbe:	d104      	bne.n	10dca <vTaskSwitchContext+0x8e>
   10dc0:	693b      	ldr	r3, [r7, #16]
   10dc2:	685b      	ldr	r3, [r3, #4]
   10dc4:	685a      	ldr	r2, [r3, #4]
   10dc6:	693b      	ldr	r3, [r7, #16]
   10dc8:	605a      	str	r2, [r3, #4]
   10dca:	693b      	ldr	r3, [r7, #16]
   10dcc:	685b      	ldr	r3, [r3, #4]
   10dce:	68db      	ldr	r3, [r3, #12]
   10dd0:	4a07      	ldr	r2, [pc, #28]	; (10df0 <vTaskSwitchContext+0xb4>)
   10dd2:	6013      	str	r3, [r2, #0]
}
   10dd4:	bf00      	nop
   10dd6:	371c      	adds	r7, #28
   10dd8:	46bd      	mov	sp, r7
   10dda:	f85d 7b04 	ldr.w	r7, [sp], #4
   10dde:	4770      	bx	lr
   10de0:	0002a398 	.word	0x0002a398
   10de4:	0002a384 	.word	0x0002a384
   10de8:	0002a378 	.word	0x0002a378
   10dec:	0002a274 	.word	0x0002a274
   10df0:	0002a270 	.word	0x0002a270

00010df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   10df4:	b580      	push	{r7, lr}
   10df6:	b082      	sub	sp, #8
   10df8:	af00      	add	r7, sp, #0
   10dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   10dfc:	f000 f852 	bl	10ea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   10e00:	4b06      	ldr	r3, [pc, #24]	; (10e1c <prvIdleTask+0x28>)
   10e02:	681b      	ldr	r3, [r3, #0]
   10e04:	2b01      	cmp	r3, #1
   10e06:	d9f9      	bls.n	10dfc <prvIdleTask+0x8>
			{
				taskYIELD();
   10e08:	4b05      	ldr	r3, [pc, #20]	; (10e20 <prvIdleTask+0x2c>)
   10e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10e0e:	601a      	str	r2, [r3, #0]
   10e10:	f3bf 8f4f 	dsb	sy
   10e14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
   10e18:	e7f0      	b.n	10dfc <prvIdleTask+0x8>
   10e1a:	bf00      	nop
   10e1c:	0002a274 	.word	0x0002a274
   10e20:	e000ed04 	.word	0xe000ed04

00010e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   10e24:	b580      	push	{r7, lr}
   10e26:	b082      	sub	sp, #8
   10e28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   10e2a:	2300      	movs	r3, #0
   10e2c:	607b      	str	r3, [r7, #4]
   10e2e:	e00c      	b.n	10e4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   10e30:	687a      	ldr	r2, [r7, #4]
   10e32:	4613      	mov	r3, r2
   10e34:	009b      	lsls	r3, r3, #2
   10e36:	4413      	add	r3, r2
   10e38:	009b      	lsls	r3, r3, #2
   10e3a:	4a12      	ldr	r2, [pc, #72]	; (10e84 <prvInitialiseTaskLists+0x60>)
   10e3c:	4413      	add	r3, r2
   10e3e:	4618      	mov	r0, r3
   10e40:	f7ff fb21 	bl	10486 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   10e44:	687b      	ldr	r3, [r7, #4]
   10e46:	3301      	adds	r3, #1
   10e48:	607b      	str	r3, [r7, #4]
   10e4a:	687b      	ldr	r3, [r7, #4]
   10e4c:	2b06      	cmp	r3, #6
   10e4e:	d9ef      	bls.n	10e30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   10e50:	480d      	ldr	r0, [pc, #52]	; (10e88 <prvInitialiseTaskLists+0x64>)
   10e52:	f7ff fb18 	bl	10486 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   10e56:	480d      	ldr	r0, [pc, #52]	; (10e8c <prvInitialiseTaskLists+0x68>)
   10e58:	f7ff fb15 	bl	10486 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   10e5c:	480c      	ldr	r0, [pc, #48]	; (10e90 <prvInitialiseTaskLists+0x6c>)
   10e5e:	f7ff fb12 	bl	10486 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   10e62:	480c      	ldr	r0, [pc, #48]	; (10e94 <prvInitialiseTaskLists+0x70>)
   10e64:	f7ff fb0f 	bl	10486 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   10e68:	480b      	ldr	r0, [pc, #44]	; (10e98 <prvInitialiseTaskLists+0x74>)
   10e6a:	f7ff fb0c 	bl	10486 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   10e6e:	4b0b      	ldr	r3, [pc, #44]	; (10e9c <prvInitialiseTaskLists+0x78>)
   10e70:	4a05      	ldr	r2, [pc, #20]	; (10e88 <prvInitialiseTaskLists+0x64>)
   10e72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   10e74:	4b0a      	ldr	r3, [pc, #40]	; (10ea0 <prvInitialiseTaskLists+0x7c>)
   10e76:	4a05      	ldr	r2, [pc, #20]	; (10e8c <prvInitialiseTaskLists+0x68>)
   10e78:	601a      	str	r2, [r3, #0]
}
   10e7a:	bf00      	nop
   10e7c:	3708      	adds	r7, #8
   10e7e:	46bd      	mov	sp, r7
   10e80:	bd80      	pop	{r7, pc}
   10e82:	bf00      	nop
   10e84:	0002a274 	.word	0x0002a274
   10e88:	0002a300 	.word	0x0002a300
   10e8c:	0002a314 	.word	0x0002a314
   10e90:	0002a330 	.word	0x0002a330
   10e94:	0002a344 	.word	0x0002a344
   10e98:	0002a35c 	.word	0x0002a35c
   10e9c:	0002a328 	.word	0x0002a328
   10ea0:	0002a32c 	.word	0x0002a32c

00010ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   10ea4:	b580      	push	{r7, lr}
   10ea6:	b082      	sub	sp, #8
   10ea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   10eaa:	e019      	b.n	10ee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
   10eac:	f000 f9a8 	bl	11200 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   10eb0:	4b0f      	ldr	r3, [pc, #60]	; (10ef0 <prvCheckTasksWaitingTermination+0x4c>)
   10eb2:	68db      	ldr	r3, [r3, #12]
   10eb4:	68db      	ldr	r3, [r3, #12]
   10eb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   10eb8:	687b      	ldr	r3, [r7, #4]
   10eba:	3304      	adds	r3, #4
   10ebc:	4618      	mov	r0, r3
   10ebe:	f7ff fb6c 	bl	1059a <uxListRemove>
				--uxCurrentNumberOfTasks;
   10ec2:	4b0c      	ldr	r3, [pc, #48]	; (10ef4 <prvCheckTasksWaitingTermination+0x50>)
   10ec4:	681b      	ldr	r3, [r3, #0]
   10ec6:	3b01      	subs	r3, #1
   10ec8:	4a0a      	ldr	r2, [pc, #40]	; (10ef4 <prvCheckTasksWaitingTermination+0x50>)
   10eca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   10ecc:	4b0a      	ldr	r3, [pc, #40]	; (10ef8 <prvCheckTasksWaitingTermination+0x54>)
   10ece:	681b      	ldr	r3, [r3, #0]
   10ed0:	3b01      	subs	r3, #1
   10ed2:	4a09      	ldr	r2, [pc, #36]	; (10ef8 <prvCheckTasksWaitingTermination+0x54>)
   10ed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
   10ed6:	f000 f9c5 	bl	11264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
   10eda:	6878      	ldr	r0, [r7, #4]
   10edc:	f000 f80e 	bl	10efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   10ee0:	4b05      	ldr	r3, [pc, #20]	; (10ef8 <prvCheckTasksWaitingTermination+0x54>)
   10ee2:	681b      	ldr	r3, [r3, #0]
   10ee4:	2b00      	cmp	r3, #0
   10ee6:	d1e1      	bne.n	10eac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   10ee8:	bf00      	nop
   10eea:	3708      	adds	r7, #8
   10eec:	46bd      	mov	sp, r7
   10eee:	bd80      	pop	{r7, pc}
   10ef0:	0002a344 	.word	0x0002a344
   10ef4:	0002a370 	.word	0x0002a370
   10ef8:	0002a358 	.word	0x0002a358

00010efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   10efc:	b480      	push	{r7}
   10efe:	b083      	sub	sp, #12
   10f00:	af00      	add	r7, sp, #0
   10f02:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   10f04:	bf00      	nop
   10f06:	370c      	adds	r7, #12
   10f08:	46bd      	mov	sp, r7
   10f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f0e:	4770      	bx	lr

00010f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   10f10:	b480      	push	{r7}
   10f12:	b083      	sub	sp, #12
   10f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   10f16:	4b0c      	ldr	r3, [pc, #48]	; (10f48 <prvResetNextTaskUnblockTime+0x38>)
   10f18:	681b      	ldr	r3, [r3, #0]
   10f1a:	681b      	ldr	r3, [r3, #0]
   10f1c:	2b00      	cmp	r3, #0
   10f1e:	d104      	bne.n	10f2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   10f20:	4b0a      	ldr	r3, [pc, #40]	; (10f4c <prvResetNextTaskUnblockTime+0x3c>)
   10f22:	f04f 32ff 	mov.w	r2, #4294967295
   10f26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   10f28:	e008      	b.n	10f3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   10f2a:	4b07      	ldr	r3, [pc, #28]	; (10f48 <prvResetNextTaskUnblockTime+0x38>)
   10f2c:	681b      	ldr	r3, [r3, #0]
   10f2e:	68db      	ldr	r3, [r3, #12]
   10f30:	68db      	ldr	r3, [r3, #12]
   10f32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   10f34:	687b      	ldr	r3, [r7, #4]
   10f36:	685b      	ldr	r3, [r3, #4]
   10f38:	4a04      	ldr	r2, [pc, #16]	; (10f4c <prvResetNextTaskUnblockTime+0x3c>)
   10f3a:	6013      	str	r3, [r2, #0]
}
   10f3c:	bf00      	nop
   10f3e:	370c      	adds	r7, #12
   10f40:	46bd      	mov	sp, r7
   10f42:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f46:	4770      	bx	lr
   10f48:	0002a328 	.word	0x0002a328
   10f4c:	0002a390 	.word	0x0002a390

00010f50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   10f50:	b580      	push	{r7, lr}
   10f52:	b084      	sub	sp, #16
   10f54:	af00      	add	r7, sp, #0
   10f56:	6078      	str	r0, [r7, #4]
   10f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   10f5a:	4b29      	ldr	r3, [pc, #164]	; (11000 <prvAddCurrentTaskToDelayedList+0xb0>)
   10f5c:	681b      	ldr	r3, [r3, #0]
   10f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   10f60:	4b28      	ldr	r3, [pc, #160]	; (11004 <prvAddCurrentTaskToDelayedList+0xb4>)
   10f62:	681b      	ldr	r3, [r3, #0]
   10f64:	3304      	adds	r3, #4
   10f66:	4618      	mov	r0, r3
   10f68:	f7ff fb17 	bl	1059a <uxListRemove>
   10f6c:	4603      	mov	r3, r0
   10f6e:	2b00      	cmp	r3, #0
   10f70:	d10b      	bne.n	10f8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
   10f72:	4b24      	ldr	r3, [pc, #144]	; (11004 <prvAddCurrentTaskToDelayedList+0xb4>)
   10f74:	681b      	ldr	r3, [r3, #0]
   10f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10f78:	2201      	movs	r2, #1
   10f7a:	fa02 f303 	lsl.w	r3, r2, r3
   10f7e:	43da      	mvns	r2, r3
   10f80:	4b21      	ldr	r3, [pc, #132]	; (11008 <prvAddCurrentTaskToDelayedList+0xb8>)
   10f82:	681b      	ldr	r3, [r3, #0]
   10f84:	4013      	ands	r3, r2
   10f86:	4a20      	ldr	r2, [pc, #128]	; (11008 <prvAddCurrentTaskToDelayedList+0xb8>)
   10f88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   10f8a:	687b      	ldr	r3, [r7, #4]
   10f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
   10f90:	d10a      	bne.n	10fa8 <prvAddCurrentTaskToDelayedList+0x58>
   10f92:	683b      	ldr	r3, [r7, #0]
   10f94:	2b00      	cmp	r3, #0
   10f96:	d007      	beq.n	10fa8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   10f98:	4b1a      	ldr	r3, [pc, #104]	; (11004 <prvAddCurrentTaskToDelayedList+0xb4>)
   10f9a:	681b      	ldr	r3, [r3, #0]
   10f9c:	3304      	adds	r3, #4
   10f9e:	4619      	mov	r1, r3
   10fa0:	481a      	ldr	r0, [pc, #104]	; (1100c <prvAddCurrentTaskToDelayedList+0xbc>)
   10fa2:	f7ff fa9d 	bl	104e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   10fa6:	e026      	b.n	10ff6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
   10fa8:	68fa      	ldr	r2, [r7, #12]
   10faa:	687b      	ldr	r3, [r7, #4]
   10fac:	4413      	add	r3, r2
   10fae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   10fb0:	4b14      	ldr	r3, [pc, #80]	; (11004 <prvAddCurrentTaskToDelayedList+0xb4>)
   10fb2:	681b      	ldr	r3, [r3, #0]
   10fb4:	68ba      	ldr	r2, [r7, #8]
   10fb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   10fb8:	68ba      	ldr	r2, [r7, #8]
   10fba:	68fb      	ldr	r3, [r7, #12]
   10fbc:	429a      	cmp	r2, r3
   10fbe:	d209      	bcs.n	10fd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   10fc0:	4b13      	ldr	r3, [pc, #76]	; (11010 <prvAddCurrentTaskToDelayedList+0xc0>)
   10fc2:	681a      	ldr	r2, [r3, #0]
   10fc4:	4b0f      	ldr	r3, [pc, #60]	; (11004 <prvAddCurrentTaskToDelayedList+0xb4>)
   10fc6:	681b      	ldr	r3, [r3, #0]
   10fc8:	3304      	adds	r3, #4
   10fca:	4619      	mov	r1, r3
   10fcc:	4610      	mov	r0, r2
   10fce:	f7ff faab 	bl	10528 <vListInsert>
}
   10fd2:	e010      	b.n	10ff6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   10fd4:	4b0f      	ldr	r3, [pc, #60]	; (11014 <prvAddCurrentTaskToDelayedList+0xc4>)
   10fd6:	681a      	ldr	r2, [r3, #0]
   10fd8:	4b0a      	ldr	r3, [pc, #40]	; (11004 <prvAddCurrentTaskToDelayedList+0xb4>)
   10fda:	681b      	ldr	r3, [r3, #0]
   10fdc:	3304      	adds	r3, #4
   10fde:	4619      	mov	r1, r3
   10fe0:	4610      	mov	r0, r2
   10fe2:	f7ff faa1 	bl	10528 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   10fe6:	4b0c      	ldr	r3, [pc, #48]	; (11018 <prvAddCurrentTaskToDelayedList+0xc8>)
   10fe8:	681b      	ldr	r3, [r3, #0]
   10fea:	68ba      	ldr	r2, [r7, #8]
   10fec:	429a      	cmp	r2, r3
   10fee:	d202      	bcs.n	10ff6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
   10ff0:	4a09      	ldr	r2, [pc, #36]	; (11018 <prvAddCurrentTaskToDelayedList+0xc8>)
   10ff2:	68bb      	ldr	r3, [r7, #8]
   10ff4:	6013      	str	r3, [r2, #0]
}
   10ff6:	bf00      	nop
   10ff8:	3710      	adds	r7, #16
   10ffa:	46bd      	mov	sp, r7
   10ffc:	bd80      	pop	{r7, pc}
   10ffe:	bf00      	nop
   11000:	0002a374 	.word	0x0002a374
   11004:	0002a270 	.word	0x0002a270
   11008:	0002a378 	.word	0x0002a378
   1100c:	0002a35c 	.word	0x0002a35c
   11010:	0002a32c 	.word	0x0002a32c
   11014:	0002a328 	.word	0x0002a328
   11018:	0002a390 	.word	0x0002a390

0001101c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1101c:	b480      	push	{r7}
   1101e:	b085      	sub	sp, #20
   11020:	af00      	add	r7, sp, #0
   11022:	60f8      	str	r0, [r7, #12]
   11024:	60b9      	str	r1, [r7, #8]
   11026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   11028:	68fb      	ldr	r3, [r7, #12]
   1102a:	3b04      	subs	r3, #4
   1102c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1102e:	68fb      	ldr	r3, [r7, #12]
   11030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   11034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   11036:	68fb      	ldr	r3, [r7, #12]
   11038:	3b04      	subs	r3, #4
   1103a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   1103c:	68bb      	ldr	r3, [r7, #8]
   1103e:	f023 0201 	bic.w	r2, r3, #1
   11042:	68fb      	ldr	r3, [r7, #12]
   11044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   11046:	68fb      	ldr	r3, [r7, #12]
   11048:	3b04      	subs	r3, #4
   1104a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1104c:	4a0c      	ldr	r2, [pc, #48]	; (11080 <pxPortInitialiseStack+0x64>)
   1104e:	68fb      	ldr	r3, [r7, #12]
   11050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   11052:	68fb      	ldr	r3, [r7, #12]
   11054:	3b14      	subs	r3, #20
   11056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   11058:	687a      	ldr	r2, [r7, #4]
   1105a:	68fb      	ldr	r3, [r7, #12]
   1105c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   1105e:	68fb      	ldr	r3, [r7, #12]
   11060:	3b04      	subs	r3, #4
   11062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   11064:	68fb      	ldr	r3, [r7, #12]
   11066:	f06f 0202 	mvn.w	r2, #2
   1106a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   1106c:	68fb      	ldr	r3, [r7, #12]
   1106e:	3b20      	subs	r3, #32
   11070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   11072:	68fb      	ldr	r3, [r7, #12]
}
   11074:	4618      	mov	r0, r3
   11076:	3714      	adds	r7, #20
   11078:	46bd      	mov	sp, r7
   1107a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1107e:	4770      	bx	lr
   11080:	00011085 	.word	0x00011085

00011084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   11084:	b480      	push	{r7}
   11086:	b085      	sub	sp, #20
   11088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
   1108a:	2300      	movs	r3, #0
   1108c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1108e:	4b13      	ldr	r3, [pc, #76]	; (110dc <prvTaskExitError+0x58>)
   11090:	681b      	ldr	r3, [r3, #0]
   11092:	f1b3 3fff 	cmp.w	r3, #4294967295
   11096:	d00b      	beq.n	110b0 <prvTaskExitError+0x2c>
   11098:	f04f 0350 	mov.w	r3, #80	; 0x50
   1109c:	b672      	cpsid	i
   1109e:	f383 8811 	msr	BASEPRI, r3
   110a2:	f3bf 8f6f 	isb	sy
   110a6:	f3bf 8f4f 	dsb	sy
   110aa:	b662      	cpsie	i
   110ac:	60fb      	str	r3, [r7, #12]
   110ae:	e7fe      	b.n	110ae <prvTaskExitError+0x2a>
   110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
   110b4:	b672      	cpsid	i
   110b6:	f383 8811 	msr	BASEPRI, r3
   110ba:	f3bf 8f6f 	isb	sy
   110be:	f3bf 8f4f 	dsb	sy
   110c2:	b662      	cpsie	i
   110c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   110c6:	bf00      	nop
   110c8:	687b      	ldr	r3, [r7, #4]
   110ca:	2b00      	cmp	r3, #0
   110cc:	d0fc      	beq.n	110c8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   110ce:	bf00      	nop
   110d0:	3714      	adds	r7, #20
   110d2:	46bd      	mov	sp, r7
   110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   110d8:	4770      	bx	lr
   110da:	bf00      	nop
   110dc:	00029adc 	.word	0x00029adc

000110e0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   110e0:	4808      	ldr	r0, [pc, #32]	; (11104 <prvPortStartFirstTask+0x24>)
   110e2:	6800      	ldr	r0, [r0, #0]
   110e4:	6800      	ldr	r0, [r0, #0]
   110e6:	f380 8808 	msr	MSP, r0
   110ea:	f04f 0000 	mov.w	r0, #0
   110ee:	f380 8814 	msr	CONTROL, r0
   110f2:	b662      	cpsie	i
   110f4:	b661      	cpsie	f
   110f6:	f3bf 8f4f 	dsb	sy
   110fa:	f3bf 8f6f 	isb	sy
   110fe:	df00      	svc	0
   11100:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   11102:	bf00      	nop
   11104:	e000ed08 	.word	0xe000ed08

00011108 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   11108:	b580      	push	{r7, lr}
   1110a:	b084      	sub	sp, #16
   1110c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   1110e:	4b36      	ldr	r3, [pc, #216]	; (111e8 <xPortStartScheduler+0xe0>)
   11110:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   11112:	68fb      	ldr	r3, [r7, #12]
   11114:	781b      	ldrb	r3, [r3, #0]
   11116:	b2db      	uxtb	r3, r3
   11118:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   1111a:	68fb      	ldr	r3, [r7, #12]
   1111c:	22ff      	movs	r2, #255	; 0xff
   1111e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   11120:	68fb      	ldr	r3, [r7, #12]
   11122:	781b      	ldrb	r3, [r3, #0]
   11124:	b2db      	uxtb	r3, r3
   11126:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   11128:	78fb      	ldrb	r3, [r7, #3]
   1112a:	b2db      	uxtb	r3, r3
   1112c:	f003 0350 	and.w	r3, r3, #80	; 0x50
   11130:	b2da      	uxtb	r2, r3
   11132:	4b2e      	ldr	r3, [pc, #184]	; (111ec <xPortStartScheduler+0xe4>)
   11134:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   11136:	4b2e      	ldr	r3, [pc, #184]	; (111f0 <xPortStartScheduler+0xe8>)
   11138:	2207      	movs	r2, #7
   1113a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1113c:	e009      	b.n	11152 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   1113e:	4b2c      	ldr	r3, [pc, #176]	; (111f0 <xPortStartScheduler+0xe8>)
   11140:	681b      	ldr	r3, [r3, #0]
   11142:	3b01      	subs	r3, #1
   11144:	4a2a      	ldr	r2, [pc, #168]	; (111f0 <xPortStartScheduler+0xe8>)
   11146:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   11148:	78fb      	ldrb	r3, [r7, #3]
   1114a:	b2db      	uxtb	r3, r3
   1114c:	005b      	lsls	r3, r3, #1
   1114e:	b2db      	uxtb	r3, r3
   11150:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   11152:	78fb      	ldrb	r3, [r7, #3]
   11154:	b2db      	uxtb	r3, r3
   11156:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1115a:	2b80      	cmp	r3, #128	; 0x80
   1115c:	d0ef      	beq.n	1113e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
   1115e:	4b24      	ldr	r3, [pc, #144]	; (111f0 <xPortStartScheduler+0xe8>)
   11160:	681b      	ldr	r3, [r3, #0]
   11162:	f1c3 0307 	rsb	r3, r3, #7
   11166:	2b04      	cmp	r3, #4
   11168:	d00b      	beq.n	11182 <xPortStartScheduler+0x7a>
   1116a:	f04f 0350 	mov.w	r3, #80	; 0x50
   1116e:	b672      	cpsid	i
   11170:	f383 8811 	msr	BASEPRI, r3
   11174:	f3bf 8f6f 	isb	sy
   11178:	f3bf 8f4f 	dsb	sy
   1117c:	b662      	cpsie	i
   1117e:	60bb      	str	r3, [r7, #8]
   11180:	e7fe      	b.n	11180 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   11182:	4b1b      	ldr	r3, [pc, #108]	; (111f0 <xPortStartScheduler+0xe8>)
   11184:	681b      	ldr	r3, [r3, #0]
   11186:	021b      	lsls	r3, r3, #8
   11188:	4a19      	ldr	r2, [pc, #100]	; (111f0 <xPortStartScheduler+0xe8>)
   1118a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1118c:	4b18      	ldr	r3, [pc, #96]	; (111f0 <xPortStartScheduler+0xe8>)
   1118e:	681b      	ldr	r3, [r3, #0]
   11190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   11194:	4a16      	ldr	r2, [pc, #88]	; (111f0 <xPortStartScheduler+0xe8>)
   11196:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   11198:	687b      	ldr	r3, [r7, #4]
   1119a:	b2da      	uxtb	r2, r3
   1119c:	68fb      	ldr	r3, [r7, #12]
   1119e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   111a0:	4b14      	ldr	r3, [pc, #80]	; (111f4 <xPortStartScheduler+0xec>)
   111a2:	681b      	ldr	r3, [r3, #0]
   111a4:	4a13      	ldr	r2, [pc, #76]	; (111f4 <xPortStartScheduler+0xec>)
   111a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   111aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   111ac:	4b11      	ldr	r3, [pc, #68]	; (111f4 <xPortStartScheduler+0xec>)
   111ae:	681b      	ldr	r3, [r3, #0]
   111b0:	4a10      	ldr	r2, [pc, #64]	; (111f4 <xPortStartScheduler+0xec>)
   111b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
   111b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   111b8:	f000 f87e 	bl	112b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   111bc:	4b0e      	ldr	r3, [pc, #56]	; (111f8 <xPortStartScheduler+0xf0>)
   111be:	2200      	movs	r2, #0
   111c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   111c2:	f000 f89d 	bl	11300 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   111c6:	4b0d      	ldr	r3, [pc, #52]	; (111fc <xPortStartScheduler+0xf4>)
   111c8:	681b      	ldr	r3, [r3, #0]
   111ca:	4a0c      	ldr	r2, [pc, #48]	; (111fc <xPortStartScheduler+0xf4>)
   111cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   111d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   111d2:	f7ff ff85 	bl	110e0 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   111d6:	f7ff fdb1 	bl	10d3c <vTaskSwitchContext>
	prvTaskExitError();
   111da:	f7ff ff53 	bl	11084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
   111de:	2300      	movs	r3, #0
}
   111e0:	4618      	mov	r0, r3
   111e2:	3710      	adds	r7, #16
   111e4:	46bd      	mov	sp, r7
   111e6:	bd80      	pop	{r7, pc}
   111e8:	e000e400 	.word	0xe000e400
   111ec:	0002a39c 	.word	0x0002a39c
   111f0:	0002a3a0 	.word	0x0002a3a0
   111f4:	e000ed20 	.word	0xe000ed20
   111f8:	00029adc 	.word	0x00029adc
   111fc:	e000ef34 	.word	0xe000ef34

00011200 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   11200:	b480      	push	{r7}
   11202:	b083      	sub	sp, #12
   11204:	af00      	add	r7, sp, #0
   11206:	f04f 0350 	mov.w	r3, #80	; 0x50
   1120a:	b672      	cpsid	i
   1120c:	f383 8811 	msr	BASEPRI, r3
   11210:	f3bf 8f6f 	isb	sy
   11214:	f3bf 8f4f 	dsb	sy
   11218:	b662      	cpsie	i
   1121a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   1121c:	4b0f      	ldr	r3, [pc, #60]	; (1125c <vPortEnterCritical+0x5c>)
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	3301      	adds	r3, #1
   11222:	4a0e      	ldr	r2, [pc, #56]	; (1125c <vPortEnterCritical+0x5c>)
   11224:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   11226:	4b0d      	ldr	r3, [pc, #52]	; (1125c <vPortEnterCritical+0x5c>)
   11228:	681b      	ldr	r3, [r3, #0]
   1122a:	2b01      	cmp	r3, #1
   1122c:	d110      	bne.n	11250 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   1122e:	4b0c      	ldr	r3, [pc, #48]	; (11260 <vPortEnterCritical+0x60>)
   11230:	681b      	ldr	r3, [r3, #0]
   11232:	b2db      	uxtb	r3, r3
   11234:	2b00      	cmp	r3, #0
   11236:	d00b      	beq.n	11250 <vPortEnterCritical+0x50>
   11238:	f04f 0350 	mov.w	r3, #80	; 0x50
   1123c:	b672      	cpsid	i
   1123e:	f383 8811 	msr	BASEPRI, r3
   11242:	f3bf 8f6f 	isb	sy
   11246:	f3bf 8f4f 	dsb	sy
   1124a:	b662      	cpsie	i
   1124c:	603b      	str	r3, [r7, #0]
   1124e:	e7fe      	b.n	1124e <vPortEnterCritical+0x4e>
	}
}
   11250:	bf00      	nop
   11252:	370c      	adds	r7, #12
   11254:	46bd      	mov	sp, r7
   11256:	f85d 7b04 	ldr.w	r7, [sp], #4
   1125a:	4770      	bx	lr
   1125c:	00029adc 	.word	0x00029adc
   11260:	e000ed04 	.word	0xe000ed04

00011264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   11264:	b480      	push	{r7}
   11266:	b083      	sub	sp, #12
   11268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1126a:	4b12      	ldr	r3, [pc, #72]	; (112b4 <vPortExitCritical+0x50>)
   1126c:	681b      	ldr	r3, [r3, #0]
   1126e:	2b00      	cmp	r3, #0
   11270:	d10b      	bne.n	1128a <vPortExitCritical+0x26>
   11272:	f04f 0350 	mov.w	r3, #80	; 0x50
   11276:	b672      	cpsid	i
   11278:	f383 8811 	msr	BASEPRI, r3
   1127c:	f3bf 8f6f 	isb	sy
   11280:	f3bf 8f4f 	dsb	sy
   11284:	b662      	cpsie	i
   11286:	607b      	str	r3, [r7, #4]
   11288:	e7fe      	b.n	11288 <vPortExitCritical+0x24>
	uxCriticalNesting--;
   1128a:	4b0a      	ldr	r3, [pc, #40]	; (112b4 <vPortExitCritical+0x50>)
   1128c:	681b      	ldr	r3, [r3, #0]
   1128e:	3b01      	subs	r3, #1
   11290:	4a08      	ldr	r2, [pc, #32]	; (112b4 <vPortExitCritical+0x50>)
   11292:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   11294:	4b07      	ldr	r3, [pc, #28]	; (112b4 <vPortExitCritical+0x50>)
   11296:	681b      	ldr	r3, [r3, #0]
   11298:	2b00      	cmp	r3, #0
   1129a:	d104      	bne.n	112a6 <vPortExitCritical+0x42>
   1129c:	2300      	movs	r3, #0
   1129e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   112a0:	683b      	ldr	r3, [r7, #0]
   112a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   112a6:	bf00      	nop
   112a8:	370c      	adds	r7, #12
   112aa:	46bd      	mov	sp, r7
   112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   112b0:	4770      	bx	lr
   112b2:	bf00      	nop
   112b4:	00029adc 	.word	0x00029adc

000112b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   112b8:	b480      	push	{r7}
   112ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
   112bc:	4b0b      	ldr	r3, [pc, #44]	; (112ec <vPortSetupTimerInterrupt+0x34>)
   112be:	2200      	movs	r2, #0
   112c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
   112c2:	4b0b      	ldr	r3, [pc, #44]	; (112f0 <vPortSetupTimerInterrupt+0x38>)
   112c4:	2200      	movs	r2, #0
   112c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   112c8:	4b0a      	ldr	r3, [pc, #40]	; (112f4 <vPortSetupTimerInterrupt+0x3c>)
   112ca:	681b      	ldr	r3, [r3, #0]
   112cc:	4a0a      	ldr	r2, [pc, #40]	; (112f8 <vPortSetupTimerInterrupt+0x40>)
   112ce:	fba2 2303 	umull	r2, r3, r2, r3
   112d2:	099b      	lsrs	r3, r3, #6
   112d4:	4a09      	ldr	r2, [pc, #36]	; (112fc <vPortSetupTimerInterrupt+0x44>)
   112d6:	3b01      	subs	r3, #1
   112d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   112da:	4b04      	ldr	r3, [pc, #16]	; (112ec <vPortSetupTimerInterrupt+0x34>)
   112dc:	2207      	movs	r2, #7
   112de:	601a      	str	r2, [r3, #0]
}
   112e0:	bf00      	nop
   112e2:	46bd      	mov	sp, r7
   112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   112e8:	4770      	bx	lr
   112ea:	bf00      	nop
   112ec:	e000e010 	.word	0xe000e010
   112f0:	e000e018 	.word	0xe000e018
   112f4:	00029ad0 	.word	0x00029ad0
   112f8:	10624dd3 	.word	0x10624dd3
   112fc:	e000e014 	.word	0xe000e014

00011300 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   11300:	f8df 000c 	ldr.w	r0, [pc, #12]	; 11310 <vPortEnableVFP+0x10>
   11304:	6801      	ldr	r1, [r0, #0]
   11306:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1130a:	6001      	str	r1, [r0, #0]
   1130c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   1130e:	bf00      	nop
   11310:	e000ed88 	.word	0xe000ed88

00011314 <canConfig>:
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
void canConfig(){
   11314:	b5b0      	push	{r4, r5, r7, lr}
   11316:	b08c      	sub	sp, #48	; 0x30
   11318:	af00      	add	r7, sp, #0
	canbus.CanHandle=hcan1;
   1131a:	4a39      	ldr	r2, [pc, #228]	; (11400 <canConfig+0xec>)
   1131c:	4b39      	ldr	r3, [pc, #228]	; (11404 <canConfig+0xf0>)
   1131e:	4614      	mov	r4, r2
   11320:	461d      	mov	r5, r3
   11322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1132a:	e895 0003 	ldmia.w	r5, {r0, r1}
   1132e:	e884 0003 	stmia.w	r4, {r0, r1}
	CAN_FilterTypeDef  sFilterConfig;
	/*##-2- Configure the CAN Filter ###########################################*/
	/*For single CAN instance(14 dedicated filter banks)*/
	for(int i=0;i<14;i++){
   11332:	2300      	movs	r3, #0
   11334:	62fb      	str	r3, [r7, #44]	; 0x2c
   11336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11338:	2b0d      	cmp	r3, #13
   1133a:	dc41      	bgt.n	113c0 <canConfig+0xac>
		sFilterConfig.FilterBank = i;
   1133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1133e:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
   11340:	2301      	movs	r3, #1
   11342:	61fb      	str	r3, [r7, #28]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
   11344:	2300      	movs	r3, #0
   11346:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterIdHigh = (uint16_t)((uint16_t)(4*i))<<5;
   11348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1134a:	b29b      	uxth	r3, r3
   1134c:	009b      	lsls	r3, r3, #2
   1134e:	b29b      	uxth	r3, r3
   11350:	015b      	lsls	r3, r3, #5
   11352:	607b      	str	r3, [r7, #4]
		sFilterConfig.FilterIdLow = (uint16_t)((uint16_t)(4*i+1))<<5;
   11354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11356:	b29b      	uxth	r3, r3
   11358:	009b      	lsls	r3, r3, #2
   1135a:	b29b      	uxth	r3, r3
   1135c:	3301      	adds	r3, #1
   1135e:	b29b      	uxth	r3, r3
   11360:	015b      	lsls	r3, r3, #5
   11362:	60bb      	str	r3, [r7, #8]
		sFilterConfig.FilterMaskIdHigh = (uint16_t)((uint16_t)(4*i+2))<<5;
   11364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11366:	b29b      	uxth	r3, r3
   11368:	009b      	lsls	r3, r3, #2
   1136a:	b29b      	uxth	r3, r3
   1136c:	3302      	adds	r3, #2
   1136e:	b29b      	uxth	r3, r3
   11370:	015b      	lsls	r3, r3, #5
   11372:	60fb      	str	r3, [r7, #12]
		sFilterConfig.FilterMaskIdLow = (uint16_t)((uint16_t)(4*i+3))<<5;
   11374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11376:	b29b      	uxth	r3, r3
   11378:	009b      	lsls	r3, r3, #2
   1137a:	b29b      	uxth	r3, r3
   1137c:	3303      	adds	r3, #3
   1137e:	b29b      	uxth	r3, r3
   11380:	015b      	lsls	r3, r3, #5
   11382:	613b      	str	r3, [r7, #16]
		sFilterConfig.FilterFIFOAssignment = i%2;//CAN_RX_FIFO0=0; CAN_RX_FIFO1=1
   11384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11386:	2b00      	cmp	r3, #0
   11388:	f003 0301 	and.w	r3, r3, #1
   1138c:	bfb8      	it	lt
   1138e:	425b      	neglt	r3, r3
   11390:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterActivation = ENABLE;
   11392:	2301      	movs	r3, #1
   11394:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.SlaveStartFilterBank = 14;
   11396:	230e      	movs	r3, #14
   11398:	62bb      	str	r3, [r7, #40]	; 0x28
//		sFilterConfig.FilterMaskIdLow = 0x0000;
//		sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
//		sFilterConfig.FilterActivation = ENABLE;
//		sFilterConfig.SlaveStartFilterBank = 14;

		if (HAL_CAN_ConfigFilter(&canbus.CanHandle, &sFilterConfig) != HAL_OK)
   1139a:	1d3b      	adds	r3, r7, #4
   1139c:	4619      	mov	r1, r3
   1139e:	4818      	ldr	r0, [pc, #96]	; (11400 <canConfig+0xec>)
   113a0:	f7fa fa04 	bl	b7ac <HAL_CAN_ConfigFilter>
   113a4:	4603      	mov	r3, r0
   113a6:	2b00      	cmp	r3, #0
   113a8:	bf14      	ite	ne
   113aa:	2301      	movne	r3, #1
   113ac:	2300      	moveq	r3, #0
   113ae:	b2db      	uxtb	r3, r3
   113b0:	2b00      	cmp	r3, #0
   113b2:	d001      	beq.n	113b8 <canConfig+0xa4>
		{
			/* Filter configuration Error */
			Error_Handler();
   113b4:	f7f7 fc7d 	bl	8cb2 <Error_Handler>
	for(int i=0;i<14;i++){
   113b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   113ba:	3301      	adds	r3, #1
   113bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   113be:	e7ba      	b.n	11336 <canConfig+0x22>
		}
	}


	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&canbus.CanHandle) != HAL_OK)
   113c0:	480f      	ldr	r0, [pc, #60]	; (11400 <canConfig+0xec>)
   113c2:	f7fa fadf 	bl	b984 <HAL_CAN_Start>
   113c6:	4603      	mov	r3, r0
   113c8:	2b00      	cmp	r3, #0
   113ca:	bf14      	ite	ne
   113cc:	2301      	movne	r3, #1
   113ce:	2300      	moveq	r3, #0
   113d0:	b2db      	uxtb	r3, r3
   113d2:	2b00      	cmp	r3, #0
   113d4:	d001      	beq.n	113da <canConfig+0xc6>
	{
		/* Start Error */
		Error_Handler();
   113d6:	f7f7 fc6c 	bl	8cb2 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&canbus.CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
   113da:	2112      	movs	r1, #18
   113dc:	4808      	ldr	r0, [pc, #32]	; (11400 <canConfig+0xec>)
   113de:	f7fa fbf0 	bl	bbc2 <HAL_CAN_ActivateNotification>
   113e2:	4603      	mov	r3, r0
   113e4:	2b00      	cmp	r3, #0
   113e6:	bf14      	ite	ne
   113e8:	2301      	movne	r3, #1
   113ea:	2300      	moveq	r3, #0
   113ec:	b2db      	uxtb	r3, r3
   113ee:	2b00      	cmp	r3, #0
   113f0:	d001      	beq.n	113f6 <canConfig+0xe2>
	{
		/* Notification Error */
		Error_Handler();
   113f2:	f7f7 fc5e 	bl	8cb2 <Error_Handler>
	}


}
   113f6:	bf00      	nop
   113f8:	3730      	adds	r7, #48	; 0x30
   113fa:	46bd      	mov	sp, r7
   113fc:	bdb0      	pop	{r4, r5, r7, pc}
   113fe:	bf00      	nop
   11400:	0002a3a4 	.word	0x0002a3a4
   11404:	0002b5f8 	.word	0x0002b5f8

00011408 <canSend>:
/*No need to use this right now, left for sending commands to nodes in the future*/
void canSend()
{
   11408:	b580      	push	{r7, lr}
   1140a:	af00      	add	r7, sp, #0
	/*##-Configure Transmission Packet #####################################*/
	canbus.TxHeader.StdId = 0x400;
   1140c:	4b14      	ldr	r3, [pc, #80]	; (11460 <canSend+0x58>)
   1140e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11412:	629a      	str	r2, [r3, #40]	; 0x28
	canbus.TxHeader.ExtId = 0x01;
   11414:	4b12      	ldr	r3, [pc, #72]	; (11460 <canSend+0x58>)
   11416:	2201      	movs	r2, #1
   11418:	62da      	str	r2, [r3, #44]	; 0x2c
	canbus.TxHeader.RTR = CAN_RTR_DATA;
   1141a:	4b11      	ldr	r3, [pc, #68]	; (11460 <canSend+0x58>)
   1141c:	2200      	movs	r2, #0
   1141e:	635a      	str	r2, [r3, #52]	; 0x34
	canbus.TxHeader.IDE = CAN_ID_STD;
   11420:	4b0f      	ldr	r3, [pc, #60]	; (11460 <canSend+0x58>)
   11422:	2200      	movs	r2, #0
   11424:	631a      	str	r2, [r3, #48]	; 0x30
	canbus.TxHeader.TransmitGlobalTime = DISABLE;
   11426:	4b0e      	ldr	r3, [pc, #56]	; (11460 <canSend+0x58>)
   11428:	2200      	movs	r2, #0
   1142a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	canbus.TxData=(uint8_t *)(softArm.canBusCommand);
   1142e:	4b0c      	ldr	r3, [pc, #48]	; (11460 <canSend+0x58>)
   11430:	4a0c      	ldr	r2, [pc, #48]	; (11464 <canSend+0x5c>)
   11432:	65da      	str	r2, [r3, #92]	; 0x5c
	canbus.TxHeader.DLC = sizeof(softArm.canBusCommand);
   11434:	4b0a      	ldr	r3, [pc, #40]	; (11460 <canSend+0x58>)
   11436:	2208      	movs	r2, #8
   11438:	639a      	str	r2, [r3, #56]	; 0x38

	/* Start the Transmission process */
	if (HAL_CAN_AddTxMessage(&canbus.CanHandle, &canbus.TxHeader, canbus.TxData, &canbus.TxMailbox) != HAL_OK)
   1143a:	4b09      	ldr	r3, [pc, #36]	; (11460 <canSend+0x58>)
   1143c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1143e:	4b0a      	ldr	r3, [pc, #40]	; (11468 <canSend+0x60>)
   11440:	490a      	ldr	r1, [pc, #40]	; (1146c <canSend+0x64>)
   11442:	4807      	ldr	r0, [pc, #28]	; (11460 <canSend+0x58>)
   11444:	f7fa fae2 	bl	ba0c <HAL_CAN_AddTxMessage>
   11448:	4603      	mov	r3, r0
   1144a:	2b00      	cmp	r3, #0
   1144c:	bf14      	ite	ne
   1144e:	2301      	movne	r3, #1
   11450:	2300      	moveq	r3, #0
   11452:	b2db      	uxtb	r3, r3
   11454:	2b00      	cmp	r3, #0
   11456:	d001      	beq.n	1145c <canSend+0x54>
	{
	  /* Transmission request Error */
	  Error_Handler();
   11458:	f7f7 fc2b 	bl	8cb2 <Error_Handler>
	}

	//printf("Send Can Tx %d\r\n",canbus.TxHeader.StdId);
}
   1145c:	bf00      	nop
   1145e:	bd80      	pop	{r7, pc}
   11460:	0002a3a4 	.word	0x0002a3a4
   11464:	0002af16 	.word	0x0002af16
   11468:	0002a408 	.word	0x0002a408
   1146c:	0002a3cc 	.word	0x0002a3cc

00011470 <_ZN8SOFT_ARMC1Ev>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM::SOFT_ARM()
   11470:	b5b0      	push	{r4, r5, r7, lr}
   11472:	b082      	sub	sp, #8
   11474:	af00      	add	r7, sp, #0
   11476:	6078      	str	r0, [r7, #4]
   11478:	687b      	ldr	r3, [r7, #4]
   1147a:	2408      	movs	r4, #8
   1147c:	461d      	mov	r5, r3
   1147e:	2c00      	cmp	r4, #0
   11480:	db06      	blt.n	11490 <_ZN8SOFT_ARMC1Ev+0x20>
   11482:	2106      	movs	r1, #6
   11484:	4628      	mov	r0, r5
   11486:	f000 f8f5 	bl	11674 <_ZN16SOFT_ARM_SEGMENTC1Ei>
   1148a:	35a4      	adds	r5, #164	; 0xa4
   1148c:	3c01      	subs	r4, #1
   1148e:	e7f6      	b.n	1147e <_ZN8SOFT_ARMC1Ev+0xe>
{

}
   11490:	687b      	ldr	r3, [r7, #4]
   11492:	4618      	mov	r0, r3
   11494:	3708      	adds	r7, #8
   11496:	46bd      	mov	sp, r7
   11498:	bdb0      	pop	{r4, r5, r7, pc}
	...

0001149c <_ZN8SOFT_ARM19setupChamberPWMPortEv>:


void SOFT_ARM::setupChamberPWMPort()
{
   1149c:	b580      	push	{r7, lr}
   1149e:	b088      	sub	sp, #32
   114a0:	af00      	add	r7, sp, #0
   114a2:	6078      	str	r0, [r7, #4]
	/*Every actuator is refered to with two numbers, segNum(0-8) and bellowNum(0-5)*/

	for(int j=0;j<SEGMENTNUM;j++){
   114a4:	2300      	movs	r3, #0
   114a6:	61fb      	str	r3, [r7, #28]
   114a8:	69fb      	ldr	r3, [r7, #28]
   114aa:	2b08      	cmp	r3, #8
   114ac:	dc37      	bgt.n	1151e <_ZN8SOFT_ARM19setupChamberPWMPortEv+0x82>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
   114ae:	69fb      	ldr	r3, [r7, #28]
   114b0:	22a4      	movs	r2, #164	; 0xa4
   114b2:	fb02 f303 	mul.w	r3, r2, r3
   114b6:	687a      	ldr	r2, [r7, #4]
   114b8:	4413      	add	r3, r2
   114ba:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++)
   114bc:	2300      	movs	r3, #0
   114be:	61bb      	str	r3, [r7, #24]
   114c0:	69bb      	ldr	r3, [r7, #24]
   114c2:	2b05      	cmp	r3, #5
   114c4:	dc27      	bgt.n	11516 <_ZN8SOFT_ARM19setupChamberPWMPortEv+0x7a>
		{
			CHAMBER *bellowCur=armSegCur->bellows[i];
   114c6:	697b      	ldr	r3, [r7, #20]
   114c8:	69ba      	ldr	r2, [r7, #24]
   114ca:	3216      	adds	r2, #22
   114cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   114d0:	613b      	str	r3, [r7, #16]
			int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
   114d2:	69fb      	ldr	r3, [r7, #28]
   114d4:	011b      	lsls	r3, r3, #4
   114d6:	3314      	adds	r3, #20
   114d8:	60fb      	str	r3, [r7, #12]
			/*analog port is treated as the overall No. in our arm.*/
			bellowCur->attach(pwmPortOffset+i*2, pwmPortOffset+i*2+1, j*BELLOWNUM+i);
   114da:	69bb      	ldr	r3, [r7, #24]
   114dc:	005a      	lsls	r2, r3, #1
   114de:	68fb      	ldr	r3, [r7, #12]
   114e0:	18d1      	adds	r1, r2, r3
   114e2:	69bb      	ldr	r3, [r7, #24]
   114e4:	005a      	lsls	r2, r3, #1
   114e6:	68fb      	ldr	r3, [r7, #12]
   114e8:	4413      	add	r3, r2
   114ea:	1c58      	adds	r0, r3, #1
   114ec:	69fa      	ldr	r2, [r7, #28]
   114ee:	4613      	mov	r3, r2
   114f0:	005b      	lsls	r3, r3, #1
   114f2:	4413      	add	r3, r2
   114f4:	005b      	lsls	r3, r3, #1
   114f6:	461a      	mov	r2, r3
   114f8:	69bb      	ldr	r3, [r7, #24]
   114fa:	4413      	add	r3, r2
   114fc:	4602      	mov	r2, r0
   114fe:	6938      	ldr	r0, [r7, #16]
   11500:	f000 fd20 	bl	11f44 <_ZN7CHAMBER6attachEiii>
			bellowCur->writeOpening(0);
   11504:	ed9f 0a08 	vldr	s0, [pc, #32]	; 11528 <_ZN8SOFT_ARM19setupChamberPWMPortEv+0x8c>
   11508:	6938      	ldr	r0, [r7, #16]
   1150a:	f000 fe3b 	bl	12184 <_ZN7CHAMBER12writeOpeningEf>
		for(int i=0;i<BELLOWNUM;i++)
   1150e:	69bb      	ldr	r3, [r7, #24]
   11510:	3301      	adds	r3, #1
   11512:	61bb      	str	r3, [r7, #24]
   11514:	e7d4      	b.n	114c0 <_ZN8SOFT_ARM19setupChamberPWMPortEv+0x24>
	for(int j=0;j<SEGMENTNUM;j++){
   11516:	69fb      	ldr	r3, [r7, #28]
   11518:	3301      	adds	r3, #1
   1151a:	61fb      	str	r3, [r7, #28]
   1151c:	e7c4      	b.n	114a8 <_ZN8SOFT_ARM19setupChamberPWMPortEv+0xc>
		}
	}



}
   1151e:	bf00      	nop
   11520:	3720      	adds	r7, #32
   11522:	46bd      	mov	sp, r7
   11524:	bd80      	pop	{r7, pc}
   11526:	bf00      	nop
	...

00011530 <_ZN8SOFT_ARM15writeCommandAllEv>:



void SOFT_ARM::writeCommandAll()
{
   11530:	b580      	push	{r7, lr}
   11532:	b088      	sub	sp, #32
   11534:	af00      	add	r7, sp, #0
   11536:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
   11538:	2300      	movs	r3, #0
   1153a:	61fb      	str	r3, [r7, #28]
   1153c:	69fb      	ldr	r3, [r7, #28]
   1153e:	2b08      	cmp	r3, #8
   11540:	f300 808d 	bgt.w	1165e <_ZN8SOFT_ARM15writeCommandAllEv+0x12e>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
   11544:	69fb      	ldr	r3, [r7, #28]
   11546:	22a4      	movs	r2, #164	; 0xa4
   11548:	fb02 f303 	mul.w	r3, r2, r3
   1154c:	687a      	ldr	r2, [r7, #4]
   1154e:	4413      	add	r3, r2
   11550:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++)
   11552:	2300      	movs	r3, #0
   11554:	61bb      	str	r3, [r7, #24]
   11556:	69bb      	ldr	r3, [r7, #24]
   11558:	2b05      	cmp	r3, #5
   1155a:	dc7c      	bgt.n	11656 <_ZN8SOFT_ARM15writeCommandAllEv+0x126>
		{
			CHAMBER *bellowCur=armSegCur->bellows[i];
   1155c:	697b      	ldr	r3, [r7, #20]
   1155e:	69ba      	ldr	r2, [r7, #24]
   11560:	3216      	adds	r2, #22
   11562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11566:	613b      	str	r3, [r7, #16]
			armSegCur->bellows[i]->pressure=sensorData[j][i].pressure*1000-101500;
   11568:	6879      	ldr	r1, [r7, #4]
   1156a:	69fa      	ldr	r2, [r7, #28]
   1156c:	4613      	mov	r3, r2
   1156e:	005b      	lsls	r3, r3, #1
   11570:	4413      	add	r3, r2
   11572:	005b      	lsls	r3, r3, #1
   11574:	69ba      	ldr	r2, [r7, #24]
   11576:	4413      	add	r3, r2
   11578:	33b8      	adds	r3, #184	; 0xb8
   1157a:	00db      	lsls	r3, r3, #3
   1157c:	440b      	add	r3, r1
   1157e:	889b      	ldrh	r3, [r3, #4]
   11580:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11584:	b29b      	uxth	r3, r3
   11586:	461a      	mov	r2, r3
   11588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1158c:	fb03 f202 	mul.w	r2, r3, r2
   11590:	4b37      	ldr	r3, [pc, #220]	; (11670 <_ZN8SOFT_ARM15writeCommandAllEv+0x140>)
   11592:	4413      	add	r3, r2
   11594:	697a      	ldr	r2, [r7, #20]
   11596:	69b9      	ldr	r1, [r7, #24]
   11598:	3116      	adds	r1, #22
   1159a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1159e:	ee07 3a90 	vmov	s15, r3
   115a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   115a6:	edc2 7a27 	vstr	s15, [r2, #156]	; 0x9c

			if(commandData[j][i].commandType==pressureCommandType){
   115aa:	6879      	ldr	r1, [r7, #4]
   115ac:	69fa      	ldr	r2, [r7, #28]
   115ae:	4613      	mov	r3, r2
   115b0:	005b      	lsls	r3, r3, #1
   115b2:	4413      	add	r3, r2
   115b4:	005b      	lsls	r3, r3, #1
   115b6:	69ba      	ldr	r2, [r7, #24]
   115b8:	4413      	add	r3, r2
   115ba:	33ee      	adds	r3, #238	; 0xee
   115bc:	00db      	lsls	r3, r3, #3
   115be:	440b      	add	r3, r1
   115c0:	895b      	ldrh	r3, [r3, #10]
   115c2:	2b01      	cmp	r3, #1
   115c4:	d117      	bne.n	115f6 <_ZN8SOFT_ARM15writeCommandAllEv+0xc6>
				float pressureCommandTemp=commandData[j][i].values[0];
   115c6:	6879      	ldr	r1, [r7, #4]
   115c8:	69fa      	ldr	r2, [r7, #28]
   115ca:	4613      	mov	r3, r2
   115cc:	005b      	lsls	r3, r3, #1
   115ce:	4413      	add	r3, r2
   115d0:	005b      	lsls	r3, r3, #1
   115d2:	69ba      	ldr	r2, [r7, #24]
   115d4:	4413      	add	r3, r2
   115d6:	33ee      	adds	r3, #238	; 0xee
   115d8:	00db      	lsls	r3, r3, #3
   115da:	440b      	add	r3, r1
   115dc:	889b      	ldrh	r3, [r3, #4]
   115de:	ee07 3a90 	vmov	s15, r3
   115e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   115e6:	edc7 7a02 	vstr	s15, [r7, #8]
				bellowCur->writePressure(pressureCommandTemp);
   115ea:	ed97 0a02 	vldr	s0, [r7, #8]
   115ee:	6938      	ldr	r0, [r7, #16]
   115f0:	f000 fcc6 	bl	11f80 <_ZN7CHAMBER13writePressureEf>
   115f4:	e02b      	b.n	1164e <_ZN8SOFT_ARM15writeCommandAllEv+0x11e>
			}
			else if(commandData[j][i].commandType==openingCommandType){
   115f6:	6879      	ldr	r1, [r7, #4]
   115f8:	69fa      	ldr	r2, [r7, #28]
   115fa:	4613      	mov	r3, r2
   115fc:	005b      	lsls	r3, r3, #1
   115fe:	4413      	add	r3, r2
   11600:	005b      	lsls	r3, r3, #1
   11602:	69ba      	ldr	r2, [r7, #24]
   11604:	4413      	add	r3, r2
   11606:	33ee      	adds	r3, #238	; 0xee
   11608:	00db      	lsls	r3, r3, #3
   1160a:	440b      	add	r3, r1
   1160c:	895b      	ldrh	r3, [r3, #10]
   1160e:	2b00      	cmp	r3, #0
   11610:	d11d      	bne.n	1164e <_ZN8SOFT_ARM15writeCommandAllEv+0x11e>
				float openingCommandTemp=((int16_t)commandData[j][i].values[0])*3.0517578125e-5;//values[0]/32767
   11612:	6879      	ldr	r1, [r7, #4]
   11614:	69fa      	ldr	r2, [r7, #28]
   11616:	4613      	mov	r3, r2
   11618:	005b      	lsls	r3, r3, #1
   1161a:	4413      	add	r3, r2
   1161c:	005b      	lsls	r3, r3, #1
   1161e:	69ba      	ldr	r2, [r7, #24]
   11620:	4413      	add	r3, r2
   11622:	33ee      	adds	r3, #238	; 0xee
   11624:	00db      	lsls	r3, r3, #3
   11626:	440b      	add	r3, r1
   11628:	889b      	ldrh	r3, [r3, #4]
   1162a:	b21b      	sxth	r3, r3
   1162c:	ee07 3a90 	vmov	s15, r3
   11630:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11634:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 11668 <_ZN8SOFT_ARM15writeCommandAllEv+0x138>
   11638:	ee27 7b06 	vmul.f64	d7, d7, d6
   1163c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
   11640:	edc7 7a03 	vstr	s15, [r7, #12]
				bellowCur->writeOpening(openingCommandTemp);
   11644:	ed97 0a03 	vldr	s0, [r7, #12]
   11648:	6938      	ldr	r0, [r7, #16]
   1164a:	f000 fd9b 	bl	12184 <_ZN7CHAMBER12writeOpeningEf>
		for(int i=0;i<BELLOWNUM;i++)
   1164e:	69bb      	ldr	r3, [r7, #24]
   11650:	3301      	adds	r3, #1
   11652:	61bb      	str	r3, [r7, #24]
   11654:	e77f      	b.n	11556 <_ZN8SOFT_ARM15writeCommandAllEv+0x26>
	for(int j=0;j<SEGMENTNUM;j++){
   11656:	69fb      	ldr	r3, [r7, #28]
   11658:	3301      	adds	r3, #1
   1165a:	61fb      	str	r3, [r7, #28]
   1165c:	e76e      	b.n	1153c <_ZN8SOFT_ARM15writeCommandAllEv+0xc>
			}
		}
	}
}
   1165e:	bf00      	nop
   11660:	3720      	adds	r7, #32
   11662:	46bd      	mov	sp, r7
   11664:	bd80      	pop	{r7, pc}
   11666:	bf00      	nop
   11668:	00000000 	.word	0x00000000
   1166c:	3f000000 	.word	0x3f000000
   11670:	fffe7384 	.word	0xfffe7384

00011674 <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
   11674:	b590      	push	{r4, r7, lr}
   11676:	b085      	sub	sp, #20
   11678:	af00      	add	r7, sp, #0
   1167a:	6078      	str	r0, [r7, #4]
   1167c:	6039      	str	r1, [r7, #0]
{
	basePlatform = new PNEUDRIVE(num);
   1167e:	2084      	movs	r0, #132	; 0x84
   11680:	f003 fa90 	bl	14ba4 <_Znwj>
   11684:	4603      	mov	r3, r0
   11686:	461c      	mov	r4, r3
   11688:	6839      	ldr	r1, [r7, #0]
   1168a:	4620      	mov	r0, r4
   1168c:	f001 faf0 	bl	12c70 <_ZN9PNEUDRIVEC1Ei>
   11690:	687b      	ldr	r3, [r7, #4]
   11692:	655c      	str	r4, [r3, #84]	; 0x54
	for(int i=0;i<BELLOWNUM;i++)
   11694:	2300      	movs	r3, #0
   11696:	60fb      	str	r3, [r7, #12]
   11698:	68fb      	ldr	r3, [r7, #12]
   1169a:	2b05      	cmp	r3, #5
   1169c:	dc0f      	bgt.n	116be <_ZN16SOFT_ARM_SEGMENTC1Ei+0x4a>
	{
		bellows[i]=basePlatform->chambers[i];
   1169e:	687b      	ldr	r3, [r7, #4]
   116a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   116a2:	689a      	ldr	r2, [r3, #8]
   116a4:	68fb      	ldr	r3, [r7, #12]
   116a6:	009b      	lsls	r3, r3, #2
   116a8:	4413      	add	r3, r2
   116aa:	6819      	ldr	r1, [r3, #0]
   116ac:	687b      	ldr	r3, [r7, #4]
   116ae:	68fa      	ldr	r2, [r7, #12]
   116b0:	3216      	adds	r2, #22
   116b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
   116b6:	68fb      	ldr	r3, [r7, #12]
   116b8:	3301      	adds	r3, #1
   116ba:	60fb      	str	r3, [r7, #12]
   116bc:	e7ec      	b.n	11698 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x24>
	}

}
   116be:	687b      	ldr	r3, [r7, #4]
   116c0:	4618      	mov	r0, r3
   116c2:	3714      	adds	r7, #20
   116c4:	46bd      	mov	sp, r7
   116c6:	bd90      	pop	{r4, r7, pc}

000116c8 <setup>:
#include "spiSlave.h"
#include <SoftArm.h>

SOFT_ARM softArm;

void setup() {
   116c8:	b580      	push	{r7, lr}
   116ca:	af00      	add	r7, sp, #0
	/*setup 1000Hz control loop*/
	setPeriodControlLoop(10);
   116cc:	200a      	movs	r0, #10
   116ce:	f001 fbf7 	bl	12ec0 <setPeriodControlLoop>

	/*setup 50Hz serial display loop*/
	setPeriodSendLoop(50);
   116d2:	2032      	movs	r0, #50	; 0x32
   116d4:	f001 fc04 	bl	12ee0 <setPeriodSendLoop>

	/*soft arm chambers' PWM port mapping*/
	softArm.setupChamberPWMPort();
   116d8:	4804      	ldr	r0, [pc, #16]	; (116ec <setup+0x24>)
   116da:	f7ff fedf 	bl	1149c <_ZN8SOFT_ARM19setupChamberPWMPortEv>

	/*start canBus receive*/
	canConfig();
   116de:	f7ff fe19 	bl	11314 <canConfig>

	/**********start the SPI slave in DMA*****/
	spiSlaveStart();
   116e2:	f000 f927 	bl	11934 <spiSlaveStart>

}
   116e6:	bf00      	nop
   116e8:	bd80      	pop	{r7, pc}
   116ea:	bf00      	nop
   116ec:	0002a40c 	.word	0x0002a40c

000116f0 <loop>:

void loop() {
   116f0:	b580      	push	{r7, lr}
   116f2:	af00      	add	r7, sp, #0

	/**********The commands are automatically updated from SPI1 using DMA,
	 and stored in commandData[segNum][bellowNum] in softArm.*/

	/**Write the command of each chamber, either pressure or opening type*/
	softArm.writeCommandAll();
   116f4:	4802      	ldr	r0, [pc, #8]	; (11700 <loop+0x10>)
   116f6:	f7ff ff1b 	bl	11530 <_ZN8SOFT_ARM15writeCommandAllEv>

}
   116fa:	bf00      	nop
   116fc:	bd80      	pop	{r7, pc}
   116fe:	bf00      	nop
   11700:	0002a40c 	.word	0x0002a40c

00011704 <serialDisplay>:

/*serial output using DMA*/
void serialDisplay() {
   11704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11708:	b090      	sub	sp, #64	; 0x40
   1170a:	af0a      	add	r7, sp, #40	; 0x28
	//printf("Time: %d\r\n",millis());
	printf("Time:%10lu       PRESSURE(KPa)                 DISTANCE(mm)\r\n",
   1170c:	f001 fb58 	bl	12dc0 <millis>
   11710:	4603      	mov	r3, r0
   11712:	4619      	mov	r1, r3
   11714:	4865      	ldr	r0, [pc, #404]	; (118ac <serialDisplay+0x1a8>)
   11716:	f004 fa1b 	bl	15b50 <iprintf>
			millis());
	for (int i = 0; i < SEGMENTNUM; i++) {
   1171a:	2300      	movs	r3, #0
   1171c:	617b      	str	r3, [r7, #20]
   1171e:	697b      	ldr	r3, [r7, #20]
   11720:	2b08      	cmp	r3, #8
   11722:	f300 80be 	bgt.w	118a2 <serialDisplay+0x19e>
		printf(
				"            %hu, %hu, %hu, %hu, %hu, %hu    |     %hu,  %hu, %hu, %hu, %hu, %hu\r\n",
				softArm.sensorData[i][0].pressure,
   11726:	4962      	ldr	r1, [pc, #392]	; (118b0 <serialDisplay+0x1ac>)
   11728:	697a      	ldr	r2, [r7, #20]
   1172a:	4613      	mov	r3, r2
   1172c:	005b      	lsls	r3, r3, #1
   1172e:	4413      	add	r3, r2
   11730:	011b      	lsls	r3, r3, #4
   11732:	440b      	add	r3, r1
   11734:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
   11738:	889b      	ldrh	r3, [r3, #4]
   1173a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1173e:	b29b      	uxth	r3, r3
		printf(
   11740:	469c      	mov	ip, r3
				softArm.sensorData[i][1].pressure,
   11742:	495b      	ldr	r1, [pc, #364]	; (118b0 <serialDisplay+0x1ac>)
   11744:	697a      	ldr	r2, [r7, #20]
   11746:	4613      	mov	r3, r2
   11748:	005b      	lsls	r3, r3, #1
   1174a:	4413      	add	r3, r2
   1174c:	011b      	lsls	r3, r3, #4
   1174e:	440b      	add	r3, r1
   11750:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
   11754:	889b      	ldrh	r3, [r3, #4]
   11756:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1175a:	b29b      	uxth	r3, r3
		printf(
   1175c:	469e      	mov	lr, r3
				softArm.sensorData[i][2].pressure,
   1175e:	4954      	ldr	r1, [pc, #336]	; (118b0 <serialDisplay+0x1ac>)
   11760:	697a      	ldr	r2, [r7, #20]
   11762:	4613      	mov	r3, r2
   11764:	005b      	lsls	r3, r3, #1
   11766:	4413      	add	r3, r2
   11768:	011b      	lsls	r3, r3, #4
   1176a:	440b      	add	r3, r1
   1176c:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
   11770:	889b      	ldrh	r3, [r3, #4]
   11772:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11776:	b29b      	uxth	r3, r3
		printf(
   11778:	4698      	mov	r8, r3
				softArm.sensorData[i][3].pressure,
   1177a:	494d      	ldr	r1, [pc, #308]	; (118b0 <serialDisplay+0x1ac>)
   1177c:	697a      	ldr	r2, [r7, #20]
   1177e:	4613      	mov	r3, r2
   11780:	005b      	lsls	r3, r3, #1
   11782:	4413      	add	r3, r2
   11784:	011b      	lsls	r3, r3, #4
   11786:	440b      	add	r3, r1
   11788:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
   1178c:	889b      	ldrh	r3, [r3, #4]
   1178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11792:	b29b      	uxth	r3, r3
		printf(
   11794:	4618      	mov	r0, r3
				softArm.sensorData[i][4].pressure,
   11796:	4946      	ldr	r1, [pc, #280]	; (118b0 <serialDisplay+0x1ac>)
   11798:	697a      	ldr	r2, [r7, #20]
   1179a:	4613      	mov	r3, r2
   1179c:	005b      	lsls	r3, r3, #1
   1179e:	4413      	add	r3, r2
   117a0:	011b      	lsls	r3, r3, #4
   117a2:	440b      	add	r3, r1
   117a4:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
   117a8:	889b      	ldrh	r3, [r3, #4]
   117aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   117ae:	b29b      	uxth	r3, r3
		printf(
   117b0:	461c      	mov	r4, r3
				softArm.sensorData[i][5].pressure,
   117b2:	493f      	ldr	r1, [pc, #252]	; (118b0 <serialDisplay+0x1ac>)
   117b4:	697a      	ldr	r2, [r7, #20]
   117b6:	4613      	mov	r3, r2
   117b8:	005b      	lsls	r3, r3, #1
   117ba:	4413      	add	r3, r2
   117bc:	011b      	lsls	r3, r3, #4
   117be:	440b      	add	r3, r1
   117c0:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
   117c4:	889b      	ldrh	r3, [r3, #4]
   117c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   117ca:	b29b      	uxth	r3, r3
		printf(
   117cc:	461d      	mov	r5, r3
				softArm.sensorData[i][0].distance,
   117ce:	4938      	ldr	r1, [pc, #224]	; (118b0 <serialDisplay+0x1ac>)
   117d0:	697a      	ldr	r2, [r7, #20]
   117d2:	4613      	mov	r3, r2
   117d4:	005b      	lsls	r3, r3, #1
   117d6:	4413      	add	r3, r2
   117d8:	011b      	lsls	r3, r3, #4
   117da:	440b      	add	r3, r1
   117dc:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
   117e0:	795b      	ldrb	r3, [r3, #5]
   117e2:	f3c3 0346 	ubfx	r3, r3, #1, #7
   117e6:	b2db      	uxtb	r3, r3
		printf(
   117e8:	461e      	mov	r6, r3
				softArm.sensorData[i][1].distance,
   117ea:	4931      	ldr	r1, [pc, #196]	; (118b0 <serialDisplay+0x1ac>)
   117ec:	697a      	ldr	r2, [r7, #20]
   117ee:	4613      	mov	r3, r2
   117f0:	005b      	lsls	r3, r3, #1
   117f2:	4413      	add	r3, r2
   117f4:	011b      	lsls	r3, r3, #4
   117f6:	440b      	add	r3, r1
   117f8:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
   117fc:	795b      	ldrb	r3, [r3, #5]
   117fe:	f3c3 0346 	ubfx	r3, r3, #1, #7
   11802:	b2db      	uxtb	r3, r3
		printf(
   11804:	60fb      	str	r3, [r7, #12]
				softArm.sensorData[i][2].distance,
   11806:	492a      	ldr	r1, [pc, #168]	; (118b0 <serialDisplay+0x1ac>)
   11808:	697a      	ldr	r2, [r7, #20]
   1180a:	4613      	mov	r3, r2
   1180c:	005b      	lsls	r3, r3, #1
   1180e:	4413      	add	r3, r2
   11810:	011b      	lsls	r3, r3, #4
   11812:	440b      	add	r3, r1
   11814:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
   11818:	795b      	ldrb	r3, [r3, #5]
   1181a:	f3c3 0346 	ubfx	r3, r3, #1, #7
   1181e:	b2db      	uxtb	r3, r3
		printf(
   11820:	60bb      	str	r3, [r7, #8]
				softArm.sensorData[i][3].distance,
   11822:	4923      	ldr	r1, [pc, #140]	; (118b0 <serialDisplay+0x1ac>)
   11824:	697a      	ldr	r2, [r7, #20]
   11826:	4613      	mov	r3, r2
   11828:	005b      	lsls	r3, r3, #1
   1182a:	4413      	add	r3, r2
   1182c:	011b      	lsls	r3, r3, #4
   1182e:	440b      	add	r3, r1
   11830:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
   11834:	795b      	ldrb	r3, [r3, #5]
   11836:	f3c3 0346 	ubfx	r3, r3, #1, #7
   1183a:	b2db      	uxtb	r3, r3
		printf(
   1183c:	607b      	str	r3, [r7, #4]
				softArm.sensorData[i][4].distance,
   1183e:	491c      	ldr	r1, [pc, #112]	; (118b0 <serialDisplay+0x1ac>)
   11840:	697a      	ldr	r2, [r7, #20]
   11842:	4613      	mov	r3, r2
   11844:	005b      	lsls	r3, r3, #1
   11846:	4413      	add	r3, r2
   11848:	011b      	lsls	r3, r3, #4
   1184a:	440b      	add	r3, r1
   1184c:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
   11850:	795b      	ldrb	r3, [r3, #5]
   11852:	f3c3 0346 	ubfx	r3, r3, #1, #7
   11856:	b2db      	uxtb	r3, r3
		printf(
   11858:	603b      	str	r3, [r7, #0]
				softArm.sensorData[i][5].distance);
   1185a:	4915      	ldr	r1, [pc, #84]	; (118b0 <serialDisplay+0x1ac>)
   1185c:	697a      	ldr	r2, [r7, #20]
   1185e:	4613      	mov	r3, r2
   11860:	005b      	lsls	r3, r3, #1
   11862:	4413      	add	r3, r2
   11864:	011b      	lsls	r3, r3, #4
   11866:	440b      	add	r3, r1
   11868:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
   1186c:	795b      	ldrb	r3, [r3, #5]
   1186e:	f3c3 0346 	ubfx	r3, r3, #1, #7
   11872:	b2db      	uxtb	r3, r3
		printf(
   11874:	9308      	str	r3, [sp, #32]
   11876:	683a      	ldr	r2, [r7, #0]
   11878:	9207      	str	r2, [sp, #28]
   1187a:	687a      	ldr	r2, [r7, #4]
   1187c:	9206      	str	r2, [sp, #24]
   1187e:	68ba      	ldr	r2, [r7, #8]
   11880:	9205      	str	r2, [sp, #20]
   11882:	68fb      	ldr	r3, [r7, #12]
   11884:	9304      	str	r3, [sp, #16]
   11886:	9603      	str	r6, [sp, #12]
   11888:	9502      	str	r5, [sp, #8]
   1188a:	9401      	str	r4, [sp, #4]
   1188c:	9000      	str	r0, [sp, #0]
   1188e:	4643      	mov	r3, r8
   11890:	4672      	mov	r2, lr
   11892:	4661      	mov	r1, ip
   11894:	4807      	ldr	r0, [pc, #28]	; (118b4 <serialDisplay+0x1b0>)
   11896:	f004 f95b 	bl	15b50 <iprintf>
	for (int i = 0; i < SEGMENTNUM; i++) {
   1189a:	697b      	ldr	r3, [r7, #20]
   1189c:	3301      	adds	r3, #1
   1189e:	617b      	str	r3, [r7, #20]
   118a0:	e73d      	b.n	1171e <serialDisplay+0x1a>
	}
}
   118a2:	bf00      	nop
   118a4:	3718      	adds	r7, #24
   118a6:	46bd      	mov	sp, r7
   118a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118ac:	000195b0 	.word	0x000195b0
   118b0:	0002a40c 	.word	0x0002a40c
   118b4:	000195f0 	.word	0x000195f0

000118b8 <serialReceiveCallback>:

//called when serial input receive string with ending '\r\n'
void serialReceiveCallback(char *pSerialReceiveBuffer) {
   118b8:	b580      	push	{r7, lr}
   118ba:	b082      	sub	sp, #8
   118bc:	af00      	add	r7, sp, #0
   118be:	6078      	str	r0, [r7, #4]

	if (pSerialReceiveBuffer[0] == 'k') {
   118c0:	687b      	ldr	r3, [r7, #4]
   118c2:	781b      	ldrb	r3, [r3, #0]
   118c4:	2b6b      	cmp	r3, #107	; 0x6b
   118c6:	d111      	bne.n	118ec <serialReceiveCallback+0x34>
		//	/**Write command for each actuator, q&r of kalman filter for laser, */
		softArm.canBusCommand[0] = 0xFF;
   118c8:	4b0a      	ldr	r3, [pc, #40]	; (118f4 <serialReceiveCallback+0x3c>)
   118ca:	22ff      	movs	r2, #255	; 0xff
   118cc:	f883 2b0a 	strb.w	r2, [r3, #2826]	; 0xb0a
		softArm.canBusCommand[1] = 0xEF;
   118d0:	4b08      	ldr	r3, [pc, #32]	; (118f4 <serialReceiveCallback+0x3c>)
   118d2:	22ef      	movs	r2, #239	; 0xef
   118d4:	f883 2b0b 	strb.w	r2, [r3, #2827]	; 0xb0b
		softArm.canBusCommand[2] = 0xFE;
   118d8:	4b06      	ldr	r3, [pc, #24]	; (118f4 <serialReceiveCallback+0x3c>)
   118da:	22fe      	movs	r2, #254	; 0xfe
   118dc:	f883 2b0c 	strb.w	r2, [r3, #2828]	; 0xb0c
		softArm.canBusCommand[3] = 0xAF;
   118e0:	4b04      	ldr	r3, [pc, #16]	; (118f4 <serialReceiveCallback+0x3c>)
   118e2:	22af      	movs	r2, #175	; 0xaf
   118e4:	f883 2b0d 	strb.w	r2, [r3, #2829]	; 0xb0d
		canSend();
   118e8:	f7ff fd8e 	bl	11408 <canSend>
	}
}
   118ec:	bf00      	nop
   118ee:	3708      	adds	r7, #8
   118f0:	46bd      	mov	sp, r7
   118f2:	bd80      	pop	{r7, pc}
   118f4:	0002a40c 	.word	0x0002a40c

000118f8 <_Z41__static_initialization_and_destruction_0ii>:
   118f8:	b580      	push	{r7, lr}
   118fa:	b082      	sub	sp, #8
   118fc:	af00      	add	r7, sp, #0
   118fe:	6078      	str	r0, [r7, #4]
   11900:	6039      	str	r1, [r7, #0]
   11902:	687b      	ldr	r3, [r7, #4]
   11904:	2b01      	cmp	r3, #1
   11906:	d107      	bne.n	11918 <_Z41__static_initialization_and_destruction_0ii+0x20>
   11908:	683b      	ldr	r3, [r7, #0]
   1190a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1190e:	4293      	cmp	r3, r2
   11910:	d102      	bne.n	11918 <_Z41__static_initialization_and_destruction_0ii+0x20>
SOFT_ARM softArm;
   11912:	4803      	ldr	r0, [pc, #12]	; (11920 <_Z41__static_initialization_and_destruction_0ii+0x28>)
   11914:	f7ff fdac 	bl	11470 <_ZN8SOFT_ARMC1Ev>
}
   11918:	bf00      	nop
   1191a:	3708      	adds	r7, #8
   1191c:	46bd      	mov	sp, r7
   1191e:	bd80      	pop	{r7, pc}
   11920:	0002a40c 	.word	0x0002a40c

00011924 <_GLOBAL__sub_I_softArm>:
   11924:	b580      	push	{r7, lr}
   11926:	af00      	add	r7, sp, #0
   11928:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1192c:	2001      	movs	r0, #1
   1192e:	f7ff ffe3 	bl	118f8 <_Z41__static_initialization_and_destruction_0ii>
   11932:	bd80      	pop	{r7, pc}

00011934 <spiSlaveStart>:
extern SOFT_ARM softArm;

SPI_HandleTypeDef *hspiSlave=&hspi1;


void spiSlaveStart(){
   11934:	b580      	push	{r7, lr}
   11936:	af00      	add	r7, sp, #0
	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData[0][0]),  (uint8_t *)(&softArm.commandDataBuffer[0][0]), sizeof(softArm.commandDataBuffer));
   11938:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   1193c:	4a03      	ldr	r2, [pc, #12]	; (1194c <spiSlaveStart+0x18>)
   1193e:	4904      	ldr	r1, [pc, #16]	; (11950 <spiSlaveStart+0x1c>)
   11940:	4804      	ldr	r0, [pc, #16]	; (11954 <spiSlaveStart+0x20>)
   11942:	f7fc fb5d 	bl	e000 <HAL_SPI_TransmitReceive_DMA>
}
   11946:	bf00      	nop
   11948:	bd80      	pop	{r7, pc}
   1194a:	bf00      	nop
   1194c:	0002ad30 	.word	0x0002ad30
   11950:	0002a9d0 	.word	0x0002a9d0
   11954:	000339c8 	.word	0x000339c8

00011958 <slaveSPITxRxCpltCallback>:



void slaveSPITxRxCpltCallback(SPI_HandleTypeDef *hspi){
   11958:	b580      	push	{r7, lr}
   1195a:	b082      	sub	sp, #8
   1195c:	af00      	add	r7, sp, #0
   1195e:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
   11960:	4b0b      	ldr	r3, [pc, #44]	; (11990 <slaveSPITxRxCpltCallback+0x38>)
   11962:	681b      	ldr	r3, [r3, #0]
   11964:	687a      	ldr	r2, [r7, #4]
   11966:	429a      	cmp	r2, r3
   11968:	d10d      	bne.n	11986 <slaveSPITxRxCpltCallback+0x2e>
		/*Re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(hspiSlave, (uint8_t *)(&softArm.sensorData[0][0]),  (uint8_t *)(&softArm.commandDataBuffer[0][0]), sizeof(softArm.commandDataBuffer));
   1196a:	4b09      	ldr	r3, [pc, #36]	; (11990 <slaveSPITxRxCpltCallback+0x38>)
   1196c:	6818      	ldr	r0, [r3, #0]
   1196e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   11972:	4a08      	ldr	r2, [pc, #32]	; (11994 <slaveSPITxRxCpltCallback+0x3c>)
   11974:	4908      	ldr	r1, [pc, #32]	; (11998 <slaveSPITxRxCpltCallback+0x40>)
   11976:	f7fc fb43 	bl	e000 <HAL_SPI_TransmitReceive_DMA>
		memcpy(&softArm.commandData[0][0],&softArm.commandDataBuffer[0][0],sizeof(softArm.commandDataBuffer));
   1197a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   1197e:	4905      	ldr	r1, [pc, #20]	; (11994 <slaveSPITxRxCpltCallback+0x3c>)
   11980:	4806      	ldr	r0, [pc, #24]	; (1199c <slaveSPITxRxCpltCallback+0x44>)
   11982:	f003 fa07 	bl	14d94 <memcpy>
	}
}
   11986:	bf00      	nop
   11988:	3708      	adds	r7, #8
   1198a:	46bd      	mov	sp, r7
   1198c:	bd80      	pop	{r7, pc}
   1198e:	bf00      	nop
   11990:	00029ae0 	.word	0x00029ae0
   11994:	0002ad30 	.word	0x0002ad30
   11998:	0002a9d0 	.word	0x0002a9d0
   1199c:	0002ab80 	.word	0x0002ab80

000119a0 <slaveSPIErrorCallback>:

void slaveSPIErrorCallback(SPI_HandleTypeDef *hspi){
   119a0:	b580      	push	{r7, lr}
   119a2:	b082      	sub	sp, #8
   119a4:	af00      	add	r7, sp, #0
   119a6:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
   119a8:	4b09      	ldr	r3, [pc, #36]	; (119d0 <slaveSPIErrorCallback+0x30>)
   119aa:	681b      	ldr	r3, [r3, #0]
   119ac:	687a      	ldr	r2, [r7, #4]
   119ae:	429a      	cmp	r2, r3
   119b0:	d109      	bne.n	119c6 <slaveSPIErrorCallback+0x26>
		printf("Error SPI 1 communication with RPI4\r\n");
   119b2:	4808      	ldr	r0, [pc, #32]	; (119d4 <slaveSPIErrorCallback+0x34>)
   119b4:	f004 f940 	bl	15c38 <puts>
		/*If an error occurs, we also need to re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData[0][0]),  (uint8_t *)(&softArm.commandDataBuffer[0][0]), sizeof(softArm.commandDataBuffer));
   119b8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   119bc:	4a06      	ldr	r2, [pc, #24]	; (119d8 <slaveSPIErrorCallback+0x38>)
   119be:	4907      	ldr	r1, [pc, #28]	; (119dc <slaveSPIErrorCallback+0x3c>)
   119c0:	4807      	ldr	r0, [pc, #28]	; (119e0 <slaveSPIErrorCallback+0x40>)
   119c2:	f7fc fb1d 	bl	e000 <HAL_SPI_TransmitReceive_DMA>

	}
}
   119c6:	bf00      	nop
   119c8:	3708      	adds	r7, #8
   119ca:	46bd      	mov	sp, r7
   119cc:	bd80      	pop	{r7, pc}
   119ce:	bf00      	nop
   119d0:	00029ae0 	.word	0x00029ae0
   119d4:	00019644 	.word	0x00019644
   119d8:	0002ad30 	.word	0x0002ad30
   119dc:	0002a9d0 	.word	0x0002a9d0
   119e0:	000339c8 	.word	0x000339c8

000119e4 <AD_CS_HIGH>:
{
	DigitalWrite(ptADDevice->CS_DO_x,LOW);
}

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
   119e4:	b580      	push	{r7, lr}
   119e6:	b082      	sub	sp, #8
   119e8:	af00      	add	r7, sp, #0
   119ea:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,HIGH);
   119ec:	687b      	ldr	r3, [r7, #4]
   119ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
   119f2:	2101      	movs	r1, #1
   119f4:	4618      	mov	r0, r3
   119f6:	f001 f995 	bl	12d24 <DigitalWrite>
}
   119fa:	bf00      	nop
   119fc:	3708      	adds	r7, #8
   119fe:	46bd      	mov	sp, r7
   11a00:	bd80      	pop	{r7, pc}

00011a02 <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
   11a02:	b580      	push	{r7, lr}
   11a04:	b082      	sub	sp, #8
   11a06:	af00      	add	r7, sp, #0
   11a08:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,LOW);
   11a0a:	687b      	ldr	r3, [r7, #4]
   11a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   11a10:	2100      	movs	r1, #0
   11a12:	4618      	mov	r0, r3
   11a14:	f001 f986 	bl	12d24 <DigitalWrite>
}
   11a18:	bf00      	nop
   11a1a:	3708      	adds	r7, #8
   11a1c:	46bd      	mov	sp, r7
   11a1e:	bd80      	pop	{r7, pc}

00011a20 <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
   11a20:	b580      	push	{r7, lr}
   11a22:	b082      	sub	sp, #8
   11a24:	af00      	add	r7, sp, #0
   11a26:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,HIGH);
   11a28:	687b      	ldr	r3, [r7, #4]
   11a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   11a2e:	2101      	movs	r1, #1
   11a30:	4618      	mov	r0, r3
   11a32:	f001 f977 	bl	12d24 <DigitalWrite>
}
   11a36:	bf00      	nop
   11a38:	3708      	adds	r7, #8
   11a3a:	46bd      	mov	sp, r7
   11a3c:	bd80      	pop	{r7, pc}

00011a3e <AD_RESET_LOW>:

static void AD_RESET_LOW(AD7616_DEVICE *ptADDevice)
{
   11a3e:	b580      	push	{r7, lr}
   11a40:	b082      	sub	sp, #8
   11a42:	af00      	add	r7, sp, #0
   11a44:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,LOW);
   11a46:	687b      	ldr	r3, [r7, #4]
   11a48:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
   11a4c:	2100      	movs	r1, #0
   11a4e:	4618      	mov	r0, r3
   11a50:	f001 f968 	bl	12d24 <DigitalWrite>
}
   11a54:	bf00      	nop
   11a56:	3708      	adds	r7, #8
   11a58:	46bd      	mov	sp, r7
   11a5a:	bd80      	pop	{r7, pc}

00011a5c <AD_RESET_HIGH>:

static void AD_RESET_HIGH(AD7616_DEVICE *ptADDevice)
{
   11a5c:	b580      	push	{r7, lr}
   11a5e:	b082      	sub	sp, #8
   11a60:	af00      	add	r7, sp, #0
   11a62:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,HIGH);
   11a64:	687b      	ldr	r3, [r7, #4]
   11a66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
   11a6a:	2101      	movs	r1, #1
   11a6c:	4618      	mov	r0, r3
   11a6e:	f001 f959 	bl	12d24 <DigitalWrite>
}
   11a72:	bf00      	nop
   11a74:	3708      	adds	r7, #8
   11a76:	46bd      	mov	sp, r7
   11a78:	bd80      	pop	{r7, pc}

00011a7a <AD7616_getVoltage>:


static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
   11a7a:	b580      	push	{r7, lr}
   11a7c:	b082      	sub	sp, #8
   11a7e:	af00      	add	r7, sp, #0
   11a80:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
   11a82:	687b      	ldr	r3, [r7, #4]
   11a84:	2201      	movs	r2, #1
   11a86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	 if (ADBOARD_TYPE==AD7616){
	AD_CONV_HIGH(ptADDev);
	delay_ns(200);
	AD_CONV_LOW(ptADDev);}
	else if (ADBOARD_TYPE==AD7606){
	AD_CONV_LOW(ptADDev);
   11a8a:	6878      	ldr	r0, [r7, #4]
   11a8c:	f7ff ffb9 	bl	11a02 <AD_CONV_LOW>
	delay_ns(200);
   11a90:	20c8      	movs	r0, #200	; 0xc8
   11a92:	f001 f9cd 	bl	12e30 <delay_ns>
	AD_CONV_HIGH(ptADDev);}
   11a96:	6878      	ldr	r0, [r7, #4]
   11a98:	f7ff ffc2 	bl	11a20 <AD_CONV_HIGH>
	ptADDev->ucDataFlag = 0;
   11a9c:	687b      	ldr	r3, [r7, #4]
   11a9e:	2200      	movs	r2, #0
   11aa0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
   11aa4:	bf00      	nop
   11aa6:	3708      	adds	r7, #8
   11aa8:	46bd      	mov	sp, r7
   11aaa:	bd80      	pop	{r7, pc}

00011aac <ADBoard_SPICallback>:
	}
	return ret;
}

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
   11aac:	b580      	push	{r7, lr}
   11aae:	b086      	sub	sp, #24
   11ab0:	af00      	add	r7, sp, #0
   11ab2:	6078      	str	r0, [r7, #4]
	int ret=1;
   11ab4:	2301      	movs	r3, #1
   11ab6:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
   11ab8:	2300      	movs	r3, #0
   11aba:	613b      	str	r3, [r7, #16]
   11abc:	e081      	b.n	11bc2 <ADBoard_SPICallback+0x116>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
   11abe:	4b45      	ldr	r3, [pc, #276]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11ac0:	6819      	ldr	r1, [r3, #0]
   11ac2:	693a      	ldr	r2, [r7, #16]
   11ac4:	4613      	mov	r3, r2
   11ac6:	009b      	lsls	r3, r3, #2
   11ac8:	4413      	add	r3, r2
   11aca:	011b      	lsls	r3, r3, #4
   11acc:	440b      	add	r3, r1
   11ace:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
   11ad0:	68bb      	ldr	r3, [r7, #8]
   11ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11ad4:	687a      	ldr	r2, [r7, #4]
   11ad6:	429a      	cmp	r2, r3
   11ad8:	d170      	bne.n	11bbc <ADBoard_SPICallback+0x110>
				{
					ptADBoardDevices->curADBoardNum=i;
   11ada:	4b3e      	ldr	r3, [pc, #248]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11adc:	681b      	ldr	r3, [r3, #0]
   11ade:	693a      	ldr	r2, [r7, #16]
   11ae0:	b292      	uxth	r2, r2
   11ae2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					AD_CS_HIGH(ptADDev);
   11ae6:	68b8      	ldr	r0, [r7, #8]
   11ae8:	f7ff ff7c 	bl	119e4 <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
   11aec:	68bb      	ldr	r3, [r7, #8]
   11aee:	2201      	movs	r2, #1
   11af0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					ptADDev->chosen = 0;
   11af4:	68bb      	ldr	r3, [r7, #8]
   11af6:	2200      	movs	r2, #0
   11af8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
   11afc:	2300      	movs	r3, #0
   11afe:	60fb      	str	r3, [r7, #12]
   11b00:	e01a      	b.n	11b38 <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
   11b02:	68bb      	ldr	r3, [r7, #8]
   11b04:	68fa      	ldr	r2, [r7, #12]
   11b06:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   11b0a:	ee07 3a90 	vmov	s15, r3
   11b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11b12:	eddf 6a31 	vldr	s13, [pc, #196]	; 11bd8 <ADBoard_SPICallback+0x12c>
   11b16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   11b1a:	68bb      	ldr	r3, [r7, #8]
   11b1c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
   11b20:	ee67 7a27 	vmul.f32	s15, s14, s15
   11b24:	68ba      	ldr	r2, [r7, #8]
   11b26:	68fb      	ldr	r3, [r7, #12]
   11b28:	3304      	adds	r3, #4
   11b2a:	009b      	lsls	r3, r3, #2
   11b2c:	4413      	add	r3, r2
   11b2e:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
   11b32:	68fb      	ldr	r3, [r7, #12]
   11b34:	3301      	adds	r3, #1
   11b36:	60fb      	str	r3, [r7, #12]
   11b38:	68fb      	ldr	r3, [r7, #12]
   11b3a:	2b07      	cmp	r3, #7
   11b3c:	dde1      	ble.n	11b02 <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
   11b3e:	4b25      	ldr	r3, [pc, #148]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11b40:	681b      	ldr	r3, [r3, #0]
   11b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
   11b46:	3301      	adds	r3, #1
   11b48:	2b00      	cmp	r3, #0
   11b4a:	dc19      	bgt.n	11b80 <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
   11b4c:	4b21      	ldr	r3, [pc, #132]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11b4e:	681b      	ldr	r3, [r3, #0]
   11b50:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
   11b54:	4b1f      	ldr	r3, [pc, #124]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11b56:	681b      	ldr	r3, [r3, #0]
   11b58:	3201      	adds	r2, #1
   11b5a:	b292      	uxth	r2, r2
   11b5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
   11b60:	4b1c      	ldr	r3, [pc, #112]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11b62:	681a      	ldr	r2, [r3, #0]
   11b64:	4b1b      	ldr	r3, [pc, #108]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11b66:	681b      	ldr	r3, [r3, #0]
   11b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
   11b6c:	4619      	mov	r1, r3
   11b6e:	460b      	mov	r3, r1
   11b70:	009b      	lsls	r3, r3, #2
   11b72:	440b      	add	r3, r1
   11b74:	011b      	lsls	r3, r3, #4
   11b76:	4413      	add	r3, r2
   11b78:	4618      	mov	r0, r3
   11b7a:	f7ff ff7e 	bl	11a7a <AD7616_getVoltage>
   11b7e:	e01a      	b.n	11bb6 <ADBoard_SPICallback+0x10a>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
   11b80:	4b14      	ldr	r3, [pc, #80]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11b82:	681b      	ldr	r3, [r3, #0]
   11b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						ptADBoardDevices->ucDataFlag = 1;
   11b8c:	4b11      	ldr	r3, [pc, #68]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11b8e:	681b      	ldr	r3, [r3, #0]
   11b90:	2201      	movs	r2, #1
   11b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
						ptADBoardDevices->ADTimeEnd=micros();
   11b96:	f001 f91b 	bl	12dd0 <micros>
   11b9a:	4602      	mov	r2, r0
   11b9c:	4b0d      	ldr	r3, [pc, #52]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11b9e:	681b      	ldr	r3, [r3, #0]
   11ba0:	65da      	str	r2, [r3, #92]	; 0x5c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
   11ba2:	4b0c      	ldr	r3, [pc, #48]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11ba4:	681b      	ldr	r3, [r3, #0]
   11ba6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
   11ba8:	4b0a      	ldr	r3, [pc, #40]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11baa:	681b      	ldr	r3, [r3, #0]
   11bac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   11bae:	4b09      	ldr	r3, [pc, #36]	; (11bd4 <ADBoard_SPICallback+0x128>)
   11bb0:	681b      	ldr	r3, [r3, #0]
   11bb2:	1a8a      	subs	r2, r1, r2
   11bb4:	655a      	str	r2, [r3, #84]	; 0x54
					}
					ret=0;
   11bb6:	2300      	movs	r3, #0
   11bb8:	617b      	str	r3, [r7, #20]
					break;
   11bba:	e006      	b.n	11bca <ADBoard_SPICallback+0x11e>
		for(int i=0;i<ADBOARD_NUM;i++)
   11bbc:	693b      	ldr	r3, [r7, #16]
   11bbe:	3301      	adds	r3, #1
   11bc0:	613b      	str	r3, [r7, #16]
   11bc2:	693b      	ldr	r3, [r7, #16]
   11bc4:	2b00      	cmp	r3, #0
   11bc6:	f77f af7a 	ble.w	11abe <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
   11bca:	697b      	ldr	r3, [r7, #20]
}
   11bcc:	4618      	mov	r0, r3
   11bce:	3718      	adds	r7, #24
   11bd0:	46bd      	mov	sp, r7
   11bd2:	bd80      	pop	{r7, pc}
   11bd4:	00029ae4 	.word	0x00029ae4
   11bd8:	47800000 	.word	0x47800000

00011bdc <ADBoard_Reset>:

void ADBoard_Reset()
{
   11bdc:	b580      	push	{r7, lr}
   11bde:	b082      	sub	sp, #8
   11be0:	af00      	add	r7, sp, #0
	delay_us(5);
	AD_RESET_LOW(ptADDev);
	delay_us(5);
	AD_RESET_HIGH(ptADDev);}
 else if (ADBOARD_TYPE==AD7606){
	AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[0]);
   11be2:	4b0b      	ldr	r3, [pc, #44]	; (11c10 <ADBoard_Reset+0x34>)
   11be4:	681b      	ldr	r3, [r3, #0]
   11be6:	607b      	str	r3, [r7, #4]
	AD_RESET_LOW(ptADDev);
   11be8:	6878      	ldr	r0, [r7, #4]
   11bea:	f7ff ff28 	bl	11a3e <AD_RESET_LOW>
	delay_us(5);
   11bee:	2005      	movs	r0, #5
   11bf0:	f001 f904 	bl	12dfc <delay_us>
	AD_RESET_HIGH(ptADDev);
   11bf4:	6878      	ldr	r0, [r7, #4]
   11bf6:	f7ff ff31 	bl	11a5c <AD_RESET_HIGH>
	delay_us(5);
   11bfa:	2005      	movs	r0, #5
   11bfc:	f001 f8fe 	bl	12dfc <delay_us>
	AD_RESET_LOW(ptADDev);}
   11c00:	6878      	ldr	r0, [r7, #4]
   11c02:	f7ff ff1c 	bl	11a3e <AD_RESET_LOW>

}
   11c06:	bf00      	nop
   11c08:	3708      	adds	r7, #8
   11c0a:	46bd      	mov	sp, r7
   11c0c:	bd80      	pop	{r7, pc}
   11c0e:	bf00      	nop
   11c10:	00029ae4 	.word	0x00029ae4

00011c14 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
   11c14:	b580      	push	{r7, lr}
   11c16:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
   11c18:	4b10      	ldr	r3, [pc, #64]	; (11c5c <ADBoard_updateVoltage+0x48>)
   11c1a:	681b      	ldr	r3, [r3, #0]
   11c1c:	2200      	movs	r2, #0
   11c1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->curADBoardNum = 0;
   11c22:	4b0e      	ldr	r3, [pc, #56]	; (11c5c <ADBoard_updateVoltage+0x48>)
   11c24:	681b      	ldr	r3, [r3, #0]
   11c26:	2200      	movs	r2, #0
   11c28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ADTimeStart=micros();
   11c2c:	f001 f8d0 	bl	12dd0 <micros>
   11c30:	4602      	mov	r2, r0
   11c32:	4b0a      	ldr	r3, [pc, #40]	; (11c5c <ADBoard_updateVoltage+0x48>)
   11c34:	681b      	ldr	r3, [r3, #0]
   11c36:	659a      	str	r2, [r3, #88]	; 0x58
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
   11c38:	4b08      	ldr	r3, [pc, #32]	; (11c5c <ADBoard_updateVoltage+0x48>)
   11c3a:	681a      	ldr	r2, [r3, #0]
   11c3c:	4b07      	ldr	r3, [pc, #28]	; (11c5c <ADBoard_updateVoltage+0x48>)
   11c3e:	681b      	ldr	r3, [r3, #0]
   11c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
   11c44:	4619      	mov	r1, r3
   11c46:	460b      	mov	r3, r1
   11c48:	009b      	lsls	r3, r3, #2
   11c4a:	440b      	add	r3, r1
   11c4c:	011b      	lsls	r3, r3, #4
   11c4e:	4413      	add	r3, r2
   11c50:	4618      	mov	r0, r3
   11c52:	f7ff ff12 	bl	11a7a <AD7616_getVoltage>
}
   11c56:	bf00      	nop
   11c58:	bd80      	pop	{r7, pc}
   11c5a:	bf00      	nop
   11c5c:	00029ae4 	.word	0x00029ae4

00011c60 <ADBoard_Init>:
	else
		return 0;
}

void ADBoard_Init()
{
   11c60:	b580      	push	{r7, lr}
   11c62:	b082      	sub	sp, #8
   11c64:	af00      	add	r7, sp, #0
	uint8_t CONV_DO_x=11;
   11c66:	230b      	movs	r3, #11
   11c68:	71fb      	strb	r3, [r7, #7]
	uint8_t RESET_DO_x=12;
   11c6a:	230c      	movs	r3, #12
   11c6c:	71bb      	strb	r3, [r7, #6]
	uint8_t CS_DO_x=13;
   11c6e:	230d      	movs	r3, #13
   11c70:	717b      	strb	r3, [r7, #5]
	uint8_t BUSY_INT_x=3;
   11c72:	2303      	movs	r3, #3
   11c74:	713b      	strb	r3, [r7, #4]
	ptADBoardDevices->curADBoardNum=-1;
   11c76:	4b28      	ldr	r3, [pc, #160]	; (11d18 <ADBoard_Init+0xb8>)
   11c78:	681b      	ldr	r3, [r3, #0]
   11c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11c7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ucDataFlag = 0;
   11c82:	4b25      	ldr	r3, [pc, #148]	; (11d18 <ADBoard_Init+0xb8>)
   11c84:	681b      	ldr	r3, [r3, #0]
   11c86:	2200      	movs	r2, #0
   11c88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->ADTime=0;
   11c8c:	4b22      	ldr	r3, [pc, #136]	; (11d18 <ADBoard_Init+0xb8>)
   11c8e:	681b      	ldr	r3, [r3, #0]
   11c90:	2200      	movs	r2, #0
   11c92:	655a      	str	r2, [r3, #84]	; 0x54
	ptADBoardDevices->ADTimeStart=0;
   11c94:	4b20      	ldr	r3, [pc, #128]	; (11d18 <ADBoard_Init+0xb8>)
   11c96:	681b      	ldr	r3, [r3, #0]
   11c98:	2200      	movs	r2, #0
   11c9a:	659a      	str	r2, [r3, #88]	; 0x58
	ptADBoardDevices->ADTimeEnd=0;
   11c9c:	4b1e      	ldr	r3, [pc, #120]	; (11d18 <ADBoard_Init+0xb8>)
   11c9e:	681b      	ldr	r3, [r3, #0]
   11ca0:	2200      	movs	r2, #0
   11ca2:	65da      	str	r2, [r3, #92]	; 0x5c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -10;
   11ca4:	4b1c      	ldr	r3, [pc, #112]	; (11d18 <ADBoard_Init+0xb8>)
   11ca6:	681b      	ldr	r3, [r3, #0]
   11ca8:	4a1c      	ldr	r2, [pc, #112]	; (11d1c <ADBoard_Init+0xbc>)
   11caa:	631a      	str	r2, [r3, #48]	; 0x30
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 10;
   11cac:	4b1a      	ldr	r3, [pc, #104]	; (11d18 <ADBoard_Init+0xb8>)
   11cae:	681b      	ldr	r3, [r3, #0]
   11cb0:	4a1b      	ldr	r2, [pc, #108]	; (11d20 <ADBoard_Init+0xc0>)
   11cb2:	635a      	str	r2, [r3, #52]	; 0x34
	ptADBoardDevices->ADBoards[0].fRange = ptADBoardDevices->ADBoards[0].fMaxVoltage-ptADBoardDevices->ADBoards[0].fMinVoltage;
   11cb4:	4b18      	ldr	r3, [pc, #96]	; (11d18 <ADBoard_Init+0xb8>)
   11cb6:	681b      	ldr	r3, [r3, #0]
   11cb8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
   11cbc:	4b16      	ldr	r3, [pc, #88]	; (11d18 <ADBoard_Init+0xb8>)
   11cbe:	681b      	ldr	r3, [r3, #0]
   11cc0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
   11cc4:	4b14      	ldr	r3, [pc, #80]	; (11d18 <ADBoard_Init+0xb8>)
   11cc6:	681b      	ldr	r3, [r3, #0]
   11cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
   11ccc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi4;
   11cd0:	4b11      	ldr	r3, [pc, #68]	; (11d18 <ADBoard_Init+0xb8>)
   11cd2:	681b      	ldr	r3, [r3, #0]
   11cd4:	4a13      	ldr	r2, [pc, #76]	; (11d24 <ADBoard_Init+0xc4>)
   11cd6:	641a      	str	r2, [r3, #64]	; 0x40
	ptADBoardDevices->ADBoards[0].CONV_DO_x=CONV_DO_x;
   11cd8:	4b0f      	ldr	r3, [pc, #60]	; (11d18 <ADBoard_Init+0xb8>)
   11cda:	681b      	ldr	r3, [r3, #0]
   11cdc:	79fa      	ldrb	r2, [r7, #7]
   11cde:	b292      	uxth	r2, r2
   11ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	ptADBoardDevices->ADBoards[0].CS_DO_x = CS_DO_x;
   11ce4:	4b0c      	ldr	r3, [pc, #48]	; (11d18 <ADBoard_Init+0xb8>)
   11ce6:	681b      	ldr	r3, [r3, #0]
   11ce8:	797a      	ldrb	r2, [r7, #5]
   11cea:	b292      	uxth	r2, r2
   11cec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptADBoardDevices->ADBoards[0].RESET_DO_x = RESET_DO_x;
   11cf0:	4b09      	ldr	r3, [pc, #36]	; (11d18 <ADBoard_Init+0xb8>)
   11cf2:	681b      	ldr	r3, [r3, #0]
   11cf4:	79ba      	ldrb	r2, [r7, #6]
   11cf6:	b292      	uxth	r2, r2
   11cf8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	ptADBoardDevices->ADBoards[0].BUSY_INT_x = BUSY_INT_x;
   11cfc:	4b06      	ldr	r3, [pc, #24]	; (11d18 <ADBoard_Init+0xb8>)
   11cfe:	681b      	ldr	r3, [r3, #0]
   11d00:	793a      	ldrb	r2, [r7, #4]
   11d02:	b292      	uxth	r2, r2
   11d04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	ADBoard_Reset();
   11d08:	f7ff ff68 	bl	11bdc <ADBoard_Reset>

	ADBoard_updateVoltage();
   11d0c:	f7ff ff82 	bl	11c14 <ADBoard_updateVoltage>
}
   11d10:	bf00      	nop
   11d12:	3708      	adds	r7, #8
   11d14:	46bd      	mov	sp, r7
   11d16:	bd80      	pop	{r7, pc}
   11d18:	00029ae4 	.word	0x00029ae4
   11d1c:	c1200000 	.word	0xc1200000
   11d20:	41200000 	.word	0x41200000
   11d24:	00033964 	.word	0x00033964

00011d28 <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
   11d28:	b5b0      	push	{r4, r5, r7, lr}
   11d2a:	b084      	sub	sp, #16
   11d2c:	af00      	add	r7, sp, #0
   11d2e:	60f8      	str	r0, [r7, #12]
   11d30:	60b9      	str	r1, [r7, #8]
   11d32:	607a      	str	r2, [r7, #4]
   11d34:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
   11d36:	68fb      	ldr	r3, [r7, #12]
   11d38:	3304      	adds	r3, #4
   11d3a:	68b9      	ldr	r1, [r7, #8]
   11d3c:	4618      	mov	r0, r3
   11d3e:	f001 f8df 	bl	12f00 <_ZN14SOLENOID_VALVEC1Ei>
   11d42:	68fb      	ldr	r3, [r7, #12]
   11d44:	331c      	adds	r3, #28
   11d46:	6879      	ldr	r1, [r7, #4]
   11d48:	4618      	mov	r0, r3
   11d4a:	f001 f8d9 	bl	12f00 <_ZN14SOLENOID_VALVEC1Ei>
   11d4e:	68fb      	ldr	r3, [r7, #12]
   11d50:	3334      	adds	r3, #52	; 0x34
   11d52:	6839      	ldr	r1, [r7, #0]
   11d54:	4618      	mov	r0, r3
   11d56:	f000 fb8f 	bl	12478 <_ZN15PRESSURE_SENSORC1Ei>
   11d5a:	68fb      	ldr	r3, [r7, #12]
   11d5c:	3350      	adds	r3, #80	; 0x50
   11d5e:	4618      	mov	r0, r3
   11d60:	f002 fee6 	bl	14b30 <_ZN18PRESSURE_SENSORSPIC1Ev>
   11d64:	68fa      	ldr	r2, [r7, #12]
   11d66:	f241 0364 	movw	r3, #4196	; 0x1064
   11d6a:	4413      	add	r3, r2
   11d6c:	4a65      	ldr	r2, [pc, #404]	; (11f04 <_ZN7CHAMBERC1Eiii+0x1dc>)
   11d6e:	461c      	mov	r4, r3
   11d70:	4615      	mov	r5, r2
   11d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11d7e:	682b      	ldr	r3, [r5, #0]
   11d80:	6023      	str	r3, [r4, #0]
   11d82:	68fa      	ldr	r2, [r7, #12]
   11d84:	f241 0398 	movw	r3, #4248	; 0x1098
   11d88:	4413      	add	r3, r2
   11d8a:	4a5f      	ldr	r2, [pc, #380]	; (11f08 <_ZN7CHAMBERC1Eiii+0x1e0>)
   11d8c:	461c      	mov	r4, r3
   11d8e:	4615      	mov	r5, r2
   11d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11d9c:	682b      	ldr	r3, [r5, #0]
   11d9e:	6023      	str	r3, [r4, #0]
{

	length=0.3;
   11da0:	68fa      	ldr	r2, [r7, #12]
   11da2:	f241 03cc 	movw	r3, #4300	; 0x10cc
   11da6:	4413      	add	r3, r2
   11da8:	4a58      	ldr	r2, [pc, #352]	; (11f0c <_ZN7CHAMBERC1Eiii+0x1e4>)
   11daa:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
   11dac:	68fa      	ldr	r2, [r7, #12]
   11dae:	f241 03cc 	movw	r3, #4300	; 0x10cc
   11db2:	4413      	add	r3, r2
   11db4:	681a      	ldr	r2, [r3, #0]
   11db6:	68f9      	ldr	r1, [r7, #12]
   11db8:	f241 03d0 	movw	r3, #4304	; 0x10d0
   11dbc:	440b      	add	r3, r1
   11dbe:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
   11dc0:	68fb      	ldr	r3, [r7, #12]
   11dc2:	4a53      	ldr	r2, [pc, #332]	; (11f10 <_ZN7CHAMBERC1Eiii+0x1e8>)
   11dc4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressure=0;
   11dc8:	68fb      	ldr	r3, [r7, #12]
   11dca:	f04f 0200 	mov.w	r2, #0
   11dce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
   11dd2:	68fb      	ldr	r3, [r7, #12]
   11dd4:	f04f 0200 	mov.w	r2, #0
   11dd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
   11ddc:	68fb      	ldr	r3, [r7, #12]
   11dde:	f04f 0200 	mov.w	r2, #0
   11de2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
   11de6:	68fb      	ldr	r3, [r7, #12]
   11de8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   11dec:	68fb      	ldr	r3, [r7, #12]
   11dee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pressureDeadZone = 2000;
   11df2:	68fb      	ldr	r3, [r7, #12]
   11df4:	4a47      	ldr	r2, [pc, #284]	; (11f14 <_ZN7CHAMBERC1Eiii+0x1ec>)
   11df6:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
   11df8:	68fb      	ldr	r3, [r7, #12]
   11dfa:	4a47      	ldr	r2, [pc, #284]	; (11f18 <_ZN7CHAMBERC1Eiii+0x1f0>)
   11dfc:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
   11dfe:	68fb      	ldr	r3, [r7, #12]
   11e00:	4a46      	ldr	r2, [pc, #280]	; (11f1c <_ZN7CHAMBERC1Eiii+0x1f4>)
   11e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
   11e06:	68fa      	ldr	r2, [r7, #12]
   11e08:	f241 0354 	movw	r3, #4180	; 0x1054
   11e0c:	4413      	add	r3, r2
   11e0e:	2201      	movs	r2, #1
   11e10:	601a      	str	r2, [r3, #0]
	opening = 0;
   11e12:	68fb      	ldr	r3, [r7, #12]
   11e14:	f04f 0200 	mov.w	r2, #0
   11e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
   11e1c:	68fb      	ldr	r3, [r7, #12]
   11e1e:	2201      	movs	r2, #1
   11e20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
   11e24:	68bb      	ldr	r3, [r7, #8]
   11e26:	2b00      	cmp	r3, #0
   11e28:	da00      	bge.n	11e2c <_ZN7CHAMBERC1Eiii+0x104>
   11e2a:	3301      	adds	r3, #1
   11e2c:	105b      	asrs	r3, r3, #1
   11e2e:	4a3c      	ldr	r2, [pc, #240]	; (11f20 <_ZN7CHAMBERC1Eiii+0x1f8>)
   11e30:	011b      	lsls	r3, r3, #4
   11e32:	4413      	add	r3, r2
   11e34:	681a      	ldr	r2, [r3, #0]
   11e36:	68fb      	ldr	r3, [r7, #12]
   11e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
   11e3c:	68bb      	ldr	r3, [r7, #8]
   11e3e:	2b00      	cmp	r3, #0
   11e40:	da00      	bge.n	11e44 <_ZN7CHAMBERC1Eiii+0x11c>
   11e42:	3301      	adds	r3, #1
   11e44:	105b      	asrs	r3, r3, #1
   11e46:	4a36      	ldr	r2, [pc, #216]	; (11f20 <_ZN7CHAMBERC1Eiii+0x1f8>)
   11e48:	011b      	lsls	r3, r3, #4
   11e4a:	4413      	add	r3, r2
   11e4c:	3304      	adds	r3, #4
   11e4e:	681a      	ldr	r2, [r3, #0]
   11e50:	68fb      	ldr	r3, [r7, #12]
   11e52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
   11e56:	68bb      	ldr	r3, [r7, #8]
   11e58:	2b00      	cmp	r3, #0
   11e5a:	da00      	bge.n	11e5e <_ZN7CHAMBERC1Eiii+0x136>
   11e5c:	3301      	adds	r3, #1
   11e5e:	105b      	asrs	r3, r3, #1
   11e60:	4a2f      	ldr	r2, [pc, #188]	; (11f20 <_ZN7CHAMBERC1Eiii+0x1f8>)
   11e62:	011b      	lsls	r3, r3, #4
   11e64:	4413      	add	r3, r2
   11e66:	3308      	adds	r3, #8
   11e68:	681a      	ldr	r2, [r3, #0]
   11e6a:	68fb      	ldr	r3, [r7, #12]
   11e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
   11e70:	68bb      	ldr	r3, [r7, #8]
   11e72:	2b00      	cmp	r3, #0
   11e74:	da00      	bge.n	11e78 <_ZN7CHAMBERC1Eiii+0x150>
   11e76:	3301      	adds	r3, #1
   11e78:	105b      	asrs	r3, r3, #1
   11e7a:	4a29      	ldr	r2, [pc, #164]	; (11f20 <_ZN7CHAMBERC1Eiii+0x1f8>)
   11e7c:	011b      	lsls	r3, r3, #4
   11e7e:	4413      	add	r3, r2
   11e80:	330c      	adds	r3, #12
   11e82:	681a      	ldr	r2, [r3, #0]
   11e84:	68fb      	ldr	r3, [r7, #12]
   11e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
   11e8a:	68fb      	ldr	r3, [r7, #12]
   11e8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   11e90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
   11e94:	eddf 4a23 	vldr	s9, [pc, #140]	; 11f24 <_ZN7CHAMBERC1Eiii+0x1fc>
   11e98:	ed9f 4a23 	vldr	s8, [pc, #140]	; 11f28 <_ZN7CHAMBERC1Eiii+0x200>
   11e9c:	eddf 3a23 	vldr	s7, [pc, #140]	; 11f2c <_ZN7CHAMBERC1Eiii+0x204>
   11ea0:	ed9f 3a22 	vldr	s6, [pc, #136]	; 11f2c <_ZN7CHAMBERC1Eiii+0x204>
   11ea4:	eddf 2a22 	vldr	s5, [pc, #136]	; 11f30 <_ZN7CHAMBERC1Eiii+0x208>
   11ea8:	ed9f 2a22 	vldr	s4, [pc, #136]	; 11f34 <_ZN7CHAMBERC1Eiii+0x20c>
   11eac:	eddf 1a22 	vldr	s3, [pc, #136]	; 11f38 <_ZN7CHAMBERC1Eiii+0x210>
   11eb0:	ed9f 1a22 	vldr	s2, [pc, #136]	; 11f3c <_ZN7CHAMBERC1Eiii+0x214>
   11eb4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 11f2c <_ZN7CHAMBERC1Eiii+0x204>
   11eb8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 11f40 <_ZN7CHAMBERC1Eiii+0x218>
   11ebc:	f000 fa7a 	bl	123b4 <NewPressureController>
   11ec0:	4602      	mov	r2, r0
   11ec2:	68fb      	ldr	r3, [r7, #12]
   11ec4:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
   11ec6:	68fa      	ldr	r2, [r7, #12]
   11ec8:	f241 035c 	movw	r3, #4188	; 0x105c
   11ecc:	4413      	add	r3, r2
   11ece:	2200      	movs	r2, #0
   11ed0:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
   11ed2:	68fa      	ldr	r2, [r7, #12]
   11ed4:	f241 0358 	movw	r3, #4184	; 0x1058
   11ed8:	4413      	add	r3, r2
   11eda:	2200      	movs	r2, #0
   11edc:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
   11ede:	68fb      	ldr	r3, [r7, #12]
   11ee0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
   11ee4:	2200      	movs	r2, #0
   11ee6:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
   11ee8:	68fb      	ldr	r3, [r7, #12]
   11eea:	33b4      	adds	r3, #180	; 0xb4
   11eec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   11ef0:	2100      	movs	r1, #0
   11ef2:	4618      	mov	r0, r3
   11ef4:	f002 ff59 	bl	14daa <memset>

}
   11ef8:	68fb      	ldr	r3, [r7, #12]
   11efa:	4618      	mov	r0, r3
   11efc:	3710      	adds	r7, #16
   11efe:	46bd      	mov	sp, r7
   11f00:	bdb0      	pop	{r4, r5, r7, pc}
   11f02:	bf00      	nop
   11f04:	0001966c 	.word	0x0001966c
   11f08:	000196a0 	.word	0x000196a0
   11f0c:	3e99999a 	.word	0x3e99999a
   11f10:	3c23d70a 	.word	0x3c23d70a
   11f14:	44fa0000 	.word	0x44fa0000
   11f18:	46ea6000 	.word	0x46ea6000
   11f1c:	c6ea6000 	.word	0xc6ea6000
   11f20:	00029ae8 	.word	0x00029ae8
   11f24:	3e99999a 	.word	0x3e99999a
   11f28:	387ba882 	.word	0x387ba882
   11f2c:	00000000 	.word	0x00000000
   11f30:	37a7c5ac 	.word	0x37a7c5ac
   11f34:	471c4000 	.word	0x471c4000
   11f38:	501502f9 	.word	0x501502f9
   11f3c:	3a83126f 	.word	0x3a83126f
   11f40:	48435000 	.word	0x48435000

00011f44 <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
   11f44:	b580      	push	{r7, lr}
   11f46:	b084      	sub	sp, #16
   11f48:	af00      	add	r7, sp, #0
   11f4a:	60f8      	str	r0, [r7, #12]
   11f4c:	60b9      	str	r1, [r7, #8]
   11f4e:	607a      	str	r2, [r7, #4]
   11f50:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
   11f52:	68fb      	ldr	r3, [r7, #12]
   11f54:	3304      	adds	r3, #4
   11f56:	68b9      	ldr	r1, [r7, #8]
   11f58:	4618      	mov	r0, r3
   11f5a:	f000 fffb 	bl	12f54 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
   11f5e:	68fb      	ldr	r3, [r7, #12]
   11f60:	331c      	adds	r3, #28
   11f62:	6879      	ldr	r1, [r7, #4]
   11f64:	4618      	mov	r0, r3
   11f66:	f000 fff5 	bl	12f54 <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
   11f6a:	68fb      	ldr	r3, [r7, #12]
   11f6c:	3334      	adds	r3, #52	; 0x34
   11f6e:	6839      	ldr	r1, [r7, #0]
   11f70:	4618      	mov	r0, r3
   11f72:	f000 faa7 	bl	124c4 <_ZN15PRESSURE_SENSOR6attachEi>
}
   11f76:	bf00      	nop
   11f78:	3710      	adds	r7, #16
   11f7a:	46bd      	mov	sp, r7
   11f7c:	bd80      	pop	{r7, pc}
	...

00011f80 <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
   11f80:	b580      	push	{r7, lr}
   11f82:	b084      	sub	sp, #16
   11f84:	af00      	add	r7, sp, #0
   11f86:	6078      	str	r0, [r7, #4]
   11f88:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
   11f8c:	edd7 7a00 	vldr	s15, [r7]
   11f90:	ed9f 7a78 	vldr	s14, [pc, #480]	; 12174 <_ZN7CHAMBER13writePressureEf+0x1f4>
   11f94:	eef4 7ac7 	vcmpe.f32	s15, s14
   11f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f9c:	d501      	bpl.n	11fa2 <_ZN7CHAMBER13writePressureEf+0x22>
   11f9e:	4b76      	ldr	r3, [pc, #472]	; (12178 <_ZN7CHAMBER13writePressureEf+0x1f8>)
   11fa0:	e00b      	b.n	11fba <_ZN7CHAMBER13writePressureEf+0x3a>
   11fa2:	edd7 7a00 	vldr	s15, [r7]
   11fa6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 1217c <_ZN7CHAMBER13writePressureEf+0x1fc>
   11faa:	eef4 7ac7 	vcmpe.f32	s15, s14
   11fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11fb2:	dd01      	ble.n	11fb8 <_ZN7CHAMBER13writePressureEf+0x38>
   11fb4:	4b72      	ldr	r3, [pc, #456]	; (12180 <_ZN7CHAMBER13writePressureEf+0x200>)
   11fb6:	e000      	b.n	11fba <_ZN7CHAMBER13writePressureEf+0x3a>
   11fb8:	683b      	ldr	r3, [r7, #0]
   11fba:	687a      	ldr	r2, [r7, #4]
   11fbc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

	float pErr = pressureCommand-pressure;
   11fc0:	687b      	ldr	r3, [r7, #4]
   11fc2:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
   11fc6:	687b      	ldr	r3, [r7, #4]
   11fc8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
   11fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
   11fd0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
   11fd4:	687b      	ldr	r3, [r7, #4]
   11fd6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
   11fda:	edd7 7a03 	vldr	s15, [r7, #12]
   11fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
   11fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11fe6:	d54e      	bpl.n	12086 <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
   11fe8:	687b      	ldr	r3, [r7, #4]
   11fea:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
   11fee:	687b      	ldr	r3, [r7, #4]
   11ff0:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
   11ff4:	edd7 7a03 	vldr	s15, [r7, #12]
   11ff8:	eef4 6ae7 	vcmpe.f32	s13, s15
   11ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12000:	dd03      	ble.n	1200a <_ZN7CHAMBER13writePressureEf+0x8a>
   12002:	687b      	ldr	r3, [r7, #4]
   12004:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
   12008:	e019      	b.n	1203e <_ZN7CHAMBER13writePressureEf+0xbe>
   1200a:	687b      	ldr	r3, [r7, #4]
   1200c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
   12010:	687b      	ldr	r3, [r7, #4]
   12012:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
   12016:	ee66 6aa7 	vmul.f32	s13, s13, s15
   1201a:	edd7 7a03 	vldr	s15, [r7, #12]
   1201e:	eef4 6ae7 	vcmpe.f32	s13, s15
   12022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12026:	d508      	bpl.n	1203a <_ZN7CHAMBER13writePressureEf+0xba>
   12028:	687b      	ldr	r3, [r7, #4]
   1202a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
   1202e:	687b      	ldr	r3, [r7, #4]
   12030:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
   12034:	ee66 7aa7 	vmul.f32	s15, s13, s15
   12038:	e001      	b.n	1203e <_ZN7CHAMBER13writePressureEf+0xbe>
   1203a:	edd7 7a03 	vldr	s15, [r7, #12]
   1203e:	687b      	ldr	r3, [r7, #4]
   12040:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
   12044:	ee77 6ae6 	vsub.f32	s13, s15, s13
   12048:	687b      	ldr	r3, [r7, #4]
   1204a:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
   1204e:	687b      	ldr	r3, [r7, #4]
   12050:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
   12054:	ee76 7a67 	vsub.f32	s15, s12, s15
   12058:	ee26 6aa7 	vmul.f32	s12, s13, s15
   1205c:	687b      	ldr	r3, [r7, #4]
   1205e:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
   12062:	687b      	ldr	r3, [r7, #4]
   12064:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
   12068:	ee66 6aa7 	vmul.f32	s13, s13, s15
   1206c:	687b      	ldr	r3, [r7, #4]
   1206e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
   12072:	ee76 6ae7 	vsub.f32	s13, s13, s15
   12076:	eec6 7a26 	vdiv.f32	s15, s12, s13
   1207a:	ee77 7a27 	vadd.f32	s15, s14, s15
   1207e:	687b      	ldr	r3, [r7, #4]
   12080:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
   12084:	e06a      	b.n	1215c <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
   12086:	687b      	ldr	r3, [r7, #4]
   12088:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
   1208c:	eeb1 7a67 	vneg.f32	s14, s15
   12090:	edd7 7a03 	vldr	s15, [r7, #12]
   12094:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1209c:	dd59      	ble.n	12152 <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
   1209e:	687b      	ldr	r3, [r7, #4]
   120a0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
   120a4:	687b      	ldr	r3, [r7, #4]
   120a6:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
   120aa:	687b      	ldr	r3, [r7, #4]
   120ac:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
   120b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
   120b4:	edd7 7a03 	vldr	s15, [r7, #12]
   120b8:	eef4 6ae7 	vcmpe.f32	s13, s15
   120bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   120c0:	dd08      	ble.n	120d4 <_ZN7CHAMBER13writePressureEf+0x154>
   120c2:	687b      	ldr	r3, [r7, #4]
   120c4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
   120c8:	687b      	ldr	r3, [r7, #4]
   120ca:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
   120ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
   120d2:	e013      	b.n	120fc <_ZN7CHAMBER13writePressureEf+0x17c>
   120d4:	687b      	ldr	r3, [r7, #4]
   120d6:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
   120da:	eef1 6a67 	vneg.f32	s13, s15
   120de:	edd7 7a03 	vldr	s15, [r7, #12]
   120e2:	eef4 6ae7 	vcmpe.f32	s13, s15
   120e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   120ea:	d505      	bpl.n	120f8 <_ZN7CHAMBER13writePressureEf+0x178>
   120ec:	687b      	ldr	r3, [r7, #4]
   120ee:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
   120f2:	eef1 7a67 	vneg.f32	s15, s15
   120f6:	e001      	b.n	120fc <_ZN7CHAMBER13writePressureEf+0x17c>
   120f8:	edd7 7a03 	vldr	s15, [r7, #12]
   120fc:	687b      	ldr	r3, [r7, #4]
   120fe:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
   12102:	687b      	ldr	r3, [r7, #4]
   12104:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
   12108:	ee66 6a26 	vmul.f32	s13, s12, s13
   1210c:	ee77 6ae6 	vsub.f32	s13, s15, s13
   12110:	687b      	ldr	r3, [r7, #4]
   12112:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
   12116:	687b      	ldr	r3, [r7, #4]
   12118:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
   1211c:	ee76 7a67 	vsub.f32	s15, s12, s15
   12120:	ee26 6aa7 	vmul.f32	s12, s13, s15
   12124:	687b      	ldr	r3, [r7, #4]
   12126:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
   1212a:	eef1 6a67 	vneg.f32	s13, s15
   1212e:	687b      	ldr	r3, [r7, #4]
   12130:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
   12134:	687b      	ldr	r3, [r7, #4]
   12136:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
   1213a:	ee65 7aa7 	vmul.f32	s15, s11, s15
   1213e:	ee76 6ae7 	vsub.f32	s13, s13, s15
   12142:	eec6 7a26 	vdiv.f32	s15, s12, s13
   12146:	ee77 7a27 	vadd.f32	s15, s14, s15
   1214a:	687b      	ldr	r3, [r7, #4]
   1214c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
   12150:	e004      	b.n	1215c <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
   12152:	687b      	ldr	r3, [r7, #4]
   12154:	f04f 0200 	mov.w	r2, #0
   12158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
   1215c:	687b      	ldr	r3, [r7, #4]
   1215e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
   12162:	eeb0 0a67 	vmov.f32	s0, s15
   12166:	6878      	ldr	r0, [r7, #4]
   12168:	f000 f80c 	bl	12184 <_ZN7CHAMBER12writeOpeningEf>
}
   1216c:	bf00      	nop
   1216e:	3710      	adds	r7, #16
   12170:	46bd      	mov	sp, r7
   12172:	bd80      	pop	{r7, pc}
   12174:	c7c35000 	.word	0xc7c35000
   12178:	c7c35000 	.word	0xc7c35000
   1217c:	482fc800 	.word	0x482fc800
   12180:	482fc800 	.word	0x482fc800

00012184 <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
   12184:	b580      	push	{r7, lr}
   12186:	b082      	sub	sp, #8
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
   12190:	edd7 7a00 	vldr	s15, [r7]
   12194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   12198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1219c:	dd2b      	ble.n	121f6 <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
   1219e:	edd7 7a00 	vldr	s15, [r7]
   121a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   121a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121aa:	d502      	bpl.n	121b2 <_ZN7CHAMBER12writeOpeningEf+0x2e>
   121ac:	f04f 0300 	mov.w	r3, #0
   121b0:	e00c      	b.n	121cc <_ZN7CHAMBER12writeOpeningEf+0x48>
   121b2:	edd7 7a00 	vldr	s15, [r7]
   121b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   121ba:	eef4 7ac7 	vcmpe.f32	s15, s14
   121be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121c2:	dd02      	ble.n	121ca <_ZN7CHAMBER12writeOpeningEf+0x46>
   121c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   121c8:	e000      	b.n	121cc <_ZN7CHAMBER12writeOpeningEf+0x48>
   121ca:	683b      	ldr	r3, [r7, #0]
   121cc:	687a      	ldr	r2, [r7, #4]
   121ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
   121d2:	687b      	ldr	r3, [r7, #4]
   121d4:	1d1a      	adds	r2, r3, #4
   121d6:	687b      	ldr	r3, [r7, #4]
   121d8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
   121dc:	eeb0 0a67 	vmov.f32	s0, s15
   121e0:	4610      	mov	r0, r2
   121e2:	f000 fec5 	bl	12f70 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
   121e6:	687b      	ldr	r3, [r7, #4]
   121e8:	331c      	adds	r3, #28
   121ea:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 12258 <_ZN7CHAMBER12writeOpeningEf+0xd4>
   121ee:	4618      	mov	r0, r3
   121f0:	f000 febe 	bl	12f70 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
   121f4:	e02c      	b.n	12250 <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
   121f6:	edd7 7a00 	vldr	s15, [r7]
   121fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   121fe:	eef4 7ac7 	vcmpe.f32	s15, s14
   12202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12206:	d501      	bpl.n	1220c <_ZN7CHAMBER12writeOpeningEf+0x88>
   12208:	4b14      	ldr	r3, [pc, #80]	; (1225c <_ZN7CHAMBER12writeOpeningEf+0xd8>)
   1220a:	e00a      	b.n	12222 <_ZN7CHAMBER12writeOpeningEf+0x9e>
   1220c:	edd7 7a00 	vldr	s15, [r7]
   12210:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   12214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12218:	dd02      	ble.n	12220 <_ZN7CHAMBER12writeOpeningEf+0x9c>
   1221a:	f04f 0300 	mov.w	r3, #0
   1221e:	e000      	b.n	12222 <_ZN7CHAMBER12writeOpeningEf+0x9e>
   12220:	683b      	ldr	r3, [r7, #0]
   12222:	687a      	ldr	r2, [r7, #4]
   12224:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
   12228:	687b      	ldr	r3, [r7, #4]
   1222a:	3304      	adds	r3, #4
   1222c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 12258 <_ZN7CHAMBER12writeOpeningEf+0xd4>
   12230:	4618      	mov	r0, r3
   12232:	f000 fe9d 	bl	12f70 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
   12236:	687b      	ldr	r3, [r7, #4]
   12238:	f103 021c 	add.w	r2, r3, #28
   1223c:	687b      	ldr	r3, [r7, #4]
   1223e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
   12242:	eef1 7a67 	vneg.f32	s15, s15
   12246:	eeb0 0a67 	vmov.f32	s0, s15
   1224a:	4610      	mov	r0, r2
   1224c:	f000 fe90 	bl	12f70 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
   12250:	bf00      	nop
   12252:	3708      	adds	r7, #8
   12254:	46bd      	mov	sp, r7
   12256:	bd80      	pop	{r7, pc}
   12258:	00000000 	.word	0x00000000
   1225c:	bf800000 	.word	0xbf800000

00012260 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
   12260:	b480      	push	{r7}
   12262:	b083      	sub	sp, #12
   12264:	af00      	add	r7, sp, #0
   12266:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
   1226a:	edd7 7a01 	vldr	s15, [r7, #4]
   1226e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
   12272:	edd7 7a01 	vldr	s15, [r7, #4]
   12276:	eef0 7ae7 	vabs.f32	s15, s15
   1227a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
   1227e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 122a0 <mySAT+0x40>
   12282:	ee37 6b06 	vadd.f64	d6, d7, d6
   12286:	ee85 7b06 	vdiv.f64	d7, d5, d6
   1228a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
   1228e:	eeb0 0a67 	vmov.f32	s0, s15
   12292:	370c      	adds	r7, #12
   12294:	46bd      	mov	sp, r7
   12296:	f85d 7b04 	ldr.w	r7, [sp], #4
   1229a:	4770      	bx	lr
   1229c:	f3af 8000 	nop.w
   122a0:	47ae147b 	.word	0x47ae147b
   122a4:	3f847ae1 	.word	0x3f847ae1

000122a8 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
   122a8:	b580      	push	{r7, lr}
   122aa:	b08a      	sub	sp, #40	; 0x28
   122ac:	af00      	add	r7, sp, #0
   122ae:	60f8      	str	r0, [r7, #12]
   122b0:	ed87 0a02 	vstr	s0, [r7, #8]
   122b4:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	68ba      	ldr	r2, [r7, #8]
   122bc:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
   122be:	68fb      	ldr	r3, [r7, #12]
   122c0:	687a      	ldr	r2, [r7, #4]
   122c2:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	ed93 7a08 	vldr	s14, [r3, #32]
   122ca:	edd7 7a01 	vldr	s15, [r7, #4]
   122ce:	ee27 7a27 	vmul.f32	s14, s14, s15
   122d2:	68fb      	ldr	r3, [r7, #12]
   122d4:	edd3 6a07 	vldr	s13, [r3, #28]
   122d8:	edd7 7a02 	vldr	s15, [r7, #8]
   122dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
   122e0:	ee37 7a27 	vadd.f32	s14, s14, s15
   122e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 1237c <superTwisting2rdSMCUpdate+0xd4>
   122e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
   122ec:	68fb      	ldr	r3, [r7, #12]
   122ee:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
   122f2:	68fb      	ldr	r3, [r7, #12]
   122f4:	edd3 7a02 	vldr	s15, [r3, #8]
   122f8:	eeb0 0a67 	vmov.f32	s0, s15
   122fc:	f7ff ffb0 	bl	12260 <mySAT>
   12300:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
   12304:	68fb      	ldr	r3, [r7, #12]
   12306:	edd3 7a02 	vldr	s15, [r3, #8]
   1230a:	eeb0 7ae7 	vabs.f32	s14, s15
   1230e:	68fb      	ldr	r3, [r7, #12]
   12310:	edd3 7a04 	vldr	s15, [r3, #16]
   12314:	ee67 7a27 	vmul.f32	s15, s14, s15
   12318:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
   1231c:	f04f 0300 	mov.w	r3, #0
   12320:	617b      	str	r3, [r7, #20]
   12322:	6a3b      	ldr	r3, [r7, #32]
   12324:	61fb      	str	r3, [r7, #28]
   12326:	f107 0314 	add.w	r3, r7, #20
   1232a:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
   1232c:	edd7 7a07 	vldr	s15, [r7, #28]
   12330:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   12334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12338:	db09      	blt.n	1234e <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
   1233a:	ed97 0a07 	vldr	s0, [r7, #28]
   1233e:	f002 fc93 	bl	14c68 <sqrtf>
   12342:	eef0 7a40 	vmov.f32	s15, s0
   12346:	69bb      	ldr	r3, [r7, #24]
   12348:	edc3 7a00 	vstr	s15, [r3]
   1234c:	e003      	b.n	12356 <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
   1234e:	69bb      	ldr	r3, [r7, #24]
   12350:	f04f 0200 	mov.w	r2, #0
   12354:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
   12356:	ed97 7a05 	vldr	s14, [r7, #20]
   1235a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   1235e:	ee67 7a27 	vmul.f32	s15, s14, s15
   12362:	68fb      	ldr	r3, [r7, #12]
   12364:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
   12368:	68fb      	ldr	r3, [r7, #12]
   1236a:	68db      	ldr	r3, [r3, #12]
   1236c:	ee07 3a90 	vmov	s15, r3
}
   12370:	eeb0 0a67 	vmov.f32	s0, s15
   12374:	3728      	adds	r7, #40	; 0x28
   12376:	46bd      	mov	sp, r7
   12378:	bd80      	pop	{r7, pc}
   1237a:	bf00      	nop
   1237c:	447a0000 	.word	0x447a0000

00012380 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
   12380:	b580      	push	{r7, lr}
   12382:	b084      	sub	sp, #16
   12384:	af00      	add	r7, sp, #0
   12386:	60f8      	str	r0, [r7, #12]
   12388:	ed87 0a02 	vstr	s0, [r7, #8]
   1238c:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
   12390:	68fb      	ldr	r3, [r7, #12]
   12392:	3324      	adds	r3, #36	; 0x24
   12394:	edd7 0a01 	vldr	s1, [r7, #4]
   12398:	ed97 0a02 	vldr	s0, [r7, #8]
   1239c:	4618      	mov	r0, r3
   1239e:	f7ff ff83 	bl	122a8 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
   123a2:	68fb      	ldr	r3, [r7, #12]
   123a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   123a6:	ee07 3a90 	vmov	s15, r3
}
   123aa:	eeb0 0a67 	vmov.f32	s0, s15
   123ae:	3710      	adds	r7, #16
   123b0:	46bd      	mov	sp, r7
   123b2:	bd80      	pop	{r7, pc}

000123b4 <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
   123b4:	b580      	push	{r7, lr}
   123b6:	b08c      	sub	sp, #48	; 0x30
   123b8:	af00      	add	r7, sp, #0
   123ba:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
   123be:	edc7 0a08 	vstr	s1, [r7, #32]
   123c2:	ed87 1a07 	vstr	s2, [r7, #28]
   123c6:	edc7 1a06 	vstr	s3, [r7, #24]
   123ca:	ed87 2a05 	vstr	s4, [r7, #20]
   123ce:	edc7 2a04 	vstr	s5, [r7, #16]
   123d2:	ed87 3a03 	vstr	s6, [r7, #12]
   123d6:	edc7 3a02 	vstr	s7, [r7, #8]
   123da:	ed87 4a01 	vstr	s8, [r7, #4]
   123de:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
   123e2:	204c      	movs	r0, #76	; 0x4c
   123e4:	f002 fcce 	bl	14d84 <malloc>
   123e8:	4603      	mov	r3, r0
   123ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
   123ec:	224c      	movs	r2, #76	; 0x4c
   123ee:	2100      	movs	r1, #0
   123f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   123f2:	f002 fcda 	bl	14daa <memset>
	pController->psource = psource;
   123f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   123f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   123fa:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
   123fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   123fe:	6a3a      	ldr	r2, [r7, #32]
   12400:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
   12402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12404:	69fa      	ldr	r2, [r7, #28]
   12406:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
   12408:	ed97 1a07 	vldr	s2, [r7, #28]
   1240c:	edd7 0a05 	vldr	s1, [r7, #20]
   12410:	ed97 0a06 	vldr	s0, [r7, #24]
   12414:	f001 fbca 	bl	13bac <newSimpleKalmanFilter>
   12418:	4602      	mov	r2, r0
   1241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1241c:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
   1241e:	edd7 2a00 	vldr	s5, [r7]
   12422:	ed97 2a01 	vldr	s4, [r7, #4]
   12426:	edd7 1a07 	vldr	s3, [r7, #28]
   1242a:	ed97 1a02 	vldr	s2, [r7, #8]
   1242e:	edd7 0a03 	vldr	s1, [r7, #12]
   12432:	ed97 0a04 	vldr	s0, [r7, #16]
   12436:	f001 fff9 	bl	1442c <newPID>
   1243a:	4602      	mov	r2, r0
   1243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1243e:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
   12440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12442:	69fa      	ldr	r2, [r7, #28]
   12444:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
   12446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12448:	4a08      	ldr	r2, [pc, #32]	; (1246c <NewPressureController+0xb8>)
   1244a:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
   1244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1244e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12452:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
   12454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12456:	4a06      	ldr	r2, [pc, #24]	; (12470 <NewPressureController+0xbc>)
   12458:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
   1245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1245c:	4a05      	ldr	r2, [pc, #20]	; (12474 <NewPressureController+0xc0>)
   1245e:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
   12460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   12462:	4618      	mov	r0, r3
   12464:	3730      	adds	r7, #48	; 0x30
   12466:	46bd      	mov	sp, r7
   12468:	bd80      	pop	{r7, pc}
   1246a:	bf00      	nop
   1246c:	3627c5ac 	.word	0x3627c5ac
   12470:	41a00000 	.word	0x41a00000
   12474:	00012381 	.word	0x00012381

00012478 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
   12478:	b580      	push	{r7, lr}
   1247a:	b082      	sub	sp, #8
   1247c:	af00      	add	r7, sp, #0
   1247e:	6078      	str	r0, [r7, #4]
   12480:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
   12482:	687b      	ldr	r3, [r7, #4]
   12484:	f04f 0200 	mov.w	r2, #0
   12488:	605a      	str	r2, [r3, #4]
   1248a:	687b      	ldr	r3, [r7, #4]
   1248c:	f04f 0200 	mov.w	r2, #0
   12490:	609a      	str	r2, [r3, #8]
{
	attach(num);
   12492:	6839      	ldr	r1, [r7, #0]
   12494:	6878      	ldr	r0, [r7, #4]
   12496:	f000 f815 	bl	124c4 <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
   1249a:	eddf 1a08 	vldr	s3, [pc, #32]	; 124bc <_ZN15PRESSURE_SENSORC1Ei+0x44>
   1249e:	ed9f 1a08 	vldr	s2, [pc, #32]	; 124c0 <_ZN15PRESSURE_SENSORC1Ei+0x48>
   124a2:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
   124a6:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
   124aa:	6878      	ldr	r0, [r7, #4]
   124ac:	f000 f818 	bl	124e0 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
   124b0:	687b      	ldr	r3, [r7, #4]
   124b2:	4618      	mov	r0, r3
   124b4:	3708      	adds	r7, #8
   124b6:	46bd      	mov	sp, r7
   124b8:	bd80      	pop	{r7, pc}
   124ba:	bf00      	nop
   124bc:	48927c00 	.word	0x48927c00
   124c0:	00000000 	.word	0x00000000

000124c4 <_ZN15PRESSURE_SENSOR6attachEi>:
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
	return pressure;
}

void PRESSURE_SENSOR::attach(int num)
{
   124c4:	b480      	push	{r7}
   124c6:	b083      	sub	sp, #12
   124c8:	af00      	add	r7, sp, #0
   124ca:	6078      	str	r0, [r7, #4]
   124cc:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
   124ce:	687b      	ldr	r3, [r7, #4]
   124d0:	683a      	ldr	r2, [r7, #0]
   124d2:	601a      	str	r2, [r3, #0]

}
   124d4:	bf00      	nop
   124d6:	370c      	adds	r7, #12
   124d8:	46bd      	mov	sp, r7
   124da:	f85d 7b04 	ldr.w	r7, [sp], #4
   124de:	4770      	bx	lr

000124e0 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
   124e0:	b480      	push	{r7}
   124e2:	b087      	sub	sp, #28
   124e4:	af00      	add	r7, sp, #0
   124e6:	6178      	str	r0, [r7, #20]
   124e8:	ed87 0a04 	vstr	s0, [r7, #16]
   124ec:	edc7 0a03 	vstr	s1, [r7, #12]
   124f0:	ed87 1a02 	vstr	s2, [r7, #8]
   124f4:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
   124f8:	697b      	ldr	r3, [r7, #20]
   124fa:	693a      	ldr	r2, [r7, #16]
   124fc:	60da      	str	r2, [r3, #12]
	vMax=vmax;
   124fe:	697b      	ldr	r3, [r7, #20]
   12500:	68fa      	ldr	r2, [r7, #12]
   12502:	611a      	str	r2, [r3, #16]
	pMin=pmin;
   12504:	697b      	ldr	r3, [r7, #20]
   12506:	68ba      	ldr	r2, [r7, #8]
   12508:	615a      	str	r2, [r3, #20]
	pMax=pmax;
   1250a:	697b      	ldr	r3, [r7, #20]
   1250c:	687a      	ldr	r2, [r7, #4]
   1250e:	619a      	str	r2, [r3, #24]
}
   12510:	bf00      	nop
   12512:	371c      	adds	r7, #28
   12514:	46bd      	mov	sp, r7
   12516:	f85d 7b04 	ldr.w	r7, [sp], #4
   1251a:	4770      	bx	lr

0001251c <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
   1251c:	b580      	push	{r7, lr}
   1251e:	b084      	sub	sp, #16
   12520:	af00      	add	r7, sp, #0
   12522:	60f8      	str	r0, [r7, #12]
   12524:	60b9      	str	r1, [r7, #8]
   12526:	607a      	str	r2, [r7, #4]
   12528:	68fb      	ldr	r3, [r7, #12]
   1252a:	3304      	adds	r3, #4
   1252c:	2100      	movs	r1, #0
   1252e:	4618      	mov	r0, r3
   12530:	f000 f852 	bl	125d8 <_ZN4PUMPC1Ei>
   12534:	68fb      	ldr	r3, [r7, #12]
   12536:	330c      	adds	r3, #12
   12538:	2100      	movs	r1, #0
   1253a:	4618      	mov	r0, r3
   1253c:	f7ff ff9c 	bl	12478 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
   12540:	687a      	ldr	r2, [r7, #4]
   12542:	68b9      	ldr	r1, [r7, #8]
   12544:	68f8      	ldr	r0, [r7, #12]
   12546:	f000 f817 	bl	12578 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
   1254a:	68fb      	ldr	r3, [r7, #12]
   1254c:	2200      	movs	r2, #0
   1254e:	601a      	str	r2, [r3, #0]
	direction=0;
   12550:	68fb      	ldr	r3, [r7, #12]
   12552:	2200      	movs	r2, #0
   12554:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
   12556:	68fb      	ldr	r3, [r7, #12]
   12558:	f04f 0200 	mov.w	r2, #0
   1255c:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
   1255e:	68fb      	ldr	r3, [r7, #12]
   12560:	f04f 0200 	mov.w	r2, #0
   12564:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
   12566:	68fb      	ldr	r3, [r7, #12]
   12568:	f04f 0200 	mov.w	r2, #0
   1256c:	635a      	str	r2, [r3, #52]	; 0x34
}
   1256e:	68fb      	ldr	r3, [r7, #12]
   12570:	4618      	mov	r0, r3
   12572:	3710      	adds	r7, #16
   12574:	46bd      	mov	sp, r7
   12576:	bd80      	pop	{r7, pc}

00012578 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
   12578:	b580      	push	{r7, lr}
   1257a:	b084      	sub	sp, #16
   1257c:	af00      	add	r7, sp, #0
   1257e:	60f8      	str	r0, [r7, #12]
   12580:	60b9      	str	r1, [r7, #8]
   12582:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
   12584:	68b9      	ldr	r1, [r7, #8]
   12586:	68f8      	ldr	r0, [r7, #12]
   12588:	f000 f808 	bl	1259c <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
   1258c:	6879      	ldr	r1, [r7, #4]
   1258e:	68f8      	ldr	r0, [r7, #12]
   12590:	f000 f813 	bl	125ba <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
   12594:	bf00      	nop
   12596:	3710      	adds	r7, #16
   12598:	46bd      	mov	sp, r7
   1259a:	bd80      	pop	{r7, pc}

0001259c <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
   1259c:	b580      	push	{r7, lr}
   1259e:	b082      	sub	sp, #8
   125a0:	af00      	add	r7, sp, #0
   125a2:	6078      	str	r0, [r7, #4]
   125a4:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
   125a6:	687b      	ldr	r3, [r7, #4]
   125a8:	3304      	adds	r3, #4
   125aa:	6839      	ldr	r1, [r7, #0]
   125ac:	4618      	mov	r0, r3
   125ae:	f000 f824 	bl	125fa <_ZN4PUMP6attachEi>
}
   125b2:	bf00      	nop
   125b4:	3708      	adds	r7, #8
   125b6:	46bd      	mov	sp, r7
   125b8:	bd80      	pop	{r7, pc}

000125ba <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
   125ba:	b580      	push	{r7, lr}
   125bc:	b082      	sub	sp, #8
   125be:	af00      	add	r7, sp, #0
   125c0:	6078      	str	r0, [r7, #4]
   125c2:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
   125c4:	687b      	ldr	r3, [r7, #4]
   125c6:	330c      	adds	r3, #12
   125c8:	6839      	ldr	r1, [r7, #0]
   125ca:	4618      	mov	r0, r3
   125cc:	f7ff ff7a 	bl	124c4 <_ZN15PRESSURE_SENSOR6attachEi>
}
   125d0:	bf00      	nop
   125d2:	3708      	adds	r7, #8
   125d4:	46bd      	mov	sp, r7
   125d6:	bd80      	pop	{r7, pc}

000125d8 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
   125d8:	b580      	push	{r7, lr}
   125da:	b082      	sub	sp, #8
   125dc:	af00      	add	r7, sp, #0
   125de:	6078      	str	r0, [r7, #4]
   125e0:	6039      	str	r1, [r7, #0]
	status=0;
   125e2:	687b      	ldr	r3, [r7, #4]
   125e4:	2200      	movs	r2, #0
   125e6:	605a      	str	r2, [r3, #4]
	attach(num);
   125e8:	6839      	ldr	r1, [r7, #0]
   125ea:	6878      	ldr	r0, [r7, #4]
   125ec:	f000 f805 	bl	125fa <_ZN4PUMP6attachEi>
}
   125f0:	687b      	ldr	r3, [r7, #4]
   125f2:	4618      	mov	r0, r3
   125f4:	3708      	adds	r7, #8
   125f6:	46bd      	mov	sp, r7
   125f8:	bd80      	pop	{r7, pc}

000125fa <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
   125fa:	b480      	push	{r7}
   125fc:	b083      	sub	sp, #12
   125fe:	af00      	add	r7, sp, #0
   12600:	6078      	str	r0, [r7, #4]
   12602:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
   12604:	687b      	ldr	r3, [r7, #4]
   12606:	683a      	ldr	r2, [r7, #0]
   12608:	601a      	str	r2, [r3, #0]
}
   1260a:	bf00      	nop
   1260c:	370c      	adds	r7, #12
   1260e:	46bd      	mov	sp, r7
   12610:	f85d 7b04 	ldr.w	r7, [sp], #4
   12614:	4770      	bx	lr
	...

00012618 <PWM_CS_LOW>:
static void PWMBoardSPI_setCorrectionEnable(uint8_t flag);
static void PWMBoardSPI_startPWMCK(float fre);


static void PWM_CS_LOW()
{
   12618:	b480      	push	{r7}
   1261a:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin<<16U;
   1261c:	4b07      	ldr	r3, [pc, #28]	; (1263c <PWM_CS_LOW+0x24>)
   1261e:	681b      	ldr	r3, [r3, #0]
   12620:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
   12624:	461a      	mov	r2, r3
   12626:	4b05      	ldr	r3, [pc, #20]	; (1263c <PWM_CS_LOW+0x24>)
   12628:	681b      	ldr	r3, [r3, #0]
   1262a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
   1262e:	0412      	lsls	r2, r2, #16
   12630:	619a      	str	r2, [r3, #24]
}
   12632:	bf00      	nop
   12634:	46bd      	mov	sp, r7
   12636:	f85d 7b04 	ldr.w	r7, [sp], #4
   1263a:	4770      	bx	lr
   1263c:	00029cc8 	.word	0x00029cc8

00012640 <PWM_CS_HIGH>:

static void PWM_CS_HIGH()
{
   12640:	b480      	push	{r7}
   12642:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin;
   12644:	4b06      	ldr	r3, [pc, #24]	; (12660 <PWM_CS_HIGH+0x20>)
   12646:	681b      	ldr	r3, [r3, #0]
   12648:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
   1264c:	4b04      	ldr	r3, [pc, #16]	; (12660 <PWM_CS_HIGH+0x20>)
   1264e:	681b      	ldr	r3, [r3, #0]
   12650:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
   12654:	619a      	str	r2, [r3, #24]
}
   12656:	bf00      	nop
   12658:	46bd      	mov	sp, r7
   1265a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1265e:	4770      	bx	lr
   12660:	00029cc8 	.word	0x00029cc8

00012664 <PWMBoardSPI_Callback>:

static void PWMBoardSPI_Callback()
{
   12664:	b580      	push	{r7, lr}
   12666:	af00      	add	r7, sp, #0
	//the high pulse duration should be less than 5us to maintain the LDI functionality
	PWM_CS_HIGH();
   12668:	f7ff ffea 	bl	12640 <PWM_CS_HIGH>
	delay_us(2);
   1266c:	2002      	movs	r0, #2
   1266e:	f000 fbc5 	bl	12dfc <delay_us>
	PWM_CS_LOW();
   12672:	f7ff ffd1 	bl	12618 <PWM_CS_LOW>
}
   12676:	bf00      	nop
   12678:	bd80      	pop	{r7, pc}
	...

0001267c <PWMBoardSPI_sendFrame>:

static void PWMBoardSPI_sendFrame()
{
   1267c:	b580      	push	{r7, lr}
   1267e:	b082      	sub	sp, #8
   12680:	af02      	add	r7, sp, #8
	HAL_SPI_TransmitReceive(ptPWMBoardSPI->PWM_spi,(uint8_t *)(ptPWMBoardSPI->CMDBuffer),(uint8_t *)(ptPWMBoardSPI->StatusBuffer),PWMBoardSPI_FrameLength,2);
   12682:	4b0a      	ldr	r3, [pc, #40]	; (126ac <PWMBoardSPI_sendFrame+0x30>)
   12684:	681b      	ldr	r3, [r3, #0]
   12686:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
   1268a:	4b08      	ldr	r3, [pc, #32]	; (126ac <PWMBoardSPI_sendFrame+0x30>)
   1268c:	681b      	ldr	r3, [r3, #0]
   1268e:	4619      	mov	r1, r3
   12690:	4b06      	ldr	r3, [pc, #24]	; (126ac <PWMBoardSPI_sendFrame+0x30>)
   12692:	681b      	ldr	r3, [r3, #0]
   12694:	f103 02db 	add.w	r2, r3, #219	; 0xdb
   12698:	2302      	movs	r3, #2
   1269a:	9300      	str	r3, [sp, #0]
   1269c:	23db      	movs	r3, #219	; 0xdb
   1269e:	f7fb fa9b 	bl	dbd8 <HAL_SPI_TransmitReceive>
	PWMBoardSPI_Callback();
   126a2:	f7ff ffdf 	bl	12664 <PWMBoardSPI_Callback>
}
   126a6:	bf00      	nop
   126a8:	46bd      	mov	sp, r7
   126aa:	bd80      	pop	{r7, pc}
   126ac:	00029cc8 	.word	0x00029cc8

000126b0 <PWMBoardSPI_bufferCMD>:

static void PWMBoardSPI_bufferCMD(uint8_t cmd)
{
   126b0:	b480      	push	{r7}
   126b2:	b085      	sub	sp, #20
   126b4:	af00      	add	r7, sp, #0
   126b6:	4603      	mov	r3, r0
   126b8:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
   126ba:	2300      	movs	r3, #0
   126bc:	60fb      	str	r3, [r7, #12]
   126be:	e00e      	b.n	126de <PWMBoardSPI_bufferCMD+0x2e>
		ptPWMBoardSPI->CMDBuffer[i][LT8500_FrameLength-1]=cmd;
   126c0:	4b0b      	ldr	r3, [pc, #44]	; (126f0 <PWMBoardSPI_bufferCMD+0x40>)
   126c2:	6819      	ldr	r1, [r3, #0]
   126c4:	68fa      	ldr	r2, [r7, #12]
   126c6:	4613      	mov	r3, r2
   126c8:	00db      	lsls	r3, r3, #3
   126ca:	4413      	add	r3, r2
   126cc:	00db      	lsls	r3, r3, #3
   126ce:	4413      	add	r3, r2
   126d0:	440b      	add	r3, r1
   126d2:	3348      	adds	r3, #72	; 0x48
   126d4:	79fa      	ldrb	r2, [r7, #7]
   126d6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
   126d8:	68fb      	ldr	r3, [r7, #12]
   126da:	3301      	adds	r3, #1
   126dc:	60fb      	str	r3, [r7, #12]
   126de:	68fb      	ldr	r3, [r7, #12]
   126e0:	2b02      	cmp	r3, #2
   126e2:	dded      	ble.n	126c0 <PWMBoardSPI_bufferCMD+0x10>
}
   126e4:	bf00      	nop
   126e6:	3714      	adds	r7, #20
   126e8:	46bd      	mov	sp, r7
   126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   126ee:	4770      	bx	lr
   126f0:	00029cc8 	.word	0x00029cc8

000126f4 <PWMBoardSPI_bufferDutyChannel>:

static void PWMBoardSPI_bufferDutyChannel(uint16_t num, float fduty)
{
   126f4:	b580      	push	{r7, lr}
   126f6:	b088      	sub	sp, #32
   126f8:	af00      	add	r7, sp, #0
   126fa:	4603      	mov	r3, r0
   126fc:	ed87 0a00 	vstr	s0, [r7]
   12700:	80fb      	strh	r3, [r7, #6]

	uint16_t on;

	on = round(4096 * fduty);
   12702:	edd7 7a00 	vldr	s15, [r7]
   12706:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 12838 <PWMBoardSPI_bufferDutyChannel+0x144>
   1270a:	ee67 7a87 	vmul.f32	s15, s15, s14
   1270e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
   12712:	eeb0 0b47 	vmov.f64	d0, d7
   12716:	f002 fa5f 	bl	14bd8 <round>
   1271a:	eeb0 7b40 	vmov.f64	d7, d0
   1271e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   12722:	ee17 3a90 	vmov	r3, s15
   12726:	83fb      	strh	r3, [r7, #30]
	on=CONSTRAIN(on,0,4095);
   12728:	8bfb      	ldrh	r3, [r7, #30]
   1272a:	f640 72ff 	movw	r2, #4095	; 0xfff
   1272e:	4293      	cmp	r3, r2
   12730:	bf28      	it	cs
   12732:	4613      	movcs	r3, r2
   12734:	83fb      	strh	r3, [r7, #30]
	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
   12736:	88fb      	ldrh	r3, [r7, #6]
   12738:	2b8f      	cmp	r3, #143	; 0x8f
   1273a:	bf28      	it	cs
   1273c:	238f      	movcs	r3, #143	; 0x8f
   1273e:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
   12740:	88fb      	ldrh	r3, [r7, #6]
   12742:	4a3e      	ldr	r2, [pc, #248]	; (1283c <PWMBoardSPI_bufferDutyChannel+0x148>)
   12744:	fba2 2303 	umull	r2, r3, r2, r3
   12748:	095b      	lsrs	r3, r3, #5
   1274a:	83bb      	strh	r3, [r7, #28]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
   1274c:	88fa      	ldrh	r2, [r7, #6]
   1274e:	4b3b      	ldr	r3, [pc, #236]	; (1283c <PWMBoardSPI_bufferDutyChannel+0x148>)
   12750:	fba3 1302 	umull	r1, r3, r3, r2
   12754:	0959      	lsrs	r1, r3, #5
   12756:	460b      	mov	r3, r1
   12758:	005b      	lsls	r3, r3, #1
   1275a:	440b      	add	r3, r1
   1275c:	011b      	lsls	r3, r3, #4
   1275e:	1ad3      	subs	r3, r2, r3
   12760:	837b      	strh	r3, [r7, #26]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
   12762:	8b7b      	ldrh	r3, [r7, #26]
   12764:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
   12768:	837b      	strh	r3, [r7, #26]

	uint16_t quo=(boardNum/2);
   1276a:	8b7b      	ldrh	r3, [r7, #26]
   1276c:	085b      	lsrs	r3, r3, #1
   1276e:	833b      	strh	r3, [r7, #24]
	uint16_t rem=(boardNum%2);
   12770:	8b7b      	ldrh	r3, [r7, #26]
   12772:	f003 0301 	and.w	r3, r3, #1
   12776:	82fb      	strh	r3, [r7, #22]
	uint16_t startingBytesNum=quo*3;
   12778:	8b3b      	ldrh	r3, [r7, #24]
   1277a:	461a      	mov	r2, r3
   1277c:	0052      	lsls	r2, r2, #1
   1277e:	4413      	add	r3, r2
   12780:	82bb      	strh	r3, [r7, #20]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
   12782:	4b2f      	ldr	r3, [pc, #188]	; (12840 <PWMBoardSPI_bufferDutyChannel+0x14c>)
   12784:	6819      	ldr	r1, [r3, #0]
   12786:	8bba      	ldrh	r2, [r7, #28]
   12788:	8ab8      	ldrh	r0, [r7, #20]
   1278a:	4613      	mov	r3, r2
   1278c:	00db      	lsls	r3, r3, #3
   1278e:	4413      	add	r3, r2
   12790:	00db      	lsls	r3, r3, #3
   12792:	4413      	add	r3, r2
   12794:	4403      	add	r3, r0
   12796:	440b      	add	r3, r1
   12798:	613b      	str	r3, [r7, #16]

	if(rem==0){
   1279a:	8afb      	ldrh	r3, [r7, #22]
   1279c:	2b00      	cmp	r3, #0
   1279e:	d11c      	bne.n	127da <PWMBoardSPI_bufferDutyChannel+0xe6>
			*pt++=(uint8_t)((on>>4)&0xFF);
   127a0:	8bfb      	ldrh	r3, [r7, #30]
   127a2:	091b      	lsrs	r3, r3, #4
   127a4:	b299      	uxth	r1, r3
   127a6:	693b      	ldr	r3, [r7, #16]
   127a8:	1c5a      	adds	r2, r3, #1
   127aa:	613a      	str	r2, [r7, #16]
   127ac:	b2ca      	uxtb	r2, r1
   127ae:	701a      	strb	r2, [r3, #0]
			uint8_t ori=*pt;
   127b0:	693b      	ldr	r3, [r7, #16]
   127b2:	781b      	ldrb	r3, [r3, #0]
   127b4:	73bb      	strb	r3, [r7, #14]
			ori&=0x0F;
   127b6:	7bbb      	ldrb	r3, [r7, #14]
   127b8:	f003 030f 	and.w	r3, r3, #15
   127bc:	73bb      	strb	r3, [r7, #14]
			ori|= ((uint8_t)(on<<4) & 0xF0);
   127be:	8bfb      	ldrh	r3, [r7, #30]
   127c0:	b2db      	uxtb	r3, r3
   127c2:	011b      	lsls	r3, r3, #4
   127c4:	b2db      	uxtb	r3, r3
   127c6:	b25a      	sxtb	r2, r3
   127c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
   127cc:	4313      	orrs	r3, r2
   127ce:	b25b      	sxtb	r3, r3
   127d0:	73bb      	strb	r3, [r7, #14]
			*pt=ori;
   127d2:	693b      	ldr	r3, [r7, #16]
   127d4:	7bba      	ldrb	r2, [r7, #14]
   127d6:	701a      	strb	r2, [r3, #0]
   127d8:	e01e      	b.n	12818 <PWMBoardSPI_bufferDutyChannel+0x124>
		//	*pt=(uint8_t)(((*pt)&0x0F)|((uint8_t)(on&0x0F)<<4));
	}
	else
	{
		pt++;
   127da:	693b      	ldr	r3, [r7, #16]
   127dc:	3301      	adds	r3, #1
   127de:	613b      	str	r3, [r7, #16]
		uint8_t ori=*pt;
   127e0:	693b      	ldr	r3, [r7, #16]
   127e2:	781b      	ldrb	r3, [r3, #0]
   127e4:	73fb      	strb	r3, [r7, #15]
		ori&=0xF0;
   127e6:	7bfb      	ldrb	r3, [r7, #15]
   127e8:	f023 030f 	bic.w	r3, r3, #15
   127ec:	73fb      	strb	r3, [r7, #15]
		ori|= ((uint8_t)(on>>8) & 0x0F);
   127ee:	8bfb      	ldrh	r3, [r7, #30]
   127f0:	0a1b      	lsrs	r3, r3, #8
   127f2:	b29b      	uxth	r3, r3
   127f4:	b25b      	sxtb	r3, r3
   127f6:	f003 030f 	and.w	r3, r3, #15
   127fa:	b25a      	sxtb	r2, r3
   127fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   12800:	4313      	orrs	r3, r2
   12802:	b25b      	sxtb	r3, r3
   12804:	73fb      	strb	r3, [r7, #15]
		*pt++=ori;
   12806:	693b      	ldr	r3, [r7, #16]
   12808:	1c5a      	adds	r2, r3, #1
   1280a:	613a      	str	r2, [r7, #16]
   1280c:	7bfa      	ldrb	r2, [r7, #15]
   1280e:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(on);
   12810:	8bfb      	ldrh	r3, [r7, #30]
   12812:	b2da      	uxtb	r2, r3
   12814:	693b      	ldr	r3, [r7, #16]
   12816:	701a      	strb	r2, [r3, #0]
//		*pt=(uint8_t)(((*pt)&0xF0)|((uint8_t)(on>>8)));
//		pt++;
//		*pt=(uint8_t)(on&0xFF);

	}
	ptPWMBoardSPI->dirtyDuty=1;
   12818:	4b09      	ldr	r3, [pc, #36]	; (12840 <PWMBoardSPI_bufferDutyChannel+0x14c>)
   1281a:	681b      	ldr	r3, [r3, #0]
   1281c:	2201      	movs	r2, #1
   1281e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	PWMBoardSPI_bufferCMD(ptPWMBoardSPI->syncMode);
   12822:	4b07      	ldr	r3, [pc, #28]	; (12840 <PWMBoardSPI_bufferDutyChannel+0x14c>)
   12824:	681b      	ldr	r3, [r3, #0]
   12826:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
   1282a:	4618      	mov	r0, r3
   1282c:	f7ff ff40 	bl	126b0 <PWMBoardSPI_bufferCMD>
}
   12830:	bf00      	nop
   12832:	3720      	adds	r7, #32
   12834:	46bd      	mov	sp, r7
   12836:	bd80      	pop	{r7, pc}
   12838:	45800000 	.word	0x45800000
   1283c:	aaaaaaab 	.word	0xaaaaaaab
   12840:	00029cc8 	.word	0x00029cc8

00012844 <PWMBoardSPI_bufferCorrection>:

static void PWMBoardSPI_bufferCorrection(uint16_t num,uint8_t value)
{
   12844:	b580      	push	{r7, lr}
   12846:	b086      	sub	sp, #24
   12848:	af00      	add	r7, sp, #0
   1284a:	4603      	mov	r3, r0
   1284c:	460a      	mov	r2, r1
   1284e:	80fb      	strh	r3, [r7, #6]
   12850:	4613      	mov	r3, r2
   12852:	717b      	strb	r3, [r7, #5]

	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
   12854:	88fb      	ldrh	r3, [r7, #6]
   12856:	2b8f      	cmp	r3, #143	; 0x8f
   12858:	bf28      	it	cs
   1285a:	238f      	movcs	r3, #143	; 0x8f
   1285c:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
   1285e:	88fb      	ldrh	r3, [r7, #6]
   12860:	4a27      	ldr	r2, [pc, #156]	; (12900 <PWMBoardSPI_bufferCorrection+0xbc>)
   12862:	fba2 2303 	umull	r2, r3, r2, r3
   12866:	095b      	lsrs	r3, r3, #5
   12868:	82fb      	strh	r3, [r7, #22]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
   1286a:	88fa      	ldrh	r2, [r7, #6]
   1286c:	4b24      	ldr	r3, [pc, #144]	; (12900 <PWMBoardSPI_bufferCorrection+0xbc>)
   1286e:	fba3 1302 	umull	r1, r3, r3, r2
   12872:	0959      	lsrs	r1, r3, #5
   12874:	460b      	mov	r3, r1
   12876:	005b      	lsls	r3, r3, #1
   12878:	440b      	add	r3, r1
   1287a:	011b      	lsls	r3, r3, #4
   1287c:	1ad3      	subs	r3, r2, r3
   1287e:	82bb      	strh	r3, [r7, #20]
	uint16_t quo=(boardNum/2);
   12880:	8abb      	ldrh	r3, [r7, #20]
   12882:	085b      	lsrs	r3, r3, #1
   12884:	827b      	strh	r3, [r7, #18]
	uint16_t rem=(boardNum%2);
   12886:	8abb      	ldrh	r3, [r7, #20]
   12888:	f003 0301 	and.w	r3, r3, #1
   1288c:	823b      	strh	r3, [r7, #16]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
   1288e:	8abb      	ldrh	r3, [r7, #20]
   12890:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
   12894:	82bb      	strh	r3, [r7, #20]

	uint16_t startingBytesNum=quo*3;
   12896:	8a7b      	ldrh	r3, [r7, #18]
   12898:	461a      	mov	r2, r3
   1289a:	0052      	lsls	r2, r2, #1
   1289c:	4413      	add	r3, r2
   1289e:	81fb      	strh	r3, [r7, #14]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
   128a0:	4b18      	ldr	r3, [pc, #96]	; (12904 <PWMBoardSPI_bufferCorrection+0xc0>)
   128a2:	6819      	ldr	r1, [r3, #0]
   128a4:	8afa      	ldrh	r2, [r7, #22]
   128a6:	89f8      	ldrh	r0, [r7, #14]
   128a8:	4613      	mov	r3, r2
   128aa:	00db      	lsls	r3, r3, #3
   128ac:	4413      	add	r3, r2
   128ae:	00db      	lsls	r3, r3, #3
   128b0:	4413      	add	r3, r2
   128b2:	4403      	add	r3, r0
   128b4:	440b      	add	r3, r1
   128b6:	60bb      	str	r3, [r7, #8]
	if(rem==0){
   128b8:	8a3b      	ldrh	r3, [r7, #16]
   128ba:	2b00      	cmp	r3, #0
   128bc:	d105      	bne.n	128ca <PWMBoardSPI_bufferCorrection+0x86>
		*pt=(uint8_t)(value<<2);
   128be:	797b      	ldrb	r3, [r7, #5]
   128c0:	009b      	lsls	r3, r3, #2
   128c2:	b2da      	uxtb	r2, r3
   128c4:	68bb      	ldr	r3, [r7, #8]
   128c6:	701a      	strb	r2, [r3, #0]
   128c8:	e00e      	b.n	128e8 <PWMBoardSPI_bufferCorrection+0xa4>
	}
	else
	{
		pt++;
   128ca:	68bb      	ldr	r3, [r7, #8]
   128cc:	3301      	adds	r3, #1
   128ce:	60bb      	str	r3, [r7, #8]
		*pt++=(uint8_t)(value>>2);
   128d0:	68bb      	ldr	r3, [r7, #8]
   128d2:	1c5a      	adds	r2, r3, #1
   128d4:	60ba      	str	r2, [r7, #8]
   128d6:	797a      	ldrb	r2, [r7, #5]
   128d8:	0892      	lsrs	r2, r2, #2
   128da:	b2d2      	uxtb	r2, r2
   128dc:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(value<<6);
   128de:	797b      	ldrb	r3, [r7, #5]
   128e0:	019b      	lsls	r3, r3, #6
   128e2:	b2da      	uxtb	r2, r3
   128e4:	68bb      	ldr	r3, [r7, #8]
   128e6:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyCOR=1;
   128e8:	4b06      	ldr	r3, [pc, #24]	; (12904 <PWMBoardSPI_bufferCorrection+0xc0>)
   128ea:	681b      	ldr	r3, [r3, #0]
   128ec:	2201      	movs	r2, #1
   128ee:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	PWMBoardSPI_bufferCMD(LT8500_CMD_Correction);
   128f2:	2020      	movs	r0, #32
   128f4:	f7ff fedc 	bl	126b0 <PWMBoardSPI_bufferCMD>
}
   128f8:	bf00      	nop
   128fa:	3718      	adds	r7, #24
   128fc:	46bd      	mov	sp, r7
   128fe:	bd80      	pop	{r7, pc}
   12900:	aaaaaaab 	.word	0xaaaaaaab
   12904:	00029cc8 	.word	0x00029cc8

00012908 <PWMBoardSPI_setOutputEnable>:



static void PWMBoardSPI_setOutputEnable(uint8_t flag)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b082      	sub	sp, #8
   1290c:	af00      	add	r7, sp, #0
   1290e:	4603      	mov	r3, r0
   12910:	71fb      	strb	r3, [r7, #7]
	PWMBoardSPI_bufferCMD((flag?LT8500_CMD_OutputEnable:LT8500_CMD_OutputDisable));
   12912:	79fb      	ldrb	r3, [r7, #7]
   12914:	2b00      	cmp	r3, #0
   12916:	d001      	beq.n	1291c <PWMBoardSPI_setOutputEnable+0x14>
   12918:	2330      	movs	r3, #48	; 0x30
   1291a:	e000      	b.n	1291e <PWMBoardSPI_setOutputEnable+0x16>
   1291c:	2340      	movs	r3, #64	; 0x40
   1291e:	4618      	mov	r0, r3
   12920:	f7ff fec6 	bl	126b0 <PWMBoardSPI_bufferCMD>
	PWMBoardSPI_sendFrame();
   12924:	f7ff feaa 	bl	1267c <PWMBoardSPI_sendFrame>
	HAL_Delay(500);//THis delay is important, otherwise the enabling funciton may not take effective. I don't know why...
   12928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1292c:	f7f8 fb98 	bl	b060 <HAL_Delay>
}
   12930:	bf00      	nop
   12932:	3708      	adds	r7, #8
   12934:	46bd      	mov	sp, r7
   12936:	bd80      	pop	{r7, pc}

00012938 <PWMBoardSPI_setCorrectionEnable>:

static void PWMBoardSPI_setCorrectionEnable(uint8_t flag)
{
   12938:	b580      	push	{r7, lr}
   1293a:	b082      	sub	sp, #8
   1293c:	af00      	add	r7, sp, #0
   1293e:	4603      	mov	r3, r0
   12940:	71fb      	strb	r3, [r7, #7]
	if((ptPWMBoardSPI->StatusBuffer[0][LT8500_FrameLength-1]&0x01)!=(1-flag))
   12942:	4b0a      	ldr	r3, [pc, #40]	; (1296c <PWMBoardSPI_setCorrectionEnable+0x34>)
   12944:	681b      	ldr	r3, [r3, #0]
   12946:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
   1294a:	f003 0201 	and.w	r2, r3, #1
   1294e:	79fb      	ldrb	r3, [r7, #7]
   12950:	f1c3 0301 	rsb	r3, r3, #1
   12954:	429a      	cmp	r2, r3
   12956:	d004      	beq.n	12962 <PWMBoardSPI_setCorrectionEnable+0x2a>
		{
		PWMBoardSPI_bufferCMD(LT8500_CMD_CorrentionToggle);
   12958:	2070      	movs	r0, #112	; 0x70
   1295a:	f7ff fea9 	bl	126b0 <PWMBoardSPI_bufferCMD>
		PWMBoardSPI_sendFrame();
   1295e:	f7ff fe8d 	bl	1267c <PWMBoardSPI_sendFrame>
		}
}
   12962:	bf00      	nop
   12964:	3708      	adds	r7, #8
   12966:	46bd      	mov	sp, r7
   12968:	bd80      	pop	{r7, pc}
   1296a:	bf00      	nop
   1296c:	00029cc8 	.word	0x00029cc8

00012970 <PWMBoardSPI_startPWMCK>:

static void PWMBoardSPI_startPWMCK(float fre)
{
   12970:	b580      	push	{r7, lr}
   12972:	b082      	sub	sp, #8
   12974:	af00      	add	r7, sp, #0
   12976:	ed87 0a01 	vstr	s0, [r7, #4]
	PWMBuiltIn_writeDuty(ptPWMBoardSPI->Frequency_PWMPortNum,0.5);
   1297a:	4b0c      	ldr	r3, [pc, #48]	; (129ac <PWMBoardSPI_startPWMCK+0x3c>)
   1297c:	681b      	ldr	r3, [r3, #0]
   1297e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
   12982:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
   12986:	4618      	mov	r0, r3
   12988:	f000 fbe6 	bl	13158 <PWMBuiltIn_writeDuty>
	PWMBoardSPI_writeFrequency(fre);
   1298c:	ed97 0a01 	vldr	s0, [r7, #4]
   12990:	f000 f80e 	bl	129b0 <PWMBoardSPI_writeFrequency>
	PWMBuiltInStartChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
   12994:	4b05      	ldr	r3, [pc, #20]	; (129ac <PWMBoardSPI_startPWMCK+0x3c>)
   12996:	681b      	ldr	r3, [r3, #0]
   12998:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
   1299c:	4618      	mov	r0, r3
   1299e:	f000 fe59 	bl	13654 <PWMBuiltInStartChannel>
}
   129a2:	bf00      	nop
   129a4:	3708      	adds	r7, #8
   129a6:	46bd      	mov	sp, r7
   129a8:	bd80      	pop	{r7, pc}
   129aa:	bf00      	nop
   129ac:	00029cc8 	.word	0x00029cc8

000129b0 <PWMBoardSPI_writeFrequency>:


void PWMBoardSPI_writeFrequency(float fre)
{
   129b0:	b580      	push	{r7, lr}
   129b2:	b084      	sub	sp, #16
   129b4:	af00      	add	r7, sp, #0
   129b6:	ed87 0a01 	vstr	s0, [r7, #4]
	fre = CONSTRAIN(fre,EXTERNAL_PWMBOARDSPI_FREMIN,EXTERNAL_PWMBOARDSPI_FREMAX);
   129ba:	edd7 7a01 	vldr	s15, [r7, #4]
   129be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
   129c2:	ed9f 6b39 	vldr	d6, [pc, #228]	; 12aa8 <PWMBoardSPI_writeFrequency+0xf8>
   129c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
   129ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   129ce:	d501      	bpl.n	129d4 <PWMBoardSPI_writeFrequency+0x24>
   129d0:	4b3b      	ldr	r3, [pc, #236]	; (12ac0 <PWMBoardSPI_writeFrequency+0x110>)
   129d2:	e00b      	b.n	129ec <PWMBoardSPI_writeFrequency+0x3c>
   129d4:	edd7 7a01 	vldr	s15, [r7, #4]
   129d8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 12ac4 <PWMBoardSPI_writeFrequency+0x114>
   129dc:	eef4 7ac7 	vcmpe.f32	s15, s14
   129e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   129e4:	dd01      	ble.n	129ea <PWMBoardSPI_writeFrequency+0x3a>
   129e6:	4b38      	ldr	r3, [pc, #224]	; (12ac8 <PWMBoardSPI_writeFrequency+0x118>)
   129e8:	e000      	b.n	129ec <PWMBoardSPI_writeFrequency+0x3c>
   129ea:	687b      	ldr	r3, [r7, #4]
   129ec:	607b      	str	r3, [r7, #4]
	float newClkFrequency=fre*4096;
   129ee:	edd7 7a01 	vldr	s15, [r7, #4]
   129f2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 12acc <PWMBoardSPI_writeFrequency+0x11c>
   129f6:	ee67 7a87 	vmul.f32	s15, s15, s14
   129fa:	edc7 7a03 	vstr	s15, [r7, #12]
	if(fabs(newClkFrequency-ptPWMBoardSPI->clkFrequency)>1e-6)
   129fe:	4b34      	ldr	r3, [pc, #208]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a00:	681b      	ldr	r3, [r3, #0]
   12a02:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
   12a06:	ed97 7a03 	vldr	s14, [r7, #12]
   12a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
   12a0e:	eef0 7ae7 	vabs.f32	s15, s15
   12a12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
   12a16:	ed9f 6b26 	vldr	d6, [pc, #152]	; 12ab0 <PWMBoardSPI_writeFrequency+0x100>
   12a1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
   12a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a22:	dc00      	bgt.n	12a26 <PWMBoardSPI_writeFrequency+0x76>
		ptPWMBoardSPI->frequency=fre;
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
	}
}
   12a24:	e03a      	b.n	12a9c <PWMBoardSPI_writeFrequency+0xec>
		ptPWMBoardSPI->frequency=fre;
   12a26:	4b2a      	ldr	r3, [pc, #168]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a28:	681b      	ldr	r3, [r3, #0]
   12a2a:	687a      	ldr	r2, [r7, #4]
   12a2c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
   12a30:	4b27      	ldr	r3, [pc, #156]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a32:	681b      	ldr	r3, [r3, #0]
   12a34:	68fa      	ldr	r2, [r7, #12]
   12a36:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
   12a3a:	4b25      	ldr	r3, [pc, #148]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a3c:	681b      	ldr	r3, [r3, #0]
   12a3e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
   12a42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
   12a46:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 12ab8 <PWMBoardSPI_writeFrequency+0x108>
   12a4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
   12a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a52:	d501      	bpl.n	12a58 <PWMBoardSPI_writeFrequency+0xa8>
   12a54:	4b1f      	ldr	r3, [pc, #124]	; (12ad4 <PWMBoardSPI_writeFrequency+0x124>)
   12a56:	e010      	b.n	12a7a <PWMBoardSPI_writeFrequency+0xca>
   12a58:	4b1d      	ldr	r3, [pc, #116]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a5a:	681b      	ldr	r3, [r3, #0]
   12a5c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
   12a60:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 12ad8 <PWMBoardSPI_writeFrequency+0x128>
   12a64:	eef4 7ac7 	vcmpe.f32	s15, s14
   12a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a6c:	dd01      	ble.n	12a72 <PWMBoardSPI_writeFrequency+0xc2>
   12a6e:	4b1b      	ldr	r3, [pc, #108]	; (12adc <PWMBoardSPI_writeFrequency+0x12c>)
   12a70:	e003      	b.n	12a7a <PWMBoardSPI_writeFrequency+0xca>
   12a72:	4b17      	ldr	r3, [pc, #92]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a74:	681b      	ldr	r3, [r3, #0]
   12a76:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
   12a7a:	4a15      	ldr	r2, [pc, #84]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a7c:	6812      	ldr	r2, [r2, #0]
   12a7e:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
   12a82:	4b13      	ldr	r3, [pc, #76]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a84:	681b      	ldr	r3, [r3, #0]
   12a86:	f8b3 21c6 	ldrh.w	r2, [r3, #454]	; 0x1c6
   12a8a:	4b11      	ldr	r3, [pc, #68]	; (12ad0 <PWMBoardSPI_writeFrequency+0x120>)
   12a8c:	681b      	ldr	r3, [r3, #0]
   12a8e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
   12a92:	eeb0 0a67 	vmov.f32	s0, s15
   12a96:	4610      	mov	r0, r2
   12a98:	f000 fbfe 	bl	13298 <PWMBuiltIn_writeFrequency>
}
   12a9c:	bf00      	nop
   12a9e:	3710      	adds	r7, #16
   12aa0:	46bd      	mov	sp, r7
   12aa2:	bd80      	pop	{r7, pc}
   12aa4:	f3af 8000 	nop.w
   12aa8:	88e368f1 	.word	0x88e368f1
   12aac:	3ee4f8b5 	.word	0x3ee4f8b5
   12ab0:	a0b5ed8d 	.word	0xa0b5ed8d
   12ab4:	3eb0c6f7 	.word	0x3eb0c6f7
   12ab8:	eb851eb8 	.word	0xeb851eb8
   12abc:	3f9eb851 	.word	0x3f9eb851
   12ac0:	3727c5ac 	.word	0x3727c5ac
   12ac4:	459c4000 	.word	0x459c4000
   12ac8:	459c4000 	.word	0x459c4000
   12acc:	45800000 	.word	0x45800000
   12ad0:	00029cc8 	.word	0x00029cc8
   12ad4:	3cf5c28f 	.word	0x3cf5c28f
   12ad8:	4bcdfe60 	.word	0x4bcdfe60
   12adc:	4bcdfe60 	.word	0x4bcdfe60

00012ae0 <PWMBoardSPI_writeDuty>:
void PWMBoardSPI_writeDuty(uint16_t num, float fduty)
{
   12ae0:	b580      	push	{r7, lr}
   12ae2:	b082      	sub	sp, #8
   12ae4:	af00      	add	r7, sp, #0
   12ae6:	4603      	mov	r3, r0
   12ae8:	ed87 0a00 	vstr	s0, [r7]
   12aec:	80fb      	strh	r3, [r7, #6]
	PWMBoardSPI_bufferDutyChannel(num,fduty);
   12aee:	88fb      	ldrh	r3, [r7, #6]
   12af0:	ed97 0a00 	vldr	s0, [r7]
   12af4:	4618      	mov	r0, r3
   12af6:	f7ff fdfd 	bl	126f4 <PWMBoardSPI_bufferDutyChannel>
}
   12afa:	bf00      	nop
   12afc:	3708      	adds	r7, #8
   12afe:	46bd      	mov	sp, r7
   12b00:	bd80      	pop	{r7, pc}

00012b02 <PWMBoardSPI_writeCorrectionAll>:
void PWMBoardSPI_writeCorrectionAll(uint8_t value)
{
   12b02:	b580      	push	{r7, lr}
   12b04:	b084      	sub	sp, #16
   12b06:	af00      	add	r7, sp, #0
   12b08:	4603      	mov	r3, r0
   12b0a:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
   12b0c:	2300      	movs	r3, #0
   12b0e:	60fb      	str	r3, [r7, #12]
   12b10:	e009      	b.n	12b26 <PWMBoardSPI_writeCorrectionAll+0x24>
		{
			PWMBoardSPI_bufferCorrection(i,value);
   12b12:	68fb      	ldr	r3, [r7, #12]
   12b14:	b29b      	uxth	r3, r3
   12b16:	79fa      	ldrb	r2, [r7, #7]
   12b18:	4611      	mov	r1, r2
   12b1a:	4618      	mov	r0, r3
   12b1c:	f7ff fe92 	bl	12844 <PWMBoardSPI_bufferCorrection>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
   12b20:	68fb      	ldr	r3, [r7, #12]
   12b22:	3301      	adds	r3, #1
   12b24:	60fb      	str	r3, [r7, #12]
   12b26:	68fb      	ldr	r3, [r7, #12]
   12b28:	2b8f      	cmp	r3, #143	; 0x8f
   12b2a:	ddf2      	ble.n	12b12 <PWMBoardSPI_writeCorrectionAll+0x10>
		}
	PWMBoardSPI_sendFrame();
   12b2c:	f7ff fda6 	bl	1267c <PWMBoardSPI_sendFrame>
}
   12b30:	bf00      	nop
   12b32:	3710      	adds	r7, #16
   12b34:	46bd      	mov	sp, r7
   12b36:	bd80      	pop	{r7, pc}

00012b38 <PWMBoardSPI_flushDutyAll>:

void PWMBoardSPI_flushDutyAll()
{
   12b38:	b580      	push	{r7, lr}
   12b3a:	b082      	sub	sp, #8
   12b3c:	af00      	add	r7, sp, #0
	uint32_t c1=micros();
   12b3e:	f000 f947 	bl	12dd0 <micros>
   12b42:	6078      	str	r0, [r7, #4]
	if(ptPWMBoardSPI->dirtyDuty==1)
   12b44:	4b0c      	ldr	r3, [pc, #48]	; (12b78 <PWMBoardSPI_flushDutyAll+0x40>)
   12b46:	681b      	ldr	r3, [r3, #0]
   12b48:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
   12b4c:	2b01      	cmp	r3, #1
   12b4e:	d106      	bne.n	12b5e <PWMBoardSPI_flushDutyAll+0x26>
	{
		ptPWMBoardSPI->dirtyDuty=0;
   12b50:	4b09      	ldr	r3, [pc, #36]	; (12b78 <PWMBoardSPI_flushDutyAll+0x40>)
   12b52:	681b      	ldr	r3, [r3, #0]
   12b54:	2200      	movs	r2, #0
   12b56:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
		PWMBoardSPI_sendFrame();
   12b5a:	f7ff fd8f 	bl	1267c <PWMBoardSPI_sendFrame>
	}
	ptPWMBoardSPI->lastUpdateTime=micros()-c1;
   12b5e:	f000 f937 	bl	12dd0 <micros>
   12b62:	4601      	mov	r1, r0
   12b64:	4b04      	ldr	r3, [pc, #16]	; (12b78 <PWMBoardSPI_flushDutyAll+0x40>)
   12b66:	681b      	ldr	r3, [r3, #0]
   12b68:	687a      	ldr	r2, [r7, #4]
   12b6a:	1a8a      	subs	r2, r1, r2
   12b6c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
}
   12b70:	bf00      	nop
   12b72:	3708      	adds	r7, #8
   12b74:	46bd      	mov	sp, r7
   12b76:	bd80      	pop	{r7, pc}
   12b78:	00029cc8 	.word	0x00029cc8

00012b7c <PWMBoardSPI_init>:

void PWMBoardSPI_init()
{
   12b7c:	b580      	push	{r7, lr}
   12b7e:	b082      	sub	sp, #8
   12b80:	af00      	add	r7, sp, #0
	memset(ptPWMBoardSPI,0,sizeof(PWM_BOARDSPI));
   12b82:	4b36      	ldr	r3, [pc, #216]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12b84:	681b      	ldr	r3, [r3, #0]
   12b86:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   12b8a:	2100      	movs	r1, #0
   12b8c:	4618      	mov	r0, r3
   12b8e:	f002 f90c 	bl	14daa <memset>

	ptPWMBoardSPI->PWM_spi=&hspi_PWM;
   12b92:	4b32      	ldr	r3, [pc, #200]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12b94:	681b      	ldr	r3, [r3, #0]
   12b96:	4a32      	ldr	r2, [pc, #200]	; (12c60 <PWMBoardSPI_init+0xe4>)
   12b98:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ptPWMBoardSPI->CS_Port=DO_15_GPIO_Port;
   12b9c:	4b2f      	ldr	r3, [pc, #188]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12b9e:	681b      	ldr	r3, [r3, #0]
   12ba0:	4a30      	ldr	r2, [pc, #192]	; (12c64 <PWMBoardSPI_init+0xe8>)
   12ba2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	ptPWMBoardSPI->CS_Pin=DO_15_Pin;
   12ba6:	4b2d      	ldr	r3, [pc, #180]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12ba8:	681b      	ldr	r3, [r3, #0]
   12baa:	f44f 7280 	mov.w	r2, #256	; 0x100
   12bae:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

	ptPWMBoardSPI->Frequency_PWMPortNum=BUILTIN_PWM_NUM-1;
   12bb2:	4b2a      	ldr	r3, [pc, #168]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12bb4:	681b      	ldr	r3, [r3, #0]
   12bb6:	2213      	movs	r2, #19
   12bb8:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	ptPWMBoardSPI->syncMode=LT8500_CMD_AsyUpdate;
   12bbc:	4b27      	ldr	r3, [pc, #156]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12bbe:	681b      	ldr	r3, [r3, #0]
   12bc0:	2210      	movs	r2, #16
   12bc2:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
	ptPWMBoardSPI->dirtyCOR=0;
   12bc6:	4b25      	ldr	r3, [pc, #148]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12bc8:	681b      	ldr	r3, [r3, #0]
   12bca:	2200      	movs	r2, #0
   12bcc:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	ptPWMBoardSPI->dirtyDuty=0;
   12bd0:	4b22      	ldr	r3, [pc, #136]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12bd2:	681b      	ldr	r3, [r3, #0]
   12bd4:	2200      	movs	r2, #0
   12bd6:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	ptPWMBoardSPI->lastUpdateTime=0;
   12bda:	4b20      	ldr	r3, [pc, #128]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12bdc:	681b      	ldr	r3, [r3, #0]
   12bde:	2200      	movs	r2, #0
   12be0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	ptPWMBoardSPI->PWMTime=0;
   12be4:	4b1d      	ldr	r3, [pc, #116]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	2200      	movs	r2, #0
   12bea:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	ptPWMBoardSPI->PWMTimeEnd=0;
   12bee:	4b1b      	ldr	r3, [pc, #108]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12bf0:	681b      	ldr	r3, [r3, #0]
   12bf2:	2200      	movs	r2, #0
   12bf4:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	ptPWMBoardSPI->PWMTimeStart=0;
   12bf8:	4b18      	ldr	r3, [pc, #96]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12bfa:	681b      	ldr	r3, [r3, #0]
   12bfc:	2200      	movs	r2, #0
   12bfe:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	PWMBuiltInStopChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
   12c02:	4b16      	ldr	r3, [pc, #88]	; (12c5c <PWMBoardSPI_init+0xe0>)
   12c04:	681b      	ldr	r3, [r3, #0]
   12c06:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
   12c0a:	4618      	mov	r0, r3
   12c0c:	f000 fd3a 	bl	13684 <PWMBuiltInStopChannel>

	//initialization
	//1. Apply power and drive LDIBLANK low. SDO will go low when the on-chip power-on-reset (POR) de-asserts.
	PWM_CS_LOW();
   12c10:	f7ff fd02 	bl	12618 <PWM_CS_LOW>

	//2.Send a correction register frame (CMD = 0x20) on the serial interface. This sets the correction factor on each channel.
	PWMBoardSPI_writeCorrectionAll(63);
   12c14:	203f      	movs	r0, #63	; 0x3f
   12c16:	f7ff ff74 	bl	12b02 <PWMBoardSPI_writeCorrectionAll>

	//3. Send an update frame (CMD = 0x00 or CMD = 0x10) on the serial interface. This sets the pulse width of each channel.
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
   12c1a:	2300      	movs	r3, #0
   12c1c:	607b      	str	r3, [r7, #4]
   12c1e:	e009      	b.n	12c34 <PWMBoardSPI_init+0xb8>
	{
		PWMBoardSPI_bufferDutyChannel(i,0);
   12c20:	687b      	ldr	r3, [r7, #4]
   12c22:	b29b      	uxth	r3, r3
   12c24:	ed9f 0a10 	vldr	s0, [pc, #64]	; 12c68 <PWMBoardSPI_init+0xec>
   12c28:	4618      	mov	r0, r3
   12c2a:	f7ff fd63 	bl	126f4 <PWMBoardSPI_bufferDutyChannel>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
   12c2e:	687b      	ldr	r3, [r7, #4]
   12c30:	3301      	adds	r3, #1
   12c32:	607b      	str	r3, [r7, #4]
   12c34:	687b      	ldr	r3, [r7, #4]
   12c36:	2b8f      	cmp	r3, #143	; 0x8f
   12c38:	ddf2      	ble.n	12c20 <PWMBoardSPI_init+0xa4>
	}
	PWMBoardSPI_sendFrame();
   12c3a:	f7ff fd1f 	bl	1267c <PWMBoardSPI_sendFrame>

	//4. start PWM clock (PWMCK)
	PWMBoardSPI_startPWMCK(40);
   12c3e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 12c6c <PWMBoardSPI_init+0xf0>
   12c42:	f7ff fe95 	bl	12970 <PWMBoardSPI_startPWMCK>

	PWMBoardSPI_setCorrectionEnable(0);
   12c46:	2000      	movs	r0, #0
   12c48:	f7ff fe76 	bl	12938 <PWMBoardSPI_setCorrectionEnable>

	//5. Send an output enable frame (CMD = 0x30) on the serial interface. This enables the modulated pulses on the PWM[48:1] outputs
	PWMBoardSPI_setOutputEnable(1);
   12c4c:	2001      	movs	r0, #1
   12c4e:	f7ff fe5b 	bl	12908 <PWMBoardSPI_setOutputEnable>

}
   12c52:	bf00      	nop
   12c54:	3708      	adds	r7, #8
   12c56:	46bd      	mov	sp, r7
   12c58:	bd80      	pop	{r7, pc}
   12c5a:	bf00      	nop
   12c5c:	00029cc8 	.word	0x00029cc8
   12c60:	00033840 	.word	0x00033840
   12c64:	40021000 	.word	0x40021000
   12c68:	00000000 	.word	0x00000000
   12c6c:	42200000 	.word	0x42200000

00012c70 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
   12c70:	b590      	push	{r4, r7, lr}
   12c72:	b085      	sub	sp, #20
   12c74:	af00      	add	r7, sp, #0
   12c76:	6078      	str	r0, [r7, #4]
   12c78:	6039      	str	r1, [r7, #0]
   12c7a:	687b      	ldr	r3, [r7, #4]
   12c7c:	330c      	adds	r3, #12
   12c7e:	2200      	movs	r2, #0
   12c80:	2100      	movs	r1, #0
   12c82:	4618      	mov	r0, r3
   12c84:	f7ff fc4a 	bl	1251c <_ZN15PRESSURE_SOURCEC1Eii>
   12c88:	687b      	ldr	r3, [r7, #4]
   12c8a:	3344      	adds	r3, #68	; 0x44
   12c8c:	2200      	movs	r2, #0
   12c8e:	2100      	movs	r1, #0
   12c90:	4618      	mov	r0, r3
   12c92:	f7ff fc43 	bl	1251c <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
   12c96:	683b      	ldr	r3, [r7, #0]
   12c98:	b29a      	uxth	r2, r3
   12c9a:	687b      	ldr	r3, [r7, #4]
   12c9c:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
   12c9e:	683b      	ldr	r3, [r7, #0]
   12ca0:	2104      	movs	r1, #4
   12ca2:	4618      	mov	r0, r3
   12ca4:	f002 f83c 	bl	14d20 <calloc>
   12ca8:	4603      	mov	r3, r0
   12caa:	461a      	mov	r2, r3
   12cac:	687b      	ldr	r3, [r7, #4]
   12cae:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
   12cb0:	683b      	ldr	r3, [r7, #0]
   12cb2:	2104      	movs	r1, #4
   12cb4:	4618      	mov	r0, r3
   12cb6:	f002 f833 	bl	14d20 <calloc>
   12cba:	4603      	mov	r3, r0
   12cbc:	461a      	mov	r2, r3
   12cbe:	687b      	ldr	r3, [r7, #4]
   12cc0:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
   12cc2:	2300      	movs	r3, #0
   12cc4:	60fb      	str	r3, [r7, #12]
   12cc6:	687b      	ldr	r3, [r7, #4]
   12cc8:	889b      	ldrh	r3, [r3, #4]
   12cca:	461a      	mov	r2, r3
   12ccc:	68fb      	ldr	r3, [r7, #12]
   12cce:	4293      	cmp	r3, r2
   12cd0:	da18      	bge.n	12d04 <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
   12cd2:	f241 00d4 	movw	r0, #4308	; 0x10d4
   12cd6:	f001 ff65 	bl	14ba4 <_Znwj>
   12cda:	4603      	mov	r3, r0
   12cdc:	461c      	mov	r4, r3
   12cde:	68fb      	ldr	r3, [r7, #12]
   12ce0:	0059      	lsls	r1, r3, #1
   12ce2:	68fb      	ldr	r3, [r7, #12]
   12ce4:	005b      	lsls	r3, r3, #1
   12ce6:	1c5a      	adds	r2, r3, #1
   12ce8:	68fb      	ldr	r3, [r7, #12]
   12cea:	4620      	mov	r0, r4
   12cec:	f7ff f81c 	bl	11d28 <_ZN7CHAMBERC1Eiii>
   12cf0:	687b      	ldr	r3, [r7, #4]
   12cf2:	689a      	ldr	r2, [r3, #8]
   12cf4:	68fb      	ldr	r3, [r7, #12]
   12cf6:	009b      	lsls	r3, r3, #2
   12cf8:	4413      	add	r3, r2
   12cfa:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
   12cfc:	68fb      	ldr	r3, [r7, #12]
   12cfe:	3301      	adds	r3, #1
   12d00:	60fb      	str	r3, [r7, #12]
   12d02:	e7e0      	b.n	12cc6 <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
   12d04:	687b      	ldr	r3, [r7, #4]
   12d06:	4a05      	ldr	r2, [pc, #20]	; (12d1c <_ZN9PNEUDRIVEC1Ei+0xac>)
   12d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 10;
   12d0c:	687b      	ldr	r3, [r7, #4]
   12d0e:	4a04      	ldr	r2, [pc, #16]	; (12d20 <_ZN9PNEUDRIVEC1Ei+0xb0>)
   12d10:	67da      	str	r2, [r3, #124]	; 0x7c
}
   12d12:	687b      	ldr	r3, [r7, #4]
   12d14:	4618      	mov	r0, r3
   12d16:	3714      	adds	r7, #20
   12d18:	46bd      	mov	sp, r7
   12d1a:	bd90      	pop	{r4, r7, pc}
   12d1c:	44fa0000 	.word	0x44fa0000
   12d20:	41200000 	.word	0x41200000

00012d24 <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
   12d24:	b580      	push	{r7, lr}
   12d26:	b082      	sub	sp, #8
   12d28:	af00      	add	r7, sp, #0
   12d2a:	4603      	mov	r3, r0
   12d2c:	460a      	mov	r2, r1
   12d2e:	80fb      	strh	r3, [r7, #6]
   12d30:	4613      	mov	r3, r2
   12d32:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
   12d34:	88ba      	ldrh	r2, [r7, #4]
   12d36:	88fb      	ldrh	r3, [r7, #6]
   12d38:	4611      	mov	r1, r2
   12d3a:	4618      	mov	r0, r3
   12d3c:	f000 f970 	bl	13020 <DigitalBuiltIn_Write>
}
   12d40:	bf00      	nop
   12d42:	3708      	adds	r7, #8
   12d44:	46bd      	mov	sp, r7
   12d46:	bd80      	pop	{r7, pc}

00012d48 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
   12d48:	b580      	push	{r7, lr}
   12d4a:	b084      	sub	sp, #16
   12d4c:	af00      	add	r7, sp, #0
   12d4e:	4603      	mov	r3, r0
   12d50:	ed87 0a00 	vstr	s0, [r7]
   12d54:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
   12d56:	88fb      	ldrh	r3, [r7, #6]
   12d58:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
   12d5a:	88fb      	ldrh	r3, [r7, #6]
   12d5c:	2b13      	cmp	r3, #19
   12d5e:	d806      	bhi.n	12d6e <PWMWriteDuty+0x26>
		PWMBuiltIn_writeDuty(num,fduty);
   12d60:	88fb      	ldrh	r3, [r7, #6]
   12d62:	ed97 0a00 	vldr	s0, [r7]
   12d66:	4618      	mov	r0, r3
   12d68:	f000 f9f6 	bl	13158 <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
   12d6c:	e00b      	b.n	12d86 <PWMWriteDuty+0x3e>
		num= numori - BUILTIN_PWM_NUM;
   12d6e:	89fb      	ldrh	r3, [r7, #14]
   12d70:	3b14      	subs	r3, #20
   12d72:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDSPI_CHANNELNUM){
   12d74:	88fb      	ldrh	r3, [r7, #6]
   12d76:	2b8f      	cmp	r3, #143	; 0x8f
   12d78:	d805      	bhi.n	12d86 <PWMWriteDuty+0x3e>
			PWMBoardSPI_writeDuty(num,fduty);
   12d7a:	88fb      	ldrh	r3, [r7, #6]
   12d7c:	ed97 0a00 	vldr	s0, [r7]
   12d80:	4618      	mov	r0, r3
   12d82:	f7ff fead 	bl	12ae0 <PWMBoardSPI_writeDuty>
}
   12d86:	bf00      	nop
   12d88:	3710      	adds	r7, #16
   12d8a:	46bd      	mov	sp, r7
   12d8c:	bd80      	pop	{r7, pc}
	...

00012d90 <serialPort1Callback>:
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
};

__weak void serialPort1Callback(char *pWirelessReceiveBuffer) {
   12d90:	b580      	push	{r7, lr}
   12d92:	b082      	sub	sp, #8
   12d94:	af00      	add	r7, sp, #0
   12d96:	6078      	str	r0, [r7, #4]
	printf("Running default WirelessCommandCallbackFunction()\r\n");
   12d98:	4803      	ldr	r0, [pc, #12]	; (12da8 <serialPort1Callback+0x18>)
   12d9a:	f002 ff4d 	bl	15c38 <puts>
}
   12d9e:	bf00      	nop
   12da0:	3708      	adds	r7, #8
   12da2:	46bd      	mov	sp, r7
   12da4:	bd80      	pop	{r7, pc}
   12da6:	bf00      	nop
   12da8:	00019758 	.word	0x00019758

00012dac <serialPort2Callback>:
;

__weak  void serialPort2Callback(char *pSerialPort4Buffer)
{
   12dac:	b480      	push	{r7}
   12dae:	b083      	sub	sp, #12
   12db0:	af00      	add	r7, sp, #0
   12db2:	6078      	str	r0, [r7, #4]

};
   12db4:	bf00      	nop
   12db6:	370c      	adds	r7, #12
   12db8:	46bd      	mov	sp, r7
   12dba:	f85d 7b04 	ldr.w	r7, [sp], #4
   12dbe:	4770      	bx	lr

00012dc0 <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
   12dc0:	b580      	push	{r7, lr}
   12dc2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
   12dc4:	f7f8 f940 	bl	b048 <HAL_GetTick>
   12dc8:	4603      	mov	r3, r0
}
   12dca:	4618      	mov	r0, r3
   12dcc:	bd80      	pop	{r7, pc}
	...

00012dd0 <micros>:

uint32_t micros()
{
   12dd0:	b580      	push	{r7, lr}
   12dd2:	b082      	sub	sp, #8
   12dd4:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
   12dd6:	f7ff fff3 	bl	12dc0 <millis>
   12dda:	4602      	mov	r2, r0
   12ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12de0:	fb03 f202 	mul.w	r2, r3, r2
   12de4:	4b04      	ldr	r3, [pc, #16]	; (12df8 <micros+0x28>)
   12de6:	681b      	ldr	r3, [r3, #0]
   12de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12dea:	4413      	add	r3, r2
   12dec:	607b      	str	r3, [r7, #4]
	return t;
   12dee:	687b      	ldr	r3, [r7, #4]
}
   12df0:	4618      	mov	r0, r3
   12df2:	3708      	adds	r7, #8
   12df4:	46bd      	mov	sp, r7
   12df6:	bd80      	pop	{r7, pc}
   12df8:	00033b4c 	.word	0x00033b4c

00012dfc <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
   12dfc:	b580      	push	{r7, lr}
   12dfe:	b084      	sub	sp, #16
   12e00:	af00      	add	r7, sp, #0
   12e02:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
   12e04:	f7ff ffe4 	bl	12dd0 <micros>
   12e08:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
   12e0a:	f7ff ffe1 	bl	12dd0 <micros>
   12e0e:	4602      	mov	r2, r0
   12e10:	68fb      	ldr	r3, [r7, #12]
   12e12:	1ad3      	subs	r3, r2, r3
   12e14:	461a      	mov	r2, r3
   12e16:	687b      	ldr	r3, [r7, #4]
   12e18:	4293      	cmp	r3, r2
   12e1a:	bfcc      	ite	gt
   12e1c:	2301      	movgt	r3, #1
   12e1e:	2300      	movle	r3, #0
   12e20:	b2db      	uxtb	r3, r3
   12e22:	2b00      	cmp	r3, #0
   12e24:	d000      	beq.n	12e28 <delay_us+0x2c>
   12e26:	e7f0      	b.n	12e0a <delay_us+0xe>
}
   12e28:	bf00      	nop
   12e2a:	3710      	adds	r7, #16
   12e2c:	46bd      	mov	sp, r7
   12e2e:	bd80      	pop	{r7, pc}

00012e30 <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
   12e30:	b480      	push	{r7}
   12e32:	b083      	sub	sp, #12
   12e34:	af00      	add	r7, sp, #0
   12e36:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
   12e38:	4b20      	ldr	r3, [pc, #128]	; (12ebc <delay_ns+0x8c>)
   12e3a:	681b      	ldr	r3, [r3, #0]
   12e3c:	681a      	ldr	r2, [r3, #0]
   12e3e:	4b1f      	ldr	r3, [pc, #124]	; (12ebc <delay_ns+0x8c>)
   12e40:	681b      	ldr	r3, [r3, #0]
   12e42:	f042 0201 	orr.w	r2, r2, #1
   12e46:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
   12e48:	4b1c      	ldr	r3, [pc, #112]	; (12ebc <delay_ns+0x8c>)
   12e4a:	681b      	ldr	r3, [r3, #0]
   12e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12e4e:	461a      	mov	r2, r3
   12e50:	687b      	ldr	r3, [r7, #4]
   12e52:	4293      	cmp	r3, r2
   12e54:	bfcc      	ite	gt
   12e56:	2301      	movgt	r3, #1
   12e58:	2300      	movle	r3, #0
   12e5a:	b2db      	uxtb	r3, r3
   12e5c:	2b00      	cmp	r3, #0
   12e5e:	d000      	beq.n	12e62 <delay_ns+0x32>
   12e60:	e7f2      	b.n	12e48 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
   12e62:	4b16      	ldr	r3, [pc, #88]	; (12ebc <delay_ns+0x8c>)
   12e64:	681b      	ldr	r3, [r3, #0]
   12e66:	6a1a      	ldr	r2, [r3, #32]
   12e68:	f241 1311 	movw	r3, #4369	; 0x1111
   12e6c:	4013      	ands	r3, r2
   12e6e:	2b00      	cmp	r3, #0
   12e70:	bf0c      	ite	eq
   12e72:	2301      	moveq	r3, #1
   12e74:	2300      	movne	r3, #0
   12e76:	b2db      	uxtb	r3, r3
   12e78:	2b00      	cmp	r3, #0
   12e7a:	d014      	beq.n	12ea6 <delay_ns+0x76>
   12e7c:	4b0f      	ldr	r3, [pc, #60]	; (12ebc <delay_ns+0x8c>)
   12e7e:	681b      	ldr	r3, [r3, #0]
   12e80:	6a1a      	ldr	r2, [r3, #32]
   12e82:	f240 4344 	movw	r3, #1092	; 0x444
   12e86:	4013      	ands	r3, r2
   12e88:	2b00      	cmp	r3, #0
   12e8a:	bf0c      	ite	eq
   12e8c:	2301      	moveq	r3, #1
   12e8e:	2300      	movne	r3, #0
   12e90:	b2db      	uxtb	r3, r3
   12e92:	2b00      	cmp	r3, #0
   12e94:	d007      	beq.n	12ea6 <delay_ns+0x76>
   12e96:	4b09      	ldr	r3, [pc, #36]	; (12ebc <delay_ns+0x8c>)
   12e98:	681b      	ldr	r3, [r3, #0]
   12e9a:	681a      	ldr	r2, [r3, #0]
   12e9c:	4b07      	ldr	r3, [pc, #28]	; (12ebc <delay_ns+0x8c>)
   12e9e:	681b      	ldr	r3, [r3, #0]
   12ea0:	f022 0201 	bic.w	r2, r2, #1
   12ea4:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
   12ea6:	4b05      	ldr	r3, [pc, #20]	; (12ebc <delay_ns+0x8c>)
   12ea8:	681b      	ldr	r3, [r3, #0]
   12eaa:	2200      	movs	r2, #0
   12eac:	625a      	str	r2, [r3, #36]	; 0x24

}
   12eae:	bf00      	nop
   12eb0:	370c      	adds	r7, #12
   12eb2:	46bd      	mov	sp, r7
   12eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   12eb8:	4770      	bx	lr
   12eba:	bf00      	nop
   12ebc:	00033dcc 	.word	0x00033dcc

00012ec0 <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
   12ec0:	b480      	push	{r7}
   12ec2:	b083      	sub	sp, #12
   12ec4:	af00      	add	r7, sp, #0
   12ec6:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
   12ec8:	4a04      	ldr	r2, [pc, #16]	; (12edc <setPeriodControlLoop+0x1c>)
   12eca:	687b      	ldr	r3, [r7, #4]
   12ecc:	6013      	str	r3, [r2, #0]
}
   12ece:	bf00      	nop
   12ed0:	370c      	adds	r7, #12
   12ed2:	46bd      	mov	sp, r7
   12ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
   12ed8:	4770      	bx	lr
   12eda:	bf00      	nop
   12edc:	00029ccc 	.word	0x00029ccc

00012ee0 <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
   12ee0:	b480      	push	{r7}
   12ee2:	b083      	sub	sp, #12
   12ee4:	af00      	add	r7, sp, #0
   12ee6:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
   12ee8:	4a04      	ldr	r2, [pc, #16]	; (12efc <setPeriodSendLoop+0x1c>)
   12eea:	687b      	ldr	r3, [r7, #4]
   12eec:	6013      	str	r3, [r2, #0]
}
   12eee:	bf00      	nop
   12ef0:	370c      	adds	r7, #12
   12ef2:	46bd      	mov	sp, r7
   12ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
   12ef8:	4770      	bx	lr
   12efa:	bf00      	nop
   12efc:	00029cd0 	.word	0x00029cd0

00012f00 <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
   12f00:	b580      	push	{r7, lr}
   12f02:	b082      	sub	sp, #8
   12f04:	af00      	add	r7, sp, #0
   12f06:	6078      	str	r0, [r7, #4]
   12f08:	6039      	str	r1, [r7, #0]

	_duty=0;
   12f0a:	687b      	ldr	r3, [r7, #4]
   12f0c:	f04f 0200 	mov.w	r2, #0
   12f10:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
   12f12:	687b      	ldr	r3, [r7, #4]
   12f14:	edd3 7a02 	vldr	s15, [r3, #8]
   12f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
   12f20:	687b      	ldr	r3, [r7, #4]
   12f22:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
   12f26:	687b      	ldr	r3, [r7, #4]
   12f28:	4a09      	ldr	r2, [pc, #36]	; (12f50 <_ZN14SOLENOID_VALVEC1Ei+0x50>)
   12f2a:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
   12f2c:	687b      	ldr	r3, [r7, #4]
   12f2e:	f04f 0200 	mov.w	r2, #0
   12f32:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
   12f34:	687b      	ldr	r3, [r7, #4]
   12f36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12f3a:	615a      	str	r2, [r3, #20]
	attach(num);
   12f3c:	6839      	ldr	r1, [r7, #0]
   12f3e:	6878      	ldr	r0, [r7, #4]
   12f40:	f000 f808 	bl	12f54 <_ZN14SOLENOID_VALVE6attachEi>
}
   12f44:	687b      	ldr	r3, [r7, #4]
   12f46:	4618      	mov	r0, r3
   12f48:	3708      	adds	r7, #8
   12f4a:	46bd      	mov	sp, r7
   12f4c:	bd80      	pop	{r7, pc}
   12f4e:	bf00      	nop
   12f50:	41200000 	.word	0x41200000

00012f54 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
   12f54:	b480      	push	{r7}
   12f56:	b083      	sub	sp, #12
   12f58:	af00      	add	r7, sp, #0
   12f5a:	6078      	str	r0, [r7, #4]
   12f5c:	6039      	str	r1, [r7, #0]
	PWMPort = num;
   12f5e:	687b      	ldr	r3, [r7, #4]
   12f60:	683a      	ldr	r2, [r7, #0]
   12f62:	601a      	str	r2, [r3, #0]
}
   12f64:	bf00      	nop
   12f66:	370c      	adds	r7, #12
   12f68:	46bd      	mov	sp, r7
   12f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   12f6e:	4770      	bx	lr

00012f70 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
   12f70:	b580      	push	{r7, lr}
   12f72:	b082      	sub	sp, #8
   12f74:	af00      	add	r7, sp, #0
   12f76:	6078      	str	r0, [r7, #4]
   12f78:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
   12f7c:	687b      	ldr	r3, [r7, #4]
   12f7e:	ed93 7a04 	vldr	s14, [r3, #16]
   12f82:	edd7 7a00 	vldr	s15, [r7]
   12f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12f8e:	dd02      	ble.n	12f96 <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
   12f90:	687b      	ldr	r3, [r7, #4]
   12f92:	691b      	ldr	r3, [r3, #16]
   12f94:	e00d      	b.n	12fb2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
   12f96:	687b      	ldr	r3, [r7, #4]
   12f98:	ed93 7a05 	vldr	s14, [r3, #20]
   12f9c:	edd7 7a00 	vldr	s15, [r7]
   12fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fa8:	d502      	bpl.n	12fb0 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
   12faa:	687b      	ldr	r3, [r7, #4]
   12fac:	695b      	ldr	r3, [r3, #20]
   12fae:	e000      	b.n	12fb2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
   12fb0:	683b      	ldr	r3, [r7, #0]
   12fb2:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
   12fb4:	ed97 7a00 	vldr	s14, [r7]
   12fb8:	687b      	ldr	r3, [r7, #4]
   12fba:	edd3 7a01 	vldr	s15, [r3, #4]
   12fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
   12fc2:	eef0 7ae7 	vabs.f32	s15, s15
   12fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
   12fca:	ed9f 6b13 	vldr	d6, [pc, #76]	; 13018 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
   12fce:	eeb4 7bc6 	vcmpe.f64	d7, d6
   12fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fd6:	dc00      	bgt.n	12fda <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
   12fd8:	e017      	b.n	1300a <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
   12fda:	683a      	ldr	r2, [r7, #0]
   12fdc:	687b      	ldr	r3, [r7, #4]
   12fde:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
   12fe0:	687b      	ldr	r3, [r7, #4]
   12fe2:	edd3 7a01 	vldr	s15, [r3, #4]
   12fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12fea:	ee77 7a67 	vsub.f32	s15, s14, s15
   12fee:	687b      	ldr	r3, [r7, #4]
   12ff0:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
   12ff4:	687b      	ldr	r3, [r7, #4]
   12ff6:	681b      	ldr	r3, [r3, #0]
   12ff8:	b29a      	uxth	r2, r3
   12ffa:	687b      	ldr	r3, [r7, #4]
   12ffc:	edd3 7a02 	vldr	s15, [r3, #8]
   13000:	eeb0 0a67 	vmov.f32	s0, s15
   13004:	4610      	mov	r0, r2
   13006:	f7ff fe9f 	bl	12d48 <PWMWriteDuty>
}
   1300a:	bf00      	nop
   1300c:	3708      	adds	r7, #8
   1300e:	46bd      	mov	sp, r7
   13010:	bd80      	pop	{r7, pc}
   13012:	bf00      	nop
   13014:	f3af 8000 	nop.w
   13018:	a0b5ed8d 	.word	0xa0b5ed8d
   1301c:	3eb0c6f7 	.word	0x3eb0c6f7

00013020 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
   13020:	b580      	push	{r7, lr}
   13022:	b084      	sub	sp, #16
   13024:	af00      	add	r7, sp, #0
   13026:	4603      	mov	r3, r0
   13028:	460a      	mov	r2, r1
   1302a:	80fb      	strh	r3, [r7, #6]
   1302c:	4613      	mov	r3, r2
   1302e:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
   13030:	88bb      	ldrh	r3, [r7, #4]
   13032:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
   13034:	88fb      	ldrh	r3, [r7, #6]
   13036:	2b0f      	cmp	r3, #15
   13038:	d80b      	bhi.n	13052 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
   1303a:	88fb      	ldrh	r3, [r7, #6]
   1303c:	4a07      	ldr	r2, [pc, #28]	; (1305c <DigitalBuiltIn_Write+0x3c>)
   1303e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   13042:	88fb      	ldrh	r3, [r7, #6]
   13044:	4a06      	ldr	r2, [pc, #24]	; (13060 <DigitalBuiltIn_Write+0x40>)
   13046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1304a:	7bfa      	ldrb	r2, [r7, #15]
   1304c:	4619      	mov	r1, r3
   1304e:	f7f9 fac7 	bl	c5e0 <HAL_GPIO_WritePin>
	}
}
   13052:	bf00      	nop
   13054:	3710      	adds	r7, #16
   13056:	46bd      	mov	sp, r7
   13058:	bd80      	pop	{r7, pc}
   1305a:	bf00      	nop
   1305c:	00029cd4 	.word	0x00029cd4
   13060:	00029d14 	.word	0x00029d14

00013064 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
   13064:	b580      	push	{r7, lr}
   13066:	b084      	sub	sp, #16
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
   1306c:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
   13070:	687b      	ldr	r3, [r7, #4]
   13072:	3301      	adds	r3, #1
   13074:	ee07 3a90 	vmov	s15, r3
   13078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   1307c:	edd7 7a00 	vldr	s15, [r7]
   13080:	ee67 7a27 	vmul.f32	s15, s14, s15
   13084:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
   13088:	eeb0 0b47 	vmov.f64	d0, d7
   1308c:	f001 fda4 	bl	14bd8 <round>
   13090:	eeb0 7b40 	vmov.f64	d7, d0
   13094:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   13098:	ee17 3a90 	vmov	r3, s15
   1309c:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
   1309e:	68fb      	ldr	r3, [r7, #12]
   130a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   130a4:	4293      	cmp	r3, r2
   130a6:	bf28      	it	cs
   130a8:	4613      	movcs	r3, r2
}
   130aa:	4618      	mov	r0, r3
   130ac:	3710      	adds	r7, #16
   130ae:	46bd      	mov	sp, r7
   130b0:	bd80      	pop	{r7, pc}

000130b2 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
   130b2:	b480      	push	{r7}
   130b4:	b085      	sub	sp, #20
   130b6:	af00      	add	r7, sp, #0
   130b8:	6078      	str	r0, [r7, #4]
   130ba:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
   130bc:	683b      	ldr	r3, [r7, #0]
   130be:	ee07 3a90 	vmov	s15, r3
   130c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   130c6:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	3301      	adds	r3, #1
   130ce:	ee07 3a90 	vmov	s15, r3
   130d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   130d6:	ed97 7a03 	vldr	s14, [r7, #12]
   130da:	eec7 6a27 	vdiv.f32	s13, s14, s15
   130de:	eef0 7a66 	vmov.f32	s15, s13
}
   130e2:	eeb0 0a67 	vmov.f32	s0, s15
   130e6:	3714      	adds	r7, #20
   130e8:	46bd      	mov	sp, r7
   130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   130ee:	4770      	bx	lr

000130f0 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
   130f0:	b480      	push	{r7}
   130f2:	b083      	sub	sp, #12
   130f4:	af00      	add	r7, sp, #0
   130f6:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
   130f8:	687b      	ldr	r3, [r7, #4]
   130fa:	681b      	ldr	r3, [r3, #0]
   130fc:	4a0f      	ldr	r2, [pc, #60]	; (1313c <getTIM_SOURCECLK+0x4c>)
   130fe:	4293      	cmp	r3, r2
   13100:	d013      	beq.n	1312a <getTIM_SOURCECLK+0x3a>
   13102:	687b      	ldr	r3, [r7, #4]
   13104:	681b      	ldr	r3, [r3, #0]
   13106:	4a0e      	ldr	r2, [pc, #56]	; (13140 <getTIM_SOURCECLK+0x50>)
   13108:	4293      	cmp	r3, r2
   1310a:	d00e      	beq.n	1312a <getTIM_SOURCECLK+0x3a>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	681b      	ldr	r3, [r3, #0]
   13110:	4a0c      	ldr	r2, [pc, #48]	; (13144 <getTIM_SOURCECLK+0x54>)
   13112:	4293      	cmp	r3, r2
   13114:	d009      	beq.n	1312a <getTIM_SOURCECLK+0x3a>
   13116:	687b      	ldr	r3, [r7, #4]
   13118:	681b      	ldr	r3, [r3, #0]
   1311a:	4a0b      	ldr	r2, [pc, #44]	; (13148 <getTIM_SOURCECLK+0x58>)
   1311c:	4293      	cmp	r3, r2
   1311e:	d004      	beq.n	1312a <getTIM_SOURCECLK+0x3a>
   13120:	687b      	ldr	r3, [r7, #4]
   13122:	681b      	ldr	r3, [r3, #0]
   13124:	4a09      	ldr	r2, [pc, #36]	; (1314c <getTIM_SOURCECLK+0x5c>)
   13126:	4293      	cmp	r3, r2
   13128:	d101      	bne.n	1312e <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
   1312a:	4b09      	ldr	r3, [pc, #36]	; (13150 <getTIM_SOURCECLK+0x60>)
   1312c:	e000      	b.n	13130 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
   1312e:	4b09      	ldr	r3, [pc, #36]	; (13154 <getTIM_SOURCECLK+0x64>)
}
   13130:	4618      	mov	r0, r3
   13132:	370c      	adds	r7, #12
   13134:	46bd      	mov	sp, r7
   13136:	f85d 7b04 	ldr.w	r7, [sp], #4
   1313a:	4770      	bx	lr
   1313c:	40010000 	.word	0x40010000
   13140:	40010400 	.word	0x40010400
   13144:	40014000 	.word	0x40014000
   13148:	40014400 	.word	0x40014400
   1314c:	40014800 	.word	0x40014800
   13150:	0cdfe600 	.word	0x0cdfe600
   13154:	066ff300 	.word	0x066ff300

00013158 <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
   13158:	b590      	push	{r4, r7, lr}
   1315a:	b083      	sub	sp, #12
   1315c:	af00      	add	r7, sp, #0
   1315e:	4603      	mov	r3, r0
   13160:	ed87 0a00 	vstr	s0, [r7]
   13164:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
   13166:	88fb      	ldrh	r3, [r7, #6]
   13168:	4a48      	ldr	r2, [pc, #288]	; (1328c <PWMBuiltIn_writeDuty+0x134>)
   1316a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1316e:	2b00      	cmp	r3, #0
   13170:	d112      	bne.n	13198 <PWMBuiltIn_writeDuty+0x40>
   13172:	88fb      	ldrh	r3, [r7, #6]
   13174:	4a46      	ldr	r2, [pc, #280]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   13176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1317a:	681b      	ldr	r3, [r3, #0]
   1317c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1317e:	88fb      	ldrh	r3, [r7, #6]
   13180:	4a43      	ldr	r2, [pc, #268]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   13182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13186:	681c      	ldr	r4, [r3, #0]
   13188:	ed97 0a00 	vldr	s0, [r7]
   1318c:	4608      	mov	r0, r1
   1318e:	f7ff ff69 	bl	13064 <duty2CCR>
   13192:	4603      	mov	r3, r0
   13194:	6363      	str	r3, [r4, #52]	; 0x34

}
   13196:	e075      	b.n	13284 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
   13198:	88fb      	ldrh	r3, [r7, #6]
   1319a:	4a3c      	ldr	r2, [pc, #240]	; (1328c <PWMBuiltIn_writeDuty+0x134>)
   1319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131a0:	2b04      	cmp	r3, #4
   131a2:	d112      	bne.n	131ca <PWMBuiltIn_writeDuty+0x72>
   131a4:	88fb      	ldrh	r3, [r7, #6]
   131a6:	4a3a      	ldr	r2, [pc, #232]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   131a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ac:	681b      	ldr	r3, [r3, #0]
   131ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   131b0:	88fb      	ldrh	r3, [r7, #6]
   131b2:	4a37      	ldr	r2, [pc, #220]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   131b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131b8:	681c      	ldr	r4, [r3, #0]
   131ba:	ed97 0a00 	vldr	s0, [r7]
   131be:	4608      	mov	r0, r1
   131c0:	f7ff ff50 	bl	13064 <duty2CCR>
   131c4:	4603      	mov	r3, r0
   131c6:	63a3      	str	r3, [r4, #56]	; 0x38
}
   131c8:	e05c      	b.n	13284 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
   131ca:	88fb      	ldrh	r3, [r7, #6]
   131cc:	4a2f      	ldr	r2, [pc, #188]	; (1328c <PWMBuiltIn_writeDuty+0x134>)
   131ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131d2:	2b08      	cmp	r3, #8
   131d4:	d112      	bne.n	131fc <PWMBuiltIn_writeDuty+0xa4>
   131d6:	88fb      	ldrh	r3, [r7, #6]
   131d8:	4a2d      	ldr	r2, [pc, #180]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   131da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131de:	681b      	ldr	r3, [r3, #0]
   131e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   131e2:	88fb      	ldrh	r3, [r7, #6]
   131e4:	4a2a      	ldr	r2, [pc, #168]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   131e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ea:	681c      	ldr	r4, [r3, #0]
   131ec:	ed97 0a00 	vldr	s0, [r7]
   131f0:	4608      	mov	r0, r1
   131f2:	f7ff ff37 	bl	13064 <duty2CCR>
   131f6:	4603      	mov	r3, r0
   131f8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   131fa:	e043      	b.n	13284 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
   131fc:	88fb      	ldrh	r3, [r7, #6]
   131fe:	4a23      	ldr	r2, [pc, #140]	; (1328c <PWMBuiltIn_writeDuty+0x134>)
   13200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13204:	2b0c      	cmp	r3, #12
   13206:	d112      	bne.n	1322e <PWMBuiltIn_writeDuty+0xd6>
   13208:	88fb      	ldrh	r3, [r7, #6]
   1320a:	4a21      	ldr	r2, [pc, #132]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   1320c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13210:	681b      	ldr	r3, [r3, #0]
   13212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   13214:	88fb      	ldrh	r3, [r7, #6]
   13216:	4a1e      	ldr	r2, [pc, #120]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   13218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1321c:	681c      	ldr	r4, [r3, #0]
   1321e:	ed97 0a00 	vldr	s0, [r7]
   13222:	4608      	mov	r0, r1
   13224:	f7ff ff1e 	bl	13064 <duty2CCR>
   13228:	4603      	mov	r3, r0
   1322a:	6423      	str	r3, [r4, #64]	; 0x40
}
   1322c:	e02a      	b.n	13284 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
   1322e:	88fb      	ldrh	r3, [r7, #6]
   13230:	4a16      	ldr	r2, [pc, #88]	; (1328c <PWMBuiltIn_writeDuty+0x134>)
   13232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13236:	2b10      	cmp	r3, #16
   13238:	d112      	bne.n	13260 <PWMBuiltIn_writeDuty+0x108>
   1323a:	88fb      	ldrh	r3, [r7, #6]
   1323c:	4a14      	ldr	r2, [pc, #80]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   1323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13242:	681b      	ldr	r3, [r3, #0]
   13244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   13246:	88fb      	ldrh	r3, [r7, #6]
   13248:	4a11      	ldr	r2, [pc, #68]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   1324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1324e:	681c      	ldr	r4, [r3, #0]
   13250:	ed97 0a00 	vldr	s0, [r7]
   13254:	4608      	mov	r0, r1
   13256:	f7ff ff05 	bl	13064 <duty2CCR>
   1325a:	4603      	mov	r3, r0
   1325c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1325e:	e011      	b.n	13284 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
   13260:	88fb      	ldrh	r3, [r7, #6]
   13262:	4a0b      	ldr	r2, [pc, #44]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   13264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13268:	681b      	ldr	r3, [r3, #0]
   1326a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1326c:	88fb      	ldrh	r3, [r7, #6]
   1326e:	4a08      	ldr	r2, [pc, #32]	; (13290 <PWMBuiltIn_writeDuty+0x138>)
   13270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13274:	681c      	ldr	r4, [r3, #0]
   13276:	ed97 0a00 	vldr	s0, [r7]
   1327a:	4608      	mov	r0, r1
   1327c:	f7ff fef2 	bl	13064 <duty2CCR>
   13280:	4603      	mov	r3, r0
   13282:	65e3      	str	r3, [r4, #92]	; 0x5c
}
   13284:	bf00      	nop
   13286:	370c      	adds	r7, #12
   13288:	46bd      	mov	sp, r7
   1328a:	bd90      	pop	{r4, r7, pc}
   1328c:	00029d84 	.word	0x00029d84
   13290:	00029d34 	.word	0x00029d34
   13294:	00000000 	.word	0x00000000

00013298 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
   13298:	b590      	push	{r4, r7, lr}
   1329a:	b087      	sub	sp, #28
   1329c:	af00      	add	r7, sp, #0
   1329e:	4603      	mov	r3, r0
   132a0:	ed87 0a00 	vstr	s0, [r7]
   132a4:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
   132a6:	edd7 7a00 	vldr	s15, [r7]
   132aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
   132ae:	ed9f 6bae 	vldr	d6, [pc, #696]	; 13568 <PWMBuiltIn_writeFrequency+0x2d0>
   132b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
   132b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   132ba:	d501      	bpl.n	132c0 <PWMBuiltIn_writeFrequency+0x28>
   132bc:	4bac      	ldr	r3, [pc, #688]	; (13570 <PWMBuiltIn_writeFrequency+0x2d8>)
   132be:	e00b      	b.n	132d8 <PWMBuiltIn_writeFrequency+0x40>
   132c0:	edd7 7a00 	vldr	s15, [r7]
   132c4:	ed9f 7aab 	vldr	s14, [pc, #684]	; 13574 <PWMBuiltIn_writeFrequency+0x2dc>
   132c8:	eef4 7ac7 	vcmpe.f32	s15, s14
   132cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   132d0:	dd01      	ble.n	132d6 <PWMBuiltIn_writeFrequency+0x3e>
   132d2:	4ba9      	ldr	r3, [pc, #676]	; (13578 <PWMBuiltIn_writeFrequency+0x2e0>)
   132d4:	e000      	b.n	132d8 <PWMBuiltIn_writeFrequency+0x40>
   132d6:	683b      	ldr	r3, [r7, #0]
   132d8:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
   132da:	2300      	movs	r3, #0
   132dc:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
   132de:	2301      	movs	r3, #1
   132e0:	613b      	str	r3, [r7, #16]
   132e2:	e06f      	b.n	133c4 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
   132e4:	88fa      	ldrh	r2, [r7, #6]
   132e6:	49a5      	ldr	r1, [pc, #660]	; (1357c <PWMBuiltIn_writeFrequency+0x2e4>)
   132e8:	4613      	mov	r3, r2
   132ea:	009b      	lsls	r3, r3, #2
   132ec:	4413      	add	r3, r2
   132ee:	005b      	lsls	r3, r3, #1
   132f0:	693a      	ldr	r2, [r7, #16]
   132f2:	4413      	add	r3, r2
   132f4:	009b      	lsls	r3, r3, #2
   132f6:	440b      	add	r3, r1
   132f8:	edd3 7a00 	vldr	s15, [r3]
   132fc:	ed97 7a00 	vldr	s14, [r7]
   13300:	eeb4 7ae7 	vcmpe.f32	s14, s15
   13304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13308:	d859      	bhi.n	133be <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
   1330a:	4a9d      	ldr	r2, [pc, #628]	; (13580 <PWMBuiltIn_writeFrequency+0x2e8>)
   1330c:	693b      	ldr	r3, [r7, #16]
   1330e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   13312:	693b      	ldr	r3, [r7, #16]
   13314:	3b01      	subs	r3, #1
   13316:	499a      	ldr	r1, [pc, #616]	; (13580 <PWMBuiltIn_writeFrequency+0x2e8>)
   13318:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1331c:	429a      	cmp	r2, r3
   1331e:	d124      	bne.n	1336a <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
   13320:	4a97      	ldr	r2, [pc, #604]	; (13580 <PWMBuiltIn_writeFrequency+0x2e8>)
   13322:	693b      	ldr	r3, [r7, #16]
   13324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13328:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
   1332a:	88fb      	ldrh	r3, [r7, #6]
   1332c:	4a95      	ldr	r2, [pc, #596]	; (13584 <PWMBuiltIn_writeFrequency+0x2ec>)
   1332e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13332:	ee07 3a90 	vmov	s15, r3
   13336:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   1333a:	edd7 7a00 	vldr	s15, [r7]
   1333e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   13342:	697b      	ldr	r3, [r7, #20]
   13344:	3301      	adds	r3, #1
   13346:	ee07 3a90 	vmov	s15, r3
   1334a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   1334e:	eec6 7a87 	vdiv.f32	s15, s13, s14
   13352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13356:	ee17 1a90 	vmov	r1, s15
   1335a:	88fb      	ldrh	r3, [r7, #6]
   1335c:	4a8a      	ldr	r2, [pc, #552]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   1335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13362:	681b      	ldr	r3, [r3, #0]
   13364:	1e4a      	subs	r2, r1, #1
   13366:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
   13368:	e02f      	b.n	133ca <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
   1336a:	88fb      	ldrh	r3, [r7, #6]
   1336c:	4a86      	ldr	r2, [pc, #536]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   1336e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13372:	681b      	ldr	r3, [r3, #0]
   13374:	4985      	ldr	r1, [pc, #532]	; (1358c <PWMBuiltIn_writeFrequency+0x2f4>)
   13376:	693a      	ldr	r2, [r7, #16]
   13378:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1337c:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
   1337e:	88fb      	ldrh	r3, [r7, #6]
   13380:	4a80      	ldr	r2, [pc, #512]	; (13584 <PWMBuiltIn_writeFrequency+0x2ec>)
   13382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13386:	ee07 3a90 	vmov	s15, r3
   1338a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   1338e:	edd7 7a00 	vldr	s15, [r7]
   13392:	eec7 6a27 	vdiv.f32	s13, s14, s15
   13396:	88fb      	ldrh	r3, [r7, #6]
   13398:	4a7b      	ldr	r2, [pc, #492]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   1339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1339e:	681b      	ldr	r3, [r3, #0]
   133a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133a2:	3301      	adds	r3, #1
   133a4:	ee07 3a90 	vmov	s15, r3
   133a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   133ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
   133b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   133b4:	ee17 3a90 	vmov	r3, s15
   133b8:	3b01      	subs	r3, #1
   133ba:	617b      	str	r3, [r7, #20]
			break;
   133bc:	e005      	b.n	133ca <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
   133be:	693b      	ldr	r3, [r7, #16]
   133c0:	3301      	adds	r3, #1
   133c2:	613b      	str	r3, [r7, #16]
   133c4:	693b      	ldr	r3, [r7, #16]
   133c6:	2b09      	cmp	r3, #9
   133c8:	dd8c      	ble.n	132e4 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
   133ca:	88fb      	ldrh	r3, [r7, #6]
   133cc:	4a6e      	ldr	r2, [pc, #440]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   133ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133d2:	681b      	ldr	r3, [r3, #0]
   133d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   133d6:	697a      	ldr	r2, [r7, #20]
   133d8:	429a      	cmp	r2, r3
   133da:	f000 80be 	beq.w	1355a <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
   133de:	2300      	movs	r3, #0
   133e0:	60fb      	str	r3, [r7, #12]
   133e2:	e0a9      	b.n	13538 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
   133e4:	4a68      	ldr	r2, [pc, #416]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   133e6:	68fb      	ldr	r3, [r7, #12]
   133e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   133ec:	88fb      	ldrh	r3, [r7, #6]
   133ee:	4966      	ldr	r1, [pc, #408]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   133f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   133f4:	429a      	cmp	r2, r3
   133f6:	f040 809c 	bne.w	13532 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
   133fa:	4a65      	ldr	r2, [pc, #404]	; (13590 <PWMBuiltIn_writeFrequency+0x2f8>)
   133fc:	68fb      	ldr	r3, [r7, #12]
   133fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13402:	2b00      	cmp	r3, #0
   13404:	d113      	bne.n	1342e <PWMBuiltIn_writeFrequency+0x196>
   13406:	68fb      	ldr	r3, [r7, #12]
   13408:	b29b      	uxth	r3, r3
   1340a:	4618      	mov	r0, r3
   1340c:	f000 f8c2 	bl	13594 <PWMBuiltIn_readDuty>
   13410:	eef0 7a40 	vmov.f32	s15, s0
   13414:	4a5c      	ldr	r2, [pc, #368]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   13416:	68fb      	ldr	r3, [r7, #12]
   13418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1341c:	681c      	ldr	r4, [r3, #0]
   1341e:	eeb0 0a67 	vmov.f32	s0, s15
   13422:	6978      	ldr	r0, [r7, #20]
   13424:	f7ff fe1e 	bl	13064 <duty2CCR>
   13428:	4603      	mov	r3, r0
   1342a:	6363      	str	r3, [r4, #52]	; 0x34
   1342c:	e07a      	b.n	13524 <PWMBuiltIn_writeFrequency+0x28c>
   1342e:	4a58      	ldr	r2, [pc, #352]	; (13590 <PWMBuiltIn_writeFrequency+0x2f8>)
   13430:	68fb      	ldr	r3, [r7, #12]
   13432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13436:	2b04      	cmp	r3, #4
   13438:	d113      	bne.n	13462 <PWMBuiltIn_writeFrequency+0x1ca>
   1343a:	68fb      	ldr	r3, [r7, #12]
   1343c:	b29b      	uxth	r3, r3
   1343e:	4618      	mov	r0, r3
   13440:	f000 f8a8 	bl	13594 <PWMBuiltIn_readDuty>
   13444:	eef0 7a40 	vmov.f32	s15, s0
   13448:	4a4f      	ldr	r2, [pc, #316]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   1344a:	68fb      	ldr	r3, [r7, #12]
   1344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13450:	681c      	ldr	r4, [r3, #0]
   13452:	eeb0 0a67 	vmov.f32	s0, s15
   13456:	6978      	ldr	r0, [r7, #20]
   13458:	f7ff fe04 	bl	13064 <duty2CCR>
   1345c:	4603      	mov	r3, r0
   1345e:	63a3      	str	r3, [r4, #56]	; 0x38
   13460:	e060      	b.n	13524 <PWMBuiltIn_writeFrequency+0x28c>
   13462:	4a4b      	ldr	r2, [pc, #300]	; (13590 <PWMBuiltIn_writeFrequency+0x2f8>)
   13464:	68fb      	ldr	r3, [r7, #12]
   13466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1346a:	2b08      	cmp	r3, #8
   1346c:	d113      	bne.n	13496 <PWMBuiltIn_writeFrequency+0x1fe>
   1346e:	68fb      	ldr	r3, [r7, #12]
   13470:	b29b      	uxth	r3, r3
   13472:	4618      	mov	r0, r3
   13474:	f000 f88e 	bl	13594 <PWMBuiltIn_readDuty>
   13478:	eef0 7a40 	vmov.f32	s15, s0
   1347c:	4a42      	ldr	r2, [pc, #264]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   1347e:	68fb      	ldr	r3, [r7, #12]
   13480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13484:	681c      	ldr	r4, [r3, #0]
   13486:	eeb0 0a67 	vmov.f32	s0, s15
   1348a:	6978      	ldr	r0, [r7, #20]
   1348c:	f7ff fdea 	bl	13064 <duty2CCR>
   13490:	4603      	mov	r3, r0
   13492:	63e3      	str	r3, [r4, #60]	; 0x3c
   13494:	e046      	b.n	13524 <PWMBuiltIn_writeFrequency+0x28c>
   13496:	4a3e      	ldr	r2, [pc, #248]	; (13590 <PWMBuiltIn_writeFrequency+0x2f8>)
   13498:	68fb      	ldr	r3, [r7, #12]
   1349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1349e:	2b0c      	cmp	r3, #12
   134a0:	d113      	bne.n	134ca <PWMBuiltIn_writeFrequency+0x232>
   134a2:	68fb      	ldr	r3, [r7, #12]
   134a4:	b29b      	uxth	r3, r3
   134a6:	4618      	mov	r0, r3
   134a8:	f000 f874 	bl	13594 <PWMBuiltIn_readDuty>
   134ac:	eef0 7a40 	vmov.f32	s15, s0
   134b0:	4a35      	ldr	r2, [pc, #212]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   134b2:	68fb      	ldr	r3, [r7, #12]
   134b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134b8:	681c      	ldr	r4, [r3, #0]
   134ba:	eeb0 0a67 	vmov.f32	s0, s15
   134be:	6978      	ldr	r0, [r7, #20]
   134c0:	f7ff fdd0 	bl	13064 <duty2CCR>
   134c4:	4603      	mov	r3, r0
   134c6:	6423      	str	r3, [r4, #64]	; 0x40
   134c8:	e02c      	b.n	13524 <PWMBuiltIn_writeFrequency+0x28c>
   134ca:	4a31      	ldr	r2, [pc, #196]	; (13590 <PWMBuiltIn_writeFrequency+0x2f8>)
   134cc:	68fb      	ldr	r3, [r7, #12]
   134ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d2:	2b10      	cmp	r3, #16
   134d4:	d113      	bne.n	134fe <PWMBuiltIn_writeFrequency+0x266>
   134d6:	68fb      	ldr	r3, [r7, #12]
   134d8:	b29b      	uxth	r3, r3
   134da:	4618      	mov	r0, r3
   134dc:	f000 f85a 	bl	13594 <PWMBuiltIn_readDuty>
   134e0:	eef0 7a40 	vmov.f32	s15, s0
   134e4:	4a28      	ldr	r2, [pc, #160]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   134e6:	68fb      	ldr	r3, [r7, #12]
   134e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134ec:	681c      	ldr	r4, [r3, #0]
   134ee:	eeb0 0a67 	vmov.f32	s0, s15
   134f2:	6978      	ldr	r0, [r7, #20]
   134f4:	f7ff fdb6 	bl	13064 <duty2CCR>
   134f8:	4603      	mov	r3, r0
   134fa:	65a3      	str	r3, [r4, #88]	; 0x58
   134fc:	e012      	b.n	13524 <PWMBuiltIn_writeFrequency+0x28c>
   134fe:	68fb      	ldr	r3, [r7, #12]
   13500:	b29b      	uxth	r3, r3
   13502:	4618      	mov	r0, r3
   13504:	f000 f846 	bl	13594 <PWMBuiltIn_readDuty>
   13508:	eef0 7a40 	vmov.f32	s15, s0
   1350c:	4a1e      	ldr	r2, [pc, #120]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   1350e:	68fb      	ldr	r3, [r7, #12]
   13510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13514:	681c      	ldr	r4, [r3, #0]
   13516:	eeb0 0a67 	vmov.f32	s0, s15
   1351a:	6978      	ldr	r0, [r7, #20]
   1351c:	f7ff fda2 	bl	13064 <duty2CCR>
   13520:	4603      	mov	r3, r0
   13522:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
   13524:	4a18      	ldr	r2, [pc, #96]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   13526:	68fb      	ldr	r3, [r7, #12]
   13528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1352c:	681b      	ldr	r3, [r3, #0]
   1352e:	2200      	movs	r2, #0
   13530:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
   13532:	68fb      	ldr	r3, [r7, #12]
   13534:	3301      	adds	r3, #1
   13536:	60fb      	str	r3, [r7, #12]
   13538:	68fb      	ldr	r3, [r7, #12]
   1353a:	2b13      	cmp	r3, #19
   1353c:	f77f af52 	ble.w	133e4 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
   13540:	88fb      	ldrh	r3, [r7, #6]
   13542:	4a11      	ldr	r2, [pc, #68]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   13544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13548:	681b      	ldr	r3, [r3, #0]
   1354a:	697a      	ldr	r2, [r7, #20]
   1354c:	62da      	str	r2, [r3, #44]	; 0x2c
   1354e:	88fb      	ldrh	r3, [r7, #6]
   13550:	4a0d      	ldr	r2, [pc, #52]	; (13588 <PWMBuiltIn_writeFrequency+0x2f0>)
   13552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13556:	697a      	ldr	r2, [r7, #20]
   13558:	60da      	str	r2, [r3, #12]
	}
}
   1355a:	bf00      	nop
   1355c:	371c      	adds	r7, #28
   1355e:	46bd      	mov	sp, r7
   13560:	bd90      	pop	{r4, r7, pc}
   13562:	bf00      	nop
   13564:	f3af 8000 	nop.w
   13568:	eb851eb8 	.word	0xeb851eb8
   1356c:	3f9eb851 	.word	0x3f9eb851
   13570:	3cf5c28f 	.word	0x3cf5c28f
   13574:	4bcdfe60 	.word	0x4bcdfe60
   13578:	4bcdfe60 	.word	0x4bcdfe60
   1357c:	0002afc0 	.word	0x0002afc0
   13580:	0002af70 	.word	0x0002af70
   13584:	0002af20 	.word	0x0002af20
   13588:	00029d34 	.word	0x00029d34
   1358c:	0002af98 	.word	0x0002af98
   13590:	00029d84 	.word	0x00029d84

00013594 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
   13594:	b580      	push	{r7, lr}
   13596:	b082      	sub	sp, #8
   13598:	af00      	add	r7, sp, #0
   1359a:	4603      	mov	r3, r0
   1359c:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
   1359e:	88fb      	ldrh	r3, [r7, #6]
   135a0:	4a2a      	ldr	r2, [pc, #168]	; (1364c <PWMBuiltIn_readDuty+0xb8>)
   135a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135a6:	681b      	ldr	r3, [r3, #0]
   135a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   135aa:	88fb      	ldrh	r3, [r7, #6]
   135ac:	4a28      	ldr	r2, [pc, #160]	; (13650 <PWMBuiltIn_readDuty+0xbc>)
   135ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135b2:	2b00      	cmp	r3, #0
   135b4:	d106      	bne.n	135c4 <PWMBuiltIn_readDuty+0x30>
   135b6:	88fb      	ldrh	r3, [r7, #6]
   135b8:	4a24      	ldr	r2, [pc, #144]	; (1364c <PWMBuiltIn_readDuty+0xb8>)
   135ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135be:	681b      	ldr	r3, [r3, #0]
   135c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   135c2:	e039      	b.n	13638 <PWMBuiltIn_readDuty+0xa4>
   135c4:	88fb      	ldrh	r3, [r7, #6]
   135c6:	4a22      	ldr	r2, [pc, #136]	; (13650 <PWMBuiltIn_readDuty+0xbc>)
   135c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135cc:	2b04      	cmp	r3, #4
   135ce:	d106      	bne.n	135de <PWMBuiltIn_readDuty+0x4a>
   135d0:	88fb      	ldrh	r3, [r7, #6]
   135d2:	4a1e      	ldr	r2, [pc, #120]	; (1364c <PWMBuiltIn_readDuty+0xb8>)
   135d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135d8:	681b      	ldr	r3, [r3, #0]
   135da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   135dc:	e02c      	b.n	13638 <PWMBuiltIn_readDuty+0xa4>
   135de:	88fb      	ldrh	r3, [r7, #6]
   135e0:	4a1b      	ldr	r2, [pc, #108]	; (13650 <PWMBuiltIn_readDuty+0xbc>)
   135e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135e6:	2b08      	cmp	r3, #8
   135e8:	d106      	bne.n	135f8 <PWMBuiltIn_readDuty+0x64>
   135ea:	88fb      	ldrh	r3, [r7, #6]
   135ec:	4a17      	ldr	r2, [pc, #92]	; (1364c <PWMBuiltIn_readDuty+0xb8>)
   135ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135f2:	681b      	ldr	r3, [r3, #0]
   135f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   135f6:	e01f      	b.n	13638 <PWMBuiltIn_readDuty+0xa4>
   135f8:	88fb      	ldrh	r3, [r7, #6]
   135fa:	4a15      	ldr	r2, [pc, #84]	; (13650 <PWMBuiltIn_readDuty+0xbc>)
   135fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13600:	2b0c      	cmp	r3, #12
   13602:	d106      	bne.n	13612 <PWMBuiltIn_readDuty+0x7e>
   13604:	88fb      	ldrh	r3, [r7, #6]
   13606:	4a11      	ldr	r2, [pc, #68]	; (1364c <PWMBuiltIn_readDuty+0xb8>)
   13608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1360c:	681b      	ldr	r3, [r3, #0]
   1360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   13610:	e012      	b.n	13638 <PWMBuiltIn_readDuty+0xa4>
   13612:	88fb      	ldrh	r3, [r7, #6]
   13614:	4a0e      	ldr	r2, [pc, #56]	; (13650 <PWMBuiltIn_readDuty+0xbc>)
   13616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1361a:	2b10      	cmp	r3, #16
   1361c:	d106      	bne.n	1362c <PWMBuiltIn_readDuty+0x98>
   1361e:	88fb      	ldrh	r3, [r7, #6]
   13620:	4a0a      	ldr	r2, [pc, #40]	; (1364c <PWMBuiltIn_readDuty+0xb8>)
   13622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13626:	681b      	ldr	r3, [r3, #0]
   13628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1362a:	e005      	b.n	13638 <PWMBuiltIn_readDuty+0xa4>
   1362c:	88fb      	ldrh	r3, [r7, #6]
   1362e:	4a07      	ldr	r2, [pc, #28]	; (1364c <PWMBuiltIn_readDuty+0xb8>)
   13630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13634:	681b      	ldr	r3, [r3, #0]
   13636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13638:	4619      	mov	r1, r3
   1363a:	f7ff fd3a 	bl	130b2 <CCR2duty>
   1363e:	eef0 7a40 	vmov.f32	s15, s0
}
   13642:	eeb0 0a67 	vmov.f32	s0, s15
   13646:	3708      	adds	r7, #8
   13648:	46bd      	mov	sp, r7
   1364a:	bd80      	pop	{r7, pc}
   1364c:	00029d34 	.word	0x00029d34
   13650:	00029d84 	.word	0x00029d84

00013654 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
   13654:	b580      	push	{r7, lr}
   13656:	b082      	sub	sp, #8
   13658:	af00      	add	r7, sp, #0
   1365a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
   1365c:	4a07      	ldr	r2, [pc, #28]	; (1367c <PWMBuiltInStartChannel+0x28>)
   1365e:	687b      	ldr	r3, [r7, #4]
   13660:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   13664:	4a06      	ldr	r2, [pc, #24]	; (13680 <PWMBuiltInStartChannel+0x2c>)
   13666:	687b      	ldr	r3, [r7, #4]
   13668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1366c:	4619      	mov	r1, r3
   1366e:	f7fb f92f 	bl	e8d0 <HAL_TIM_PWM_Start>
}
   13672:	bf00      	nop
   13674:	3708      	adds	r7, #8
   13676:	46bd      	mov	sp, r7
   13678:	bd80      	pop	{r7, pc}
   1367a:	bf00      	nop
   1367c:	00029d34 	.word	0x00029d34
   13680:	00029d84 	.word	0x00029d84

00013684 <PWMBuiltInStopChannel>:

void PWMBuiltInStopChannel(int i)
{
   13684:	b580      	push	{r7, lr}
   13686:	b082      	sub	sp, #8
   13688:	af00      	add	r7, sp, #0
   1368a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
   1368c:	4a07      	ldr	r2, [pc, #28]	; (136ac <PWMBuiltInStopChannel+0x28>)
   1368e:	687b      	ldr	r3, [r7, #4]
   13690:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   13694:	4a06      	ldr	r2, [pc, #24]	; (136b0 <PWMBuiltInStopChannel+0x2c>)
   13696:	687b      	ldr	r3, [r7, #4]
   13698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1369c:	4619      	mov	r1, r3
   1369e:	f7fb f95b 	bl	e958 <HAL_TIM_PWM_Stop>
}
   136a2:	bf00      	nop
   136a4:	3708      	adds	r7, #8
   136a6:	46bd      	mov	sp, r7
   136a8:	bd80      	pop	{r7, pc}
   136aa:	bf00      	nop
   136ac:	00029d34 	.word	0x00029d34
   136b0:	00029d84 	.word	0x00029d84

000136b4 <PWMBuiltInStart>:

void PWMBuiltInStart()
{
   136b4:	b580      	push	{r7, lr}
   136b6:	b082      	sub	sp, #8
   136b8:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
   136ba:	2300      	movs	r3, #0
   136bc:	607b      	str	r3, [r7, #4]
   136be:	e005      	b.n	136cc <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
   136c0:	6878      	ldr	r0, [r7, #4]
   136c2:	f7ff ffc7 	bl	13654 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
   136c6:	687b      	ldr	r3, [r7, #4]
   136c8:	3301      	adds	r3, #1
   136ca:	607b      	str	r3, [r7, #4]
   136cc:	687b      	ldr	r3, [r7, #4]
   136ce:	2b13      	cmp	r3, #19
   136d0:	ddf6      	ble.n	136c0 <PWMBuiltInStart+0xc>
}
   136d2:	bf00      	nop
   136d4:	3708      	adds	r7, #8
   136d6:	46bd      	mov	sp, r7
   136d8:	bd80      	pop	{r7, pc}
	...

000136dc <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
   136dc:	b580      	push	{r7, lr}
   136de:	b084      	sub	sp, #16
   136e0:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
   136e2:	2300      	movs	r3, #0
   136e4:	60fb      	str	r3, [r7, #12]
   136e6:	e06f      	b.n	137c8 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
   136e8:	4a3c      	ldr	r2, [pc, #240]	; (137dc <PWMBuiltIn_init+0x100>)
   136ea:	68fb      	ldr	r3, [r7, #12]
   136ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136f0:	4618      	mov	r0, r3
   136f2:	f7ff fcfd 	bl	130f0 <getTIM_SOURCECLK>
   136f6:	4601      	mov	r1, r0
   136f8:	4a39      	ldr	r2, [pc, #228]	; (137e0 <PWMBuiltIn_init+0x104>)
   136fa:	68fb      	ldr	r3, [r7, #12]
   136fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
   13700:	2300      	movs	r3, #0
   13702:	60bb      	str	r3, [r7, #8]
   13704:	e04c      	b.n	137a0 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
   13706:	4a37      	ldr	r2, [pc, #220]	; (137e4 <PWMBuiltIn_init+0x108>)
   13708:	68bb      	ldr	r3, [r7, #8]
   1370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1370e:	2201      	movs	r2, #1
   13710:	fa02 f303 	lsl.w	r3, r2, r3
   13714:	1e5a      	subs	r2, r3, #1
   13716:	4934      	ldr	r1, [pc, #208]	; (137e8 <PWMBuiltIn_init+0x10c>)
   13718:	68bb      	ldr	r3, [r7, #8]
   1371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
   1371e:	4a33      	ldr	r2, [pc, #204]	; (137ec <PWMBuiltIn_init+0x110>)
   13720:	68bb      	ldr	r3, [r7, #8]
   13722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13726:	2201      	movs	r2, #1
   13728:	fa02 f303 	lsl.w	r3, r2, r3
   1372c:	1e5a      	subs	r2, r3, #1
   1372e:	4930      	ldr	r1, [pc, #192]	; (137f0 <PWMBuiltIn_init+0x114>)
   13730:	68bb      	ldr	r3, [r7, #8]
   13732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
   13736:	4a2c      	ldr	r2, [pc, #176]	; (137e8 <PWMBuiltIn_init+0x10c>)
   13738:	68bb      	ldr	r3, [r7, #8]
   1373a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1373e:	3301      	adds	r3, #1
   13740:	ee07 3a90 	vmov	s15, r3
   13744:	eef8 7a67 	vcvt.f32.u32	s15, s15
   13748:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
   1374c:	4a28      	ldr	r2, [pc, #160]	; (137f0 <PWMBuiltIn_init+0x114>)
   1374e:	68bb      	ldr	r3, [r7, #8]
   13750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13754:	3301      	adds	r3, #1
   13756:	ee07 3a90 	vmov	s15, r3
   1375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1375e:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
   13762:	4a1f      	ldr	r2, [pc, #124]	; (137e0 <PWMBuiltIn_init+0x104>)
   13764:	68fb      	ldr	r3, [r7, #12]
   13766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1376a:	ee07 3a90 	vmov	s15, r3
   1376e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   13772:	edd7 7a01 	vldr	s15, [r7, #4]
   13776:	eec7 6a27 	vdiv.f32	s13, s14, s15
   1377a:	ed97 7a00 	vldr	s14, [r7]
   1377e:	eec6 7a87 	vdiv.f32	s15, s13, s14
   13782:	491c      	ldr	r1, [pc, #112]	; (137f4 <PWMBuiltIn_init+0x118>)
   13784:	68fa      	ldr	r2, [r7, #12]
   13786:	4613      	mov	r3, r2
   13788:	009b      	lsls	r3, r3, #2
   1378a:	4413      	add	r3, r2
   1378c:	005b      	lsls	r3, r3, #1
   1378e:	68ba      	ldr	r2, [r7, #8]
   13790:	4413      	add	r3, r2
   13792:	009b      	lsls	r3, r3, #2
   13794:	440b      	add	r3, r1
   13796:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
   1379a:	68bb      	ldr	r3, [r7, #8]
   1379c:	3301      	adds	r3, #1
   1379e:	60bb      	str	r3, [r7, #8]
   137a0:	68bb      	ldr	r3, [r7, #8]
   137a2:	2b09      	cmp	r3, #9
   137a4:	ddaf      	ble.n	13706 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
   137a6:	68fb      	ldr	r3, [r7, #12]
   137a8:	b29b      	uxth	r3, r3
   137aa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 137f8 <PWMBuiltIn_init+0x11c>
   137ae:	4618      	mov	r0, r3
   137b0:	f7ff fcd2 	bl	13158 <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
   137b4:	68fb      	ldr	r3, [r7, #12]
   137b6:	b29b      	uxth	r3, r3
   137b8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 137fc <PWMBuiltIn_init+0x120>
   137bc:	4618      	mov	r0, r3
   137be:	f7ff fd6b 	bl	13298 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
   137c2:	68fb      	ldr	r3, [r7, #12]
   137c4:	3301      	adds	r3, #1
   137c6:	60fb      	str	r3, [r7, #12]
   137c8:	68fb      	ldr	r3, [r7, #12]
   137ca:	2b13      	cmp	r3, #19
   137cc:	dd8c      	ble.n	136e8 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
   137ce:	f7ff ff71 	bl	136b4 <PWMBuiltInStart>
}
   137d2:	bf00      	nop
   137d4:	3710      	adds	r7, #16
   137d6:	46bd      	mov	sp, r7
   137d8:	bd80      	pop	{r7, pc}
   137da:	bf00      	nop
   137dc:	00029d34 	.word	0x00029d34
   137e0:	0002af20 	.word	0x0002af20
   137e4:	00029dd4 	.word	0x00029dd4
   137e8:	0002af70 	.word	0x0002af70
   137ec:	00029dfc 	.word	0x00029dfc
   137f0:	0002af98 	.word	0x0002af98
   137f4:	0002afc0 	.word	0x0002afc0
   137f8:	00000000 	.word	0x00000000
   137fc:	42200000 	.word	0x42200000

00013800 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
   13800:	b480      	push	{r7}
   13802:	b085      	sub	sp, #20
   13804:	af00      	add	r7, sp, #0
   13806:	60f8      	str	r0, [r7, #12]
   13808:	460b      	mov	r3, r1
   1380a:	ed87 0a01 	vstr	s0, [r7, #4]
   1380e:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
   13810:	68fb      	ldr	r3, [r7, #12]
   13812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13814:	7afb      	ldrb	r3, [r7, #11]
   13816:	009b      	lsls	r3, r3, #2
   13818:	4413      	add	r3, r2
   1381a:	687a      	ldr	r2, [r7, #4]
   1381c:	601a      	str	r2, [r3, #0]
}
   1381e:	bf00      	nop
   13820:	3714      	adds	r7, #20
   13822:	46bd      	mov	sp, r7
   13824:	f85d 7b04 	ldr.w	r7, [sp], #4
   13828:	4770      	bx	lr
	...

0001382c <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
   1382c:	b480      	push	{r7}
   1382e:	b085      	sub	sp, #20
   13830:	af00      	add	r7, sp, #0
   13832:	6078      	str	r0, [r7, #4]
   13834:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
   13836:	687b      	ldr	r3, [r7, #4]
   13838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   1383c:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
   1383e:	687b      	ldr	r3, [r7, #4]
   13840:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
   13844:	2b00      	cmp	r3, #0
   13846:	d15b      	bne.n	13900 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
   13848:	683b      	ldr	r3, [r7, #0]
   1384a:	ed93 7a00 	vldr	s14, [r3]
   1384e:	edd7 7a03 	vldr	s15, [r7, #12]
   13852:	ee27 7a27 	vmul.f32	s14, s14, s15
   13856:	edd7 7a03 	vldr	s15, [r7, #12]
   1385a:	ee27 7a27 	vmul.f32	s14, s14, s15
   1385e:	edd7 7a03 	vldr	s15, [r7, #12]
   13862:	ee27 7a27 	vmul.f32	s14, s14, s15
   13866:	edd7 7a03 	vldr	s15, [r7, #12]
   1386a:	ee27 7a27 	vmul.f32	s14, s14, s15
   1386e:	687b      	ldr	r3, [r7, #4]
   13870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13872:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   13876:	eec7 7a26 	vdiv.f32	s15, s14, s13
   1387a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
   1387e:	683b      	ldr	r3, [r7, #0]
   13880:	ed93 7a00 	vldr	s14, [r3]
   13884:	edd7 7a03 	vldr	s15, [r7, #12]
   13888:	ee27 7a27 	vmul.f32	s14, s14, s15
   1388c:	edd7 7a03 	vldr	s15, [r7, #12]
   13890:	ee27 7a27 	vmul.f32	s14, s14, s15
   13894:	edd7 7a03 	vldr	s15, [r7, #12]
   13898:	ee27 7a27 	vmul.f32	s14, s14, s15
   1389c:	687b      	ldr	r3, [r7, #4]
   1389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   138a0:	3304      	adds	r3, #4
   138a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   138a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   138aa:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
   138ae:	683b      	ldr	r3, [r7, #0]
   138b0:	ed93 7a00 	vldr	s14, [r3]
   138b4:	edd7 7a03 	vldr	s15, [r7, #12]
   138b8:	ee27 7a27 	vmul.f32	s14, s14, s15
   138bc:	edd7 7a03 	vldr	s15, [r7, #12]
   138c0:	ee27 7a27 	vmul.f32	s14, s14, s15
   138c4:	edd7 7a03 	vldr	s15, [r7, #12]
   138c8:	ee27 7a27 	vmul.f32	s14, s14, s15
   138cc:	687b      	ldr	r3, [r7, #4]
   138ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   138d0:	3308      	adds	r3, #8
   138d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   138d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   138da:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
   138de:	683b      	ldr	r3, [r7, #0]
   138e0:	ed93 7a00 	vldr	s14, [r3]
   138e4:	edd7 7a03 	vldr	s15, [r7, #12]
   138e8:	ee27 7a27 	vmul.f32	s14, s14, s15
   138ec:	687b      	ldr	r3, [r7, #4]
   138ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   138f0:	330c      	adds	r3, #12
   138f2:	edd7 7a03 	vldr	s15, [r7, #12]
   138f6:	ee67 7a27 	vmul.f32	s15, s14, s15
   138fa:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
   138fe:	e0fc      	b.n	13afa <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
   13906:	2b01      	cmp	r3, #1
   13908:	f040 80f7 	bne.w	13afa <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
   1390c:	683b      	ldr	r3, [r7, #0]
   1390e:	ed93 7a00 	vldr	s14, [r3]
   13912:	edd7 7a03 	vldr	s15, [r7, #12]
   13916:	ee27 7a27 	vmul.f32	s14, s14, s15
   1391a:	edd7 7a03 	vldr	s15, [r7, #12]
   1391e:	ee27 7a27 	vmul.f32	s14, s14, s15
   13922:	edd7 7a03 	vldr	s15, [r7, #12]
   13926:	ee27 7a27 	vmul.f32	s14, s14, s15
   1392a:	edd7 7a03 	vldr	s15, [r7, #12]
   1392e:	ee27 7a27 	vmul.f32	s14, s14, s15
   13932:	edd7 7a03 	vldr	s15, [r7, #12]
   13936:	ee27 7a27 	vmul.f32	s14, s14, s15
   1393a:	edd7 7a03 	vldr	s15, [r7, #12]
   1393e:	ee27 7a27 	vmul.f32	s14, s14, s15
   13942:	687b      	ldr	r3, [r7, #4]
   13944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13946:	eddf 6a70 	vldr	s13, [pc, #448]	; 13b08 <kalman_setQ+0x2dc>
   1394a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   1394e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
   13952:	683b      	ldr	r3, [r7, #0]
   13954:	ed93 7a00 	vldr	s14, [r3]
   13958:	edd7 7a03 	vldr	s15, [r7, #12]
   1395c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13960:	edd7 7a03 	vldr	s15, [r7, #12]
   13964:	ee27 7a27 	vmul.f32	s14, s14, s15
   13968:	edd7 7a03 	vldr	s15, [r7, #12]
   1396c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13970:	edd7 7a03 	vldr	s15, [r7, #12]
   13974:	ee27 7a27 	vmul.f32	s14, s14, s15
   13978:	edd7 7a03 	vldr	s15, [r7, #12]
   1397c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13980:	687b      	ldr	r3, [r7, #4]
   13982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13984:	3304      	adds	r3, #4
   13986:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
   1398a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   1398e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
   13992:	683b      	ldr	r3, [r7, #0]
   13994:	ed93 7a00 	vldr	s14, [r3]
   13998:	edd7 7a03 	vldr	s15, [r7, #12]
   1399c:	ee27 7a27 	vmul.f32	s14, s14, s15
   139a0:	edd7 7a03 	vldr	s15, [r7, #12]
   139a4:	ee27 7a27 	vmul.f32	s14, s14, s15
   139a8:	edd7 7a03 	vldr	s15, [r7, #12]
   139ac:	ee27 7a27 	vmul.f32	s14, s14, s15
   139b0:	edd7 7a03 	vldr	s15, [r7, #12]
   139b4:	ee27 7a27 	vmul.f32	s14, s14, s15
   139b8:	687b      	ldr	r3, [r7, #4]
   139ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   139bc:	3308      	adds	r3, #8
   139be:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
   139c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   139c6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
   139ca:	683b      	ldr	r3, [r7, #0]
   139cc:	ed93 7a00 	vldr	s14, [r3]
   139d0:	edd7 7a03 	vldr	s15, [r7, #12]
   139d4:	ee27 7a27 	vmul.f32	s14, s14, s15
   139d8:	edd7 7a03 	vldr	s15, [r7, #12]
   139dc:	ee27 7a27 	vmul.f32	s14, s14, s15
   139e0:	edd7 7a03 	vldr	s15, [r7, #12]
   139e4:	ee27 7a27 	vmul.f32	s14, s14, s15
   139e8:	edd7 7a03 	vldr	s15, [r7, #12]
   139ec:	ee27 7a27 	vmul.f32	s14, s14, s15
   139f0:	edd7 7a03 	vldr	s15, [r7, #12]
   139f4:	ee27 7a27 	vmul.f32	s14, s14, s15
   139f8:	687b      	ldr	r3, [r7, #4]
   139fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   139fc:	330c      	adds	r3, #12
   139fe:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
   13a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
   13a06:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
   13a0a:	683b      	ldr	r3, [r7, #0]
   13a0c:	ed93 7a00 	vldr	s14, [r3]
   13a10:	edd7 7a03 	vldr	s15, [r7, #12]
   13a14:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a18:	edd7 7a03 	vldr	s15, [r7, #12]
   13a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a20:	edd7 7a03 	vldr	s15, [r7, #12]
   13a24:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a28:	edd7 7a03 	vldr	s15, [r7, #12]
   13a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a30:	687b      	ldr	r3, [r7, #4]
   13a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13a34:	3310      	adds	r3, #16
   13a36:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   13a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   13a3e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
   13a42:	683b      	ldr	r3, [r7, #0]
   13a44:	ed93 7a00 	vldr	s14, [r3]
   13a48:	edd7 7a03 	vldr	s15, [r7, #12]
   13a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a50:	edd7 7a03 	vldr	s15, [r7, #12]
   13a54:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a58:	edd7 7a03 	vldr	s15, [r7, #12]
   13a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a60:	687b      	ldr	r3, [r7, #4]
   13a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13a64:	3314      	adds	r3, #20
   13a66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   13a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   13a6e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
   13a72:	683b      	ldr	r3, [r7, #0]
   13a74:	ed93 7a00 	vldr	s14, [r3]
   13a78:	edd7 7a03 	vldr	s15, [r7, #12]
   13a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a80:	edd7 7a03 	vldr	s15, [r7, #12]
   13a84:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a88:	edd7 7a03 	vldr	s15, [r7, #12]
   13a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a90:	edd7 7a03 	vldr	s15, [r7, #12]
   13a94:	ee27 7a27 	vmul.f32	s14, s14, s15
   13a98:	687b      	ldr	r3, [r7, #4]
   13a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13a9c:	3318      	adds	r3, #24
   13a9e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
   13aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   13aa6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
   13aaa:	683b      	ldr	r3, [r7, #0]
   13aac:	ed93 7a00 	vldr	s14, [r3]
   13ab0:	edd7 7a03 	vldr	s15, [r7, #12]
   13ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
   13ab8:	edd7 7a03 	vldr	s15, [r7, #12]
   13abc:	ee27 7a27 	vmul.f32	s14, s14, s15
   13ac0:	edd7 7a03 	vldr	s15, [r7, #12]
   13ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
   13ac8:	687b      	ldr	r3, [r7, #4]
   13aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13acc:	331c      	adds	r3, #28
   13ace:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   13ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   13ad6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
   13ada:	683b      	ldr	r3, [r7, #0]
   13adc:	ed93 7a00 	vldr	s14, [r3]
   13ae0:	edd7 7a03 	vldr	s15, [r7, #12]
   13ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
   13ae8:	687b      	ldr	r3, [r7, #4]
   13aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13aec:	3320      	adds	r3, #32
   13aee:	edd7 7a03 	vldr	s15, [r7, #12]
   13af2:	ee67 7a27 	vmul.f32	s15, s14, s15
   13af6:	edc3 7a00 	vstr	s15, [r3]
}
   13afa:	bf00      	nop
   13afc:	3714      	adds	r7, #20
   13afe:	46bd      	mov	sp, r7
   13b00:	f85d 7b04 	ldr.w	r7, [sp], #4
   13b04:	4770      	bx	lr
   13b06:	bf00      	nop
   13b08:	42100000 	.word	0x42100000

00013b0c <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
   13b0c:	b480      	push	{r7}
   13b0e:	b083      	sub	sp, #12
   13b10:	af00      	add	r7, sp, #0
   13b12:	6078      	str	r0, [r7, #4]
   13b14:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
   13b16:	687b      	ldr	r3, [r7, #4]
   13b18:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
   13b1c:	2b00      	cmp	r3, #0
   13b1e:	d105      	bne.n	13b2c <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
   13b20:	687b      	ldr	r3, [r7, #4]
   13b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b24:	683a      	ldr	r2, [r7, #0]
   13b26:	6812      	ldr	r2, [r2, #0]
   13b28:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
   13b2a:	e039      	b.n	13ba0 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
   13b2c:	687b      	ldr	r3, [r7, #4]
   13b2e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
   13b32:	2b01      	cmp	r3, #1
   13b34:	d134      	bne.n	13ba0 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
   13b36:	687b      	ldr	r3, [r7, #4]
   13b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b3a:	683a      	ldr	r2, [r7, #0]
   13b3c:	6812      	ldr	r2, [r2, #0]
   13b3e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
   13b40:	687b      	ldr	r3, [r7, #4]
   13b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b44:	3304      	adds	r3, #4
   13b46:	f04f 0200 	mov.w	r2, #0
   13b4a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
   13b4c:	687b      	ldr	r3, [r7, #4]
   13b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b50:	3308      	adds	r3, #8
   13b52:	f04f 0200 	mov.w	r2, #0
   13b56:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
   13b58:	687b      	ldr	r3, [r7, #4]
   13b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b5c:	330c      	adds	r3, #12
   13b5e:	f04f 0200 	mov.w	r2, #0
   13b62:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
   13b64:	687b      	ldr	r3, [r7, #4]
   13b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b68:	3310      	adds	r3, #16
   13b6a:	683a      	ldr	r2, [r7, #0]
   13b6c:	6852      	ldr	r2, [r2, #4]
   13b6e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
   13b70:	687b      	ldr	r3, [r7, #4]
   13b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b74:	3314      	adds	r3, #20
   13b76:	f04f 0200 	mov.w	r2, #0
   13b7a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
   13b7c:	687b      	ldr	r3, [r7, #4]
   13b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b80:	3318      	adds	r3, #24
   13b82:	f04f 0200 	mov.w	r2, #0
   13b86:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
   13b88:	687b      	ldr	r3, [r7, #4]
   13b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b8c:	331c      	adds	r3, #28
   13b8e:	f04f 0200 	mov.w	r2, #0
   13b92:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
   13b94:	687b      	ldr	r3, [r7, #4]
   13b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b98:	3320      	adds	r3, #32
   13b9a:	683a      	ldr	r2, [r7, #0]
   13b9c:	6892      	ldr	r2, [r2, #8]
   13b9e:	601a      	str	r2, [r3, #0]
}
   13ba0:	bf00      	nop
   13ba2:	370c      	adds	r7, #12
   13ba4:	46bd      	mov	sp, r7
   13ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
   13baa:	4770      	bx	lr

00013bac <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
   13bac:	b580      	push	{r7, lr}
   13bae:	b086      	sub	sp, #24
   13bb0:	af00      	add	r7, sp, #0
   13bb2:	ed87 0a03 	vstr	s0, [r7, #12]
   13bb6:	edc7 0a02 	vstr	s1, [r7, #8]
   13bba:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
   13bbe:	f107 0108 	add.w	r1, r7, #8
   13bc2:	f107 030c 	add.w	r3, r7, #12
   13bc6:	2200      	movs	r2, #0
   13bc8:	ed97 0a01 	vldr	s0, [r7, #4]
   13bcc:	4618      	mov	r0, r3
   13bce:	f000 f807 	bl	13be0 <KALMANFILTER>
   13bd2:	6178      	str	r0, [r7, #20]
	return pk;
   13bd4:	697b      	ldr	r3, [r7, #20]
}
   13bd6:	4618      	mov	r0, r3
   13bd8:	3718      	adds	r7, #24
   13bda:	46bd      	mov	sp, r7
   13bdc:	bd80      	pop	{r7, pc}
	...

00013be0 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
   13be0:	b580      	push	{r7, lr}
   13be2:	b086      	sub	sp, #24
   13be4:	af00      	add	r7, sp, #0
   13be6:	60f8      	str	r0, [r7, #12]
   13be8:	60b9      	str	r1, [r7, #8]
   13bea:	ed87 0a01 	vstr	s0, [r7, #4]
   13bee:	4613      	mov	r3, r2
   13bf0:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
   13bf2:	20c4      	movs	r0, #196	; 0xc4
   13bf4:	f001 f8c6 	bl	14d84 <malloc>
   13bf8:	4603      	mov	r3, r0
   13bfa:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
   13bfc:	697b      	ldr	r3, [r7, #20]
   13bfe:	2b00      	cmp	r3, #0
   13c00:	d101      	bne.n	13c06 <KALMANFILTER+0x26>
		return NULL;
   13c02:	2300      	movs	r3, #0
   13c04:	e10e      	b.n	13e24 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
   13c06:	22c4      	movs	r2, #196	; 0xc4
   13c08:	2100      	movs	r1, #0
   13c0a:	6978      	ldr	r0, [r7, #20]
   13c0c:	f001 f8cd 	bl	14daa <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
   13c10:	697b      	ldr	r3, [r7, #20]
   13c12:	887a      	ldrh	r2, [r7, #2]
   13c14:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
   13c18:	6978      	ldr	r0, [r7, #20]
   13c1a:	f000 f90f 	bl	13e3c <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
   13c1e:	697b      	ldr	r3, [r7, #20]
   13c20:	4a82      	ldr	r2, [pc, #520]	; (13e2c <KALMANFILTER+0x24c>)
   13c22:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
   13c26:	697b      	ldr	r3, [r7, #20]
   13c28:	4a81      	ldr	r2, [pc, #516]	; (13e30 <KALMANFILTER+0x250>)
   13c2a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
   13c2e:	697b      	ldr	r3, [r7, #20]
   13c30:	4a80      	ldr	r2, [pc, #512]	; (13e34 <KALMANFILTER+0x254>)
   13c32:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
   13c36:	697b      	ldr	r3, [r7, #20]
   13c38:	4a7f      	ldr	r2, [pc, #508]	; (13e38 <KALMANFILTER+0x258>)
   13c3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
   13c3e:	697b      	ldr	r3, [r7, #20]
   13c40:	687a      	ldr	r2, [r7, #4]
   13c42:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
   13c46:	887b      	ldrh	r3, [r7, #2]
   13c48:	2b01      	cmp	r3, #1
   13c4a:	f040 8095 	bne.w	13d78 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
   13c4e:	697b      	ldr	r3, [r7, #20]
   13c50:	695b      	ldr	r3, [r3, #20]
   13c52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13c56:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
   13c58:	697b      	ldr	r3, [r7, #20]
   13c5a:	695b      	ldr	r3, [r3, #20]
   13c5c:	3304      	adds	r3, #4
   13c5e:	687a      	ldr	r2, [r7, #4]
   13c60:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
   13c62:	ed97 7a01 	vldr	s14, [r7, #4]
   13c66:	edd7 7a01 	vldr	s15, [r7, #4]
   13c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
   13c6e:	697b      	ldr	r3, [r7, #20]
   13c70:	695b      	ldr	r3, [r3, #20]
   13c72:	3308      	adds	r3, #8
   13c74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   13c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
   13c7c:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
   13c80:	697b      	ldr	r3, [r7, #20]
   13c82:	695b      	ldr	r3, [r3, #20]
   13c84:	330c      	adds	r3, #12
   13c86:	f04f 0200 	mov.w	r2, #0
   13c8a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
   13c8c:	697b      	ldr	r3, [r7, #20]
   13c8e:	695b      	ldr	r3, [r3, #20]
   13c90:	3310      	adds	r3, #16
   13c92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13c96:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
   13c98:	697b      	ldr	r3, [r7, #20]
   13c9a:	695b      	ldr	r3, [r3, #20]
   13c9c:	3314      	adds	r3, #20
   13c9e:	687a      	ldr	r2, [r7, #4]
   13ca0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
   13ca2:	697b      	ldr	r3, [r7, #20]
   13ca4:	695b      	ldr	r3, [r3, #20]
   13ca6:	3318      	adds	r3, #24
   13ca8:	f04f 0200 	mov.w	r2, #0
   13cac:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
   13cae:	697b      	ldr	r3, [r7, #20]
   13cb0:	695b      	ldr	r3, [r3, #20]
   13cb2:	331c      	adds	r3, #28
   13cb4:	f04f 0200 	mov.w	r2, #0
   13cb8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
   13cba:	697b      	ldr	r3, [r7, #20]
   13cbc:	695b      	ldr	r3, [r3, #20]
   13cbe:	3320      	adds	r3, #32
   13cc0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13cc4:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
   13cc6:	697b      	ldr	r3, [r7, #20]
   13cc8:	69db      	ldr	r3, [r3, #28]
   13cca:	f04f 0200 	mov.w	r2, #0
   13cce:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
   13cd0:	697b      	ldr	r3, [r7, #20]
   13cd2:	69db      	ldr	r3, [r3, #28]
   13cd4:	3304      	adds	r3, #4
   13cd6:	f04f 0200 	mov.w	r2, #0
   13cda:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
   13cdc:	697b      	ldr	r3, [r7, #20]
   13cde:	69db      	ldr	r3, [r3, #28]
   13ce0:	3308      	adds	r3, #8
   13ce2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13ce6:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
   13ce8:	697b      	ldr	r3, [r7, #20]
   13cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13cec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13cf0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
   13cf2:	697b      	ldr	r3, [r7, #20]
   13cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13cf6:	3304      	adds	r3, #4
   13cf8:	f04f 0200 	mov.w	r2, #0
   13cfc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
   13cfe:	697b      	ldr	r3, [r7, #20]
   13d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d02:	3308      	adds	r3, #8
   13d04:	f04f 0200 	mov.w	r2, #0
   13d08:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
   13d0a:	697b      	ldr	r3, [r7, #20]
   13d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d0e:	330c      	adds	r3, #12
   13d10:	f04f 0200 	mov.w	r2, #0
   13d14:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
   13d16:	697b      	ldr	r3, [r7, #20]
   13d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d1a:	3310      	adds	r3, #16
   13d1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13d20:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
   13d22:	697b      	ldr	r3, [r7, #20]
   13d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d26:	3314      	adds	r3, #20
   13d28:	f04f 0200 	mov.w	r2, #0
   13d2c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
   13d2e:	697b      	ldr	r3, [r7, #20]
   13d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d32:	3318      	adds	r3, #24
   13d34:	f04f 0200 	mov.w	r2, #0
   13d38:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
   13d3a:	697b      	ldr	r3, [r7, #20]
   13d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d3e:	331c      	adds	r3, #28
   13d40:	f04f 0200 	mov.w	r2, #0
   13d44:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
   13d46:	697b      	ldr	r3, [r7, #20]
   13d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d4a:	3320      	adds	r3, #32
   13d4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13d50:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
   13d52:	697b      	ldr	r3, [r7, #20]
   13d54:	f103 0210 	add.w	r2, r3, #16
   13d58:	697b      	ldr	r3, [r7, #20]
   13d5a:	3350      	adds	r3, #80	; 0x50
   13d5c:	4619      	mov	r1, r3
   13d5e:	4610      	mov	r0, r2
   13d60:	f7f7 f8eb 	bl	af3a <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
   13d64:	697b      	ldr	r3, [r7, #20]
   13d66:	f103 0220 	add.w	r2, r3, #32
   13d6a:	697b      	ldr	r3, [r7, #20]
   13d6c:	3358      	adds	r3, #88	; 0x58
   13d6e:	4619      	mov	r1, r3
   13d70:	4610      	mov	r0, r2
   13d72:	f7f7 f8e2 	bl	af3a <arm_mat_trans_f32>
   13d76:	e048      	b.n	13e0a <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
   13d78:	887b      	ldrh	r3, [r7, #2]
   13d7a:	2b00      	cmp	r3, #0
   13d7c:	d145      	bne.n	13e0a <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
   13d7e:	697b      	ldr	r3, [r7, #20]
   13d80:	695b      	ldr	r3, [r3, #20]
   13d82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13d86:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
   13d88:	697b      	ldr	r3, [r7, #20]
   13d8a:	695b      	ldr	r3, [r3, #20]
   13d8c:	3304      	adds	r3, #4
   13d8e:	687a      	ldr	r2, [r7, #4]
   13d90:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
   13d92:	697b      	ldr	r3, [r7, #20]
   13d94:	695b      	ldr	r3, [r3, #20]
   13d96:	3308      	adds	r3, #8
   13d98:	f04f 0200 	mov.w	r2, #0
   13d9c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
   13d9e:	697b      	ldr	r3, [r7, #20]
   13da0:	695b      	ldr	r3, [r3, #20]
   13da2:	330c      	adds	r3, #12
   13da4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13da8:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
   13daa:	ed97 7a01 	vldr	s14, [r7, #4]
   13dae:	edd7 7a01 	vldr	s15, [r7, #4]
   13db2:	ee27 7a27 	vmul.f32	s14, s14, s15
   13db6:	697b      	ldr	r3, [r7, #20]
   13db8:	69db      	ldr	r3, [r3, #28]
   13dba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   13dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
   13dc2:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
   13dc6:	697b      	ldr	r3, [r7, #20]
   13dc8:	69db      	ldr	r3, [r3, #28]
   13dca:	3304      	adds	r3, #4
   13dcc:	687a      	ldr	r2, [r7, #4]
   13dce:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
   13dd0:	697b      	ldr	r3, [r7, #20]
   13dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13dd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   13dd8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
   13dda:	697b      	ldr	r3, [r7, #20]
   13ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13dde:	3304      	adds	r3, #4
   13de0:	f04f 0200 	mov.w	r2, #0
   13de4:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
   13de6:	697b      	ldr	r3, [r7, #20]
   13de8:	f103 0210 	add.w	r2, r3, #16
   13dec:	697b      	ldr	r3, [r7, #20]
   13dee:	3350      	adds	r3, #80	; 0x50
   13df0:	4619      	mov	r1, r3
   13df2:	4610      	mov	r0, r2
   13df4:	f7f7 f8a1 	bl	af3a <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
   13df8:	697b      	ldr	r3, [r7, #20]
   13dfa:	f103 0220 	add.w	r2, r3, #32
   13dfe:	697b      	ldr	r3, [r7, #20]
   13e00:	3358      	adds	r3, #88	; 0x58
   13e02:	4619      	mov	r1, r3
   13e04:	4610      	mov	r0, r2
   13e06:	f7f7 f898 	bl	af3a <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
   13e0a:	697b      	ldr	r3, [r7, #20]
   13e0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   13e10:	68f9      	ldr	r1, [r7, #12]
   13e12:	6978      	ldr	r0, [r7, #20]
   13e14:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
   13e16:	697b      	ldr	r3, [r7, #20]
   13e18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   13e1c:	68b9      	ldr	r1, [r7, #8]
   13e1e:	6978      	ldr	r0, [r7, #20]
   13e20:	4798      	blx	r3

	return ptKalmanFilter;
   13e22:	697b      	ldr	r3, [r7, #20]
	
}
   13e24:	4618      	mov	r0, r3
   13e26:	3718      	adds	r7, #24
   13e28:	46bd      	mov	sp, r7
   13e2a:	bd80      	pop	{r7, pc}
   13e2c:	000141ad 	.word	0x000141ad
   13e30:	0001382d 	.word	0x0001382d
   13e34:	00013b0d 	.word	0x00013b0d
   13e38:	00013801 	.word	0x00013801

00013e3c <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
   13e3c:	b580      	push	{r7, lr}
   13e3e:	b084      	sub	sp, #16
   13e40:	af00      	add	r7, sp, #0
   13e42:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
   13e44:	687b      	ldr	r3, [r7, #4]
   13e46:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
   13e4a:	2b01      	cmp	r3, #1
   13e4c:	f040 80d9 	bne.w	14002 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
   13e50:	f44f 700b 	mov.w	r0, #556	; 0x22c
   13e54:	f000 ff96 	bl	14d84 <malloc>
   13e58:	4603      	mov	r3, r0
   13e5a:	461a      	mov	r2, r3
   13e5c:	687b      	ldr	r3, [r7, #4]
   13e5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
   13e62:	687b      	ldr	r3, [r7, #4]
   13e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   13e68:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
   13e6a:	f44f 720b 	mov.w	r2, #556	; 0x22c
   13e6e:	2100      	movs	r1, #0
   13e70:	68b8      	ldr	r0, [r7, #8]
   13e72:	f000 ff9a 	bl	14daa <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
   13e76:	6878      	ldr	r0, [r7, #4]
   13e78:	68bb      	ldr	r3, [r7, #8]
   13e7a:	2201      	movs	r2, #1
   13e7c:	2103      	movs	r1, #3
   13e7e:	f7f6 fc8b 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
   13e82:	687b      	ldr	r3, [r7, #4]
   13e84:	f103 0010 	add.w	r0, r3, #16
   13e88:	68bb      	ldr	r3, [r7, #8]
   13e8a:	330c      	adds	r3, #12
   13e8c:	2203      	movs	r2, #3
   13e8e:	2103      	movs	r1, #3
   13e90:	f7f6 fc82 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
   13e94:	687b      	ldr	r3, [r7, #4]
   13e96:	f103 0018 	add.w	r0, r3, #24
   13e9a:	68bb      	ldr	r3, [r7, #8]
   13e9c:	3330      	adds	r3, #48	; 0x30
   13e9e:	2201      	movs	r2, #1
   13ea0:	2103      	movs	r1, #3
   13ea2:	f7f6 fc79 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
   13ea6:	687b      	ldr	r3, [r7, #4]
   13ea8:	f103 0008 	add.w	r0, r3, #8
   13eac:	68bb      	ldr	r3, [r7, #8]
   13eae:	333c      	adds	r3, #60	; 0x3c
   13eb0:	2201      	movs	r2, #1
   13eb2:	2101      	movs	r1, #1
   13eb4:	f7f6 fc70 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
   13eb8:	687b      	ldr	r3, [r7, #4]
   13eba:	f103 0020 	add.w	r0, r3, #32
   13ebe:	68bb      	ldr	r3, [r7, #8]
   13ec0:	3340      	adds	r3, #64	; 0x40
   13ec2:	2203      	movs	r2, #3
   13ec4:	2103      	movs	r1, #3
   13ec6:	f7f6 fc67 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
   13eca:	687b      	ldr	r3, [r7, #4]
   13ecc:	f103 0028 	add.w	r0, r3, #40	; 0x28
   13ed0:	68bb      	ldr	r3, [r7, #8]
   13ed2:	33f4      	adds	r3, #244	; 0xf4
   13ed4:	2201      	movs	r2, #1
   13ed6:	2103      	movs	r1, #3
   13ed8:	f7f6 fc5e 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
   13edc:	687b      	ldr	r3, [r7, #4]
   13ede:	f103 0030 	add.w	r0, r3, #48	; 0x30
   13ee2:	68bb      	ldr	r3, [r7, #8]
   13ee4:	3364      	adds	r3, #100	; 0x64
   13ee6:	2203      	movs	r2, #3
   13ee8:	2103      	movs	r1, #3
   13eea:	f7f6 fc55 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
   13eee:	687b      	ldr	r3, [r7, #4]
   13ef0:	f103 0038 	add.w	r0, r3, #56	; 0x38
   13ef4:	68bb      	ldr	r3, [r7, #8]
   13ef6:	3388      	adds	r3, #136	; 0x88
   13ef8:	2203      	movs	r2, #3
   13efa:	2103      	movs	r1, #3
   13efc:	f7f6 fc4c 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
   13f00:	687b      	ldr	r3, [r7, #4]
   13f02:	f103 0040 	add.w	r0, r3, #64	; 0x40
   13f06:	68bb      	ldr	r3, [r7, #8]
   13f08:	33ac      	adds	r3, #172	; 0xac
   13f0a:	2203      	movs	r2, #3
   13f0c:	2103      	movs	r1, #3
   13f0e:	f7f6 fc43 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
   13f12:	687b      	ldr	r3, [r7, #4]
   13f14:	f103 0048 	add.w	r0, r3, #72	; 0x48
   13f18:	68bb      	ldr	r3, [r7, #8]
   13f1a:	33d0      	adds	r3, #208	; 0xd0
   13f1c:	2203      	movs	r2, #3
   13f1e:	2103      	movs	r1, #3
   13f20:	f7f6 fc3a 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
   13f24:	687b      	ldr	r3, [r7, #4]
   13f26:	f103 0050 	add.w	r0, r3, #80	; 0x50
   13f2a:	68bb      	ldr	r3, [r7, #8]
   13f2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
   13f30:	2203      	movs	r2, #3
   13f32:	2103      	movs	r1, #3
   13f34:	f7f6 fc30 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
   13f38:	687b      	ldr	r3, [r7, #4]
   13f3a:	f103 0058 	add.w	r0, r3, #88	; 0x58
   13f3e:	68bb      	ldr	r3, [r7, #8]
   13f40:	f503 7392 	add.w	r3, r3, #292	; 0x124
   13f44:	2203      	movs	r2, #3
   13f46:	2103      	movs	r1, #3
   13f48:	f7f6 fc26 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
   13f4c:	687b      	ldr	r3, [r7, #4]
   13f4e:	f103 0060 	add.w	r0, r3, #96	; 0x60
   13f52:	68bb      	ldr	r3, [r7, #8]
   13f54:	f503 73a4 	add.w	r3, r3, #328	; 0x148
   13f58:	2203      	movs	r2, #3
   13f5a:	2103      	movs	r1, #3
   13f5c:	f7f6 fc1c 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
   13f60:	687b      	ldr	r3, [r7, #4]
   13f62:	f103 0068 	add.w	r0, r3, #104	; 0x68
   13f66:	68bb      	ldr	r3, [r7, #8]
   13f68:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   13f6c:	2203      	movs	r2, #3
   13f6e:	2103      	movs	r1, #3
   13f70:	f7f6 fc12 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
   13f74:	687b      	ldr	r3, [r7, #4]
   13f76:	f103 0070 	add.w	r0, r3, #112	; 0x70
   13f7a:	68bb      	ldr	r3, [r7, #8]
   13f7c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   13f80:	2203      	movs	r2, #3
   13f82:	2103      	movs	r1, #3
   13f84:	f7f6 fc08 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
   13f88:	687b      	ldr	r3, [r7, #4]
   13f8a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   13f8e:	68bb      	ldr	r3, [r7, #8]
   13f90:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   13f94:	2203      	movs	r2, #3
   13f96:	2103      	movs	r1, #3
   13f98:	f7f6 fbfe 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
   13f9c:	687b      	ldr	r3, [r7, #4]
   13f9e:	f103 0080 	add.w	r0, r3, #128	; 0x80
   13fa2:	68bb      	ldr	r3, [r7, #8]
   13fa4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   13fa8:	2203      	movs	r2, #3
   13faa:	2103      	movs	r1, #3
   13fac:	f7f6 fbf4 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
   13fb0:	687b      	ldr	r3, [r7, #4]
   13fb2:	f103 0088 	add.w	r0, r3, #136	; 0x88
   13fb6:	68bb      	ldr	r3, [r7, #8]
   13fb8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
   13fbc:	2201      	movs	r2, #1
   13fbe:	2103      	movs	r1, #3
   13fc0:	f7f6 fbea 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
   13fc4:	687b      	ldr	r3, [r7, #4]
   13fc6:	f103 0090 	add.w	r0, r3, #144	; 0x90
   13fca:	68bb      	ldr	r3, [r7, #8]
   13fcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   13fd0:	2201      	movs	r2, #1
   13fd2:	2103      	movs	r1, #3
   13fd4:	f7f6 fbe0 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
   13fd8:	687b      	ldr	r3, [r7, #4]
   13fda:	f103 0098 	add.w	r0, r3, #152	; 0x98
   13fde:	68bb      	ldr	r3, [r7, #8]
   13fe0:	f503 7305 	add.w	r3, r3, #532	; 0x214
   13fe4:	2201      	movs	r2, #1
   13fe6:	2103      	movs	r1, #3
   13fe8:	f7f6 fbd6 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
   13fec:	687b      	ldr	r3, [r7, #4]
   13fee:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
   13ff2:	68bb      	ldr	r3, [r7, #8]
   13ff4:	f503 7308 	add.w	r3, r3, #544	; 0x220
   13ff8:	2201      	movs	r2, #1
   13ffa:	2103      	movs	r1, #3
   13ffc:	f7f6 fbcc 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
   14000:	e0d0      	b.n	141a4 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
   14002:	687b      	ldr	r3, [r7, #4]
   14004:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
   14008:	2b00      	cmp	r3, #0
   1400a:	f040 80cb 	bne.w	141a4 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
   1400e:	20bc      	movs	r0, #188	; 0xbc
   14010:	f000 feb8 	bl	14d84 <malloc>
   14014:	4603      	mov	r3, r0
   14016:	461a      	mov	r2, r3
   14018:	687b      	ldr	r3, [r7, #4]
   1401a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
   1401e:	687b      	ldr	r3, [r7, #4]
   14020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   14024:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
   14026:	22bc      	movs	r2, #188	; 0xbc
   14028:	2100      	movs	r1, #0
   1402a:	68f8      	ldr	r0, [r7, #12]
   1402c:	f000 febd 	bl	14daa <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
   14030:	6878      	ldr	r0, [r7, #4]
   14032:	68fb      	ldr	r3, [r7, #12]
   14034:	2201      	movs	r2, #1
   14036:	2102      	movs	r1, #2
   14038:	f7f6 fbae 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
   1403c:	687b      	ldr	r3, [r7, #4]
   1403e:	f103 0010 	add.w	r0, r3, #16
   14042:	68fb      	ldr	r3, [r7, #12]
   14044:	3308      	adds	r3, #8
   14046:	2202      	movs	r2, #2
   14048:	2102      	movs	r1, #2
   1404a:	f7f6 fba5 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
   1404e:	687b      	ldr	r3, [r7, #4]
   14050:	f103 0018 	add.w	r0, r3, #24
   14054:	68fb      	ldr	r3, [r7, #12]
   14056:	3318      	adds	r3, #24
   14058:	2201      	movs	r2, #1
   1405a:	2102      	movs	r1, #2
   1405c:	f7f6 fb9c 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
   14060:	687b      	ldr	r3, [r7, #4]
   14062:	f103 0008 	add.w	r0, r3, #8
   14066:	68fb      	ldr	r3, [r7, #12]
   14068:	3320      	adds	r3, #32
   1406a:	2201      	movs	r2, #1
   1406c:	2101      	movs	r1, #1
   1406e:	f7f6 fb93 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
   14072:	687b      	ldr	r3, [r7, #4]
   14074:	f103 0020 	add.w	r0, r3, #32
   14078:	68fb      	ldr	r3, [r7, #12]
   1407a:	3324      	adds	r3, #36	; 0x24
   1407c:	2202      	movs	r2, #2
   1407e:	2101      	movs	r1, #1
   14080:	f7f6 fb8a 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
   14084:	687b      	ldr	r3, [r7, #4]
   14086:	f103 0028 	add.w	r0, r3, #40	; 0x28
   1408a:	68fb      	ldr	r3, [r7, #12]
   1408c:	3358      	adds	r3, #88	; 0x58
   1408e:	2201      	movs	r2, #1
   14090:	2101      	movs	r1, #1
   14092:	f7f6 fb81 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
   14096:	687b      	ldr	r3, [r7, #4]
   14098:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1409c:	68fb      	ldr	r3, [r7, #12]
   1409e:	332c      	adds	r3, #44	; 0x2c
   140a0:	2202      	movs	r2, #2
   140a2:	2102      	movs	r1, #2
   140a4:	f7f6 fb78 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
   140a8:	687b      	ldr	r3, [r7, #4]
   140aa:	f103 0038 	add.w	r0, r3, #56	; 0x38
   140ae:	68fb      	ldr	r3, [r7, #12]
   140b0:	333c      	adds	r3, #60	; 0x3c
   140b2:	2202      	movs	r2, #2
   140b4:	2102      	movs	r1, #2
   140b6:	f7f6 fb6f 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
   140ba:	687b      	ldr	r3, [r7, #4]
   140bc:	f103 0040 	add.w	r0, r3, #64	; 0x40
   140c0:	68fb      	ldr	r3, [r7, #12]
   140c2:	334c      	adds	r3, #76	; 0x4c
   140c4:	2201      	movs	r2, #1
   140c6:	2101      	movs	r1, #1
   140c8:	f7f6 fb66 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
   140cc:	687b      	ldr	r3, [r7, #4]
   140ce:	f103 0048 	add.w	r0, r3, #72	; 0x48
   140d2:	68fb      	ldr	r3, [r7, #12]
   140d4:	3350      	adds	r3, #80	; 0x50
   140d6:	2201      	movs	r2, #1
   140d8:	2102      	movs	r1, #2
   140da:	f7f6 fb5d 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
   140de:	687b      	ldr	r3, [r7, #4]
   140e0:	f103 0050 	add.w	r0, r3, #80	; 0x50
   140e4:	68fb      	ldr	r3, [r7, #12]
   140e6:	335c      	adds	r3, #92	; 0x5c
   140e8:	2202      	movs	r2, #2
   140ea:	2102      	movs	r1, #2
   140ec:	f7f6 fb54 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
   140f0:	687b      	ldr	r3, [r7, #4]
   140f2:	f103 0058 	add.w	r0, r3, #88	; 0x58
   140f6:	68fb      	ldr	r3, [r7, #12]
   140f8:	336c      	adds	r3, #108	; 0x6c
   140fa:	2201      	movs	r2, #1
   140fc:	2102      	movs	r1, #2
   140fe:	f7f6 fb4b 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
   14102:	687b      	ldr	r3, [r7, #4]
   14104:	f103 0060 	add.w	r0, r3, #96	; 0x60
   14108:	68fb      	ldr	r3, [r7, #12]
   1410a:	3374      	adds	r3, #116	; 0x74
   1410c:	2201      	movs	r2, #1
   1410e:	2102      	movs	r1, #2
   14110:	f7f6 fb42 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
   14114:	687b      	ldr	r3, [r7, #4]
   14116:	f103 0068 	add.w	r0, r3, #104	; 0x68
   1411a:	68fb      	ldr	r3, [r7, #12]
   1411c:	337c      	adds	r3, #124	; 0x7c
   1411e:	2202      	movs	r2, #2
   14120:	2102      	movs	r1, #2
   14122:	f7f6 fb39 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
   14126:	687b      	ldr	r3, [r7, #4]
   14128:	f103 0070 	add.w	r0, r3, #112	; 0x70
   1412c:	68fb      	ldr	r3, [r7, #12]
   1412e:	338c      	adds	r3, #140	; 0x8c
   14130:	2202      	movs	r2, #2
   14132:	2102      	movs	r1, #2
   14134:	f7f6 fb30 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
   14138:	687b      	ldr	r3, [r7, #4]
   1413a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1413e:	68fb      	ldr	r3, [r7, #12]
   14140:	339c      	adds	r3, #156	; 0x9c
   14142:	2201      	movs	r2, #1
   14144:	2101      	movs	r1, #1
   14146:	f7f6 fb27 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
   1414a:	687b      	ldr	r3, [r7, #4]
   1414c:	f103 0080 	add.w	r0, r3, #128	; 0x80
   14150:	68fb      	ldr	r3, [r7, #12]
   14152:	33a0      	adds	r3, #160	; 0xa0
   14154:	2201      	movs	r2, #1
   14156:	2101      	movs	r1, #1
   14158:	f7f6 fb1e 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
   1415c:	687b      	ldr	r3, [r7, #4]
   1415e:	f103 0088 	add.w	r0, r3, #136	; 0x88
   14162:	68fb      	ldr	r3, [r7, #12]
   14164:	33a4      	adds	r3, #164	; 0xa4
   14166:	2201      	movs	r2, #1
   14168:	2101      	movs	r1, #1
   1416a:	f7f6 fb15 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
   1416e:	687b      	ldr	r3, [r7, #4]
   14170:	f103 0090 	add.w	r0, r3, #144	; 0x90
   14174:	68fb      	ldr	r3, [r7, #12]
   14176:	33a8      	adds	r3, #168	; 0xa8
   14178:	2201      	movs	r2, #1
   1417a:	2101      	movs	r1, #1
   1417c:	f7f6 fb0c 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
   14180:	687b      	ldr	r3, [r7, #4]
   14182:	f103 0098 	add.w	r0, r3, #152	; 0x98
   14186:	68fb      	ldr	r3, [r7, #12]
   14188:	33ac      	adds	r3, #172	; 0xac
   1418a:	2201      	movs	r2, #1
   1418c:	2102      	movs	r1, #2
   1418e:	f7f6 fb03 	bl	a798 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
   14192:	687b      	ldr	r3, [r7, #4]
   14194:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
   14198:	68fb      	ldr	r3, [r7, #12]
   1419a:	33b4      	adds	r3, #180	; 0xb4
   1419c:	2201      	movs	r2, #1
   1419e:	2102      	movs	r1, #2
   141a0:	f7f6 fafa 	bl	a798 <arm_mat_init_f32>
}
   141a4:	bf00      	nop
   141a6:	3710      	adds	r7, #16
   141a8:	46bd      	mov	sp, r7
   141aa:	bd80      	pop	{r7, pc}

000141ac <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
   141ac:	b580      	push	{r7, lr}
   141ae:	b082      	sub	sp, #8
   141b0:	af00      	add	r7, sp, #0
   141b2:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
   141b4:	687b      	ldr	r3, [r7, #4]
   141b6:	f103 0010 	add.w	r0, r3, #16
   141ba:	6879      	ldr	r1, [r7, #4]
   141bc:	687b      	ldr	r3, [r7, #4]
   141be:	3398      	adds	r3, #152	; 0x98
   141c0:	461a      	mov	r2, r3
   141c2:	f7f6 fd39 	bl	ac38 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
   141c6:	687b      	ldr	r3, [r7, #4]
   141c8:	f103 0010 	add.w	r0, r3, #16
   141cc:	687b      	ldr	r3, [r7, #4]
   141ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
   141d2:	687b      	ldr	r3, [r7, #4]
   141d4:	3368      	adds	r3, #104	; 0x68
   141d6:	461a      	mov	r2, r3
   141d8:	f7f6 fd2e 	bl	ac38 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
   141dc:	687b      	ldr	r3, [r7, #4]
   141de:	f103 0068 	add.w	r0, r3, #104	; 0x68
   141e2:	687b      	ldr	r3, [r7, #4]
   141e4:	f103 0150 	add.w	r1, r3, #80	; 0x50
   141e8:	687b      	ldr	r3, [r7, #4]
   141ea:	3370      	adds	r3, #112	; 0x70
   141ec:	461a      	mov	r2, r3
   141ee:	f7f6 fd23 	bl	ac38 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
   141f2:	687b      	ldr	r3, [r7, #4]
   141f4:	f103 0070 	add.w	r0, r3, #112	; 0x70
   141f8:	687b      	ldr	r3, [r7, #4]
   141fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
   141fe:	687b      	ldr	r3, [r7, #4]
   14200:	3368      	adds	r3, #104	; 0x68
   14202:	461a      	mov	r2, r3
   14204:	f7f6 fa30 	bl	a668 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
   14208:	687b      	ldr	r3, [r7, #4]
   1420a:	f103 0068 	add.w	r0, r3, #104	; 0x68
   1420e:	687b      	ldr	r3, [r7, #4]
   14210:	f103 0158 	add.w	r1, r3, #88	; 0x58
   14214:	687b      	ldr	r3, [r7, #4]
   14216:	3360      	adds	r3, #96	; 0x60
   14218:	461a      	mov	r2, r3
   1421a:	f7f6 fd0d 	bl	ac38 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
   1421e:	687b      	ldr	r3, [r7, #4]
   14220:	f103 0020 	add.w	r0, r3, #32
   14224:	687b      	ldr	r3, [r7, #4]
   14226:	f103 0160 	add.w	r1, r3, #96	; 0x60
   1422a:	687b      	ldr	r3, [r7, #4]
   1422c:	3378      	adds	r3, #120	; 0x78
   1422e:	461a      	mov	r2, r3
   14230:	f7f6 fd02 	bl	ac38 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
   14234:	687b      	ldr	r3, [r7, #4]
   14236:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1423a:	687b      	ldr	r3, [r7, #4]
   1423c:	f103 0140 	add.w	r1, r3, #64	; 0x40
   14240:	687b      	ldr	r3, [r7, #4]
   14242:	3380      	adds	r3, #128	; 0x80
   14244:	461a      	mov	r2, r3
   14246:	f7f6 fa0f 	bl	a668 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
   1424a:	687b      	ldr	r3, [r7, #4]
   1424c:	f103 0280 	add.w	r2, r3, #128	; 0x80
   14250:	687b      	ldr	r3, [r7, #4]
   14252:	3378      	adds	r3, #120	; 0x78
   14254:	4619      	mov	r1, r3
   14256:	4610      	mov	r0, r2
   14258:	f7f6 fab6 	bl	a7c8 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
   1425c:	687b      	ldr	r3, [r7, #4]
   1425e:	f103 0060 	add.w	r0, r3, #96	; 0x60
   14262:	687b      	ldr	r3, [r7, #4]
   14264:	f103 0178 	add.w	r1, r3, #120	; 0x78
   14268:	687b      	ldr	r3, [r7, #4]
   1426a:	3348      	adds	r3, #72	; 0x48
   1426c:	461a      	mov	r2, r3
   1426e:	f7f6 fce3 	bl	ac38 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
   14272:	687b      	ldr	r3, [r7, #4]
   14274:	f103 0020 	add.w	r0, r3, #32
   14278:	687b      	ldr	r3, [r7, #4]
   1427a:	f103 0198 	add.w	r1, r3, #152	; 0x98
   1427e:	687b      	ldr	r3, [r7, #4]
   14280:	3388      	adds	r3, #136	; 0x88
   14282:	461a      	mov	r2, r3
   14284:	f7f6 fcd8 	bl	ac38 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
   14288:	687b      	ldr	r3, [r7, #4]
   1428a:	f103 0028 	add.w	r0, r3, #40	; 0x28
   1428e:	687b      	ldr	r3, [r7, #4]
   14290:	f103 0188 	add.w	r1, r3, #136	; 0x88
   14294:	687b      	ldr	r3, [r7, #4]
   14296:	3390      	adds	r3, #144	; 0x90
   14298:	461a      	mov	r2, r3
   1429a:	f7f6 fdb6 	bl	ae0a <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
   1429e:	687b      	ldr	r3, [r7, #4]
   142a0:	f103 0048 	add.w	r0, r3, #72	; 0x48
   142a4:	687b      	ldr	r3, [r7, #4]
   142a6:	f103 0190 	add.w	r1, r3, #144	; 0x90
   142aa:	687b      	ldr	r3, [r7, #4]
   142ac:	33a0      	adds	r3, #160	; 0xa0
   142ae:	461a      	mov	r2, r3
   142b0:	f7f6 fcc2 	bl	ac38 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
   142b4:	687b      	ldr	r3, [r7, #4]
   142b6:	f103 0098 	add.w	r0, r3, #152	; 0x98
   142ba:	687b      	ldr	r3, [r7, #4]
   142bc:	33a0      	adds	r3, #160	; 0xa0
   142be:	687a      	ldr	r2, [r7, #4]
   142c0:	4619      	mov	r1, r3
   142c2:	f7f6 f9d1 	bl	a668 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
   142c6:	687b      	ldr	r3, [r7, #4]
   142c8:	f103 0048 	add.w	r0, r3, #72	; 0x48
   142cc:	687b      	ldr	r3, [r7, #4]
   142ce:	f103 0120 	add.w	r1, r3, #32
   142d2:	687b      	ldr	r3, [r7, #4]
   142d4:	3330      	adds	r3, #48	; 0x30
   142d6:	461a      	mov	r2, r3
   142d8:	f7f6 fcae 	bl	ac38 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
   142dc:	687b      	ldr	r3, [r7, #4]
   142de:	f103 0030 	add.w	r0, r3, #48	; 0x30
   142e2:	687b      	ldr	r3, [r7, #4]
   142e4:	f103 0168 	add.w	r1, r3, #104	; 0x68
   142e8:	687b      	ldr	r3, [r7, #4]
   142ea:	3370      	adds	r3, #112	; 0x70
   142ec:	461a      	mov	r2, r3
   142ee:	f7f6 fca3 	bl	ac38 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
   142f2:	687b      	ldr	r3, [r7, #4]
   142f4:	f103 0068 	add.w	r0, r3, #104	; 0x68
   142f8:	687b      	ldr	r3, [r7, #4]
   142fa:	f103 0170 	add.w	r1, r3, #112	; 0x70
   142fe:	687b      	ldr	r3, [r7, #4]
   14300:	3330      	adds	r3, #48	; 0x30
   14302:	461a      	mov	r2, r3
   14304:	f7f6 fd81 	bl	ae0a <arm_mat_sub_f32>

}
   14308:	bf00      	nop
   1430a:	3708      	adds	r7, #8
   1430c:	46bd      	mov	sp, r7
   1430e:	bd80      	pop	{r7, pc}

00014310 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
   14310:	b480      	push	{r7}
   14312:	b089      	sub	sp, #36	; 0x24
   14314:	af00      	add	r7, sp, #0
   14316:	61f8      	str	r0, [r7, #28]
   14318:	ed87 0a06 	vstr	s0, [r7, #24]
   1431c:	edc7 0a05 	vstr	s1, [r7, #20]
   14320:	ed87 1a04 	vstr	s2, [r7, #16]
   14324:	edc7 1a03 	vstr	s3, [r7, #12]
   14328:	ed87 2a02 	vstr	s4, [r7, #8]
   1432c:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
   14330:	69fb      	ldr	r3, [r7, #28]
   14332:	69ba      	ldr	r2, [r7, #24]
   14334:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
   14336:	69fb      	ldr	r3, [r7, #28]
   14338:	697a      	ldr	r2, [r7, #20]
   1433a:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
   1433c:	69fb      	ldr	r3, [r7, #28]
   1433e:	693a      	ldr	r2, [r7, #16]
   14340:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
   14342:	69fb      	ldr	r3, [r7, #28]
   14344:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14348:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
   1434a:	69fb      	ldr	r3, [r7, #28]
   1434c:	f04f 0200 	mov.w	r2, #0
   14350:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
   14352:	69fb      	ldr	r3, [r7, #28]
   14354:	68fa      	ldr	r2, [r7, #12]
   14356:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
   14358:	69fb      	ldr	r3, [r7, #28]
   1435a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1435e:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
   14360:	69fb      	ldr	r3, [r7, #28]
   14362:	f04f 0200 	mov.w	r2, #0
   14366:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
   14368:	69fb      	ldr	r3, [r7, #28]
   1436a:	4a2f      	ldr	r2, [pc, #188]	; (14428 <initPID+0x118>)
   1436c:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
   1436e:	69fb      	ldr	r3, [r7, #28]
   14370:	edd3 6a02 	vldr	s13, [r3, #8]
   14374:	69fb      	ldr	r3, [r7, #28]
   14376:	ed93 7a00 	vldr	s14, [r3]
   1437a:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1437e:	69fb      	ldr	r3, [r7, #28]
   14380:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
   14384:	69fb      	ldr	r3, [r7, #28]
   14386:	edd3 6a08 	vldr	s13, [r3, #32]
   1438a:	69fb      	ldr	r3, [r7, #28]
   1438c:	ed93 7a08 	vldr	s14, [r3, #32]
   14390:	69fb      	ldr	r3, [r7, #28]
   14392:	ed93 6a07 	vldr	s12, [r3, #28]
   14396:	69fb      	ldr	r3, [r7, #28]
   14398:	edd3 7a05 	vldr	s15, [r3, #20]
   1439c:	ee66 7a27 	vmul.f32	s15, s12, s15
   143a0:	ee37 7a27 	vadd.f32	s14, s14, s15
   143a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
   143a8:	69fb      	ldr	r3, [r7, #28]
   143aa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
   143ae:	69fb      	ldr	r3, [r7, #28]
   143b0:	edd3 7a00 	vldr	s15, [r3]
   143b4:	eeb1 7a67 	vneg.f32	s14, s15
   143b8:	69fb      	ldr	r3, [r7, #28]
   143ba:	edd3 7a07 	vldr	s15, [r3, #28]
   143be:	ee27 7a27 	vmul.f32	s14, s14, s15
   143c2:	69fb      	ldr	r3, [r7, #28]
   143c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
   143c8:	ee67 7a27 	vmul.f32	s15, s14, s15
   143cc:	69fb      	ldr	r3, [r7, #28]
   143ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
   143d2:	69fb      	ldr	r3, [r7, #28]
   143d4:	f04f 0200 	mov.w	r2, #0
   143d8:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
   143da:	69fb      	ldr	r3, [r7, #28]
   143dc:	f04f 0200 	mov.w	r2, #0
   143e0:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
   143e2:	69fb      	ldr	r3, [r7, #28]
   143e4:	f04f 0200 	mov.w	r2, #0
   143e8:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
   143ea:	69fb      	ldr	r3, [r7, #28]
   143ec:	f04f 0200 	mov.w	r2, #0
   143f0:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
   143f2:	69fb      	ldr	r3, [r7, #28]
   143f4:	68ba      	ldr	r2, [r7, #8]
   143f6:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
   143f8:	edd7 7a02 	vldr	s15, [r7, #8]
   143fc:	eef1 7a67 	vneg.f32	s15, s15
   14400:	69fb      	ldr	r3, [r7, #28]
   14402:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
   14406:	69fb      	ldr	r3, [r7, #28]
   14408:	687a      	ldr	r2, [r7, #4]
   1440a:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
   1440c:	edd7 7a01 	vldr	s15, [r7, #4]
   14410:	eef1 7a67 	vneg.f32	s15, s15
   14414:	69fb      	ldr	r3, [r7, #28]
   14416:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
   1441a:	bf00      	nop
   1441c:	3724      	adds	r7, #36	; 0x24
   1441e:	46bd      	mov	sp, r7
   14420:	f85d 7b04 	ldr.w	r7, [sp], #4
   14424:	4770      	bx	lr
   14426:	bf00      	nop
   14428:	41700000 	.word	0x41700000

0001442c <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
   1442c:	b580      	push	{r7, lr}
   1442e:	b088      	sub	sp, #32
   14430:	af00      	add	r7, sp, #0
   14432:	ed87 0a05 	vstr	s0, [r7, #20]
   14436:	edc7 0a04 	vstr	s1, [r7, #16]
   1443a:	ed87 1a03 	vstr	s2, [r7, #12]
   1443e:	edc7 1a02 	vstr	s3, [r7, #8]
   14442:	ed87 2a01 	vstr	s4, [r7, #4]
   14446:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
   1444a:	2054      	movs	r0, #84	; 0x54
   1444c:	f000 fc9a 	bl	14d84 <malloc>
   14450:	4603      	mov	r3, r0
   14452:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
   14454:	69fb      	ldr	r3, [r7, #28]
   14456:	2b00      	cmp	r3, #0
   14458:	d101      	bne.n	1445e <newPID+0x32>
		return NULL;
   1445a:	2300      	movs	r3, #0
   1445c:	e014      	b.n	14488 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
   1445e:	2254      	movs	r2, #84	; 0x54
   14460:	2100      	movs	r1, #0
   14462:	69f8      	ldr	r0, [r7, #28]
   14464:	f000 fca1 	bl	14daa <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
   14468:	edd7 2a00 	vldr	s5, [r7]
   1446c:	ed97 2a01 	vldr	s4, [r7, #4]
   14470:	edd7 1a02 	vldr	s3, [r7, #8]
   14474:	ed97 1a03 	vldr	s2, [r7, #12]
   14478:	edd7 0a04 	vldr	s1, [r7, #16]
   1447c:	ed97 0a05 	vldr	s0, [r7, #20]
   14480:	69f8      	ldr	r0, [r7, #28]
   14482:	f7ff ff45 	bl	14310 <initPID>
	return pp;
   14486:	69fb      	ldr	r3, [r7, #28]
}
   14488:	4618      	mov	r0, r3
   1448a:	3720      	adds	r7, #32
   1448c:	46bd      	mov	sp, r7
   1448e:	bd80      	pop	{r7, pc}

00014490 <usart1CommandHandler>:




void usart1CommandHandler()
{
   14490:	b580      	push	{r7, lr}
   14492:	af00      	add	r7, sp, #0
	serialPort1Callback((char *)Usart1Device.RxBuf);
   14494:	4802      	ldr	r0, [pc, #8]	; (144a0 <usart1CommandHandler+0x10>)
   14496:	f7fe fc7b 	bl	12d90 <serialPort1Callback>

}
   1449a:	bf00      	nop
   1449c:	bd80      	pop	{r7, pc}
   1449e:	bf00      	nop
   144a0:	00036cd2 	.word	0x00036cd2

000144a4 <usart3CommandHandler>:
void usart3CommandHandler()
{
   144a4:	b580      	push	{r7, lr}
   144a6:	b082      	sub	sp, #8
   144a8:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
	int len=Usart3Device.countRxLineBuf+Usart3Device.countRxBuf;
   144aa:	4a3b      	ldr	r2, [pc, #236]	; (14598 <usart3CommandHandler+0xf4>)
   144ac:	f241 63c8 	movw	r3, #5832	; 0x16c8
   144b0:	4413      	add	r3, r2
   144b2:	881b      	ldrh	r3, [r3, #0]
   144b4:	4619      	mov	r1, r3
   144b6:	4a38      	ldr	r2, [pc, #224]	; (14598 <usart3CommandHandler+0xf4>)
   144b8:	f241 7350 	movw	r3, #5968	; 0x1750
   144bc:	4413      	add	r3, r2
   144be:	881b      	ldrh	r3, [r3, #0]
   144c0:	440b      	add	r3, r1
   144c2:	607b      	str	r3, [r7, #4]

	//If overflow Clear
	if(len>UART_RX_BUF_SIZE)
   144c4:	687b      	ldr	r3, [r7, #4]
   144c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   144ca:	dd12      	ble.n	144f2 <usart3CommandHandler+0x4e>
	{
		memset(Usart3Device.RxLineBuf,0,UART_RX_BUF_SIZE);
   144cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   144d0:	2100      	movs	r1, #0
   144d2:	4832      	ldr	r0, [pc, #200]	; (1459c <usart3CommandHandler+0xf8>)
   144d4:	f000 fc69 	bl	14daa <memset>
		Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
   144d8:	4a2f      	ldr	r2, [pc, #188]	; (14598 <usart3CommandHandler+0xf4>)
   144da:	f241 63c4 	movw	r3, #5828	; 0x16c4
   144de:	4413      	add	r3, r2
   144e0:	4a2e      	ldr	r2, [pc, #184]	; (1459c <usart3CommandHandler+0xf8>)
   144e2:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=0;
   144e4:	4a2c      	ldr	r2, [pc, #176]	; (14598 <usart3CommandHandler+0xf4>)
   144e6:	f241 63c8 	movw	r3, #5832	; 0x16c8
   144ea:	4413      	add	r3, r2
   144ec:	2200      	movs	r2, #0
   144ee:	801a      	strh	r2, [r3, #0]
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
			Usart3Device.countRxLineBuf=0;
		}
	}

}
   144f0:	e04e      	b.n	14590 <usart3CommandHandler+0xec>
		memcpy(&(Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf]),Usart3Device.RxBuf,Usart3Device.countRxBuf);
   144f2:	4a29      	ldr	r2, [pc, #164]	; (14598 <usart3CommandHandler+0xf4>)
   144f4:	f241 63c8 	movw	r3, #5832	; 0x16c8
   144f8:	4413      	add	r3, r2
   144fa:	881b      	ldrh	r3, [r3, #0]
   144fc:	461a      	mov	r2, r3
   144fe:	f241 43d0 	movw	r3, #5328	; 0x14d0
   14502:	4413      	add	r3, r2
   14504:	4a24      	ldr	r2, [pc, #144]	; (14598 <usart3CommandHandler+0xf4>)
   14506:	1898      	adds	r0, r3, r2
   14508:	4a23      	ldr	r2, [pc, #140]	; (14598 <usart3CommandHandler+0xf4>)
   1450a:	f241 7350 	movw	r3, #5968	; 0x1750
   1450e:	4413      	add	r3, r2
   14510:	881b      	ldrh	r3, [r3, #0]
   14512:	461a      	mov	r2, r3
   14514:	4922      	ldr	r1, [pc, #136]	; (145a0 <usart3CommandHandler+0xfc>)
   14516:	f000 fc3d 	bl	14d94 <memcpy>
		Usart3Device.pRxLineBuf+=Usart3Device.countRxBuf;
   1451a:	4a1f      	ldr	r2, [pc, #124]	; (14598 <usart3CommandHandler+0xf4>)
   1451c:	f241 63c4 	movw	r3, #5828	; 0x16c4
   14520:	4413      	add	r3, r2
   14522:	681a      	ldr	r2, [r3, #0]
   14524:	491c      	ldr	r1, [pc, #112]	; (14598 <usart3CommandHandler+0xf4>)
   14526:	f241 7350 	movw	r3, #5968	; 0x1750
   1452a:	440b      	add	r3, r1
   1452c:	881b      	ldrh	r3, [r3, #0]
   1452e:	441a      	add	r2, r3
   14530:	4919      	ldr	r1, [pc, #100]	; (14598 <usart3CommandHandler+0xf4>)
   14532:	f241 63c4 	movw	r3, #5828	; 0x16c4
   14536:	440b      	add	r3, r1
   14538:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=len;
   1453a:	687b      	ldr	r3, [r7, #4]
   1453c:	b299      	uxth	r1, r3
   1453e:	4a16      	ldr	r2, [pc, #88]	; (14598 <usart3CommandHandler+0xf4>)
   14540:	f241 63c8 	movw	r3, #5832	; 0x16c8
   14544:	4413      	add	r3, r2
   14546:	460a      	mov	r2, r1
   14548:	801a      	strh	r2, [r3, #0]
		if (Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf-1]=='\n')
   1454a:	4a13      	ldr	r2, [pc, #76]	; (14598 <usart3CommandHandler+0xf4>)
   1454c:	f241 63c8 	movw	r3, #5832	; 0x16c8
   14550:	4413      	add	r3, r2
   14552:	881b      	ldrh	r3, [r3, #0]
   14554:	3b01      	subs	r3, #1
   14556:	4a10      	ldr	r2, [pc, #64]	; (14598 <usart3CommandHandler+0xf4>)
   14558:	441a      	add	r2, r3
   1455a:	f241 43d0 	movw	r3, #5328	; 0x14d0
   1455e:	4413      	add	r3, r2
   14560:	781b      	ldrb	r3, [r3, #0]
   14562:	2b0a      	cmp	r3, #10
   14564:	d114      	bne.n	14590 <usart3CommandHandler+0xec>
			serialReceiveCallback((char *)Usart3Device.RxLineBuf);
   14566:	480d      	ldr	r0, [pc, #52]	; (1459c <usart3CommandHandler+0xf8>)
   14568:	f7fd f9a6 	bl	118b8 <serialReceiveCallback>
			memset(Usart3Device.RxLineBuf,0,len);
   1456c:	687b      	ldr	r3, [r7, #4]
   1456e:	461a      	mov	r2, r3
   14570:	2100      	movs	r1, #0
   14572:	480a      	ldr	r0, [pc, #40]	; (1459c <usart3CommandHandler+0xf8>)
   14574:	f000 fc19 	bl	14daa <memset>
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
   14578:	4a07      	ldr	r2, [pc, #28]	; (14598 <usart3CommandHandler+0xf4>)
   1457a:	f241 63c4 	movw	r3, #5828	; 0x16c4
   1457e:	4413      	add	r3, r2
   14580:	4a06      	ldr	r2, [pc, #24]	; (1459c <usart3CommandHandler+0xf8>)
   14582:	601a      	str	r2, [r3, #0]
			Usart3Device.countRxLineBuf=0;
   14584:	4a04      	ldr	r2, [pc, #16]	; (14598 <usart3CommandHandler+0xf4>)
   14586:	f241 63c8 	movw	r3, #5832	; 0x16c8
   1458a:	4413      	add	r3, r2
   1458c:	2200      	movs	r2, #0
   1458e:	801a      	strh	r2, [r3, #0]
}
   14590:	bf00      	nop
   14592:	3708      	adds	r7, #8
   14594:	46bd      	mov	sp, r7
   14596:	bd80      	pop	{r7, pc}
   14598:	00037168 	.word	0x00037168
   1459c:	00038638 	.word	0x00038638
   145a0:	0003843e 	.word	0x0003843e

000145a4 <usart2CommandHandler>:

void usart2CommandHandler()
{
   145a4:	b580      	push	{r7, lr}
   145a6:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we want to make sure it has the right number of bytes
		serialPort2Callback((char *)Usart2Device.RxBuf);
   145a8:	4802      	ldr	r0, [pc, #8]	; (145b4 <usart2CommandHandler+0x10>)
   145aa:	f7fe fbff 	bl	12dac <serialPort2Callback>
}
   145ae:	bf00      	nop
   145b0:	bd80      	pop	{r7, pc}
   145b2:	bf00      	nop
   145b4:	00035566 	.word	0x00035566

000145b8 <UartCommandHandler>:
void UartCommandHandler(UART_DEVICE *UsartDevice)
{
   145b8:	b580      	push	{r7, lr}
   145ba:	b082      	sub	sp, #8
   145bc:	af00      	add	r7, sp, #0
   145be:	6078      	str	r0, [r7, #4]
	if(UsartDevice == &Usart3Device)
   145c0:	687b      	ldr	r3, [r7, #4]
   145c2:	4a08      	ldr	r2, [pc, #32]	; (145e4 <UartCommandHandler+0x2c>)
   145c4:	4293      	cmp	r3, r2
   145c6:	d102      	bne.n	145ce <UartCommandHandler+0x16>
		usart3CommandHandler();
   145c8:	f7ff ff6c 	bl	144a4 <usart3CommandHandler>
	else if(UsartDevice == &Usart2Device)
		usart2CommandHandler();
}
   145cc:	e005      	b.n	145da <UartCommandHandler+0x22>
	else if(UsartDevice == &Usart2Device)
   145ce:	687b      	ldr	r3, [r7, #4]
   145d0:	4a05      	ldr	r2, [pc, #20]	; (145e8 <UartCommandHandler+0x30>)
   145d2:	4293      	cmp	r3, r2
   145d4:	d101      	bne.n	145da <UartCommandHandler+0x22>
		usart2CommandHandler();
   145d6:	f7ff ffe5 	bl	145a4 <usart2CommandHandler>
}
   145da:	bf00      	nop
   145dc:	3708      	adds	r7, #8
   145de:	46bd      	mov	sp, r7
   145e0:	bd80      	pop	{r7, pc}
   145e2:	bf00      	nop
   145e4:	00037168 	.word	0x00037168
   145e8:	00034290 	.word	0x00034290

000145ec <my_UsartInit>:


/*put this function in the main.c for initilization*/
void my_UsartInit()
{
   145ec:	b580      	push	{r7, lr}
   145ee:	af00      	add	r7, sp, #0

	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
   145f0:	f44f 7218 	mov.w	r2, #608	; 0x260
   145f4:	2100      	movs	r1, #0
   145f6:	4849      	ldr	r0, [pc, #292]	; (1471c <my_UsartInit+0x130>)
   145f8:	f000 fbd7 	bl	14daa <memset>
	printfBinStruct.header[0]=0x5a;
   145fc:	4b47      	ldr	r3, [pc, #284]	; (1471c <my_UsartInit+0x130>)
   145fe:	225a      	movs	r2, #90	; 0x5a
   14600:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
   14602:	4b46      	ldr	r3, [pc, #280]	; (1471c <my_UsartInit+0x130>)
   14604:	225a      	movs	r2, #90	; 0x5a
   14606:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
   14608:	4b44      	ldr	r3, [pc, #272]	; (1471c <my_UsartInit+0x130>)
   1460a:	22a5      	movs	r2, #165	; 0xa5
   1460c:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
   1460e:	4b43      	ldr	r3, [pc, #268]	; (1471c <my_UsartInit+0x130>)
   14610:	22a5      	movs	r2, #165	; 0xa5
   14612:	70da      	strb	r2, [r3, #3]

	printfBinStruct.pData=printfBinStruct.data;
   14614:	4b41      	ldr	r3, [pc, #260]	; (1471c <my_UsartInit+0x130>)
   14616:	4a42      	ldr	r2, [pc, #264]	; (14720 <my_UsartInit+0x134>)
   14618:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c

	 memset(&Usart3Device,0,sizeof(Usart3Device));
   1461c:	f241 726c 	movw	r2, #5996	; 0x176c
   14620:	2100      	movs	r1, #0
   14622:	4840      	ldr	r0, [pc, #256]	; (14724 <my_UsartInit+0x138>)
   14624:	f000 fbc1 	bl	14daa <memset>
	 Usart3Device.huart = &huart3;
   14628:	4b3e      	ldr	r3, [pc, #248]	; (14724 <my_UsartInit+0x138>)
   1462a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   1462e:	4a3e      	ldr	r2, [pc, #248]	; (14728 <my_UsartInit+0x13c>)
   14630:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxBuf = Usart3Device.RxBuf;
   14632:	4a3c      	ldr	r2, [pc, #240]	; (14724 <my_UsartInit+0x138>)
   14634:	f241 43cc 	movw	r3, #5324	; 0x14cc
   14638:	4413      	add	r3, r2
   1463a:	4a3c      	ldr	r2, [pc, #240]	; (1472c <my_UsartInit+0x140>)
   1463c:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
   1463e:	4a39      	ldr	r2, [pc, #228]	; (14724 <my_UsartInit+0x138>)
   14640:	f241 63c4 	movw	r3, #5828	; 0x16c4
   14644:	4413      	add	r3, r2
   14646:	4a3a      	ldr	r2, [pc, #232]	; (14730 <my_UsartInit+0x144>)
   14648:	601a      	str	r2, [r3, #0]
	 Usart3Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart3Device.RxBuf;
   1464a:	4a36      	ldr	r2, [pc, #216]	; (14724 <my_UsartInit+0x138>)
   1464c:	f241 7354 	movw	r3, #5972	; 0x1754
   14650:	4413      	add	r3, r2
   14652:	4a36      	ldr	r2, [pc, #216]	; (1472c <my_UsartInit+0x140>)
   14654:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart3Device.huart, Usart3Device.RxBuf, UART_RX_BUF_SIZE-1);
   14656:	4b33      	ldr	r3, [pc, #204]	; (14724 <my_UsartInit+0x138>)
   14658:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   1465c:	681b      	ldr	r3, [r3, #0]
   1465e:	f240 12f3 	movw	r2, #499	; 0x1f3
   14662:	4932      	ldr	r1, [pc, #200]	; (1472c <my_UsartInit+0x140>)
   14664:	4618      	mov	r0, r3
   14666:	f7fb f935 	bl	f8d4 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart3Device.huart, UART_IT_IDLE);
   1466a:	4b2e      	ldr	r3, [pc, #184]	; (14724 <my_UsartInit+0x138>)
   1466c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14670:	681b      	ldr	r3, [r3, #0]
   14672:	681b      	ldr	r3, [r3, #0]
   14674:	681a      	ldr	r2, [r3, #0]
   14676:	4b2b      	ldr	r3, [pc, #172]	; (14724 <my_UsartInit+0x138>)
   14678:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   1467c:	681b      	ldr	r3, [r3, #0]
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	f042 0210 	orr.w	r2, r2, #16
   14684:	601a      	str	r2, [r3, #0]

	// memset(&Usart2Device,0,sizeof(Usart2Device));
	 Usart2Device.huart = &huart2;
   14686:	4b2b      	ldr	r3, [pc, #172]	; (14734 <my_UsartInit+0x148>)
   14688:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   1468c:	4a2a      	ldr	r2, [pc, #168]	; (14738 <my_UsartInit+0x14c>)
   1468e:	601a      	str	r2, [r3, #0]
	 Usart2Device.pRxBuf = Usart2Device.RxBuf;
   14690:	4a28      	ldr	r2, [pc, #160]	; (14734 <my_UsartInit+0x148>)
   14692:	f241 43cc 	movw	r3, #5324	; 0x14cc
   14696:	4413      	add	r3, r2
   14698:	4a28      	ldr	r2, [pc, #160]	; (1473c <my_UsartInit+0x150>)
   1469a:	601a      	str	r2, [r3, #0]
	 Usart2Device.pRxLineBuf=Usart2Device.RxLineBuf;
   1469c:	4a25      	ldr	r2, [pc, #148]	; (14734 <my_UsartInit+0x148>)
   1469e:	f241 63c4 	movw	r3, #5828	; 0x16c4
   146a2:	4413      	add	r3, r2
   146a4:	4a26      	ldr	r2, [pc, #152]	; (14740 <my_UsartInit+0x154>)
   146a6:	601a      	str	r2, [r3, #0]
	 Usart2Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart2Device.RxBuf;
   146a8:	4a22      	ldr	r2, [pc, #136]	; (14734 <my_UsartInit+0x148>)
   146aa:	f241 7354 	movw	r3, #5972	; 0x1754
   146ae:	4413      	add	r3, r2
   146b0:	4a22      	ldr	r2, [pc, #136]	; (1473c <my_UsartInit+0x150>)
   146b2:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart2Device.huart, Usart2Device.RxBuf, UART_RX_BUF_SIZE-1);
   146b4:	4b1f      	ldr	r3, [pc, #124]	; (14734 <my_UsartInit+0x148>)
   146b6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   146ba:	681b      	ldr	r3, [r3, #0]
   146bc:	f240 12f3 	movw	r2, #499	; 0x1f3
   146c0:	491e      	ldr	r1, [pc, #120]	; (1473c <my_UsartInit+0x150>)
   146c2:	4618      	mov	r0, r3
   146c4:	f7fb f906 	bl	f8d4 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart2Device.huart, UART_IT_IDLE);
   146c8:	4b1a      	ldr	r3, [pc, #104]	; (14734 <my_UsartInit+0x148>)
   146ca:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   146ce:	681b      	ldr	r3, [r3, #0]
   146d0:	681b      	ldr	r3, [r3, #0]
   146d2:	681a      	ldr	r2, [r3, #0]
   146d4:	4b17      	ldr	r3, [pc, #92]	; (14734 <my_UsartInit+0x148>)
   146d6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   146da:	681b      	ldr	r3, [r3, #0]
   146dc:	681b      	ldr	r3, [r3, #0]
   146de:	f042 0210 	orr.w	r2, r2, #16
   146e2:	601a      	str	r2, [r3, #0]

	 memset(&Usart1Device,0,sizeof(Usart1Device));
   146e4:	f241 726c 	movw	r2, #5996	; 0x176c
   146e8:	2100      	movs	r1, #0
   146ea:	4816      	ldr	r0, [pc, #88]	; (14744 <my_UsartInit+0x158>)
   146ec:	f000 fb5d 	bl	14daa <memset>
	 Usart1Device.huart = &huart1;
   146f0:	4b14      	ldr	r3, [pc, #80]	; (14744 <my_UsartInit+0x158>)
   146f2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   146f6:	4a14      	ldr	r2, [pc, #80]	; (14748 <my_UsartInit+0x15c>)
   146f8:	601a      	str	r2, [r3, #0]
	 Usart1Device.pRxBuf = Usart1Device.RxBuf;
   146fa:	4a12      	ldr	r2, [pc, #72]	; (14744 <my_UsartInit+0x158>)
   146fc:	f241 43cc 	movw	r3, #5324	; 0x14cc
   14700:	4413      	add	r3, r2
   14702:	4a12      	ldr	r2, [pc, #72]	; (1474c <my_UsartInit+0x160>)
   14704:	601a      	str	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
   14706:	4b10      	ldr	r3, [pc, #64]	; (14748 <my_UsartInit+0x15c>)
   14708:	681b      	ldr	r3, [r3, #0]
   1470a:	681a      	ldr	r2, [r3, #0]
   1470c:	4b0e      	ldr	r3, [pc, #56]	; (14748 <my_UsartInit+0x15c>)
   1470e:	681b      	ldr	r3, [r3, #0]
   14710:	f042 0220 	orr.w	r2, r2, #32
   14714:	601a      	str	r2, [r3, #0]

}
   14716:	bf00      	nop
   14718:	bd80      	pop	{r7, pc}
   1471a:	bf00      	nop
   1471c:	0002b2e0 	.word	0x0002b2e0
   14720:	0002b2e4 	.word	0x0002b2e4
   14724:	00037168 	.word	0x00037168
   14728:	00033e6c 	.word	0x00033e6c
   1472c:	0003843e 	.word	0x0003843e
   14730:	00038638 	.word	0x00038638
   14734:	00034290 	.word	0x00034290
   14738:	00033fcc 	.word	0x00033fcc
   1473c:	00035566 	.word	0x00035566
   14740:	00035760 	.word	0x00035760
   14744:	000359fc 	.word	0x000359fc
   14748:	00033f4c 	.word	0x00033f4c
   1474c:	00036cd2 	.word	0x00036cd2

00014750 <_write>:
}

/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len)
{
   14750:	b580      	push	{r7, lr}
   14752:	b086      	sub	sp, #24
   14754:	af00      	add	r7, sp, #0
   14756:	60f8      	str	r0, [r7, #12]
   14758:	60b9      	str	r1, [r7, #8]
   1475a:	607a      	str	r2, [r7, #4]
	uint8_t *pDes=Usart3Device.TxBuf[Usart3Device.producerTxBufNum];
   1475c:	4a40      	ldr	r2, [pc, #256]	; (14860 <_write+0x110>)
   1475e:	f241 23c2 	movw	r3, #4802	; 0x12c2
   14762:	4413      	add	r3, r2
   14764:	881b      	ldrh	r3, [r3, #0]
   14766:	461a      	mov	r2, r3
   14768:	f44f 7316 	mov.w	r3, #600	; 0x258
   1476c:	fb03 f302 	mul.w	r3, r3, r2
   14770:	4a3b      	ldr	r2, [pc, #236]	; (14860 <_write+0x110>)
   14772:	4413      	add	r3, r2
   14774:	617b      	str	r3, [r7, #20]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
   14776:	687b      	ldr	r3, [r7, #4]
   14778:	461a      	mov	r2, r3
   1477a:	68b9      	ldr	r1, [r7, #8]
   1477c:	6978      	ldr	r0, [r7, #20]
   1477e:	f000 fb09 	bl	14d94 <memcpy>
	*(pDes+len)='\0';
   14782:	687b      	ldr	r3, [r7, #4]
   14784:	697a      	ldr	r2, [r7, #20]
   14786:	4413      	add	r3, r2
   14788:	2200      	movs	r2, #0
   1478a:	701a      	strb	r2, [r3, #0]
	Usart3Device.countTxBuf[Usart3Device.producerTxBufNum] = len;
   1478c:	4a34      	ldr	r2, [pc, #208]	; (14860 <_write+0x110>)
   1478e:	f241 23c2 	movw	r3, #4802	; 0x12c2
   14792:	4413      	add	r3, r2
   14794:	881b      	ldrh	r3, [r3, #0]
   14796:	687a      	ldr	r2, [r7, #4]
   14798:	b291      	uxth	r1, r2
   1479a:	4a31      	ldr	r2, [pc, #196]	; (14860 <_write+0x110>)
   1479c:	f503 6316 	add.w	r3, r3, #2400	; 0x960
   147a0:	005b      	lsls	r3, r3, #1
   147a2:	4413      	add	r3, r2
   147a4:	460a      	mov	r2, r1
   147a6:	80da      	strh	r2, [r3, #6]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	Usart3Device.bufferedTxNum++;
   147a8:	4a2d      	ldr	r2, [pc, #180]	; (14860 <_write+0x110>)
   147aa:	f241 23c4 	movw	r3, #4804	; 0x12c4
   147ae:	4413      	add	r3, r2
   147b0:	881b      	ldrh	r3, [r3, #0]
   147b2:	3301      	adds	r3, #1
   147b4:	b299      	uxth	r1, r3
   147b6:	4a2a      	ldr	r2, [pc, #168]	; (14860 <_write+0x110>)
   147b8:	f241 23c4 	movw	r3, #4804	; 0x12c4
   147bc:	4413      	add	r3, r2
   147be:	460a      	mov	r2, r1
   147c0:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(Usart3Device.bufferedTxNum == 1){
   147c2:	4a27      	ldr	r2, [pc, #156]	; (14860 <_write+0x110>)
   147c4:	f241 23c4 	movw	r3, #4804	; 0x12c4
   147c8:	4413      	add	r3, r2
   147ca:	881b      	ldrh	r3, [r3, #0]
   147cc:	2b01      	cmp	r3, #1
   147ce:	d11b      	bne.n	14808 <_write+0xb8>
		HAL_UART_Transmit_DMA(Usart3Device.huart,pDes,Usart3Device.countTxBuf[Usart3Device.producerTxBufNum]);
   147d0:	4b23      	ldr	r3, [pc, #140]	; (14860 <_write+0x110>)
   147d2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   147d6:	6818      	ldr	r0, [r3, #0]
   147d8:	4a21      	ldr	r2, [pc, #132]	; (14860 <_write+0x110>)
   147da:	f241 23c2 	movw	r3, #4802	; 0x12c2
   147de:	4413      	add	r3, r2
   147e0:	881b      	ldrh	r3, [r3, #0]
   147e2:	4a1f      	ldr	r2, [pc, #124]	; (14860 <_write+0x110>)
   147e4:	f503 6316 	add.w	r3, r3, #2400	; 0x960
   147e8:	005b      	lsls	r3, r3, #1
   147ea:	4413      	add	r3, r2
   147ec:	88db      	ldrh	r3, [r3, #6]
   147ee:	461a      	mov	r2, r3
   147f0:	6979      	ldr	r1, [r7, #20]
   147f2:	f7fa fff3 	bl	f7dc <HAL_UART_Transmit_DMA>
		Usart3Device.TxStart = micros();
   147f6:	f7fe faeb 	bl	12dd0 <micros>
   147fa:	4601      	mov	r1, r0
   147fc:	4a18      	ldr	r2, [pc, #96]	; (14860 <_write+0x110>)
   147fe:	f241 7358 	movw	r3, #5976	; 0x1758
   14802:	4413      	add	r3, r2
   14804:	6019      	str	r1, [r3, #0]
   14806:	e00a      	b.n	1481e <_write+0xce>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the Usart3Devices would somehow suddenly lost the configurations
		Usart3Device.bufferedTxNum=Usart3Device.bufferedTxNum;
   14808:	4a15      	ldr	r2, [pc, #84]	; (14860 <_write+0x110>)
   1480a:	f241 23c4 	movw	r3, #4804	; 0x12c4
   1480e:	4413      	add	r3, r2
   14810:	8819      	ldrh	r1, [r3, #0]
   14812:	4a13      	ldr	r2, [pc, #76]	; (14860 <_write+0x110>)
   14814:	f241 23c4 	movw	r3, #4804	; 0x12c4
   14818:	4413      	add	r3, r2
   1481a:	460a      	mov	r2, r1
   1481c:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	Usart3Device.producerTxBufNum++;
   1481e:	4a10      	ldr	r2, [pc, #64]	; (14860 <_write+0x110>)
   14820:	f241 23c2 	movw	r3, #4802	; 0x12c2
   14824:	4413      	add	r3, r2
   14826:	881b      	ldrh	r3, [r3, #0]
   14828:	3301      	adds	r3, #1
   1482a:	b299      	uxth	r1, r3
   1482c:	4a0c      	ldr	r2, [pc, #48]	; (14860 <_write+0x110>)
   1482e:	f241 23c2 	movw	r3, #4802	; 0x12c2
   14832:	4413      	add	r3, r2
   14834:	460a      	mov	r2, r1
   14836:	801a      	strh	r2, [r3, #0]
	Usart3Device.producerTxBufNum%=UART_TX_BUF_NUM;
   14838:	4a09      	ldr	r2, [pc, #36]	; (14860 <_write+0x110>)
   1483a:	f241 23c2 	movw	r3, #4802	; 0x12c2
   1483e:	4413      	add	r3, r2
   14840:	881b      	ldrh	r3, [r3, #0]
   14842:	f003 0307 	and.w	r3, r3, #7
   14846:	b299      	uxth	r1, r3
   14848:	4a05      	ldr	r2, [pc, #20]	; (14860 <_write+0x110>)
   1484a:	f241 23c2 	movw	r3, #4802	; 0x12c2
   1484e:	4413      	add	r3, r2
   14850:	460a      	mov	r2, r1
   14852:	801a      	strh	r2, [r3, #0]
//	while(Usart3Device.bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
   14854:	687b      	ldr	r3, [r7, #4]
}
   14856:	4618      	mov	r0, r3
   14858:	3718      	adds	r7, #24
   1485a:	46bd      	mov	sp, r7
   1485c:	bd80      	pop	{r7, pc}
   1485e:	bf00      	nop
   14860:	00037168 	.word	0x00037168

00014864 <HAL_UART_RxCpltCallback>:
void printfBinPush(int16_t dat)
{
*(printfBinStruct.pData)++=dat;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
   14864:	b480      	push	{r7}
   14866:	b083      	sub	sp, #12
   14868:	af00      	add	r7, sp, #0
   1486a:	6078      	str	r0, [r7, #4]
	//printf("RxCplCall_Test\r\n");
}
   1486c:	bf00      	nop
   1486e:	370c      	adds	r7, #12
   14870:	46bd      	mov	sp, r7
   14872:	f85d 7b04 	ldr.w	r7, [sp], #4
   14876:	4770      	bx	lr

00014878 <HAL_UART_TxCpltCallback>:

/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
   14878:	b580      	push	{r7, lr}
   1487a:	b084      	sub	sp, #16
   1487c:	af00      	add	r7, sp, #0
   1487e:	6078      	str	r0, [r7, #4]
	 /*update information*/
	 Usart3Device.TxEnd = micros();
   14880:	f7fe faa6 	bl	12dd0 <micros>
   14884:	4601      	mov	r1, r0
   14886:	4a3c      	ldr	r2, [pc, #240]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   14888:	f241 735c 	movw	r3, #5980	; 0x175c
   1488c:	4413      	add	r3, r2
   1488e:	6019      	str	r1, [r3, #0]
	 Usart3Device.lastTxTime = Usart3Device.TxEnd - Usart3Device.TxStart;
   14890:	4a39      	ldr	r2, [pc, #228]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   14892:	f241 735c 	movw	r3, #5980	; 0x175c
   14896:	4413      	add	r3, r2
   14898:	681a      	ldr	r2, [r3, #0]
   1489a:	4937      	ldr	r1, [pc, #220]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   1489c:	f241 7358 	movw	r3, #5976	; 0x1758
   148a0:	440b      	add	r3, r1
   148a2:	681b      	ldr	r3, [r3, #0]
   148a4:	1ad2      	subs	r2, r2, r3
   148a6:	4934      	ldr	r1, [pc, #208]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148a8:	f241 7364 	movw	r3, #5988	; 0x1764
   148ac:	440b      	add	r3, r1
   148ae:	601a      	str	r2, [r3, #0]
	 Usart3Device.lastTxCount = Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum];
   148b0:	4b31      	ldr	r3, [pc, #196]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148b2:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
   148b6:	881b      	ldrh	r3, [r3, #0]
   148b8:	4a2f      	ldr	r2, [pc, #188]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148ba:	f503 6316 	add.w	r3, r3, #2400	; 0x960
   148be:	005b      	lsls	r3, r3, #1
   148c0:	4413      	add	r3, r2
   148c2:	88db      	ldrh	r3, [r3, #6]
   148c4:	4619      	mov	r1, r3
   148c6:	4a2c      	ldr	r2, [pc, #176]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148c8:	f241 7368 	movw	r3, #5992	; 0x1768
   148cc:	4413      	add	r3, r2
   148ce:	6019      	str	r1, [r3, #0]

	/*One consumption done. move consumer forward*/
	Usart3Device.consumerTxBufNum++;
   148d0:	4b29      	ldr	r3, [pc, #164]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148d2:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
   148d6:	881b      	ldrh	r3, [r3, #0]
   148d8:	3301      	adds	r3, #1
   148da:	b29a      	uxth	r2, r3
   148dc:	4b26      	ldr	r3, [pc, #152]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148de:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
   148e2:	801a      	strh	r2, [r3, #0]
	Usart3Device.consumerTxBufNum%=UART_TX_BUF_NUM;
   148e4:	4b24      	ldr	r3, [pc, #144]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148e6:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
   148ea:	881b      	ldrh	r3, [r3, #0]
   148ec:	f003 0307 	and.w	r3, r3, #7
   148f0:	b29a      	uxth	r2, r3
   148f2:	4b21      	ldr	r3, [pc, #132]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148f4:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
   148f8:	801a      	strh	r2, [r3, #0]

	/*reduce one bufferedTxNum*/
	 Usart3Device.bufferedTxNum--;
   148fa:	4a1f      	ldr	r2, [pc, #124]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   148fc:	f241 23c4 	movw	r3, #4804	; 0x12c4
   14900:	4413      	add	r3, r2
   14902:	881b      	ldrh	r3, [r3, #0]
   14904:	3b01      	subs	r3, #1
   14906:	b299      	uxth	r1, r3
   14908:	4a1b      	ldr	r2, [pc, #108]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   1490a:	f241 23c4 	movw	r3, #4804	; 0x12c4
   1490e:	4413      	add	r3, r2
   14910:	460a      	mov	r2, r1
   14912:	801a      	strh	r2, [r3, #0]

	/*If it is still positive, go on consume next*/
	if(Usart3Device.bufferedTxNum>0){
   14914:	4a18      	ldr	r2, [pc, #96]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   14916:	f241 23c4 	movw	r3, #4804	; 0x12c4
   1491a:	4413      	add	r3, r2
   1491c:	881b      	ldrh	r3, [r3, #0]
   1491e:	2b00      	cmp	r3, #0
   14920:	d025      	beq.n	1496e <HAL_UART_TxCpltCallback+0xf6>
		Usart3Device.TxStart = micros();
   14922:	f7fe fa55 	bl	12dd0 <micros>
   14926:	4601      	mov	r1, r0
   14928:	4a13      	ldr	r2, [pc, #76]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   1492a:	f241 7358 	movw	r3, #5976	; 0x1758
   1492e:	4413      	add	r3, r2
   14930:	6019      	str	r1, [r3, #0]
		uint8_t *px = &Usart3Device.TxBuf[Usart3Device.consumerTxBufNum][0];
   14932:	4b11      	ldr	r3, [pc, #68]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   14934:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
   14938:	881b      	ldrh	r3, [r3, #0]
   1493a:	461a      	mov	r2, r3
   1493c:	f44f 7316 	mov.w	r3, #600	; 0x258
   14940:	fb03 f302 	mul.w	r3, r3, r2
   14944:	4a0c      	ldr	r2, [pc, #48]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   14946:	4413      	add	r3, r2
   14948:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit_DMA(Usart3Device.huart,px,Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum]);
   1494a:	4b0b      	ldr	r3, [pc, #44]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   1494c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14950:	6818      	ldr	r0, [r3, #0]
   14952:	4b09      	ldr	r3, [pc, #36]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   14954:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
   14958:	881b      	ldrh	r3, [r3, #0]
   1495a:	4a07      	ldr	r2, [pc, #28]	; (14978 <HAL_UART_TxCpltCallback+0x100>)
   1495c:	f503 6316 	add.w	r3, r3, #2400	; 0x960
   14960:	005b      	lsls	r3, r3, #1
   14962:	4413      	add	r3, r2
   14964:	88db      	ldrh	r3, [r3, #6]
   14966:	461a      	mov	r2, r3
   14968:	68f9      	ldr	r1, [r7, #12]
   1496a:	f7fa ff37 	bl	f7dc <HAL_UART_Transmit_DMA>
	}
}
   1496e:	bf00      	nop
   14970:	3710      	adds	r7, #16
   14972:	46bd      	mov	sp, r7
   14974:	bd80      	pop	{r7, pc}
   14976:	bf00      	nop
   14978:	00037168 	.word	0x00037168

0001497c <UsartDMAIdleHandler>:

}


void UsartDMAIdleHandler(UART_DEVICE *UsartDevice)
{
   1497c:	b580      	push	{r7, lr}
   1497e:	b082      	sub	sp, #8
   14980:	af00      	add	r7, sp, #0
   14982:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
   14984:	687a      	ldr	r2, [r7, #4]
   14986:	f241 7352 	movw	r3, #5970	; 0x1752
   1498a:	4413      	add	r3, r2
   1498c:	881b      	ldrh	r3, [r3, #0]
   1498e:	2b01      	cmp	r3, #1
   14990:	f040 808f 	bne.w	14ab2 <UsartDMAIdleHandler+0x136>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
   14994:	687b      	ldr	r3, [r7, #4]
   14996:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   1499a:	681b      	ldr	r3, [r3, #0]
   1499c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1499e:	2b22      	cmp	r3, #34	; 0x22
   149a0:	d165      	bne.n	14a6e <UsartDMAIdleHandler+0xf2>
   149a2:	687b      	ldr	r3, [r7, #4]
   149a4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   149a8:	681b      	ldr	r3, [r3, #0]
   149aa:	681b      	ldr	r3, [r3, #0]
   149ac:	689b      	ldr	r3, [r3, #8]
   149ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
   149b2:	2b40      	cmp	r3, #64	; 0x40
   149b4:	d15b      	bne.n	14a6e <UsartDMAIdleHandler+0xf2>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
   149b6:	687b      	ldr	r3, [r7, #4]
   149b8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   149bc:	681b      	ldr	r3, [r3, #0]
   149be:	681b      	ldr	r3, [r3, #0]
   149c0:	689a      	ldr	r2, [r3, #8]
   149c2:	687b      	ldr	r3, [r7, #4]
   149c4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   149c8:	681b      	ldr	r3, [r3, #0]
   149ca:	681b      	ldr	r3, [r3, #0]
   149cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   149d0:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
   149d2:	687b      	ldr	r3, [r7, #4]
   149d4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   149d8:	681b      	ldr	r3, [r3, #0]
   149da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   149dc:	2b00      	cmp	r3, #0
   149de:	d024      	beq.n	14a2a <UsartDMAIdleHandler+0xae>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
   149e0:	687b      	ldr	r3, [r7, #4]
   149e2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   149e6:	681b      	ldr	r3, [r3, #0]
   149e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
   149ec:	687b      	ldr	r3, [r7, #4]
   149ee:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   149f2:	681b      	ldr	r3, [r3, #0]
   149f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   149f6:	681b      	ldr	r3, [r3, #0]
   149f8:	685b      	ldr	r3, [r3, #4]
   149fa:	b29b      	uxth	r3, r3
   149fc:	1ad3      	subs	r3, r2, r3
   149fe:	b299      	uxth	r1, r3
   14a00:	687a      	ldr	r2, [r7, #4]
   14a02:	f241 7350 	movw	r3, #5968	; 0x1750
   14a06:	4413      	add	r3, r2
   14a08:	460a      	mov	r2, r1
   14a0a:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
   14a0c:	687b      	ldr	r3, [r7, #4]
   14a0e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14a12:	681b      	ldr	r3, [r3, #0]
   14a14:	2200      	movs	r2, #0
   14a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
   14a1a:	687b      	ldr	r3, [r7, #4]
   14a1c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14a20:	681b      	ldr	r3, [r3, #0]
   14a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   14a24:	4618      	mov	r0, r3
   14a26:	f7f7 fae3 	bl	bff0 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
   14a2a:	687b      	ldr	r3, [r7, #4]
   14a2c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14a30:	681b      	ldr	r3, [r3, #0]
   14a32:	681b      	ldr	r3, [r3, #0]
   14a34:	681a      	ldr	r2, [r3, #0]
   14a36:	687b      	ldr	r3, [r7, #4]
   14a38:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14a3c:	681b      	ldr	r3, [r3, #0]
   14a3e:	681b      	ldr	r3, [r3, #0]
   14a40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   14a44:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
   14a46:	687b      	ldr	r3, [r7, #4]
   14a48:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14a4c:	681b      	ldr	r3, [r3, #0]
   14a4e:	681b      	ldr	r3, [r3, #0]
   14a50:	689a      	ldr	r2, [r3, #8]
   14a52:	687b      	ldr	r3, [r7, #4]
   14a54:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14a58:	681b      	ldr	r3, [r3, #0]
   14a5a:	681b      	ldr	r3, [r3, #0]
   14a5c:	f022 0201 	bic.w	r2, r2, #1
   14a60:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
   14a62:	687b      	ldr	r3, [r7, #4]
   14a64:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14a68:	681b      	ldr	r3, [r3, #0]
   14a6a:	2220      	movs	r2, #32
   14a6c:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands*/
			UartCommandHandler(UsartDevice);
   14a6e:	6878      	ldr	r0, [r7, #4]
   14a70:	f7ff fda2 	bl	145b8 <UartCommandHandler>

			/*clear Recived flag*/
			UsartDevice->Received = 0;
   14a74:	687a      	ldr	r2, [r7, #4]
   14a76:	f241 7352 	movw	r3, #5970	; 0x1752
   14a7a:	4413      	add	r3, r2
   14a7c:	2200      	movs	r2, #0
   14a7e:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
   14a80:	687a      	ldr	r2, [r7, #4]
   14a82:	f241 63cc 	movw	r3, #5836	; 0x16cc
   14a86:	4413      	add	r3, r2
   14a88:	2264      	movs	r2, #100	; 0x64
   14a8a:	2100      	movs	r1, #0
   14a8c:	4618      	mov	r0, r3
   14a8e:	f000 f98c 	bl	14daa <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
   14a92:	687a      	ldr	r2, [r7, #4]
   14a94:	f241 23d6 	movw	r3, #4822	; 0x12d6
   14a98:	4413      	add	r3, r2
   14a9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   14a9e:	2100      	movs	r1, #0
   14aa0:	4618      	mov	r0, r3
   14aa2:	f000 f982 	bl	14daa <memset>
			UsartDevice->countRxBuf = 0;
   14aa6:	687a      	ldr	r2, [r7, #4]
   14aa8:	f241 7350 	movw	r3, #5968	; 0x1750
   14aac:	4413      	add	r3, r2
   14aae:	2200      	movs	r2, #0
   14ab0:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
   14ab2:	687b      	ldr	r3, [r7, #4]
   14ab4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   14ab8:	6818      	ldr	r0, [r3, #0]
   14aba:	687a      	ldr	r2, [r7, #4]
   14abc:	f241 23d6 	movw	r3, #4822	; 0x12d6
   14ac0:	4413      	add	r3, r2
   14ac2:	f240 12f3 	movw	r2, #499	; 0x1f3
   14ac6:	4619      	mov	r1, r3
   14ac8:	f7fa ff04 	bl	f8d4 <HAL_UART_Receive_DMA>
}
   14acc:	bf00      	nop
   14ace:	3708      	adds	r7, #8
   14ad0:	46bd      	mov	sp, r7
   14ad2:	bd80      	pop	{r7, pc}

00014ad4 <Usart_TerminalHandler>:

/*Put this function in a loop for polling*/
void Usart_TerminalHandler()
{
   14ad4:	b580      	push	{r7, lr}
   14ad6:	af00      	add	r7, sp, #0
	UsartDMAIdleHandler(&Usart3Device);
   14ad8:	4811      	ldr	r0, [pc, #68]	; (14b20 <Usart_TerminalHandler+0x4c>)
   14ada:	f7ff ff4f 	bl	1497c <UsartDMAIdleHandler>
	UsartDMAIdleHandler(&Usart2Device);
   14ade:	4811      	ldr	r0, [pc, #68]	; (14b24 <Usart_TerminalHandler+0x50>)
   14ae0:	f7ff ff4c 	bl	1497c <UsartDMAIdleHandler>

	/********************************Usart 1 Int reception****************************/
	if(Usart1Device.Received == 1)
   14ae4:	4a10      	ldr	r2, [pc, #64]	; (14b28 <Usart_TerminalHandler+0x54>)
   14ae6:	f241 7352 	movw	r3, #5970	; 0x1752
   14aea:	4413      	add	r3, r2
   14aec:	881b      	ldrh	r3, [r3, #0]
   14aee:	2b01      	cmp	r3, #1
   14af0:	d113      	bne.n	14b1a <Usart_TerminalHandler+0x46>
	{
		usart1CommandHandler();
   14af2:	f7ff fccd 	bl	14490 <usart1CommandHandler>
		memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
   14af6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   14afa:	2100      	movs	r1, #0
   14afc:	480b      	ldr	r0, [pc, #44]	; (14b2c <Usart_TerminalHandler+0x58>)
   14afe:	f000 f954 	bl	14daa <memset>
		Usart1Device.pRxBuf=Usart1Device.RxBuf;
   14b02:	4a09      	ldr	r2, [pc, #36]	; (14b28 <Usart_TerminalHandler+0x54>)
   14b04:	f241 43cc 	movw	r3, #5324	; 0x14cc
   14b08:	4413      	add	r3, r2
   14b0a:	4a08      	ldr	r2, [pc, #32]	; (14b2c <Usart_TerminalHandler+0x58>)
   14b0c:	601a      	str	r2, [r3, #0]
		Usart1Device.Received = 0;
   14b0e:	4a06      	ldr	r2, [pc, #24]	; (14b28 <Usart_TerminalHandler+0x54>)
   14b10:	f241 7352 	movw	r3, #5970	; 0x1752
   14b14:	4413      	add	r3, r2
   14b16:	2200      	movs	r2, #0
   14b18:	801a      	strh	r2, [r3, #0]

	}

}
   14b1a:	bf00      	nop
   14b1c:	bd80      	pop	{r7, pc}
   14b1e:	bf00      	nop
   14b20:	00037168 	.word	0x00037168
   14b24:	00034290 	.word	0x00034290
   14b28:	000359fc 	.word	0x000359fc
   14b2c:	00036cd2 	.word	0x00036cd2

00014b30 <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
   14b30:	b480      	push	{r7}
   14b32:	b083      	sub	sp, #12
   14b34:	af00      	add	r7, sp, #0
   14b36:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
   14b38:	687b      	ldr	r3, [r7, #4]
   14b3a:	2200      	movs	r2, #0
   14b3c:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
   14b3e:	687b      	ldr	r3, [r7, #4]
   14b40:	2200      	movs	r2, #0
   14b42:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
   14b44:	687b      	ldr	r3, [r7, #4]
   14b46:	2200      	movs	r2, #0
   14b48:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
   14b4a:	687b      	ldr	r3, [r7, #4]
   14b4c:	f04f 0200 	mov.w	r2, #0
   14b50:	609a      	str	r2, [r3, #8]
	Temperature = 0;
   14b52:	687b      	ldr	r3, [r7, #4]
   14b54:	f04f 0200 	mov.w	r2, #0
   14b58:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
   14b5a:	687b      	ldr	r3, [r7, #4]
   14b5c:	4a0e      	ldr	r2, [pc, #56]	; (14b98 <_ZN18PRESSURE_SENSORSPIC1Ev+0x68>)
   14b5e:	619a      	str	r2, [r3, #24]
	PMin = 0;
   14b60:	687b      	ldr	r3, [r7, #4]
   14b62:	f04f 0200 	mov.w	r2, #0
   14b66:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
   14b68:	687b      	ldr	r3, [r7, #4]
   14b6a:	f240 6266 	movw	r2, #1638	; 0x666
   14b6e:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
   14b70:	687b      	ldr	r3, [r7, #4]
   14b72:	f643 1299 	movw	r2, #14745	; 0x3999
   14b76:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
   14b78:	687b      	ldr	r3, [r7, #4]
   14b7a:	4a08      	ldr	r2, [pc, #32]	; (14b9c <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
   14b7c:	61da      	str	r2, [r3, #28]
	CS_Port =DO_13_GPIO_Port;
   14b7e:	687b      	ldr	r3, [r7, #4]
   14b80:	4a07      	ldr	r2, [pc, #28]	; (14ba0 <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
   14b82:	621a      	str	r2, [r3, #32]
	CS_Pin = DO_13_Pin;
   14b84:	687b      	ldr	r3, [r7, #4]
   14b86:	2210      	movs	r2, #16
   14b88:	849a      	strh	r2, [r3, #36]	; 0x24
}
   14b8a:	687b      	ldr	r3, [r7, #4]
   14b8c:	4618      	mov	r0, r3
   14b8e:	370c      	adds	r7, #12
   14b90:	46bd      	mov	sp, r7
   14b92:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b96:	4770      	bx	lr
   14b98:	48ca0080 	.word	0x48ca0080
   14b9c:	000337dc 	.word	0x000337dc
   14ba0:	40021000 	.word	0x40021000

00014ba4 <_Znwj>:
   14ba4:	b510      	push	{r4, lr}
   14ba6:	2800      	cmp	r0, #0
   14ba8:	bf14      	ite	ne
   14baa:	4604      	movne	r4, r0
   14bac:	2401      	moveq	r4, #1
   14bae:	4620      	mov	r0, r4
   14bb0:	f000 f8e8 	bl	14d84 <malloc>
   14bb4:	b930      	cbnz	r0, 14bc4 <_Znwj+0x20>
   14bb6:	f000 f807 	bl	14bc8 <_ZSt15get_new_handlerv>
   14bba:	b908      	cbnz	r0, 14bc0 <_Znwj+0x1c>
   14bbc:	f000 f8a9 	bl	14d12 <abort>
   14bc0:	4780      	blx	r0
   14bc2:	e7f4      	b.n	14bae <_Znwj+0xa>
   14bc4:	bd10      	pop	{r4, pc}
	...

00014bc8 <_ZSt15get_new_handlerv>:
   14bc8:	4b02      	ldr	r3, [pc, #8]	; (14bd4 <_ZSt15get_new_handlerv+0xc>)
   14bca:	6818      	ldr	r0, [r3, #0]
   14bcc:	f3bf 8f5b 	dmb	ish
   14bd0:	4770      	bx	lr
   14bd2:	bf00      	nop
   14bd4:	0002b540 	.word	0x0002b540

00014bd8 <round>:
   14bd8:	ee10 3a90 	vmov	r3, s1
   14bdc:	b530      	push	{r4, r5, lr}
   14bde:	f3c3 540a 	ubfx	r4, r3, #20, #11
   14be2:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
   14be6:	2913      	cmp	r1, #19
   14be8:	ee10 5a90 	vmov	r5, s1
   14bec:	ee10 2a10 	vmov	r2, s0
   14bf0:	dc17      	bgt.n	14c22 <round+0x4a>
   14bf2:	2900      	cmp	r1, #0
   14bf4:	da09      	bge.n	14c0a <round+0x32>
   14bf6:	3101      	adds	r1, #1
   14bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   14bfc:	d103      	bne.n	14c06 <round+0x2e>
   14bfe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   14c02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   14c06:	2200      	movs	r2, #0
   14c08:	e024      	b.n	14c54 <round+0x7c>
   14c0a:	4815      	ldr	r0, [pc, #84]	; (14c60 <round+0x88>)
   14c0c:	4108      	asrs	r0, r1
   14c0e:	4203      	tst	r3, r0
   14c10:	d100      	bne.n	14c14 <round+0x3c>
   14c12:	b16a      	cbz	r2, 14c30 <round+0x58>
   14c14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   14c18:	410b      	asrs	r3, r1
   14c1a:	442b      	add	r3, r5
   14c1c:	ea23 0300 	bic.w	r3, r3, r0
   14c20:	e7f1      	b.n	14c06 <round+0x2e>
   14c22:	2933      	cmp	r1, #51	; 0x33
   14c24:	dd05      	ble.n	14c32 <round+0x5a>
   14c26:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   14c2a:	d101      	bne.n	14c30 <round+0x58>
   14c2c:	ee30 0b00 	vadd.f64	d0, d0, d0
   14c30:	bd30      	pop	{r4, r5, pc}
   14c32:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
   14c36:	f04f 34ff 	mov.w	r4, #4294967295
   14c3a:	40c4      	lsrs	r4, r0
   14c3c:	4222      	tst	r2, r4
   14c3e:	d0f7      	beq.n	14c30 <round+0x58>
   14c40:	2001      	movs	r0, #1
   14c42:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   14c46:	fa00 f101 	lsl.w	r1, r0, r1
   14c4a:	1852      	adds	r2, r2, r1
   14c4c:	bf28      	it	cs
   14c4e:	181b      	addcs	r3, r3, r0
   14c50:	ea22 0204 	bic.w	r2, r2, r4
   14c54:	4619      	mov	r1, r3
   14c56:	4610      	mov	r0, r2
   14c58:	ec41 0b10 	vmov	d0, r0, r1
   14c5c:	e7e8      	b.n	14c30 <round+0x58>
   14c5e:	bf00      	nop
   14c60:	000fffff 	.word	0x000fffff
   14c64:	00000000 	.word	0x00000000

00014c68 <sqrtf>:
   14c68:	b500      	push	{lr}
   14c6a:	ed2d 8b02 	vpush	{d8}
   14c6e:	b08b      	sub	sp, #44	; 0x2c
   14c70:	eeb0 8a40 	vmov.f32	s16, s0
   14c74:	f000 f848 	bl	14d08 <__ieee754_sqrtf>
   14c78:	4b21      	ldr	r3, [pc, #132]	; (14d00 <sqrtf+0x98>)
   14c7a:	f993 3000 	ldrsb.w	r3, [r3]
   14c7e:	1c5a      	adds	r2, r3, #1
   14c80:	d028      	beq.n	14cd4 <sqrtf+0x6c>
   14c82:	eeb4 8a48 	vcmp.f32	s16, s16
   14c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14c8a:	d623      	bvs.n	14cd4 <sqrtf+0x6c>
   14c8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   14c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14c94:	d51e      	bpl.n	14cd4 <sqrtf+0x6c>
   14c96:	2201      	movs	r2, #1
   14c98:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
   14c9c:	9200      	str	r2, [sp, #0]
   14c9e:	4a19      	ldr	r2, [pc, #100]	; (14d04 <sqrtf+0x9c>)
   14ca0:	9201      	str	r2, [sp, #4]
   14ca2:	2200      	movs	r2, #0
   14ca4:	9208      	str	r2, [sp, #32]
   14ca6:	ed8d 8b04 	vstr	d8, [sp, #16]
   14caa:	ed8d 8b02 	vstr	d8, [sp, #8]
   14cae:	ed9f 7b12 	vldr	d7, [pc, #72]	; 14cf8 <sqrtf+0x90>
   14cb2:	b9a3      	cbnz	r3, 14cde <sqrtf+0x76>
   14cb4:	ed8d 7b06 	vstr	d7, [sp, #24]
   14cb8:	4668      	mov	r0, sp
   14cba:	f000 f828 	bl	14d0e <matherr>
   14cbe:	b1a0      	cbz	r0, 14cea <sqrtf+0x82>
   14cc0:	9b08      	ldr	r3, [sp, #32]
   14cc2:	b11b      	cbz	r3, 14ccc <sqrtf+0x64>
   14cc4:	f000 f834 	bl	14d30 <__errno>
   14cc8:	9b08      	ldr	r3, [sp, #32]
   14cca:	6003      	str	r3, [r0, #0]
   14ccc:	ed9d 0b06 	vldr	d0, [sp, #24]
   14cd0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   14cd4:	b00b      	add	sp, #44	; 0x2c
   14cd6:	ecbd 8b02 	vpop	{d8}
   14cda:	f85d fb04 	ldr.w	pc, [sp], #4
   14cde:	2b02      	cmp	r3, #2
   14ce0:	ee87 6b07 	vdiv.f64	d6, d7, d7
   14ce4:	ed8d 6b06 	vstr	d6, [sp, #24]
   14ce8:	d1e6      	bne.n	14cb8 <sqrtf+0x50>
   14cea:	f000 f821 	bl	14d30 <__errno>
   14cee:	2321      	movs	r3, #33	; 0x21
   14cf0:	6003      	str	r3, [r0, #0]
   14cf2:	e7e5      	b.n	14cc0 <sqrtf+0x58>
   14cf4:	f3af 8000 	nop.w
	...
   14d00:	00029e24 	.word	0x00029e24
   14d04:	0001978b 	.word	0x0001978b

00014d08 <__ieee754_sqrtf>:
   14d08:	eeb1 0ac0 	vsqrt.f32	s0, s0
   14d0c:	4770      	bx	lr

00014d0e <matherr>:
   14d0e:	2000      	movs	r0, #0
   14d10:	4770      	bx	lr

00014d12 <abort>:
   14d12:	b508      	push	{r3, lr}
   14d14:	2006      	movs	r0, #6
   14d16:	f000 ffd5 	bl	15cc4 <raise>
   14d1a:	2001      	movs	r0, #1
   14d1c:	f004 fc04 	bl	19528 <_exit>

00014d20 <calloc>:
   14d20:	4b02      	ldr	r3, [pc, #8]	; (14d2c <calloc+0xc>)
   14d22:	460a      	mov	r2, r1
   14d24:	4601      	mov	r1, r0
   14d26:	6818      	ldr	r0, [r3, #0]
   14d28:	f000 b847 	b.w	14dba <_calloc_r>
   14d2c:	00029e28 	.word	0x00029e28

00014d30 <__errno>:
   14d30:	4b01      	ldr	r3, [pc, #4]	; (14d38 <__errno+0x8>)
   14d32:	6818      	ldr	r0, [r3, #0]
   14d34:	4770      	bx	lr
   14d36:	bf00      	nop
   14d38:	00029e28 	.word	0x00029e28

00014d3c <__libc_init_array>:
   14d3c:	b570      	push	{r4, r5, r6, lr}
   14d3e:	4e0d      	ldr	r6, [pc, #52]	; (14d74 <__libc_init_array+0x38>)
   14d40:	4c0d      	ldr	r4, [pc, #52]	; (14d78 <__libc_init_array+0x3c>)
   14d42:	1ba4      	subs	r4, r4, r6
   14d44:	10a4      	asrs	r4, r4, #2
   14d46:	2500      	movs	r5, #0
   14d48:	42a5      	cmp	r5, r4
   14d4a:	d109      	bne.n	14d60 <__libc_init_array+0x24>
   14d4c:	4e0b      	ldr	r6, [pc, #44]	; (14d7c <__libc_init_array+0x40>)
   14d4e:	4c0c      	ldr	r4, [pc, #48]	; (14d80 <__libc_init_array+0x44>)
   14d50:	f7f3 f956 	bl	8000 <_init>
   14d54:	1ba4      	subs	r4, r4, r6
   14d56:	10a4      	asrs	r4, r4, #2
   14d58:	2500      	movs	r5, #0
   14d5a:	42a5      	cmp	r5, r4
   14d5c:	d105      	bne.n	14d6a <__libc_init_array+0x2e>
   14d5e:	bd70      	pop	{r4, r5, r6, pc}
   14d60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   14d64:	4798      	blx	r3
   14d66:	3501      	adds	r5, #1
   14d68:	e7ee      	b.n	14d48 <__libc_init_array+0xc>
   14d6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   14d6e:	4798      	blx	r3
   14d70:	3501      	adds	r5, #1
   14d72:	e7f2      	b.n	14d5a <__libc_init_array+0x1e>
   14d74:	00029ac4 	.word	0x00029ac4
   14d78:	00029ac4 	.word	0x00029ac4
   14d7c:	00029ac4 	.word	0x00029ac4
   14d80:	00029acc 	.word	0x00029acc

00014d84 <malloc>:
   14d84:	4b02      	ldr	r3, [pc, #8]	; (14d90 <malloc+0xc>)
   14d86:	4601      	mov	r1, r0
   14d88:	6818      	ldr	r0, [r3, #0]
   14d8a:	f000 b873 	b.w	14e74 <_malloc_r>
   14d8e:	bf00      	nop
   14d90:	00029e28 	.word	0x00029e28

00014d94 <memcpy>:
   14d94:	b510      	push	{r4, lr}
   14d96:	1e43      	subs	r3, r0, #1
   14d98:	440a      	add	r2, r1
   14d9a:	4291      	cmp	r1, r2
   14d9c:	d100      	bne.n	14da0 <memcpy+0xc>
   14d9e:	bd10      	pop	{r4, pc}
   14da0:	f811 4b01 	ldrb.w	r4, [r1], #1
   14da4:	f803 4f01 	strb.w	r4, [r3, #1]!
   14da8:	e7f7      	b.n	14d9a <memcpy+0x6>

00014daa <memset>:
   14daa:	4402      	add	r2, r0
   14dac:	4603      	mov	r3, r0
   14dae:	4293      	cmp	r3, r2
   14db0:	d100      	bne.n	14db4 <memset+0xa>
   14db2:	4770      	bx	lr
   14db4:	f803 1b01 	strb.w	r1, [r3], #1
   14db8:	e7f9      	b.n	14dae <memset+0x4>

00014dba <_calloc_r>:
   14dba:	b538      	push	{r3, r4, r5, lr}
   14dbc:	fb02 f401 	mul.w	r4, r2, r1
   14dc0:	4621      	mov	r1, r4
   14dc2:	f000 f857 	bl	14e74 <_malloc_r>
   14dc6:	4605      	mov	r5, r0
   14dc8:	b118      	cbz	r0, 14dd2 <_calloc_r+0x18>
   14dca:	4622      	mov	r2, r4
   14dcc:	2100      	movs	r1, #0
   14dce:	f7ff ffec 	bl	14daa <memset>
   14dd2:	4628      	mov	r0, r5
   14dd4:	bd38      	pop	{r3, r4, r5, pc}
	...

00014dd8 <_free_r>:
   14dd8:	b538      	push	{r3, r4, r5, lr}
   14dda:	4605      	mov	r5, r0
   14ddc:	2900      	cmp	r1, #0
   14dde:	d045      	beq.n	14e6c <_free_r+0x94>
   14de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   14de4:	1f0c      	subs	r4, r1, #4
   14de6:	2b00      	cmp	r3, #0
   14de8:	bfb8      	it	lt
   14dea:	18e4      	addlt	r4, r4, r3
   14dec:	f003 fa30 	bl	18250 <__malloc_lock>
   14df0:	4a1f      	ldr	r2, [pc, #124]	; (14e70 <_free_r+0x98>)
   14df2:	6813      	ldr	r3, [r2, #0]
   14df4:	4610      	mov	r0, r2
   14df6:	b933      	cbnz	r3, 14e06 <_free_r+0x2e>
   14df8:	6063      	str	r3, [r4, #4]
   14dfa:	6014      	str	r4, [r2, #0]
   14dfc:	4628      	mov	r0, r5
   14dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14e02:	f003 ba26 	b.w	18252 <__malloc_unlock>
   14e06:	42a3      	cmp	r3, r4
   14e08:	d90c      	bls.n	14e24 <_free_r+0x4c>
   14e0a:	6821      	ldr	r1, [r4, #0]
   14e0c:	1862      	adds	r2, r4, r1
   14e0e:	4293      	cmp	r3, r2
   14e10:	bf04      	itt	eq
   14e12:	681a      	ldreq	r2, [r3, #0]
   14e14:	685b      	ldreq	r3, [r3, #4]
   14e16:	6063      	str	r3, [r4, #4]
   14e18:	bf04      	itt	eq
   14e1a:	1852      	addeq	r2, r2, r1
   14e1c:	6022      	streq	r2, [r4, #0]
   14e1e:	6004      	str	r4, [r0, #0]
   14e20:	e7ec      	b.n	14dfc <_free_r+0x24>
   14e22:	4613      	mov	r3, r2
   14e24:	685a      	ldr	r2, [r3, #4]
   14e26:	b10a      	cbz	r2, 14e2c <_free_r+0x54>
   14e28:	42a2      	cmp	r2, r4
   14e2a:	d9fa      	bls.n	14e22 <_free_r+0x4a>
   14e2c:	6819      	ldr	r1, [r3, #0]
   14e2e:	1858      	adds	r0, r3, r1
   14e30:	42a0      	cmp	r0, r4
   14e32:	d10b      	bne.n	14e4c <_free_r+0x74>
   14e34:	6820      	ldr	r0, [r4, #0]
   14e36:	4401      	add	r1, r0
   14e38:	1858      	adds	r0, r3, r1
   14e3a:	4282      	cmp	r2, r0
   14e3c:	6019      	str	r1, [r3, #0]
   14e3e:	d1dd      	bne.n	14dfc <_free_r+0x24>
   14e40:	6810      	ldr	r0, [r2, #0]
   14e42:	6852      	ldr	r2, [r2, #4]
   14e44:	605a      	str	r2, [r3, #4]
   14e46:	4401      	add	r1, r0
   14e48:	6019      	str	r1, [r3, #0]
   14e4a:	e7d7      	b.n	14dfc <_free_r+0x24>
   14e4c:	d902      	bls.n	14e54 <_free_r+0x7c>
   14e4e:	230c      	movs	r3, #12
   14e50:	602b      	str	r3, [r5, #0]
   14e52:	e7d3      	b.n	14dfc <_free_r+0x24>
   14e54:	6820      	ldr	r0, [r4, #0]
   14e56:	1821      	adds	r1, r4, r0
   14e58:	428a      	cmp	r2, r1
   14e5a:	bf04      	itt	eq
   14e5c:	6811      	ldreq	r1, [r2, #0]
   14e5e:	6852      	ldreq	r2, [r2, #4]
   14e60:	6062      	str	r2, [r4, #4]
   14e62:	bf04      	itt	eq
   14e64:	1809      	addeq	r1, r1, r0
   14e66:	6021      	streq	r1, [r4, #0]
   14e68:	605c      	str	r4, [r3, #4]
   14e6a:	e7c7      	b.n	14dfc <_free_r+0x24>
   14e6c:	bd38      	pop	{r3, r4, r5, pc}
   14e6e:	bf00      	nop
   14e70:	0002b544 	.word	0x0002b544

00014e74 <_malloc_r>:
   14e74:	b570      	push	{r4, r5, r6, lr}
   14e76:	1ccd      	adds	r5, r1, #3
   14e78:	f025 0503 	bic.w	r5, r5, #3
   14e7c:	3508      	adds	r5, #8
   14e7e:	2d0c      	cmp	r5, #12
   14e80:	bf38      	it	cc
   14e82:	250c      	movcc	r5, #12
   14e84:	2d00      	cmp	r5, #0
   14e86:	4606      	mov	r6, r0
   14e88:	db01      	blt.n	14e8e <_malloc_r+0x1a>
   14e8a:	42a9      	cmp	r1, r5
   14e8c:	d903      	bls.n	14e96 <_malloc_r+0x22>
   14e8e:	230c      	movs	r3, #12
   14e90:	6033      	str	r3, [r6, #0]
   14e92:	2000      	movs	r0, #0
   14e94:	bd70      	pop	{r4, r5, r6, pc}
   14e96:	f003 f9db 	bl	18250 <__malloc_lock>
   14e9a:	4a21      	ldr	r2, [pc, #132]	; (14f20 <_malloc_r+0xac>)
   14e9c:	6814      	ldr	r4, [r2, #0]
   14e9e:	4621      	mov	r1, r4
   14ea0:	b991      	cbnz	r1, 14ec8 <_malloc_r+0x54>
   14ea2:	4c20      	ldr	r4, [pc, #128]	; (14f24 <_malloc_r+0xb0>)
   14ea4:	6823      	ldr	r3, [r4, #0]
   14ea6:	b91b      	cbnz	r3, 14eb0 <_malloc_r+0x3c>
   14ea8:	4630      	mov	r0, r6
   14eaa:	f000 fecd 	bl	15c48 <_sbrk_r>
   14eae:	6020      	str	r0, [r4, #0]
   14eb0:	4629      	mov	r1, r5
   14eb2:	4630      	mov	r0, r6
   14eb4:	f000 fec8 	bl	15c48 <_sbrk_r>
   14eb8:	1c43      	adds	r3, r0, #1
   14eba:	d124      	bne.n	14f06 <_malloc_r+0x92>
   14ebc:	230c      	movs	r3, #12
   14ebe:	6033      	str	r3, [r6, #0]
   14ec0:	4630      	mov	r0, r6
   14ec2:	f003 f9c6 	bl	18252 <__malloc_unlock>
   14ec6:	e7e4      	b.n	14e92 <_malloc_r+0x1e>
   14ec8:	680b      	ldr	r3, [r1, #0]
   14eca:	1b5b      	subs	r3, r3, r5
   14ecc:	d418      	bmi.n	14f00 <_malloc_r+0x8c>
   14ece:	2b0b      	cmp	r3, #11
   14ed0:	d90f      	bls.n	14ef2 <_malloc_r+0x7e>
   14ed2:	600b      	str	r3, [r1, #0]
   14ed4:	50cd      	str	r5, [r1, r3]
   14ed6:	18cc      	adds	r4, r1, r3
   14ed8:	4630      	mov	r0, r6
   14eda:	f003 f9ba 	bl	18252 <__malloc_unlock>
   14ede:	f104 000b 	add.w	r0, r4, #11
   14ee2:	1d23      	adds	r3, r4, #4
   14ee4:	f020 0007 	bic.w	r0, r0, #7
   14ee8:	1ac3      	subs	r3, r0, r3
   14eea:	d0d3      	beq.n	14e94 <_malloc_r+0x20>
   14eec:	425a      	negs	r2, r3
   14eee:	50e2      	str	r2, [r4, r3]
   14ef0:	e7d0      	b.n	14e94 <_malloc_r+0x20>
   14ef2:	428c      	cmp	r4, r1
   14ef4:	684b      	ldr	r3, [r1, #4]
   14ef6:	bf16      	itet	ne
   14ef8:	6063      	strne	r3, [r4, #4]
   14efa:	6013      	streq	r3, [r2, #0]
   14efc:	460c      	movne	r4, r1
   14efe:	e7eb      	b.n	14ed8 <_malloc_r+0x64>
   14f00:	460c      	mov	r4, r1
   14f02:	6849      	ldr	r1, [r1, #4]
   14f04:	e7cc      	b.n	14ea0 <_malloc_r+0x2c>
   14f06:	1cc4      	adds	r4, r0, #3
   14f08:	f024 0403 	bic.w	r4, r4, #3
   14f0c:	42a0      	cmp	r0, r4
   14f0e:	d005      	beq.n	14f1c <_malloc_r+0xa8>
   14f10:	1a21      	subs	r1, r4, r0
   14f12:	4630      	mov	r0, r6
   14f14:	f000 fe98 	bl	15c48 <_sbrk_r>
   14f18:	3001      	adds	r0, #1
   14f1a:	d0cf      	beq.n	14ebc <_malloc_r+0x48>
   14f1c:	6025      	str	r5, [r4, #0]
   14f1e:	e7db      	b.n	14ed8 <_malloc_r+0x64>
   14f20:	0002b544 	.word	0x0002b544
   14f24:	0002b548 	.word	0x0002b548

00014f28 <__cvt>:
   14f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f2a:	ed2d 8b02 	vpush	{d8}
   14f2e:	eeb0 8b40 	vmov.f64	d8, d0
   14f32:	b085      	sub	sp, #20
   14f34:	4617      	mov	r7, r2
   14f36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14f38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14f3a:	ee18 2a90 	vmov	r2, s17
   14f3e:	f025 0520 	bic.w	r5, r5, #32
   14f42:	2a00      	cmp	r2, #0
   14f44:	bfb6      	itet	lt
   14f46:	222d      	movlt	r2, #45	; 0x2d
   14f48:	2200      	movge	r2, #0
   14f4a:	eeb1 8b40 	vneglt.f64	d8, d0
   14f4e:	2d46      	cmp	r5, #70	; 0x46
   14f50:	460c      	mov	r4, r1
   14f52:	701a      	strb	r2, [r3, #0]
   14f54:	d004      	beq.n	14f60 <__cvt+0x38>
   14f56:	2d45      	cmp	r5, #69	; 0x45
   14f58:	d100      	bne.n	14f5c <__cvt+0x34>
   14f5a:	3401      	adds	r4, #1
   14f5c:	2102      	movs	r1, #2
   14f5e:	e000      	b.n	14f62 <__cvt+0x3a>
   14f60:	2103      	movs	r1, #3
   14f62:	ab03      	add	r3, sp, #12
   14f64:	9301      	str	r3, [sp, #4]
   14f66:	ab02      	add	r3, sp, #8
   14f68:	9300      	str	r3, [sp, #0]
   14f6a:	4622      	mov	r2, r4
   14f6c:	4633      	mov	r3, r6
   14f6e:	eeb0 0b48 	vmov.f64	d0, d8
   14f72:	f001 fea1 	bl	16cb8 <_dtoa_r>
   14f76:	2d47      	cmp	r5, #71	; 0x47
   14f78:	d101      	bne.n	14f7e <__cvt+0x56>
   14f7a:	07fb      	lsls	r3, r7, #31
   14f7c:	d51e      	bpl.n	14fbc <__cvt+0x94>
   14f7e:	2d46      	cmp	r5, #70	; 0x46
   14f80:	eb00 0304 	add.w	r3, r0, r4
   14f84:	d10c      	bne.n	14fa0 <__cvt+0x78>
   14f86:	7802      	ldrb	r2, [r0, #0]
   14f88:	2a30      	cmp	r2, #48	; 0x30
   14f8a:	d107      	bne.n	14f9c <__cvt+0x74>
   14f8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14f94:	bf1c      	itt	ne
   14f96:	f1c4 0401 	rsbne	r4, r4, #1
   14f9a:	6034      	strne	r4, [r6, #0]
   14f9c:	6832      	ldr	r2, [r6, #0]
   14f9e:	4413      	add	r3, r2
   14fa0:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14fa8:	d007      	beq.n	14fba <__cvt+0x92>
   14faa:	2130      	movs	r1, #48	; 0x30
   14fac:	9a03      	ldr	r2, [sp, #12]
   14fae:	429a      	cmp	r2, r3
   14fb0:	d204      	bcs.n	14fbc <__cvt+0x94>
   14fb2:	1c54      	adds	r4, r2, #1
   14fb4:	9403      	str	r4, [sp, #12]
   14fb6:	7011      	strb	r1, [r2, #0]
   14fb8:	e7f8      	b.n	14fac <__cvt+0x84>
   14fba:	9303      	str	r3, [sp, #12]
   14fbc:	9b03      	ldr	r3, [sp, #12]
   14fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14fc0:	1a1b      	subs	r3, r3, r0
   14fc2:	6013      	str	r3, [r2, #0]
   14fc4:	b005      	add	sp, #20
   14fc6:	ecbd 8b02 	vpop	{d8}
   14fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014fcc <__exponent>:
   14fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14fce:	2900      	cmp	r1, #0
   14fd0:	4604      	mov	r4, r0
   14fd2:	bfba      	itte	lt
   14fd4:	4249      	neglt	r1, r1
   14fd6:	232d      	movlt	r3, #45	; 0x2d
   14fd8:	232b      	movge	r3, #43	; 0x2b
   14fda:	2909      	cmp	r1, #9
   14fdc:	f804 2b02 	strb.w	r2, [r4], #2
   14fe0:	7043      	strb	r3, [r0, #1]
   14fe2:	dd20      	ble.n	15026 <__exponent+0x5a>
   14fe4:	f10d 0307 	add.w	r3, sp, #7
   14fe8:	461f      	mov	r7, r3
   14fea:	260a      	movs	r6, #10
   14fec:	fb91 f5f6 	sdiv	r5, r1, r6
   14ff0:	fb06 1115 	mls	r1, r6, r5, r1
   14ff4:	3130      	adds	r1, #48	; 0x30
   14ff6:	2d09      	cmp	r5, #9
   14ff8:	f803 1c01 	strb.w	r1, [r3, #-1]
   14ffc:	f103 32ff 	add.w	r2, r3, #4294967295
   15000:	4629      	mov	r1, r5
   15002:	dc09      	bgt.n	15018 <__exponent+0x4c>
   15004:	3130      	adds	r1, #48	; 0x30
   15006:	3b02      	subs	r3, #2
   15008:	f802 1c01 	strb.w	r1, [r2, #-1]
   1500c:	42bb      	cmp	r3, r7
   1500e:	4622      	mov	r2, r4
   15010:	d304      	bcc.n	1501c <__exponent+0x50>
   15012:	1a10      	subs	r0, r2, r0
   15014:	b003      	add	sp, #12
   15016:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15018:	4613      	mov	r3, r2
   1501a:	e7e7      	b.n	14fec <__exponent+0x20>
   1501c:	f813 2b01 	ldrb.w	r2, [r3], #1
   15020:	f804 2b01 	strb.w	r2, [r4], #1
   15024:	e7f2      	b.n	1500c <__exponent+0x40>
   15026:	2330      	movs	r3, #48	; 0x30
   15028:	4419      	add	r1, r3
   1502a:	7083      	strb	r3, [r0, #2]
   1502c:	1d02      	adds	r2, r0, #4
   1502e:	70c1      	strb	r1, [r0, #3]
   15030:	e7ef      	b.n	15012 <__exponent+0x46>
   15032:	0000      	movs	r0, r0
   15034:	0000      	movs	r0, r0
	...

00015038 <_printf_float>:
   15038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1503c:	b08d      	sub	sp, #52	; 0x34
   1503e:	460c      	mov	r4, r1
   15040:	4616      	mov	r6, r2
   15042:	461f      	mov	r7, r3
   15044:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   15048:	4605      	mov	r5, r0
   1504a:	f003 f827 	bl	1809c <_localeconv_r>
   1504e:	f8d0 b000 	ldr.w	fp, [r0]
   15052:	4658      	mov	r0, fp
   15054:	f000 fe72 	bl	15d3c <strlen>
   15058:	2300      	movs	r3, #0
   1505a:	930a      	str	r3, [sp, #40]	; 0x28
   1505c:	f8d8 3000 	ldr.w	r3, [r8]
   15060:	9005      	str	r0, [sp, #20]
   15062:	3307      	adds	r3, #7
   15064:	f023 0307 	bic.w	r3, r3, #7
   15068:	f103 0108 	add.w	r1, r3, #8
   1506c:	f894 9018 	ldrb.w	r9, [r4, #24]
   15070:	6822      	ldr	r2, [r4, #0]
   15072:	f8c8 1000 	str.w	r1, [r8]
   15076:	e9d3 0100 	ldrd	r0, r1, [r3]
   1507a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
   1507e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 15308 <_printf_float+0x2d0>
   15082:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
   15086:	eeb0 6bc0 	vabs.f64	d6, d0
   1508a:	eeb4 6b47 	vcmp.f64	d6, d7
   1508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15092:	dd24      	ble.n	150de <_printf_float+0xa6>
   15094:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   15098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1509c:	d502      	bpl.n	150a4 <_printf_float+0x6c>
   1509e:	232d      	movs	r3, #45	; 0x2d
   150a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   150a4:	499a      	ldr	r1, [pc, #616]	; (15310 <_printf_float+0x2d8>)
   150a6:	4b9b      	ldr	r3, [pc, #620]	; (15314 <_printf_float+0x2dc>)
   150a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   150ac:	bf8c      	ite	hi
   150ae:	4688      	movhi	r8, r1
   150b0:	4698      	movls	r8, r3
   150b2:	f022 0204 	bic.w	r2, r2, #4
   150b6:	2303      	movs	r3, #3
   150b8:	6123      	str	r3, [r4, #16]
   150ba:	6022      	str	r2, [r4, #0]
   150bc:	f04f 0a00 	mov.w	sl, #0
   150c0:	9700      	str	r7, [sp, #0]
   150c2:	4633      	mov	r3, r6
   150c4:	aa0b      	add	r2, sp, #44	; 0x2c
   150c6:	4621      	mov	r1, r4
   150c8:	4628      	mov	r0, r5
   150ca:	f000 f9e1 	bl	15490 <_printf_common>
   150ce:	3001      	adds	r0, #1
   150d0:	f040 8089 	bne.w	151e6 <_printf_float+0x1ae>
   150d4:	f04f 30ff 	mov.w	r0, #4294967295
   150d8:	b00d      	add	sp, #52	; 0x34
   150da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150de:	eeb4 0b40 	vcmp.f64	d0, d0
   150e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   150e6:	d702      	bvc.n	150ee <_printf_float+0xb6>
   150e8:	498b      	ldr	r1, [pc, #556]	; (15318 <_printf_float+0x2e0>)
   150ea:	4b8c      	ldr	r3, [pc, #560]	; (1531c <_printf_float+0x2e4>)
   150ec:	e7dc      	b.n	150a8 <_printf_float+0x70>
   150ee:	6861      	ldr	r1, [r4, #4]
   150f0:	1c4b      	adds	r3, r1, #1
   150f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   150f6:	ab0a      	add	r3, sp, #40	; 0x28
   150f8:	a809      	add	r0, sp, #36	; 0x24
   150fa:	d13b      	bne.n	15174 <_printf_float+0x13c>
   150fc:	2106      	movs	r1, #6
   150fe:	6061      	str	r1, [r4, #4]
   15100:	f04f 0c00 	mov.w	ip, #0
   15104:	e9cd 3c02 	strd	r3, ip, [sp, #8]
   15108:	e9cd 0900 	strd	r0, r9, [sp]
   1510c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   15110:	6022      	str	r2, [r4, #0]
   15112:	6861      	ldr	r1, [r4, #4]
   15114:	4628      	mov	r0, r5
   15116:	f7ff ff07 	bl	14f28 <__cvt>
   1511a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
   1511e:	2b47      	cmp	r3, #71	; 0x47
   15120:	4680      	mov	r8, r0
   15122:	d109      	bne.n	15138 <_printf_float+0x100>
   15124:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15126:	1cd8      	adds	r0, r3, #3
   15128:	db02      	blt.n	15130 <_printf_float+0xf8>
   1512a:	6862      	ldr	r2, [r4, #4]
   1512c:	4293      	cmp	r3, r2
   1512e:	dd47      	ble.n	151c0 <_printf_float+0x188>
   15130:	f1a9 0902 	sub.w	r9, r9, #2
   15134:	fa5f f989 	uxtb.w	r9, r9
   15138:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   1513c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1513e:	d824      	bhi.n	1518a <_printf_float+0x152>
   15140:	3901      	subs	r1, #1
   15142:	464a      	mov	r2, r9
   15144:	f104 0050 	add.w	r0, r4, #80	; 0x50
   15148:	9109      	str	r1, [sp, #36]	; 0x24
   1514a:	f7ff ff3f 	bl	14fcc <__exponent>
   1514e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15150:	1813      	adds	r3, r2, r0
   15152:	2a01      	cmp	r2, #1
   15154:	4682      	mov	sl, r0
   15156:	6123      	str	r3, [r4, #16]
   15158:	dc02      	bgt.n	15160 <_printf_float+0x128>
   1515a:	6822      	ldr	r2, [r4, #0]
   1515c:	07d1      	lsls	r1, r2, #31
   1515e:	d501      	bpl.n	15164 <_printf_float+0x12c>
   15160:	3301      	adds	r3, #1
   15162:	6123      	str	r3, [r4, #16]
   15164:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   15168:	2b00      	cmp	r3, #0
   1516a:	d0a9      	beq.n	150c0 <_printf_float+0x88>
   1516c:	232d      	movs	r3, #45	; 0x2d
   1516e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   15172:	e7a5      	b.n	150c0 <_printf_float+0x88>
   15174:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
   15178:	f000 8178 	beq.w	1546c <_printf_float+0x434>
   1517c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   15180:	d1be      	bne.n	15100 <_printf_float+0xc8>
   15182:	2900      	cmp	r1, #0
   15184:	d1bc      	bne.n	15100 <_printf_float+0xc8>
   15186:	2101      	movs	r1, #1
   15188:	e7b9      	b.n	150fe <_printf_float+0xc6>
   1518a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   1518e:	d119      	bne.n	151c4 <_printf_float+0x18c>
   15190:	2900      	cmp	r1, #0
   15192:	6863      	ldr	r3, [r4, #4]
   15194:	dd0c      	ble.n	151b0 <_printf_float+0x178>
   15196:	6121      	str	r1, [r4, #16]
   15198:	b913      	cbnz	r3, 151a0 <_printf_float+0x168>
   1519a:	6822      	ldr	r2, [r4, #0]
   1519c:	07d2      	lsls	r2, r2, #31
   1519e:	d502      	bpl.n	151a6 <_printf_float+0x16e>
   151a0:	3301      	adds	r3, #1
   151a2:	440b      	add	r3, r1
   151a4:	6123      	str	r3, [r4, #16]
   151a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151a8:	65a3      	str	r3, [r4, #88]	; 0x58
   151aa:	f04f 0a00 	mov.w	sl, #0
   151ae:	e7d9      	b.n	15164 <_printf_float+0x12c>
   151b0:	b913      	cbnz	r3, 151b8 <_printf_float+0x180>
   151b2:	6822      	ldr	r2, [r4, #0]
   151b4:	07d0      	lsls	r0, r2, #31
   151b6:	d501      	bpl.n	151bc <_printf_float+0x184>
   151b8:	3302      	adds	r3, #2
   151ba:	e7f3      	b.n	151a4 <_printf_float+0x16c>
   151bc:	2301      	movs	r3, #1
   151be:	e7f1      	b.n	151a4 <_printf_float+0x16c>
   151c0:	f04f 0967 	mov.w	r9, #103	; 0x67
   151c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   151c8:	4293      	cmp	r3, r2
   151ca:	db05      	blt.n	151d8 <_printf_float+0x1a0>
   151cc:	6822      	ldr	r2, [r4, #0]
   151ce:	6123      	str	r3, [r4, #16]
   151d0:	07d1      	lsls	r1, r2, #31
   151d2:	d5e8      	bpl.n	151a6 <_printf_float+0x16e>
   151d4:	3301      	adds	r3, #1
   151d6:	e7e5      	b.n	151a4 <_printf_float+0x16c>
   151d8:	2b00      	cmp	r3, #0
   151da:	bfd4      	ite	le
   151dc:	f1c3 0302 	rsble	r3, r3, #2
   151e0:	2301      	movgt	r3, #1
   151e2:	4413      	add	r3, r2
   151e4:	e7de      	b.n	151a4 <_printf_float+0x16c>
   151e6:	6823      	ldr	r3, [r4, #0]
   151e8:	055a      	lsls	r2, r3, #21
   151ea:	d407      	bmi.n	151fc <_printf_float+0x1c4>
   151ec:	6923      	ldr	r3, [r4, #16]
   151ee:	4642      	mov	r2, r8
   151f0:	4631      	mov	r1, r6
   151f2:	4628      	mov	r0, r5
   151f4:	47b8      	blx	r7
   151f6:	3001      	adds	r0, #1
   151f8:	d12a      	bne.n	15250 <_printf_float+0x218>
   151fa:	e76b      	b.n	150d4 <_printf_float+0x9c>
   151fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   15200:	f240 80de 	bls.w	153c0 <_printf_float+0x388>
   15204:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   15208:	eeb5 7b40 	vcmp.f64	d7, #0.0
   1520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15210:	d133      	bne.n	1527a <_printf_float+0x242>
   15212:	2301      	movs	r3, #1
   15214:	4a42      	ldr	r2, [pc, #264]	; (15320 <_printf_float+0x2e8>)
   15216:	4631      	mov	r1, r6
   15218:	4628      	mov	r0, r5
   1521a:	47b8      	blx	r7
   1521c:	3001      	adds	r0, #1
   1521e:	f43f af59 	beq.w	150d4 <_printf_float+0x9c>
   15222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   15226:	429a      	cmp	r2, r3
   15228:	db02      	blt.n	15230 <_printf_float+0x1f8>
   1522a:	6823      	ldr	r3, [r4, #0]
   1522c:	07d8      	lsls	r0, r3, #31
   1522e:	d50f      	bpl.n	15250 <_printf_float+0x218>
   15230:	9b05      	ldr	r3, [sp, #20]
   15232:	465a      	mov	r2, fp
   15234:	4631      	mov	r1, r6
   15236:	4628      	mov	r0, r5
   15238:	47b8      	blx	r7
   1523a:	3001      	adds	r0, #1
   1523c:	f43f af4a 	beq.w	150d4 <_printf_float+0x9c>
   15240:	f04f 0800 	mov.w	r8, #0
   15244:	f104 091a 	add.w	r9, r4, #26
   15248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1524a:	3b01      	subs	r3, #1
   1524c:	4543      	cmp	r3, r8
   1524e:	dc09      	bgt.n	15264 <_printf_float+0x22c>
   15250:	6823      	ldr	r3, [r4, #0]
   15252:	079b      	lsls	r3, r3, #30
   15254:	f100 8105 	bmi.w	15462 <_printf_float+0x42a>
   15258:	68e0      	ldr	r0, [r4, #12]
   1525a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1525c:	4298      	cmp	r0, r3
   1525e:	bfb8      	it	lt
   15260:	4618      	movlt	r0, r3
   15262:	e739      	b.n	150d8 <_printf_float+0xa0>
   15264:	2301      	movs	r3, #1
   15266:	464a      	mov	r2, r9
   15268:	4631      	mov	r1, r6
   1526a:	4628      	mov	r0, r5
   1526c:	47b8      	blx	r7
   1526e:	3001      	adds	r0, #1
   15270:	f43f af30 	beq.w	150d4 <_printf_float+0x9c>
   15274:	f108 0801 	add.w	r8, r8, #1
   15278:	e7e6      	b.n	15248 <_printf_float+0x210>
   1527a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1527c:	2b00      	cmp	r3, #0
   1527e:	dc2b      	bgt.n	152d8 <_printf_float+0x2a0>
   15280:	2301      	movs	r3, #1
   15282:	4a27      	ldr	r2, [pc, #156]	; (15320 <_printf_float+0x2e8>)
   15284:	4631      	mov	r1, r6
   15286:	4628      	mov	r0, r5
   15288:	47b8      	blx	r7
   1528a:	3001      	adds	r0, #1
   1528c:	f43f af22 	beq.w	150d4 <_printf_float+0x9c>
   15290:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15292:	b923      	cbnz	r3, 1529e <_printf_float+0x266>
   15294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15296:	b913      	cbnz	r3, 1529e <_printf_float+0x266>
   15298:	6823      	ldr	r3, [r4, #0]
   1529a:	07d9      	lsls	r1, r3, #31
   1529c:	d5d8      	bpl.n	15250 <_printf_float+0x218>
   1529e:	9b05      	ldr	r3, [sp, #20]
   152a0:	465a      	mov	r2, fp
   152a2:	4631      	mov	r1, r6
   152a4:	4628      	mov	r0, r5
   152a6:	47b8      	blx	r7
   152a8:	3001      	adds	r0, #1
   152aa:	f43f af13 	beq.w	150d4 <_printf_float+0x9c>
   152ae:	f04f 0900 	mov.w	r9, #0
   152b2:	f104 0a1a 	add.w	sl, r4, #26
   152b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   152b8:	425b      	negs	r3, r3
   152ba:	454b      	cmp	r3, r9
   152bc:	dc01      	bgt.n	152c2 <_printf_float+0x28a>
   152be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   152c0:	e795      	b.n	151ee <_printf_float+0x1b6>
   152c2:	2301      	movs	r3, #1
   152c4:	4652      	mov	r2, sl
   152c6:	4631      	mov	r1, r6
   152c8:	4628      	mov	r0, r5
   152ca:	47b8      	blx	r7
   152cc:	3001      	adds	r0, #1
   152ce:	f43f af01 	beq.w	150d4 <_printf_float+0x9c>
   152d2:	f109 0901 	add.w	r9, r9, #1
   152d6:	e7ee      	b.n	152b6 <_printf_float+0x27e>
   152d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   152da:	6da3      	ldr	r3, [r4, #88]	; 0x58
   152dc:	429a      	cmp	r2, r3
   152de:	bfa8      	it	ge
   152e0:	461a      	movge	r2, r3
   152e2:	2a00      	cmp	r2, #0
   152e4:	4691      	mov	r9, r2
   152e6:	dd07      	ble.n	152f8 <_printf_float+0x2c0>
   152e8:	4613      	mov	r3, r2
   152ea:	4631      	mov	r1, r6
   152ec:	4642      	mov	r2, r8
   152ee:	4628      	mov	r0, r5
   152f0:	47b8      	blx	r7
   152f2:	3001      	adds	r0, #1
   152f4:	f43f aeee 	beq.w	150d4 <_printf_float+0x9c>
   152f8:	f104 031a 	add.w	r3, r4, #26
   152fc:	f04f 0a00 	mov.w	sl, #0
   15300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   15304:	9307      	str	r3, [sp, #28]
   15306:	e017      	b.n	15338 <_printf_float+0x300>
   15308:	ffffffff 	.word	0xffffffff
   1530c:	7fefffff 	.word	0x7fefffff
   15310:	0001979c 	.word	0x0001979c
   15314:	00019798 	.word	0x00019798
   15318:	000197a4 	.word	0x000197a4
   1531c:	000197a0 	.word	0x000197a0
   15320:	000197a8 	.word	0x000197a8
   15324:	2301      	movs	r3, #1
   15326:	9a07      	ldr	r2, [sp, #28]
   15328:	4631      	mov	r1, r6
   1532a:	4628      	mov	r0, r5
   1532c:	47b8      	blx	r7
   1532e:	3001      	adds	r0, #1
   15330:	f43f aed0 	beq.w	150d4 <_printf_float+0x9c>
   15334:	f10a 0a01 	add.w	sl, sl, #1
   15338:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1533a:	9306      	str	r3, [sp, #24]
   1533c:	eba3 0309 	sub.w	r3, r3, r9
   15340:	4553      	cmp	r3, sl
   15342:	dcef      	bgt.n	15324 <_printf_float+0x2ec>
   15344:	9b06      	ldr	r3, [sp, #24]
   15346:	4498      	add	r8, r3
   15348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1534c:	429a      	cmp	r2, r3
   1534e:	db15      	blt.n	1537c <_printf_float+0x344>
   15350:	6823      	ldr	r3, [r4, #0]
   15352:	07da      	lsls	r2, r3, #31
   15354:	d412      	bmi.n	1537c <_printf_float+0x344>
   15356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15358:	9a06      	ldr	r2, [sp, #24]
   1535a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1535c:	1a9a      	subs	r2, r3, r2
   1535e:	eba3 0a01 	sub.w	sl, r3, r1
   15362:	4592      	cmp	sl, r2
   15364:	bfa8      	it	ge
   15366:	4692      	movge	sl, r2
   15368:	f1ba 0f00 	cmp.w	sl, #0
   1536c:	dc0e      	bgt.n	1538c <_printf_float+0x354>
   1536e:	f04f 0800 	mov.w	r8, #0
   15372:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   15376:	f104 091a 	add.w	r9, r4, #26
   1537a:	e019      	b.n	153b0 <_printf_float+0x378>
   1537c:	9b05      	ldr	r3, [sp, #20]
   1537e:	465a      	mov	r2, fp
   15380:	4631      	mov	r1, r6
   15382:	4628      	mov	r0, r5
   15384:	47b8      	blx	r7
   15386:	3001      	adds	r0, #1
   15388:	d1e5      	bne.n	15356 <_printf_float+0x31e>
   1538a:	e6a3      	b.n	150d4 <_printf_float+0x9c>
   1538c:	4653      	mov	r3, sl
   1538e:	4642      	mov	r2, r8
   15390:	4631      	mov	r1, r6
   15392:	4628      	mov	r0, r5
   15394:	47b8      	blx	r7
   15396:	3001      	adds	r0, #1
   15398:	d1e9      	bne.n	1536e <_printf_float+0x336>
   1539a:	e69b      	b.n	150d4 <_printf_float+0x9c>
   1539c:	2301      	movs	r3, #1
   1539e:	464a      	mov	r2, r9
   153a0:	4631      	mov	r1, r6
   153a2:	4628      	mov	r0, r5
   153a4:	47b8      	blx	r7
   153a6:	3001      	adds	r0, #1
   153a8:	f43f ae94 	beq.w	150d4 <_printf_float+0x9c>
   153ac:	f108 0801 	add.w	r8, r8, #1
   153b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   153b4:	1a9b      	subs	r3, r3, r2
   153b6:	eba3 030a 	sub.w	r3, r3, sl
   153ba:	4543      	cmp	r3, r8
   153bc:	dcee      	bgt.n	1539c <_printf_float+0x364>
   153be:	e747      	b.n	15250 <_printf_float+0x218>
   153c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   153c2:	2a01      	cmp	r2, #1
   153c4:	dc01      	bgt.n	153ca <_printf_float+0x392>
   153c6:	07db      	lsls	r3, r3, #31
   153c8:	d539      	bpl.n	1543e <_printf_float+0x406>
   153ca:	2301      	movs	r3, #1
   153cc:	4642      	mov	r2, r8
   153ce:	4631      	mov	r1, r6
   153d0:	4628      	mov	r0, r5
   153d2:	47b8      	blx	r7
   153d4:	3001      	adds	r0, #1
   153d6:	f43f ae7d 	beq.w	150d4 <_printf_float+0x9c>
   153da:	9b05      	ldr	r3, [sp, #20]
   153dc:	465a      	mov	r2, fp
   153de:	4631      	mov	r1, r6
   153e0:	4628      	mov	r0, r5
   153e2:	47b8      	blx	r7
   153e4:	3001      	adds	r0, #1
   153e6:	f108 0801 	add.w	r8, r8, #1
   153ea:	f43f ae73 	beq.w	150d4 <_printf_float+0x9c>
   153ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   153f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   153f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
   153f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   153fc:	f103 33ff 	add.w	r3, r3, #4294967295
   15400:	d018      	beq.n	15434 <_printf_float+0x3fc>
   15402:	4642      	mov	r2, r8
   15404:	4631      	mov	r1, r6
   15406:	4628      	mov	r0, r5
   15408:	47b8      	blx	r7
   1540a:	3001      	adds	r0, #1
   1540c:	d10e      	bne.n	1542c <_printf_float+0x3f4>
   1540e:	e661      	b.n	150d4 <_printf_float+0x9c>
   15410:	2301      	movs	r3, #1
   15412:	464a      	mov	r2, r9
   15414:	4631      	mov	r1, r6
   15416:	4628      	mov	r0, r5
   15418:	47b8      	blx	r7
   1541a:	3001      	adds	r0, #1
   1541c:	f43f ae5a 	beq.w	150d4 <_printf_float+0x9c>
   15420:	f108 0801 	add.w	r8, r8, #1
   15424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15426:	3b01      	subs	r3, #1
   15428:	4543      	cmp	r3, r8
   1542a:	dcf1      	bgt.n	15410 <_printf_float+0x3d8>
   1542c:	4653      	mov	r3, sl
   1542e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   15432:	e6dd      	b.n	151f0 <_printf_float+0x1b8>
   15434:	f04f 0800 	mov.w	r8, #0
   15438:	f104 091a 	add.w	r9, r4, #26
   1543c:	e7f2      	b.n	15424 <_printf_float+0x3ec>
   1543e:	2301      	movs	r3, #1
   15440:	e7df      	b.n	15402 <_printf_float+0x3ca>
   15442:	2301      	movs	r3, #1
   15444:	464a      	mov	r2, r9
   15446:	4631      	mov	r1, r6
   15448:	4628      	mov	r0, r5
   1544a:	47b8      	blx	r7
   1544c:	3001      	adds	r0, #1
   1544e:	f43f ae41 	beq.w	150d4 <_printf_float+0x9c>
   15452:	f108 0801 	add.w	r8, r8, #1
   15456:	68e3      	ldr	r3, [r4, #12]
   15458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1545a:	1a9b      	subs	r3, r3, r2
   1545c:	4543      	cmp	r3, r8
   1545e:	dcf0      	bgt.n	15442 <_printf_float+0x40a>
   15460:	e6fa      	b.n	15258 <_printf_float+0x220>
   15462:	f04f 0800 	mov.w	r8, #0
   15466:	f104 0919 	add.w	r9, r4, #25
   1546a:	e7f4      	b.n	15456 <_printf_float+0x41e>
   1546c:	2900      	cmp	r1, #0
   1546e:	f43f ae8a 	beq.w	15186 <_printf_float+0x14e>
   15472:	f04f 0c00 	mov.w	ip, #0
   15476:	e9cd 3c02 	strd	r3, ip, [sp, #8]
   1547a:	e9cd 0900 	strd	r0, r9, [sp]
   1547e:	6022      	str	r2, [r4, #0]
   15480:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   15484:	4628      	mov	r0, r5
   15486:	f7ff fd4f 	bl	14f28 <__cvt>
   1548a:	4680      	mov	r8, r0
   1548c:	e64a      	b.n	15124 <_printf_float+0xec>
   1548e:	bf00      	nop

00015490 <_printf_common>:
   15490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15494:	4691      	mov	r9, r2
   15496:	461f      	mov	r7, r3
   15498:	688a      	ldr	r2, [r1, #8]
   1549a:	690b      	ldr	r3, [r1, #16]
   1549c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   154a0:	4293      	cmp	r3, r2
   154a2:	bfb8      	it	lt
   154a4:	4613      	movlt	r3, r2
   154a6:	f8c9 3000 	str.w	r3, [r9]
   154aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   154ae:	4606      	mov	r6, r0
   154b0:	460c      	mov	r4, r1
   154b2:	b112      	cbz	r2, 154ba <_printf_common+0x2a>
   154b4:	3301      	adds	r3, #1
   154b6:	f8c9 3000 	str.w	r3, [r9]
   154ba:	6823      	ldr	r3, [r4, #0]
   154bc:	0699      	lsls	r1, r3, #26
   154be:	bf42      	ittt	mi
   154c0:	f8d9 3000 	ldrmi.w	r3, [r9]
   154c4:	3302      	addmi	r3, #2
   154c6:	f8c9 3000 	strmi.w	r3, [r9]
   154ca:	6825      	ldr	r5, [r4, #0]
   154cc:	f015 0506 	ands.w	r5, r5, #6
   154d0:	d107      	bne.n	154e2 <_printf_common+0x52>
   154d2:	f104 0a19 	add.w	sl, r4, #25
   154d6:	68e3      	ldr	r3, [r4, #12]
   154d8:	f8d9 2000 	ldr.w	r2, [r9]
   154dc:	1a9b      	subs	r3, r3, r2
   154de:	42ab      	cmp	r3, r5
   154e0:	dc28      	bgt.n	15534 <_printf_common+0xa4>
   154e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   154e6:	6822      	ldr	r2, [r4, #0]
   154e8:	3300      	adds	r3, #0
   154ea:	bf18      	it	ne
   154ec:	2301      	movne	r3, #1
   154ee:	0692      	lsls	r2, r2, #26
   154f0:	d42d      	bmi.n	1554e <_printf_common+0xbe>
   154f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   154f6:	4639      	mov	r1, r7
   154f8:	4630      	mov	r0, r6
   154fa:	47c0      	blx	r8
   154fc:	3001      	adds	r0, #1
   154fe:	d020      	beq.n	15542 <_printf_common+0xb2>
   15500:	6823      	ldr	r3, [r4, #0]
   15502:	68e5      	ldr	r5, [r4, #12]
   15504:	f8d9 2000 	ldr.w	r2, [r9]
   15508:	f003 0306 	and.w	r3, r3, #6
   1550c:	2b04      	cmp	r3, #4
   1550e:	bf08      	it	eq
   15510:	1aad      	subeq	r5, r5, r2
   15512:	68a3      	ldr	r3, [r4, #8]
   15514:	6922      	ldr	r2, [r4, #16]
   15516:	bf0c      	ite	eq
   15518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1551c:	2500      	movne	r5, #0
   1551e:	4293      	cmp	r3, r2
   15520:	bfc4      	itt	gt
   15522:	1a9b      	subgt	r3, r3, r2
   15524:	18ed      	addgt	r5, r5, r3
   15526:	f04f 0900 	mov.w	r9, #0
   1552a:	341a      	adds	r4, #26
   1552c:	454d      	cmp	r5, r9
   1552e:	d11a      	bne.n	15566 <_printf_common+0xd6>
   15530:	2000      	movs	r0, #0
   15532:	e008      	b.n	15546 <_printf_common+0xb6>
   15534:	2301      	movs	r3, #1
   15536:	4652      	mov	r2, sl
   15538:	4639      	mov	r1, r7
   1553a:	4630      	mov	r0, r6
   1553c:	47c0      	blx	r8
   1553e:	3001      	adds	r0, #1
   15540:	d103      	bne.n	1554a <_printf_common+0xba>
   15542:	f04f 30ff 	mov.w	r0, #4294967295
   15546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1554a:	3501      	adds	r5, #1
   1554c:	e7c3      	b.n	154d6 <_printf_common+0x46>
   1554e:	18e1      	adds	r1, r4, r3
   15550:	1c5a      	adds	r2, r3, #1
   15552:	2030      	movs	r0, #48	; 0x30
   15554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   15558:	4422      	add	r2, r4
   1555a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1555e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   15562:	3302      	adds	r3, #2
   15564:	e7c5      	b.n	154f2 <_printf_common+0x62>
   15566:	2301      	movs	r3, #1
   15568:	4622      	mov	r2, r4
   1556a:	4639      	mov	r1, r7
   1556c:	4630      	mov	r0, r6
   1556e:	47c0      	blx	r8
   15570:	3001      	adds	r0, #1
   15572:	d0e6      	beq.n	15542 <_printf_common+0xb2>
   15574:	f109 0901 	add.w	r9, r9, #1
   15578:	e7d8      	b.n	1552c <_printf_common+0x9c>
	...

0001557c <_printf_i>:
   1557c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15580:	f101 0c43 	add.w	ip, r1, #67	; 0x43
   15584:	460c      	mov	r4, r1
   15586:	7e09      	ldrb	r1, [r1, #24]
   15588:	b085      	sub	sp, #20
   1558a:	296e      	cmp	r1, #110	; 0x6e
   1558c:	4617      	mov	r7, r2
   1558e:	4606      	mov	r6, r0
   15590:	4698      	mov	r8, r3
   15592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15594:	f000 80b3 	beq.w	156fe <_printf_i+0x182>
   15598:	d822      	bhi.n	155e0 <_printf_i+0x64>
   1559a:	2963      	cmp	r1, #99	; 0x63
   1559c:	d036      	beq.n	1560c <_printf_i+0x90>
   1559e:	d80a      	bhi.n	155b6 <_printf_i+0x3a>
   155a0:	2900      	cmp	r1, #0
   155a2:	f000 80b9 	beq.w	15718 <_printf_i+0x19c>
   155a6:	2958      	cmp	r1, #88	; 0x58
   155a8:	f000 8083 	beq.w	156b2 <_printf_i+0x136>
   155ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
   155b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   155b4:	e032      	b.n	1561c <_printf_i+0xa0>
   155b6:	2964      	cmp	r1, #100	; 0x64
   155b8:	d001      	beq.n	155be <_printf_i+0x42>
   155ba:	2969      	cmp	r1, #105	; 0x69
   155bc:	d1f6      	bne.n	155ac <_printf_i+0x30>
   155be:	6820      	ldr	r0, [r4, #0]
   155c0:	6813      	ldr	r3, [r2, #0]
   155c2:	0605      	lsls	r5, r0, #24
   155c4:	f103 0104 	add.w	r1, r3, #4
   155c8:	d52a      	bpl.n	15620 <_printf_i+0xa4>
   155ca:	681b      	ldr	r3, [r3, #0]
   155cc:	6011      	str	r1, [r2, #0]
   155ce:	2b00      	cmp	r3, #0
   155d0:	da03      	bge.n	155da <_printf_i+0x5e>
   155d2:	222d      	movs	r2, #45	; 0x2d
   155d4:	425b      	negs	r3, r3
   155d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
   155da:	486f      	ldr	r0, [pc, #444]	; (15798 <_printf_i+0x21c>)
   155dc:	220a      	movs	r2, #10
   155de:	e039      	b.n	15654 <_printf_i+0xd8>
   155e0:	2973      	cmp	r1, #115	; 0x73
   155e2:	f000 809d 	beq.w	15720 <_printf_i+0x1a4>
   155e6:	d808      	bhi.n	155fa <_printf_i+0x7e>
   155e8:	296f      	cmp	r1, #111	; 0x6f
   155ea:	d020      	beq.n	1562e <_printf_i+0xb2>
   155ec:	2970      	cmp	r1, #112	; 0x70
   155ee:	d1dd      	bne.n	155ac <_printf_i+0x30>
   155f0:	6823      	ldr	r3, [r4, #0]
   155f2:	f043 0320 	orr.w	r3, r3, #32
   155f6:	6023      	str	r3, [r4, #0]
   155f8:	e003      	b.n	15602 <_printf_i+0x86>
   155fa:	2975      	cmp	r1, #117	; 0x75
   155fc:	d017      	beq.n	1562e <_printf_i+0xb2>
   155fe:	2978      	cmp	r1, #120	; 0x78
   15600:	d1d4      	bne.n	155ac <_printf_i+0x30>
   15602:	2378      	movs	r3, #120	; 0x78
   15604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   15608:	4864      	ldr	r0, [pc, #400]	; (1579c <_printf_i+0x220>)
   1560a:	e055      	b.n	156b8 <_printf_i+0x13c>
   1560c:	6813      	ldr	r3, [r2, #0]
   1560e:	1d19      	adds	r1, r3, #4
   15610:	681b      	ldr	r3, [r3, #0]
   15612:	6011      	str	r1, [r2, #0]
   15614:	f104 0542 	add.w	r5, r4, #66	; 0x42
   15618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1561c:	2301      	movs	r3, #1
   1561e:	e08c      	b.n	1573a <_printf_i+0x1be>
   15620:	681b      	ldr	r3, [r3, #0]
   15622:	6011      	str	r1, [r2, #0]
   15624:	f010 0f40 	tst.w	r0, #64	; 0x40
   15628:	bf18      	it	ne
   1562a:	b21b      	sxthne	r3, r3
   1562c:	e7cf      	b.n	155ce <_printf_i+0x52>
   1562e:	6813      	ldr	r3, [r2, #0]
   15630:	6825      	ldr	r5, [r4, #0]
   15632:	1d18      	adds	r0, r3, #4
   15634:	6010      	str	r0, [r2, #0]
   15636:	0628      	lsls	r0, r5, #24
   15638:	d501      	bpl.n	1563e <_printf_i+0xc2>
   1563a:	681b      	ldr	r3, [r3, #0]
   1563c:	e002      	b.n	15644 <_printf_i+0xc8>
   1563e:	0668      	lsls	r0, r5, #25
   15640:	d5fb      	bpl.n	1563a <_printf_i+0xbe>
   15642:	881b      	ldrh	r3, [r3, #0]
   15644:	4854      	ldr	r0, [pc, #336]	; (15798 <_printf_i+0x21c>)
   15646:	296f      	cmp	r1, #111	; 0x6f
   15648:	bf14      	ite	ne
   1564a:	220a      	movne	r2, #10
   1564c:	2208      	moveq	r2, #8
   1564e:	2100      	movs	r1, #0
   15650:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   15654:	6865      	ldr	r5, [r4, #4]
   15656:	60a5      	str	r5, [r4, #8]
   15658:	2d00      	cmp	r5, #0
   1565a:	f2c0 8095 	blt.w	15788 <_printf_i+0x20c>
   1565e:	6821      	ldr	r1, [r4, #0]
   15660:	f021 0104 	bic.w	r1, r1, #4
   15664:	6021      	str	r1, [r4, #0]
   15666:	2b00      	cmp	r3, #0
   15668:	d13d      	bne.n	156e6 <_printf_i+0x16a>
   1566a:	2d00      	cmp	r5, #0
   1566c:	f040 808e 	bne.w	1578c <_printf_i+0x210>
   15670:	4665      	mov	r5, ip
   15672:	2a08      	cmp	r2, #8
   15674:	d10b      	bne.n	1568e <_printf_i+0x112>
   15676:	6823      	ldr	r3, [r4, #0]
   15678:	07db      	lsls	r3, r3, #31
   1567a:	d508      	bpl.n	1568e <_printf_i+0x112>
   1567c:	6923      	ldr	r3, [r4, #16]
   1567e:	6862      	ldr	r2, [r4, #4]
   15680:	429a      	cmp	r2, r3
   15682:	bfde      	ittt	le
   15684:	2330      	movle	r3, #48	; 0x30
   15686:	f805 3c01 	strble.w	r3, [r5, #-1]
   1568a:	f105 35ff 	addle.w	r5, r5, #4294967295
   1568e:	ebac 0305 	sub.w	r3, ip, r5
   15692:	6123      	str	r3, [r4, #16]
   15694:	f8cd 8000 	str.w	r8, [sp]
   15698:	463b      	mov	r3, r7
   1569a:	aa03      	add	r2, sp, #12
   1569c:	4621      	mov	r1, r4
   1569e:	4630      	mov	r0, r6
   156a0:	f7ff fef6 	bl	15490 <_printf_common>
   156a4:	3001      	adds	r0, #1
   156a6:	d14d      	bne.n	15744 <_printf_i+0x1c8>
   156a8:	f04f 30ff 	mov.w	r0, #4294967295
   156ac:	b005      	add	sp, #20
   156ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   156b2:	4839      	ldr	r0, [pc, #228]	; (15798 <_printf_i+0x21c>)
   156b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   156b8:	6813      	ldr	r3, [r2, #0]
   156ba:	6821      	ldr	r1, [r4, #0]
   156bc:	1d1d      	adds	r5, r3, #4
   156be:	681b      	ldr	r3, [r3, #0]
   156c0:	6015      	str	r5, [r2, #0]
   156c2:	060a      	lsls	r2, r1, #24
   156c4:	d50b      	bpl.n	156de <_printf_i+0x162>
   156c6:	07ca      	lsls	r2, r1, #31
   156c8:	bf44      	itt	mi
   156ca:	f041 0120 	orrmi.w	r1, r1, #32
   156ce:	6021      	strmi	r1, [r4, #0]
   156d0:	b91b      	cbnz	r3, 156da <_printf_i+0x15e>
   156d2:	6822      	ldr	r2, [r4, #0]
   156d4:	f022 0220 	bic.w	r2, r2, #32
   156d8:	6022      	str	r2, [r4, #0]
   156da:	2210      	movs	r2, #16
   156dc:	e7b7      	b.n	1564e <_printf_i+0xd2>
   156de:	064d      	lsls	r5, r1, #25
   156e0:	bf48      	it	mi
   156e2:	b29b      	uxthmi	r3, r3
   156e4:	e7ef      	b.n	156c6 <_printf_i+0x14a>
   156e6:	4665      	mov	r5, ip
   156e8:	fbb3 f1f2 	udiv	r1, r3, r2
   156ec:	fb02 3311 	mls	r3, r2, r1, r3
   156f0:	5cc3      	ldrb	r3, [r0, r3]
   156f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
   156f6:	460b      	mov	r3, r1
   156f8:	2900      	cmp	r1, #0
   156fa:	d1f5      	bne.n	156e8 <_printf_i+0x16c>
   156fc:	e7b9      	b.n	15672 <_printf_i+0xf6>
   156fe:	6813      	ldr	r3, [r2, #0]
   15700:	6825      	ldr	r5, [r4, #0]
   15702:	6961      	ldr	r1, [r4, #20]
   15704:	1d18      	adds	r0, r3, #4
   15706:	6010      	str	r0, [r2, #0]
   15708:	0628      	lsls	r0, r5, #24
   1570a:	681b      	ldr	r3, [r3, #0]
   1570c:	d501      	bpl.n	15712 <_printf_i+0x196>
   1570e:	6019      	str	r1, [r3, #0]
   15710:	e002      	b.n	15718 <_printf_i+0x19c>
   15712:	066a      	lsls	r2, r5, #25
   15714:	d5fb      	bpl.n	1570e <_printf_i+0x192>
   15716:	8019      	strh	r1, [r3, #0]
   15718:	2300      	movs	r3, #0
   1571a:	6123      	str	r3, [r4, #16]
   1571c:	4665      	mov	r5, ip
   1571e:	e7b9      	b.n	15694 <_printf_i+0x118>
   15720:	6813      	ldr	r3, [r2, #0]
   15722:	1d19      	adds	r1, r3, #4
   15724:	6011      	str	r1, [r2, #0]
   15726:	681d      	ldr	r5, [r3, #0]
   15728:	6862      	ldr	r2, [r4, #4]
   1572a:	2100      	movs	r1, #0
   1572c:	4628      	mov	r0, r5
   1572e:	f002 fd3f 	bl	181b0 <memchr>
   15732:	b108      	cbz	r0, 15738 <_printf_i+0x1bc>
   15734:	1b40      	subs	r0, r0, r5
   15736:	6060      	str	r0, [r4, #4]
   15738:	6863      	ldr	r3, [r4, #4]
   1573a:	6123      	str	r3, [r4, #16]
   1573c:	2300      	movs	r3, #0
   1573e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   15742:	e7a7      	b.n	15694 <_printf_i+0x118>
   15744:	6923      	ldr	r3, [r4, #16]
   15746:	462a      	mov	r2, r5
   15748:	4639      	mov	r1, r7
   1574a:	4630      	mov	r0, r6
   1574c:	47c0      	blx	r8
   1574e:	3001      	adds	r0, #1
   15750:	d0aa      	beq.n	156a8 <_printf_i+0x12c>
   15752:	6823      	ldr	r3, [r4, #0]
   15754:	079b      	lsls	r3, r3, #30
   15756:	d413      	bmi.n	15780 <_printf_i+0x204>
   15758:	68e0      	ldr	r0, [r4, #12]
   1575a:	9b03      	ldr	r3, [sp, #12]
   1575c:	4298      	cmp	r0, r3
   1575e:	bfb8      	it	lt
   15760:	4618      	movlt	r0, r3
   15762:	e7a3      	b.n	156ac <_printf_i+0x130>
   15764:	2301      	movs	r3, #1
   15766:	464a      	mov	r2, r9
   15768:	4639      	mov	r1, r7
   1576a:	4630      	mov	r0, r6
   1576c:	47c0      	blx	r8
   1576e:	3001      	adds	r0, #1
   15770:	d09a      	beq.n	156a8 <_printf_i+0x12c>
   15772:	3501      	adds	r5, #1
   15774:	68e3      	ldr	r3, [r4, #12]
   15776:	9a03      	ldr	r2, [sp, #12]
   15778:	1a9b      	subs	r3, r3, r2
   1577a:	42ab      	cmp	r3, r5
   1577c:	dcf2      	bgt.n	15764 <_printf_i+0x1e8>
   1577e:	e7eb      	b.n	15758 <_printf_i+0x1dc>
   15780:	2500      	movs	r5, #0
   15782:	f104 0919 	add.w	r9, r4, #25
   15786:	e7f5      	b.n	15774 <_printf_i+0x1f8>
   15788:	2b00      	cmp	r3, #0
   1578a:	d1ac      	bne.n	156e6 <_printf_i+0x16a>
   1578c:	7803      	ldrb	r3, [r0, #0]
   1578e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   15792:	f104 0542 	add.w	r5, r4, #66	; 0x42
   15796:	e76c      	b.n	15672 <_printf_i+0xf6>
   15798:	000197aa 	.word	0x000197aa
   1579c:	000197bb 	.word	0x000197bb

000157a0 <_scanf_float>:
   157a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157a4:	469a      	mov	sl, r3
   157a6:	688b      	ldr	r3, [r1, #8]
   157a8:	4616      	mov	r6, r2
   157aa:	1e5a      	subs	r2, r3, #1
   157ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   157b0:	b087      	sub	sp, #28
   157b2:	bf83      	ittte	hi
   157b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
   157b8:	189b      	addhi	r3, r3, r2
   157ba:	9301      	strhi	r3, [sp, #4]
   157bc:	2300      	movls	r3, #0
   157be:	bf86      	itte	hi
   157c0:	f240 135d 	movwhi	r3, #349	; 0x15d
   157c4:	608b      	strhi	r3, [r1, #8]
   157c6:	9301      	strls	r3, [sp, #4]
   157c8:	680b      	ldr	r3, [r1, #0]
   157ca:	4688      	mov	r8, r1
   157cc:	f04f 0b00 	mov.w	fp, #0
   157d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
   157d4:	f848 3b1c 	str.w	r3, [r8], #28
   157d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
   157dc:	4607      	mov	r7, r0
   157de:	460c      	mov	r4, r1
   157e0:	4645      	mov	r5, r8
   157e2:	465a      	mov	r2, fp
   157e4:	46d9      	mov	r9, fp
   157e6:	f8cd b008 	str.w	fp, [sp, #8]
   157ea:	68a1      	ldr	r1, [r4, #8]
   157ec:	b181      	cbz	r1, 15810 <_scanf_float+0x70>
   157ee:	6833      	ldr	r3, [r6, #0]
   157f0:	781b      	ldrb	r3, [r3, #0]
   157f2:	2b49      	cmp	r3, #73	; 0x49
   157f4:	d071      	beq.n	158da <_scanf_float+0x13a>
   157f6:	d84d      	bhi.n	15894 <_scanf_float+0xf4>
   157f8:	2b39      	cmp	r3, #57	; 0x39
   157fa:	d840      	bhi.n	1587e <_scanf_float+0xde>
   157fc:	2b31      	cmp	r3, #49	; 0x31
   157fe:	f080 8088 	bcs.w	15912 <_scanf_float+0x172>
   15802:	2b2d      	cmp	r3, #45	; 0x2d
   15804:	f000 8090 	beq.w	15928 <_scanf_float+0x188>
   15808:	d815      	bhi.n	15836 <_scanf_float+0x96>
   1580a:	2b2b      	cmp	r3, #43	; 0x2b
   1580c:	f000 808c 	beq.w	15928 <_scanf_float+0x188>
   15810:	f1b9 0f00 	cmp.w	r9, #0
   15814:	d003      	beq.n	1581e <_scanf_float+0x7e>
   15816:	6823      	ldr	r3, [r4, #0]
   15818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1581c:	6023      	str	r3, [r4, #0]
   1581e:	3a01      	subs	r2, #1
   15820:	2a01      	cmp	r2, #1
   15822:	f200 80ea 	bhi.w	159fa <_scanf_float+0x25a>
   15826:	4545      	cmp	r5, r8
   15828:	f200 80dc 	bhi.w	159e4 <_scanf_float+0x244>
   1582c:	2601      	movs	r6, #1
   1582e:	4630      	mov	r0, r6
   15830:	b007      	add	sp, #28
   15832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15836:	2b2e      	cmp	r3, #46	; 0x2e
   15838:	f000 809f 	beq.w	1597a <_scanf_float+0x1da>
   1583c:	2b30      	cmp	r3, #48	; 0x30
   1583e:	d1e7      	bne.n	15810 <_scanf_float+0x70>
   15840:	6820      	ldr	r0, [r4, #0]
   15842:	f410 7f80 	tst.w	r0, #256	; 0x100
   15846:	d064      	beq.n	15912 <_scanf_float+0x172>
   15848:	9b01      	ldr	r3, [sp, #4]
   1584a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
   1584e:	6020      	str	r0, [r4, #0]
   15850:	f109 0901 	add.w	r9, r9, #1
   15854:	b11b      	cbz	r3, 1585e <_scanf_float+0xbe>
   15856:	3b01      	subs	r3, #1
   15858:	3101      	adds	r1, #1
   1585a:	9301      	str	r3, [sp, #4]
   1585c:	60a1      	str	r1, [r4, #8]
   1585e:	68a3      	ldr	r3, [r4, #8]
   15860:	3b01      	subs	r3, #1
   15862:	60a3      	str	r3, [r4, #8]
   15864:	6923      	ldr	r3, [r4, #16]
   15866:	3301      	adds	r3, #1
   15868:	6123      	str	r3, [r4, #16]
   1586a:	6873      	ldr	r3, [r6, #4]
   1586c:	3b01      	subs	r3, #1
   1586e:	2b00      	cmp	r3, #0
   15870:	6073      	str	r3, [r6, #4]
   15872:	f340 80ac 	ble.w	159ce <_scanf_float+0x22e>
   15876:	6833      	ldr	r3, [r6, #0]
   15878:	3301      	adds	r3, #1
   1587a:	6033      	str	r3, [r6, #0]
   1587c:	e7b5      	b.n	157ea <_scanf_float+0x4a>
   1587e:	2b45      	cmp	r3, #69	; 0x45
   15880:	f000 8085 	beq.w	1598e <_scanf_float+0x1ee>
   15884:	2b46      	cmp	r3, #70	; 0x46
   15886:	d06a      	beq.n	1595e <_scanf_float+0x1be>
   15888:	2b41      	cmp	r3, #65	; 0x41
   1588a:	d1c1      	bne.n	15810 <_scanf_float+0x70>
   1588c:	2a01      	cmp	r2, #1
   1588e:	d1bf      	bne.n	15810 <_scanf_float+0x70>
   15890:	2202      	movs	r2, #2
   15892:	e046      	b.n	15922 <_scanf_float+0x182>
   15894:	2b65      	cmp	r3, #101	; 0x65
   15896:	d07a      	beq.n	1598e <_scanf_float+0x1ee>
   15898:	d818      	bhi.n	158cc <_scanf_float+0x12c>
   1589a:	2b54      	cmp	r3, #84	; 0x54
   1589c:	d066      	beq.n	1596c <_scanf_float+0x1cc>
   1589e:	d811      	bhi.n	158c4 <_scanf_float+0x124>
   158a0:	2b4e      	cmp	r3, #78	; 0x4e
   158a2:	d1b5      	bne.n	15810 <_scanf_float+0x70>
   158a4:	2a00      	cmp	r2, #0
   158a6:	d146      	bne.n	15936 <_scanf_float+0x196>
   158a8:	f1b9 0f00 	cmp.w	r9, #0
   158ac:	d145      	bne.n	1593a <_scanf_float+0x19a>
   158ae:	6821      	ldr	r1, [r4, #0]
   158b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
   158b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
   158b8:	d13f      	bne.n	1593a <_scanf_float+0x19a>
   158ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
   158be:	6021      	str	r1, [r4, #0]
   158c0:	2201      	movs	r2, #1
   158c2:	e02e      	b.n	15922 <_scanf_float+0x182>
   158c4:	2b59      	cmp	r3, #89	; 0x59
   158c6:	d01e      	beq.n	15906 <_scanf_float+0x166>
   158c8:	2b61      	cmp	r3, #97	; 0x61
   158ca:	e7de      	b.n	1588a <_scanf_float+0xea>
   158cc:	2b6e      	cmp	r3, #110	; 0x6e
   158ce:	d0e9      	beq.n	158a4 <_scanf_float+0x104>
   158d0:	d815      	bhi.n	158fe <_scanf_float+0x15e>
   158d2:	2b66      	cmp	r3, #102	; 0x66
   158d4:	d043      	beq.n	1595e <_scanf_float+0x1be>
   158d6:	2b69      	cmp	r3, #105	; 0x69
   158d8:	d19a      	bne.n	15810 <_scanf_float+0x70>
   158da:	f1bb 0f00 	cmp.w	fp, #0
   158de:	d138      	bne.n	15952 <_scanf_float+0x1b2>
   158e0:	f1b9 0f00 	cmp.w	r9, #0
   158e4:	d197      	bne.n	15816 <_scanf_float+0x76>
   158e6:	6821      	ldr	r1, [r4, #0]
   158e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
   158ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
   158f0:	d195      	bne.n	1581e <_scanf_float+0x7e>
   158f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
   158f6:	6021      	str	r1, [r4, #0]
   158f8:	f04f 0b01 	mov.w	fp, #1
   158fc:	e011      	b.n	15922 <_scanf_float+0x182>
   158fe:	2b74      	cmp	r3, #116	; 0x74
   15900:	d034      	beq.n	1596c <_scanf_float+0x1cc>
   15902:	2b79      	cmp	r3, #121	; 0x79
   15904:	d184      	bne.n	15810 <_scanf_float+0x70>
   15906:	f1bb 0f07 	cmp.w	fp, #7
   1590a:	d181      	bne.n	15810 <_scanf_float+0x70>
   1590c:	f04f 0b08 	mov.w	fp, #8
   15910:	e007      	b.n	15922 <_scanf_float+0x182>
   15912:	eb12 0f0b 	cmn.w	r2, fp
   15916:	f47f af7b 	bne.w	15810 <_scanf_float+0x70>
   1591a:	6821      	ldr	r1, [r4, #0]
   1591c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
   15920:	6021      	str	r1, [r4, #0]
   15922:	702b      	strb	r3, [r5, #0]
   15924:	3501      	adds	r5, #1
   15926:	e79a      	b.n	1585e <_scanf_float+0xbe>
   15928:	6821      	ldr	r1, [r4, #0]
   1592a:	0608      	lsls	r0, r1, #24
   1592c:	f57f af70 	bpl.w	15810 <_scanf_float+0x70>
   15930:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   15934:	e7f4      	b.n	15920 <_scanf_float+0x180>
   15936:	2a02      	cmp	r2, #2
   15938:	d047      	beq.n	159ca <_scanf_float+0x22a>
   1593a:	f1bb 0f01 	cmp.w	fp, #1
   1593e:	d003      	beq.n	15948 <_scanf_float+0x1a8>
   15940:	f1bb 0f04 	cmp.w	fp, #4
   15944:	f47f af64 	bne.w	15810 <_scanf_float+0x70>
   15948:	f10b 0b01 	add.w	fp, fp, #1
   1594c:	fa5f fb8b 	uxtb.w	fp, fp
   15950:	e7e7      	b.n	15922 <_scanf_float+0x182>
   15952:	f1bb 0f03 	cmp.w	fp, #3
   15956:	d0f7      	beq.n	15948 <_scanf_float+0x1a8>
   15958:	f1bb 0f05 	cmp.w	fp, #5
   1595c:	e7f2      	b.n	15944 <_scanf_float+0x1a4>
   1595e:	f1bb 0f02 	cmp.w	fp, #2
   15962:	f47f af55 	bne.w	15810 <_scanf_float+0x70>
   15966:	f04f 0b03 	mov.w	fp, #3
   1596a:	e7da      	b.n	15922 <_scanf_float+0x182>
   1596c:	f1bb 0f06 	cmp.w	fp, #6
   15970:	f47f af4e 	bne.w	15810 <_scanf_float+0x70>
   15974:	f04f 0b07 	mov.w	fp, #7
   15978:	e7d3      	b.n	15922 <_scanf_float+0x182>
   1597a:	6821      	ldr	r1, [r4, #0]
   1597c:	0588      	lsls	r0, r1, #22
   1597e:	f57f af47 	bpl.w	15810 <_scanf_float+0x70>
   15982:	f421 7120 	bic.w	r1, r1, #640	; 0x280
   15986:	6021      	str	r1, [r4, #0]
   15988:	f8cd 9008 	str.w	r9, [sp, #8]
   1598c:	e7c9      	b.n	15922 <_scanf_float+0x182>
   1598e:	6821      	ldr	r1, [r4, #0]
   15990:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
   15994:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   15998:	d006      	beq.n	159a8 <_scanf_float+0x208>
   1599a:	0548      	lsls	r0, r1, #21
   1599c:	f57f af38 	bpl.w	15810 <_scanf_float+0x70>
   159a0:	f1b9 0f00 	cmp.w	r9, #0
   159a4:	f43f af3b 	beq.w	1581e <_scanf_float+0x7e>
   159a8:	0588      	lsls	r0, r1, #22
   159aa:	bf58      	it	pl
   159ac:	9802      	ldrpl	r0, [sp, #8]
   159ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
   159b2:	bf58      	it	pl
   159b4:	eba9 0000 	subpl.w	r0, r9, r0
   159b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
   159bc:	bf58      	it	pl
   159be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
   159c2:	6021      	str	r1, [r4, #0]
   159c4:	f04f 0900 	mov.w	r9, #0
   159c8:	e7ab      	b.n	15922 <_scanf_float+0x182>
   159ca:	2203      	movs	r2, #3
   159cc:	e7a9      	b.n	15922 <_scanf_float+0x182>
   159ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   159d2:	9205      	str	r2, [sp, #20]
   159d4:	4631      	mov	r1, r6
   159d6:	4638      	mov	r0, r7
   159d8:	4798      	blx	r3
   159da:	9a05      	ldr	r2, [sp, #20]
   159dc:	2800      	cmp	r0, #0
   159de:	f43f af04 	beq.w	157ea <_scanf_float+0x4a>
   159e2:	e715      	b.n	15810 <_scanf_float+0x70>
   159e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   159e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   159ec:	4632      	mov	r2, r6
   159ee:	4638      	mov	r0, r7
   159f0:	4798      	blx	r3
   159f2:	6923      	ldr	r3, [r4, #16]
   159f4:	3b01      	subs	r3, #1
   159f6:	6123      	str	r3, [r4, #16]
   159f8:	e715      	b.n	15826 <_scanf_float+0x86>
   159fa:	f10b 33ff 	add.w	r3, fp, #4294967295
   159fe:	2b06      	cmp	r3, #6
   15a00:	d80a      	bhi.n	15a18 <_scanf_float+0x278>
   15a02:	f1bb 0f02 	cmp.w	fp, #2
   15a06:	d966      	bls.n	15ad6 <_scanf_float+0x336>
   15a08:	f1ab 0b03 	sub.w	fp, fp, #3
   15a0c:	fa5f fb8b 	uxtb.w	fp, fp
   15a10:	eba5 0b0b 	sub.w	fp, r5, fp
   15a14:	455d      	cmp	r5, fp
   15a16:	d149      	bne.n	15aac <_scanf_float+0x30c>
   15a18:	6823      	ldr	r3, [r4, #0]
   15a1a:	05da      	lsls	r2, r3, #23
   15a1c:	d51f      	bpl.n	15a5e <_scanf_float+0x2be>
   15a1e:	055b      	lsls	r3, r3, #21
   15a20:	d466      	bmi.n	15af0 <_scanf_float+0x350>
   15a22:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   15a26:	6923      	ldr	r3, [r4, #16]
   15a28:	2965      	cmp	r1, #101	; 0x65
   15a2a:	f103 33ff 	add.w	r3, r3, #4294967295
   15a2e:	f105 3bff 	add.w	fp, r5, #4294967295
   15a32:	6123      	str	r3, [r4, #16]
   15a34:	d00d      	beq.n	15a52 <_scanf_float+0x2b2>
   15a36:	2945      	cmp	r1, #69	; 0x45
   15a38:	d00b      	beq.n	15a52 <_scanf_float+0x2b2>
   15a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   15a3e:	4632      	mov	r2, r6
   15a40:	4638      	mov	r0, r7
   15a42:	4798      	blx	r3
   15a44:	6923      	ldr	r3, [r4, #16]
   15a46:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   15a4a:	3b01      	subs	r3, #1
   15a4c:	f1a5 0b02 	sub.w	fp, r5, #2
   15a50:	6123      	str	r3, [r4, #16]
   15a52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   15a56:	4632      	mov	r2, r6
   15a58:	4638      	mov	r0, r7
   15a5a:	4798      	blx	r3
   15a5c:	465d      	mov	r5, fp
   15a5e:	6826      	ldr	r6, [r4, #0]
   15a60:	f016 0610 	ands.w	r6, r6, #16
   15a64:	d170      	bne.n	15b48 <_scanf_float+0x3a8>
   15a66:	702e      	strb	r6, [r5, #0]
   15a68:	6823      	ldr	r3, [r4, #0]
   15a6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   15a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   15a72:	d140      	bne.n	15af6 <_scanf_float+0x356>
   15a74:	9b02      	ldr	r3, [sp, #8]
   15a76:	eba9 0303 	sub.w	r3, r9, r3
   15a7a:	425a      	negs	r2, r3
   15a7c:	2b00      	cmp	r3, #0
   15a7e:	d147      	bne.n	15b10 <_scanf_float+0x370>
   15a80:	2200      	movs	r2, #0
   15a82:	4638      	mov	r0, r7
   15a84:	4641      	mov	r1, r8
   15a86:	f000 ff2b 	bl	168e0 <_strtod_r>
   15a8a:	6820      	ldr	r0, [r4, #0]
   15a8c:	f8da 3000 	ldr.w	r3, [sl]
   15a90:	f010 0f02 	tst.w	r0, #2
   15a94:	f103 0204 	add.w	r2, r3, #4
   15a98:	f8ca 2000 	str.w	r2, [sl]
   15a9c:	d043      	beq.n	15b26 <_scanf_float+0x386>
   15a9e:	681b      	ldr	r3, [r3, #0]
   15aa0:	ed83 0b00 	vstr	d0, [r3]
   15aa4:	68e3      	ldr	r3, [r4, #12]
   15aa6:	3301      	adds	r3, #1
   15aa8:	60e3      	str	r3, [r4, #12]
   15aaa:	e6c0      	b.n	1582e <_scanf_float+0x8e>
   15aac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   15ab0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   15ab4:	4632      	mov	r2, r6
   15ab6:	4638      	mov	r0, r7
   15ab8:	4798      	blx	r3
   15aba:	6923      	ldr	r3, [r4, #16]
   15abc:	3b01      	subs	r3, #1
   15abe:	6123      	str	r3, [r4, #16]
   15ac0:	e7a8      	b.n	15a14 <_scanf_float+0x274>
   15ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   15ac6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   15aca:	4632      	mov	r2, r6
   15acc:	4638      	mov	r0, r7
   15ace:	4798      	blx	r3
   15ad0:	6923      	ldr	r3, [r4, #16]
   15ad2:	3b01      	subs	r3, #1
   15ad4:	6123      	str	r3, [r4, #16]
   15ad6:	4545      	cmp	r5, r8
   15ad8:	d8f3      	bhi.n	15ac2 <_scanf_float+0x322>
   15ada:	e6a7      	b.n	1582c <_scanf_float+0x8c>
   15adc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   15ae0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   15ae4:	4632      	mov	r2, r6
   15ae6:	4638      	mov	r0, r7
   15ae8:	4798      	blx	r3
   15aea:	6923      	ldr	r3, [r4, #16]
   15aec:	3b01      	subs	r3, #1
   15aee:	6123      	str	r3, [r4, #16]
   15af0:	4545      	cmp	r5, r8
   15af2:	d8f3      	bhi.n	15adc <_scanf_float+0x33c>
   15af4:	e69a      	b.n	1582c <_scanf_float+0x8c>
   15af6:	9b03      	ldr	r3, [sp, #12]
   15af8:	2b00      	cmp	r3, #0
   15afa:	d0c1      	beq.n	15a80 <_scanf_float+0x2e0>
   15afc:	9904      	ldr	r1, [sp, #16]
   15afe:	230a      	movs	r3, #10
   15b00:	4632      	mov	r2, r6
   15b02:	3101      	adds	r1, #1
   15b04:	4638      	mov	r0, r7
   15b06:	f000 ff77 	bl	169f8 <_strtol_r>
   15b0a:	9b03      	ldr	r3, [sp, #12]
   15b0c:	9d04      	ldr	r5, [sp, #16]
   15b0e:	1ac2      	subs	r2, r0, r3
   15b10:	f204 136f 	addw	r3, r4, #367	; 0x16f
   15b14:	429d      	cmp	r5, r3
   15b16:	bf28      	it	cs
   15b18:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
   15b1c:	490b      	ldr	r1, [pc, #44]	; (15b4c <_scanf_float+0x3ac>)
   15b1e:	4628      	mov	r0, r5
   15b20:	f000 f8ec 	bl	15cfc <siprintf>
   15b24:	e7ac      	b.n	15a80 <_scanf_float+0x2e0>
   15b26:	f010 0004 	ands.w	r0, r0, #4
   15b2a:	d1b8      	bne.n	15a9e <_scanf_float+0x2fe>
   15b2c:	eeb4 0b40 	vcmp.f64	d0, d0
   15b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15b34:	681d      	ldr	r5, [r3, #0]
   15b36:	d704      	bvc.n	15b42 <_scanf_float+0x3a2>
   15b38:	f000 f896 	bl	15c68 <nanf>
   15b3c:	ed85 0a00 	vstr	s0, [r5]
   15b40:	e7b0      	b.n	15aa4 <_scanf_float+0x304>
   15b42:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   15b46:	e7f9      	b.n	15b3c <_scanf_float+0x39c>
   15b48:	2600      	movs	r6, #0
   15b4a:	e670      	b.n	1582e <_scanf_float+0x8e>
   15b4c:	000197cc 	.word	0x000197cc

00015b50 <iprintf>:
   15b50:	b40f      	push	{r0, r1, r2, r3}
   15b52:	4b0a      	ldr	r3, [pc, #40]	; (15b7c <iprintf+0x2c>)
   15b54:	b513      	push	{r0, r1, r4, lr}
   15b56:	681c      	ldr	r4, [r3, #0]
   15b58:	b124      	cbz	r4, 15b64 <iprintf+0x14>
   15b5a:	69a3      	ldr	r3, [r4, #24]
   15b5c:	b913      	cbnz	r3, 15b64 <iprintf+0x14>
   15b5e:	4620      	mov	r0, r4
   15b60:	f001 fee6 	bl	17930 <__sinit>
   15b64:	ab05      	add	r3, sp, #20
   15b66:	9a04      	ldr	r2, [sp, #16]
   15b68:	68a1      	ldr	r1, [r4, #8]
   15b6a:	9301      	str	r3, [sp, #4]
   15b6c:	4620      	mov	r0, r4
   15b6e:	f003 f8ed 	bl	18d4c <_vfiprintf_r>
   15b72:	b002      	add	sp, #8
   15b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15b78:	b004      	add	sp, #16
   15b7a:	4770      	bx	lr
   15b7c:	00029e28 	.word	0x00029e28

00015b80 <_puts_r>:
   15b80:	b570      	push	{r4, r5, r6, lr}
   15b82:	460e      	mov	r6, r1
   15b84:	4605      	mov	r5, r0
   15b86:	b118      	cbz	r0, 15b90 <_puts_r+0x10>
   15b88:	6983      	ldr	r3, [r0, #24]
   15b8a:	b90b      	cbnz	r3, 15b90 <_puts_r+0x10>
   15b8c:	f001 fed0 	bl	17930 <__sinit>
   15b90:	69ab      	ldr	r3, [r5, #24]
   15b92:	68ac      	ldr	r4, [r5, #8]
   15b94:	b913      	cbnz	r3, 15b9c <_puts_r+0x1c>
   15b96:	4628      	mov	r0, r5
   15b98:	f001 feca 	bl	17930 <__sinit>
   15b9c:	4b23      	ldr	r3, [pc, #140]	; (15c2c <_puts_r+0xac>)
   15b9e:	429c      	cmp	r4, r3
   15ba0:	d117      	bne.n	15bd2 <_puts_r+0x52>
   15ba2:	686c      	ldr	r4, [r5, #4]
   15ba4:	89a3      	ldrh	r3, [r4, #12]
   15ba6:	071b      	lsls	r3, r3, #28
   15ba8:	d51d      	bpl.n	15be6 <_puts_r+0x66>
   15baa:	6923      	ldr	r3, [r4, #16]
   15bac:	b1db      	cbz	r3, 15be6 <_puts_r+0x66>
   15bae:	3e01      	subs	r6, #1
   15bb0:	68a3      	ldr	r3, [r4, #8]
   15bb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   15bb6:	3b01      	subs	r3, #1
   15bb8:	60a3      	str	r3, [r4, #8]
   15bba:	b9e9      	cbnz	r1, 15bf8 <_puts_r+0x78>
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	da2e      	bge.n	15c1e <_puts_r+0x9e>
   15bc0:	4622      	mov	r2, r4
   15bc2:	210a      	movs	r1, #10
   15bc4:	4628      	mov	r0, r5
   15bc6:	f000 ff29 	bl	16a1c <__swbuf_r>
   15bca:	3001      	adds	r0, #1
   15bcc:	d011      	beq.n	15bf2 <_puts_r+0x72>
   15bce:	200a      	movs	r0, #10
   15bd0:	e011      	b.n	15bf6 <_puts_r+0x76>
   15bd2:	4b17      	ldr	r3, [pc, #92]	; (15c30 <_puts_r+0xb0>)
   15bd4:	429c      	cmp	r4, r3
   15bd6:	d101      	bne.n	15bdc <_puts_r+0x5c>
   15bd8:	68ac      	ldr	r4, [r5, #8]
   15bda:	e7e3      	b.n	15ba4 <_puts_r+0x24>
   15bdc:	4b15      	ldr	r3, [pc, #84]	; (15c34 <_puts_r+0xb4>)
   15bde:	429c      	cmp	r4, r3
   15be0:	bf08      	it	eq
   15be2:	68ec      	ldreq	r4, [r5, #12]
   15be4:	e7de      	b.n	15ba4 <_puts_r+0x24>
   15be6:	4621      	mov	r1, r4
   15be8:	4628      	mov	r0, r5
   15bea:	f000 ff69 	bl	16ac0 <__swsetup_r>
   15bee:	2800      	cmp	r0, #0
   15bf0:	d0dd      	beq.n	15bae <_puts_r+0x2e>
   15bf2:	f04f 30ff 	mov.w	r0, #4294967295
   15bf6:	bd70      	pop	{r4, r5, r6, pc}
   15bf8:	2b00      	cmp	r3, #0
   15bfa:	da04      	bge.n	15c06 <_puts_r+0x86>
   15bfc:	69a2      	ldr	r2, [r4, #24]
   15bfe:	429a      	cmp	r2, r3
   15c00:	dc06      	bgt.n	15c10 <_puts_r+0x90>
   15c02:	290a      	cmp	r1, #10
   15c04:	d004      	beq.n	15c10 <_puts_r+0x90>
   15c06:	6823      	ldr	r3, [r4, #0]
   15c08:	1c5a      	adds	r2, r3, #1
   15c0a:	6022      	str	r2, [r4, #0]
   15c0c:	7019      	strb	r1, [r3, #0]
   15c0e:	e7cf      	b.n	15bb0 <_puts_r+0x30>
   15c10:	4622      	mov	r2, r4
   15c12:	4628      	mov	r0, r5
   15c14:	f000 ff02 	bl	16a1c <__swbuf_r>
   15c18:	3001      	adds	r0, #1
   15c1a:	d1c9      	bne.n	15bb0 <_puts_r+0x30>
   15c1c:	e7e9      	b.n	15bf2 <_puts_r+0x72>
   15c1e:	6823      	ldr	r3, [r4, #0]
   15c20:	200a      	movs	r0, #10
   15c22:	1c5a      	adds	r2, r3, #1
   15c24:	6022      	str	r2, [r4, #0]
   15c26:	7018      	strb	r0, [r3, #0]
   15c28:	e7e5      	b.n	15bf6 <_puts_r+0x76>
   15c2a:	bf00      	nop
   15c2c:	00019858 	.word	0x00019858
   15c30:	00019878 	.word	0x00019878
   15c34:	00019838 	.word	0x00019838

00015c38 <puts>:
   15c38:	4b02      	ldr	r3, [pc, #8]	; (15c44 <puts+0xc>)
   15c3a:	4601      	mov	r1, r0
   15c3c:	6818      	ldr	r0, [r3, #0]
   15c3e:	f7ff bf9f 	b.w	15b80 <_puts_r>
   15c42:	bf00      	nop
   15c44:	00029e28 	.word	0x00029e28

00015c48 <_sbrk_r>:
   15c48:	b538      	push	{r3, r4, r5, lr}
   15c4a:	4c06      	ldr	r4, [pc, #24]	; (15c64 <_sbrk_r+0x1c>)
   15c4c:	2300      	movs	r3, #0
   15c4e:	4605      	mov	r5, r0
   15c50:	4608      	mov	r0, r1
   15c52:	6023      	str	r3, [r4, #0]
   15c54:	f003 fc5a 	bl	1950c <_sbrk>
   15c58:	1c43      	adds	r3, r0, #1
   15c5a:	d102      	bne.n	15c62 <_sbrk_r+0x1a>
   15c5c:	6823      	ldr	r3, [r4, #0]
   15c5e:	b103      	cbz	r3, 15c62 <_sbrk_r+0x1a>
   15c60:	602b      	str	r3, [r5, #0]
   15c62:	bd38      	pop	{r3, r4, r5, pc}
   15c64:	000388d4 	.word	0x000388d4

00015c68 <nanf>:
   15c68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 15c70 <nanf+0x8>
   15c6c:	4770      	bx	lr
   15c6e:	bf00      	nop
   15c70:	7fc00000 	.word	0x7fc00000

00015c74 <_raise_r>:
   15c74:	291f      	cmp	r1, #31
   15c76:	b538      	push	{r3, r4, r5, lr}
   15c78:	4604      	mov	r4, r0
   15c7a:	460d      	mov	r5, r1
   15c7c:	d904      	bls.n	15c88 <_raise_r+0x14>
   15c7e:	2316      	movs	r3, #22
   15c80:	6003      	str	r3, [r0, #0]
   15c82:	f04f 30ff 	mov.w	r0, #4294967295
   15c86:	bd38      	pop	{r3, r4, r5, pc}
   15c88:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15c8a:	b112      	cbz	r2, 15c92 <_raise_r+0x1e>
   15c8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   15c90:	b94b      	cbnz	r3, 15ca6 <_raise_r+0x32>
   15c92:	4620      	mov	r0, r4
   15c94:	f000 f830 	bl	15cf8 <_getpid_r>
   15c98:	462a      	mov	r2, r5
   15c9a:	4601      	mov	r1, r0
   15c9c:	4620      	mov	r0, r4
   15c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15ca2:	f000 b817 	b.w	15cd4 <_kill_r>
   15ca6:	2b01      	cmp	r3, #1
   15ca8:	d00a      	beq.n	15cc0 <_raise_r+0x4c>
   15caa:	1c59      	adds	r1, r3, #1
   15cac:	d103      	bne.n	15cb6 <_raise_r+0x42>
   15cae:	2316      	movs	r3, #22
   15cb0:	6003      	str	r3, [r0, #0]
   15cb2:	2001      	movs	r0, #1
   15cb4:	e7e7      	b.n	15c86 <_raise_r+0x12>
   15cb6:	2400      	movs	r4, #0
   15cb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   15cbc:	4628      	mov	r0, r5
   15cbe:	4798      	blx	r3
   15cc0:	2000      	movs	r0, #0
   15cc2:	e7e0      	b.n	15c86 <_raise_r+0x12>

00015cc4 <raise>:
   15cc4:	4b02      	ldr	r3, [pc, #8]	; (15cd0 <raise+0xc>)
   15cc6:	4601      	mov	r1, r0
   15cc8:	6818      	ldr	r0, [r3, #0]
   15cca:	f7ff bfd3 	b.w	15c74 <_raise_r>
   15cce:	bf00      	nop
   15cd0:	00029e28 	.word	0x00029e28

00015cd4 <_kill_r>:
   15cd4:	b538      	push	{r3, r4, r5, lr}
   15cd6:	4c07      	ldr	r4, [pc, #28]	; (15cf4 <_kill_r+0x20>)
   15cd8:	2300      	movs	r3, #0
   15cda:	4605      	mov	r5, r0
   15cdc:	4608      	mov	r0, r1
   15cde:	4611      	mov	r1, r2
   15ce0:	6023      	str	r3, [r4, #0]
   15ce2:	f003 fbfb 	bl	194dc <_kill>
   15ce6:	1c43      	adds	r3, r0, #1
   15ce8:	d102      	bne.n	15cf0 <_kill_r+0x1c>
   15cea:	6823      	ldr	r3, [r4, #0]
   15cec:	b103      	cbz	r3, 15cf0 <_kill_r+0x1c>
   15cee:	602b      	str	r3, [r5, #0]
   15cf0:	bd38      	pop	{r3, r4, r5, pc}
   15cf2:	bf00      	nop
   15cf4:	000388d4 	.word	0x000388d4

00015cf8 <_getpid_r>:
   15cf8:	f003 bbe0 	b.w	194bc <_getpid>

00015cfc <siprintf>:
   15cfc:	b40e      	push	{r1, r2, r3}
   15cfe:	b500      	push	{lr}
   15d00:	b09c      	sub	sp, #112	; 0x70
   15d02:	ab1d      	add	r3, sp, #116	; 0x74
   15d04:	9002      	str	r0, [sp, #8]
   15d06:	9006      	str	r0, [sp, #24]
   15d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15d0c:	4809      	ldr	r0, [pc, #36]	; (15d34 <siprintf+0x38>)
   15d0e:	9107      	str	r1, [sp, #28]
   15d10:	9104      	str	r1, [sp, #16]
   15d12:	4909      	ldr	r1, [pc, #36]	; (15d38 <siprintf+0x3c>)
   15d14:	f853 2b04 	ldr.w	r2, [r3], #4
   15d18:	9105      	str	r1, [sp, #20]
   15d1a:	6800      	ldr	r0, [r0, #0]
   15d1c:	9301      	str	r3, [sp, #4]
   15d1e:	a902      	add	r1, sp, #8
   15d20:	f002 fef2 	bl	18b08 <_svfiprintf_r>
   15d24:	9b02      	ldr	r3, [sp, #8]
   15d26:	2200      	movs	r2, #0
   15d28:	701a      	strb	r2, [r3, #0]
   15d2a:	b01c      	add	sp, #112	; 0x70
   15d2c:	f85d eb04 	ldr.w	lr, [sp], #4
   15d30:	b003      	add	sp, #12
   15d32:	4770      	bx	lr
   15d34:	00029e28 	.word	0x00029e28
   15d38:	ffff0208 	.word	0xffff0208

00015d3c <strlen>:
   15d3c:	4603      	mov	r3, r0
   15d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
   15d42:	2a00      	cmp	r2, #0
   15d44:	d1fb      	bne.n	15d3e <strlen+0x2>
   15d46:	1a18      	subs	r0, r3, r0
   15d48:	3801      	subs	r0, #1
   15d4a:	4770      	bx	lr
   15d4c:	0000      	movs	r0, r0
	...

00015d50 <_strtod_l>:
   15d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d54:	ed2d 8b0c 	vpush	{d8-d13}
   15d58:	4698      	mov	r8, r3
   15d5a:	b09d      	sub	sp, #116	; 0x74
   15d5c:	2300      	movs	r3, #0
   15d5e:	4604      	mov	r4, r0
   15d60:	4640      	mov	r0, r8
   15d62:	460e      	mov	r6, r1
   15d64:	9214      	str	r2, [sp, #80]	; 0x50
   15d66:	9318      	str	r3, [sp, #96]	; 0x60
   15d68:	f002 f995 	bl	18096 <__localeconv_l>
   15d6c:	4681      	mov	r9, r0
   15d6e:	6800      	ldr	r0, [r0, #0]
   15d70:	f7ff ffe4 	bl	15d3c <strlen>
   15d74:	f04f 0a00 	mov.w	sl, #0
   15d78:	4607      	mov	r7, r0
   15d7a:	f04f 0b00 	mov.w	fp, #0
   15d7e:	9617      	str	r6, [sp, #92]	; 0x5c
   15d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15d82:	781a      	ldrb	r2, [r3, #0]
   15d84:	2a0d      	cmp	r2, #13
   15d86:	d834      	bhi.n	15df2 <_strtod_l+0xa2>
   15d88:	2a09      	cmp	r2, #9
   15d8a:	d238      	bcs.n	15dfe <_strtod_l+0xae>
   15d8c:	2a00      	cmp	r2, #0
   15d8e:	d040      	beq.n	15e12 <_strtod_l+0xc2>
   15d90:	2300      	movs	r3, #0
   15d92:	930d      	str	r3, [sp, #52]	; 0x34
   15d94:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   15d96:	782b      	ldrb	r3, [r5, #0]
   15d98:	2b30      	cmp	r3, #48	; 0x30
   15d9a:	f040 80b3 	bne.w	15f04 <_strtod_l+0x1b4>
   15d9e:	786b      	ldrb	r3, [r5, #1]
   15da0:	2b58      	cmp	r3, #88	; 0x58
   15da2:	d001      	beq.n	15da8 <_strtod_l+0x58>
   15da4:	2b78      	cmp	r3, #120	; 0x78
   15da6:	d169      	bne.n	15e7c <_strtod_l+0x12c>
   15da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15daa:	9301      	str	r3, [sp, #4]
   15dac:	ab18      	add	r3, sp, #96	; 0x60
   15dae:	9300      	str	r3, [sp, #0]
   15db0:	f8cd 8008 	str.w	r8, [sp, #8]
   15db4:	ab19      	add	r3, sp, #100	; 0x64
   15db6:	4a8f      	ldr	r2, [pc, #572]	; (15ff4 <_strtod_l+0x2a4>)
   15db8:	a917      	add	r1, sp, #92	; 0x5c
   15dba:	4620      	mov	r0, r4
   15dbc:	f001 fe91 	bl	17ae2 <__gethex>
   15dc0:	f010 0607 	ands.w	r6, r0, #7
   15dc4:	4607      	mov	r7, r0
   15dc6:	d005      	beq.n	15dd4 <_strtod_l+0x84>
   15dc8:	2e06      	cmp	r6, #6
   15dca:	d12c      	bne.n	15e26 <_strtod_l+0xd6>
   15dcc:	3501      	adds	r5, #1
   15dce:	2300      	movs	r3, #0
   15dd0:	9517      	str	r5, [sp, #92]	; 0x5c
   15dd2:	930d      	str	r3, [sp, #52]	; 0x34
   15dd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15dd6:	2b00      	cmp	r3, #0
   15dd8:	f040 855e 	bne.w	16898 <_strtod_l+0xb48>
   15ddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15dde:	b1eb      	cbz	r3, 15e1c <_strtod_l+0xcc>
   15de0:	ec4b ab17 	vmov	d7, sl, fp
   15de4:	eeb1 0b47 	vneg.f64	d0, d7
   15de8:	b01d      	add	sp, #116	; 0x74
   15dea:	ecbd 8b0c 	vpop	{d8-d13}
   15dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15df2:	2a2b      	cmp	r2, #43	; 0x2b
   15df4:	d015      	beq.n	15e22 <_strtod_l+0xd2>
   15df6:	2a2d      	cmp	r2, #45	; 0x2d
   15df8:	d004      	beq.n	15e04 <_strtod_l+0xb4>
   15dfa:	2a20      	cmp	r2, #32
   15dfc:	d1c8      	bne.n	15d90 <_strtod_l+0x40>
   15dfe:	3301      	adds	r3, #1
   15e00:	9317      	str	r3, [sp, #92]	; 0x5c
   15e02:	e7bd      	b.n	15d80 <_strtod_l+0x30>
   15e04:	2201      	movs	r2, #1
   15e06:	920d      	str	r2, [sp, #52]	; 0x34
   15e08:	1c5a      	adds	r2, r3, #1
   15e0a:	9217      	str	r2, [sp, #92]	; 0x5c
   15e0c:	785b      	ldrb	r3, [r3, #1]
   15e0e:	2b00      	cmp	r3, #0
   15e10:	d1c0      	bne.n	15d94 <_strtod_l+0x44>
   15e12:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15e14:	9617      	str	r6, [sp, #92]	; 0x5c
   15e16:	2b00      	cmp	r3, #0
   15e18:	f040 853c 	bne.w	16894 <_strtod_l+0xb44>
   15e1c:	ec4b ab10 	vmov	d0, sl, fp
   15e20:	e7e2      	b.n	15de8 <_strtod_l+0x98>
   15e22:	2200      	movs	r2, #0
   15e24:	e7ef      	b.n	15e06 <_strtod_l+0xb6>
   15e26:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15e28:	b13a      	cbz	r2, 15e3a <_strtod_l+0xea>
   15e2a:	2135      	movs	r1, #53	; 0x35
   15e2c:	a81a      	add	r0, sp, #104	; 0x68
   15e2e:	f002 fdd6 	bl	189de <__copybits>
   15e32:	9918      	ldr	r1, [sp, #96]	; 0x60
   15e34:	4620      	mov	r0, r4
   15e36:	f002 fa41 	bl	182bc <_Bfree>
   15e3a:	3e01      	subs	r6, #1
   15e3c:	2e04      	cmp	r6, #4
   15e3e:	d806      	bhi.n	15e4e <_strtod_l+0xfe>
   15e40:	e8df f006 	tbb	[pc, r6]
   15e44:	1714030a 	.word	0x1714030a
   15e48:	0a          	.byte	0x0a
   15e49:	00          	.byte	0x00
   15e4a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   15e4e:	073b      	lsls	r3, r7, #28
   15e50:	d5c0      	bpl.n	15dd4 <_strtod_l+0x84>
   15e52:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   15e56:	e7bd      	b.n	15dd4 <_strtod_l+0x84>
   15e58:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   15e5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   15e5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15e62:	f202 4233 	addw	r2, r2, #1075	; 0x433
   15e66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   15e6a:	e7f0      	b.n	15e4e <_strtod_l+0xfe>
   15e6c:	f8df b188 	ldr.w	fp, [pc, #392]	; 15ff8 <_strtod_l+0x2a8>
   15e70:	e7ed      	b.n	15e4e <_strtod_l+0xfe>
   15e72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   15e76:	f04f 3aff 	mov.w	sl, #4294967295
   15e7a:	e7e8      	b.n	15e4e <_strtod_l+0xfe>
   15e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15e7e:	1c5a      	adds	r2, r3, #1
   15e80:	9217      	str	r2, [sp, #92]	; 0x5c
   15e82:	785b      	ldrb	r3, [r3, #1]
   15e84:	2b30      	cmp	r3, #48	; 0x30
   15e86:	d0f9      	beq.n	15e7c <_strtod_l+0x12c>
   15e88:	2b00      	cmp	r3, #0
   15e8a:	d0a3      	beq.n	15dd4 <_strtod_l+0x84>
   15e8c:	2301      	movs	r3, #1
   15e8e:	930a      	str	r3, [sp, #40]	; 0x28
   15e90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15e92:	930c      	str	r3, [sp, #48]	; 0x30
   15e94:	2300      	movs	r3, #0
   15e96:	9306      	str	r3, [sp, #24]
   15e98:	9308      	str	r3, [sp, #32]
   15e9a:	461d      	mov	r5, r3
   15e9c:	220a      	movs	r2, #10
   15e9e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   15ea0:	f890 8000 	ldrb.w	r8, [r0]
   15ea4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   15ea8:	b2d9      	uxtb	r1, r3
   15eaa:	2909      	cmp	r1, #9
   15eac:	d92c      	bls.n	15f08 <_strtod_l+0x1b8>
   15eae:	463a      	mov	r2, r7
   15eb0:	f8d9 1000 	ldr.w	r1, [r9]
   15eb4:	f003 f8a3 	bl	18ffe <strncmp>
   15eb8:	2800      	cmp	r0, #0
   15eba:	d035      	beq.n	15f28 <_strtod_l+0x1d8>
   15ebc:	2000      	movs	r0, #0
   15ebe:	4642      	mov	r2, r8
   15ec0:	462b      	mov	r3, r5
   15ec2:	4601      	mov	r1, r0
   15ec4:	9004      	str	r0, [sp, #16]
   15ec6:	2a65      	cmp	r2, #101	; 0x65
   15ec8:	d001      	beq.n	15ece <_strtod_l+0x17e>
   15eca:	2a45      	cmp	r2, #69	; 0x45
   15ecc:	d117      	bne.n	15efe <_strtod_l+0x1ae>
   15ece:	b923      	cbnz	r3, 15eda <_strtod_l+0x18a>
   15ed0:	b910      	cbnz	r0, 15ed8 <_strtod_l+0x188>
   15ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15ed4:	2b00      	cmp	r3, #0
   15ed6:	d09c      	beq.n	15e12 <_strtod_l+0xc2>
   15ed8:	2300      	movs	r3, #0
   15eda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   15edc:	1c72      	adds	r2, r6, #1
   15ede:	9217      	str	r2, [sp, #92]	; 0x5c
   15ee0:	7872      	ldrb	r2, [r6, #1]
   15ee2:	2a2b      	cmp	r2, #43	; 0x2b
   15ee4:	f000 8082 	beq.w	15fec <_strtod_l+0x29c>
   15ee8:	2a2d      	cmp	r2, #45	; 0x2d
   15eea:	d079      	beq.n	15fe0 <_strtod_l+0x290>
   15eec:	f04f 0e00 	mov.w	lr, #0
   15ef0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
   15ef4:	f1bc 0f09 	cmp.w	ip, #9
   15ef8:	f240 8086 	bls.w	16008 <_strtod_l+0x2b8>
   15efc:	9617      	str	r6, [sp, #92]	; 0x5c
   15efe:	f04f 0800 	mov.w	r8, #0
   15f02:	e0a8      	b.n	16056 <_strtod_l+0x306>
   15f04:	2300      	movs	r3, #0
   15f06:	e7c2      	b.n	15e8e <_strtod_l+0x13e>
   15f08:	2d08      	cmp	r5, #8
   15f0a:	bfd5      	itete	le
   15f0c:	9908      	ldrle	r1, [sp, #32]
   15f0e:	9906      	ldrgt	r1, [sp, #24]
   15f10:	fb02 3301 	mlale	r3, r2, r1, r3
   15f14:	fb02 3301 	mlagt	r3, r2, r1, r3
   15f18:	f100 0001 	add.w	r0, r0, #1
   15f1c:	bfd4      	ite	le
   15f1e:	9308      	strle	r3, [sp, #32]
   15f20:	9306      	strgt	r3, [sp, #24]
   15f22:	3501      	adds	r5, #1
   15f24:	9017      	str	r0, [sp, #92]	; 0x5c
   15f26:	e7ba      	b.n	15e9e <_strtod_l+0x14e>
   15f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15f2a:	19da      	adds	r2, r3, r7
   15f2c:	9217      	str	r2, [sp, #92]	; 0x5c
   15f2e:	5dda      	ldrb	r2, [r3, r7]
   15f30:	2d00      	cmp	r5, #0
   15f32:	d038      	beq.n	15fa6 <_strtod_l+0x256>
   15f34:	4601      	mov	r1, r0
   15f36:	462b      	mov	r3, r5
   15f38:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
   15f3c:	2f09      	cmp	r7, #9
   15f3e:	d913      	bls.n	15f68 <_strtod_l+0x218>
   15f40:	2701      	movs	r7, #1
   15f42:	9704      	str	r7, [sp, #16]
   15f44:	e7bf      	b.n	15ec6 <_strtod_l+0x176>
   15f46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15f48:	1c5a      	adds	r2, r3, #1
   15f4a:	9217      	str	r2, [sp, #92]	; 0x5c
   15f4c:	785a      	ldrb	r2, [r3, #1]
   15f4e:	3001      	adds	r0, #1
   15f50:	2a30      	cmp	r2, #48	; 0x30
   15f52:	d0f8      	beq.n	15f46 <_strtod_l+0x1f6>
   15f54:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   15f58:	2b08      	cmp	r3, #8
   15f5a:	f200 84a2 	bhi.w	168a2 <_strtod_l+0xb52>
   15f5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15f60:	930c      	str	r3, [sp, #48]	; 0x30
   15f62:	4601      	mov	r1, r0
   15f64:	2000      	movs	r0, #0
   15f66:	4603      	mov	r3, r0
   15f68:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
   15f6c:	f100 0701 	add.w	r7, r0, #1
   15f70:	d013      	beq.n	15f9a <_strtod_l+0x24a>
   15f72:	4439      	add	r1, r7
   15f74:	eb00 0e03 	add.w	lr, r0, r3
   15f78:	461f      	mov	r7, r3
   15f7a:	f04f 0c0a 	mov.w	ip, #10
   15f7e:	45be      	cmp	lr, r7
   15f80:	d113      	bne.n	15faa <_strtod_l+0x25a>
   15f82:	181f      	adds	r7, r3, r0
   15f84:	2f08      	cmp	r7, #8
   15f86:	f103 0301 	add.w	r3, r3, #1
   15f8a:	4403      	add	r3, r0
   15f8c:	dc1d      	bgt.n	15fca <_strtod_l+0x27a>
   15f8e:	9a08      	ldr	r2, [sp, #32]
   15f90:	200a      	movs	r0, #10
   15f92:	fb00 8202 	mla	r2, r0, r2, r8
   15f96:	9208      	str	r2, [sp, #32]
   15f98:	2700      	movs	r7, #0
   15f9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15f9c:	1c50      	adds	r0, r2, #1
   15f9e:	9017      	str	r0, [sp, #92]	; 0x5c
   15fa0:	7852      	ldrb	r2, [r2, #1]
   15fa2:	4638      	mov	r0, r7
   15fa4:	e7c8      	b.n	15f38 <_strtod_l+0x1e8>
   15fa6:	4628      	mov	r0, r5
   15fa8:	e7d2      	b.n	15f50 <_strtod_l+0x200>
   15faa:	2f08      	cmp	r7, #8
   15fac:	f107 0701 	add.w	r7, r7, #1
   15fb0:	dc04      	bgt.n	15fbc <_strtod_l+0x26c>
   15fb2:	9a08      	ldr	r2, [sp, #32]
   15fb4:	fb0c f202 	mul.w	r2, ip, r2
   15fb8:	9208      	str	r2, [sp, #32]
   15fba:	e7e0      	b.n	15f7e <_strtod_l+0x22e>
   15fbc:	2f10      	cmp	r7, #16
   15fbe:	bfde      	ittt	le
   15fc0:	9a06      	ldrle	r2, [sp, #24]
   15fc2:	fb0c f202 	mulle.w	r2, ip, r2
   15fc6:	9206      	strle	r2, [sp, #24]
   15fc8:	e7d9      	b.n	15f7e <_strtod_l+0x22e>
   15fca:	2b10      	cmp	r3, #16
   15fcc:	bfdf      	itttt	le
   15fce:	9a06      	ldrle	r2, [sp, #24]
   15fd0:	200a      	movle	r0, #10
   15fd2:	fb00 8202 	mlale	r2, r0, r2, r8
   15fd6:	9206      	strle	r2, [sp, #24]
   15fd8:	e7de      	b.n	15f98 <_strtod_l+0x248>
   15fda:	2301      	movs	r3, #1
   15fdc:	9304      	str	r3, [sp, #16]
   15fde:	e777      	b.n	15ed0 <_strtod_l+0x180>
   15fe0:	f04f 0e01 	mov.w	lr, #1
   15fe4:	1cb2      	adds	r2, r6, #2
   15fe6:	9217      	str	r2, [sp, #92]	; 0x5c
   15fe8:	78b2      	ldrb	r2, [r6, #2]
   15fea:	e781      	b.n	15ef0 <_strtod_l+0x1a0>
   15fec:	f04f 0e00 	mov.w	lr, #0
   15ff0:	e7f8      	b.n	15fe4 <_strtod_l+0x294>
   15ff2:	bf00      	nop
   15ff4:	000197d4 	.word	0x000197d4
   15ff8:	7ff00000 	.word	0x7ff00000
   15ffc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15ffe:	f102 0c01 	add.w	ip, r2, #1
   16002:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   16006:	7852      	ldrb	r2, [r2, #1]
   16008:	2a30      	cmp	r2, #48	; 0x30
   1600a:	d0f7      	beq.n	15ffc <_strtod_l+0x2ac>
   1600c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
   16010:	f1bc 0f08 	cmp.w	ip, #8
   16014:	f63f af73 	bhi.w	15efe <_strtod_l+0x1ae>
   16018:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
   1601c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1601e:	920e      	str	r2, [sp, #56]	; 0x38
   16020:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16022:	f102 0c01 	add.w	ip, r2, #1
   16026:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   1602a:	7852      	ldrb	r2, [r2, #1]
   1602c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
   16030:	f1b9 0f09 	cmp.w	r9, #9
   16034:	d939      	bls.n	160aa <_strtod_l+0x35a>
   16036:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   16038:	ebac 0c07 	sub.w	ip, ip, r7
   1603c:	f1bc 0f08 	cmp.w	ip, #8
   16040:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
   16044:	dc37      	bgt.n	160b6 <_strtod_l+0x366>
   16046:	45e0      	cmp	r8, ip
   16048:	bfa8      	it	ge
   1604a:	46e0      	movge	r8, ip
   1604c:	f1be 0f00 	cmp.w	lr, #0
   16050:	d001      	beq.n	16056 <_strtod_l+0x306>
   16052:	f1c8 0800 	rsb	r8, r8, #0
   16056:	2b00      	cmp	r3, #0
   16058:	d151      	bne.n	160fe <_strtod_l+0x3ae>
   1605a:	2800      	cmp	r0, #0
   1605c:	f47f aeba 	bne.w	15dd4 <_strtod_l+0x84>
   16060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16062:	2b00      	cmp	r3, #0
   16064:	f47f aeb6 	bne.w	15dd4 <_strtod_l+0x84>
   16068:	9b04      	ldr	r3, [sp, #16]
   1606a:	2b00      	cmp	r3, #0
   1606c:	f47f aed1 	bne.w	15e12 <_strtod_l+0xc2>
   16070:	2a4e      	cmp	r2, #78	; 0x4e
   16072:	d027      	beq.n	160c4 <_strtod_l+0x374>
   16074:	dc21      	bgt.n	160ba <_strtod_l+0x36a>
   16076:	2a49      	cmp	r2, #73	; 0x49
   16078:	f47f aecb 	bne.w	15e12 <_strtod_l+0xc2>
   1607c:	499a      	ldr	r1, [pc, #616]	; (162e8 <_strtod_l+0x598>)
   1607e:	a817      	add	r0, sp, #92	; 0x5c
   16080:	f001 ff62 	bl	17f48 <__match>
   16084:	2800      	cmp	r0, #0
   16086:	f43f aec4 	beq.w	15e12 <_strtod_l+0xc2>
   1608a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1608c:	4997      	ldr	r1, [pc, #604]	; (162ec <_strtod_l+0x59c>)
   1608e:	3b01      	subs	r3, #1
   16090:	a817      	add	r0, sp, #92	; 0x5c
   16092:	9317      	str	r3, [sp, #92]	; 0x5c
   16094:	f001 ff58 	bl	17f48 <__match>
   16098:	b910      	cbnz	r0, 160a0 <_strtod_l+0x350>
   1609a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1609c:	3301      	adds	r3, #1
   1609e:	9317      	str	r3, [sp, #92]	; 0x5c
   160a0:	f8df b260 	ldr.w	fp, [pc, #608]	; 16304 <_strtod_l+0x5b4>
   160a4:	f04f 0a00 	mov.w	sl, #0
   160a8:	e694      	b.n	15dd4 <_strtod_l+0x84>
   160aa:	270a      	movs	r7, #10
   160ac:	fb07 2808 	mla	r8, r7, r8, r2
   160b0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   160b4:	e7b4      	b.n	16020 <_strtod_l+0x2d0>
   160b6:	46e0      	mov	r8, ip
   160b8:	e7c8      	b.n	1604c <_strtod_l+0x2fc>
   160ba:	2a69      	cmp	r2, #105	; 0x69
   160bc:	d0de      	beq.n	1607c <_strtod_l+0x32c>
   160be:	2a6e      	cmp	r2, #110	; 0x6e
   160c0:	f47f aea7 	bne.w	15e12 <_strtod_l+0xc2>
   160c4:	498a      	ldr	r1, [pc, #552]	; (162f0 <_strtod_l+0x5a0>)
   160c6:	a817      	add	r0, sp, #92	; 0x5c
   160c8:	f001 ff3e 	bl	17f48 <__match>
   160cc:	2800      	cmp	r0, #0
   160ce:	f43f aea0 	beq.w	15e12 <_strtod_l+0xc2>
   160d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   160d4:	781b      	ldrb	r3, [r3, #0]
   160d6:	2b28      	cmp	r3, #40	; 0x28
   160d8:	d10e      	bne.n	160f8 <_strtod_l+0x3a8>
   160da:	aa1a      	add	r2, sp, #104	; 0x68
   160dc:	4985      	ldr	r1, [pc, #532]	; (162f4 <_strtod_l+0x5a4>)
   160de:	a817      	add	r0, sp, #92	; 0x5c
   160e0:	f001 ff46 	bl	17f70 <__hexnan>
   160e4:	2805      	cmp	r0, #5
   160e6:	d107      	bne.n	160f8 <_strtod_l+0x3a8>
   160e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   160ea:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   160ee:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   160f2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   160f6:	e66d      	b.n	15dd4 <_strtod_l+0x84>
   160f8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 16308 <_strtod_l+0x5b8>
   160fc:	e7d2      	b.n	160a4 <_strtod_l+0x354>
   160fe:	eddd 7a08 	vldr	s15, [sp, #32]
   16102:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   16106:	eba8 0201 	sub.w	r2, r8, r1
   1610a:	2d00      	cmp	r5, #0
   1610c:	bf08      	it	eq
   1610e:	461d      	moveq	r5, r3
   16110:	2b10      	cmp	r3, #16
   16112:	9204      	str	r2, [sp, #16]
   16114:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   16118:	461a      	mov	r2, r3
   1611a:	bfa8      	it	ge
   1611c:	2210      	movge	r2, #16
   1611e:	2b09      	cmp	r3, #9
   16120:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   16124:	dc14      	bgt.n	16150 <_strtod_l+0x400>
   16126:	9904      	ldr	r1, [sp, #16]
   16128:	2900      	cmp	r1, #0
   1612a:	f43f ae53 	beq.w	15dd4 <_strtod_l+0x84>
   1612e:	9904      	ldr	r1, [sp, #16]
   16130:	dd72      	ble.n	16218 <_strtod_l+0x4c8>
   16132:	2916      	cmp	r1, #22
   16134:	dc5a      	bgt.n	161ec <_strtod_l+0x49c>
   16136:	4970      	ldr	r1, [pc, #448]	; (162f8 <_strtod_l+0x5a8>)
   16138:	9b04      	ldr	r3, [sp, #16]
   1613a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1613e:	ed91 7b00 	vldr	d7, [r1]
   16142:	ec4b ab16 	vmov	d6, sl, fp
   16146:	ee27 7b06 	vmul.f64	d7, d7, d6
   1614a:	ec5b ab17 	vmov	sl, fp, d7
   1614e:	e641      	b.n	15dd4 <_strtod_l+0x84>
   16150:	4969      	ldr	r1, [pc, #420]	; (162f8 <_strtod_l+0x5a8>)
   16152:	eddd 7a06 	vldr	s15, [sp, #24]
   16156:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   1615a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
   1615e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
   16162:	2b0f      	cmp	r3, #15
   16164:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   16168:	eea5 7b06 	vfma.f64	d7, d5, d6
   1616c:	ec5b ab17 	vmov	sl, fp, d7
   16170:	ddd9      	ble.n	16126 <_strtod_l+0x3d6>
   16172:	9904      	ldr	r1, [sp, #16]
   16174:	1a9a      	subs	r2, r3, r2
   16176:	440a      	add	r2, r1
   16178:	2a00      	cmp	r2, #0
   1617a:	f340 8096 	ble.w	162aa <_strtod_l+0x55a>
   1617e:	f012 000f 	ands.w	r0, r2, #15
   16182:	d00a      	beq.n	1619a <_strtod_l+0x44a>
   16184:	495c      	ldr	r1, [pc, #368]	; (162f8 <_strtod_l+0x5a8>)
   16186:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1618a:	ed91 7b00 	vldr	d7, [r1]
   1618e:	ec4b ab16 	vmov	d6, sl, fp
   16192:	ee27 7b06 	vmul.f64	d7, d7, d6
   16196:	ec5b ab17 	vmov	sl, fp, d7
   1619a:	f032 020f 	bics.w	r2, r2, #15
   1619e:	d072      	beq.n	16286 <_strtod_l+0x536>
   161a0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   161a4:	dd45      	ble.n	16232 <_strtod_l+0x4e2>
   161a6:	2500      	movs	r5, #0
   161a8:	46a8      	mov	r8, r5
   161aa:	9506      	str	r5, [sp, #24]
   161ac:	46a9      	mov	r9, r5
   161ae:	2322      	movs	r3, #34	; 0x22
   161b0:	f8df b150 	ldr.w	fp, [pc, #336]	; 16304 <_strtod_l+0x5b4>
   161b4:	6023      	str	r3, [r4, #0]
   161b6:	f04f 0a00 	mov.w	sl, #0
   161ba:	9b06      	ldr	r3, [sp, #24]
   161bc:	2b00      	cmp	r3, #0
   161be:	f43f ae09 	beq.w	15dd4 <_strtod_l+0x84>
   161c2:	9918      	ldr	r1, [sp, #96]	; 0x60
   161c4:	4620      	mov	r0, r4
   161c6:	f002 f879 	bl	182bc <_Bfree>
   161ca:	4649      	mov	r1, r9
   161cc:	4620      	mov	r0, r4
   161ce:	f002 f875 	bl	182bc <_Bfree>
   161d2:	4641      	mov	r1, r8
   161d4:	4620      	mov	r0, r4
   161d6:	f002 f871 	bl	182bc <_Bfree>
   161da:	9906      	ldr	r1, [sp, #24]
   161dc:	4620      	mov	r0, r4
   161de:	f002 f86d 	bl	182bc <_Bfree>
   161e2:	4629      	mov	r1, r5
   161e4:	4620      	mov	r0, r4
   161e6:	f002 f869 	bl	182bc <_Bfree>
   161ea:	e5f3      	b.n	15dd4 <_strtod_l+0x84>
   161ec:	9804      	ldr	r0, [sp, #16]
   161ee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
   161f2:	4281      	cmp	r1, r0
   161f4:	dbbd      	blt.n	16172 <_strtod_l+0x422>
   161f6:	4a40      	ldr	r2, [pc, #256]	; (162f8 <_strtod_l+0x5a8>)
   161f8:	f1c3 030f 	rsb	r3, r3, #15
   161fc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   16200:	ed91 7b00 	vldr	d7, [r1]
   16204:	ec4b ab16 	vmov	d6, sl, fp
   16208:	1ac3      	subs	r3, r0, r3
   1620a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1620e:	ee27 7b06 	vmul.f64	d7, d7, d6
   16212:	ed92 6b00 	vldr	d6, [r2]
   16216:	e796      	b.n	16146 <_strtod_l+0x3f6>
   16218:	3116      	adds	r1, #22
   1621a:	dbaa      	blt.n	16172 <_strtod_l+0x422>
   1621c:	4936      	ldr	r1, [pc, #216]	; (162f8 <_strtod_l+0x5a8>)
   1621e:	9b04      	ldr	r3, [sp, #16]
   16220:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
   16224:	ed91 7b00 	vldr	d7, [r1]
   16228:	ec4b ab16 	vmov	d6, sl, fp
   1622c:	ee86 7b07 	vdiv.f64	d7, d6, d7
   16230:	e78b      	b.n	1614a <_strtod_l+0x3fa>
   16232:	e9cd ab06 	strd	sl, fp, [sp, #24]
   16236:	2000      	movs	r0, #0
   16238:	4e30      	ldr	r6, [pc, #192]	; (162fc <_strtod_l+0x5ac>)
   1623a:	1112      	asrs	r2, r2, #4
   1623c:	4601      	mov	r1, r0
   1623e:	2a01      	cmp	r2, #1
   16240:	dc23      	bgt.n	1628a <_strtod_l+0x53a>
   16242:	b108      	cbz	r0, 16248 <_strtod_l+0x4f8>
   16244:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   16248:	4a2c      	ldr	r2, [pc, #176]	; (162fc <_strtod_l+0x5ac>)
   1624a:	482d      	ldr	r0, [pc, #180]	; (16300 <_strtod_l+0x5b0>)
   1624c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   16250:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   16254:	ed91 7b00 	vldr	d7, [r1]
   16258:	ec4b ab16 	vmov	d6, sl, fp
   1625c:	ee27 7b06 	vmul.f64	d7, d7, d6
   16260:	ed8d 7b06 	vstr	d7, [sp, #24]
   16264:	9907      	ldr	r1, [sp, #28]
   16266:	4a27      	ldr	r2, [pc, #156]	; (16304 <_strtod_l+0x5b4>)
   16268:	400a      	ands	r2, r1
   1626a:	4282      	cmp	r2, r0
   1626c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   16270:	d899      	bhi.n	161a6 <_strtod_l+0x456>
   16272:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
   16276:	4282      	cmp	r2, r0
   16278:	bf86      	itte	hi
   1627a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 1630c <_strtod_l+0x5bc>
   1627e:	f04f 3aff 	movhi.w	sl, #4294967295
   16282:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
   16286:	2700      	movs	r7, #0
   16288:	e070      	b.n	1636c <_strtod_l+0x61c>
   1628a:	07d7      	lsls	r7, r2, #31
   1628c:	d50a      	bpl.n	162a4 <_strtod_l+0x554>
   1628e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   16292:	ed90 7b00 	vldr	d7, [r0]
   16296:	ed9d 6b06 	vldr	d6, [sp, #24]
   1629a:	ee26 7b07 	vmul.f64	d7, d6, d7
   1629e:	ed8d 7b06 	vstr	d7, [sp, #24]
   162a2:	2001      	movs	r0, #1
   162a4:	3101      	adds	r1, #1
   162a6:	1052      	asrs	r2, r2, #1
   162a8:	e7c9      	b.n	1623e <_strtod_l+0x4ee>
   162aa:	d0ec      	beq.n	16286 <_strtod_l+0x536>
   162ac:	4252      	negs	r2, r2
   162ae:	f012 000f 	ands.w	r0, r2, #15
   162b2:	d00a      	beq.n	162ca <_strtod_l+0x57a>
   162b4:	4910      	ldr	r1, [pc, #64]	; (162f8 <_strtod_l+0x5a8>)
   162b6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   162ba:	ed91 7b00 	vldr	d7, [r1]
   162be:	ec4b ab16 	vmov	d6, sl, fp
   162c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
   162c6:	ec5b ab17 	vmov	sl, fp, d7
   162ca:	1112      	asrs	r2, r2, #4
   162cc:	d0db      	beq.n	16286 <_strtod_l+0x536>
   162ce:	2a1f      	cmp	r2, #31
   162d0:	dd1e      	ble.n	16310 <_strtod_l+0x5c0>
   162d2:	2500      	movs	r5, #0
   162d4:	46a8      	mov	r8, r5
   162d6:	9506      	str	r5, [sp, #24]
   162d8:	46a9      	mov	r9, r5
   162da:	2322      	movs	r3, #34	; 0x22
   162dc:	f04f 0a00 	mov.w	sl, #0
   162e0:	f04f 0b00 	mov.w	fp, #0
   162e4:	6023      	str	r3, [r4, #0]
   162e6:	e768      	b.n	161ba <_strtod_l+0x46a>
   162e8:	0001979d 	.word	0x0001979d
   162ec:	0001982b 	.word	0x0001982b
   162f0:	000197a5 	.word	0x000197a5
   162f4:	000197e8 	.word	0x000197e8
   162f8:	000198d0 	.word	0x000198d0
   162fc:	000198a8 	.word	0x000198a8
   16300:	7ca00000 	.word	0x7ca00000
   16304:	7ff00000 	.word	0x7ff00000
   16308:	fff80000 	.word	0xfff80000
   1630c:	7fefffff 	.word	0x7fefffff
   16310:	e9cd ab06 	strd	sl, fp, [sp, #24]
   16314:	f012 0710 	ands.w	r7, r2, #16
   16318:	49ab      	ldr	r1, [pc, #684]	; (165c8 <_strtod_l+0x878>)
   1631a:	bf18      	it	ne
   1631c:	276a      	movne	r7, #106	; 0x6a
   1631e:	2000      	movs	r0, #0
   16320:	2a00      	cmp	r2, #0
   16322:	f300 8113 	bgt.w	1654c <_strtod_l+0x7fc>
   16326:	b108      	cbz	r0, 1632c <_strtod_l+0x5dc>
   16328:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   1632c:	b1bf      	cbz	r7, 1635e <_strtod_l+0x60e>
   1632e:	f3cb 520a 	ubfx	r2, fp, #20, #11
   16332:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
   16336:	2a00      	cmp	r2, #0
   16338:	4659      	mov	r1, fp
   1633a:	dd10      	ble.n	1635e <_strtod_l+0x60e>
   1633c:	2a1f      	cmp	r2, #31
   1633e:	f340 8113 	ble.w	16568 <_strtod_l+0x818>
   16342:	2a34      	cmp	r2, #52	; 0x34
   16344:	bfde      	ittt	le
   16346:	3a20      	suble	r2, #32
   16348:	f04f 30ff 	movle.w	r0, #4294967295
   1634c:	fa00 f202 	lslle.w	r2, r0, r2
   16350:	f04f 0a00 	mov.w	sl, #0
   16354:	bfcc      	ite	gt
   16356:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1635a:	ea02 0b01 	andle.w	fp, r2, r1
   1635e:	ec4b ab17 	vmov	d7, sl, fp
   16362:	eeb5 7b40 	vcmp.f64	d7, #0.0
   16366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1636a:	d0b2      	beq.n	162d2 <_strtod_l+0x582>
   1636c:	9a08      	ldr	r2, [sp, #32]
   1636e:	9200      	str	r2, [sp, #0]
   16370:	990c      	ldr	r1, [sp, #48]	; 0x30
   16372:	462a      	mov	r2, r5
   16374:	4620      	mov	r0, r4
   16376:	f001 fff3 	bl	18360 <__s2b>
   1637a:	9006      	str	r0, [sp, #24]
   1637c:	2800      	cmp	r0, #0
   1637e:	f43f af12 	beq.w	161a6 <_strtod_l+0x456>
   16382:	9a04      	ldr	r2, [sp, #16]
   16384:	9b04      	ldr	r3, [sp, #16]
   16386:	2a00      	cmp	r2, #0
   16388:	f1c3 0300 	rsb	r3, r3, #0
   1638c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 165b0 <_strtod_l+0x860>
   16390:	bfa8      	it	ge
   16392:	2300      	movge	r3, #0
   16394:	ed9f ab88 	vldr	d10, [pc, #544]	; 165b8 <_strtod_l+0x868>
   16398:	ed9f bb89 	vldr	d11, [pc, #548]	; 165c0 <_strtod_l+0x870>
   1639c:	930e      	str	r3, [sp, #56]	; 0x38
   1639e:	2500      	movs	r5, #0
   163a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   163a4:	9310      	str	r3, [sp, #64]	; 0x40
   163a6:	46a8      	mov	r8, r5
   163a8:	9b06      	ldr	r3, [sp, #24]
   163aa:	4620      	mov	r0, r4
   163ac:	6859      	ldr	r1, [r3, #4]
   163ae:	f001 ff51 	bl	18254 <_Balloc>
   163b2:	4681      	mov	r9, r0
   163b4:	2800      	cmp	r0, #0
   163b6:	f43f aefa 	beq.w	161ae <_strtod_l+0x45e>
   163ba:	9b06      	ldr	r3, [sp, #24]
   163bc:	691a      	ldr	r2, [r3, #16]
   163be:	3202      	adds	r2, #2
   163c0:	f103 010c 	add.w	r1, r3, #12
   163c4:	0092      	lsls	r2, r2, #2
   163c6:	300c      	adds	r0, #12
   163c8:	f7fe fce4 	bl	14d94 <memcpy>
   163cc:	aa1a      	add	r2, sp, #104	; 0x68
   163ce:	a919      	add	r1, sp, #100	; 0x64
   163d0:	ec4b ab10 	vmov	d0, sl, fp
   163d4:	4620      	mov	r0, r4
   163d6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   163da:	f002 fa7d 	bl	188d8 <__d2b>
   163de:	9018      	str	r0, [sp, #96]	; 0x60
   163e0:	2800      	cmp	r0, #0
   163e2:	f43f aee4 	beq.w	161ae <_strtod_l+0x45e>
   163e6:	2101      	movs	r1, #1
   163e8:	4620      	mov	r0, r4
   163ea:	f002 f845 	bl	18478 <__i2b>
   163ee:	4680      	mov	r8, r0
   163f0:	2800      	cmp	r0, #0
   163f2:	f43f aedc 	beq.w	161ae <_strtod_l+0x45e>
   163f6:	9e19      	ldr	r6, [sp, #100]	; 0x64
   163f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   163fa:	2e00      	cmp	r6, #0
   163fc:	bfb1      	iteee	lt
   163fe:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   16400:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
   16402:	9810      	ldrge	r0, [sp, #64]	; 0x40
   16404:	18f3      	addge	r3, r6, r3
   16406:	bfba      	itte	lt
   16408:	1b98      	sublt	r0, r3, r6
   1640a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1640c:	9308      	strge	r3, [sp, #32]
   1640e:	eba6 0607 	sub.w	r6, r6, r7
   16412:	bfb8      	it	lt
   16414:	9308      	strlt	r3, [sp, #32]
   16416:	4416      	add	r6, r2
   16418:	4b6c      	ldr	r3, [pc, #432]	; (165cc <_strtod_l+0x87c>)
   1641a:	3e01      	subs	r6, #1
   1641c:	429e      	cmp	r6, r3
   1641e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   16422:	f280 80b4 	bge.w	1658e <_strtod_l+0x83e>
   16426:	1b9b      	subs	r3, r3, r6
   16428:	2b1f      	cmp	r3, #31
   1642a:	eba2 0203 	sub.w	r2, r2, r3
   1642e:	f04f 0101 	mov.w	r1, #1
   16432:	f300 80a0 	bgt.w	16576 <_strtod_l+0x826>
   16436:	fa01 f303 	lsl.w	r3, r1, r3
   1643a:	9311      	str	r3, [sp, #68]	; 0x44
   1643c:	2300      	movs	r3, #0
   1643e:	930f      	str	r3, [sp, #60]	; 0x3c
   16440:	9b08      	ldr	r3, [sp, #32]
   16442:	4413      	add	r3, r2
   16444:	4402      	add	r2, r0
   16446:	18be      	adds	r6, r7, r2
   16448:	9a08      	ldr	r2, [sp, #32]
   1644a:	429a      	cmp	r2, r3
   1644c:	bfa8      	it	ge
   1644e:	461a      	movge	r2, r3
   16450:	42b2      	cmp	r2, r6
   16452:	bfa8      	it	ge
   16454:	4632      	movge	r2, r6
   16456:	2a00      	cmp	r2, #0
   16458:	dd04      	ble.n	16464 <_strtod_l+0x714>
   1645a:	9908      	ldr	r1, [sp, #32]
   1645c:	1a9b      	subs	r3, r3, r2
   1645e:	1ab6      	subs	r6, r6, r2
   16460:	1a8a      	subs	r2, r1, r2
   16462:	9208      	str	r2, [sp, #32]
   16464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16466:	b1c2      	cbz	r2, 1649a <_strtod_l+0x74a>
   16468:	4641      	mov	r1, r8
   1646a:	4620      	mov	r0, r4
   1646c:	9315      	str	r3, [sp, #84]	; 0x54
   1646e:	f002 f8a3 	bl	185b8 <__pow5mult>
   16472:	4680      	mov	r8, r0
   16474:	2800      	cmp	r0, #0
   16476:	f43f ae9a 	beq.w	161ae <_strtod_l+0x45e>
   1647a:	4601      	mov	r1, r0
   1647c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1647e:	4620      	mov	r0, r4
   16480:	f002 f803 	bl	1848a <__multiply>
   16484:	900c      	str	r0, [sp, #48]	; 0x30
   16486:	2800      	cmp	r0, #0
   16488:	f43f ae91 	beq.w	161ae <_strtod_l+0x45e>
   1648c:	9918      	ldr	r1, [sp, #96]	; 0x60
   1648e:	4620      	mov	r0, r4
   16490:	f001 ff14 	bl	182bc <_Bfree>
   16494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16496:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16498:	9218      	str	r2, [sp, #96]	; 0x60
   1649a:	2b00      	cmp	r3, #0
   1649c:	dc7c      	bgt.n	16598 <_strtod_l+0x848>
   1649e:	9b04      	ldr	r3, [sp, #16]
   164a0:	2b00      	cmp	r3, #0
   164a2:	dd08      	ble.n	164b6 <_strtod_l+0x766>
   164a4:	4649      	mov	r1, r9
   164a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   164a8:	4620      	mov	r0, r4
   164aa:	f002 f885 	bl	185b8 <__pow5mult>
   164ae:	4681      	mov	r9, r0
   164b0:	2800      	cmp	r0, #0
   164b2:	f43f ae7c 	beq.w	161ae <_strtod_l+0x45e>
   164b6:	2e00      	cmp	r6, #0
   164b8:	dd08      	ble.n	164cc <_strtod_l+0x77c>
   164ba:	4649      	mov	r1, r9
   164bc:	4632      	mov	r2, r6
   164be:	4620      	mov	r0, r4
   164c0:	f002 f8c8 	bl	18654 <__lshift>
   164c4:	4681      	mov	r9, r0
   164c6:	2800      	cmp	r0, #0
   164c8:	f43f ae71 	beq.w	161ae <_strtod_l+0x45e>
   164cc:	9b08      	ldr	r3, [sp, #32]
   164ce:	2b00      	cmp	r3, #0
   164d0:	dd08      	ble.n	164e4 <_strtod_l+0x794>
   164d2:	4641      	mov	r1, r8
   164d4:	461a      	mov	r2, r3
   164d6:	4620      	mov	r0, r4
   164d8:	f002 f8bc 	bl	18654 <__lshift>
   164dc:	4680      	mov	r8, r0
   164de:	2800      	cmp	r0, #0
   164e0:	f43f ae65 	beq.w	161ae <_strtod_l+0x45e>
   164e4:	464a      	mov	r2, r9
   164e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   164e8:	4620      	mov	r0, r4
   164ea:	f002 f921 	bl	18730 <__mdiff>
   164ee:	4605      	mov	r5, r0
   164f0:	2800      	cmp	r0, #0
   164f2:	f43f ae5c 	beq.w	161ae <_strtod_l+0x45e>
   164f6:	68c3      	ldr	r3, [r0, #12]
   164f8:	930c      	str	r3, [sp, #48]	; 0x30
   164fa:	2300      	movs	r3, #0
   164fc:	60c3      	str	r3, [r0, #12]
   164fe:	4641      	mov	r1, r8
   16500:	f002 f8fc 	bl	186fc <__mcmp>
   16504:	2800      	cmp	r0, #0
   16506:	da63      	bge.n	165d0 <_strtod_l+0x880>
   16508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1650a:	b9e3      	cbnz	r3, 16546 <_strtod_l+0x7f6>
   1650c:	f1ba 0f00 	cmp.w	sl, #0
   16510:	d119      	bne.n	16546 <_strtod_l+0x7f6>
   16512:	f3cb 0313 	ubfx	r3, fp, #0, #20
   16516:	b9b3      	cbnz	r3, 16546 <_strtod_l+0x7f6>
   16518:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1651c:	0d1b      	lsrs	r3, r3, #20
   1651e:	051b      	lsls	r3, r3, #20
   16520:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   16524:	d90f      	bls.n	16546 <_strtod_l+0x7f6>
   16526:	696b      	ldr	r3, [r5, #20]
   16528:	b913      	cbnz	r3, 16530 <_strtod_l+0x7e0>
   1652a:	692b      	ldr	r3, [r5, #16]
   1652c:	2b01      	cmp	r3, #1
   1652e:	dd0a      	ble.n	16546 <_strtod_l+0x7f6>
   16530:	4629      	mov	r1, r5
   16532:	2201      	movs	r2, #1
   16534:	4620      	mov	r0, r4
   16536:	f002 f88d 	bl	18654 <__lshift>
   1653a:	4641      	mov	r1, r8
   1653c:	4605      	mov	r5, r0
   1653e:	f002 f8dd 	bl	186fc <__mcmp>
   16542:	2800      	cmp	r0, #0
   16544:	dc75      	bgt.n	16632 <_strtod_l+0x8e2>
   16546:	2f00      	cmp	r7, #0
   16548:	d17f      	bne.n	1664a <_strtod_l+0x8fa>
   1654a:	e63a      	b.n	161c2 <_strtod_l+0x472>
   1654c:	07d6      	lsls	r6, r2, #31
   1654e:	d508      	bpl.n	16562 <_strtod_l+0x812>
   16550:	ed9d 6b06 	vldr	d6, [sp, #24]
   16554:	ed91 7b00 	vldr	d7, [r1]
   16558:	ee26 7b07 	vmul.f64	d7, d6, d7
   1655c:	ed8d 7b06 	vstr	d7, [sp, #24]
   16560:	2001      	movs	r0, #1
   16562:	1052      	asrs	r2, r2, #1
   16564:	3108      	adds	r1, #8
   16566:	e6db      	b.n	16320 <_strtod_l+0x5d0>
   16568:	f04f 31ff 	mov.w	r1, #4294967295
   1656c:	fa01 f202 	lsl.w	r2, r1, r2
   16570:	ea02 0a0a 	and.w	sl, r2, sl
   16574:	e6f3      	b.n	1635e <_strtod_l+0x60e>
   16576:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
   1657a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
   1657e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
   16582:	36e2      	adds	r6, #226	; 0xe2
   16584:	fa01 f306 	lsl.w	r3, r1, r6
   16588:	930f      	str	r3, [sp, #60]	; 0x3c
   1658a:	9111      	str	r1, [sp, #68]	; 0x44
   1658c:	e758      	b.n	16440 <_strtod_l+0x6f0>
   1658e:	2300      	movs	r3, #0
   16590:	930f      	str	r3, [sp, #60]	; 0x3c
   16592:	2301      	movs	r3, #1
   16594:	9311      	str	r3, [sp, #68]	; 0x44
   16596:	e753      	b.n	16440 <_strtod_l+0x6f0>
   16598:	461a      	mov	r2, r3
   1659a:	9918      	ldr	r1, [sp, #96]	; 0x60
   1659c:	4620      	mov	r0, r4
   1659e:	f002 f859 	bl	18654 <__lshift>
   165a2:	9018      	str	r0, [sp, #96]	; 0x60
   165a4:	2800      	cmp	r0, #0
   165a6:	f47f af7a 	bne.w	1649e <_strtod_l+0x74e>
   165aa:	e600      	b.n	161ae <_strtod_l+0x45e>
   165ac:	f3af 8000 	nop.w
   165b0:	94a03595 	.word	0x94a03595
   165b4:	3fdfffff 	.word	0x3fdfffff
   165b8:	35afe535 	.word	0x35afe535
   165bc:	3fe00000 	.word	0x3fe00000
   165c0:	94a03595 	.word	0x94a03595
   165c4:	3fcfffff 	.word	0x3fcfffff
   165c8:	00019800 	.word	0x00019800
   165cc:	fffffc02 	.word	0xfffffc02
   165d0:	f8cd b020 	str.w	fp, [sp, #32]
   165d4:	f040 8085 	bne.w	166e2 <_strtod_l+0x992>
   165d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   165da:	f3cb 0313 	ubfx	r3, fp, #0, #20
   165de:	b322      	cbz	r2, 1662a <_strtod_l+0x8da>
   165e0:	4ab7      	ldr	r2, [pc, #732]	; (168c0 <_strtod_l+0xb70>)
   165e2:	4293      	cmp	r3, r2
   165e4:	d154      	bne.n	16690 <_strtod_l+0x940>
   165e6:	4651      	mov	r1, sl
   165e8:	b1e7      	cbz	r7, 16624 <_strtod_l+0x8d4>
   165ea:	4bb6      	ldr	r3, [pc, #728]	; (168c4 <_strtod_l+0xb74>)
   165ec:	465a      	mov	r2, fp
   165ee:	4013      	ands	r3, r2
   165f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   165f4:	f04f 32ff 	mov.w	r2, #4294967295
   165f8:	d803      	bhi.n	16602 <_strtod_l+0x8b2>
   165fa:	0d1b      	lsrs	r3, r3, #20
   165fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   16600:	409a      	lsls	r2, r3
   16602:	4291      	cmp	r1, r2
   16604:	d144      	bne.n	16690 <_strtod_l+0x940>
   16606:	4bb0      	ldr	r3, [pc, #704]	; (168c8 <_strtod_l+0xb78>)
   16608:	9a08      	ldr	r2, [sp, #32]
   1660a:	429a      	cmp	r2, r3
   1660c:	d102      	bne.n	16614 <_strtod_l+0x8c4>
   1660e:	3101      	adds	r1, #1
   16610:	f43f adcd 	beq.w	161ae <_strtod_l+0x45e>
   16614:	4bab      	ldr	r3, [pc, #684]	; (168c4 <_strtod_l+0xb74>)
   16616:	9a08      	ldr	r2, [sp, #32]
   16618:	401a      	ands	r2, r3
   1661a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
   1661e:	f04f 0a00 	mov.w	sl, #0
   16622:	e790      	b.n	16546 <_strtod_l+0x7f6>
   16624:	f04f 32ff 	mov.w	r2, #4294967295
   16628:	e7eb      	b.n	16602 <_strtod_l+0x8b2>
   1662a:	bb8b      	cbnz	r3, 16690 <_strtod_l+0x940>
   1662c:	f1ba 0f00 	cmp.w	sl, #0
   16630:	d12e      	bne.n	16690 <_strtod_l+0x940>
   16632:	465b      	mov	r3, fp
   16634:	4aa3      	ldr	r2, [pc, #652]	; (168c4 <_strtod_l+0xb74>)
   16636:	b30f      	cbz	r7, 1667c <_strtod_l+0x92c>
   16638:	ea02 010b 	and.w	r1, r2, fp
   1663c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   16640:	dc1c      	bgt.n	1667c <_strtod_l+0x92c>
   16642:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   16646:	f77f ae48 	ble.w	162da <_strtod_l+0x58a>
   1664a:	4aa0      	ldr	r2, [pc, #640]	; (168cc <_strtod_l+0xb7c>)
   1664c:	2300      	movs	r3, #0
   1664e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
   16652:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
   16656:	ec4b ab17 	vmov	d7, sl, fp
   1665a:	ee27 7b06 	vmul.f64	d7, d7, d6
   1665e:	ed8d 7b04 	vstr	d7, [sp, #16]
   16662:	9b05      	ldr	r3, [sp, #20]
   16664:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   16668:	2b00      	cmp	r3, #0
   1666a:	f47f adaa 	bne.w	161c2 <_strtod_l+0x472>
   1666e:	9b04      	ldr	r3, [sp, #16]
   16670:	2b00      	cmp	r3, #0
   16672:	f47f ada6 	bne.w	161c2 <_strtod_l+0x472>
   16676:	2322      	movs	r3, #34	; 0x22
   16678:	6023      	str	r3, [r4, #0]
   1667a:	e5a2      	b.n	161c2 <_strtod_l+0x472>
   1667c:	4013      	ands	r3, r2
   1667e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   16682:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   16686:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1668a:	f04f 3aff 	mov.w	sl, #4294967295
   1668e:	e75a      	b.n	16546 <_strtod_l+0x7f6>
   16690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16692:	b18b      	cbz	r3, 166b8 <_strtod_l+0x968>
   16694:	9a08      	ldr	r2, [sp, #32]
   16696:	4213      	tst	r3, r2
   16698:	f43f af55 	beq.w	16546 <_strtod_l+0x7f6>
   1669c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1669e:	463a      	mov	r2, r7
   166a0:	4650      	mov	r0, sl
   166a2:	4659      	mov	r1, fp
   166a4:	b163      	cbz	r3, 166c0 <_strtod_l+0x970>
   166a6:	f7f1 fcb3 	bl	8010 <sulp>
   166aa:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   166ae:	ee37 7b00 	vadd.f64	d7, d7, d0
   166b2:	ec5b ab17 	vmov	sl, fp, d7
   166b6:	e746      	b.n	16546 <_strtod_l+0x7f6>
   166b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   166ba:	ea13 0f0a 	tst.w	r3, sl
   166be:	e7eb      	b.n	16698 <_strtod_l+0x948>
   166c0:	f7f1 fca6 	bl	8010 <sulp>
   166c4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   166c8:	ee37 7b40 	vsub.f64	d7, d7, d0
   166cc:	ed8d 7b04 	vstr	d7, [sp, #16]
   166d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
   166d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   166d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   166dc:	f43f adfd 	beq.w	162da <_strtod_l+0x58a>
   166e0:	e731      	b.n	16546 <_strtod_l+0x7f6>
   166e2:	4641      	mov	r1, r8
   166e4:	4628      	mov	r0, r5
   166e6:	f002 f946 	bl	18976 <__ratio>
   166ea:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   166ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
   166f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   166f6:	d869      	bhi.n	167cc <_strtod_l+0xa7c>
   166f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   166fa:	2b00      	cmp	r3, #0
   166fc:	d045      	beq.n	1678a <_strtod_l+0xa3a>
   166fe:	4b74      	ldr	r3, [pc, #464]	; (168d0 <_strtod_l+0xb80>)
   16700:	2200      	movs	r2, #0
   16702:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
   16706:	9808      	ldr	r0, [sp, #32]
   16708:	496e      	ldr	r1, [pc, #440]	; (168c4 <_strtod_l+0xb74>)
   1670a:	ea00 0601 	and.w	r6, r0, r1
   1670e:	4871      	ldr	r0, [pc, #452]	; (168d4 <_strtod_l+0xb84>)
   16710:	4286      	cmp	r6, r0
   16712:	f040 8089 	bne.w	16828 <_strtod_l+0xad8>
   16716:	910f      	str	r1, [sp, #60]	; 0x3c
   16718:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1671c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   16720:	9908      	ldr	r1, [sp, #32]
   16722:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
   16726:	ec4b ab10 	vmov	d0, sl, fp
   1672a:	ec43 2b1c 	vmov	d12, r2, r3
   1672e:	f002 f85d 	bl	187ec <__ulp>
   16732:	ec4b ab1d 	vmov	d13, sl, fp
   16736:	eeac db00 	vfma.f64	d13, d12, d0
   1673a:	ed8d db08 	vstr	d13, [sp, #32]
   1673e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16740:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16742:	4a65      	ldr	r2, [pc, #404]	; (168d8 <_strtod_l+0xb88>)
   16744:	4019      	ands	r1, r3
   16746:	4291      	cmp	r1, r2
   16748:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   1674c:	d948      	bls.n	167e0 <_strtod_l+0xa90>
   1674e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16750:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   16754:	4293      	cmp	r3, r2
   16756:	d103      	bne.n	16760 <_strtod_l+0xa10>
   16758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1675a:	3301      	adds	r3, #1
   1675c:	f43f ad27 	beq.w	161ae <_strtod_l+0x45e>
   16760:	f8df b164 	ldr.w	fp, [pc, #356]	; 168c8 <_strtod_l+0xb78>
   16764:	f04f 3aff 	mov.w	sl, #4294967295
   16768:	9918      	ldr	r1, [sp, #96]	; 0x60
   1676a:	4620      	mov	r0, r4
   1676c:	f001 fda6 	bl	182bc <_Bfree>
   16770:	4649      	mov	r1, r9
   16772:	4620      	mov	r0, r4
   16774:	f001 fda2 	bl	182bc <_Bfree>
   16778:	4641      	mov	r1, r8
   1677a:	4620      	mov	r0, r4
   1677c:	f001 fd9e 	bl	182bc <_Bfree>
   16780:	4629      	mov	r1, r5
   16782:	4620      	mov	r0, r4
   16784:	f001 fd9a 	bl	182bc <_Bfree>
   16788:	e60e      	b.n	163a8 <_strtod_l+0x658>
   1678a:	f1ba 0f00 	cmp.w	sl, #0
   1678e:	d113      	bne.n	167b8 <_strtod_l+0xa68>
   16790:	9b08      	ldr	r3, [sp, #32]
   16792:	f3c3 0313 	ubfx	r3, r3, #0, #20
   16796:	b9b3      	cbnz	r3, 167c6 <_strtod_l+0xa76>
   16798:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1679c:	eeb4 0bc7 	vcmpe.f64	d0, d7
   167a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   167a4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
   167a8:	d401      	bmi.n	167ae <_strtod_l+0xa5e>
   167aa:	ee20 8b08 	vmul.f64	d8, d0, d8
   167ae:	eeb1 7b48 	vneg.f64	d7, d8
   167b2:	ec53 2b17 	vmov	r2, r3, d7
   167b6:	e7a6      	b.n	16706 <_strtod_l+0x9b6>
   167b8:	f1ba 0f01 	cmp.w	sl, #1
   167bc:	d103      	bne.n	167c6 <_strtod_l+0xa76>
   167be:	9b08      	ldr	r3, [sp, #32]
   167c0:	2b00      	cmp	r3, #0
   167c2:	f43f ad8a 	beq.w	162da <_strtod_l+0x58a>
   167c6:	2200      	movs	r2, #0
   167c8:	4b44      	ldr	r3, [pc, #272]	; (168dc <_strtod_l+0xb8c>)
   167ca:	e79a      	b.n	16702 <_strtod_l+0x9b2>
   167cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   167ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
   167d2:	ee20 8b08 	vmul.f64	d8, d0, d8
   167d6:	2b00      	cmp	r3, #0
   167d8:	d0e9      	beq.n	167ae <_strtod_l+0xa5e>
   167da:	ec53 2b18 	vmov	r2, r3, d8
   167de:	e792      	b.n	16706 <_strtod_l+0x9b6>
   167e0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   167e4:	2f00      	cmp	r7, #0
   167e6:	d1bf      	bne.n	16768 <_strtod_l+0xa18>
   167e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   167ec:	0d1b      	lsrs	r3, r3, #20
   167ee:	051b      	lsls	r3, r3, #20
   167f0:	429e      	cmp	r6, r3
   167f2:	d1b9      	bne.n	16768 <_strtod_l+0xa18>
   167f4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
   167f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   167fa:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
   167fe:	ee38 8b40 	vsub.f64	d8, d8, d0
   16802:	b92b      	cbnz	r3, 16810 <_strtod_l+0xac0>
   16804:	f1ba 0f00 	cmp.w	sl, #0
   16808:	d102      	bne.n	16810 <_strtod_l+0xac0>
   1680a:	f3cb 0213 	ubfx	r2, fp, #0, #20
   1680e:	b3d2      	cbz	r2, 16886 <_strtod_l+0xb36>
   16810:	eeb4 8bc9 	vcmpe.f64	d8, d9
   16814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16818:	f53f acd3 	bmi.w	161c2 <_strtod_l+0x472>
   1681c:	eeb4 8bca 	vcmpe.f64	d8, d10
   16820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16824:	dda0      	ble.n	16768 <_strtod_l+0xa18>
   16826:	e4cc      	b.n	161c2 <_strtod_l+0x472>
   16828:	b1ef      	cbz	r7, 16866 <_strtod_l+0xb16>
   1682a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
   1682e:	d81a      	bhi.n	16866 <_strtod_l+0xb16>
   16830:	ed9f 7b21 	vldr	d7, [pc, #132]	; 168b8 <_strtod_l+0xb68>
   16834:	eeb4 8bc7 	vcmpe.f64	d8, d7
   16838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1683c:	d810      	bhi.n	16860 <_strtod_l+0xb10>
   1683e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
   16842:	ee17 3a90 	vmov	r3, s15
   16846:	2b00      	cmp	r3, #0
   16848:	bf08      	it	eq
   1684a:	2301      	moveq	r3, #1
   1684c:	ee07 3a90 	vmov	s15, r3
   16850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16852:	eeb8 8b67 	vcvt.f64.u32	d8, s15
   16856:	b99b      	cbnz	r3, 16880 <_strtod_l+0xb30>
   16858:	eeb1 7b48 	vneg.f64	d7, d8
   1685c:	ec53 2b17 	vmov	r2, r3, d7
   16860:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   16864:	1b8b      	subs	r3, r1, r6
   16866:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1686a:	ec43 2b1c 	vmov	d12, r2, r3
   1686e:	f001 ffbd 	bl	187ec <__ulp>
   16872:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   16876:	eeac 7b00 	vfma.f64	d7, d12, d0
   1687a:	ec5b ab17 	vmov	sl, fp, d7
   1687e:	e7b1      	b.n	167e4 <_strtod_l+0xa94>
   16880:	ec53 2b18 	vmov	r2, r3, d8
   16884:	e7ec      	b.n	16860 <_strtod_l+0xb10>
   16886:	eeb4 8bcb 	vcmpe.f64	d8, d11
   1688a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1688e:	f57f af6b 	bpl.w	16768 <_strtod_l+0xa18>
   16892:	e496      	b.n	161c2 <_strtod_l+0x472>
   16894:	2300      	movs	r3, #0
   16896:	930d      	str	r3, [sp, #52]	; 0x34
   16898:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1689a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1689c:	6013      	str	r3, [r2, #0]
   1689e:	f7ff ba9d 	b.w	15ddc <_strtod_l+0x8c>
   168a2:	2a65      	cmp	r2, #101	; 0x65
   168a4:	f04f 0100 	mov.w	r1, #0
   168a8:	f43f ab97 	beq.w	15fda <_strtod_l+0x28a>
   168ac:	2701      	movs	r7, #1
   168ae:	460b      	mov	r3, r1
   168b0:	9704      	str	r7, [sp, #16]
   168b2:	f7ff bb0a 	b.w	15eca <_strtod_l+0x17a>
   168b6:	bf00      	nop
   168b8:	ffc00000 	.word	0xffc00000
   168bc:	41dfffff 	.word	0x41dfffff
   168c0:	000fffff 	.word	0x000fffff
   168c4:	7ff00000 	.word	0x7ff00000
   168c8:	7fefffff 	.word	0x7fefffff
   168cc:	39500000 	.word	0x39500000
   168d0:	3ff00000 	.word	0x3ff00000
   168d4:	7fe00000 	.word	0x7fe00000
   168d8:	7c9fffff 	.word	0x7c9fffff
   168dc:	bff00000 	.word	0xbff00000

000168e0 <_strtod_r>:
   168e0:	4b05      	ldr	r3, [pc, #20]	; (168f8 <_strtod_r+0x18>)
   168e2:	681b      	ldr	r3, [r3, #0]
   168e4:	b410      	push	{r4}
   168e6:	6a1b      	ldr	r3, [r3, #32]
   168e8:	4c04      	ldr	r4, [pc, #16]	; (168fc <_strtod_r+0x1c>)
   168ea:	2b00      	cmp	r3, #0
   168ec:	bf08      	it	eq
   168ee:	4623      	moveq	r3, r4
   168f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   168f4:	f7ff ba2c 	b.w	15d50 <_strtod_l>
   168f8:	00029e28 	.word	0x00029e28
   168fc:	00029e8c 	.word	0x00029e8c

00016900 <_strtol_l.isra.0>:
   16900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16904:	4680      	mov	r8, r0
   16906:	4689      	mov	r9, r1
   16908:	4692      	mov	sl, r2
   1690a:	461e      	mov	r6, r3
   1690c:	460f      	mov	r7, r1
   1690e:	463d      	mov	r5, r7
   16910:	9808      	ldr	r0, [sp, #32]
   16912:	f815 4b01 	ldrb.w	r4, [r5], #1
   16916:	f001 fbbb 	bl	18090 <__locale_ctype_ptr_l>
   1691a:	4420      	add	r0, r4
   1691c:	7843      	ldrb	r3, [r0, #1]
   1691e:	f013 0308 	ands.w	r3, r3, #8
   16922:	d132      	bne.n	1698a <_strtol_l.isra.0+0x8a>
   16924:	2c2d      	cmp	r4, #45	; 0x2d
   16926:	d132      	bne.n	1698e <_strtol_l.isra.0+0x8e>
   16928:	787c      	ldrb	r4, [r7, #1]
   1692a:	1cbd      	adds	r5, r7, #2
   1692c:	2201      	movs	r2, #1
   1692e:	2e00      	cmp	r6, #0
   16930:	d05d      	beq.n	169ee <_strtol_l.isra.0+0xee>
   16932:	2e10      	cmp	r6, #16
   16934:	d109      	bne.n	1694a <_strtol_l.isra.0+0x4a>
   16936:	2c30      	cmp	r4, #48	; 0x30
   16938:	d107      	bne.n	1694a <_strtol_l.isra.0+0x4a>
   1693a:	782b      	ldrb	r3, [r5, #0]
   1693c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   16940:	2b58      	cmp	r3, #88	; 0x58
   16942:	d14f      	bne.n	169e4 <_strtol_l.isra.0+0xe4>
   16944:	786c      	ldrb	r4, [r5, #1]
   16946:	2610      	movs	r6, #16
   16948:	3502      	adds	r5, #2
   1694a:	2a00      	cmp	r2, #0
   1694c:	bf14      	ite	ne
   1694e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
   16952:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
   16956:	2700      	movs	r7, #0
   16958:	fbb1 fcf6 	udiv	ip, r1, r6
   1695c:	4638      	mov	r0, r7
   1695e:	fb06 1e1c 	mls	lr, r6, ip, r1
   16962:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   16966:	2b09      	cmp	r3, #9
   16968:	d817      	bhi.n	1699a <_strtol_l.isra.0+0x9a>
   1696a:	461c      	mov	r4, r3
   1696c:	42a6      	cmp	r6, r4
   1696e:	dd23      	ble.n	169b8 <_strtol_l.isra.0+0xb8>
   16970:	1c7b      	adds	r3, r7, #1
   16972:	d007      	beq.n	16984 <_strtol_l.isra.0+0x84>
   16974:	4584      	cmp	ip, r0
   16976:	d31c      	bcc.n	169b2 <_strtol_l.isra.0+0xb2>
   16978:	d101      	bne.n	1697e <_strtol_l.isra.0+0x7e>
   1697a:	45a6      	cmp	lr, r4
   1697c:	db19      	blt.n	169b2 <_strtol_l.isra.0+0xb2>
   1697e:	fb00 4006 	mla	r0, r0, r6, r4
   16982:	2701      	movs	r7, #1
   16984:	f815 4b01 	ldrb.w	r4, [r5], #1
   16988:	e7eb      	b.n	16962 <_strtol_l.isra.0+0x62>
   1698a:	462f      	mov	r7, r5
   1698c:	e7bf      	b.n	1690e <_strtol_l.isra.0+0xe>
   1698e:	2c2b      	cmp	r4, #43	; 0x2b
   16990:	bf04      	itt	eq
   16992:	1cbd      	addeq	r5, r7, #2
   16994:	787c      	ldrbeq	r4, [r7, #1]
   16996:	461a      	mov	r2, r3
   16998:	e7c9      	b.n	1692e <_strtol_l.isra.0+0x2e>
   1699a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1699e:	2b19      	cmp	r3, #25
   169a0:	d801      	bhi.n	169a6 <_strtol_l.isra.0+0xa6>
   169a2:	3c37      	subs	r4, #55	; 0x37
   169a4:	e7e2      	b.n	1696c <_strtol_l.isra.0+0x6c>
   169a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   169aa:	2b19      	cmp	r3, #25
   169ac:	d804      	bhi.n	169b8 <_strtol_l.isra.0+0xb8>
   169ae:	3c57      	subs	r4, #87	; 0x57
   169b0:	e7dc      	b.n	1696c <_strtol_l.isra.0+0x6c>
   169b2:	f04f 37ff 	mov.w	r7, #4294967295
   169b6:	e7e5      	b.n	16984 <_strtol_l.isra.0+0x84>
   169b8:	1c7b      	adds	r3, r7, #1
   169ba:	d108      	bne.n	169ce <_strtol_l.isra.0+0xce>
   169bc:	2322      	movs	r3, #34	; 0x22
   169be:	f8c8 3000 	str.w	r3, [r8]
   169c2:	4608      	mov	r0, r1
   169c4:	f1ba 0f00 	cmp.w	sl, #0
   169c8:	d107      	bne.n	169da <_strtol_l.isra.0+0xda>
   169ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169ce:	b102      	cbz	r2, 169d2 <_strtol_l.isra.0+0xd2>
   169d0:	4240      	negs	r0, r0
   169d2:	f1ba 0f00 	cmp.w	sl, #0
   169d6:	d0f8      	beq.n	169ca <_strtol_l.isra.0+0xca>
   169d8:	b10f      	cbz	r7, 169de <_strtol_l.isra.0+0xde>
   169da:	f105 39ff 	add.w	r9, r5, #4294967295
   169de:	f8ca 9000 	str.w	r9, [sl]
   169e2:	e7f2      	b.n	169ca <_strtol_l.isra.0+0xca>
   169e4:	2430      	movs	r4, #48	; 0x30
   169e6:	2e00      	cmp	r6, #0
   169e8:	d1af      	bne.n	1694a <_strtol_l.isra.0+0x4a>
   169ea:	2608      	movs	r6, #8
   169ec:	e7ad      	b.n	1694a <_strtol_l.isra.0+0x4a>
   169ee:	2c30      	cmp	r4, #48	; 0x30
   169f0:	d0a3      	beq.n	1693a <_strtol_l.isra.0+0x3a>
   169f2:	260a      	movs	r6, #10
   169f4:	e7a9      	b.n	1694a <_strtol_l.isra.0+0x4a>
	...

000169f8 <_strtol_r>:
   169f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   169fa:	4c06      	ldr	r4, [pc, #24]	; (16a14 <_strtol_r+0x1c>)
   169fc:	4d06      	ldr	r5, [pc, #24]	; (16a18 <_strtol_r+0x20>)
   169fe:	6824      	ldr	r4, [r4, #0]
   16a00:	6a24      	ldr	r4, [r4, #32]
   16a02:	2c00      	cmp	r4, #0
   16a04:	bf08      	it	eq
   16a06:	462c      	moveq	r4, r5
   16a08:	9400      	str	r4, [sp, #0]
   16a0a:	f7ff ff79 	bl	16900 <_strtol_l.isra.0>
   16a0e:	b003      	add	sp, #12
   16a10:	bd30      	pop	{r4, r5, pc}
   16a12:	bf00      	nop
   16a14:	00029e28 	.word	0x00029e28
   16a18:	00029e8c 	.word	0x00029e8c

00016a1c <__swbuf_r>:
   16a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a1e:	460e      	mov	r6, r1
   16a20:	4614      	mov	r4, r2
   16a22:	4605      	mov	r5, r0
   16a24:	b118      	cbz	r0, 16a2e <__swbuf_r+0x12>
   16a26:	6983      	ldr	r3, [r0, #24]
   16a28:	b90b      	cbnz	r3, 16a2e <__swbuf_r+0x12>
   16a2a:	f000 ff81 	bl	17930 <__sinit>
   16a2e:	4b21      	ldr	r3, [pc, #132]	; (16ab4 <__swbuf_r+0x98>)
   16a30:	429c      	cmp	r4, r3
   16a32:	d12a      	bne.n	16a8a <__swbuf_r+0x6e>
   16a34:	686c      	ldr	r4, [r5, #4]
   16a36:	69a3      	ldr	r3, [r4, #24]
   16a38:	60a3      	str	r3, [r4, #8]
   16a3a:	89a3      	ldrh	r3, [r4, #12]
   16a3c:	071a      	lsls	r2, r3, #28
   16a3e:	d52e      	bpl.n	16a9e <__swbuf_r+0x82>
   16a40:	6923      	ldr	r3, [r4, #16]
   16a42:	b363      	cbz	r3, 16a9e <__swbuf_r+0x82>
   16a44:	6923      	ldr	r3, [r4, #16]
   16a46:	6820      	ldr	r0, [r4, #0]
   16a48:	1ac0      	subs	r0, r0, r3
   16a4a:	6963      	ldr	r3, [r4, #20]
   16a4c:	b2f6      	uxtb	r6, r6
   16a4e:	4283      	cmp	r3, r0
   16a50:	4637      	mov	r7, r6
   16a52:	dc04      	bgt.n	16a5e <__swbuf_r+0x42>
   16a54:	4621      	mov	r1, r4
   16a56:	4628      	mov	r0, r5
   16a58:	f000 ff00 	bl	1785c <_fflush_r>
   16a5c:	bb28      	cbnz	r0, 16aaa <__swbuf_r+0x8e>
   16a5e:	68a3      	ldr	r3, [r4, #8]
   16a60:	3b01      	subs	r3, #1
   16a62:	60a3      	str	r3, [r4, #8]
   16a64:	6823      	ldr	r3, [r4, #0]
   16a66:	1c5a      	adds	r2, r3, #1
   16a68:	6022      	str	r2, [r4, #0]
   16a6a:	701e      	strb	r6, [r3, #0]
   16a6c:	6963      	ldr	r3, [r4, #20]
   16a6e:	3001      	adds	r0, #1
   16a70:	4283      	cmp	r3, r0
   16a72:	d004      	beq.n	16a7e <__swbuf_r+0x62>
   16a74:	89a3      	ldrh	r3, [r4, #12]
   16a76:	07db      	lsls	r3, r3, #31
   16a78:	d519      	bpl.n	16aae <__swbuf_r+0x92>
   16a7a:	2e0a      	cmp	r6, #10
   16a7c:	d117      	bne.n	16aae <__swbuf_r+0x92>
   16a7e:	4621      	mov	r1, r4
   16a80:	4628      	mov	r0, r5
   16a82:	f000 feeb 	bl	1785c <_fflush_r>
   16a86:	b190      	cbz	r0, 16aae <__swbuf_r+0x92>
   16a88:	e00f      	b.n	16aaa <__swbuf_r+0x8e>
   16a8a:	4b0b      	ldr	r3, [pc, #44]	; (16ab8 <__swbuf_r+0x9c>)
   16a8c:	429c      	cmp	r4, r3
   16a8e:	d101      	bne.n	16a94 <__swbuf_r+0x78>
   16a90:	68ac      	ldr	r4, [r5, #8]
   16a92:	e7d0      	b.n	16a36 <__swbuf_r+0x1a>
   16a94:	4b09      	ldr	r3, [pc, #36]	; (16abc <__swbuf_r+0xa0>)
   16a96:	429c      	cmp	r4, r3
   16a98:	bf08      	it	eq
   16a9a:	68ec      	ldreq	r4, [r5, #12]
   16a9c:	e7cb      	b.n	16a36 <__swbuf_r+0x1a>
   16a9e:	4621      	mov	r1, r4
   16aa0:	4628      	mov	r0, r5
   16aa2:	f000 f80d 	bl	16ac0 <__swsetup_r>
   16aa6:	2800      	cmp	r0, #0
   16aa8:	d0cc      	beq.n	16a44 <__swbuf_r+0x28>
   16aaa:	f04f 37ff 	mov.w	r7, #4294967295
   16aae:	4638      	mov	r0, r7
   16ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ab2:	bf00      	nop
   16ab4:	00019858 	.word	0x00019858
   16ab8:	00019878 	.word	0x00019878
   16abc:	00019838 	.word	0x00019838

00016ac0 <__swsetup_r>:
   16ac0:	4b32      	ldr	r3, [pc, #200]	; (16b8c <__swsetup_r+0xcc>)
   16ac2:	b570      	push	{r4, r5, r6, lr}
   16ac4:	681d      	ldr	r5, [r3, #0]
   16ac6:	4606      	mov	r6, r0
   16ac8:	460c      	mov	r4, r1
   16aca:	b125      	cbz	r5, 16ad6 <__swsetup_r+0x16>
   16acc:	69ab      	ldr	r3, [r5, #24]
   16ace:	b913      	cbnz	r3, 16ad6 <__swsetup_r+0x16>
   16ad0:	4628      	mov	r0, r5
   16ad2:	f000 ff2d 	bl	17930 <__sinit>
   16ad6:	4b2e      	ldr	r3, [pc, #184]	; (16b90 <__swsetup_r+0xd0>)
   16ad8:	429c      	cmp	r4, r3
   16ada:	d10f      	bne.n	16afc <__swsetup_r+0x3c>
   16adc:	686c      	ldr	r4, [r5, #4]
   16ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16ae2:	b29a      	uxth	r2, r3
   16ae4:	0715      	lsls	r5, r2, #28
   16ae6:	d42c      	bmi.n	16b42 <__swsetup_r+0x82>
   16ae8:	06d0      	lsls	r0, r2, #27
   16aea:	d411      	bmi.n	16b10 <__swsetup_r+0x50>
   16aec:	2209      	movs	r2, #9
   16aee:	6032      	str	r2, [r6, #0]
   16af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16af4:	81a3      	strh	r3, [r4, #12]
   16af6:	f04f 30ff 	mov.w	r0, #4294967295
   16afa:	e03e      	b.n	16b7a <__swsetup_r+0xba>
   16afc:	4b25      	ldr	r3, [pc, #148]	; (16b94 <__swsetup_r+0xd4>)
   16afe:	429c      	cmp	r4, r3
   16b00:	d101      	bne.n	16b06 <__swsetup_r+0x46>
   16b02:	68ac      	ldr	r4, [r5, #8]
   16b04:	e7eb      	b.n	16ade <__swsetup_r+0x1e>
   16b06:	4b24      	ldr	r3, [pc, #144]	; (16b98 <__swsetup_r+0xd8>)
   16b08:	429c      	cmp	r4, r3
   16b0a:	bf08      	it	eq
   16b0c:	68ec      	ldreq	r4, [r5, #12]
   16b0e:	e7e6      	b.n	16ade <__swsetup_r+0x1e>
   16b10:	0751      	lsls	r1, r2, #29
   16b12:	d512      	bpl.n	16b3a <__swsetup_r+0x7a>
   16b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16b16:	b141      	cbz	r1, 16b2a <__swsetup_r+0x6a>
   16b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
   16b1c:	4299      	cmp	r1, r3
   16b1e:	d002      	beq.n	16b26 <__swsetup_r+0x66>
   16b20:	4630      	mov	r0, r6
   16b22:	f7fe f959 	bl	14dd8 <_free_r>
   16b26:	2300      	movs	r3, #0
   16b28:	6363      	str	r3, [r4, #52]	; 0x34
   16b2a:	89a3      	ldrh	r3, [r4, #12]
   16b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   16b30:	81a3      	strh	r3, [r4, #12]
   16b32:	2300      	movs	r3, #0
   16b34:	6063      	str	r3, [r4, #4]
   16b36:	6923      	ldr	r3, [r4, #16]
   16b38:	6023      	str	r3, [r4, #0]
   16b3a:	89a3      	ldrh	r3, [r4, #12]
   16b3c:	f043 0308 	orr.w	r3, r3, #8
   16b40:	81a3      	strh	r3, [r4, #12]
   16b42:	6923      	ldr	r3, [r4, #16]
   16b44:	b94b      	cbnz	r3, 16b5a <__swsetup_r+0x9a>
   16b46:	89a3      	ldrh	r3, [r4, #12]
   16b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
   16b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16b50:	d003      	beq.n	16b5a <__swsetup_r+0x9a>
   16b52:	4621      	mov	r1, r4
   16b54:	4630      	mov	r0, r6
   16b56:	f001 fad3 	bl	18100 <__smakebuf_r>
   16b5a:	89a2      	ldrh	r2, [r4, #12]
   16b5c:	f012 0301 	ands.w	r3, r2, #1
   16b60:	d00c      	beq.n	16b7c <__swsetup_r+0xbc>
   16b62:	2300      	movs	r3, #0
   16b64:	60a3      	str	r3, [r4, #8]
   16b66:	6963      	ldr	r3, [r4, #20]
   16b68:	425b      	negs	r3, r3
   16b6a:	61a3      	str	r3, [r4, #24]
   16b6c:	6923      	ldr	r3, [r4, #16]
   16b6e:	b953      	cbnz	r3, 16b86 <__swsetup_r+0xc6>
   16b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16b74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   16b78:	d1ba      	bne.n	16af0 <__swsetup_r+0x30>
   16b7a:	bd70      	pop	{r4, r5, r6, pc}
   16b7c:	0792      	lsls	r2, r2, #30
   16b7e:	bf58      	it	pl
   16b80:	6963      	ldrpl	r3, [r4, #20]
   16b82:	60a3      	str	r3, [r4, #8]
   16b84:	e7f2      	b.n	16b6c <__swsetup_r+0xac>
   16b86:	2000      	movs	r0, #0
   16b88:	e7f7      	b.n	16b7a <__swsetup_r+0xba>
   16b8a:	bf00      	nop
   16b8c:	00029e28 	.word	0x00029e28
   16b90:	00019858 	.word	0x00019858
   16b94:	00019878 	.word	0x00019878
   16b98:	00019838 	.word	0x00019838

00016b9c <quorem>:
   16b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ba0:	6903      	ldr	r3, [r0, #16]
   16ba2:	690c      	ldr	r4, [r1, #16]
   16ba4:	42a3      	cmp	r3, r4
   16ba6:	4680      	mov	r8, r0
   16ba8:	f2c0 8082 	blt.w	16cb0 <quorem+0x114>
   16bac:	3c01      	subs	r4, #1
   16bae:	f101 0714 	add.w	r7, r1, #20
   16bb2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   16bb6:	f100 0614 	add.w	r6, r0, #20
   16bba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   16bbe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   16bc2:	eb06 030c 	add.w	r3, r6, ip
   16bc6:	3501      	adds	r5, #1
   16bc8:	eb07 090c 	add.w	r9, r7, ip
   16bcc:	9301      	str	r3, [sp, #4]
   16bce:	fbb0 f5f5 	udiv	r5, r0, r5
   16bd2:	b395      	cbz	r5, 16c3a <quorem+0x9e>
   16bd4:	f04f 0a00 	mov.w	sl, #0
   16bd8:	4638      	mov	r0, r7
   16bda:	46b6      	mov	lr, r6
   16bdc:	46d3      	mov	fp, sl
   16bde:	f850 2b04 	ldr.w	r2, [r0], #4
   16be2:	b293      	uxth	r3, r2
   16be4:	fb05 a303 	mla	r3, r5, r3, sl
   16be8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   16bec:	b29b      	uxth	r3, r3
   16bee:	ebab 0303 	sub.w	r3, fp, r3
   16bf2:	0c12      	lsrs	r2, r2, #16
   16bf4:	f8de b000 	ldr.w	fp, [lr]
   16bf8:	fb05 a202 	mla	r2, r5, r2, sl
   16bfc:	fa13 f38b 	uxtah	r3, r3, fp
   16c00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   16c04:	fa1f fb82 	uxth.w	fp, r2
   16c08:	f8de 2000 	ldr.w	r2, [lr]
   16c0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   16c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
   16c14:	b29b      	uxth	r3, r3
   16c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   16c1a:	4581      	cmp	r9, r0
   16c1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
   16c20:	f84e 3b04 	str.w	r3, [lr], #4
   16c24:	d2db      	bcs.n	16bde <quorem+0x42>
   16c26:	f856 300c 	ldr.w	r3, [r6, ip]
   16c2a:	b933      	cbnz	r3, 16c3a <quorem+0x9e>
   16c2c:	9b01      	ldr	r3, [sp, #4]
   16c2e:	3b04      	subs	r3, #4
   16c30:	429e      	cmp	r6, r3
   16c32:	461a      	mov	r2, r3
   16c34:	d330      	bcc.n	16c98 <quorem+0xfc>
   16c36:	f8c8 4010 	str.w	r4, [r8, #16]
   16c3a:	4640      	mov	r0, r8
   16c3c:	f001 fd5e 	bl	186fc <__mcmp>
   16c40:	2800      	cmp	r0, #0
   16c42:	db25      	blt.n	16c90 <quorem+0xf4>
   16c44:	3501      	adds	r5, #1
   16c46:	4630      	mov	r0, r6
   16c48:	f04f 0c00 	mov.w	ip, #0
   16c4c:	f857 2b04 	ldr.w	r2, [r7], #4
   16c50:	f8d0 e000 	ldr.w	lr, [r0]
   16c54:	b293      	uxth	r3, r2
   16c56:	ebac 0303 	sub.w	r3, ip, r3
   16c5a:	0c12      	lsrs	r2, r2, #16
   16c5c:	fa13 f38e 	uxtah	r3, r3, lr
   16c60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   16c64:	eb02 4223 	add.w	r2, r2, r3, asr #16
   16c68:	b29b      	uxth	r3, r3
   16c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   16c6e:	45b9      	cmp	r9, r7
   16c70:	ea4f 4c22 	mov.w	ip, r2, asr #16
   16c74:	f840 3b04 	str.w	r3, [r0], #4
   16c78:	d2e8      	bcs.n	16c4c <quorem+0xb0>
   16c7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   16c7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   16c82:	b92a      	cbnz	r2, 16c90 <quorem+0xf4>
   16c84:	3b04      	subs	r3, #4
   16c86:	429e      	cmp	r6, r3
   16c88:	461a      	mov	r2, r3
   16c8a:	d30b      	bcc.n	16ca4 <quorem+0x108>
   16c8c:	f8c8 4010 	str.w	r4, [r8, #16]
   16c90:	4628      	mov	r0, r5
   16c92:	b003      	add	sp, #12
   16c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c98:	6812      	ldr	r2, [r2, #0]
   16c9a:	3b04      	subs	r3, #4
   16c9c:	2a00      	cmp	r2, #0
   16c9e:	d1ca      	bne.n	16c36 <quorem+0x9a>
   16ca0:	3c01      	subs	r4, #1
   16ca2:	e7c5      	b.n	16c30 <quorem+0x94>
   16ca4:	6812      	ldr	r2, [r2, #0]
   16ca6:	3b04      	subs	r3, #4
   16ca8:	2a00      	cmp	r2, #0
   16caa:	d1ef      	bne.n	16c8c <quorem+0xf0>
   16cac:	3c01      	subs	r4, #1
   16cae:	e7ea      	b.n	16c86 <quorem+0xea>
   16cb0:	2000      	movs	r0, #0
   16cb2:	e7ee      	b.n	16c92 <quorem+0xf6>
   16cb4:	0000      	movs	r0, r0
	...

00016cb8 <_dtoa_r>:
   16cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cbc:	ec57 6b10 	vmov	r6, r7, d0
   16cc0:	b095      	sub	sp, #84	; 0x54
   16cc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   16cc4:	9108      	str	r1, [sp, #32]
   16cc6:	4604      	mov	r4, r0
   16cc8:	920a      	str	r2, [sp, #40]	; 0x28
   16cca:	9311      	str	r3, [sp, #68]	; 0x44
   16ccc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
   16cd0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   16cd4:	b93d      	cbnz	r5, 16ce6 <_dtoa_r+0x2e>
   16cd6:	2010      	movs	r0, #16
   16cd8:	f7fe f854 	bl	14d84 <malloc>
   16cdc:	6260      	str	r0, [r4, #36]	; 0x24
   16cde:	e9c0 5501 	strd	r5, r5, [r0, #4]
   16ce2:	6005      	str	r5, [r0, #0]
   16ce4:	60c5      	str	r5, [r0, #12]
   16ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16ce8:	6819      	ldr	r1, [r3, #0]
   16cea:	b151      	cbz	r1, 16d02 <_dtoa_r+0x4a>
   16cec:	685a      	ldr	r2, [r3, #4]
   16cee:	604a      	str	r2, [r1, #4]
   16cf0:	2301      	movs	r3, #1
   16cf2:	4093      	lsls	r3, r2
   16cf4:	608b      	str	r3, [r1, #8]
   16cf6:	4620      	mov	r0, r4
   16cf8:	f001 fae0 	bl	182bc <_Bfree>
   16cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16cfe:	2200      	movs	r2, #0
   16d00:	601a      	str	r2, [r3, #0]
   16d02:	1e3b      	subs	r3, r7, #0
   16d04:	bfb9      	ittee	lt
   16d06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   16d0a:	9303      	strlt	r3, [sp, #12]
   16d0c:	2300      	movge	r3, #0
   16d0e:	f8c8 3000 	strge.w	r3, [r8]
   16d12:	9d03      	ldr	r5, [sp, #12]
   16d14:	4bac      	ldr	r3, [pc, #688]	; (16fc8 <_dtoa_r+0x310>)
   16d16:	bfbc      	itt	lt
   16d18:	2201      	movlt	r2, #1
   16d1a:	f8c8 2000 	strlt.w	r2, [r8]
   16d1e:	43ab      	bics	r3, r5
   16d20:	d11b      	bne.n	16d5a <_dtoa_r+0xa2>
   16d22:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16d24:	f242 730f 	movw	r3, #9999	; 0x270f
   16d28:	6013      	str	r3, [r2, #0]
   16d2a:	9b02      	ldr	r3, [sp, #8]
   16d2c:	b923      	cbnz	r3, 16d38 <_dtoa_r+0x80>
   16d2e:	f3c5 0513 	ubfx	r5, r5, #0, #20
   16d32:	2d00      	cmp	r5, #0
   16d34:	f000 84dd 	beq.w	176f2 <_dtoa_r+0xa3a>
   16d38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16d3a:	b953      	cbnz	r3, 16d52 <_dtoa_r+0x9a>
   16d3c:	4ba3      	ldr	r3, [pc, #652]	; (16fcc <_dtoa_r+0x314>)
   16d3e:	e020      	b.n	16d82 <_dtoa_r+0xca>
   16d40:	4ba3      	ldr	r3, [pc, #652]	; (16fd0 <_dtoa_r+0x318>)
   16d42:	9304      	str	r3, [sp, #16]
   16d44:	3308      	adds	r3, #8
   16d46:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16d48:	6013      	str	r3, [r2, #0]
   16d4a:	9804      	ldr	r0, [sp, #16]
   16d4c:	b015      	add	sp, #84	; 0x54
   16d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d52:	4b9e      	ldr	r3, [pc, #632]	; (16fcc <_dtoa_r+0x314>)
   16d54:	9304      	str	r3, [sp, #16]
   16d56:	3303      	adds	r3, #3
   16d58:	e7f5      	b.n	16d46 <_dtoa_r+0x8e>
   16d5a:	ed9d 7b02 	vldr	d7, [sp, #8]
   16d5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
   16d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16d66:	ed8d 7b04 	vstr	d7, [sp, #16]
   16d6a:	d10c      	bne.n	16d86 <_dtoa_r+0xce>
   16d6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16d6e:	2301      	movs	r3, #1
   16d70:	6013      	str	r3, [r2, #0]
   16d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16d74:	2b00      	cmp	r3, #0
   16d76:	f000 84b9 	beq.w	176ec <_dtoa_r+0xa34>
   16d7a:	4b96      	ldr	r3, [pc, #600]	; (16fd4 <_dtoa_r+0x31c>)
   16d7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16d7e:	6013      	str	r3, [r2, #0]
   16d80:	3b01      	subs	r3, #1
   16d82:	9304      	str	r3, [sp, #16]
   16d84:	e7e1      	b.n	16d4a <_dtoa_r+0x92>
   16d86:	a913      	add	r1, sp, #76	; 0x4c
   16d88:	aa12      	add	r2, sp, #72	; 0x48
   16d8a:	ed9d 0b04 	vldr	d0, [sp, #16]
   16d8e:	4620      	mov	r0, r4
   16d90:	f001 fda2 	bl	188d8 <__d2b>
   16d94:	f3c5 560a 	ubfx	r6, r5, #20, #11
   16d98:	9001      	str	r0, [sp, #4]
   16d9a:	9912      	ldr	r1, [sp, #72]	; 0x48
   16d9c:	2e00      	cmp	r6, #0
   16d9e:	d046      	beq.n	16e2e <_dtoa_r+0x176>
   16da0:	9805      	ldr	r0, [sp, #20]
   16da2:	f3c0 0013 	ubfx	r0, r0, #0, #20
   16da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16daa:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   16dae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   16db2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
   16db6:	2700      	movs	r7, #0
   16db8:	ee07 aa90 	vmov	s15, sl
   16dbc:	ec43 2b16 	vmov	d6, r2, r3
   16dc0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   16dc4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 16fb0 <_dtoa_r+0x2f8>
   16dc8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
   16dcc:	ee36 7b47 	vsub.f64	d7, d6, d7
   16dd0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 16fb8 <_dtoa_r+0x300>
   16dd4:	eea7 6b04 	vfma.f64	d6, d7, d4
   16dd8:	eeb0 7b46 	vmov.f64	d7, d6
   16ddc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 16fc0 <_dtoa_r+0x308>
   16de0:	eea5 7b06 	vfma.f64	d7, d5, d6
   16de4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   16de8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   16dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16df0:	ee16 ba90 	vmov	fp, s13
   16df4:	d508      	bpl.n	16e08 <_dtoa_r+0x150>
   16df6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   16dfa:	eeb4 6b47 	vcmp.f64	d6, d7
   16dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16e02:	bf18      	it	ne
   16e04:	f10b 3bff 	addne.w	fp, fp, #4294967295
   16e08:	f1bb 0f16 	cmp.w	fp, #22
   16e0c:	d834      	bhi.n	16e78 <_dtoa_r+0x1c0>
   16e0e:	4b72      	ldr	r3, [pc, #456]	; (16fd8 <_dtoa_r+0x320>)
   16e10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   16e14:	ed93 7b00 	vldr	d7, [r3]
   16e18:	ed9d 6b02 	vldr	d6, [sp, #8]
   16e1c:	eeb4 7bc6 	vcmpe.f64	d7, d6
   16e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16e24:	dd01      	ble.n	16e2a <_dtoa_r+0x172>
   16e26:	f10b 3bff 	add.w	fp, fp, #4294967295
   16e2a:	2300      	movs	r3, #0
   16e2c:	e025      	b.n	16e7a <_dtoa_r+0x1c2>
   16e2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16e30:	eb01 0a03 	add.w	sl, r1, r3
   16e34:	f20a 4332 	addw	r3, sl, #1074	; 0x432
   16e38:	2b20      	cmp	r3, #32
   16e3a:	dd17      	ble.n	16e6c <_dtoa_r+0x1b4>
   16e3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   16e40:	9a02      	ldr	r2, [sp, #8]
   16e42:	409d      	lsls	r5, r3
   16e44:	f20a 4312 	addw	r3, sl, #1042	; 0x412
   16e48:	fa22 f303 	lsr.w	r3, r2, r3
   16e4c:	432b      	orrs	r3, r5
   16e4e:	ee07 3a90 	vmov	s15, r3
   16e52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   16e56:	f10a 3aff 	add.w	sl, sl, #4294967295
   16e5a:	ed8d 7b04 	vstr	d7, [sp, #16]
   16e5e:	9805      	ldr	r0, [sp, #20]
   16e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16e64:	2701      	movs	r7, #1
   16e66:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
   16e6a:	e7a5      	b.n	16db8 <_dtoa_r+0x100>
   16e6c:	9a02      	ldr	r2, [sp, #8]
   16e6e:	f1c3 0320 	rsb	r3, r3, #32
   16e72:	fa02 f303 	lsl.w	r3, r2, r3
   16e76:	e7ea      	b.n	16e4e <_dtoa_r+0x196>
   16e78:	2301      	movs	r3, #1
   16e7a:	eba1 0a0a 	sub.w	sl, r1, sl
   16e7e:	9310      	str	r3, [sp, #64]	; 0x40
   16e80:	f1ba 0301 	subs.w	r3, sl, #1
   16e84:	9307      	str	r3, [sp, #28]
   16e86:	bf43      	ittte	mi
   16e88:	2300      	movmi	r3, #0
   16e8a:	f1ca 0a01 	rsbmi	sl, sl, #1
   16e8e:	9307      	strmi	r3, [sp, #28]
   16e90:	f04f 0a00 	movpl.w	sl, #0
   16e94:	f1bb 0f00 	cmp.w	fp, #0
   16e98:	db19      	blt.n	16ece <_dtoa_r+0x216>
   16e9a:	9b07      	ldr	r3, [sp, #28]
   16e9c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   16ea0:	445b      	add	r3, fp
   16ea2:	9307      	str	r3, [sp, #28]
   16ea4:	f04f 0800 	mov.w	r8, #0
   16ea8:	9b08      	ldr	r3, [sp, #32]
   16eaa:	2b09      	cmp	r3, #9
   16eac:	d866      	bhi.n	16f7c <_dtoa_r+0x2c4>
   16eae:	2b05      	cmp	r3, #5
   16eb0:	bfc4      	itt	gt
   16eb2:	3b04      	subgt	r3, #4
   16eb4:	9308      	strgt	r3, [sp, #32]
   16eb6:	9b08      	ldr	r3, [sp, #32]
   16eb8:	f1a3 0302 	sub.w	r3, r3, #2
   16ebc:	bfcc      	ite	gt
   16ebe:	2500      	movgt	r5, #0
   16ec0:	2501      	movle	r5, #1
   16ec2:	2b03      	cmp	r3, #3
   16ec4:	d866      	bhi.n	16f94 <_dtoa_r+0x2dc>
   16ec6:	e8df f003 	tbb	[pc, r3]
   16eca:	5755      	.short	0x5755
   16ecc:	4909      	.short	0x4909
   16ece:	2300      	movs	r3, #0
   16ed0:	ebaa 0a0b 	sub.w	sl, sl, fp
   16ed4:	f1cb 0800 	rsb	r8, fp, #0
   16ed8:	930b      	str	r3, [sp, #44]	; 0x2c
   16eda:	e7e5      	b.n	16ea8 <_dtoa_r+0x1f0>
   16edc:	2301      	movs	r3, #1
   16ede:	9309      	str	r3, [sp, #36]	; 0x24
   16ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16ee2:	2b00      	cmp	r3, #0
   16ee4:	dd59      	ble.n	16f9a <_dtoa_r+0x2e2>
   16ee6:	9306      	str	r3, [sp, #24]
   16ee8:	4699      	mov	r9, r3
   16eea:	6a66      	ldr	r6, [r4, #36]	; 0x24
   16eec:	2200      	movs	r2, #0
   16eee:	6072      	str	r2, [r6, #4]
   16ef0:	2204      	movs	r2, #4
   16ef2:	f102 0014 	add.w	r0, r2, #20
   16ef6:	4298      	cmp	r0, r3
   16ef8:	6871      	ldr	r1, [r6, #4]
   16efa:	d953      	bls.n	16fa4 <_dtoa_r+0x2ec>
   16efc:	4620      	mov	r0, r4
   16efe:	f001 f9a9 	bl	18254 <_Balloc>
   16f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16f04:	6030      	str	r0, [r6, #0]
   16f06:	681b      	ldr	r3, [r3, #0]
   16f08:	9304      	str	r3, [sp, #16]
   16f0a:	f1b9 0f0e 	cmp.w	r9, #14
   16f0e:	f200 80c2 	bhi.w	17096 <_dtoa_r+0x3de>
   16f12:	2d00      	cmp	r5, #0
   16f14:	f000 80bf 	beq.w	17096 <_dtoa_r+0x3de>
   16f18:	ed9d 7b02 	vldr	d7, [sp, #8]
   16f1c:	f1bb 0f00 	cmp.w	fp, #0
   16f20:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   16f24:	f340 80e6 	ble.w	170f4 <_dtoa_r+0x43c>
   16f28:	4a2b      	ldr	r2, [pc, #172]	; (16fd8 <_dtoa_r+0x320>)
   16f2a:	f00b 030f 	and.w	r3, fp, #15
   16f2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16f32:	ed93 7b00 	vldr	d7, [r3]
   16f36:	ea4f 132b 	mov.w	r3, fp, asr #4
   16f3a:	06da      	lsls	r2, r3, #27
   16f3c:	f140 80d8 	bpl.w	170f0 <_dtoa_r+0x438>
   16f40:	4a26      	ldr	r2, [pc, #152]	; (16fdc <_dtoa_r+0x324>)
   16f42:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
   16f46:	ed92 6b08 	vldr	d6, [r2, #32]
   16f4a:	ee85 6b06 	vdiv.f64	d6, d5, d6
   16f4e:	ed8d 6b02 	vstr	d6, [sp, #8]
   16f52:	f003 030f 	and.w	r3, r3, #15
   16f56:	2203      	movs	r2, #3
   16f58:	4920      	ldr	r1, [pc, #128]	; (16fdc <_dtoa_r+0x324>)
   16f5a:	e04a      	b.n	16ff2 <_dtoa_r+0x33a>
   16f5c:	2301      	movs	r3, #1
   16f5e:	9309      	str	r3, [sp, #36]	; 0x24
   16f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f62:	445b      	add	r3, fp
   16f64:	f103 0901 	add.w	r9, r3, #1
   16f68:	9306      	str	r3, [sp, #24]
   16f6a:	464b      	mov	r3, r9
   16f6c:	2b01      	cmp	r3, #1
   16f6e:	bfb8      	it	lt
   16f70:	2301      	movlt	r3, #1
   16f72:	e7ba      	b.n	16eea <_dtoa_r+0x232>
   16f74:	2300      	movs	r3, #0
   16f76:	e7b2      	b.n	16ede <_dtoa_r+0x226>
   16f78:	2300      	movs	r3, #0
   16f7a:	e7f0      	b.n	16f5e <_dtoa_r+0x2a6>
   16f7c:	2501      	movs	r5, #1
   16f7e:	2300      	movs	r3, #0
   16f80:	e9cd 3508 	strd	r3, r5, [sp, #32]
   16f84:	f04f 33ff 	mov.w	r3, #4294967295
   16f88:	9306      	str	r3, [sp, #24]
   16f8a:	4699      	mov	r9, r3
   16f8c:	2200      	movs	r2, #0
   16f8e:	2312      	movs	r3, #18
   16f90:	920a      	str	r2, [sp, #40]	; 0x28
   16f92:	e7aa      	b.n	16eea <_dtoa_r+0x232>
   16f94:	2301      	movs	r3, #1
   16f96:	9309      	str	r3, [sp, #36]	; 0x24
   16f98:	e7f4      	b.n	16f84 <_dtoa_r+0x2cc>
   16f9a:	2301      	movs	r3, #1
   16f9c:	9306      	str	r3, [sp, #24]
   16f9e:	4699      	mov	r9, r3
   16fa0:	461a      	mov	r2, r3
   16fa2:	e7f5      	b.n	16f90 <_dtoa_r+0x2d8>
   16fa4:	3101      	adds	r1, #1
   16fa6:	6071      	str	r1, [r6, #4]
   16fa8:	0052      	lsls	r2, r2, #1
   16faa:	e7a2      	b.n	16ef2 <_dtoa_r+0x23a>
   16fac:	f3af 8000 	nop.w
   16fb0:	636f4361 	.word	0x636f4361
   16fb4:	3fd287a7 	.word	0x3fd287a7
   16fb8:	8b60c8b3 	.word	0x8b60c8b3
   16fbc:	3fc68a28 	.word	0x3fc68a28
   16fc0:	509f79fb 	.word	0x509f79fb
   16fc4:	3fd34413 	.word	0x3fd34413
   16fc8:	7ff00000 	.word	0x7ff00000
   16fcc:	00019831 	.word	0x00019831
   16fd0:	00019828 	.word	0x00019828
   16fd4:	000197a9 	.word	0x000197a9
   16fd8:	000198d0 	.word	0x000198d0
   16fdc:	000198a8 	.word	0x000198a8
   16fe0:	07de      	lsls	r6, r3, #31
   16fe2:	d504      	bpl.n	16fee <_dtoa_r+0x336>
   16fe4:	ed91 6b00 	vldr	d6, [r1]
   16fe8:	3201      	adds	r2, #1
   16fea:	ee27 7b06 	vmul.f64	d7, d7, d6
   16fee:	105b      	asrs	r3, r3, #1
   16ff0:	3108      	adds	r1, #8
   16ff2:	2b00      	cmp	r3, #0
   16ff4:	d1f4      	bne.n	16fe0 <_dtoa_r+0x328>
   16ff6:	ed9d 6b02 	vldr	d6, [sp, #8]
   16ffa:	ee86 7b07 	vdiv.f64	d7, d6, d7
   16ffe:	ed8d 7b02 	vstr	d7, [sp, #8]
   17002:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17004:	2b00      	cmp	r3, #0
   17006:	f000 80a7 	beq.w	17158 <_dtoa_r+0x4a0>
   1700a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1700e:	ed9d 7b02 	vldr	d7, [sp, #8]
   17012:	eeb4 7bc6 	vcmpe.f64	d7, d6
   17016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1701a:	f140 809d 	bpl.w	17158 <_dtoa_r+0x4a0>
   1701e:	f1b9 0f00 	cmp.w	r9, #0
   17022:	f000 8099 	beq.w	17158 <_dtoa_r+0x4a0>
   17026:	9b06      	ldr	r3, [sp, #24]
   17028:	2b00      	cmp	r3, #0
   1702a:	dd30      	ble.n	1708e <_dtoa_r+0x3d6>
   1702c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
   17030:	ee27 7b06 	vmul.f64	d7, d7, d6
   17034:	ed8d 7b02 	vstr	d7, [sp, #8]
   17038:	9d06      	ldr	r5, [sp, #24]
   1703a:	f10b 33ff 	add.w	r3, fp, #4294967295
   1703e:	3201      	adds	r2, #1
   17040:	ed9d 6b02 	vldr	d6, [sp, #8]
   17044:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   17048:	ee07 2a90 	vmov	s15, r2
   1704c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   17050:	eea7 5b06 	vfma.f64	d5, d7, d6
   17054:	ed8d 5b02 	vstr	d5, [sp, #8]
   17058:	9a03      	ldr	r2, [sp, #12]
   1705a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1705e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   17062:	2d00      	cmp	r5, #0
   17064:	d17b      	bne.n	1715e <_dtoa_r+0x4a6>
   17066:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1706a:	ee36 6b47 	vsub.f64	d6, d6, d7
   1706e:	ec41 0b17 	vmov	d7, r0, r1
   17072:	eeb4 6bc7 	vcmpe.f64	d6, d7
   17076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1707a:	f300 8253 	bgt.w	17524 <_dtoa_r+0x86c>
   1707e:	eeb1 7b47 	vneg.f64	d7, d7
   17082:	eeb4 6bc7 	vcmpe.f64	d6, d7
   17086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1708a:	f100 8249 	bmi.w	17520 <_dtoa_r+0x868>
   1708e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   17092:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17098:	2b00      	cmp	r3, #0
   1709a:	f2c0 8119 	blt.w	172d0 <_dtoa_r+0x618>
   1709e:	f1bb 0f0e 	cmp.w	fp, #14
   170a2:	f300 8115 	bgt.w	172d0 <_dtoa_r+0x618>
   170a6:	4bc3      	ldr	r3, [pc, #780]	; (173b4 <_dtoa_r+0x6fc>)
   170a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   170ac:	ed93 6b00 	vldr	d6, [r3]
   170b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170b2:	2b00      	cmp	r3, #0
   170b4:	f280 80ba 	bge.w	1722c <_dtoa_r+0x574>
   170b8:	f1b9 0f00 	cmp.w	r9, #0
   170bc:	f300 80b6 	bgt.w	1722c <_dtoa_r+0x574>
   170c0:	f040 822d 	bne.w	1751e <_dtoa_r+0x866>
   170c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   170c8:	ee26 6b07 	vmul.f64	d6, d6, d7
   170cc:	ed9d 7b02 	vldr	d7, [sp, #8]
   170d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
   170d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   170d8:	464d      	mov	r5, r9
   170da:	464f      	mov	r7, r9
   170dc:	f280 8204 	bge.w	174e8 <_dtoa_r+0x830>
   170e0:	9b04      	ldr	r3, [sp, #16]
   170e2:	9a04      	ldr	r2, [sp, #16]
   170e4:	1c5e      	adds	r6, r3, #1
   170e6:	2331      	movs	r3, #49	; 0x31
   170e8:	7013      	strb	r3, [r2, #0]
   170ea:	f10b 0b01 	add.w	fp, fp, #1
   170ee:	e1ff      	b.n	174f0 <_dtoa_r+0x838>
   170f0:	2202      	movs	r2, #2
   170f2:	e731      	b.n	16f58 <_dtoa_r+0x2a0>
   170f4:	d02e      	beq.n	17154 <_dtoa_r+0x49c>
   170f6:	f1cb 0300 	rsb	r3, fp, #0
   170fa:	4aae      	ldr	r2, [pc, #696]	; (173b4 <_dtoa_r+0x6fc>)
   170fc:	f003 010f 	and.w	r1, r3, #15
   17100:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   17104:	ed92 7b00 	vldr	d7, [r2]
   17108:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
   1710c:	ee26 7b07 	vmul.f64	d7, d6, d7
   17110:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   17114:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   17118:	e9cd 1202 	strd	r1, r2, [sp, #8]
   1711c:	49a6      	ldr	r1, [pc, #664]	; (173b8 <_dtoa_r+0x700>)
   1711e:	111b      	asrs	r3, r3, #4
   17120:	2000      	movs	r0, #0
   17122:	2202      	movs	r2, #2
   17124:	b93b      	cbnz	r3, 17136 <_dtoa_r+0x47e>
   17126:	2800      	cmp	r0, #0
   17128:	f43f af6b 	beq.w	17002 <_dtoa_r+0x34a>
   1712c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   17130:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17134:	e765      	b.n	17002 <_dtoa_r+0x34a>
   17136:	07dd      	lsls	r5, r3, #31
   17138:	d509      	bpl.n	1714e <_dtoa_r+0x496>
   1713a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
   1713e:	ed91 7b00 	vldr	d7, [r1]
   17142:	ee26 7b07 	vmul.f64	d7, d6, d7
   17146:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   1714a:	3201      	adds	r2, #1
   1714c:	2001      	movs	r0, #1
   1714e:	105b      	asrs	r3, r3, #1
   17150:	3108      	adds	r1, #8
   17152:	e7e7      	b.n	17124 <_dtoa_r+0x46c>
   17154:	2202      	movs	r2, #2
   17156:	e754      	b.n	17002 <_dtoa_r+0x34a>
   17158:	465b      	mov	r3, fp
   1715a:	464d      	mov	r5, r9
   1715c:	e770      	b.n	17040 <_dtoa_r+0x388>
   1715e:	4a95      	ldr	r2, [pc, #596]	; (173b4 <_dtoa_r+0x6fc>)
   17160:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
   17164:	ed12 4b02 	vldr	d4, [r2, #-8]
   17168:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1716a:	ec41 0b17 	vmov	d7, r0, r1
   1716e:	b35a      	cbz	r2, 171c8 <_dtoa_r+0x510>
   17170:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   17174:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   17178:	9e04      	ldr	r6, [sp, #16]
   1717a:	ee83 5b04 	vdiv.f64	d5, d3, d4
   1717e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
   17182:	ee35 7b47 	vsub.f64	d7, d5, d7
   17186:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1718a:	ee14 2a90 	vmov	r2, s9
   1718e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
   17192:	3230      	adds	r2, #48	; 0x30
   17194:	ee36 6b45 	vsub.f64	d6, d6, d5
   17198:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   171a0:	f806 2b01 	strb.w	r2, [r6], #1
   171a4:	d43b      	bmi.n	1721e <_dtoa_r+0x566>
   171a6:	ee32 5b46 	vsub.f64	d5, d2, d6
   171aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
   171ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   171b2:	d472      	bmi.n	1729a <_dtoa_r+0x5e2>
   171b4:	9a04      	ldr	r2, [sp, #16]
   171b6:	1ab2      	subs	r2, r6, r2
   171b8:	4295      	cmp	r5, r2
   171ba:	f77f af68 	ble.w	1708e <_dtoa_r+0x3d6>
   171be:	ee27 7b03 	vmul.f64	d7, d7, d3
   171c2:	ee26 6b03 	vmul.f64	d6, d6, d3
   171c6:	e7de      	b.n	17186 <_dtoa_r+0x4ce>
   171c8:	9a04      	ldr	r2, [sp, #16]
   171ca:	ee24 7b07 	vmul.f64	d7, d4, d7
   171ce:	1956      	adds	r6, r2, r5
   171d0:	4611      	mov	r1, r2
   171d2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
   171d6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   171da:	ee14 2a90 	vmov	r2, s9
   171de:	3230      	adds	r2, #48	; 0x30
   171e0:	f801 2b01 	strb.w	r2, [r1], #1
   171e4:	42b1      	cmp	r1, r6
   171e6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
   171ea:	ee36 6b45 	vsub.f64	d6, d6, d5
   171ee:	d11a      	bne.n	17226 <_dtoa_r+0x56e>
   171f0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
   171f4:	ee37 4b05 	vadd.f64	d4, d7, d5
   171f8:	eeb4 6bc4 	vcmpe.f64	d6, d4
   171fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17200:	dc4b      	bgt.n	1729a <_dtoa_r+0x5e2>
   17202:	ee35 7b47 	vsub.f64	d7, d5, d7
   17206:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1720e:	f57f af3e 	bpl.w	1708e <_dtoa_r+0x3d6>
   17212:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   17216:	2a30      	cmp	r2, #48	; 0x30
   17218:	f106 31ff 	add.w	r1, r6, #4294967295
   1721c:	d001      	beq.n	17222 <_dtoa_r+0x56a>
   1721e:	469b      	mov	fp, r3
   17220:	e02a      	b.n	17278 <_dtoa_r+0x5c0>
   17222:	460e      	mov	r6, r1
   17224:	e7f5      	b.n	17212 <_dtoa_r+0x55a>
   17226:	ee26 6b03 	vmul.f64	d6, d6, d3
   1722a:	e7d4      	b.n	171d6 <_dtoa_r+0x51e>
   1722c:	ed9d 7b02 	vldr	d7, [sp, #8]
   17230:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17234:	9e04      	ldr	r6, [sp, #16]
   17236:	ee87 5b06 	vdiv.f64	d5, d7, d6
   1723a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
   1723e:	ee15 3a10 	vmov	r3, s10
   17242:	3330      	adds	r3, #48	; 0x30
   17244:	f806 3b01 	strb.w	r3, [r6], #1
   17248:	9b04      	ldr	r3, [sp, #16]
   1724a:	1af3      	subs	r3, r6, r3
   1724c:	4599      	cmp	r9, r3
   1724e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
   17252:	eea3 7b46 	vfms.f64	d7, d3, d6
   17256:	d133      	bne.n	172c0 <_dtoa_r+0x608>
   17258:	ee37 7b07 	vadd.f64	d7, d7, d7
   1725c:	eeb4 7bc6 	vcmpe.f64	d7, d6
   17260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17264:	dc18      	bgt.n	17298 <_dtoa_r+0x5e0>
   17266:	eeb4 7b46 	vcmp.f64	d7, d6
   1726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1726e:	d103      	bne.n	17278 <_dtoa_r+0x5c0>
   17270:	ee15 3a10 	vmov	r3, s10
   17274:	07db      	lsls	r3, r3, #31
   17276:	d40f      	bmi.n	17298 <_dtoa_r+0x5e0>
   17278:	9901      	ldr	r1, [sp, #4]
   1727a:	4620      	mov	r0, r4
   1727c:	f001 f81e 	bl	182bc <_Bfree>
   17280:	2300      	movs	r3, #0
   17282:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17284:	7033      	strb	r3, [r6, #0]
   17286:	f10b 0301 	add.w	r3, fp, #1
   1728a:	6013      	str	r3, [r2, #0]
   1728c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1728e:	2b00      	cmp	r3, #0
   17290:	f43f ad5b 	beq.w	16d4a <_dtoa_r+0x92>
   17294:	601e      	str	r6, [r3, #0]
   17296:	e558      	b.n	16d4a <_dtoa_r+0x92>
   17298:	465b      	mov	r3, fp
   1729a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   1729e:	2939      	cmp	r1, #57	; 0x39
   172a0:	f106 32ff 	add.w	r2, r6, #4294967295
   172a4:	d106      	bne.n	172b4 <_dtoa_r+0x5fc>
   172a6:	9904      	ldr	r1, [sp, #16]
   172a8:	4291      	cmp	r1, r2
   172aa:	d107      	bne.n	172bc <_dtoa_r+0x604>
   172ac:	2230      	movs	r2, #48	; 0x30
   172ae:	700a      	strb	r2, [r1, #0]
   172b0:	3301      	adds	r3, #1
   172b2:	460a      	mov	r2, r1
   172b4:	7811      	ldrb	r1, [r2, #0]
   172b6:	3101      	adds	r1, #1
   172b8:	7011      	strb	r1, [r2, #0]
   172ba:	e7b0      	b.n	1721e <_dtoa_r+0x566>
   172bc:	4616      	mov	r6, r2
   172be:	e7ec      	b.n	1729a <_dtoa_r+0x5e2>
   172c0:	ee27 7b04 	vmul.f64	d7, d7, d4
   172c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
   172c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   172cc:	d1b3      	bne.n	17236 <_dtoa_r+0x57e>
   172ce:	e7d3      	b.n	17278 <_dtoa_r+0x5c0>
   172d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   172d2:	2a00      	cmp	r2, #0
   172d4:	f000 808d 	beq.w	173f2 <_dtoa_r+0x73a>
   172d8:	9a08      	ldr	r2, [sp, #32]
   172da:	2a01      	cmp	r2, #1
   172dc:	dc72      	bgt.n	173c4 <_dtoa_r+0x70c>
   172de:	2f00      	cmp	r7, #0
   172e0:	d06c      	beq.n	173bc <_dtoa_r+0x704>
   172e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
   172e6:	4645      	mov	r5, r8
   172e8:	4656      	mov	r6, sl
   172ea:	9a07      	ldr	r2, [sp, #28]
   172ec:	2101      	movs	r1, #1
   172ee:	441a      	add	r2, r3
   172f0:	4620      	mov	r0, r4
   172f2:	449a      	add	sl, r3
   172f4:	9207      	str	r2, [sp, #28]
   172f6:	f001 f8bf 	bl	18478 <__i2b>
   172fa:	4607      	mov	r7, r0
   172fc:	2e00      	cmp	r6, #0
   172fe:	dd0b      	ble.n	17318 <_dtoa_r+0x660>
   17300:	9b07      	ldr	r3, [sp, #28]
   17302:	2b00      	cmp	r3, #0
   17304:	dd08      	ble.n	17318 <_dtoa_r+0x660>
   17306:	42b3      	cmp	r3, r6
   17308:	9a07      	ldr	r2, [sp, #28]
   1730a:	bfa8      	it	ge
   1730c:	4633      	movge	r3, r6
   1730e:	ebaa 0a03 	sub.w	sl, sl, r3
   17312:	1af6      	subs	r6, r6, r3
   17314:	1ad3      	subs	r3, r2, r3
   17316:	9307      	str	r3, [sp, #28]
   17318:	f1b8 0f00 	cmp.w	r8, #0
   1731c:	d01d      	beq.n	1735a <_dtoa_r+0x6a2>
   1731e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17320:	2b00      	cmp	r3, #0
   17322:	d06a      	beq.n	173fa <_dtoa_r+0x742>
   17324:	b18d      	cbz	r5, 1734a <_dtoa_r+0x692>
   17326:	4639      	mov	r1, r7
   17328:	462a      	mov	r2, r5
   1732a:	4620      	mov	r0, r4
   1732c:	f001 f944 	bl	185b8 <__pow5mult>
   17330:	9a01      	ldr	r2, [sp, #4]
   17332:	4601      	mov	r1, r0
   17334:	4607      	mov	r7, r0
   17336:	4620      	mov	r0, r4
   17338:	f001 f8a7 	bl	1848a <__multiply>
   1733c:	9901      	ldr	r1, [sp, #4]
   1733e:	900c      	str	r0, [sp, #48]	; 0x30
   17340:	4620      	mov	r0, r4
   17342:	f000 ffbb 	bl	182bc <_Bfree>
   17346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17348:	9301      	str	r3, [sp, #4]
   1734a:	ebb8 0205 	subs.w	r2, r8, r5
   1734e:	d004      	beq.n	1735a <_dtoa_r+0x6a2>
   17350:	9901      	ldr	r1, [sp, #4]
   17352:	4620      	mov	r0, r4
   17354:	f001 f930 	bl	185b8 <__pow5mult>
   17358:	9001      	str	r0, [sp, #4]
   1735a:	2101      	movs	r1, #1
   1735c:	4620      	mov	r0, r4
   1735e:	f001 f88b 	bl	18478 <__i2b>
   17362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17364:	4605      	mov	r5, r0
   17366:	2b00      	cmp	r3, #0
   17368:	f000 81ca 	beq.w	17700 <_dtoa_r+0xa48>
   1736c:	461a      	mov	r2, r3
   1736e:	4601      	mov	r1, r0
   17370:	4620      	mov	r0, r4
   17372:	f001 f921 	bl	185b8 <__pow5mult>
   17376:	9b08      	ldr	r3, [sp, #32]
   17378:	2b01      	cmp	r3, #1
   1737a:	4605      	mov	r5, r0
   1737c:	dc44      	bgt.n	17408 <_dtoa_r+0x750>
   1737e:	9b02      	ldr	r3, [sp, #8]
   17380:	2b00      	cmp	r3, #0
   17382:	d13c      	bne.n	173fe <_dtoa_r+0x746>
   17384:	9b03      	ldr	r3, [sp, #12]
   17386:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1738a:	2b00      	cmp	r3, #0
   1738c:	d137      	bne.n	173fe <_dtoa_r+0x746>
   1738e:	9b03      	ldr	r3, [sp, #12]
   17390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   17394:	0d1b      	lsrs	r3, r3, #20
   17396:	051b      	lsls	r3, r3, #20
   17398:	2b00      	cmp	r3, #0
   1739a:	d033      	beq.n	17404 <_dtoa_r+0x74c>
   1739c:	9b07      	ldr	r3, [sp, #28]
   1739e:	3301      	adds	r3, #1
   173a0:	f10a 0a01 	add.w	sl, sl, #1
   173a4:	9307      	str	r3, [sp, #28]
   173a6:	f04f 0801 	mov.w	r8, #1
   173aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   173ac:	bb73      	cbnz	r3, 1740c <_dtoa_r+0x754>
   173ae:	2001      	movs	r0, #1
   173b0:	e034      	b.n	1741c <_dtoa_r+0x764>
   173b2:	bf00      	nop
   173b4:	000198d0 	.word	0x000198d0
   173b8:	000198a8 	.word	0x000198a8
   173bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   173be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   173c2:	e790      	b.n	172e6 <_dtoa_r+0x62e>
   173c4:	f109 35ff 	add.w	r5, r9, #4294967295
   173c8:	45a8      	cmp	r8, r5
   173ca:	bfbf      	itttt	lt
   173cc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
   173ce:	eba5 0808 	sublt.w	r8, r5, r8
   173d2:	4443      	addlt	r3, r8
   173d4:	930b      	strlt	r3, [sp, #44]	; 0x2c
   173d6:	bfb6      	itet	lt
   173d8:	46a8      	movlt	r8, r5
   173da:	eba8 0505 	subge.w	r5, r8, r5
   173de:	2500      	movlt	r5, #0
   173e0:	f1b9 0f00 	cmp.w	r9, #0
   173e4:	bfb9      	ittee	lt
   173e6:	ebaa 0609 	sublt.w	r6, sl, r9
   173ea:	2300      	movlt	r3, #0
   173ec:	4656      	movge	r6, sl
   173ee:	464b      	movge	r3, r9
   173f0:	e77b      	b.n	172ea <_dtoa_r+0x632>
   173f2:	4645      	mov	r5, r8
   173f4:	4656      	mov	r6, sl
   173f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   173f8:	e780      	b.n	172fc <_dtoa_r+0x644>
   173fa:	4642      	mov	r2, r8
   173fc:	e7a8      	b.n	17350 <_dtoa_r+0x698>
   173fe:	f04f 0800 	mov.w	r8, #0
   17402:	e7d2      	b.n	173aa <_dtoa_r+0x6f2>
   17404:	4698      	mov	r8, r3
   17406:	e7d0      	b.n	173aa <_dtoa_r+0x6f2>
   17408:	f04f 0800 	mov.w	r8, #0
   1740c:	692b      	ldr	r3, [r5, #16]
   1740e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   17412:	6918      	ldr	r0, [r3, #16]
   17414:	f000 ffe2 	bl	183dc <__hi0bits>
   17418:	f1c0 0020 	rsb	r0, r0, #32
   1741c:	9b07      	ldr	r3, [sp, #28]
   1741e:	4418      	add	r0, r3
   17420:	f010 001f 	ands.w	r0, r0, #31
   17424:	d047      	beq.n	174b6 <_dtoa_r+0x7fe>
   17426:	f1c0 0320 	rsb	r3, r0, #32
   1742a:	2b04      	cmp	r3, #4
   1742c:	dd3b      	ble.n	174a6 <_dtoa_r+0x7ee>
   1742e:	9b07      	ldr	r3, [sp, #28]
   17430:	f1c0 001c 	rsb	r0, r0, #28
   17434:	4482      	add	sl, r0
   17436:	4406      	add	r6, r0
   17438:	4403      	add	r3, r0
   1743a:	9307      	str	r3, [sp, #28]
   1743c:	f1ba 0f00 	cmp.w	sl, #0
   17440:	dd05      	ble.n	1744e <_dtoa_r+0x796>
   17442:	4652      	mov	r2, sl
   17444:	9901      	ldr	r1, [sp, #4]
   17446:	4620      	mov	r0, r4
   17448:	f001 f904 	bl	18654 <__lshift>
   1744c:	9001      	str	r0, [sp, #4]
   1744e:	9b07      	ldr	r3, [sp, #28]
   17450:	2b00      	cmp	r3, #0
   17452:	dd05      	ble.n	17460 <_dtoa_r+0x7a8>
   17454:	4629      	mov	r1, r5
   17456:	461a      	mov	r2, r3
   17458:	4620      	mov	r0, r4
   1745a:	f001 f8fb 	bl	18654 <__lshift>
   1745e:	4605      	mov	r5, r0
   17460:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17462:	b353      	cbz	r3, 174ba <_dtoa_r+0x802>
   17464:	4629      	mov	r1, r5
   17466:	9801      	ldr	r0, [sp, #4]
   17468:	f001 f948 	bl	186fc <__mcmp>
   1746c:	2800      	cmp	r0, #0
   1746e:	da24      	bge.n	174ba <_dtoa_r+0x802>
   17470:	2300      	movs	r3, #0
   17472:	220a      	movs	r2, #10
   17474:	9901      	ldr	r1, [sp, #4]
   17476:	4620      	mov	r0, r4
   17478:	f000 ff37 	bl	182ea <__multadd>
   1747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1747e:	9001      	str	r0, [sp, #4]
   17480:	f10b 3bff 	add.w	fp, fp, #4294967295
   17484:	2b00      	cmp	r3, #0
   17486:	f000 8142 	beq.w	1770e <_dtoa_r+0xa56>
   1748a:	2300      	movs	r3, #0
   1748c:	4639      	mov	r1, r7
   1748e:	220a      	movs	r2, #10
   17490:	4620      	mov	r0, r4
   17492:	f000 ff2a 	bl	182ea <__multadd>
   17496:	9b06      	ldr	r3, [sp, #24]
   17498:	2b00      	cmp	r3, #0
   1749a:	4607      	mov	r7, r0
   1749c:	dc4b      	bgt.n	17536 <_dtoa_r+0x87e>
   1749e:	9b08      	ldr	r3, [sp, #32]
   174a0:	2b02      	cmp	r3, #2
   174a2:	dd48      	ble.n	17536 <_dtoa_r+0x87e>
   174a4:	e011      	b.n	174ca <_dtoa_r+0x812>
   174a6:	d0c9      	beq.n	1743c <_dtoa_r+0x784>
   174a8:	9a07      	ldr	r2, [sp, #28]
   174aa:	331c      	adds	r3, #28
   174ac:	441a      	add	r2, r3
   174ae:	449a      	add	sl, r3
   174b0:	441e      	add	r6, r3
   174b2:	4613      	mov	r3, r2
   174b4:	e7c1      	b.n	1743a <_dtoa_r+0x782>
   174b6:	4603      	mov	r3, r0
   174b8:	e7f6      	b.n	174a8 <_dtoa_r+0x7f0>
   174ba:	f1b9 0f00 	cmp.w	r9, #0
   174be:	dc34      	bgt.n	1752a <_dtoa_r+0x872>
   174c0:	9b08      	ldr	r3, [sp, #32]
   174c2:	2b02      	cmp	r3, #2
   174c4:	dd31      	ble.n	1752a <_dtoa_r+0x872>
   174c6:	f8cd 9018 	str.w	r9, [sp, #24]
   174ca:	9b06      	ldr	r3, [sp, #24]
   174cc:	b963      	cbnz	r3, 174e8 <_dtoa_r+0x830>
   174ce:	4629      	mov	r1, r5
   174d0:	2205      	movs	r2, #5
   174d2:	4620      	mov	r0, r4
   174d4:	f000 ff09 	bl	182ea <__multadd>
   174d8:	4601      	mov	r1, r0
   174da:	4605      	mov	r5, r0
   174dc:	9801      	ldr	r0, [sp, #4]
   174de:	f001 f90d 	bl	186fc <__mcmp>
   174e2:	2800      	cmp	r0, #0
   174e4:	f73f adfc 	bgt.w	170e0 <_dtoa_r+0x428>
   174e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174ea:	9e04      	ldr	r6, [sp, #16]
   174ec:	ea6f 0b03 	mvn.w	fp, r3
   174f0:	f04f 0900 	mov.w	r9, #0
   174f4:	4629      	mov	r1, r5
   174f6:	4620      	mov	r0, r4
   174f8:	f000 fee0 	bl	182bc <_Bfree>
   174fc:	2f00      	cmp	r7, #0
   174fe:	f43f aebb 	beq.w	17278 <_dtoa_r+0x5c0>
   17502:	f1b9 0f00 	cmp.w	r9, #0
   17506:	d005      	beq.n	17514 <_dtoa_r+0x85c>
   17508:	45b9      	cmp	r9, r7
   1750a:	d003      	beq.n	17514 <_dtoa_r+0x85c>
   1750c:	4649      	mov	r1, r9
   1750e:	4620      	mov	r0, r4
   17510:	f000 fed4 	bl	182bc <_Bfree>
   17514:	4639      	mov	r1, r7
   17516:	4620      	mov	r0, r4
   17518:	f000 fed0 	bl	182bc <_Bfree>
   1751c:	e6ac      	b.n	17278 <_dtoa_r+0x5c0>
   1751e:	2500      	movs	r5, #0
   17520:	462f      	mov	r7, r5
   17522:	e7e1      	b.n	174e8 <_dtoa_r+0x830>
   17524:	469b      	mov	fp, r3
   17526:	462f      	mov	r7, r5
   17528:	e5da      	b.n	170e0 <_dtoa_r+0x428>
   1752a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1752c:	f8cd 9018 	str.w	r9, [sp, #24]
   17530:	2b00      	cmp	r3, #0
   17532:	f000 80f3 	beq.w	1771c <_dtoa_r+0xa64>
   17536:	2e00      	cmp	r6, #0
   17538:	dd05      	ble.n	17546 <_dtoa_r+0x88e>
   1753a:	4639      	mov	r1, r7
   1753c:	4632      	mov	r2, r6
   1753e:	4620      	mov	r0, r4
   17540:	f001 f888 	bl	18654 <__lshift>
   17544:	4607      	mov	r7, r0
   17546:	f1b8 0f00 	cmp.w	r8, #0
   1754a:	d04c      	beq.n	175e6 <_dtoa_r+0x92e>
   1754c:	6879      	ldr	r1, [r7, #4]
   1754e:	4620      	mov	r0, r4
   17550:	f000 fe80 	bl	18254 <_Balloc>
   17554:	693a      	ldr	r2, [r7, #16]
   17556:	3202      	adds	r2, #2
   17558:	4606      	mov	r6, r0
   1755a:	0092      	lsls	r2, r2, #2
   1755c:	f107 010c 	add.w	r1, r7, #12
   17560:	300c      	adds	r0, #12
   17562:	f7fd fc17 	bl	14d94 <memcpy>
   17566:	2201      	movs	r2, #1
   17568:	4631      	mov	r1, r6
   1756a:	4620      	mov	r0, r4
   1756c:	f001 f872 	bl	18654 <__lshift>
   17570:	9b02      	ldr	r3, [sp, #8]
   17572:	f8dd a010 	ldr.w	sl, [sp, #16]
   17576:	f003 0301 	and.w	r3, r3, #1
   1757a:	46b9      	mov	r9, r7
   1757c:	9307      	str	r3, [sp, #28]
   1757e:	4607      	mov	r7, r0
   17580:	4629      	mov	r1, r5
   17582:	9801      	ldr	r0, [sp, #4]
   17584:	f7ff fb0a 	bl	16b9c <quorem>
   17588:	4649      	mov	r1, r9
   1758a:	4606      	mov	r6, r0
   1758c:	f100 0830 	add.w	r8, r0, #48	; 0x30
   17590:	9801      	ldr	r0, [sp, #4]
   17592:	f001 f8b3 	bl	186fc <__mcmp>
   17596:	463a      	mov	r2, r7
   17598:	9002      	str	r0, [sp, #8]
   1759a:	4629      	mov	r1, r5
   1759c:	4620      	mov	r0, r4
   1759e:	f001 f8c7 	bl	18730 <__mdiff>
   175a2:	68c3      	ldr	r3, [r0, #12]
   175a4:	4602      	mov	r2, r0
   175a6:	bb03      	cbnz	r3, 175ea <_dtoa_r+0x932>
   175a8:	4601      	mov	r1, r0
   175aa:	9009      	str	r0, [sp, #36]	; 0x24
   175ac:	9801      	ldr	r0, [sp, #4]
   175ae:	f001 f8a5 	bl	186fc <__mcmp>
   175b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   175b4:	4603      	mov	r3, r0
   175b6:	4611      	mov	r1, r2
   175b8:	4620      	mov	r0, r4
   175ba:	9309      	str	r3, [sp, #36]	; 0x24
   175bc:	f000 fe7e 	bl	182bc <_Bfree>
   175c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   175c2:	b9a3      	cbnz	r3, 175ee <_dtoa_r+0x936>
   175c4:	9a08      	ldr	r2, [sp, #32]
   175c6:	b992      	cbnz	r2, 175ee <_dtoa_r+0x936>
   175c8:	9a07      	ldr	r2, [sp, #28]
   175ca:	b982      	cbnz	r2, 175ee <_dtoa_r+0x936>
   175cc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   175d0:	d029      	beq.n	17626 <_dtoa_r+0x96e>
   175d2:	9b02      	ldr	r3, [sp, #8]
   175d4:	2b00      	cmp	r3, #0
   175d6:	dd01      	ble.n	175dc <_dtoa_r+0x924>
   175d8:	f106 0831 	add.w	r8, r6, #49	; 0x31
   175dc:	f10a 0601 	add.w	r6, sl, #1
   175e0:	f88a 8000 	strb.w	r8, [sl]
   175e4:	e786      	b.n	174f4 <_dtoa_r+0x83c>
   175e6:	4638      	mov	r0, r7
   175e8:	e7c2      	b.n	17570 <_dtoa_r+0x8b8>
   175ea:	2301      	movs	r3, #1
   175ec:	e7e3      	b.n	175b6 <_dtoa_r+0x8fe>
   175ee:	9a02      	ldr	r2, [sp, #8]
   175f0:	2a00      	cmp	r2, #0
   175f2:	db04      	blt.n	175fe <_dtoa_r+0x946>
   175f4:	d124      	bne.n	17640 <_dtoa_r+0x988>
   175f6:	9a08      	ldr	r2, [sp, #32]
   175f8:	bb12      	cbnz	r2, 17640 <_dtoa_r+0x988>
   175fa:	9a07      	ldr	r2, [sp, #28]
   175fc:	bb02      	cbnz	r2, 17640 <_dtoa_r+0x988>
   175fe:	2b00      	cmp	r3, #0
   17600:	ddec      	ble.n	175dc <_dtoa_r+0x924>
   17602:	2201      	movs	r2, #1
   17604:	9901      	ldr	r1, [sp, #4]
   17606:	4620      	mov	r0, r4
   17608:	f001 f824 	bl	18654 <__lshift>
   1760c:	4629      	mov	r1, r5
   1760e:	9001      	str	r0, [sp, #4]
   17610:	f001 f874 	bl	186fc <__mcmp>
   17614:	2800      	cmp	r0, #0
   17616:	dc03      	bgt.n	17620 <_dtoa_r+0x968>
   17618:	d1e0      	bne.n	175dc <_dtoa_r+0x924>
   1761a:	f018 0f01 	tst.w	r8, #1
   1761e:	d0dd      	beq.n	175dc <_dtoa_r+0x924>
   17620:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   17624:	d1d8      	bne.n	175d8 <_dtoa_r+0x920>
   17626:	2339      	movs	r3, #57	; 0x39
   17628:	f10a 0601 	add.w	r6, sl, #1
   1762c:	f88a 3000 	strb.w	r3, [sl]
   17630:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   17634:	2b39      	cmp	r3, #57	; 0x39
   17636:	f106 32ff 	add.w	r2, r6, #4294967295
   1763a:	d04c      	beq.n	176d6 <_dtoa_r+0xa1e>
   1763c:	3301      	adds	r3, #1
   1763e:	e051      	b.n	176e4 <_dtoa_r+0xa2c>
   17640:	2b00      	cmp	r3, #0
   17642:	f10a 0601 	add.w	r6, sl, #1
   17646:	dd05      	ble.n	17654 <_dtoa_r+0x99c>
   17648:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1764c:	d0eb      	beq.n	17626 <_dtoa_r+0x96e>
   1764e:	f108 0801 	add.w	r8, r8, #1
   17652:	e7c5      	b.n	175e0 <_dtoa_r+0x928>
   17654:	9b04      	ldr	r3, [sp, #16]
   17656:	9a06      	ldr	r2, [sp, #24]
   17658:	f806 8c01 	strb.w	r8, [r6, #-1]
   1765c:	1af3      	subs	r3, r6, r3
   1765e:	4293      	cmp	r3, r2
   17660:	d021      	beq.n	176a6 <_dtoa_r+0x9ee>
   17662:	2300      	movs	r3, #0
   17664:	220a      	movs	r2, #10
   17666:	9901      	ldr	r1, [sp, #4]
   17668:	4620      	mov	r0, r4
   1766a:	f000 fe3e 	bl	182ea <__multadd>
   1766e:	45b9      	cmp	r9, r7
   17670:	9001      	str	r0, [sp, #4]
   17672:	f04f 0300 	mov.w	r3, #0
   17676:	f04f 020a 	mov.w	r2, #10
   1767a:	4649      	mov	r1, r9
   1767c:	4620      	mov	r0, r4
   1767e:	d105      	bne.n	1768c <_dtoa_r+0x9d4>
   17680:	f000 fe33 	bl	182ea <__multadd>
   17684:	4681      	mov	r9, r0
   17686:	4607      	mov	r7, r0
   17688:	46b2      	mov	sl, r6
   1768a:	e779      	b.n	17580 <_dtoa_r+0x8c8>
   1768c:	f000 fe2d 	bl	182ea <__multadd>
   17690:	4639      	mov	r1, r7
   17692:	4681      	mov	r9, r0
   17694:	2300      	movs	r3, #0
   17696:	220a      	movs	r2, #10
   17698:	4620      	mov	r0, r4
   1769a:	f000 fe26 	bl	182ea <__multadd>
   1769e:	4607      	mov	r7, r0
   176a0:	e7f2      	b.n	17688 <_dtoa_r+0x9d0>
   176a2:	f04f 0900 	mov.w	r9, #0
   176a6:	2201      	movs	r2, #1
   176a8:	9901      	ldr	r1, [sp, #4]
   176aa:	4620      	mov	r0, r4
   176ac:	f000 ffd2 	bl	18654 <__lshift>
   176b0:	4629      	mov	r1, r5
   176b2:	9001      	str	r0, [sp, #4]
   176b4:	f001 f822 	bl	186fc <__mcmp>
   176b8:	2800      	cmp	r0, #0
   176ba:	dcb9      	bgt.n	17630 <_dtoa_r+0x978>
   176bc:	d102      	bne.n	176c4 <_dtoa_r+0xa0c>
   176be:	f018 0f01 	tst.w	r8, #1
   176c2:	d1b5      	bne.n	17630 <_dtoa_r+0x978>
   176c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   176c8:	2b30      	cmp	r3, #48	; 0x30
   176ca:	f106 32ff 	add.w	r2, r6, #4294967295
   176ce:	f47f af11 	bne.w	174f4 <_dtoa_r+0x83c>
   176d2:	4616      	mov	r6, r2
   176d4:	e7f6      	b.n	176c4 <_dtoa_r+0xa0c>
   176d6:	9b04      	ldr	r3, [sp, #16]
   176d8:	4293      	cmp	r3, r2
   176da:	d105      	bne.n	176e8 <_dtoa_r+0xa30>
   176dc:	9a04      	ldr	r2, [sp, #16]
   176de:	f10b 0b01 	add.w	fp, fp, #1
   176e2:	2331      	movs	r3, #49	; 0x31
   176e4:	7013      	strb	r3, [r2, #0]
   176e6:	e705      	b.n	174f4 <_dtoa_r+0x83c>
   176e8:	4616      	mov	r6, r2
   176ea:	e7a1      	b.n	17630 <_dtoa_r+0x978>
   176ec:	4b16      	ldr	r3, [pc, #88]	; (17748 <_dtoa_r+0xa90>)
   176ee:	f7ff bb48 	b.w	16d82 <_dtoa_r+0xca>
   176f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   176f4:	2b00      	cmp	r3, #0
   176f6:	f47f ab23 	bne.w	16d40 <_dtoa_r+0x88>
   176fa:	4b14      	ldr	r3, [pc, #80]	; (1774c <_dtoa_r+0xa94>)
   176fc:	f7ff bb41 	b.w	16d82 <_dtoa_r+0xca>
   17700:	9b08      	ldr	r3, [sp, #32]
   17702:	2b01      	cmp	r3, #1
   17704:	f77f ae3b 	ble.w	1737e <_dtoa_r+0x6c6>
   17708:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1770c:	e64f      	b.n	173ae <_dtoa_r+0x6f6>
   1770e:	9b06      	ldr	r3, [sp, #24]
   17710:	2b00      	cmp	r3, #0
   17712:	dc03      	bgt.n	1771c <_dtoa_r+0xa64>
   17714:	9b08      	ldr	r3, [sp, #32]
   17716:	2b02      	cmp	r3, #2
   17718:	f73f aed7 	bgt.w	174ca <_dtoa_r+0x812>
   1771c:	9e04      	ldr	r6, [sp, #16]
   1771e:	9801      	ldr	r0, [sp, #4]
   17720:	4629      	mov	r1, r5
   17722:	f7ff fa3b 	bl	16b9c <quorem>
   17726:	f100 0830 	add.w	r8, r0, #48	; 0x30
   1772a:	f806 8b01 	strb.w	r8, [r6], #1
   1772e:	9b04      	ldr	r3, [sp, #16]
   17730:	9a06      	ldr	r2, [sp, #24]
   17732:	1af3      	subs	r3, r6, r3
   17734:	429a      	cmp	r2, r3
   17736:	ddb4      	ble.n	176a2 <_dtoa_r+0x9ea>
   17738:	2300      	movs	r3, #0
   1773a:	220a      	movs	r2, #10
   1773c:	9901      	ldr	r1, [sp, #4]
   1773e:	4620      	mov	r0, r4
   17740:	f000 fdd3 	bl	182ea <__multadd>
   17744:	9001      	str	r0, [sp, #4]
   17746:	e7ea      	b.n	1771e <_dtoa_r+0xa66>
   17748:	000197a8 	.word	0x000197a8
   1774c:	00019828 	.word	0x00019828

00017750 <__sflush_r>:
   17750:	898a      	ldrh	r2, [r1, #12]
   17752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17756:	4605      	mov	r5, r0
   17758:	0710      	lsls	r0, r2, #28
   1775a:	460c      	mov	r4, r1
   1775c:	d458      	bmi.n	17810 <__sflush_r+0xc0>
   1775e:	684b      	ldr	r3, [r1, #4]
   17760:	2b00      	cmp	r3, #0
   17762:	dc05      	bgt.n	17770 <__sflush_r+0x20>
   17764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   17766:	2b00      	cmp	r3, #0
   17768:	dc02      	bgt.n	17770 <__sflush_r+0x20>
   1776a:	2000      	movs	r0, #0
   1776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   17772:	2e00      	cmp	r6, #0
   17774:	d0f9      	beq.n	1776a <__sflush_r+0x1a>
   17776:	2300      	movs	r3, #0
   17778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1777c:	682f      	ldr	r7, [r5, #0]
   1777e:	6a21      	ldr	r1, [r4, #32]
   17780:	602b      	str	r3, [r5, #0]
   17782:	d032      	beq.n	177ea <__sflush_r+0x9a>
   17784:	6d60      	ldr	r0, [r4, #84]	; 0x54
   17786:	89a3      	ldrh	r3, [r4, #12]
   17788:	075a      	lsls	r2, r3, #29
   1778a:	d505      	bpl.n	17798 <__sflush_r+0x48>
   1778c:	6863      	ldr	r3, [r4, #4]
   1778e:	1ac0      	subs	r0, r0, r3
   17790:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17792:	b10b      	cbz	r3, 17798 <__sflush_r+0x48>
   17794:	6c23      	ldr	r3, [r4, #64]	; 0x40
   17796:	1ac0      	subs	r0, r0, r3
   17798:	2300      	movs	r3, #0
   1779a:	4602      	mov	r2, r0
   1779c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1779e:	6a21      	ldr	r1, [r4, #32]
   177a0:	4628      	mov	r0, r5
   177a2:	47b0      	blx	r6
   177a4:	1c43      	adds	r3, r0, #1
   177a6:	89a3      	ldrh	r3, [r4, #12]
   177a8:	d106      	bne.n	177b8 <__sflush_r+0x68>
   177aa:	6829      	ldr	r1, [r5, #0]
   177ac:	291d      	cmp	r1, #29
   177ae:	d848      	bhi.n	17842 <__sflush_r+0xf2>
   177b0:	4a29      	ldr	r2, [pc, #164]	; (17858 <__sflush_r+0x108>)
   177b2:	40ca      	lsrs	r2, r1
   177b4:	07d6      	lsls	r6, r2, #31
   177b6:	d544      	bpl.n	17842 <__sflush_r+0xf2>
   177b8:	2200      	movs	r2, #0
   177ba:	6062      	str	r2, [r4, #4]
   177bc:	04d9      	lsls	r1, r3, #19
   177be:	6922      	ldr	r2, [r4, #16]
   177c0:	6022      	str	r2, [r4, #0]
   177c2:	d504      	bpl.n	177ce <__sflush_r+0x7e>
   177c4:	1c42      	adds	r2, r0, #1
   177c6:	d101      	bne.n	177cc <__sflush_r+0x7c>
   177c8:	682b      	ldr	r3, [r5, #0]
   177ca:	b903      	cbnz	r3, 177ce <__sflush_r+0x7e>
   177cc:	6560      	str	r0, [r4, #84]	; 0x54
   177ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
   177d0:	602f      	str	r7, [r5, #0]
   177d2:	2900      	cmp	r1, #0
   177d4:	d0c9      	beq.n	1776a <__sflush_r+0x1a>
   177d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   177da:	4299      	cmp	r1, r3
   177dc:	d002      	beq.n	177e4 <__sflush_r+0x94>
   177de:	4628      	mov	r0, r5
   177e0:	f7fd fafa 	bl	14dd8 <_free_r>
   177e4:	2000      	movs	r0, #0
   177e6:	6360      	str	r0, [r4, #52]	; 0x34
   177e8:	e7c0      	b.n	1776c <__sflush_r+0x1c>
   177ea:	2301      	movs	r3, #1
   177ec:	4628      	mov	r0, r5
   177ee:	47b0      	blx	r6
   177f0:	1c41      	adds	r1, r0, #1
   177f2:	d1c8      	bne.n	17786 <__sflush_r+0x36>
   177f4:	682b      	ldr	r3, [r5, #0]
   177f6:	2b00      	cmp	r3, #0
   177f8:	d0c5      	beq.n	17786 <__sflush_r+0x36>
   177fa:	2b1d      	cmp	r3, #29
   177fc:	d001      	beq.n	17802 <__sflush_r+0xb2>
   177fe:	2b16      	cmp	r3, #22
   17800:	d101      	bne.n	17806 <__sflush_r+0xb6>
   17802:	602f      	str	r7, [r5, #0]
   17804:	e7b1      	b.n	1776a <__sflush_r+0x1a>
   17806:	89a3      	ldrh	r3, [r4, #12]
   17808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1780c:	81a3      	strh	r3, [r4, #12]
   1780e:	e7ad      	b.n	1776c <__sflush_r+0x1c>
   17810:	690f      	ldr	r7, [r1, #16]
   17812:	2f00      	cmp	r7, #0
   17814:	d0a9      	beq.n	1776a <__sflush_r+0x1a>
   17816:	0793      	lsls	r3, r2, #30
   17818:	680e      	ldr	r6, [r1, #0]
   1781a:	bf08      	it	eq
   1781c:	694b      	ldreq	r3, [r1, #20]
   1781e:	600f      	str	r7, [r1, #0]
   17820:	bf18      	it	ne
   17822:	2300      	movne	r3, #0
   17824:	eba6 0807 	sub.w	r8, r6, r7
   17828:	608b      	str	r3, [r1, #8]
   1782a:	f1b8 0f00 	cmp.w	r8, #0
   1782e:	dd9c      	ble.n	1776a <__sflush_r+0x1a>
   17830:	4643      	mov	r3, r8
   17832:	463a      	mov	r2, r7
   17834:	6a21      	ldr	r1, [r4, #32]
   17836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17838:	4628      	mov	r0, r5
   1783a:	47b0      	blx	r6
   1783c:	2800      	cmp	r0, #0
   1783e:	dc06      	bgt.n	1784e <__sflush_r+0xfe>
   17840:	89a3      	ldrh	r3, [r4, #12]
   17842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17846:	81a3      	strh	r3, [r4, #12]
   17848:	f04f 30ff 	mov.w	r0, #4294967295
   1784c:	e78e      	b.n	1776c <__sflush_r+0x1c>
   1784e:	4407      	add	r7, r0
   17850:	eba8 0800 	sub.w	r8, r8, r0
   17854:	e7e9      	b.n	1782a <__sflush_r+0xda>
   17856:	bf00      	nop
   17858:	20400001 	.word	0x20400001

0001785c <_fflush_r>:
   1785c:	b538      	push	{r3, r4, r5, lr}
   1785e:	690b      	ldr	r3, [r1, #16]
   17860:	4605      	mov	r5, r0
   17862:	460c      	mov	r4, r1
   17864:	b1db      	cbz	r3, 1789e <_fflush_r+0x42>
   17866:	b118      	cbz	r0, 17870 <_fflush_r+0x14>
   17868:	6983      	ldr	r3, [r0, #24]
   1786a:	b90b      	cbnz	r3, 17870 <_fflush_r+0x14>
   1786c:	f000 f860 	bl	17930 <__sinit>
   17870:	4b0c      	ldr	r3, [pc, #48]	; (178a4 <_fflush_r+0x48>)
   17872:	429c      	cmp	r4, r3
   17874:	d109      	bne.n	1788a <_fflush_r+0x2e>
   17876:	686c      	ldr	r4, [r5, #4]
   17878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1787c:	b17b      	cbz	r3, 1789e <_fflush_r+0x42>
   1787e:	4621      	mov	r1, r4
   17880:	4628      	mov	r0, r5
   17882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17886:	f7ff bf63 	b.w	17750 <__sflush_r>
   1788a:	4b07      	ldr	r3, [pc, #28]	; (178a8 <_fflush_r+0x4c>)
   1788c:	429c      	cmp	r4, r3
   1788e:	d101      	bne.n	17894 <_fflush_r+0x38>
   17890:	68ac      	ldr	r4, [r5, #8]
   17892:	e7f1      	b.n	17878 <_fflush_r+0x1c>
   17894:	4b05      	ldr	r3, [pc, #20]	; (178ac <_fflush_r+0x50>)
   17896:	429c      	cmp	r4, r3
   17898:	bf08      	it	eq
   1789a:	68ec      	ldreq	r4, [r5, #12]
   1789c:	e7ec      	b.n	17878 <_fflush_r+0x1c>
   1789e:	2000      	movs	r0, #0
   178a0:	bd38      	pop	{r3, r4, r5, pc}
   178a2:	bf00      	nop
   178a4:	00019858 	.word	0x00019858
   178a8:	00019878 	.word	0x00019878
   178ac:	00019838 	.word	0x00019838

000178b0 <std>:
   178b0:	2300      	movs	r3, #0
   178b2:	b510      	push	{r4, lr}
   178b4:	4604      	mov	r4, r0
   178b6:	e9c0 3300 	strd	r3, r3, [r0]
   178ba:	6083      	str	r3, [r0, #8]
   178bc:	8181      	strh	r1, [r0, #12]
   178be:	6643      	str	r3, [r0, #100]	; 0x64
   178c0:	81c2      	strh	r2, [r0, #14]
   178c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   178c6:	6183      	str	r3, [r0, #24]
   178c8:	4619      	mov	r1, r3
   178ca:	2208      	movs	r2, #8
   178cc:	305c      	adds	r0, #92	; 0x5c
   178ce:	f7fd fa6c 	bl	14daa <memset>
   178d2:	4b05      	ldr	r3, [pc, #20]	; (178e8 <std+0x38>)
   178d4:	6263      	str	r3, [r4, #36]	; 0x24
   178d6:	4b05      	ldr	r3, [pc, #20]	; (178ec <std+0x3c>)
   178d8:	62a3      	str	r3, [r4, #40]	; 0x28
   178da:	4b05      	ldr	r3, [pc, #20]	; (178f0 <std+0x40>)
   178dc:	62e3      	str	r3, [r4, #44]	; 0x2c
   178de:	4b05      	ldr	r3, [pc, #20]	; (178f4 <std+0x44>)
   178e0:	6224      	str	r4, [r4, #32]
   178e2:	6323      	str	r3, [r4, #48]	; 0x30
   178e4:	bd10      	pop	{r4, pc}
   178e6:	bf00      	nop
   178e8:	00018f79 	.word	0x00018f79
   178ec:	00018f9b 	.word	0x00018f9b
   178f0:	00018fd3 	.word	0x00018fd3
   178f4:	00018ff7 	.word	0x00018ff7

000178f8 <_cleanup_r>:
   178f8:	4901      	ldr	r1, [pc, #4]	; (17900 <_cleanup_r+0x8>)
   178fa:	f000 b885 	b.w	17a08 <_fwalk_reent>
   178fe:	bf00      	nop
   17900:	0001785d 	.word	0x0001785d

00017904 <__sfmoreglue>:
   17904:	b570      	push	{r4, r5, r6, lr}
   17906:	1e4a      	subs	r2, r1, #1
   17908:	2568      	movs	r5, #104	; 0x68
   1790a:	4355      	muls	r5, r2
   1790c:	460e      	mov	r6, r1
   1790e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   17912:	f7fd faaf 	bl	14e74 <_malloc_r>
   17916:	4604      	mov	r4, r0
   17918:	b140      	cbz	r0, 1792c <__sfmoreglue+0x28>
   1791a:	2100      	movs	r1, #0
   1791c:	e9c0 1600 	strd	r1, r6, [r0]
   17920:	300c      	adds	r0, #12
   17922:	60a0      	str	r0, [r4, #8]
   17924:	f105 0268 	add.w	r2, r5, #104	; 0x68
   17928:	f7fd fa3f 	bl	14daa <memset>
   1792c:	4620      	mov	r0, r4
   1792e:	bd70      	pop	{r4, r5, r6, pc}

00017930 <__sinit>:
   17930:	6983      	ldr	r3, [r0, #24]
   17932:	b510      	push	{r4, lr}
   17934:	4604      	mov	r4, r0
   17936:	bb33      	cbnz	r3, 17986 <__sinit+0x56>
   17938:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   1793c:	6503      	str	r3, [r0, #80]	; 0x50
   1793e:	4b12      	ldr	r3, [pc, #72]	; (17988 <__sinit+0x58>)
   17940:	4a12      	ldr	r2, [pc, #72]	; (1798c <__sinit+0x5c>)
   17942:	681b      	ldr	r3, [r3, #0]
   17944:	6282      	str	r2, [r0, #40]	; 0x28
   17946:	4298      	cmp	r0, r3
   17948:	bf04      	itt	eq
   1794a:	2301      	moveq	r3, #1
   1794c:	6183      	streq	r3, [r0, #24]
   1794e:	f000 f81f 	bl	17990 <__sfp>
   17952:	6060      	str	r0, [r4, #4]
   17954:	4620      	mov	r0, r4
   17956:	f000 f81b 	bl	17990 <__sfp>
   1795a:	60a0      	str	r0, [r4, #8]
   1795c:	4620      	mov	r0, r4
   1795e:	f000 f817 	bl	17990 <__sfp>
   17962:	2200      	movs	r2, #0
   17964:	60e0      	str	r0, [r4, #12]
   17966:	2104      	movs	r1, #4
   17968:	6860      	ldr	r0, [r4, #4]
   1796a:	f7ff ffa1 	bl	178b0 <std>
   1796e:	2201      	movs	r2, #1
   17970:	2109      	movs	r1, #9
   17972:	68a0      	ldr	r0, [r4, #8]
   17974:	f7ff ff9c 	bl	178b0 <std>
   17978:	2202      	movs	r2, #2
   1797a:	2112      	movs	r1, #18
   1797c:	68e0      	ldr	r0, [r4, #12]
   1797e:	f7ff ff97 	bl	178b0 <std>
   17982:	2301      	movs	r3, #1
   17984:	61a3      	str	r3, [r4, #24]
   17986:	bd10      	pop	{r4, pc}
   17988:	00019794 	.word	0x00019794
   1798c:	000178f9 	.word	0x000178f9

00017990 <__sfp>:
   17990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17992:	4b1b      	ldr	r3, [pc, #108]	; (17a00 <__sfp+0x70>)
   17994:	681e      	ldr	r6, [r3, #0]
   17996:	69b3      	ldr	r3, [r6, #24]
   17998:	4607      	mov	r7, r0
   1799a:	b913      	cbnz	r3, 179a2 <__sfp+0x12>
   1799c:	4630      	mov	r0, r6
   1799e:	f7ff ffc7 	bl	17930 <__sinit>
   179a2:	3648      	adds	r6, #72	; 0x48
   179a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   179a8:	3b01      	subs	r3, #1
   179aa:	d503      	bpl.n	179b4 <__sfp+0x24>
   179ac:	6833      	ldr	r3, [r6, #0]
   179ae:	b133      	cbz	r3, 179be <__sfp+0x2e>
   179b0:	6836      	ldr	r6, [r6, #0]
   179b2:	e7f7      	b.n	179a4 <__sfp+0x14>
   179b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   179b8:	b16d      	cbz	r5, 179d6 <__sfp+0x46>
   179ba:	3468      	adds	r4, #104	; 0x68
   179bc:	e7f4      	b.n	179a8 <__sfp+0x18>
   179be:	2104      	movs	r1, #4
   179c0:	4638      	mov	r0, r7
   179c2:	f7ff ff9f 	bl	17904 <__sfmoreglue>
   179c6:	6030      	str	r0, [r6, #0]
   179c8:	2800      	cmp	r0, #0
   179ca:	d1f1      	bne.n	179b0 <__sfp+0x20>
   179cc:	230c      	movs	r3, #12
   179ce:	603b      	str	r3, [r7, #0]
   179d0:	4604      	mov	r4, r0
   179d2:	4620      	mov	r0, r4
   179d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179d6:	4b0b      	ldr	r3, [pc, #44]	; (17a04 <__sfp+0x74>)
   179d8:	6665      	str	r5, [r4, #100]	; 0x64
   179da:	e9c4 5500 	strd	r5, r5, [r4]
   179de:	60a5      	str	r5, [r4, #8]
   179e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
   179e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
   179e8:	2208      	movs	r2, #8
   179ea:	4629      	mov	r1, r5
   179ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   179f0:	f7fd f9db 	bl	14daa <memset>
   179f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   179f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   179fc:	e7e9      	b.n	179d2 <__sfp+0x42>
   179fe:	bf00      	nop
   17a00:	00019794 	.word	0x00019794
   17a04:	ffff0001 	.word	0xffff0001

00017a08 <_fwalk_reent>:
   17a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17a0c:	4680      	mov	r8, r0
   17a0e:	4689      	mov	r9, r1
   17a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
   17a14:	2600      	movs	r6, #0
   17a16:	b914      	cbnz	r4, 17a1e <_fwalk_reent+0x16>
   17a18:	4630      	mov	r0, r6
   17a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17a1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   17a22:	3f01      	subs	r7, #1
   17a24:	d501      	bpl.n	17a2a <_fwalk_reent+0x22>
   17a26:	6824      	ldr	r4, [r4, #0]
   17a28:	e7f5      	b.n	17a16 <_fwalk_reent+0xe>
   17a2a:	89ab      	ldrh	r3, [r5, #12]
   17a2c:	2b01      	cmp	r3, #1
   17a2e:	d907      	bls.n	17a40 <_fwalk_reent+0x38>
   17a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   17a34:	3301      	adds	r3, #1
   17a36:	d003      	beq.n	17a40 <_fwalk_reent+0x38>
   17a38:	4629      	mov	r1, r5
   17a3a:	4640      	mov	r0, r8
   17a3c:	47c8      	blx	r9
   17a3e:	4306      	orrs	r6, r0
   17a40:	3568      	adds	r5, #104	; 0x68
   17a42:	e7ee      	b.n	17a22 <_fwalk_reent+0x1a>

00017a44 <rshift>:
   17a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a46:	6906      	ldr	r6, [r0, #16]
   17a48:	114b      	asrs	r3, r1, #5
   17a4a:	429e      	cmp	r6, r3
   17a4c:	f100 0414 	add.w	r4, r0, #20
   17a50:	dd30      	ble.n	17ab4 <rshift+0x70>
   17a52:	f011 011f 	ands.w	r1, r1, #31
   17a56:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   17a5a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   17a5e:	d108      	bne.n	17a72 <rshift+0x2e>
   17a60:	4621      	mov	r1, r4
   17a62:	42b2      	cmp	r2, r6
   17a64:	460b      	mov	r3, r1
   17a66:	d211      	bcs.n	17a8c <rshift+0x48>
   17a68:	f852 3b04 	ldr.w	r3, [r2], #4
   17a6c:	f841 3b04 	str.w	r3, [r1], #4
   17a70:	e7f7      	b.n	17a62 <rshift+0x1e>
   17a72:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   17a76:	f1c1 0c20 	rsb	ip, r1, #32
   17a7a:	40cd      	lsrs	r5, r1
   17a7c:	3204      	adds	r2, #4
   17a7e:	4623      	mov	r3, r4
   17a80:	42b2      	cmp	r2, r6
   17a82:	4617      	mov	r7, r2
   17a84:	d30c      	bcc.n	17aa0 <rshift+0x5c>
   17a86:	601d      	str	r5, [r3, #0]
   17a88:	b105      	cbz	r5, 17a8c <rshift+0x48>
   17a8a:	3304      	adds	r3, #4
   17a8c:	1b1a      	subs	r2, r3, r4
   17a8e:	42a3      	cmp	r3, r4
   17a90:	ea4f 02a2 	mov.w	r2, r2, asr #2
   17a94:	bf08      	it	eq
   17a96:	2300      	moveq	r3, #0
   17a98:	6102      	str	r2, [r0, #16]
   17a9a:	bf08      	it	eq
   17a9c:	6143      	streq	r3, [r0, #20]
   17a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17aa0:	683f      	ldr	r7, [r7, #0]
   17aa2:	fa07 f70c 	lsl.w	r7, r7, ip
   17aa6:	433d      	orrs	r5, r7
   17aa8:	f843 5b04 	str.w	r5, [r3], #4
   17aac:	f852 5b04 	ldr.w	r5, [r2], #4
   17ab0:	40cd      	lsrs	r5, r1
   17ab2:	e7e5      	b.n	17a80 <rshift+0x3c>
   17ab4:	4623      	mov	r3, r4
   17ab6:	e7e9      	b.n	17a8c <rshift+0x48>

00017ab8 <__hexdig_fun>:
   17ab8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   17abc:	2b09      	cmp	r3, #9
   17abe:	d802      	bhi.n	17ac6 <__hexdig_fun+0xe>
   17ac0:	3820      	subs	r0, #32
   17ac2:	b2c0      	uxtb	r0, r0
   17ac4:	4770      	bx	lr
   17ac6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   17aca:	2b05      	cmp	r3, #5
   17acc:	d801      	bhi.n	17ad2 <__hexdig_fun+0x1a>
   17ace:	3847      	subs	r0, #71	; 0x47
   17ad0:	e7f7      	b.n	17ac2 <__hexdig_fun+0xa>
   17ad2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   17ad6:	2b05      	cmp	r3, #5
   17ad8:	d801      	bhi.n	17ade <__hexdig_fun+0x26>
   17ada:	3827      	subs	r0, #39	; 0x27
   17adc:	e7f1      	b.n	17ac2 <__hexdig_fun+0xa>
   17ade:	2000      	movs	r0, #0
   17ae0:	4770      	bx	lr

00017ae2 <__gethex>:
   17ae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ae6:	b08b      	sub	sp, #44	; 0x2c
   17ae8:	468a      	mov	sl, r1
   17aea:	9002      	str	r0, [sp, #8]
   17aec:	9816      	ldr	r0, [sp, #88]	; 0x58
   17aee:	9306      	str	r3, [sp, #24]
   17af0:	4690      	mov	r8, r2
   17af2:	f000 fad0 	bl	18096 <__localeconv_l>
   17af6:	6803      	ldr	r3, [r0, #0]
   17af8:	9303      	str	r3, [sp, #12]
   17afa:	4618      	mov	r0, r3
   17afc:	f7fe f91e 	bl	15d3c <strlen>
   17b00:	9b03      	ldr	r3, [sp, #12]
   17b02:	9001      	str	r0, [sp, #4]
   17b04:	4403      	add	r3, r0
   17b06:	f04f 0b00 	mov.w	fp, #0
   17b0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   17b0e:	9307      	str	r3, [sp, #28]
   17b10:	f8da 3000 	ldr.w	r3, [sl]
   17b14:	3302      	adds	r3, #2
   17b16:	461f      	mov	r7, r3
   17b18:	f813 0b01 	ldrb.w	r0, [r3], #1
   17b1c:	2830      	cmp	r0, #48	; 0x30
   17b1e:	d06c      	beq.n	17bfa <__gethex+0x118>
   17b20:	f7ff ffca 	bl	17ab8 <__hexdig_fun>
   17b24:	4604      	mov	r4, r0
   17b26:	2800      	cmp	r0, #0
   17b28:	d16a      	bne.n	17c00 <__gethex+0x11e>
   17b2a:	9a01      	ldr	r2, [sp, #4]
   17b2c:	9903      	ldr	r1, [sp, #12]
   17b2e:	4638      	mov	r0, r7
   17b30:	f001 fa65 	bl	18ffe <strncmp>
   17b34:	2800      	cmp	r0, #0
   17b36:	d166      	bne.n	17c06 <__gethex+0x124>
   17b38:	9b01      	ldr	r3, [sp, #4]
   17b3a:	5cf8      	ldrb	r0, [r7, r3]
   17b3c:	18fe      	adds	r6, r7, r3
   17b3e:	f7ff ffbb 	bl	17ab8 <__hexdig_fun>
   17b42:	2800      	cmp	r0, #0
   17b44:	d062      	beq.n	17c0c <__gethex+0x12a>
   17b46:	4633      	mov	r3, r6
   17b48:	7818      	ldrb	r0, [r3, #0]
   17b4a:	2830      	cmp	r0, #48	; 0x30
   17b4c:	461f      	mov	r7, r3
   17b4e:	f103 0301 	add.w	r3, r3, #1
   17b52:	d0f9      	beq.n	17b48 <__gethex+0x66>
   17b54:	f7ff ffb0 	bl	17ab8 <__hexdig_fun>
   17b58:	fab0 f580 	clz	r5, r0
   17b5c:	096d      	lsrs	r5, r5, #5
   17b5e:	4634      	mov	r4, r6
   17b60:	f04f 0b01 	mov.w	fp, #1
   17b64:	463a      	mov	r2, r7
   17b66:	4616      	mov	r6, r2
   17b68:	3201      	adds	r2, #1
   17b6a:	7830      	ldrb	r0, [r6, #0]
   17b6c:	f7ff ffa4 	bl	17ab8 <__hexdig_fun>
   17b70:	2800      	cmp	r0, #0
   17b72:	d1f8      	bne.n	17b66 <__gethex+0x84>
   17b74:	9a01      	ldr	r2, [sp, #4]
   17b76:	9903      	ldr	r1, [sp, #12]
   17b78:	4630      	mov	r0, r6
   17b7a:	f001 fa40 	bl	18ffe <strncmp>
   17b7e:	b950      	cbnz	r0, 17b96 <__gethex+0xb4>
   17b80:	b954      	cbnz	r4, 17b98 <__gethex+0xb6>
   17b82:	9b01      	ldr	r3, [sp, #4]
   17b84:	18f4      	adds	r4, r6, r3
   17b86:	4622      	mov	r2, r4
   17b88:	4616      	mov	r6, r2
   17b8a:	3201      	adds	r2, #1
   17b8c:	7830      	ldrb	r0, [r6, #0]
   17b8e:	f7ff ff93 	bl	17ab8 <__hexdig_fun>
   17b92:	2800      	cmp	r0, #0
   17b94:	d1f8      	bne.n	17b88 <__gethex+0xa6>
   17b96:	b10c      	cbz	r4, 17b9c <__gethex+0xba>
   17b98:	1ba4      	subs	r4, r4, r6
   17b9a:	00a4      	lsls	r4, r4, #2
   17b9c:	7833      	ldrb	r3, [r6, #0]
   17b9e:	2b50      	cmp	r3, #80	; 0x50
   17ba0:	d001      	beq.n	17ba6 <__gethex+0xc4>
   17ba2:	2b70      	cmp	r3, #112	; 0x70
   17ba4:	d140      	bne.n	17c28 <__gethex+0x146>
   17ba6:	7873      	ldrb	r3, [r6, #1]
   17ba8:	2b2b      	cmp	r3, #43	; 0x2b
   17baa:	d031      	beq.n	17c10 <__gethex+0x12e>
   17bac:	2b2d      	cmp	r3, #45	; 0x2d
   17bae:	d033      	beq.n	17c18 <__gethex+0x136>
   17bb0:	1c71      	adds	r1, r6, #1
   17bb2:	f04f 0900 	mov.w	r9, #0
   17bb6:	7808      	ldrb	r0, [r1, #0]
   17bb8:	f7ff ff7e 	bl	17ab8 <__hexdig_fun>
   17bbc:	1e43      	subs	r3, r0, #1
   17bbe:	b2db      	uxtb	r3, r3
   17bc0:	2b18      	cmp	r3, #24
   17bc2:	d831      	bhi.n	17c28 <__gethex+0x146>
   17bc4:	f1a0 0210 	sub.w	r2, r0, #16
   17bc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   17bcc:	f7ff ff74 	bl	17ab8 <__hexdig_fun>
   17bd0:	1e43      	subs	r3, r0, #1
   17bd2:	b2db      	uxtb	r3, r3
   17bd4:	2b18      	cmp	r3, #24
   17bd6:	d922      	bls.n	17c1e <__gethex+0x13c>
   17bd8:	f1b9 0f00 	cmp.w	r9, #0
   17bdc:	d000      	beq.n	17be0 <__gethex+0xfe>
   17bde:	4252      	negs	r2, r2
   17be0:	4414      	add	r4, r2
   17be2:	f8ca 1000 	str.w	r1, [sl]
   17be6:	b30d      	cbz	r5, 17c2c <__gethex+0x14a>
   17be8:	f1bb 0f00 	cmp.w	fp, #0
   17bec:	bf0c      	ite	eq
   17bee:	2706      	moveq	r7, #6
   17bf0:	2700      	movne	r7, #0
   17bf2:	4638      	mov	r0, r7
   17bf4:	b00b      	add	sp, #44	; 0x2c
   17bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bfa:	f10b 0b01 	add.w	fp, fp, #1
   17bfe:	e78a      	b.n	17b16 <__gethex+0x34>
   17c00:	2500      	movs	r5, #0
   17c02:	462c      	mov	r4, r5
   17c04:	e7ae      	b.n	17b64 <__gethex+0x82>
   17c06:	463e      	mov	r6, r7
   17c08:	2501      	movs	r5, #1
   17c0a:	e7c7      	b.n	17b9c <__gethex+0xba>
   17c0c:	4604      	mov	r4, r0
   17c0e:	e7fb      	b.n	17c08 <__gethex+0x126>
   17c10:	f04f 0900 	mov.w	r9, #0
   17c14:	1cb1      	adds	r1, r6, #2
   17c16:	e7ce      	b.n	17bb6 <__gethex+0xd4>
   17c18:	f04f 0901 	mov.w	r9, #1
   17c1c:	e7fa      	b.n	17c14 <__gethex+0x132>
   17c1e:	230a      	movs	r3, #10
   17c20:	fb03 0202 	mla	r2, r3, r2, r0
   17c24:	3a10      	subs	r2, #16
   17c26:	e7cf      	b.n	17bc8 <__gethex+0xe6>
   17c28:	4631      	mov	r1, r6
   17c2a:	e7da      	b.n	17be2 <__gethex+0x100>
   17c2c:	1bf3      	subs	r3, r6, r7
   17c2e:	3b01      	subs	r3, #1
   17c30:	4629      	mov	r1, r5
   17c32:	2b07      	cmp	r3, #7
   17c34:	dc49      	bgt.n	17cca <__gethex+0x1e8>
   17c36:	9802      	ldr	r0, [sp, #8]
   17c38:	f000 fb0c 	bl	18254 <_Balloc>
   17c3c:	9b01      	ldr	r3, [sp, #4]
   17c3e:	f100 0914 	add.w	r9, r0, #20
   17c42:	f04f 0b00 	mov.w	fp, #0
   17c46:	f1c3 0301 	rsb	r3, r3, #1
   17c4a:	4605      	mov	r5, r0
   17c4c:	f8cd 9010 	str.w	r9, [sp, #16]
   17c50:	46da      	mov	sl, fp
   17c52:	9308      	str	r3, [sp, #32]
   17c54:	42b7      	cmp	r7, r6
   17c56:	d33b      	bcc.n	17cd0 <__gethex+0x1ee>
   17c58:	9804      	ldr	r0, [sp, #16]
   17c5a:	f840 ab04 	str.w	sl, [r0], #4
   17c5e:	eba0 0009 	sub.w	r0, r0, r9
   17c62:	1080      	asrs	r0, r0, #2
   17c64:	6128      	str	r0, [r5, #16]
   17c66:	0147      	lsls	r7, r0, #5
   17c68:	4650      	mov	r0, sl
   17c6a:	f000 fbb7 	bl	183dc <__hi0bits>
   17c6e:	f8d8 6000 	ldr.w	r6, [r8]
   17c72:	1a3f      	subs	r7, r7, r0
   17c74:	42b7      	cmp	r7, r6
   17c76:	dd64      	ble.n	17d42 <__gethex+0x260>
   17c78:	1bbf      	subs	r7, r7, r6
   17c7a:	4639      	mov	r1, r7
   17c7c:	4628      	mov	r0, r5
   17c7e:	f000 fec8 	bl	18a12 <__any_on>
   17c82:	4682      	mov	sl, r0
   17c84:	b178      	cbz	r0, 17ca6 <__gethex+0x1c4>
   17c86:	1e7b      	subs	r3, r7, #1
   17c88:	1159      	asrs	r1, r3, #5
   17c8a:	f003 021f 	and.w	r2, r3, #31
   17c8e:	f04f 0a01 	mov.w	sl, #1
   17c92:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   17c96:	fa0a f202 	lsl.w	r2, sl, r2
   17c9a:	420a      	tst	r2, r1
   17c9c:	d003      	beq.n	17ca6 <__gethex+0x1c4>
   17c9e:	4553      	cmp	r3, sl
   17ca0:	dc46      	bgt.n	17d30 <__gethex+0x24e>
   17ca2:	f04f 0a02 	mov.w	sl, #2
   17ca6:	4639      	mov	r1, r7
   17ca8:	4628      	mov	r0, r5
   17caa:	f7ff fecb 	bl	17a44 <rshift>
   17cae:	443c      	add	r4, r7
   17cb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17cb4:	42a3      	cmp	r3, r4
   17cb6:	da52      	bge.n	17d5e <__gethex+0x27c>
   17cb8:	4629      	mov	r1, r5
   17cba:	9802      	ldr	r0, [sp, #8]
   17cbc:	f000 fafe 	bl	182bc <_Bfree>
   17cc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   17cc2:	2300      	movs	r3, #0
   17cc4:	6013      	str	r3, [r2, #0]
   17cc6:	27a3      	movs	r7, #163	; 0xa3
   17cc8:	e793      	b.n	17bf2 <__gethex+0x110>
   17cca:	3101      	adds	r1, #1
   17ccc:	105b      	asrs	r3, r3, #1
   17cce:	e7b0      	b.n	17c32 <__gethex+0x150>
   17cd0:	1e73      	subs	r3, r6, #1
   17cd2:	9305      	str	r3, [sp, #20]
   17cd4:	9a07      	ldr	r2, [sp, #28]
   17cd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   17cda:	4293      	cmp	r3, r2
   17cdc:	d018      	beq.n	17d10 <__gethex+0x22e>
   17cde:	f1bb 0f20 	cmp.w	fp, #32
   17ce2:	d107      	bne.n	17cf4 <__gethex+0x212>
   17ce4:	9b04      	ldr	r3, [sp, #16]
   17ce6:	f8c3 a000 	str.w	sl, [r3]
   17cea:	3304      	adds	r3, #4
   17cec:	f04f 0a00 	mov.w	sl, #0
   17cf0:	9304      	str	r3, [sp, #16]
   17cf2:	46d3      	mov	fp, sl
   17cf4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   17cf8:	f7ff fede 	bl	17ab8 <__hexdig_fun>
   17cfc:	f000 000f 	and.w	r0, r0, #15
   17d00:	fa00 f00b 	lsl.w	r0, r0, fp
   17d04:	ea4a 0a00 	orr.w	sl, sl, r0
   17d08:	f10b 0b04 	add.w	fp, fp, #4
   17d0c:	9b05      	ldr	r3, [sp, #20]
   17d0e:	e00d      	b.n	17d2c <__gethex+0x24a>
   17d10:	9b05      	ldr	r3, [sp, #20]
   17d12:	9a08      	ldr	r2, [sp, #32]
   17d14:	4413      	add	r3, r2
   17d16:	42bb      	cmp	r3, r7
   17d18:	d3e1      	bcc.n	17cde <__gethex+0x1fc>
   17d1a:	4618      	mov	r0, r3
   17d1c:	9a01      	ldr	r2, [sp, #4]
   17d1e:	9903      	ldr	r1, [sp, #12]
   17d20:	9309      	str	r3, [sp, #36]	; 0x24
   17d22:	f001 f96c 	bl	18ffe <strncmp>
   17d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d28:	2800      	cmp	r0, #0
   17d2a:	d1d8      	bne.n	17cde <__gethex+0x1fc>
   17d2c:	461e      	mov	r6, r3
   17d2e:	e791      	b.n	17c54 <__gethex+0x172>
   17d30:	1eb9      	subs	r1, r7, #2
   17d32:	4628      	mov	r0, r5
   17d34:	f000 fe6d 	bl	18a12 <__any_on>
   17d38:	2800      	cmp	r0, #0
   17d3a:	d0b2      	beq.n	17ca2 <__gethex+0x1c0>
   17d3c:	f04f 0a03 	mov.w	sl, #3
   17d40:	e7b1      	b.n	17ca6 <__gethex+0x1c4>
   17d42:	da09      	bge.n	17d58 <__gethex+0x276>
   17d44:	1bf7      	subs	r7, r6, r7
   17d46:	4629      	mov	r1, r5
   17d48:	463a      	mov	r2, r7
   17d4a:	9802      	ldr	r0, [sp, #8]
   17d4c:	f000 fc82 	bl	18654 <__lshift>
   17d50:	1be4      	subs	r4, r4, r7
   17d52:	4605      	mov	r5, r0
   17d54:	f100 0914 	add.w	r9, r0, #20
   17d58:	f04f 0a00 	mov.w	sl, #0
   17d5c:	e7a8      	b.n	17cb0 <__gethex+0x1ce>
   17d5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   17d62:	42a0      	cmp	r0, r4
   17d64:	dd6a      	ble.n	17e3c <__gethex+0x35a>
   17d66:	1b04      	subs	r4, r0, r4
   17d68:	42a6      	cmp	r6, r4
   17d6a:	dc2e      	bgt.n	17dca <__gethex+0x2e8>
   17d6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   17d70:	2b02      	cmp	r3, #2
   17d72:	d022      	beq.n	17dba <__gethex+0x2d8>
   17d74:	2b03      	cmp	r3, #3
   17d76:	d024      	beq.n	17dc2 <__gethex+0x2e0>
   17d78:	2b01      	cmp	r3, #1
   17d7a:	d115      	bne.n	17da8 <__gethex+0x2c6>
   17d7c:	42a6      	cmp	r6, r4
   17d7e:	d113      	bne.n	17da8 <__gethex+0x2c6>
   17d80:	2e01      	cmp	r6, #1
   17d82:	dc0b      	bgt.n	17d9c <__gethex+0x2ba>
   17d84:	9a06      	ldr	r2, [sp, #24]
   17d86:	f8d8 3004 	ldr.w	r3, [r8, #4]
   17d8a:	6013      	str	r3, [r2, #0]
   17d8c:	2301      	movs	r3, #1
   17d8e:	612b      	str	r3, [r5, #16]
   17d90:	f8c9 3000 	str.w	r3, [r9]
   17d94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17d96:	2762      	movs	r7, #98	; 0x62
   17d98:	601d      	str	r5, [r3, #0]
   17d9a:	e72a      	b.n	17bf2 <__gethex+0x110>
   17d9c:	1e71      	subs	r1, r6, #1
   17d9e:	4628      	mov	r0, r5
   17da0:	f000 fe37 	bl	18a12 <__any_on>
   17da4:	2800      	cmp	r0, #0
   17da6:	d1ed      	bne.n	17d84 <__gethex+0x2a2>
   17da8:	4629      	mov	r1, r5
   17daa:	9802      	ldr	r0, [sp, #8]
   17dac:	f000 fa86 	bl	182bc <_Bfree>
   17db0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   17db2:	2300      	movs	r3, #0
   17db4:	6013      	str	r3, [r2, #0]
   17db6:	2750      	movs	r7, #80	; 0x50
   17db8:	e71b      	b.n	17bf2 <__gethex+0x110>
   17dba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17dbc:	2b00      	cmp	r3, #0
   17dbe:	d0e1      	beq.n	17d84 <__gethex+0x2a2>
   17dc0:	e7f2      	b.n	17da8 <__gethex+0x2c6>
   17dc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17dc4:	2b00      	cmp	r3, #0
   17dc6:	d1dd      	bne.n	17d84 <__gethex+0x2a2>
   17dc8:	e7ee      	b.n	17da8 <__gethex+0x2c6>
   17dca:	1e67      	subs	r7, r4, #1
   17dcc:	f1ba 0f00 	cmp.w	sl, #0
   17dd0:	d131      	bne.n	17e36 <__gethex+0x354>
   17dd2:	b127      	cbz	r7, 17dde <__gethex+0x2fc>
   17dd4:	4639      	mov	r1, r7
   17dd6:	4628      	mov	r0, r5
   17dd8:	f000 fe1b 	bl	18a12 <__any_on>
   17ddc:	4682      	mov	sl, r0
   17dde:	117a      	asrs	r2, r7, #5
   17de0:	2301      	movs	r3, #1
   17de2:	f007 071f 	and.w	r7, r7, #31
   17de6:	fa03 f707 	lsl.w	r7, r3, r7
   17dea:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   17dee:	4621      	mov	r1, r4
   17df0:	421f      	tst	r7, r3
   17df2:	4628      	mov	r0, r5
   17df4:	bf18      	it	ne
   17df6:	f04a 0a02 	orrne.w	sl, sl, #2
   17dfa:	1b36      	subs	r6, r6, r4
   17dfc:	f7ff fe22 	bl	17a44 <rshift>
   17e00:	f8d8 4004 	ldr.w	r4, [r8, #4]
   17e04:	2702      	movs	r7, #2
   17e06:	f1ba 0f00 	cmp.w	sl, #0
   17e0a:	d048      	beq.n	17e9e <__gethex+0x3bc>
   17e0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   17e10:	2b02      	cmp	r3, #2
   17e12:	d015      	beq.n	17e40 <__gethex+0x35e>
   17e14:	2b03      	cmp	r3, #3
   17e16:	d017      	beq.n	17e48 <__gethex+0x366>
   17e18:	2b01      	cmp	r3, #1
   17e1a:	d109      	bne.n	17e30 <__gethex+0x34e>
   17e1c:	f01a 0f02 	tst.w	sl, #2
   17e20:	d006      	beq.n	17e30 <__gethex+0x34e>
   17e22:	f8d9 3000 	ldr.w	r3, [r9]
   17e26:	ea4a 0a03 	orr.w	sl, sl, r3
   17e2a:	f01a 0f01 	tst.w	sl, #1
   17e2e:	d10e      	bne.n	17e4e <__gethex+0x36c>
   17e30:	f047 0710 	orr.w	r7, r7, #16
   17e34:	e033      	b.n	17e9e <__gethex+0x3bc>
   17e36:	f04f 0a01 	mov.w	sl, #1
   17e3a:	e7d0      	b.n	17dde <__gethex+0x2fc>
   17e3c:	2701      	movs	r7, #1
   17e3e:	e7e2      	b.n	17e06 <__gethex+0x324>
   17e40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17e42:	f1c3 0301 	rsb	r3, r3, #1
   17e46:	9315      	str	r3, [sp, #84]	; 0x54
   17e48:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17e4a:	2b00      	cmp	r3, #0
   17e4c:	d0f0      	beq.n	17e30 <__gethex+0x34e>
   17e4e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   17e52:	f105 0314 	add.w	r3, r5, #20
   17e56:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   17e5a:	eb03 010a 	add.w	r1, r3, sl
   17e5e:	f04f 0c00 	mov.w	ip, #0
   17e62:	4618      	mov	r0, r3
   17e64:	f853 2b04 	ldr.w	r2, [r3], #4
   17e68:	f1b2 3fff 	cmp.w	r2, #4294967295
   17e6c:	d01c      	beq.n	17ea8 <__gethex+0x3c6>
   17e6e:	3201      	adds	r2, #1
   17e70:	6002      	str	r2, [r0, #0]
   17e72:	2f02      	cmp	r7, #2
   17e74:	f105 0314 	add.w	r3, r5, #20
   17e78:	d138      	bne.n	17eec <__gethex+0x40a>
   17e7a:	f8d8 2000 	ldr.w	r2, [r8]
   17e7e:	3a01      	subs	r2, #1
   17e80:	42b2      	cmp	r2, r6
   17e82:	d10a      	bne.n	17e9a <__gethex+0x3b8>
   17e84:	1171      	asrs	r1, r6, #5
   17e86:	2201      	movs	r2, #1
   17e88:	f006 061f 	and.w	r6, r6, #31
   17e8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   17e90:	fa02 f606 	lsl.w	r6, r2, r6
   17e94:	421e      	tst	r6, r3
   17e96:	bf18      	it	ne
   17e98:	4617      	movne	r7, r2
   17e9a:	f047 0720 	orr.w	r7, r7, #32
   17e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17ea0:	601d      	str	r5, [r3, #0]
   17ea2:	9b06      	ldr	r3, [sp, #24]
   17ea4:	601c      	str	r4, [r3, #0]
   17ea6:	e6a4      	b.n	17bf2 <__gethex+0x110>
   17ea8:	4299      	cmp	r1, r3
   17eaa:	f843 cc04 	str.w	ip, [r3, #-4]
   17eae:	d8d8      	bhi.n	17e62 <__gethex+0x380>
   17eb0:	68ab      	ldr	r3, [r5, #8]
   17eb2:	4599      	cmp	r9, r3
   17eb4:	db12      	blt.n	17edc <__gethex+0x3fa>
   17eb6:	6869      	ldr	r1, [r5, #4]
   17eb8:	9802      	ldr	r0, [sp, #8]
   17eba:	3101      	adds	r1, #1
   17ebc:	f000 f9ca 	bl	18254 <_Balloc>
   17ec0:	692a      	ldr	r2, [r5, #16]
   17ec2:	3202      	adds	r2, #2
   17ec4:	f105 010c 	add.w	r1, r5, #12
   17ec8:	4683      	mov	fp, r0
   17eca:	0092      	lsls	r2, r2, #2
   17ecc:	300c      	adds	r0, #12
   17ece:	f7fc ff61 	bl	14d94 <memcpy>
   17ed2:	4629      	mov	r1, r5
   17ed4:	9802      	ldr	r0, [sp, #8]
   17ed6:	f000 f9f1 	bl	182bc <_Bfree>
   17eda:	465d      	mov	r5, fp
   17edc:	692b      	ldr	r3, [r5, #16]
   17ede:	1c5a      	adds	r2, r3, #1
   17ee0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   17ee4:	612a      	str	r2, [r5, #16]
   17ee6:	2201      	movs	r2, #1
   17ee8:	615a      	str	r2, [r3, #20]
   17eea:	e7c2      	b.n	17e72 <__gethex+0x390>
   17eec:	692a      	ldr	r2, [r5, #16]
   17eee:	454a      	cmp	r2, r9
   17ef0:	dd0b      	ble.n	17f0a <__gethex+0x428>
   17ef2:	2101      	movs	r1, #1
   17ef4:	4628      	mov	r0, r5
   17ef6:	f7ff fda5 	bl	17a44 <rshift>
   17efa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17efe:	3401      	adds	r4, #1
   17f00:	42a3      	cmp	r3, r4
   17f02:	f6ff aed9 	blt.w	17cb8 <__gethex+0x1d6>
   17f06:	2701      	movs	r7, #1
   17f08:	e7c7      	b.n	17e9a <__gethex+0x3b8>
   17f0a:	f016 061f 	ands.w	r6, r6, #31
   17f0e:	d0fa      	beq.n	17f06 <__gethex+0x424>
   17f10:	449a      	add	sl, r3
   17f12:	f1c6 0620 	rsb	r6, r6, #32
   17f16:	f85a 0c04 	ldr.w	r0, [sl, #-4]
   17f1a:	f000 fa5f 	bl	183dc <__hi0bits>
   17f1e:	42b0      	cmp	r0, r6
   17f20:	dbe7      	blt.n	17ef2 <__gethex+0x410>
   17f22:	e7f0      	b.n	17f06 <__gethex+0x424>

00017f24 <L_shift>:
   17f24:	f1c2 0208 	rsb	r2, r2, #8
   17f28:	0092      	lsls	r2, r2, #2
   17f2a:	b570      	push	{r4, r5, r6, lr}
   17f2c:	f1c2 0620 	rsb	r6, r2, #32
   17f30:	6843      	ldr	r3, [r0, #4]
   17f32:	6804      	ldr	r4, [r0, #0]
   17f34:	fa03 f506 	lsl.w	r5, r3, r6
   17f38:	432c      	orrs	r4, r5
   17f3a:	40d3      	lsrs	r3, r2
   17f3c:	6004      	str	r4, [r0, #0]
   17f3e:	f840 3f04 	str.w	r3, [r0, #4]!
   17f42:	4288      	cmp	r0, r1
   17f44:	d3f4      	bcc.n	17f30 <L_shift+0xc>
   17f46:	bd70      	pop	{r4, r5, r6, pc}

00017f48 <__match>:
   17f48:	b530      	push	{r4, r5, lr}
   17f4a:	6803      	ldr	r3, [r0, #0]
   17f4c:	3301      	adds	r3, #1
   17f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
   17f52:	b914      	cbnz	r4, 17f5a <__match+0x12>
   17f54:	6003      	str	r3, [r0, #0]
   17f56:	2001      	movs	r0, #1
   17f58:	bd30      	pop	{r4, r5, pc}
   17f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   17f5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   17f62:	2d19      	cmp	r5, #25
   17f64:	bf98      	it	ls
   17f66:	3220      	addls	r2, #32
   17f68:	42a2      	cmp	r2, r4
   17f6a:	d0f0      	beq.n	17f4e <__match+0x6>
   17f6c:	2000      	movs	r0, #0
   17f6e:	e7f3      	b.n	17f58 <__match+0x10>

00017f70 <__hexnan>:
   17f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f74:	680b      	ldr	r3, [r1, #0]
   17f76:	6801      	ldr	r1, [r0, #0]
   17f78:	115f      	asrs	r7, r3, #5
   17f7a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   17f7e:	f013 031f 	ands.w	r3, r3, #31
   17f82:	b087      	sub	sp, #28
   17f84:	bf18      	it	ne
   17f86:	3704      	addne	r7, #4
   17f88:	2500      	movs	r5, #0
   17f8a:	1f3e      	subs	r6, r7, #4
   17f8c:	4682      	mov	sl, r0
   17f8e:	4690      	mov	r8, r2
   17f90:	9301      	str	r3, [sp, #4]
   17f92:	f847 5c04 	str.w	r5, [r7, #-4]
   17f96:	46b1      	mov	r9, r6
   17f98:	4634      	mov	r4, r6
   17f9a:	9502      	str	r5, [sp, #8]
   17f9c:	46ab      	mov	fp, r5
   17f9e:	784a      	ldrb	r2, [r1, #1]
   17fa0:	1c4b      	adds	r3, r1, #1
   17fa2:	9303      	str	r3, [sp, #12]
   17fa4:	b342      	cbz	r2, 17ff8 <__hexnan+0x88>
   17fa6:	4610      	mov	r0, r2
   17fa8:	9105      	str	r1, [sp, #20]
   17faa:	9204      	str	r2, [sp, #16]
   17fac:	f7ff fd84 	bl	17ab8 <__hexdig_fun>
   17fb0:	2800      	cmp	r0, #0
   17fb2:	d143      	bne.n	1803c <__hexnan+0xcc>
   17fb4:	9a04      	ldr	r2, [sp, #16]
   17fb6:	9905      	ldr	r1, [sp, #20]
   17fb8:	2a20      	cmp	r2, #32
   17fba:	d818      	bhi.n	17fee <__hexnan+0x7e>
   17fbc:	9b02      	ldr	r3, [sp, #8]
   17fbe:	459b      	cmp	fp, r3
   17fc0:	dd13      	ble.n	17fea <__hexnan+0x7a>
   17fc2:	454c      	cmp	r4, r9
   17fc4:	d206      	bcs.n	17fd4 <__hexnan+0x64>
   17fc6:	2d07      	cmp	r5, #7
   17fc8:	dc04      	bgt.n	17fd4 <__hexnan+0x64>
   17fca:	462a      	mov	r2, r5
   17fcc:	4649      	mov	r1, r9
   17fce:	4620      	mov	r0, r4
   17fd0:	f7ff ffa8 	bl	17f24 <L_shift>
   17fd4:	4544      	cmp	r4, r8
   17fd6:	d944      	bls.n	18062 <__hexnan+0xf2>
   17fd8:	2300      	movs	r3, #0
   17fda:	f1a4 0904 	sub.w	r9, r4, #4
   17fde:	f844 3c04 	str.w	r3, [r4, #-4]
   17fe2:	f8cd b008 	str.w	fp, [sp, #8]
   17fe6:	464c      	mov	r4, r9
   17fe8:	461d      	mov	r5, r3
   17fea:	9903      	ldr	r1, [sp, #12]
   17fec:	e7d7      	b.n	17f9e <__hexnan+0x2e>
   17fee:	2a29      	cmp	r2, #41	; 0x29
   17ff0:	d14a      	bne.n	18088 <__hexnan+0x118>
   17ff2:	3102      	adds	r1, #2
   17ff4:	f8ca 1000 	str.w	r1, [sl]
   17ff8:	f1bb 0f00 	cmp.w	fp, #0
   17ffc:	d044      	beq.n	18088 <__hexnan+0x118>
   17ffe:	454c      	cmp	r4, r9
   18000:	d206      	bcs.n	18010 <__hexnan+0xa0>
   18002:	2d07      	cmp	r5, #7
   18004:	dc04      	bgt.n	18010 <__hexnan+0xa0>
   18006:	462a      	mov	r2, r5
   18008:	4649      	mov	r1, r9
   1800a:	4620      	mov	r0, r4
   1800c:	f7ff ff8a 	bl	17f24 <L_shift>
   18010:	4544      	cmp	r4, r8
   18012:	d928      	bls.n	18066 <__hexnan+0xf6>
   18014:	4643      	mov	r3, r8
   18016:	f854 2b04 	ldr.w	r2, [r4], #4
   1801a:	f843 2b04 	str.w	r2, [r3], #4
   1801e:	42a6      	cmp	r6, r4
   18020:	d2f9      	bcs.n	18016 <__hexnan+0xa6>
   18022:	2200      	movs	r2, #0
   18024:	f843 2b04 	str.w	r2, [r3], #4
   18028:	429e      	cmp	r6, r3
   1802a:	d2fb      	bcs.n	18024 <__hexnan+0xb4>
   1802c:	6833      	ldr	r3, [r6, #0]
   1802e:	b91b      	cbnz	r3, 18038 <__hexnan+0xc8>
   18030:	4546      	cmp	r6, r8
   18032:	d127      	bne.n	18084 <__hexnan+0x114>
   18034:	2301      	movs	r3, #1
   18036:	6033      	str	r3, [r6, #0]
   18038:	2005      	movs	r0, #5
   1803a:	e026      	b.n	1808a <__hexnan+0x11a>
   1803c:	3501      	adds	r5, #1
   1803e:	2d08      	cmp	r5, #8
   18040:	f10b 0b01 	add.w	fp, fp, #1
   18044:	dd06      	ble.n	18054 <__hexnan+0xe4>
   18046:	4544      	cmp	r4, r8
   18048:	d9cf      	bls.n	17fea <__hexnan+0x7a>
   1804a:	2300      	movs	r3, #0
   1804c:	f844 3c04 	str.w	r3, [r4, #-4]
   18050:	2501      	movs	r5, #1
   18052:	3c04      	subs	r4, #4
   18054:	6822      	ldr	r2, [r4, #0]
   18056:	f000 000f 	and.w	r0, r0, #15
   1805a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   1805e:	6020      	str	r0, [r4, #0]
   18060:	e7c3      	b.n	17fea <__hexnan+0x7a>
   18062:	2508      	movs	r5, #8
   18064:	e7c1      	b.n	17fea <__hexnan+0x7a>
   18066:	9b01      	ldr	r3, [sp, #4]
   18068:	2b00      	cmp	r3, #0
   1806a:	d0df      	beq.n	1802c <__hexnan+0xbc>
   1806c:	f04f 32ff 	mov.w	r2, #4294967295
   18070:	f1c3 0320 	rsb	r3, r3, #32
   18074:	fa22 f303 	lsr.w	r3, r2, r3
   18078:	f857 2c04 	ldr.w	r2, [r7, #-4]
   1807c:	401a      	ands	r2, r3
   1807e:	f847 2c04 	str.w	r2, [r7, #-4]
   18082:	e7d3      	b.n	1802c <__hexnan+0xbc>
   18084:	3e04      	subs	r6, #4
   18086:	e7d1      	b.n	1802c <__hexnan+0xbc>
   18088:	2004      	movs	r0, #4
   1808a:	b007      	add	sp, #28
   1808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018090 <__locale_ctype_ptr_l>:
   18090:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   18094:	4770      	bx	lr

00018096 <__localeconv_l>:
   18096:	30f0      	adds	r0, #240	; 0xf0
   18098:	4770      	bx	lr
	...

0001809c <_localeconv_r>:
   1809c:	4b04      	ldr	r3, [pc, #16]	; (180b0 <_localeconv_r+0x14>)
   1809e:	681b      	ldr	r3, [r3, #0]
   180a0:	6a18      	ldr	r0, [r3, #32]
   180a2:	4b04      	ldr	r3, [pc, #16]	; (180b4 <_localeconv_r+0x18>)
   180a4:	2800      	cmp	r0, #0
   180a6:	bf08      	it	eq
   180a8:	4618      	moveq	r0, r3
   180aa:	30f0      	adds	r0, #240	; 0xf0
   180ac:	4770      	bx	lr
   180ae:	bf00      	nop
   180b0:	00029e28 	.word	0x00029e28
   180b4:	00029e8c 	.word	0x00029e8c

000180b8 <__swhatbuf_r>:
   180b8:	b570      	push	{r4, r5, r6, lr}
   180ba:	460e      	mov	r6, r1
   180bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   180c0:	2900      	cmp	r1, #0
   180c2:	b096      	sub	sp, #88	; 0x58
   180c4:	4614      	mov	r4, r2
   180c6:	461d      	mov	r5, r3
   180c8:	da07      	bge.n	180da <__swhatbuf_r+0x22>
   180ca:	2300      	movs	r3, #0
   180cc:	602b      	str	r3, [r5, #0]
   180ce:	89b3      	ldrh	r3, [r6, #12]
   180d0:	061a      	lsls	r2, r3, #24
   180d2:	d410      	bmi.n	180f6 <__swhatbuf_r+0x3e>
   180d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   180d8:	e00e      	b.n	180f8 <__swhatbuf_r+0x40>
   180da:	466a      	mov	r2, sp
   180dc:	f000 ffd0 	bl	19080 <_fstat_r>
   180e0:	2800      	cmp	r0, #0
   180e2:	dbf2      	blt.n	180ca <__swhatbuf_r+0x12>
   180e4:	9a01      	ldr	r2, [sp, #4]
   180e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   180ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   180ee:	425a      	negs	r2, r3
   180f0:	415a      	adcs	r2, r3
   180f2:	602a      	str	r2, [r5, #0]
   180f4:	e7ee      	b.n	180d4 <__swhatbuf_r+0x1c>
   180f6:	2340      	movs	r3, #64	; 0x40
   180f8:	2000      	movs	r0, #0
   180fa:	6023      	str	r3, [r4, #0]
   180fc:	b016      	add	sp, #88	; 0x58
   180fe:	bd70      	pop	{r4, r5, r6, pc}

00018100 <__smakebuf_r>:
   18100:	898b      	ldrh	r3, [r1, #12]
   18102:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18104:	079d      	lsls	r5, r3, #30
   18106:	4606      	mov	r6, r0
   18108:	460c      	mov	r4, r1
   1810a:	d507      	bpl.n	1811c <__smakebuf_r+0x1c>
   1810c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   18110:	6023      	str	r3, [r4, #0]
   18112:	6123      	str	r3, [r4, #16]
   18114:	2301      	movs	r3, #1
   18116:	6163      	str	r3, [r4, #20]
   18118:	b002      	add	sp, #8
   1811a:	bd70      	pop	{r4, r5, r6, pc}
   1811c:	ab01      	add	r3, sp, #4
   1811e:	466a      	mov	r2, sp
   18120:	f7ff ffca 	bl	180b8 <__swhatbuf_r>
   18124:	9900      	ldr	r1, [sp, #0]
   18126:	4605      	mov	r5, r0
   18128:	4630      	mov	r0, r6
   1812a:	f7fc fea3 	bl	14e74 <_malloc_r>
   1812e:	b948      	cbnz	r0, 18144 <__smakebuf_r+0x44>
   18130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18134:	059a      	lsls	r2, r3, #22
   18136:	d4ef      	bmi.n	18118 <__smakebuf_r+0x18>
   18138:	f023 0303 	bic.w	r3, r3, #3
   1813c:	f043 0302 	orr.w	r3, r3, #2
   18140:	81a3      	strh	r3, [r4, #12]
   18142:	e7e3      	b.n	1810c <__smakebuf_r+0xc>
   18144:	4b0d      	ldr	r3, [pc, #52]	; (1817c <__smakebuf_r+0x7c>)
   18146:	62b3      	str	r3, [r6, #40]	; 0x28
   18148:	89a3      	ldrh	r3, [r4, #12]
   1814a:	6020      	str	r0, [r4, #0]
   1814c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18150:	81a3      	strh	r3, [r4, #12]
   18152:	9b00      	ldr	r3, [sp, #0]
   18154:	6163      	str	r3, [r4, #20]
   18156:	9b01      	ldr	r3, [sp, #4]
   18158:	6120      	str	r0, [r4, #16]
   1815a:	b15b      	cbz	r3, 18174 <__smakebuf_r+0x74>
   1815c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   18160:	4630      	mov	r0, r6
   18162:	f000 ff9f 	bl	190a4 <_isatty_r>
   18166:	b128      	cbz	r0, 18174 <__smakebuf_r+0x74>
   18168:	89a3      	ldrh	r3, [r4, #12]
   1816a:	f023 0303 	bic.w	r3, r3, #3
   1816e:	f043 0301 	orr.w	r3, r3, #1
   18172:	81a3      	strh	r3, [r4, #12]
   18174:	89a3      	ldrh	r3, [r4, #12]
   18176:	431d      	orrs	r5, r3
   18178:	81a5      	strh	r5, [r4, #12]
   1817a:	e7cd      	b.n	18118 <__smakebuf_r+0x18>
   1817c:	000178f9 	.word	0x000178f9

00018180 <__ascii_mbtowc>:
   18180:	b082      	sub	sp, #8
   18182:	b901      	cbnz	r1, 18186 <__ascii_mbtowc+0x6>
   18184:	a901      	add	r1, sp, #4
   18186:	b142      	cbz	r2, 1819a <__ascii_mbtowc+0x1a>
   18188:	b14b      	cbz	r3, 1819e <__ascii_mbtowc+0x1e>
   1818a:	7813      	ldrb	r3, [r2, #0]
   1818c:	600b      	str	r3, [r1, #0]
   1818e:	7812      	ldrb	r2, [r2, #0]
   18190:	1c10      	adds	r0, r2, #0
   18192:	bf18      	it	ne
   18194:	2001      	movne	r0, #1
   18196:	b002      	add	sp, #8
   18198:	4770      	bx	lr
   1819a:	4610      	mov	r0, r2
   1819c:	e7fb      	b.n	18196 <__ascii_mbtowc+0x16>
   1819e:	f06f 0001 	mvn.w	r0, #1
   181a2:	e7f8      	b.n	18196 <__ascii_mbtowc+0x16>
	...

000181b0 <memchr>:
   181b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   181b4:	2a10      	cmp	r2, #16
   181b6:	db2b      	blt.n	18210 <memchr+0x60>
   181b8:	f010 0f07 	tst.w	r0, #7
   181bc:	d008      	beq.n	181d0 <memchr+0x20>
   181be:	f810 3b01 	ldrb.w	r3, [r0], #1
   181c2:	3a01      	subs	r2, #1
   181c4:	428b      	cmp	r3, r1
   181c6:	d02d      	beq.n	18224 <memchr+0x74>
   181c8:	f010 0f07 	tst.w	r0, #7
   181cc:	b342      	cbz	r2, 18220 <memchr+0x70>
   181ce:	d1f6      	bne.n	181be <memchr+0xe>
   181d0:	b4f0      	push	{r4, r5, r6, r7}
   181d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   181d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   181da:	f022 0407 	bic.w	r4, r2, #7
   181de:	f07f 0700 	mvns.w	r7, #0
   181e2:	2300      	movs	r3, #0
   181e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   181e8:	3c08      	subs	r4, #8
   181ea:	ea85 0501 	eor.w	r5, r5, r1
   181ee:	ea86 0601 	eor.w	r6, r6, r1
   181f2:	fa85 f547 	uadd8	r5, r5, r7
   181f6:	faa3 f587 	sel	r5, r3, r7
   181fa:	fa86 f647 	uadd8	r6, r6, r7
   181fe:	faa5 f687 	sel	r6, r5, r7
   18202:	b98e      	cbnz	r6, 18228 <memchr+0x78>
   18204:	d1ee      	bne.n	181e4 <memchr+0x34>
   18206:	bcf0      	pop	{r4, r5, r6, r7}
   18208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1820c:	f002 0207 	and.w	r2, r2, #7
   18210:	b132      	cbz	r2, 18220 <memchr+0x70>
   18212:	f810 3b01 	ldrb.w	r3, [r0], #1
   18216:	3a01      	subs	r2, #1
   18218:	ea83 0301 	eor.w	r3, r3, r1
   1821c:	b113      	cbz	r3, 18224 <memchr+0x74>
   1821e:	d1f8      	bne.n	18212 <memchr+0x62>
   18220:	2000      	movs	r0, #0
   18222:	4770      	bx	lr
   18224:	3801      	subs	r0, #1
   18226:	4770      	bx	lr
   18228:	2d00      	cmp	r5, #0
   1822a:	bf06      	itte	eq
   1822c:	4635      	moveq	r5, r6
   1822e:	3803      	subeq	r0, #3
   18230:	3807      	subne	r0, #7
   18232:	f015 0f01 	tst.w	r5, #1
   18236:	d107      	bne.n	18248 <memchr+0x98>
   18238:	3001      	adds	r0, #1
   1823a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1823e:	bf02      	ittt	eq
   18240:	3001      	addeq	r0, #1
   18242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   18246:	3001      	addeq	r0, #1
   18248:	bcf0      	pop	{r4, r5, r6, r7}
   1824a:	3801      	subs	r0, #1
   1824c:	4770      	bx	lr
   1824e:	bf00      	nop

00018250 <__malloc_lock>:
   18250:	4770      	bx	lr

00018252 <__malloc_unlock>:
   18252:	4770      	bx	lr

00018254 <_Balloc>:
   18254:	b570      	push	{r4, r5, r6, lr}
   18256:	6a45      	ldr	r5, [r0, #36]	; 0x24
   18258:	4604      	mov	r4, r0
   1825a:	460e      	mov	r6, r1
   1825c:	b93d      	cbnz	r5, 1826e <_Balloc+0x1a>
   1825e:	2010      	movs	r0, #16
   18260:	f7fc fd90 	bl	14d84 <malloc>
   18264:	6260      	str	r0, [r4, #36]	; 0x24
   18266:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1826a:	6005      	str	r5, [r0, #0]
   1826c:	60c5      	str	r5, [r0, #12]
   1826e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   18270:	68eb      	ldr	r3, [r5, #12]
   18272:	b183      	cbz	r3, 18296 <_Balloc+0x42>
   18274:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18276:	68db      	ldr	r3, [r3, #12]
   18278:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   1827c:	b9b8      	cbnz	r0, 182ae <_Balloc+0x5a>
   1827e:	2101      	movs	r1, #1
   18280:	fa01 f506 	lsl.w	r5, r1, r6
   18284:	1d6a      	adds	r2, r5, #5
   18286:	0092      	lsls	r2, r2, #2
   18288:	4620      	mov	r0, r4
   1828a:	f7fc fd96 	bl	14dba <_calloc_r>
   1828e:	b160      	cbz	r0, 182aa <_Balloc+0x56>
   18290:	e9c0 6501 	strd	r6, r5, [r0, #4]
   18294:	e00e      	b.n	182b4 <_Balloc+0x60>
   18296:	2221      	movs	r2, #33	; 0x21
   18298:	2104      	movs	r1, #4
   1829a:	4620      	mov	r0, r4
   1829c:	f7fc fd8d 	bl	14dba <_calloc_r>
   182a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   182a2:	60e8      	str	r0, [r5, #12]
   182a4:	68db      	ldr	r3, [r3, #12]
   182a6:	2b00      	cmp	r3, #0
   182a8:	d1e4      	bne.n	18274 <_Balloc+0x20>
   182aa:	2000      	movs	r0, #0
   182ac:	bd70      	pop	{r4, r5, r6, pc}
   182ae:	6802      	ldr	r2, [r0, #0]
   182b0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   182b4:	2300      	movs	r3, #0
   182b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   182ba:	e7f7      	b.n	182ac <_Balloc+0x58>

000182bc <_Bfree>:
   182bc:	b570      	push	{r4, r5, r6, lr}
   182be:	6a44      	ldr	r4, [r0, #36]	; 0x24
   182c0:	4606      	mov	r6, r0
   182c2:	460d      	mov	r5, r1
   182c4:	b93c      	cbnz	r4, 182d6 <_Bfree+0x1a>
   182c6:	2010      	movs	r0, #16
   182c8:	f7fc fd5c 	bl	14d84 <malloc>
   182cc:	6270      	str	r0, [r6, #36]	; 0x24
   182ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
   182d2:	6004      	str	r4, [r0, #0]
   182d4:	60c4      	str	r4, [r0, #12]
   182d6:	b13d      	cbz	r5, 182e8 <_Bfree+0x2c>
   182d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   182da:	686a      	ldr	r2, [r5, #4]
   182dc:	68db      	ldr	r3, [r3, #12]
   182de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   182e2:	6029      	str	r1, [r5, #0]
   182e4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   182e8:	bd70      	pop	{r4, r5, r6, pc}

000182ea <__multadd>:
   182ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182ee:	690d      	ldr	r5, [r1, #16]
   182f0:	461f      	mov	r7, r3
   182f2:	4606      	mov	r6, r0
   182f4:	460c      	mov	r4, r1
   182f6:	f101 0c14 	add.w	ip, r1, #20
   182fa:	2300      	movs	r3, #0
   182fc:	f8dc 0000 	ldr.w	r0, [ip]
   18300:	b281      	uxth	r1, r0
   18302:	fb02 7101 	mla	r1, r2, r1, r7
   18306:	0c0f      	lsrs	r7, r1, #16
   18308:	0c00      	lsrs	r0, r0, #16
   1830a:	fb02 7000 	mla	r0, r2, r0, r7
   1830e:	b289      	uxth	r1, r1
   18310:	3301      	adds	r3, #1
   18312:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   18316:	429d      	cmp	r5, r3
   18318:	ea4f 4710 	mov.w	r7, r0, lsr #16
   1831c:	f84c 1b04 	str.w	r1, [ip], #4
   18320:	dcec      	bgt.n	182fc <__multadd+0x12>
   18322:	b1d7      	cbz	r7, 1835a <__multadd+0x70>
   18324:	68a3      	ldr	r3, [r4, #8]
   18326:	42ab      	cmp	r3, r5
   18328:	dc12      	bgt.n	18350 <__multadd+0x66>
   1832a:	6861      	ldr	r1, [r4, #4]
   1832c:	4630      	mov	r0, r6
   1832e:	3101      	adds	r1, #1
   18330:	f7ff ff90 	bl	18254 <_Balloc>
   18334:	6922      	ldr	r2, [r4, #16]
   18336:	3202      	adds	r2, #2
   18338:	f104 010c 	add.w	r1, r4, #12
   1833c:	4680      	mov	r8, r0
   1833e:	0092      	lsls	r2, r2, #2
   18340:	300c      	adds	r0, #12
   18342:	f7fc fd27 	bl	14d94 <memcpy>
   18346:	4621      	mov	r1, r4
   18348:	4630      	mov	r0, r6
   1834a:	f7ff ffb7 	bl	182bc <_Bfree>
   1834e:	4644      	mov	r4, r8
   18350:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   18354:	3501      	adds	r5, #1
   18356:	615f      	str	r7, [r3, #20]
   18358:	6125      	str	r5, [r4, #16]
   1835a:	4620      	mov	r0, r4
   1835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018360 <__s2b>:
   18360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18364:	460c      	mov	r4, r1
   18366:	4615      	mov	r5, r2
   18368:	461f      	mov	r7, r3
   1836a:	2209      	movs	r2, #9
   1836c:	3308      	adds	r3, #8
   1836e:	4606      	mov	r6, r0
   18370:	fb93 f3f2 	sdiv	r3, r3, r2
   18374:	2100      	movs	r1, #0
   18376:	2201      	movs	r2, #1
   18378:	429a      	cmp	r2, r3
   1837a:	db20      	blt.n	183be <__s2b+0x5e>
   1837c:	4630      	mov	r0, r6
   1837e:	f7ff ff69 	bl	18254 <_Balloc>
   18382:	9b08      	ldr	r3, [sp, #32]
   18384:	6143      	str	r3, [r0, #20]
   18386:	2d09      	cmp	r5, #9
   18388:	f04f 0301 	mov.w	r3, #1
   1838c:	6103      	str	r3, [r0, #16]
   1838e:	dd19      	ble.n	183c4 <__s2b+0x64>
   18390:	f104 0809 	add.w	r8, r4, #9
   18394:	46c1      	mov	r9, r8
   18396:	442c      	add	r4, r5
   18398:	f819 3b01 	ldrb.w	r3, [r9], #1
   1839c:	4601      	mov	r1, r0
   1839e:	3b30      	subs	r3, #48	; 0x30
   183a0:	220a      	movs	r2, #10
   183a2:	4630      	mov	r0, r6
   183a4:	f7ff ffa1 	bl	182ea <__multadd>
   183a8:	45a1      	cmp	r9, r4
   183aa:	d1f5      	bne.n	18398 <__s2b+0x38>
   183ac:	eb08 0405 	add.w	r4, r8, r5
   183b0:	3c08      	subs	r4, #8
   183b2:	1b2d      	subs	r5, r5, r4
   183b4:	1963      	adds	r3, r4, r5
   183b6:	42bb      	cmp	r3, r7
   183b8:	db07      	blt.n	183ca <__s2b+0x6a>
   183ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   183be:	0052      	lsls	r2, r2, #1
   183c0:	3101      	adds	r1, #1
   183c2:	e7d9      	b.n	18378 <__s2b+0x18>
   183c4:	340a      	adds	r4, #10
   183c6:	2509      	movs	r5, #9
   183c8:	e7f3      	b.n	183b2 <__s2b+0x52>
   183ca:	f814 3b01 	ldrb.w	r3, [r4], #1
   183ce:	4601      	mov	r1, r0
   183d0:	3b30      	subs	r3, #48	; 0x30
   183d2:	220a      	movs	r2, #10
   183d4:	4630      	mov	r0, r6
   183d6:	f7ff ff88 	bl	182ea <__multadd>
   183da:	e7eb      	b.n	183b4 <__s2b+0x54>

000183dc <__hi0bits>:
   183dc:	0c02      	lsrs	r2, r0, #16
   183de:	0412      	lsls	r2, r2, #16
   183e0:	4603      	mov	r3, r0
   183e2:	b9b2      	cbnz	r2, 18412 <__hi0bits+0x36>
   183e4:	0403      	lsls	r3, r0, #16
   183e6:	2010      	movs	r0, #16
   183e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   183ec:	bf04      	itt	eq
   183ee:	021b      	lsleq	r3, r3, #8
   183f0:	3008      	addeq	r0, #8
   183f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   183f6:	bf04      	itt	eq
   183f8:	011b      	lsleq	r3, r3, #4
   183fa:	3004      	addeq	r0, #4
   183fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   18400:	bf04      	itt	eq
   18402:	009b      	lsleq	r3, r3, #2
   18404:	3002      	addeq	r0, #2
   18406:	2b00      	cmp	r3, #0
   18408:	db06      	blt.n	18418 <__hi0bits+0x3c>
   1840a:	005b      	lsls	r3, r3, #1
   1840c:	d503      	bpl.n	18416 <__hi0bits+0x3a>
   1840e:	3001      	adds	r0, #1
   18410:	4770      	bx	lr
   18412:	2000      	movs	r0, #0
   18414:	e7e8      	b.n	183e8 <__hi0bits+0xc>
   18416:	2020      	movs	r0, #32
   18418:	4770      	bx	lr

0001841a <__lo0bits>:
   1841a:	6803      	ldr	r3, [r0, #0]
   1841c:	f013 0207 	ands.w	r2, r3, #7
   18420:	4601      	mov	r1, r0
   18422:	d00b      	beq.n	1843c <__lo0bits+0x22>
   18424:	07da      	lsls	r2, r3, #31
   18426:	d423      	bmi.n	18470 <__lo0bits+0x56>
   18428:	0798      	lsls	r0, r3, #30
   1842a:	bf49      	itett	mi
   1842c:	085b      	lsrmi	r3, r3, #1
   1842e:	089b      	lsrpl	r3, r3, #2
   18430:	2001      	movmi	r0, #1
   18432:	600b      	strmi	r3, [r1, #0]
   18434:	bf5c      	itt	pl
   18436:	600b      	strpl	r3, [r1, #0]
   18438:	2002      	movpl	r0, #2
   1843a:	4770      	bx	lr
   1843c:	b298      	uxth	r0, r3
   1843e:	b9a8      	cbnz	r0, 1846c <__lo0bits+0x52>
   18440:	0c1b      	lsrs	r3, r3, #16
   18442:	2010      	movs	r0, #16
   18444:	f013 0fff 	tst.w	r3, #255	; 0xff
   18448:	bf04      	itt	eq
   1844a:	0a1b      	lsreq	r3, r3, #8
   1844c:	3008      	addeq	r0, #8
   1844e:	071a      	lsls	r2, r3, #28
   18450:	bf04      	itt	eq
   18452:	091b      	lsreq	r3, r3, #4
   18454:	3004      	addeq	r0, #4
   18456:	079a      	lsls	r2, r3, #30
   18458:	bf04      	itt	eq
   1845a:	089b      	lsreq	r3, r3, #2
   1845c:	3002      	addeq	r0, #2
   1845e:	07da      	lsls	r2, r3, #31
   18460:	d402      	bmi.n	18468 <__lo0bits+0x4e>
   18462:	085b      	lsrs	r3, r3, #1
   18464:	d006      	beq.n	18474 <__lo0bits+0x5a>
   18466:	3001      	adds	r0, #1
   18468:	600b      	str	r3, [r1, #0]
   1846a:	4770      	bx	lr
   1846c:	4610      	mov	r0, r2
   1846e:	e7e9      	b.n	18444 <__lo0bits+0x2a>
   18470:	2000      	movs	r0, #0
   18472:	4770      	bx	lr
   18474:	2020      	movs	r0, #32
   18476:	4770      	bx	lr

00018478 <__i2b>:
   18478:	b510      	push	{r4, lr}
   1847a:	460c      	mov	r4, r1
   1847c:	2101      	movs	r1, #1
   1847e:	f7ff fee9 	bl	18254 <_Balloc>
   18482:	2201      	movs	r2, #1
   18484:	6144      	str	r4, [r0, #20]
   18486:	6102      	str	r2, [r0, #16]
   18488:	bd10      	pop	{r4, pc}

0001848a <__multiply>:
   1848a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1848e:	4614      	mov	r4, r2
   18490:	690a      	ldr	r2, [r1, #16]
   18492:	6923      	ldr	r3, [r4, #16]
   18494:	429a      	cmp	r2, r3
   18496:	bfb8      	it	lt
   18498:	460b      	movlt	r3, r1
   1849a:	4688      	mov	r8, r1
   1849c:	bfbc      	itt	lt
   1849e:	46a0      	movlt	r8, r4
   184a0:	461c      	movlt	r4, r3
   184a2:	f8d8 7010 	ldr.w	r7, [r8, #16]
   184a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   184aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   184ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
   184b2:	eb07 0609 	add.w	r6, r7, r9
   184b6:	42b3      	cmp	r3, r6
   184b8:	bfb8      	it	lt
   184ba:	3101      	addlt	r1, #1
   184bc:	f7ff feca 	bl	18254 <_Balloc>
   184c0:	f100 0514 	add.w	r5, r0, #20
   184c4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   184c8:	462b      	mov	r3, r5
   184ca:	2200      	movs	r2, #0
   184cc:	4573      	cmp	r3, lr
   184ce:	d316      	bcc.n	184fe <__multiply+0x74>
   184d0:	f104 0214 	add.w	r2, r4, #20
   184d4:	f108 0114 	add.w	r1, r8, #20
   184d8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   184dc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   184e0:	9300      	str	r3, [sp, #0]
   184e2:	9b00      	ldr	r3, [sp, #0]
   184e4:	9201      	str	r2, [sp, #4]
   184e6:	4293      	cmp	r3, r2
   184e8:	d80c      	bhi.n	18504 <__multiply+0x7a>
   184ea:	2e00      	cmp	r6, #0
   184ec:	dd03      	ble.n	184f6 <__multiply+0x6c>
   184ee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   184f2:	2b00      	cmp	r3, #0
   184f4:	d05d      	beq.n	185b2 <__multiply+0x128>
   184f6:	6106      	str	r6, [r0, #16]
   184f8:	b003      	add	sp, #12
   184fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184fe:	f843 2b04 	str.w	r2, [r3], #4
   18502:	e7e3      	b.n	184cc <__multiply+0x42>
   18504:	f8b2 b000 	ldrh.w	fp, [r2]
   18508:	f1bb 0f00 	cmp.w	fp, #0
   1850c:	d023      	beq.n	18556 <__multiply+0xcc>
   1850e:	4689      	mov	r9, r1
   18510:	46ac      	mov	ip, r5
   18512:	f04f 0800 	mov.w	r8, #0
   18516:	f859 4b04 	ldr.w	r4, [r9], #4
   1851a:	f8dc a000 	ldr.w	sl, [ip]
   1851e:	b2a3      	uxth	r3, r4
   18520:	fa1f fa8a 	uxth.w	sl, sl
   18524:	fb0b a303 	mla	r3, fp, r3, sl
   18528:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   1852c:	f8dc 4000 	ldr.w	r4, [ip]
   18530:	4443      	add	r3, r8
   18532:	ea4f 4814 	mov.w	r8, r4, lsr #16
   18536:	fb0b 840a 	mla	r4, fp, sl, r8
   1853a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   1853e:	46e2      	mov	sl, ip
   18540:	b29b      	uxth	r3, r3
   18542:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   18546:	454f      	cmp	r7, r9
   18548:	ea4f 4814 	mov.w	r8, r4, lsr #16
   1854c:	f84a 3b04 	str.w	r3, [sl], #4
   18550:	d82b      	bhi.n	185aa <__multiply+0x120>
   18552:	f8cc 8004 	str.w	r8, [ip, #4]
   18556:	9b01      	ldr	r3, [sp, #4]
   18558:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   1855c:	3204      	adds	r2, #4
   1855e:	f1ba 0f00 	cmp.w	sl, #0
   18562:	d020      	beq.n	185a6 <__multiply+0x11c>
   18564:	682b      	ldr	r3, [r5, #0]
   18566:	4689      	mov	r9, r1
   18568:	46a8      	mov	r8, r5
   1856a:	f04f 0b00 	mov.w	fp, #0
   1856e:	f8b9 c000 	ldrh.w	ip, [r9]
   18572:	f8b8 4002 	ldrh.w	r4, [r8, #2]
   18576:	fb0a 440c 	mla	r4, sl, ip, r4
   1857a:	445c      	add	r4, fp
   1857c:	46c4      	mov	ip, r8
   1857e:	b29b      	uxth	r3, r3
   18580:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   18584:	f84c 3b04 	str.w	r3, [ip], #4
   18588:	f859 3b04 	ldr.w	r3, [r9], #4
   1858c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
   18590:	0c1b      	lsrs	r3, r3, #16
   18592:	fb0a b303 	mla	r3, sl, r3, fp
   18596:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   1859a:	454f      	cmp	r7, r9
   1859c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   185a0:	d805      	bhi.n	185ae <__multiply+0x124>
   185a2:	f8c8 3004 	str.w	r3, [r8, #4]
   185a6:	3504      	adds	r5, #4
   185a8:	e79b      	b.n	184e2 <__multiply+0x58>
   185aa:	46d4      	mov	ip, sl
   185ac:	e7b3      	b.n	18516 <__multiply+0x8c>
   185ae:	46e0      	mov	r8, ip
   185b0:	e7dd      	b.n	1856e <__multiply+0xe4>
   185b2:	3e01      	subs	r6, #1
   185b4:	e799      	b.n	184ea <__multiply+0x60>
	...

000185b8 <__pow5mult>:
   185b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   185bc:	4615      	mov	r5, r2
   185be:	f012 0203 	ands.w	r2, r2, #3
   185c2:	4606      	mov	r6, r0
   185c4:	460f      	mov	r7, r1
   185c6:	d007      	beq.n	185d8 <__pow5mult+0x20>
   185c8:	3a01      	subs	r2, #1
   185ca:	4c21      	ldr	r4, [pc, #132]	; (18650 <__pow5mult+0x98>)
   185cc:	2300      	movs	r3, #0
   185ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   185d2:	f7ff fe8a 	bl	182ea <__multadd>
   185d6:	4607      	mov	r7, r0
   185d8:	10ad      	asrs	r5, r5, #2
   185da:	d035      	beq.n	18648 <__pow5mult+0x90>
   185dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   185de:	b93c      	cbnz	r4, 185f0 <__pow5mult+0x38>
   185e0:	2010      	movs	r0, #16
   185e2:	f7fc fbcf 	bl	14d84 <malloc>
   185e6:	6270      	str	r0, [r6, #36]	; 0x24
   185e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   185ec:	6004      	str	r4, [r0, #0]
   185ee:	60c4      	str	r4, [r0, #12]
   185f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   185f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   185f8:	b94c      	cbnz	r4, 1860e <__pow5mult+0x56>
   185fa:	f240 2171 	movw	r1, #625	; 0x271
   185fe:	4630      	mov	r0, r6
   18600:	f7ff ff3a 	bl	18478 <__i2b>
   18604:	2300      	movs	r3, #0
   18606:	f8c8 0008 	str.w	r0, [r8, #8]
   1860a:	4604      	mov	r4, r0
   1860c:	6003      	str	r3, [r0, #0]
   1860e:	f04f 0800 	mov.w	r8, #0
   18612:	07eb      	lsls	r3, r5, #31
   18614:	d50a      	bpl.n	1862c <__pow5mult+0x74>
   18616:	4639      	mov	r1, r7
   18618:	4622      	mov	r2, r4
   1861a:	4630      	mov	r0, r6
   1861c:	f7ff ff35 	bl	1848a <__multiply>
   18620:	4639      	mov	r1, r7
   18622:	4681      	mov	r9, r0
   18624:	4630      	mov	r0, r6
   18626:	f7ff fe49 	bl	182bc <_Bfree>
   1862a:	464f      	mov	r7, r9
   1862c:	106d      	asrs	r5, r5, #1
   1862e:	d00b      	beq.n	18648 <__pow5mult+0x90>
   18630:	6820      	ldr	r0, [r4, #0]
   18632:	b938      	cbnz	r0, 18644 <__pow5mult+0x8c>
   18634:	4622      	mov	r2, r4
   18636:	4621      	mov	r1, r4
   18638:	4630      	mov	r0, r6
   1863a:	f7ff ff26 	bl	1848a <__multiply>
   1863e:	6020      	str	r0, [r4, #0]
   18640:	f8c0 8000 	str.w	r8, [r0]
   18644:	4604      	mov	r4, r0
   18646:	e7e4      	b.n	18612 <__pow5mult+0x5a>
   18648:	4638      	mov	r0, r7
   1864a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1864e:	bf00      	nop
   18650:	00019998 	.word	0x00019998

00018654 <__lshift>:
   18654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18658:	460c      	mov	r4, r1
   1865a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1865e:	6923      	ldr	r3, [r4, #16]
   18660:	6849      	ldr	r1, [r1, #4]
   18662:	eb0a 0903 	add.w	r9, sl, r3
   18666:	68a3      	ldr	r3, [r4, #8]
   18668:	4607      	mov	r7, r0
   1866a:	4616      	mov	r6, r2
   1866c:	f109 0501 	add.w	r5, r9, #1
   18670:	42ab      	cmp	r3, r5
   18672:	db32      	blt.n	186da <__lshift+0x86>
   18674:	4638      	mov	r0, r7
   18676:	f7ff fded 	bl	18254 <_Balloc>
   1867a:	2300      	movs	r3, #0
   1867c:	4680      	mov	r8, r0
   1867e:	f100 0114 	add.w	r1, r0, #20
   18682:	461a      	mov	r2, r3
   18684:	4553      	cmp	r3, sl
   18686:	db2b      	blt.n	186e0 <__lshift+0x8c>
   18688:	6920      	ldr	r0, [r4, #16]
   1868a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   1868e:	f104 0314 	add.w	r3, r4, #20
   18692:	f016 021f 	ands.w	r2, r6, #31
   18696:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1869a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1869e:	d025      	beq.n	186ec <__lshift+0x98>
   186a0:	f1c2 0e20 	rsb	lr, r2, #32
   186a4:	2000      	movs	r0, #0
   186a6:	681e      	ldr	r6, [r3, #0]
   186a8:	468a      	mov	sl, r1
   186aa:	4096      	lsls	r6, r2
   186ac:	4330      	orrs	r0, r6
   186ae:	f84a 0b04 	str.w	r0, [sl], #4
   186b2:	f853 0b04 	ldr.w	r0, [r3], #4
   186b6:	459c      	cmp	ip, r3
   186b8:	fa20 f00e 	lsr.w	r0, r0, lr
   186bc:	d814      	bhi.n	186e8 <__lshift+0x94>
   186be:	6048      	str	r0, [r1, #4]
   186c0:	b108      	cbz	r0, 186c6 <__lshift+0x72>
   186c2:	f109 0502 	add.w	r5, r9, #2
   186c6:	3d01      	subs	r5, #1
   186c8:	4638      	mov	r0, r7
   186ca:	f8c8 5010 	str.w	r5, [r8, #16]
   186ce:	4621      	mov	r1, r4
   186d0:	f7ff fdf4 	bl	182bc <_Bfree>
   186d4:	4640      	mov	r0, r8
   186d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   186da:	3101      	adds	r1, #1
   186dc:	005b      	lsls	r3, r3, #1
   186de:	e7c7      	b.n	18670 <__lshift+0x1c>
   186e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   186e4:	3301      	adds	r3, #1
   186e6:	e7cd      	b.n	18684 <__lshift+0x30>
   186e8:	4651      	mov	r1, sl
   186ea:	e7dc      	b.n	186a6 <__lshift+0x52>
   186ec:	3904      	subs	r1, #4
   186ee:	f853 2b04 	ldr.w	r2, [r3], #4
   186f2:	f841 2f04 	str.w	r2, [r1, #4]!
   186f6:	459c      	cmp	ip, r3
   186f8:	d8f9      	bhi.n	186ee <__lshift+0x9a>
   186fa:	e7e4      	b.n	186c6 <__lshift+0x72>

000186fc <__mcmp>:
   186fc:	6903      	ldr	r3, [r0, #16]
   186fe:	690a      	ldr	r2, [r1, #16]
   18700:	1a9b      	subs	r3, r3, r2
   18702:	b530      	push	{r4, r5, lr}
   18704:	d10c      	bne.n	18720 <__mcmp+0x24>
   18706:	0092      	lsls	r2, r2, #2
   18708:	3014      	adds	r0, #20
   1870a:	3114      	adds	r1, #20
   1870c:	1884      	adds	r4, r0, r2
   1870e:	4411      	add	r1, r2
   18710:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   18714:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   18718:	4295      	cmp	r5, r2
   1871a:	d003      	beq.n	18724 <__mcmp+0x28>
   1871c:	d305      	bcc.n	1872a <__mcmp+0x2e>
   1871e:	2301      	movs	r3, #1
   18720:	4618      	mov	r0, r3
   18722:	bd30      	pop	{r4, r5, pc}
   18724:	42a0      	cmp	r0, r4
   18726:	d3f3      	bcc.n	18710 <__mcmp+0x14>
   18728:	e7fa      	b.n	18720 <__mcmp+0x24>
   1872a:	f04f 33ff 	mov.w	r3, #4294967295
   1872e:	e7f7      	b.n	18720 <__mcmp+0x24>

00018730 <__mdiff>:
   18730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18734:	460d      	mov	r5, r1
   18736:	4607      	mov	r7, r0
   18738:	4611      	mov	r1, r2
   1873a:	4628      	mov	r0, r5
   1873c:	4614      	mov	r4, r2
   1873e:	f7ff ffdd 	bl	186fc <__mcmp>
   18742:	1e06      	subs	r6, r0, #0
   18744:	d108      	bne.n	18758 <__mdiff+0x28>
   18746:	4631      	mov	r1, r6
   18748:	4638      	mov	r0, r7
   1874a:	f7ff fd83 	bl	18254 <_Balloc>
   1874e:	2301      	movs	r3, #1
   18750:	e9c0 3604 	strd	r3, r6, [r0, #16]
   18754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18758:	bfa4      	itt	ge
   1875a:	4623      	movge	r3, r4
   1875c:	462c      	movge	r4, r5
   1875e:	4638      	mov	r0, r7
   18760:	6861      	ldr	r1, [r4, #4]
   18762:	bfa6      	itte	ge
   18764:	461d      	movge	r5, r3
   18766:	2600      	movge	r6, #0
   18768:	2601      	movlt	r6, #1
   1876a:	f7ff fd73 	bl	18254 <_Balloc>
   1876e:	692b      	ldr	r3, [r5, #16]
   18770:	60c6      	str	r6, [r0, #12]
   18772:	6926      	ldr	r6, [r4, #16]
   18774:	f105 0914 	add.w	r9, r5, #20
   18778:	f104 0214 	add.w	r2, r4, #20
   1877c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   18780:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   18784:	f100 0514 	add.w	r5, r0, #20
   18788:	f04f 0e00 	mov.w	lr, #0
   1878c:	f852 ab04 	ldr.w	sl, [r2], #4
   18790:	f859 4b04 	ldr.w	r4, [r9], #4
   18794:	fa1e f18a 	uxtah	r1, lr, sl
   18798:	b2a3      	uxth	r3, r4
   1879a:	1ac9      	subs	r1, r1, r3
   1879c:	0c23      	lsrs	r3, r4, #16
   1879e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
   187a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
   187a6:	b289      	uxth	r1, r1
   187a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
   187ac:	45c8      	cmp	r8, r9
   187ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   187b2:	4694      	mov	ip, r2
   187b4:	f845 3b04 	str.w	r3, [r5], #4
   187b8:	d8e8      	bhi.n	1878c <__mdiff+0x5c>
   187ba:	45bc      	cmp	ip, r7
   187bc:	d304      	bcc.n	187c8 <__mdiff+0x98>
   187be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   187c2:	b183      	cbz	r3, 187e6 <__mdiff+0xb6>
   187c4:	6106      	str	r6, [r0, #16]
   187c6:	e7c5      	b.n	18754 <__mdiff+0x24>
   187c8:	f85c 1b04 	ldr.w	r1, [ip], #4
   187cc:	fa1e f381 	uxtah	r3, lr, r1
   187d0:	141a      	asrs	r2, r3, #16
   187d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   187d6:	b29b      	uxth	r3, r3
   187d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   187dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
   187e0:	f845 3b04 	str.w	r3, [r5], #4
   187e4:	e7e9      	b.n	187ba <__mdiff+0x8a>
   187e6:	3e01      	subs	r6, #1
   187e8:	e7e9      	b.n	187be <__mdiff+0x8e>
	...

000187ec <__ulp>:
   187ec:	4b12      	ldr	r3, [pc, #72]	; (18838 <__ulp+0x4c>)
   187ee:	ee10 2a90 	vmov	r2, s1
   187f2:	401a      	ands	r2, r3
   187f4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   187f8:	2b00      	cmp	r3, #0
   187fa:	dd04      	ble.n	18806 <__ulp+0x1a>
   187fc:	2000      	movs	r0, #0
   187fe:	4619      	mov	r1, r3
   18800:	ec41 0b10 	vmov	d0, r0, r1
   18804:	4770      	bx	lr
   18806:	425b      	negs	r3, r3
   18808:	151b      	asrs	r3, r3, #20
   1880a:	2b13      	cmp	r3, #19
   1880c:	f04f 0000 	mov.w	r0, #0
   18810:	f04f 0100 	mov.w	r1, #0
   18814:	dc04      	bgt.n	18820 <__ulp+0x34>
   18816:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1881a:	fa42 f103 	asr.w	r1, r2, r3
   1881e:	e7ef      	b.n	18800 <__ulp+0x14>
   18820:	3b14      	subs	r3, #20
   18822:	2b1e      	cmp	r3, #30
   18824:	f04f 0201 	mov.w	r2, #1
   18828:	bfda      	itte	le
   1882a:	f1c3 031f 	rsble	r3, r3, #31
   1882e:	fa02 f303 	lslle.w	r3, r2, r3
   18832:	4613      	movgt	r3, r2
   18834:	4618      	mov	r0, r3
   18836:	e7e3      	b.n	18800 <__ulp+0x14>
   18838:	7ff00000 	.word	0x7ff00000

0001883c <__b2d>:
   1883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1883e:	6905      	ldr	r5, [r0, #16]
   18840:	f100 0714 	add.w	r7, r0, #20
   18844:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   18848:	1f2e      	subs	r6, r5, #4
   1884a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   1884e:	4620      	mov	r0, r4
   18850:	f7ff fdc4 	bl	183dc <__hi0bits>
   18854:	f1c0 0320 	rsb	r3, r0, #32
   18858:	280a      	cmp	r0, #10
   1885a:	600b      	str	r3, [r1, #0]
   1885c:	f8df c074 	ldr.w	ip, [pc, #116]	; 188d4 <__b2d+0x98>
   18860:	dc14      	bgt.n	1888c <__b2d+0x50>
   18862:	f1c0 0e0b 	rsb	lr, r0, #11
   18866:	fa24 f10e 	lsr.w	r1, r4, lr
   1886a:	42b7      	cmp	r7, r6
   1886c:	ea41 030c 	orr.w	r3, r1, ip
   18870:	bf34      	ite	cc
   18872:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   18876:	2100      	movcs	r1, #0
   18878:	3015      	adds	r0, #21
   1887a:	fa04 f000 	lsl.w	r0, r4, r0
   1887e:	fa21 f10e 	lsr.w	r1, r1, lr
   18882:	ea40 0201 	orr.w	r2, r0, r1
   18886:	ec43 2b10 	vmov	d0, r2, r3
   1888a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1888c:	42b7      	cmp	r7, r6
   1888e:	bf3a      	itte	cc
   18890:	f1a5 0608 	subcc.w	r6, r5, #8
   18894:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   18898:	2100      	movcs	r1, #0
   1889a:	380b      	subs	r0, #11
   1889c:	d015      	beq.n	188ca <__b2d+0x8e>
   1889e:	4084      	lsls	r4, r0
   188a0:	f1c0 0520 	rsb	r5, r0, #32
   188a4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   188a8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   188ac:	42be      	cmp	r6, r7
   188ae:	fa21 fc05 	lsr.w	ip, r1, r5
   188b2:	ea44 030c 	orr.w	r3, r4, ip
   188b6:	bf8c      	ite	hi
   188b8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   188bc:	2400      	movls	r4, #0
   188be:	fa01 f000 	lsl.w	r0, r1, r0
   188c2:	40ec      	lsrs	r4, r5
   188c4:	ea40 0204 	orr.w	r2, r0, r4
   188c8:	e7dd      	b.n	18886 <__b2d+0x4a>
   188ca:	ea44 030c 	orr.w	r3, r4, ip
   188ce:	460a      	mov	r2, r1
   188d0:	e7d9      	b.n	18886 <__b2d+0x4a>
   188d2:	bf00      	nop
   188d4:	3ff00000 	.word	0x3ff00000

000188d8 <__d2b>:
   188d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   188dc:	460e      	mov	r6, r1
   188de:	2101      	movs	r1, #1
   188e0:	ec59 8b10 	vmov	r8, r9, d0
   188e4:	4615      	mov	r5, r2
   188e6:	f7ff fcb5 	bl	18254 <_Balloc>
   188ea:	f3c9 540a 	ubfx	r4, r9, #20, #11
   188ee:	4607      	mov	r7, r0
   188f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
   188f4:	bb34      	cbnz	r4, 18944 <__d2b+0x6c>
   188f6:	9301      	str	r3, [sp, #4]
   188f8:	f1b8 0300 	subs.w	r3, r8, #0
   188fc:	d027      	beq.n	1894e <__d2b+0x76>
   188fe:	a802      	add	r0, sp, #8
   18900:	f840 3d08 	str.w	r3, [r0, #-8]!
   18904:	f7ff fd89 	bl	1841a <__lo0bits>
   18908:	9900      	ldr	r1, [sp, #0]
   1890a:	b1f0      	cbz	r0, 1894a <__d2b+0x72>
   1890c:	9a01      	ldr	r2, [sp, #4]
   1890e:	f1c0 0320 	rsb	r3, r0, #32
   18912:	fa02 f303 	lsl.w	r3, r2, r3
   18916:	430b      	orrs	r3, r1
   18918:	40c2      	lsrs	r2, r0
   1891a:	617b      	str	r3, [r7, #20]
   1891c:	9201      	str	r2, [sp, #4]
   1891e:	9b01      	ldr	r3, [sp, #4]
   18920:	61bb      	str	r3, [r7, #24]
   18922:	2b00      	cmp	r3, #0
   18924:	bf14      	ite	ne
   18926:	2102      	movne	r1, #2
   18928:	2101      	moveq	r1, #1
   1892a:	6139      	str	r1, [r7, #16]
   1892c:	b1c4      	cbz	r4, 18960 <__d2b+0x88>
   1892e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   18932:	4404      	add	r4, r0
   18934:	6034      	str	r4, [r6, #0]
   18936:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1893a:	6028      	str	r0, [r5, #0]
   1893c:	4638      	mov	r0, r7
   1893e:	b003      	add	sp, #12
   18940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18948:	e7d5      	b.n	188f6 <__d2b+0x1e>
   1894a:	6179      	str	r1, [r7, #20]
   1894c:	e7e7      	b.n	1891e <__d2b+0x46>
   1894e:	a801      	add	r0, sp, #4
   18950:	f7ff fd63 	bl	1841a <__lo0bits>
   18954:	9b01      	ldr	r3, [sp, #4]
   18956:	617b      	str	r3, [r7, #20]
   18958:	2101      	movs	r1, #1
   1895a:	6139      	str	r1, [r7, #16]
   1895c:	3020      	adds	r0, #32
   1895e:	e7e5      	b.n	1892c <__d2b+0x54>
   18960:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   18964:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   18968:	6030      	str	r0, [r6, #0]
   1896a:	6918      	ldr	r0, [r3, #16]
   1896c:	f7ff fd36 	bl	183dc <__hi0bits>
   18970:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   18974:	e7e1      	b.n	1893a <__d2b+0x62>

00018976 <__ratio>:
   18976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1897a:	4688      	mov	r8, r1
   1897c:	4669      	mov	r1, sp
   1897e:	4681      	mov	r9, r0
   18980:	f7ff ff5c 	bl	1883c <__b2d>
   18984:	a901      	add	r1, sp, #4
   18986:	4640      	mov	r0, r8
   18988:	ec57 6b10 	vmov	r6, r7, d0
   1898c:	ee10 4a10 	vmov	r4, s0
   18990:	f7ff ff54 	bl	1883c <__b2d>
   18994:	f8d9 3010 	ldr.w	r3, [r9, #16]
   18998:	f8d8 2010 	ldr.w	r2, [r8, #16]
   1899c:	eba3 0c02 	sub.w	ip, r3, r2
   189a0:	e9dd 3200 	ldrd	r3, r2, [sp]
   189a4:	1a9b      	subs	r3, r3, r2
   189a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   189aa:	ec51 0b10 	vmov	r0, r1, d0
   189ae:	2b00      	cmp	r3, #0
   189b0:	ee10 aa10 	vmov	sl, s0
   189b4:	bfce      	itee	gt
   189b6:	463a      	movgt	r2, r7
   189b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   189bc:	460a      	movle	r2, r1
   189be:	463d      	mov	r5, r7
   189c0:	468b      	mov	fp, r1
   189c2:	bfcc      	ite	gt
   189c4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
   189c8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   189cc:	ec45 4b17 	vmov	d7, r4, r5
   189d0:	ec4b ab16 	vmov	d6, sl, fp
   189d4:	ee87 0b06 	vdiv.f64	d0, d7, d6
   189d8:	b003      	add	sp, #12
   189da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000189de <__copybits>:
   189de:	3901      	subs	r1, #1
   189e0:	b510      	push	{r4, lr}
   189e2:	1149      	asrs	r1, r1, #5
   189e4:	6914      	ldr	r4, [r2, #16]
   189e6:	3101      	adds	r1, #1
   189e8:	f102 0314 	add.w	r3, r2, #20
   189ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   189f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   189f4:	42a3      	cmp	r3, r4
   189f6:	4602      	mov	r2, r0
   189f8:	d303      	bcc.n	18a02 <__copybits+0x24>
   189fa:	2300      	movs	r3, #0
   189fc:	428a      	cmp	r2, r1
   189fe:	d305      	bcc.n	18a0c <__copybits+0x2e>
   18a00:	bd10      	pop	{r4, pc}
   18a02:	f853 2b04 	ldr.w	r2, [r3], #4
   18a06:	f840 2b04 	str.w	r2, [r0], #4
   18a0a:	e7f3      	b.n	189f4 <__copybits+0x16>
   18a0c:	f842 3b04 	str.w	r3, [r2], #4
   18a10:	e7f4      	b.n	189fc <__copybits+0x1e>

00018a12 <__any_on>:
   18a12:	f100 0214 	add.w	r2, r0, #20
   18a16:	6900      	ldr	r0, [r0, #16]
   18a18:	114b      	asrs	r3, r1, #5
   18a1a:	4298      	cmp	r0, r3
   18a1c:	b510      	push	{r4, lr}
   18a1e:	db11      	blt.n	18a44 <__any_on+0x32>
   18a20:	dd0a      	ble.n	18a38 <__any_on+0x26>
   18a22:	f011 011f 	ands.w	r1, r1, #31
   18a26:	d007      	beq.n	18a38 <__any_on+0x26>
   18a28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   18a2c:	fa24 f001 	lsr.w	r0, r4, r1
   18a30:	fa00 f101 	lsl.w	r1, r0, r1
   18a34:	428c      	cmp	r4, r1
   18a36:	d10b      	bne.n	18a50 <__any_on+0x3e>
   18a38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18a3c:	4293      	cmp	r3, r2
   18a3e:	d803      	bhi.n	18a48 <__any_on+0x36>
   18a40:	2000      	movs	r0, #0
   18a42:	bd10      	pop	{r4, pc}
   18a44:	4603      	mov	r3, r0
   18a46:	e7f7      	b.n	18a38 <__any_on+0x26>
   18a48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   18a4c:	2900      	cmp	r1, #0
   18a4e:	d0f5      	beq.n	18a3c <__any_on+0x2a>
   18a50:	2001      	movs	r0, #1
   18a52:	e7f6      	b.n	18a42 <__any_on+0x30>

00018a54 <__ssputs_r>:
   18a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a58:	688e      	ldr	r6, [r1, #8]
   18a5a:	429e      	cmp	r6, r3
   18a5c:	4682      	mov	sl, r0
   18a5e:	460c      	mov	r4, r1
   18a60:	4690      	mov	r8, r2
   18a62:	4699      	mov	r9, r3
   18a64:	d837      	bhi.n	18ad6 <__ssputs_r+0x82>
   18a66:	898a      	ldrh	r2, [r1, #12]
   18a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
   18a6c:	d031      	beq.n	18ad2 <__ssputs_r+0x7e>
   18a6e:	6825      	ldr	r5, [r4, #0]
   18a70:	6909      	ldr	r1, [r1, #16]
   18a72:	1a6f      	subs	r7, r5, r1
   18a74:	6965      	ldr	r5, [r4, #20]
   18a76:	2302      	movs	r3, #2
   18a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   18a7c:	fb95 f5f3 	sdiv	r5, r5, r3
   18a80:	f109 0301 	add.w	r3, r9, #1
   18a84:	443b      	add	r3, r7
   18a86:	429d      	cmp	r5, r3
   18a88:	bf38      	it	cc
   18a8a:	461d      	movcc	r5, r3
   18a8c:	0553      	lsls	r3, r2, #21
   18a8e:	d530      	bpl.n	18af2 <__ssputs_r+0x9e>
   18a90:	4629      	mov	r1, r5
   18a92:	f7fc f9ef 	bl	14e74 <_malloc_r>
   18a96:	4606      	mov	r6, r0
   18a98:	b950      	cbnz	r0, 18ab0 <__ssputs_r+0x5c>
   18a9a:	230c      	movs	r3, #12
   18a9c:	f8ca 3000 	str.w	r3, [sl]
   18aa0:	89a3      	ldrh	r3, [r4, #12]
   18aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18aa6:	81a3      	strh	r3, [r4, #12]
   18aa8:	f04f 30ff 	mov.w	r0, #4294967295
   18aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18ab0:	463a      	mov	r2, r7
   18ab2:	6921      	ldr	r1, [r4, #16]
   18ab4:	f7fc f96e 	bl	14d94 <memcpy>
   18ab8:	89a3      	ldrh	r3, [r4, #12]
   18aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   18abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18ac2:	81a3      	strh	r3, [r4, #12]
   18ac4:	6126      	str	r6, [r4, #16]
   18ac6:	6165      	str	r5, [r4, #20]
   18ac8:	443e      	add	r6, r7
   18aca:	1bed      	subs	r5, r5, r7
   18acc:	6026      	str	r6, [r4, #0]
   18ace:	60a5      	str	r5, [r4, #8]
   18ad0:	464e      	mov	r6, r9
   18ad2:	454e      	cmp	r6, r9
   18ad4:	d900      	bls.n	18ad8 <__ssputs_r+0x84>
   18ad6:	464e      	mov	r6, r9
   18ad8:	4632      	mov	r2, r6
   18ada:	4641      	mov	r1, r8
   18adc:	6820      	ldr	r0, [r4, #0]
   18ade:	f000 fb03 	bl	190e8 <memmove>
   18ae2:	68a3      	ldr	r3, [r4, #8]
   18ae4:	1b9b      	subs	r3, r3, r6
   18ae6:	60a3      	str	r3, [r4, #8]
   18ae8:	6823      	ldr	r3, [r4, #0]
   18aea:	441e      	add	r6, r3
   18aec:	6026      	str	r6, [r4, #0]
   18aee:	2000      	movs	r0, #0
   18af0:	e7dc      	b.n	18aac <__ssputs_r+0x58>
   18af2:	462a      	mov	r2, r5
   18af4:	f000 fb11 	bl	1911a <_realloc_r>
   18af8:	4606      	mov	r6, r0
   18afa:	2800      	cmp	r0, #0
   18afc:	d1e2      	bne.n	18ac4 <__ssputs_r+0x70>
   18afe:	6921      	ldr	r1, [r4, #16]
   18b00:	4650      	mov	r0, sl
   18b02:	f7fc f969 	bl	14dd8 <_free_r>
   18b06:	e7c8      	b.n	18a9a <__ssputs_r+0x46>

00018b08 <_svfiprintf_r>:
   18b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b0c:	461d      	mov	r5, r3
   18b0e:	898b      	ldrh	r3, [r1, #12]
   18b10:	061f      	lsls	r7, r3, #24
   18b12:	b09d      	sub	sp, #116	; 0x74
   18b14:	4680      	mov	r8, r0
   18b16:	460c      	mov	r4, r1
   18b18:	4616      	mov	r6, r2
   18b1a:	d50f      	bpl.n	18b3c <_svfiprintf_r+0x34>
   18b1c:	690b      	ldr	r3, [r1, #16]
   18b1e:	b96b      	cbnz	r3, 18b3c <_svfiprintf_r+0x34>
   18b20:	2140      	movs	r1, #64	; 0x40
   18b22:	f7fc f9a7 	bl	14e74 <_malloc_r>
   18b26:	6020      	str	r0, [r4, #0]
   18b28:	6120      	str	r0, [r4, #16]
   18b2a:	b928      	cbnz	r0, 18b38 <_svfiprintf_r+0x30>
   18b2c:	230c      	movs	r3, #12
   18b2e:	f8c8 3000 	str.w	r3, [r8]
   18b32:	f04f 30ff 	mov.w	r0, #4294967295
   18b36:	e0c8      	b.n	18cca <_svfiprintf_r+0x1c2>
   18b38:	2340      	movs	r3, #64	; 0x40
   18b3a:	6163      	str	r3, [r4, #20]
   18b3c:	2300      	movs	r3, #0
   18b3e:	9309      	str	r3, [sp, #36]	; 0x24
   18b40:	2320      	movs	r3, #32
   18b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   18b46:	2330      	movs	r3, #48	; 0x30
   18b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   18b4c:	9503      	str	r5, [sp, #12]
   18b4e:	f04f 0b01 	mov.w	fp, #1
   18b52:	4637      	mov	r7, r6
   18b54:	463d      	mov	r5, r7
   18b56:	f815 3b01 	ldrb.w	r3, [r5], #1
   18b5a:	b10b      	cbz	r3, 18b60 <_svfiprintf_r+0x58>
   18b5c:	2b25      	cmp	r3, #37	; 0x25
   18b5e:	d13e      	bne.n	18bde <_svfiprintf_r+0xd6>
   18b60:	ebb7 0a06 	subs.w	sl, r7, r6
   18b64:	d00b      	beq.n	18b7e <_svfiprintf_r+0x76>
   18b66:	4653      	mov	r3, sl
   18b68:	4632      	mov	r2, r6
   18b6a:	4621      	mov	r1, r4
   18b6c:	4640      	mov	r0, r8
   18b6e:	f7ff ff71 	bl	18a54 <__ssputs_r>
   18b72:	3001      	adds	r0, #1
   18b74:	f000 80a4 	beq.w	18cc0 <_svfiprintf_r+0x1b8>
   18b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18b7a:	4453      	add	r3, sl
   18b7c:	9309      	str	r3, [sp, #36]	; 0x24
   18b7e:	783b      	ldrb	r3, [r7, #0]
   18b80:	2b00      	cmp	r3, #0
   18b82:	f000 809d 	beq.w	18cc0 <_svfiprintf_r+0x1b8>
   18b86:	2300      	movs	r3, #0
   18b88:	f04f 32ff 	mov.w	r2, #4294967295
   18b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   18b90:	9304      	str	r3, [sp, #16]
   18b92:	9307      	str	r3, [sp, #28]
   18b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   18b98:	931a      	str	r3, [sp, #104]	; 0x68
   18b9a:	462f      	mov	r7, r5
   18b9c:	2205      	movs	r2, #5
   18b9e:	f817 1b01 	ldrb.w	r1, [r7], #1
   18ba2:	4850      	ldr	r0, [pc, #320]	; (18ce4 <_svfiprintf_r+0x1dc>)
   18ba4:	f7ff fb04 	bl	181b0 <memchr>
   18ba8:	9b04      	ldr	r3, [sp, #16]
   18baa:	b9d0      	cbnz	r0, 18be2 <_svfiprintf_r+0xda>
   18bac:	06d9      	lsls	r1, r3, #27
   18bae:	bf44      	itt	mi
   18bb0:	2220      	movmi	r2, #32
   18bb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   18bb6:	071a      	lsls	r2, r3, #28
   18bb8:	bf44      	itt	mi
   18bba:	222b      	movmi	r2, #43	; 0x2b
   18bbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   18bc0:	782a      	ldrb	r2, [r5, #0]
   18bc2:	2a2a      	cmp	r2, #42	; 0x2a
   18bc4:	d015      	beq.n	18bf2 <_svfiprintf_r+0xea>
   18bc6:	9a07      	ldr	r2, [sp, #28]
   18bc8:	462f      	mov	r7, r5
   18bca:	2000      	movs	r0, #0
   18bcc:	250a      	movs	r5, #10
   18bce:	4639      	mov	r1, r7
   18bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
   18bd4:	3b30      	subs	r3, #48	; 0x30
   18bd6:	2b09      	cmp	r3, #9
   18bd8:	d94d      	bls.n	18c76 <_svfiprintf_r+0x16e>
   18bda:	b1b8      	cbz	r0, 18c0c <_svfiprintf_r+0x104>
   18bdc:	e00f      	b.n	18bfe <_svfiprintf_r+0xf6>
   18bde:	462f      	mov	r7, r5
   18be0:	e7b8      	b.n	18b54 <_svfiprintf_r+0x4c>
   18be2:	4a40      	ldr	r2, [pc, #256]	; (18ce4 <_svfiprintf_r+0x1dc>)
   18be4:	1a80      	subs	r0, r0, r2
   18be6:	fa0b f000 	lsl.w	r0, fp, r0
   18bea:	4318      	orrs	r0, r3
   18bec:	9004      	str	r0, [sp, #16]
   18bee:	463d      	mov	r5, r7
   18bf0:	e7d3      	b.n	18b9a <_svfiprintf_r+0x92>
   18bf2:	9a03      	ldr	r2, [sp, #12]
   18bf4:	1d11      	adds	r1, r2, #4
   18bf6:	6812      	ldr	r2, [r2, #0]
   18bf8:	9103      	str	r1, [sp, #12]
   18bfa:	2a00      	cmp	r2, #0
   18bfc:	db01      	blt.n	18c02 <_svfiprintf_r+0xfa>
   18bfe:	9207      	str	r2, [sp, #28]
   18c00:	e004      	b.n	18c0c <_svfiprintf_r+0x104>
   18c02:	4252      	negs	r2, r2
   18c04:	f043 0302 	orr.w	r3, r3, #2
   18c08:	9207      	str	r2, [sp, #28]
   18c0a:	9304      	str	r3, [sp, #16]
   18c0c:	783b      	ldrb	r3, [r7, #0]
   18c0e:	2b2e      	cmp	r3, #46	; 0x2e
   18c10:	d10c      	bne.n	18c2c <_svfiprintf_r+0x124>
   18c12:	787b      	ldrb	r3, [r7, #1]
   18c14:	2b2a      	cmp	r3, #42	; 0x2a
   18c16:	d133      	bne.n	18c80 <_svfiprintf_r+0x178>
   18c18:	9b03      	ldr	r3, [sp, #12]
   18c1a:	1d1a      	adds	r2, r3, #4
   18c1c:	681b      	ldr	r3, [r3, #0]
   18c1e:	9203      	str	r2, [sp, #12]
   18c20:	2b00      	cmp	r3, #0
   18c22:	bfb8      	it	lt
   18c24:	f04f 33ff 	movlt.w	r3, #4294967295
   18c28:	3702      	adds	r7, #2
   18c2a:	9305      	str	r3, [sp, #20]
   18c2c:	4d2e      	ldr	r5, [pc, #184]	; (18ce8 <_svfiprintf_r+0x1e0>)
   18c2e:	7839      	ldrb	r1, [r7, #0]
   18c30:	2203      	movs	r2, #3
   18c32:	4628      	mov	r0, r5
   18c34:	f7ff fabc 	bl	181b0 <memchr>
   18c38:	b138      	cbz	r0, 18c4a <_svfiprintf_r+0x142>
   18c3a:	2340      	movs	r3, #64	; 0x40
   18c3c:	1b40      	subs	r0, r0, r5
   18c3e:	fa03 f000 	lsl.w	r0, r3, r0
   18c42:	9b04      	ldr	r3, [sp, #16]
   18c44:	4303      	orrs	r3, r0
   18c46:	3701      	adds	r7, #1
   18c48:	9304      	str	r3, [sp, #16]
   18c4a:	7839      	ldrb	r1, [r7, #0]
   18c4c:	4827      	ldr	r0, [pc, #156]	; (18cec <_svfiprintf_r+0x1e4>)
   18c4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   18c52:	2206      	movs	r2, #6
   18c54:	1c7e      	adds	r6, r7, #1
   18c56:	f7ff faab 	bl	181b0 <memchr>
   18c5a:	2800      	cmp	r0, #0
   18c5c:	d038      	beq.n	18cd0 <_svfiprintf_r+0x1c8>
   18c5e:	4b24      	ldr	r3, [pc, #144]	; (18cf0 <_svfiprintf_r+0x1e8>)
   18c60:	bb13      	cbnz	r3, 18ca8 <_svfiprintf_r+0x1a0>
   18c62:	9b03      	ldr	r3, [sp, #12]
   18c64:	3307      	adds	r3, #7
   18c66:	f023 0307 	bic.w	r3, r3, #7
   18c6a:	3308      	adds	r3, #8
   18c6c:	9303      	str	r3, [sp, #12]
   18c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18c70:	444b      	add	r3, r9
   18c72:	9309      	str	r3, [sp, #36]	; 0x24
   18c74:	e76d      	b.n	18b52 <_svfiprintf_r+0x4a>
   18c76:	fb05 3202 	mla	r2, r5, r2, r3
   18c7a:	2001      	movs	r0, #1
   18c7c:	460f      	mov	r7, r1
   18c7e:	e7a6      	b.n	18bce <_svfiprintf_r+0xc6>
   18c80:	2300      	movs	r3, #0
   18c82:	3701      	adds	r7, #1
   18c84:	9305      	str	r3, [sp, #20]
   18c86:	4619      	mov	r1, r3
   18c88:	250a      	movs	r5, #10
   18c8a:	4638      	mov	r0, r7
   18c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
   18c90:	3a30      	subs	r2, #48	; 0x30
   18c92:	2a09      	cmp	r2, #9
   18c94:	d903      	bls.n	18c9e <_svfiprintf_r+0x196>
   18c96:	2b00      	cmp	r3, #0
   18c98:	d0c8      	beq.n	18c2c <_svfiprintf_r+0x124>
   18c9a:	9105      	str	r1, [sp, #20]
   18c9c:	e7c6      	b.n	18c2c <_svfiprintf_r+0x124>
   18c9e:	fb05 2101 	mla	r1, r5, r1, r2
   18ca2:	2301      	movs	r3, #1
   18ca4:	4607      	mov	r7, r0
   18ca6:	e7f0      	b.n	18c8a <_svfiprintf_r+0x182>
   18ca8:	ab03      	add	r3, sp, #12
   18caa:	9300      	str	r3, [sp, #0]
   18cac:	4622      	mov	r2, r4
   18cae:	4b11      	ldr	r3, [pc, #68]	; (18cf4 <_svfiprintf_r+0x1ec>)
   18cb0:	a904      	add	r1, sp, #16
   18cb2:	4640      	mov	r0, r8
   18cb4:	f7fc f9c0 	bl	15038 <_printf_float>
   18cb8:	f1b0 3fff 	cmp.w	r0, #4294967295
   18cbc:	4681      	mov	r9, r0
   18cbe:	d1d6      	bne.n	18c6e <_svfiprintf_r+0x166>
   18cc0:	89a3      	ldrh	r3, [r4, #12]
   18cc2:	065b      	lsls	r3, r3, #25
   18cc4:	f53f af35 	bmi.w	18b32 <_svfiprintf_r+0x2a>
   18cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
   18cca:	b01d      	add	sp, #116	; 0x74
   18ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cd0:	ab03      	add	r3, sp, #12
   18cd2:	9300      	str	r3, [sp, #0]
   18cd4:	4622      	mov	r2, r4
   18cd6:	4b07      	ldr	r3, [pc, #28]	; (18cf4 <_svfiprintf_r+0x1ec>)
   18cd8:	a904      	add	r1, sp, #16
   18cda:	4640      	mov	r0, r8
   18cdc:	f7fc fc4e 	bl	1557c <_printf_i>
   18ce0:	e7ea      	b.n	18cb8 <_svfiprintf_r+0x1b0>
   18ce2:	bf00      	nop
   18ce4:	000199a4 	.word	0x000199a4
   18ce8:	000199aa 	.word	0x000199aa
   18cec:	000199ae 	.word	0x000199ae
   18cf0:	00015039 	.word	0x00015039
   18cf4:	00018a55 	.word	0x00018a55

00018cf8 <__sfputc_r>:
   18cf8:	6893      	ldr	r3, [r2, #8]
   18cfa:	3b01      	subs	r3, #1
   18cfc:	2b00      	cmp	r3, #0
   18cfe:	b410      	push	{r4}
   18d00:	6093      	str	r3, [r2, #8]
   18d02:	da08      	bge.n	18d16 <__sfputc_r+0x1e>
   18d04:	6994      	ldr	r4, [r2, #24]
   18d06:	42a3      	cmp	r3, r4
   18d08:	db01      	blt.n	18d0e <__sfputc_r+0x16>
   18d0a:	290a      	cmp	r1, #10
   18d0c:	d103      	bne.n	18d16 <__sfputc_r+0x1e>
   18d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   18d12:	f7fd be83 	b.w	16a1c <__swbuf_r>
   18d16:	6813      	ldr	r3, [r2, #0]
   18d18:	1c58      	adds	r0, r3, #1
   18d1a:	6010      	str	r0, [r2, #0]
   18d1c:	7019      	strb	r1, [r3, #0]
   18d1e:	4608      	mov	r0, r1
   18d20:	f85d 4b04 	ldr.w	r4, [sp], #4
   18d24:	4770      	bx	lr

00018d26 <__sfputs_r>:
   18d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d28:	4606      	mov	r6, r0
   18d2a:	460f      	mov	r7, r1
   18d2c:	4614      	mov	r4, r2
   18d2e:	18d5      	adds	r5, r2, r3
   18d30:	42ac      	cmp	r4, r5
   18d32:	d101      	bne.n	18d38 <__sfputs_r+0x12>
   18d34:	2000      	movs	r0, #0
   18d36:	e007      	b.n	18d48 <__sfputs_r+0x22>
   18d38:	463a      	mov	r2, r7
   18d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   18d3e:	4630      	mov	r0, r6
   18d40:	f7ff ffda 	bl	18cf8 <__sfputc_r>
   18d44:	1c43      	adds	r3, r0, #1
   18d46:	d1f3      	bne.n	18d30 <__sfputs_r+0xa>
   18d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00018d4c <_vfiprintf_r>:
   18d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d50:	460c      	mov	r4, r1
   18d52:	b09d      	sub	sp, #116	; 0x74
   18d54:	4617      	mov	r7, r2
   18d56:	461d      	mov	r5, r3
   18d58:	4606      	mov	r6, r0
   18d5a:	b118      	cbz	r0, 18d64 <_vfiprintf_r+0x18>
   18d5c:	6983      	ldr	r3, [r0, #24]
   18d5e:	b90b      	cbnz	r3, 18d64 <_vfiprintf_r+0x18>
   18d60:	f7fe fde6 	bl	17930 <__sinit>
   18d64:	4b7c      	ldr	r3, [pc, #496]	; (18f58 <_vfiprintf_r+0x20c>)
   18d66:	429c      	cmp	r4, r3
   18d68:	d158      	bne.n	18e1c <_vfiprintf_r+0xd0>
   18d6a:	6874      	ldr	r4, [r6, #4]
   18d6c:	89a3      	ldrh	r3, [r4, #12]
   18d6e:	0718      	lsls	r0, r3, #28
   18d70:	d55e      	bpl.n	18e30 <_vfiprintf_r+0xe4>
   18d72:	6923      	ldr	r3, [r4, #16]
   18d74:	2b00      	cmp	r3, #0
   18d76:	d05b      	beq.n	18e30 <_vfiprintf_r+0xe4>
   18d78:	2300      	movs	r3, #0
   18d7a:	9309      	str	r3, [sp, #36]	; 0x24
   18d7c:	2320      	movs	r3, #32
   18d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   18d82:	2330      	movs	r3, #48	; 0x30
   18d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   18d88:	9503      	str	r5, [sp, #12]
   18d8a:	f04f 0b01 	mov.w	fp, #1
   18d8e:	46b8      	mov	r8, r7
   18d90:	4645      	mov	r5, r8
   18d92:	f815 3b01 	ldrb.w	r3, [r5], #1
   18d96:	b10b      	cbz	r3, 18d9c <_vfiprintf_r+0x50>
   18d98:	2b25      	cmp	r3, #37	; 0x25
   18d9a:	d154      	bne.n	18e46 <_vfiprintf_r+0xfa>
   18d9c:	ebb8 0a07 	subs.w	sl, r8, r7
   18da0:	d00b      	beq.n	18dba <_vfiprintf_r+0x6e>
   18da2:	4653      	mov	r3, sl
   18da4:	463a      	mov	r2, r7
   18da6:	4621      	mov	r1, r4
   18da8:	4630      	mov	r0, r6
   18daa:	f7ff ffbc 	bl	18d26 <__sfputs_r>
   18dae:	3001      	adds	r0, #1
   18db0:	f000 80c2 	beq.w	18f38 <_vfiprintf_r+0x1ec>
   18db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18db6:	4453      	add	r3, sl
   18db8:	9309      	str	r3, [sp, #36]	; 0x24
   18dba:	f898 3000 	ldrb.w	r3, [r8]
   18dbe:	2b00      	cmp	r3, #0
   18dc0:	f000 80ba 	beq.w	18f38 <_vfiprintf_r+0x1ec>
   18dc4:	2300      	movs	r3, #0
   18dc6:	f04f 32ff 	mov.w	r2, #4294967295
   18dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
   18dce:	9304      	str	r3, [sp, #16]
   18dd0:	9307      	str	r3, [sp, #28]
   18dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   18dd6:	931a      	str	r3, [sp, #104]	; 0x68
   18dd8:	46a8      	mov	r8, r5
   18dda:	2205      	movs	r2, #5
   18ddc:	f818 1b01 	ldrb.w	r1, [r8], #1
   18de0:	485e      	ldr	r0, [pc, #376]	; (18f5c <_vfiprintf_r+0x210>)
   18de2:	f7ff f9e5 	bl	181b0 <memchr>
   18de6:	9b04      	ldr	r3, [sp, #16]
   18de8:	bb78      	cbnz	r0, 18e4a <_vfiprintf_r+0xfe>
   18dea:	06d9      	lsls	r1, r3, #27
   18dec:	bf44      	itt	mi
   18dee:	2220      	movmi	r2, #32
   18df0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   18df4:	071a      	lsls	r2, r3, #28
   18df6:	bf44      	itt	mi
   18df8:	222b      	movmi	r2, #43	; 0x2b
   18dfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   18dfe:	782a      	ldrb	r2, [r5, #0]
   18e00:	2a2a      	cmp	r2, #42	; 0x2a
   18e02:	d02a      	beq.n	18e5a <_vfiprintf_r+0x10e>
   18e04:	9a07      	ldr	r2, [sp, #28]
   18e06:	46a8      	mov	r8, r5
   18e08:	2000      	movs	r0, #0
   18e0a:	250a      	movs	r5, #10
   18e0c:	4641      	mov	r1, r8
   18e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
   18e12:	3b30      	subs	r3, #48	; 0x30
   18e14:	2b09      	cmp	r3, #9
   18e16:	d969      	bls.n	18eec <_vfiprintf_r+0x1a0>
   18e18:	b360      	cbz	r0, 18e74 <_vfiprintf_r+0x128>
   18e1a:	e024      	b.n	18e66 <_vfiprintf_r+0x11a>
   18e1c:	4b50      	ldr	r3, [pc, #320]	; (18f60 <_vfiprintf_r+0x214>)
   18e1e:	429c      	cmp	r4, r3
   18e20:	d101      	bne.n	18e26 <_vfiprintf_r+0xda>
   18e22:	68b4      	ldr	r4, [r6, #8]
   18e24:	e7a2      	b.n	18d6c <_vfiprintf_r+0x20>
   18e26:	4b4f      	ldr	r3, [pc, #316]	; (18f64 <_vfiprintf_r+0x218>)
   18e28:	429c      	cmp	r4, r3
   18e2a:	bf08      	it	eq
   18e2c:	68f4      	ldreq	r4, [r6, #12]
   18e2e:	e79d      	b.n	18d6c <_vfiprintf_r+0x20>
   18e30:	4621      	mov	r1, r4
   18e32:	4630      	mov	r0, r6
   18e34:	f7fd fe44 	bl	16ac0 <__swsetup_r>
   18e38:	2800      	cmp	r0, #0
   18e3a:	d09d      	beq.n	18d78 <_vfiprintf_r+0x2c>
   18e3c:	f04f 30ff 	mov.w	r0, #4294967295
   18e40:	b01d      	add	sp, #116	; 0x74
   18e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e46:	46a8      	mov	r8, r5
   18e48:	e7a2      	b.n	18d90 <_vfiprintf_r+0x44>
   18e4a:	4a44      	ldr	r2, [pc, #272]	; (18f5c <_vfiprintf_r+0x210>)
   18e4c:	1a80      	subs	r0, r0, r2
   18e4e:	fa0b f000 	lsl.w	r0, fp, r0
   18e52:	4318      	orrs	r0, r3
   18e54:	9004      	str	r0, [sp, #16]
   18e56:	4645      	mov	r5, r8
   18e58:	e7be      	b.n	18dd8 <_vfiprintf_r+0x8c>
   18e5a:	9a03      	ldr	r2, [sp, #12]
   18e5c:	1d11      	adds	r1, r2, #4
   18e5e:	6812      	ldr	r2, [r2, #0]
   18e60:	9103      	str	r1, [sp, #12]
   18e62:	2a00      	cmp	r2, #0
   18e64:	db01      	blt.n	18e6a <_vfiprintf_r+0x11e>
   18e66:	9207      	str	r2, [sp, #28]
   18e68:	e004      	b.n	18e74 <_vfiprintf_r+0x128>
   18e6a:	4252      	negs	r2, r2
   18e6c:	f043 0302 	orr.w	r3, r3, #2
   18e70:	9207      	str	r2, [sp, #28]
   18e72:	9304      	str	r3, [sp, #16]
   18e74:	f898 3000 	ldrb.w	r3, [r8]
   18e78:	2b2e      	cmp	r3, #46	; 0x2e
   18e7a:	d10e      	bne.n	18e9a <_vfiprintf_r+0x14e>
   18e7c:	f898 3001 	ldrb.w	r3, [r8, #1]
   18e80:	2b2a      	cmp	r3, #42	; 0x2a
   18e82:	d138      	bne.n	18ef6 <_vfiprintf_r+0x1aa>
   18e84:	9b03      	ldr	r3, [sp, #12]
   18e86:	1d1a      	adds	r2, r3, #4
   18e88:	681b      	ldr	r3, [r3, #0]
   18e8a:	9203      	str	r2, [sp, #12]
   18e8c:	2b00      	cmp	r3, #0
   18e8e:	bfb8      	it	lt
   18e90:	f04f 33ff 	movlt.w	r3, #4294967295
   18e94:	f108 0802 	add.w	r8, r8, #2
   18e98:	9305      	str	r3, [sp, #20]
   18e9a:	4d33      	ldr	r5, [pc, #204]	; (18f68 <_vfiprintf_r+0x21c>)
   18e9c:	f898 1000 	ldrb.w	r1, [r8]
   18ea0:	2203      	movs	r2, #3
   18ea2:	4628      	mov	r0, r5
   18ea4:	f7ff f984 	bl	181b0 <memchr>
   18ea8:	b140      	cbz	r0, 18ebc <_vfiprintf_r+0x170>
   18eaa:	2340      	movs	r3, #64	; 0x40
   18eac:	1b40      	subs	r0, r0, r5
   18eae:	fa03 f000 	lsl.w	r0, r3, r0
   18eb2:	9b04      	ldr	r3, [sp, #16]
   18eb4:	4303      	orrs	r3, r0
   18eb6:	f108 0801 	add.w	r8, r8, #1
   18eba:	9304      	str	r3, [sp, #16]
   18ebc:	f898 1000 	ldrb.w	r1, [r8]
   18ec0:	482a      	ldr	r0, [pc, #168]	; (18f6c <_vfiprintf_r+0x220>)
   18ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   18ec6:	2206      	movs	r2, #6
   18ec8:	f108 0701 	add.w	r7, r8, #1
   18ecc:	f7ff f970 	bl	181b0 <memchr>
   18ed0:	2800      	cmp	r0, #0
   18ed2:	d037      	beq.n	18f44 <_vfiprintf_r+0x1f8>
   18ed4:	4b26      	ldr	r3, [pc, #152]	; (18f70 <_vfiprintf_r+0x224>)
   18ed6:	bb1b      	cbnz	r3, 18f20 <_vfiprintf_r+0x1d4>
   18ed8:	9b03      	ldr	r3, [sp, #12]
   18eda:	3307      	adds	r3, #7
   18edc:	f023 0307 	bic.w	r3, r3, #7
   18ee0:	3308      	adds	r3, #8
   18ee2:	9303      	str	r3, [sp, #12]
   18ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18ee6:	444b      	add	r3, r9
   18ee8:	9309      	str	r3, [sp, #36]	; 0x24
   18eea:	e750      	b.n	18d8e <_vfiprintf_r+0x42>
   18eec:	fb05 3202 	mla	r2, r5, r2, r3
   18ef0:	2001      	movs	r0, #1
   18ef2:	4688      	mov	r8, r1
   18ef4:	e78a      	b.n	18e0c <_vfiprintf_r+0xc0>
   18ef6:	2300      	movs	r3, #0
   18ef8:	f108 0801 	add.w	r8, r8, #1
   18efc:	9305      	str	r3, [sp, #20]
   18efe:	4619      	mov	r1, r3
   18f00:	250a      	movs	r5, #10
   18f02:	4640      	mov	r0, r8
   18f04:	f810 2b01 	ldrb.w	r2, [r0], #1
   18f08:	3a30      	subs	r2, #48	; 0x30
   18f0a:	2a09      	cmp	r2, #9
   18f0c:	d903      	bls.n	18f16 <_vfiprintf_r+0x1ca>
   18f0e:	2b00      	cmp	r3, #0
   18f10:	d0c3      	beq.n	18e9a <_vfiprintf_r+0x14e>
   18f12:	9105      	str	r1, [sp, #20]
   18f14:	e7c1      	b.n	18e9a <_vfiprintf_r+0x14e>
   18f16:	fb05 2101 	mla	r1, r5, r1, r2
   18f1a:	2301      	movs	r3, #1
   18f1c:	4680      	mov	r8, r0
   18f1e:	e7f0      	b.n	18f02 <_vfiprintf_r+0x1b6>
   18f20:	ab03      	add	r3, sp, #12
   18f22:	9300      	str	r3, [sp, #0]
   18f24:	4622      	mov	r2, r4
   18f26:	4b13      	ldr	r3, [pc, #76]	; (18f74 <_vfiprintf_r+0x228>)
   18f28:	a904      	add	r1, sp, #16
   18f2a:	4630      	mov	r0, r6
   18f2c:	f7fc f884 	bl	15038 <_printf_float>
   18f30:	f1b0 3fff 	cmp.w	r0, #4294967295
   18f34:	4681      	mov	r9, r0
   18f36:	d1d5      	bne.n	18ee4 <_vfiprintf_r+0x198>
   18f38:	89a3      	ldrh	r3, [r4, #12]
   18f3a:	065b      	lsls	r3, r3, #25
   18f3c:	f53f af7e 	bmi.w	18e3c <_vfiprintf_r+0xf0>
   18f40:	9809      	ldr	r0, [sp, #36]	; 0x24
   18f42:	e77d      	b.n	18e40 <_vfiprintf_r+0xf4>
   18f44:	ab03      	add	r3, sp, #12
   18f46:	9300      	str	r3, [sp, #0]
   18f48:	4622      	mov	r2, r4
   18f4a:	4b0a      	ldr	r3, [pc, #40]	; (18f74 <_vfiprintf_r+0x228>)
   18f4c:	a904      	add	r1, sp, #16
   18f4e:	4630      	mov	r0, r6
   18f50:	f7fc fb14 	bl	1557c <_printf_i>
   18f54:	e7ec      	b.n	18f30 <_vfiprintf_r+0x1e4>
   18f56:	bf00      	nop
   18f58:	00019858 	.word	0x00019858
   18f5c:	000199a4 	.word	0x000199a4
   18f60:	00019878 	.word	0x00019878
   18f64:	00019838 	.word	0x00019838
   18f68:	000199aa 	.word	0x000199aa
   18f6c:	000199ae 	.word	0x000199ae
   18f70:	00015039 	.word	0x00015039
   18f74:	00018d27 	.word	0x00018d27

00018f78 <__sread>:
   18f78:	b510      	push	{r4, lr}
   18f7a:	460c      	mov	r4, r1
   18f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   18f80:	f000 f8f2 	bl	19168 <_read_r>
   18f84:	2800      	cmp	r0, #0
   18f86:	bfab      	itete	ge
   18f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   18f8a:	89a3      	ldrhlt	r3, [r4, #12]
   18f8c:	181b      	addge	r3, r3, r0
   18f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   18f92:	bfac      	ite	ge
   18f94:	6563      	strge	r3, [r4, #84]	; 0x54
   18f96:	81a3      	strhlt	r3, [r4, #12]
   18f98:	bd10      	pop	{r4, pc}

00018f9a <__swrite>:
   18f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f9e:	461f      	mov	r7, r3
   18fa0:	898b      	ldrh	r3, [r1, #12]
   18fa2:	05db      	lsls	r3, r3, #23
   18fa4:	4605      	mov	r5, r0
   18fa6:	460c      	mov	r4, r1
   18fa8:	4616      	mov	r6, r2
   18faa:	d505      	bpl.n	18fb8 <__swrite+0x1e>
   18fac:	2302      	movs	r3, #2
   18fae:	2200      	movs	r2, #0
   18fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   18fb4:	f000 f886 	bl	190c4 <_lseek_r>
   18fb8:	89a3      	ldrh	r3, [r4, #12]
   18fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   18fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   18fc2:	81a3      	strh	r3, [r4, #12]
   18fc4:	4632      	mov	r2, r6
   18fc6:	463b      	mov	r3, r7
   18fc8:	4628      	mov	r0, r5
   18fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18fce:	f000 b835 	b.w	1903c <_write_r>

00018fd2 <__sseek>:
   18fd2:	b510      	push	{r4, lr}
   18fd4:	460c      	mov	r4, r1
   18fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   18fda:	f000 f873 	bl	190c4 <_lseek_r>
   18fde:	1c43      	adds	r3, r0, #1
   18fe0:	89a3      	ldrh	r3, [r4, #12]
   18fe2:	bf15      	itete	ne
   18fe4:	6560      	strne	r0, [r4, #84]	; 0x54
   18fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   18fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   18fee:	81a3      	strheq	r3, [r4, #12]
   18ff0:	bf18      	it	ne
   18ff2:	81a3      	strhne	r3, [r4, #12]
   18ff4:	bd10      	pop	{r4, pc}

00018ff6 <__sclose>:
   18ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   18ffa:	f000 b831 	b.w	19060 <_close_r>

00018ffe <strncmp>:
   18ffe:	b510      	push	{r4, lr}
   19000:	b16a      	cbz	r2, 1901e <strncmp+0x20>
   19002:	3901      	subs	r1, #1
   19004:	1884      	adds	r4, r0, r2
   19006:	f810 3b01 	ldrb.w	r3, [r0], #1
   1900a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1900e:	4293      	cmp	r3, r2
   19010:	d103      	bne.n	1901a <strncmp+0x1c>
   19012:	42a0      	cmp	r0, r4
   19014:	d001      	beq.n	1901a <strncmp+0x1c>
   19016:	2b00      	cmp	r3, #0
   19018:	d1f5      	bne.n	19006 <strncmp+0x8>
   1901a:	1a98      	subs	r0, r3, r2
   1901c:	bd10      	pop	{r4, pc}
   1901e:	4610      	mov	r0, r2
   19020:	e7fc      	b.n	1901c <strncmp+0x1e>

00019022 <__ascii_wctomb>:
   19022:	b149      	cbz	r1, 19038 <__ascii_wctomb+0x16>
   19024:	2aff      	cmp	r2, #255	; 0xff
   19026:	bf85      	ittet	hi
   19028:	238a      	movhi	r3, #138	; 0x8a
   1902a:	6003      	strhi	r3, [r0, #0]
   1902c:	700a      	strbls	r2, [r1, #0]
   1902e:	f04f 30ff 	movhi.w	r0, #4294967295
   19032:	bf98      	it	ls
   19034:	2001      	movls	r0, #1
   19036:	4770      	bx	lr
   19038:	4608      	mov	r0, r1
   1903a:	4770      	bx	lr

0001903c <_write_r>:
   1903c:	b538      	push	{r3, r4, r5, lr}
   1903e:	4c07      	ldr	r4, [pc, #28]	; (1905c <_write_r+0x20>)
   19040:	4605      	mov	r5, r0
   19042:	4608      	mov	r0, r1
   19044:	4611      	mov	r1, r2
   19046:	2200      	movs	r2, #0
   19048:	6022      	str	r2, [r4, #0]
   1904a:	461a      	mov	r2, r3
   1904c:	f7fb fb80 	bl	14750 <_write>
   19050:	1c43      	adds	r3, r0, #1
   19052:	d102      	bne.n	1905a <_write_r+0x1e>
   19054:	6823      	ldr	r3, [r4, #0]
   19056:	b103      	cbz	r3, 1905a <_write_r+0x1e>
   19058:	602b      	str	r3, [r5, #0]
   1905a:	bd38      	pop	{r3, r4, r5, pc}
   1905c:	000388d4 	.word	0x000388d4

00019060 <_close_r>:
   19060:	b538      	push	{r3, r4, r5, lr}
   19062:	4c06      	ldr	r4, [pc, #24]	; (1907c <_close_r+0x1c>)
   19064:	2300      	movs	r3, #0
   19066:	4605      	mov	r5, r0
   19068:	4608      	mov	r0, r1
   1906a:	6023      	str	r3, [r4, #0]
   1906c:	f000 fa16 	bl	1949c <_close>
   19070:	1c43      	adds	r3, r0, #1
   19072:	d102      	bne.n	1907a <_close_r+0x1a>
   19074:	6823      	ldr	r3, [r4, #0]
   19076:	b103      	cbz	r3, 1907a <_close_r+0x1a>
   19078:	602b      	str	r3, [r5, #0]
   1907a:	bd38      	pop	{r3, r4, r5, pc}
   1907c:	000388d4 	.word	0x000388d4

00019080 <_fstat_r>:
   19080:	b538      	push	{r3, r4, r5, lr}
   19082:	4c07      	ldr	r4, [pc, #28]	; (190a0 <_fstat_r+0x20>)
   19084:	2300      	movs	r3, #0
   19086:	4605      	mov	r5, r0
   19088:	4608      	mov	r0, r1
   1908a:	4611      	mov	r1, r2
   1908c:	6023      	str	r3, [r4, #0]
   1908e:	f000 fa0d 	bl	194ac <_fstat>
   19092:	1c43      	adds	r3, r0, #1
   19094:	d102      	bne.n	1909c <_fstat_r+0x1c>
   19096:	6823      	ldr	r3, [r4, #0]
   19098:	b103      	cbz	r3, 1909c <_fstat_r+0x1c>
   1909a:	602b      	str	r3, [r5, #0]
   1909c:	bd38      	pop	{r3, r4, r5, pc}
   1909e:	bf00      	nop
   190a0:	000388d4 	.word	0x000388d4

000190a4 <_isatty_r>:
   190a4:	b538      	push	{r3, r4, r5, lr}
   190a6:	4c06      	ldr	r4, [pc, #24]	; (190c0 <_isatty_r+0x1c>)
   190a8:	2300      	movs	r3, #0
   190aa:	4605      	mov	r5, r0
   190ac:	4608      	mov	r0, r1
   190ae:	6023      	str	r3, [r4, #0]
   190b0:	f000 fa0c 	bl	194cc <_isatty>
   190b4:	1c43      	adds	r3, r0, #1
   190b6:	d102      	bne.n	190be <_isatty_r+0x1a>
   190b8:	6823      	ldr	r3, [r4, #0]
   190ba:	b103      	cbz	r3, 190be <_isatty_r+0x1a>
   190bc:	602b      	str	r3, [r5, #0]
   190be:	bd38      	pop	{r3, r4, r5, pc}
   190c0:	000388d4 	.word	0x000388d4

000190c4 <_lseek_r>:
   190c4:	b538      	push	{r3, r4, r5, lr}
   190c6:	4c07      	ldr	r4, [pc, #28]	; (190e4 <_lseek_r+0x20>)
   190c8:	4605      	mov	r5, r0
   190ca:	4608      	mov	r0, r1
   190cc:	4611      	mov	r1, r2
   190ce:	2200      	movs	r2, #0
   190d0:	6022      	str	r2, [r4, #0]
   190d2:	461a      	mov	r2, r3
   190d4:	f000 fa0a 	bl	194ec <_lseek>
   190d8:	1c43      	adds	r3, r0, #1
   190da:	d102      	bne.n	190e2 <_lseek_r+0x1e>
   190dc:	6823      	ldr	r3, [r4, #0]
   190de:	b103      	cbz	r3, 190e2 <_lseek_r+0x1e>
   190e0:	602b      	str	r3, [r5, #0]
   190e2:	bd38      	pop	{r3, r4, r5, pc}
   190e4:	000388d4 	.word	0x000388d4

000190e8 <memmove>:
   190e8:	4288      	cmp	r0, r1
   190ea:	b510      	push	{r4, lr}
   190ec:	eb01 0302 	add.w	r3, r1, r2
   190f0:	d807      	bhi.n	19102 <memmove+0x1a>
   190f2:	1e42      	subs	r2, r0, #1
   190f4:	4299      	cmp	r1, r3
   190f6:	d00a      	beq.n	1910e <memmove+0x26>
   190f8:	f811 4b01 	ldrb.w	r4, [r1], #1
   190fc:	f802 4f01 	strb.w	r4, [r2, #1]!
   19100:	e7f8      	b.n	190f4 <memmove+0xc>
   19102:	4283      	cmp	r3, r0
   19104:	d9f5      	bls.n	190f2 <memmove+0xa>
   19106:	1881      	adds	r1, r0, r2
   19108:	1ad2      	subs	r2, r2, r3
   1910a:	42d3      	cmn	r3, r2
   1910c:	d100      	bne.n	19110 <memmove+0x28>
   1910e:	bd10      	pop	{r4, pc}
   19110:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   19114:	f801 4d01 	strb.w	r4, [r1, #-1]!
   19118:	e7f7      	b.n	1910a <memmove+0x22>

0001911a <_realloc_r>:
   1911a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1911c:	4607      	mov	r7, r0
   1911e:	4614      	mov	r4, r2
   19120:	460e      	mov	r6, r1
   19122:	b921      	cbnz	r1, 1912e <_realloc_r+0x14>
   19124:	4611      	mov	r1, r2
   19126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1912a:	f7fb bea3 	b.w	14e74 <_malloc_r>
   1912e:	b922      	cbnz	r2, 1913a <_realloc_r+0x20>
   19130:	f7fb fe52 	bl	14dd8 <_free_r>
   19134:	4625      	mov	r5, r4
   19136:	4628      	mov	r0, r5
   19138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1913a:	f000 f827 	bl	1918c <_malloc_usable_size_r>
   1913e:	42a0      	cmp	r0, r4
   19140:	d20f      	bcs.n	19162 <_realloc_r+0x48>
   19142:	4621      	mov	r1, r4
   19144:	4638      	mov	r0, r7
   19146:	f7fb fe95 	bl	14e74 <_malloc_r>
   1914a:	4605      	mov	r5, r0
   1914c:	2800      	cmp	r0, #0
   1914e:	d0f2      	beq.n	19136 <_realloc_r+0x1c>
   19150:	4631      	mov	r1, r6
   19152:	4622      	mov	r2, r4
   19154:	f7fb fe1e 	bl	14d94 <memcpy>
   19158:	4631      	mov	r1, r6
   1915a:	4638      	mov	r0, r7
   1915c:	f7fb fe3c 	bl	14dd8 <_free_r>
   19160:	e7e9      	b.n	19136 <_realloc_r+0x1c>
   19162:	4635      	mov	r5, r6
   19164:	e7e7      	b.n	19136 <_realloc_r+0x1c>
	...

00019168 <_read_r>:
   19168:	b538      	push	{r3, r4, r5, lr}
   1916a:	4c07      	ldr	r4, [pc, #28]	; (19188 <_read_r+0x20>)
   1916c:	4605      	mov	r5, r0
   1916e:	4608      	mov	r0, r1
   19170:	4611      	mov	r1, r2
   19172:	2200      	movs	r2, #0
   19174:	6022      	str	r2, [r4, #0]
   19176:	461a      	mov	r2, r3
   19178:	f000 f9c0 	bl	194fc <_read>
   1917c:	1c43      	adds	r3, r0, #1
   1917e:	d102      	bne.n	19186 <_read_r+0x1e>
   19180:	6823      	ldr	r3, [r4, #0]
   19182:	b103      	cbz	r3, 19186 <_read_r+0x1e>
   19184:	602b      	str	r3, [r5, #0]
   19186:	bd38      	pop	{r3, r4, r5, pc}
   19188:	000388d4 	.word	0x000388d4

0001918c <_malloc_usable_size_r>:
   1918c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   19190:	1f18      	subs	r0, r3, #4
   19192:	2b00      	cmp	r3, #0
   19194:	bfbc      	itt	lt
   19196:	580b      	ldrlt	r3, [r1, r0]
   19198:	18c0      	addlt	r0, r0, r3
   1919a:	4770      	bx	lr

0001919c <__aeabi_uldivmod>:
   1919c:	b953      	cbnz	r3, 191b4 <__aeabi_uldivmod+0x18>
   1919e:	b94a      	cbnz	r2, 191b4 <__aeabi_uldivmod+0x18>
   191a0:	2900      	cmp	r1, #0
   191a2:	bf08      	it	eq
   191a4:	2800      	cmpeq	r0, #0
   191a6:	bf1c      	itt	ne
   191a8:	f04f 31ff 	movne.w	r1, #4294967295
   191ac:	f04f 30ff 	movne.w	r0, #4294967295
   191b0:	f000 b972 	b.w	19498 <__aeabi_idiv0>
   191b4:	f1ad 0c08 	sub.w	ip, sp, #8
   191b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   191bc:	f000 f806 	bl	191cc <__udivmoddi4>
   191c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   191c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191c8:	b004      	add	sp, #16
   191ca:	4770      	bx	lr

000191cc <__udivmoddi4>:
   191cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   191d0:	9e08      	ldr	r6, [sp, #32]
   191d2:	4604      	mov	r4, r0
   191d4:	4688      	mov	r8, r1
   191d6:	2b00      	cmp	r3, #0
   191d8:	d14b      	bne.n	19272 <__udivmoddi4+0xa6>
   191da:	428a      	cmp	r2, r1
   191dc:	4615      	mov	r5, r2
   191de:	d967      	bls.n	192b0 <__udivmoddi4+0xe4>
   191e0:	fab2 f282 	clz	r2, r2
   191e4:	b14a      	cbz	r2, 191fa <__udivmoddi4+0x2e>
   191e6:	f1c2 0720 	rsb	r7, r2, #32
   191ea:	fa01 f302 	lsl.w	r3, r1, r2
   191ee:	fa20 f707 	lsr.w	r7, r0, r7
   191f2:	4095      	lsls	r5, r2
   191f4:	ea47 0803 	orr.w	r8, r7, r3
   191f8:	4094      	lsls	r4, r2
   191fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   191fe:	0c23      	lsrs	r3, r4, #16
   19200:	fbb8 f7fe 	udiv	r7, r8, lr
   19204:	fa1f fc85 	uxth.w	ip, r5
   19208:	fb0e 8817 	mls	r8, lr, r7, r8
   1920c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   19210:	fb07 f10c 	mul.w	r1, r7, ip
   19214:	4299      	cmp	r1, r3
   19216:	d909      	bls.n	1922c <__udivmoddi4+0x60>
   19218:	18eb      	adds	r3, r5, r3
   1921a:	f107 30ff 	add.w	r0, r7, #4294967295
   1921e:	f080 811b 	bcs.w	19458 <__udivmoddi4+0x28c>
   19222:	4299      	cmp	r1, r3
   19224:	f240 8118 	bls.w	19458 <__udivmoddi4+0x28c>
   19228:	3f02      	subs	r7, #2
   1922a:	442b      	add	r3, r5
   1922c:	1a5b      	subs	r3, r3, r1
   1922e:	b2a4      	uxth	r4, r4
   19230:	fbb3 f0fe 	udiv	r0, r3, lr
   19234:	fb0e 3310 	mls	r3, lr, r0, r3
   19238:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1923c:	fb00 fc0c 	mul.w	ip, r0, ip
   19240:	45a4      	cmp	ip, r4
   19242:	d909      	bls.n	19258 <__udivmoddi4+0x8c>
   19244:	192c      	adds	r4, r5, r4
   19246:	f100 33ff 	add.w	r3, r0, #4294967295
   1924a:	f080 8107 	bcs.w	1945c <__udivmoddi4+0x290>
   1924e:	45a4      	cmp	ip, r4
   19250:	f240 8104 	bls.w	1945c <__udivmoddi4+0x290>
   19254:	3802      	subs	r0, #2
   19256:	442c      	add	r4, r5
   19258:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1925c:	eba4 040c 	sub.w	r4, r4, ip
   19260:	2700      	movs	r7, #0
   19262:	b11e      	cbz	r6, 1926c <__udivmoddi4+0xa0>
   19264:	40d4      	lsrs	r4, r2
   19266:	2300      	movs	r3, #0
   19268:	e9c6 4300 	strd	r4, r3, [r6]
   1926c:	4639      	mov	r1, r7
   1926e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19272:	428b      	cmp	r3, r1
   19274:	d909      	bls.n	1928a <__udivmoddi4+0xbe>
   19276:	2e00      	cmp	r6, #0
   19278:	f000 80eb 	beq.w	19452 <__udivmoddi4+0x286>
   1927c:	2700      	movs	r7, #0
   1927e:	e9c6 0100 	strd	r0, r1, [r6]
   19282:	4638      	mov	r0, r7
   19284:	4639      	mov	r1, r7
   19286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1928a:	fab3 f783 	clz	r7, r3
   1928e:	2f00      	cmp	r7, #0
   19290:	d147      	bne.n	19322 <__udivmoddi4+0x156>
   19292:	428b      	cmp	r3, r1
   19294:	d302      	bcc.n	1929c <__udivmoddi4+0xd0>
   19296:	4282      	cmp	r2, r0
   19298:	f200 80fa 	bhi.w	19490 <__udivmoddi4+0x2c4>
   1929c:	1a84      	subs	r4, r0, r2
   1929e:	eb61 0303 	sbc.w	r3, r1, r3
   192a2:	2001      	movs	r0, #1
   192a4:	4698      	mov	r8, r3
   192a6:	2e00      	cmp	r6, #0
   192a8:	d0e0      	beq.n	1926c <__udivmoddi4+0xa0>
   192aa:	e9c6 4800 	strd	r4, r8, [r6]
   192ae:	e7dd      	b.n	1926c <__udivmoddi4+0xa0>
   192b0:	b902      	cbnz	r2, 192b4 <__udivmoddi4+0xe8>
   192b2:	deff      	udf	#255	; 0xff
   192b4:	fab2 f282 	clz	r2, r2
   192b8:	2a00      	cmp	r2, #0
   192ba:	f040 808f 	bne.w	193dc <__udivmoddi4+0x210>
   192be:	1b49      	subs	r1, r1, r5
   192c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   192c4:	fa1f f885 	uxth.w	r8, r5
   192c8:	2701      	movs	r7, #1
   192ca:	fbb1 fcfe 	udiv	ip, r1, lr
   192ce:	0c23      	lsrs	r3, r4, #16
   192d0:	fb0e 111c 	mls	r1, lr, ip, r1
   192d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   192d8:	fb08 f10c 	mul.w	r1, r8, ip
   192dc:	4299      	cmp	r1, r3
   192de:	d907      	bls.n	192f0 <__udivmoddi4+0x124>
   192e0:	18eb      	adds	r3, r5, r3
   192e2:	f10c 30ff 	add.w	r0, ip, #4294967295
   192e6:	d202      	bcs.n	192ee <__udivmoddi4+0x122>
   192e8:	4299      	cmp	r1, r3
   192ea:	f200 80cd 	bhi.w	19488 <__udivmoddi4+0x2bc>
   192ee:	4684      	mov	ip, r0
   192f0:	1a59      	subs	r1, r3, r1
   192f2:	b2a3      	uxth	r3, r4
   192f4:	fbb1 f0fe 	udiv	r0, r1, lr
   192f8:	fb0e 1410 	mls	r4, lr, r0, r1
   192fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   19300:	fb08 f800 	mul.w	r8, r8, r0
   19304:	45a0      	cmp	r8, r4
   19306:	d907      	bls.n	19318 <__udivmoddi4+0x14c>
   19308:	192c      	adds	r4, r5, r4
   1930a:	f100 33ff 	add.w	r3, r0, #4294967295
   1930e:	d202      	bcs.n	19316 <__udivmoddi4+0x14a>
   19310:	45a0      	cmp	r8, r4
   19312:	f200 80b6 	bhi.w	19482 <__udivmoddi4+0x2b6>
   19316:	4618      	mov	r0, r3
   19318:	eba4 0408 	sub.w	r4, r4, r8
   1931c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   19320:	e79f      	b.n	19262 <__udivmoddi4+0x96>
   19322:	f1c7 0c20 	rsb	ip, r7, #32
   19326:	40bb      	lsls	r3, r7
   19328:	fa22 fe0c 	lsr.w	lr, r2, ip
   1932c:	ea4e 0e03 	orr.w	lr, lr, r3
   19330:	fa01 f407 	lsl.w	r4, r1, r7
   19334:	fa20 f50c 	lsr.w	r5, r0, ip
   19338:	fa21 f30c 	lsr.w	r3, r1, ip
   1933c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   19340:	4325      	orrs	r5, r4
   19342:	fbb3 f9f8 	udiv	r9, r3, r8
   19346:	0c2c      	lsrs	r4, r5, #16
   19348:	fb08 3319 	mls	r3, r8, r9, r3
   1934c:	fa1f fa8e 	uxth.w	sl, lr
   19350:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   19354:	fb09 f40a 	mul.w	r4, r9, sl
   19358:	429c      	cmp	r4, r3
   1935a:	fa02 f207 	lsl.w	r2, r2, r7
   1935e:	fa00 f107 	lsl.w	r1, r0, r7
   19362:	d90b      	bls.n	1937c <__udivmoddi4+0x1b0>
   19364:	eb1e 0303 	adds.w	r3, lr, r3
   19368:	f109 30ff 	add.w	r0, r9, #4294967295
   1936c:	f080 8087 	bcs.w	1947e <__udivmoddi4+0x2b2>
   19370:	429c      	cmp	r4, r3
   19372:	f240 8084 	bls.w	1947e <__udivmoddi4+0x2b2>
   19376:	f1a9 0902 	sub.w	r9, r9, #2
   1937a:	4473      	add	r3, lr
   1937c:	1b1b      	subs	r3, r3, r4
   1937e:	b2ad      	uxth	r5, r5
   19380:	fbb3 f0f8 	udiv	r0, r3, r8
   19384:	fb08 3310 	mls	r3, r8, r0, r3
   19388:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1938c:	fb00 fa0a 	mul.w	sl, r0, sl
   19390:	45a2      	cmp	sl, r4
   19392:	d908      	bls.n	193a6 <__udivmoddi4+0x1da>
   19394:	eb1e 0404 	adds.w	r4, lr, r4
   19398:	f100 33ff 	add.w	r3, r0, #4294967295
   1939c:	d26b      	bcs.n	19476 <__udivmoddi4+0x2aa>
   1939e:	45a2      	cmp	sl, r4
   193a0:	d969      	bls.n	19476 <__udivmoddi4+0x2aa>
   193a2:	3802      	subs	r0, #2
   193a4:	4474      	add	r4, lr
   193a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   193aa:	fba0 8902 	umull	r8, r9, r0, r2
   193ae:	eba4 040a 	sub.w	r4, r4, sl
   193b2:	454c      	cmp	r4, r9
   193b4:	46c2      	mov	sl, r8
   193b6:	464b      	mov	r3, r9
   193b8:	d354      	bcc.n	19464 <__udivmoddi4+0x298>
   193ba:	d051      	beq.n	19460 <__udivmoddi4+0x294>
   193bc:	2e00      	cmp	r6, #0
   193be:	d069      	beq.n	19494 <__udivmoddi4+0x2c8>
   193c0:	ebb1 050a 	subs.w	r5, r1, sl
   193c4:	eb64 0403 	sbc.w	r4, r4, r3
   193c8:	fa04 fc0c 	lsl.w	ip, r4, ip
   193cc:	40fd      	lsrs	r5, r7
   193ce:	40fc      	lsrs	r4, r7
   193d0:	ea4c 0505 	orr.w	r5, ip, r5
   193d4:	e9c6 5400 	strd	r5, r4, [r6]
   193d8:	2700      	movs	r7, #0
   193da:	e747      	b.n	1926c <__udivmoddi4+0xa0>
   193dc:	f1c2 0320 	rsb	r3, r2, #32
   193e0:	fa20 f703 	lsr.w	r7, r0, r3
   193e4:	4095      	lsls	r5, r2
   193e6:	fa01 f002 	lsl.w	r0, r1, r2
   193ea:	fa21 f303 	lsr.w	r3, r1, r3
   193ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   193f2:	4338      	orrs	r0, r7
   193f4:	0c01      	lsrs	r1, r0, #16
   193f6:	fbb3 f7fe 	udiv	r7, r3, lr
   193fa:	fa1f f885 	uxth.w	r8, r5
   193fe:	fb0e 3317 	mls	r3, lr, r7, r3
   19402:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   19406:	fb07 f308 	mul.w	r3, r7, r8
   1940a:	428b      	cmp	r3, r1
   1940c:	fa04 f402 	lsl.w	r4, r4, r2
   19410:	d907      	bls.n	19422 <__udivmoddi4+0x256>
   19412:	1869      	adds	r1, r5, r1
   19414:	f107 3cff 	add.w	ip, r7, #4294967295
   19418:	d22f      	bcs.n	1947a <__udivmoddi4+0x2ae>
   1941a:	428b      	cmp	r3, r1
   1941c:	d92d      	bls.n	1947a <__udivmoddi4+0x2ae>
   1941e:	3f02      	subs	r7, #2
   19420:	4429      	add	r1, r5
   19422:	1acb      	subs	r3, r1, r3
   19424:	b281      	uxth	r1, r0
   19426:	fbb3 f0fe 	udiv	r0, r3, lr
   1942a:	fb0e 3310 	mls	r3, lr, r0, r3
   1942e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   19432:	fb00 f308 	mul.w	r3, r0, r8
   19436:	428b      	cmp	r3, r1
   19438:	d907      	bls.n	1944a <__udivmoddi4+0x27e>
   1943a:	1869      	adds	r1, r5, r1
   1943c:	f100 3cff 	add.w	ip, r0, #4294967295
   19440:	d217      	bcs.n	19472 <__udivmoddi4+0x2a6>
   19442:	428b      	cmp	r3, r1
   19444:	d915      	bls.n	19472 <__udivmoddi4+0x2a6>
   19446:	3802      	subs	r0, #2
   19448:	4429      	add	r1, r5
   1944a:	1ac9      	subs	r1, r1, r3
   1944c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   19450:	e73b      	b.n	192ca <__udivmoddi4+0xfe>
   19452:	4637      	mov	r7, r6
   19454:	4630      	mov	r0, r6
   19456:	e709      	b.n	1926c <__udivmoddi4+0xa0>
   19458:	4607      	mov	r7, r0
   1945a:	e6e7      	b.n	1922c <__udivmoddi4+0x60>
   1945c:	4618      	mov	r0, r3
   1945e:	e6fb      	b.n	19258 <__udivmoddi4+0x8c>
   19460:	4541      	cmp	r1, r8
   19462:	d2ab      	bcs.n	193bc <__udivmoddi4+0x1f0>
   19464:	ebb8 0a02 	subs.w	sl, r8, r2
   19468:	eb69 020e 	sbc.w	r2, r9, lr
   1946c:	3801      	subs	r0, #1
   1946e:	4613      	mov	r3, r2
   19470:	e7a4      	b.n	193bc <__udivmoddi4+0x1f0>
   19472:	4660      	mov	r0, ip
   19474:	e7e9      	b.n	1944a <__udivmoddi4+0x27e>
   19476:	4618      	mov	r0, r3
   19478:	e795      	b.n	193a6 <__udivmoddi4+0x1da>
   1947a:	4667      	mov	r7, ip
   1947c:	e7d1      	b.n	19422 <__udivmoddi4+0x256>
   1947e:	4681      	mov	r9, r0
   19480:	e77c      	b.n	1937c <__udivmoddi4+0x1b0>
   19482:	3802      	subs	r0, #2
   19484:	442c      	add	r4, r5
   19486:	e747      	b.n	19318 <__udivmoddi4+0x14c>
   19488:	f1ac 0c02 	sub.w	ip, ip, #2
   1948c:	442b      	add	r3, r5
   1948e:	e72f      	b.n	192f0 <__udivmoddi4+0x124>
   19490:	4638      	mov	r0, r7
   19492:	e708      	b.n	192a6 <__udivmoddi4+0xda>
   19494:	4637      	mov	r7, r6
   19496:	e6e9      	b.n	1926c <__udivmoddi4+0xa0>

00019498 <__aeabi_idiv0>:
   19498:	4770      	bx	lr
   1949a:	bf00      	nop

0001949c <_close>:
   1949c:	4b02      	ldr	r3, [pc, #8]	; (194a8 <_close+0xc>)
   1949e:	2258      	movs	r2, #88	; 0x58
   194a0:	601a      	str	r2, [r3, #0]
   194a2:	f04f 30ff 	mov.w	r0, #4294967295
   194a6:	4770      	bx	lr
   194a8:	000388d4 	.word	0x000388d4

000194ac <_fstat>:
   194ac:	4b02      	ldr	r3, [pc, #8]	; (194b8 <_fstat+0xc>)
   194ae:	2258      	movs	r2, #88	; 0x58
   194b0:	601a      	str	r2, [r3, #0]
   194b2:	f04f 30ff 	mov.w	r0, #4294967295
   194b6:	4770      	bx	lr
   194b8:	000388d4 	.word	0x000388d4

000194bc <_getpid>:
   194bc:	4b02      	ldr	r3, [pc, #8]	; (194c8 <_getpid+0xc>)
   194be:	2258      	movs	r2, #88	; 0x58
   194c0:	601a      	str	r2, [r3, #0]
   194c2:	f04f 30ff 	mov.w	r0, #4294967295
   194c6:	4770      	bx	lr
   194c8:	000388d4 	.word	0x000388d4

000194cc <_isatty>:
   194cc:	4b02      	ldr	r3, [pc, #8]	; (194d8 <_isatty+0xc>)
   194ce:	2258      	movs	r2, #88	; 0x58
   194d0:	601a      	str	r2, [r3, #0]
   194d2:	2000      	movs	r0, #0
   194d4:	4770      	bx	lr
   194d6:	bf00      	nop
   194d8:	000388d4 	.word	0x000388d4

000194dc <_kill>:
   194dc:	4b02      	ldr	r3, [pc, #8]	; (194e8 <_kill+0xc>)
   194de:	2258      	movs	r2, #88	; 0x58
   194e0:	601a      	str	r2, [r3, #0]
   194e2:	f04f 30ff 	mov.w	r0, #4294967295
   194e6:	4770      	bx	lr
   194e8:	000388d4 	.word	0x000388d4

000194ec <_lseek>:
   194ec:	4b02      	ldr	r3, [pc, #8]	; (194f8 <_lseek+0xc>)
   194ee:	2258      	movs	r2, #88	; 0x58
   194f0:	601a      	str	r2, [r3, #0]
   194f2:	f04f 30ff 	mov.w	r0, #4294967295
   194f6:	4770      	bx	lr
   194f8:	000388d4 	.word	0x000388d4

000194fc <_read>:
   194fc:	4b02      	ldr	r3, [pc, #8]	; (19508 <_read+0xc>)
   194fe:	2258      	movs	r2, #88	; 0x58
   19500:	601a      	str	r2, [r3, #0]
   19502:	f04f 30ff 	mov.w	r0, #4294967295
   19506:	4770      	bx	lr
   19508:	000388d4 	.word	0x000388d4

0001950c <_sbrk>:
   1950c:	4b04      	ldr	r3, [pc, #16]	; (19520 <_sbrk+0x14>)
   1950e:	6819      	ldr	r1, [r3, #0]
   19510:	4602      	mov	r2, r0
   19512:	b909      	cbnz	r1, 19518 <_sbrk+0xc>
   19514:	4903      	ldr	r1, [pc, #12]	; (19524 <_sbrk+0x18>)
   19516:	6019      	str	r1, [r3, #0]
   19518:	6818      	ldr	r0, [r3, #0]
   1951a:	4402      	add	r2, r0
   1951c:	601a      	str	r2, [r3, #0]
   1951e:	4770      	bx	lr
   19520:	0002b54c 	.word	0x0002b54c
   19524:	000388d8 	.word	0x000388d8

00019528 <_exit>:
   19528:	e7fe      	b.n	19528 <_exit>

Disassembly of section .fini:

0001952c <_fini>:
   1952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1952e:	bf00      	nop
   19530:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19532:	bc08      	pop	{r3}
   19534:	469e      	mov	lr, r3
   19536:	4770      	bx	lr
