
PneuDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016420  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d5c  08016620  08016620  00026620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801737c  0801737c  00030608  2**0
                  CONTENTS
  4 .ARM          00000008  0801737c  0801737c  0002737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017384  08017384  00030608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017384  08017384  00027384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801738c  0801738c  0002738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  08017390  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e4a0  20000608  08017998  00030608  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000eaa8  08017998  0003eaa8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030608  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ab2b  00000000  00000000  00030636  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008d31  00000000  00000000  0007b161  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002258  00000000  00000000  00083e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e78  00000000  00000000  000860f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033cb7  00000000  00000000  00087f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a33f  00000000  00000000  000bbc1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e058  00000000  00000000  000e5f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f3fb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ef8  00000000  00000000  001f4034  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  001fdf2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001fdfe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000608 	.word	0x20000608
 800021c:	00000000 	.word	0x00000000
 8000220:	08016608 	.word	0x08016608

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000060c 	.word	0x2000060c
 800023c:	08016608 	.word	0x08016608

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	089b      	lsrs	r3, r3, #2
 8000608:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800060a:	e04a      	b.n	80006a2 <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	1d1a      	adds	r2, r3, #4
 8000610:	60fa      	str	r2, [r7, #12]
 8000612:	ed93 7a00 	vldr	s14, [r3]
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1d1a      	adds	r2, r3, #4
 800061a:	60ba      	str	r2, [r7, #8]
 800061c:	edd3 7a00 	vldr	s15, [r3]
 8000620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000624:	ed97 7a05 	vldr	s14, [r7, #20]
 8000628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800062c:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	1d1a      	adds	r2, r3, #4
 8000634:	60fa      	str	r2, [r7, #12]
 8000636:	ed93 7a00 	vldr	s14, [r3]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1d1a      	adds	r2, r3, #4
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	edd3 7a00 	vldr	s15, [r3]
 8000644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000648:	ed97 7a05 	vldr	s14, [r7, #20]
 800064c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000650:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	1d1a      	adds	r2, r3, #4
 8000658:	60fa      	str	r2, [r7, #12]
 800065a:	ed93 7a00 	vldr	s14, [r3]
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	1d1a      	adds	r2, r3, #4
 8000662:	60ba      	str	r2, [r7, #8]
 8000664:	edd3 7a00 	vldr	s15, [r3]
 8000668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800066c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000674:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1d1a      	adds	r2, r3, #4
 800067c:	60fa      	str	r2, [r7, #12]
 800067e:	ed93 7a00 	vldr	s14, [r3]
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1d1a      	adds	r2, r3, #4
 8000686:	60ba      	str	r2, [r7, #8]
 8000688:	edd3 7a00 	vldr	s15, [r3]
 800068c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000690:	ed97 7a05 	vldr	s14, [r7, #20]
 8000694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000698:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	3b01      	subs	r3, #1
 80006a0:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1b1      	bne.n	800060c <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0303 	and.w	r3, r3, #3
 80006ae:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 80006b0:	e014      	b.n	80006dc <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1d1a      	adds	r2, r3, #4
 80006b6:	60fa      	str	r2, [r7, #12]
 80006b8:	ed93 7a00 	vldr	s14, [r3]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1d1a      	adds	r2, r3, #4
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	edd3 7a00 	vldr	s15, [r3]
 80006c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80006ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d2:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	3b01      	subs	r3, #1
 80006da:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1e7      	bne.n	80006b2 <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	601a      	str	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	371c      	adds	r7, #28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80006fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000702:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80007e0 <arm_cos_f32+0xec>
 8000706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800070a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800070e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000712:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000716:	edd7 7a08 	vldr	s15, [r7, #32]
 800071a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800071e:	ee17 3a90 	vmov	r3, s15
 8000722:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000724:	edd7 7a08 	vldr	s15, [r7, #32]
 8000728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000730:	d502      	bpl.n	8000738 <arm_cos_f32+0x44>
  {
    n--;
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	3b01      	subs	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000742:	ed97 7a08 	vldr	s14, [r7, #32]
 8000746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800074a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800074e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000752:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80007e4 <arm_cos_f32+0xf0>
 8000756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800075a:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 800075e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000766:	ee17 3a90 	vmov	r3, s15
 800076a:	b29b      	uxth	r3, r3
 800076c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000770:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	ee07 3a90 	vmov	s15, r3
 8000778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800077c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000784:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8000788:	8b7b      	ldrh	r3, [r7, #26]
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <arm_cos_f32+0xf4>)
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000794:	8b7b      	ldrh	r3, [r7, #26]
 8000796:	3301      	adds	r3, #1
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <arm_cos_f32+0xf4>)
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 80007a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80007aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80007b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80007ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80007be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c6:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	ee07 3a90 	vmov	s15, r3
}
 80007d0:	eeb0 0a67 	vmov.f32	s0, s15
 80007d4:	372c      	adds	r7, #44	; 0x2c
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	3e22f983 	.word	0x3e22f983
 80007e4:	44000000 	.word	0x44000000
 80007e8:	080167f4 	.word	0x080167f4

080007ec <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b08b      	sub	sp, #44	; 0x2c
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 80007f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80007fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000802:	d50a      	bpl.n	800081a <arm_sin_f32+0x2e>
 8000804:	edd7 7a01 	vldr	s15, [r7, #4]
 8000808:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80008f4 <arm_sin_f32+0x108>
 800080c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000814:	db01      	blt.n	800081a <arm_sin_f32+0x2e>
     return x;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	e062      	b.n	80008e0 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800081a:	edd7 7a01 	vldr	s15, [r7, #4]
 800081e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80008f8 <arm_sin_f32+0x10c>
 8000822:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000826:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800082a:	edd7 7a08 	vldr	s15, [r7, #32]
 800082e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000832:	ee17 3a90 	vmov	r3, s15
 8000836:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8000838:	edd7 7a01 	vldr	s15, [r7, #4]
 800083c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000844:	d502      	bpl.n	800084c <arm_sin_f32+0x60>
  {
    n--;
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3b01      	subs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000856:	ed97 7a08 	vldr	s14, [r7, #32]
 800085a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800085e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8000862:	edd7 7a08 	vldr	s15, [r7, #32]
 8000866:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80008fc <arm_sin_f32+0x110>
 800086a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800086e:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8000872:	edd7 7a07 	vldr	s15, [r7, #28]
 8000876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800087a:	ee17 3a90 	vmov	r3, s15
 800087e:	b29b      	uxth	r3, r3
 8000880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000884:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000886:	8b7b      	ldrh	r3, [r7, #26]
 8000888:	ee07 3a90 	vmov	s15, r3
 800088c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000890:	ed97 7a07 	vldr	s14, [r7, #28]
 8000894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000898:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800089c:	8b7b      	ldrh	r3, [r7, #26]
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <arm_sin_f32+0x114>)
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80008a8:	8b7b      	ldrh	r3, [r7, #26]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <arm_sin_f32+0x114>)
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 80008b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80008be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80008c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80008ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008da:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	ee07 3a90 	vmov	s15, r3
}
 80008e4:	eeb0 0a67 	vmov.f32	s0, s15
 80008e8:	372c      	adds	r7, #44	; 0x2c
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	b44c02cd 	.word	0xb44c02cd
 80008f8:	3e22f983 	.word	0x3e22f983
 80008fc:	44000000 	.word	0x44000000
 8000900:	080167f4 	.word	0x080167f4

08000904 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000904:	b480      	push	{r7}
 8000906:	b091      	sub	sp, #68	; 0x44
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	885b      	ldrh	r3, [r3, #2]
 800092c:	fb03 f302 	mul.w	r3, r3, r2
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 8000932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000934:	089b      	lsrs	r3, r3, #2
 8000936:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000938:	e052      	b.n	80009e0 <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 800093a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 800094c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000950:	edd7 7a08 	vldr	s15, [r7, #32]
 8000954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000958:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 800095c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000968:	ed97 7a07 	vldr	s14, [r7, #28]
 800096c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000974:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800097e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000986:	3304      	adds	r3, #4
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 800098c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000998:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800099c:	edd7 7a08 	vldr	s15, [r7, #32]
 80009a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009a4:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 80009a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80009ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80009b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b4:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80009b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ba:	3308      	adds	r3, #8
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80009c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c2:	330c      	adds	r3, #12
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80009c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ca:	3310      	adds	r3, #16
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80009ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d0:	3310      	adds	r3, #16
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80009d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d6:	3310      	adds	r3, #16
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80009da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009dc:	3b01      	subs	r3, #1
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80009e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1a9      	bne.n	800093a <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80009e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80009ee:	e013      	b.n	8000a18 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80009f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009f2:	1d1a      	adds	r2, r3, #4
 80009f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80009f6:	ed93 7a00 	vldr	s14, [r3]
 80009fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009fc:	1d1a      	adds	r2, r3, #4
 80009fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8000a00:	edd3 7a00 	vldr	s15, [r3]
 8000a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	637a      	str	r2, [r7, #52]	; 0x34
 8000a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a0e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a14:	3b01      	subs	r3, #1
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1e8      	bne.n	80009f0 <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000a24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3744      	adds	r7, #68	; 0x44
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	817b      	strh	r3, [r7, #10]
 8000a42:	4613      	mov	r3, r2
 8000a44:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	897a      	ldrh	r2, [r7, #10]
 8000a4a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	893a      	ldrh	r2, [r7, #8]
 8000a50:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	605a      	str	r2, [r3, #4]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b09b      	sub	sp, #108	; 0x6c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	885b      	ldrh	r3, [r3, #2]
 8000a84:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000a98:	e029      	b.n	8000aee <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000aa2:	e008      	b.n	8000ab6 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aa6:	1d1a      	adds	r2, r3, #4
 8000aa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
        j--;
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f3      	bne.n	8000aa4 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8000abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000abe:	1d1a      	adds	r2, r3, #4
 8000ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 8000ac2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ac6:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8000ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aca:	3b01      	subs	r3, #1
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000ace:	e008      	b.n	8000ae2 <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 8000ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad2:	1d1a      	adds	r2, r3, #4
 8000ad4:	65ba      	str	r2, [r7, #88]	; 0x58
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
        j--;
 8000adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f3      	bne.n	8000ad0 <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 8000ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aea:	3b01      	subs	r3, #1
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 8000aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1d2      	bne.n	8000a9a <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 8000afc:	e1aa      	b.n	8000e54 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 8000afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	fb02 f303 	mul.w	r3, r2, r3
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b0a:	4413      	add	r3, r2
 8000b0c:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 8000b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 8000b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8000b2e:	e036      	b.n	8000b9e <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 8000b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3e:	dd10      	ble.n	8000b62 <arm_mat_inverse_f32+0xfe>
 8000b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b52:	d503      	bpl.n	8000b5c <arm_mat_inverse_f32+0xf8>
 8000b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b56:	edd3 7a00 	vldr	s15, [r3]
 8000b5a:	e016      	b.n	8000b8a <arm_mat_inverse_f32+0x126>
 8000b5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000b60:	e013      	b.n	8000b8a <arm_mat_inverse_f32+0x126>
 8000b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b64:	edd3 7a00 	vldr	s15, [r3]
 8000b68:	eef1 7a67 	vneg.f32	s15, s15
 8000b6c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b78:	d505      	bpl.n	8000b86 <arm_mat_inverse_f32+0x122>
 8000b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b7c:	edd3 7a00 	vldr	s15, [r3]
 8000b80:	eef1 7a67 	vneg.f32	s15, s15
 8000b84:	e001      	b.n	8000b8a <arm_mat_inverse_f32+0x126>
 8000b86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000b8a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b94:	4413      	add	r3, r2
 8000b96:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8000b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d3c4      	bcc.n	8000b30 <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000ba6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000baa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb2:	d102      	bne.n	8000bba <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 8000bb4:	f06f 0304 	mvn.w	r3, #4
 8000bb8:	e186      	b.n	8000ec8 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 8000bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bbc:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 8000bc2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bce:	dd02      	ble.n	8000bd6 <arm_mat_inverse_f32+0x172>
 8000bd0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000bd4:	e003      	b.n	8000bde <arm_mat_inverse_f32+0x17a>
 8000bd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000bda:	eef1 7a67 	vneg.f32	s15, s15
 8000bde:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000be2:	eef4 7a47 	vcmp.f32	s15, s14
 8000be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bea:	d069      	beq.n	8000cc0 <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 8000bec:	69fa      	ldr	r2, [r7, #28]
 8000bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 8000bf6:	e060      	b.n	8000cba <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c04:	4413      	add	r3, r2
 8000c06:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c0c:	fb02 f303 	mul.w	r3, r2, r3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c14:	4413      	add	r3, r2
 8000c16:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c26:	dd03      	ble.n	8000c30 <arm_mat_inverse_f32+0x1cc>
 8000c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c2a:	edd3 7a00 	vldr	s15, [r3]
 8000c2e:	e004      	b.n	8000c3a <arm_mat_inverse_f32+0x1d6>
 8000c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c32:	edd3 7a00 	vldr	s15, [r3]
 8000c36:	eef1 7a67 	vneg.f32	s15, s15
 8000c3a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000c3e:	eef4 7a47 	vcmp.f32	s15, s14
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d132      	bne.n	8000cae <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 8000c50:	e010      	b.n	8000c74 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 8000c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c5a:	1d1a      	adds	r2, r3, #4
 8000c5c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000c5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c66:	1d1a      	adds	r2, r3, #4
 8000c68:	663a      	str	r2, [r7, #96]	; 0x60
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c70:	3b01      	subs	r3, #1
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1eb      	bne.n	8000c52 <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 8000c7e:	e010      	b.n	8000ca2 <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 8000c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c88:	1d1a      	adds	r2, r3, #4
 8000c8a:	657a      	str	r2, [r7, #84]	; 0x54
 8000c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c8e:	6812      	ldr	r2, [r2, #0]
 8000c90:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 8000c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c94:	1d1a      	adds	r2, r3, #4
 8000c96:	65ba      	str	r2, [r7, #88]	; 0x58
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1eb      	bne.n	8000c80 <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000cac:	e008      	b.n	8000cc0 <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 8000cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 8000cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 8000cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d19b      	bne.n	8000bf8 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 8000cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d009      	beq.n	8000cda <arm_mat_inverse_f32+0x276>
 8000cc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000cca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd2:	d102      	bne.n	8000cda <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 8000cd4:	f06f 0304 	mvn.w	r3, #4
 8000cd8:	e0f6      	b.n	8000ec8 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ce6:	4413      	add	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	6a3a      	ldr	r2, [r7, #32]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000d10:	e010      	b.n	8000d34 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 8000d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d1a:	1d1a      	adds	r2, r3, #4
 8000d1c:	663a      	str	r2, [r7, #96]	; 0x60
 8000d1e:	edd7 6a02 	vldr	s13, [r7, #8]
 8000d22:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d2a:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d30:	3b01      	subs	r3, #1
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1eb      	bne.n	8000d12 <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000d3e:	e010      	b.n	8000d62 <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d48:	1d1a      	adds	r2, r3, #4
 8000d4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000d4c:	edd7 6a02 	vldr	s13, [r7, #8]
 8000d50:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d58:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1eb      	bne.n	8000d40 <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d6a:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000d78:	e060      	b.n	8000e3c <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d10c      	bne.n	8000d9c <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d8c:	4413      	add	r3, r2
 8000d8e:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d96:	4413      	add	r3, r2
 8000d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d9a:	e044      	b.n	8000e26 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000db2:	e017      	b.n	8000de4 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dbc:	1d1a      	adds	r2, r3, #4
 8000dbe:	653a      	str	r2, [r7, #80]	; 0x50
 8000dc0:	ed93 7a00 	vldr	s14, [r3]
 8000dc4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dce:	1d1a      	adds	r2, r3, #4
 8000dd0:	663a      	str	r2, [r7, #96]	; 0x60
 8000dd2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dda:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de0:	3b01      	subs	r3, #1
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1e4      	bne.n	8000db4 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000dee:	e017      	b.n	8000e20 <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000df8:	1d1a      	adds	r2, r3, #4
 8000dfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dfc:	ed93 7a00 	vldr	s14, [r3]
 8000e00:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e0a:	1d1a      	adds	r2, r3, #4
 8000e0c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000e0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e16:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1e4      	bne.n	8000df0 <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e2c:	4413      	add	r3, r2
 8000e2e:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	3b01      	subs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e38:	3301      	adds	r3, #1
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d19b      	bne.n	8000d7a <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e44:	3304      	adds	r3, #4
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	3301      	adds	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f47f ae51 	bne.w	8000afe <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d02d      	beq.n	8000ec4 <arm_mat_inverse_f32+0x460>
 8000e68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000e6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e74:	d126      	bne.n	8000ec4 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8000e80:	e00d      	b.n	8000e9e <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e88:	4413      	add	r3, r2
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	d10a      	bne.n	8000eae <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3ea      	bcc.n	8000e82 <arm_mat_inverse_f32+0x41e>
 8000eac:	e000      	b.n	8000eb0 <arm_mat_inverse_f32+0x44c>
            break;
 8000eae:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	fb02 f303 	mul.w	r3, r2, r3
 8000eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d102      	bne.n	8000ec4 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000ebe:	23fb      	movs	r3, #251	; 0xfb
 8000ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000ec4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	376c      	adds	r7, #108	; 0x6c
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b095      	sub	sp, #84	; 0x54
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	885b      	ldrh	r3, [r3, #2]
 8000f02:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	885b      	ldrh	r3, [r3, #2]
 8000f08:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	873b      	strh	r3, [r7, #56]	; 0x38
 8000f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f10:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000f12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f18:	4413      	add	r3, r2
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000f1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f1e:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000f34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000f3a:	e061      	b.n	8001000 <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000f42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f48:	4413      	add	r3, r2
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000f58:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f64:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000f76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f7c:	4413      	add	r3, r2
 8000f7e:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000f80:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f84:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f94:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000f9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000fa4:	4413      	add	r3, r2
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000fb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000fd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000fd8:	4413      	add	r3, r2
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000fdc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fe0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ffa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8001000:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001002:	2b00      	cmp	r3, #0
 8001004:	d19a      	bne.n	8000f3c <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8001006:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 800100e:	e017      	b.n	8001040 <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8001010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001012:	1d1a      	adds	r2, r3, #4
 8001014:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001024:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8001030:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001036:	4413      	add	r3, r2
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 800103a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800103c:	3b01      	subs	r3, #1
 800103e:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8001040:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1e4      	bne.n	8001010 <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8001046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001048:	1d1a      	adds	r2, r3, #4
 800104a:	643a      	str	r2, [r7, #64]	; 0x40
 800104c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800104e:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8001050:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001052:	3301      	adds	r3, #1
 8001054:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8001062:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001064:	3b01      	subs	r3, #1
 8001066:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8001068:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800106a:	2b00      	cmp	r3, #0
 800106c:	f47f af5d 	bne.w	8000f2a <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8001070:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001072:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001074:	4413      	add	r3, r2
 8001076:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8001078:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800107e:	4413      	add	r3, r2
 8001080:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8001082:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001084:	3b01      	subs	r3, #1
 8001086:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8001088:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800108a:	2b00      	cmp	r3, #0
 800108c:	f47f af41 	bne.w	8000f12 <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8001096:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 800109a:	4618      	mov	r0, r3
 800109c:	3754      	adds	r7, #84	; 0x54
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b091      	sub	sp, #68	; 0x44
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	885b      	ldrh	r3, [r3, #2]
 80010ce:	fb03 f302 	mul.w	r3, r3, r2
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 80010da:	e052      	b.n	8001182 <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 80010dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 80010e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 80010e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 80010ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fa:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 80010fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8001104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 800110a:	ed97 7a07 	vldr	s14, [r7, #28]
 800110e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001116:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 800111a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8001120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001128:	3304      	adds	r3, #4
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 800112e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8001134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 800113a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800113e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001146:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 800114a:	ed97 7a07 	vldr	s14, [r7, #28]
 800114e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001156:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 800115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115c:	3308      	adds	r3, #8
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8001162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001164:	330c      	adds	r3, #12
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 800116a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800116c:	3310      	adds	r3, #16
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8001170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001172:	3310      	adds	r3, #16
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8001176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001178:	3310      	adds	r3, #16
 800117a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	3b01      	subs	r3, #1
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1a9      	bne.n	80010dc <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8001190:	e013      	b.n	80011ba <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8001192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001194:	1d1a      	adds	r2, r3, #4
 8001196:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001198:	ed93 7a00 	vldr	s14, [r3]
 800119c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800119e:	1d1a      	adds	r2, r3, #4
 80011a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a8:	1d1a      	adds	r2, r3, #4
 80011aa:	637a      	str	r2, [r7, #52]	; 0x34
 80011ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80011b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b6:	3b01      	subs	r3, #1
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80011ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e8      	bne.n	8001192 <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 80011c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3744      	adds	r7, #68	; 0x44
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b08b      	sub	sp, #44	; 0x2c
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	885b      	ldrh	r3, [r3, #2]
 80011f6:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 80011f8:	2300      	movs	r3, #0
 80011fa:	83bb      	strh	r3, [r7, #28]
 80011fc:	8a7b      	ldrh	r3, [r7, #18]
 80011fe:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8001200:	8a3b      	ldrh	r3, [r7, #16]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8001206:	8bbb      	ldrh	r3, [r7, #28]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4413      	add	r3, r2
 800120e:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8001210:	e02e      	b.n	8001270 <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	1d1a      	adds	r2, r3, #4
 8001216:	627a      	str	r2, [r7, #36]	; 0x24
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 800121e:	8a7b      	ldrh	r3, [r7, #18]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	6a3a      	ldr	r2, [r7, #32]
 8001224:	4413      	add	r3, r2
 8001226:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	1d1a      	adds	r2, r3, #4
 800122c:	627a      	str	r2, [r7, #36]	; 0x24
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8001234:	8a7b      	ldrh	r3, [r7, #18]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	6a3a      	ldr	r2, [r7, #32]
 800123a:	4413      	add	r3, r2
 800123c:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	1d1a      	adds	r2, r3, #4
 8001242:	627a      	str	r2, [r7, #36]	; 0x24
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 800124a:	8a7b      	ldrh	r3, [r7, #18]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	6a3a      	ldr	r2, [r7, #32]
 8001250:	4413      	add	r3, r2
 8001252:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	1d1a      	adds	r2, r3, #4
 8001258:	627a      	str	r2, [r7, #36]	; 0x24
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8001260:	8a7b      	ldrh	r3, [r7, #18]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	6a3a      	ldr	r2, [r7, #32]
 8001266:	4413      	add	r3, r2
 8001268:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 800126a:	8bfb      	ldrh	r3, [r7, #30]
 800126c:	3b01      	subs	r3, #1
 800126e:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8001270:	8bfb      	ldrh	r3, [r7, #30]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1cd      	bne.n	8001212 <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8001276:	8a3b      	ldrh	r3, [r7, #16]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 800127e:	e00d      	b.n	800129c <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	1d1a      	adds	r2, r3, #4
 8001284:	627a      	str	r2, [r7, #36]	; 0x24
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 800128c:	8a7b      	ldrh	r3, [r7, #18]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	6a3a      	ldr	r2, [r7, #32]
 8001292:	4413      	add	r3, r2
 8001294:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8001296:	8bfb      	ldrh	r3, [r7, #30]
 8001298:	3b01      	subs	r3, #1
 800129a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 800129c:	8bfb      	ldrh	r3, [r7, #30]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ee      	bne.n	8001280 <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 80012a2:	8bbb      	ldrh	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 80012a8:	8b7b      	ldrh	r3, [r7, #26]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 80012ae:	8b7b      	ldrh	r3, [r7, #26]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1a5      	bne.n	8001200 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	372c      	adds	r7, #44	; 0x2c
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 fcf8 	bl	8001cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f008 f86e 	bl	80093b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f008 f844 	bl	8009364 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000000 	.word	0x20000000
 8001308:	200013d4 	.word	0x200013d4

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200013d4 	.word	0x200013d4

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff ffee 	bl	800130c <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_Delay+0x40>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffde 	bl	800130c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000

08001368 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e031      	b.n	80013e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f006 ff5a 	bl	8008240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_ADC_Init+0x84>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	f043 0202 	orr.w	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fa5a 	bl	8001870 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f023 0303 	bic.w	r3, r3, #3
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
 80013d2:	e001      	b.n	80013d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	ffffeefd 	.word	0xffffeefd

080013f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_ADC_Start_DMA+0x1e>
 800140a:	2302      	movs	r3, #2
 800140c:	e0c7      	b.n	800159e <HAL_ADC_Start_DMA+0x1ae>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d018      	beq.n	8001456 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001434:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_ADC_Start_DMA+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a5c      	ldr	r2, [pc, #368]	; (80015ac <HAL_ADC_Start_DMA+0x1bc>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9a      	lsrs	r2, r3, #18
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001448:	e002      	b.n	8001450 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3b01      	subs	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f9      	bne.n	800144a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	f040 809b 	bne.w	800159c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <HAL_ADC_Start_DMA+0x1c0>)
 800146c:	4013      	ands	r3, r2
 800146e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800148c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a0:	d106      	bne.n	80014b0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f023 0206 	bic.w	r2, r3, #6
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
 80014ae:	e002      	b.n	80014b6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c2:	4a3c      	ldr	r2, [pc, #240]	; (80015b4 <HAL_ADC_Start_DMA+0x1c4>)
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ca:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <HAL_ADC_Start_DMA+0x1c8>)
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	4a3a      	ldr	r2, [pc, #232]	; (80015bc <HAL_ADC_Start_DMA+0x1cc>)
 80014d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	334c      	adds	r3, #76	; 0x4c
 800150a:	4619      	mov	r1, r3
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f000 fcba 	bl	8001e88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_ADC_Start_DMA+0x1d0>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 031f 	and.w	r3, r3, #31
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d136      	bne.n	800159c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e02d      	b.n	800159c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_ADC_Start_DMA+0x1d4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10e      	bne.n	8001568 <HAL_ADC_Start_DMA+0x178>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d107      	bne.n	8001568 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001566:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_ADC_Start_DMA+0x1d0>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	d113      	bne.n	800159c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_ADC_Start_DMA+0x1d8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d10e      	bne.n	800159c <HAL_ADC_Start_DMA+0x1ac>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d107      	bne.n	800159c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800159a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	fffff8fe 	.word	0xfffff8fe
 80015b4:	08001a65 	.word	0x08001a65
 80015b8:	08001b1f 	.word	0x08001b1f
 80015bc:	08001b3b 	.word	0x08001b3b
 80015c0:	40012300 	.word	0x40012300
 80015c4:	40012000 	.word	0x40012000
 80015c8:	40012200 	.word	0x40012200

080015cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1c>
 8001620:	2302      	movs	r3, #2
 8001622:	e115      	b.n	8001850 <HAL_ADC_ConfigChannel+0x248>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b09      	cmp	r3, #9
 8001632:	d935      	bls.n	80016a0 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68d9      	ldr	r1, [r3, #12]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	3b1e      	subs	r3, #30
 800164a:	2207      	movs	r2, #7
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43da      	mvns	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	400a      	ands	r2, r1
 8001658:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7f      	ldr	r2, [pc, #508]	; (800185c <HAL_ADC_ConfigChannel+0x254>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d10a      	bne.n	800167a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68d9      	ldr	r1, [r3, #12]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	061a      	lsls	r2, r3, #24
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e035      	b.n	80016e6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68d9      	ldr	r1, [r3, #12]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	4603      	mov	r3, r0
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4403      	add	r3, r0
 8001692:	3b1e      	subs	r3, #30
 8001694:	409a      	lsls	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	e022      	b.n	80016e6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6919      	ldr	r1, [r3, #16]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	2207      	movs	r2, #7
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	400a      	ands	r2, r1
 80016c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6919      	ldr	r1, [r3, #16]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4403      	add	r3, r0
 80016dc:	409a      	lsls	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d824      	bhi.n	8001738 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b05      	subs	r3, #5
 8001700:	221f      	movs	r2, #31
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	400a      	ands	r2, r1
 800170e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b05      	subs	r3, #5
 800172a:	fa00 f203 	lsl.w	r2, r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	635a      	str	r2, [r3, #52]	; 0x34
 8001736:	e04c      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d824      	bhi.n	800178a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	3b23      	subs	r3, #35	; 0x23
 8001752:	221f      	movs	r2, #31
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43da      	mvns	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	400a      	ands	r2, r1
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b23      	subs	r3, #35	; 0x23
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	631a      	str	r2, [r3, #48]	; 0x30
 8001788:	e023      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b41      	subs	r3, #65	; 0x41
 800179c:	221f      	movs	r2, #31
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b41      	subs	r3, #65	; 0x41
 80017c6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <HAL_ADC_ConfigChannel+0x258>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d109      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1e8>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b12      	cmp	r3, #18
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_ADC_ConfigChannel+0x25c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_ADC_ConfigChannel+0x25c>)
 80017ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ee:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_ADC_ConfigChannel+0x258>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d125      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x23e>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_ADC_ConfigChannel+0x254>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d003      	beq.n	800180c <HAL_ADC_ConfigChannel+0x204>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b11      	cmp	r3, #17
 800180a:	d11c      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_ADC_ConfigChannel+0x25c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <HAL_ADC_ConfigChannel+0x25c>)
 8001812:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001816:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <HAL_ADC_ConfigChannel+0x254>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d111      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_ADC_ConfigChannel+0x260>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_ADC_ConfigChannel+0x264>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9a      	lsrs	r2, r3, #18
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001838:	e002      	b.n	8001840 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3b01      	subs	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	10000012 	.word	0x10000012
 8001860:	40012000 	.word	0x40012000
 8001864:	40012300 	.word	0x40012300
 8001868:	20000008 	.word	0x20000008
 800186c:	431bde83 	.word	0x431bde83

08001870 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001878:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <ADC_Init+0x1ec>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a77      	ldr	r2, [pc, #476]	; (8001a5c <ADC_Init+0x1ec>)
 800187e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001882:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001884:	4b75      	ldr	r3, [pc, #468]	; (8001a5c <ADC_Init+0x1ec>)
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4973      	ldr	r1, [pc, #460]	; (8001a5c <ADC_Init+0x1ec>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	021a      	lsls	r2, r3, #8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <ADC_Init+0x1f0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d022      	beq.n	800194a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6899      	ldr	r1, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6899      	ldr	r1, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	e00f      	b.n	800196a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001968:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0202 	bic.w	r2, r2, #2
 8001978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6899      	ldr	r1, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	005a      	lsls	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01b      	beq.n	80019d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6859      	ldr	r1, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	3b01      	subs	r3, #1
 80019c4:	035a      	lsls	r2, r3, #13
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	e007      	b.n	80019e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	051a      	lsls	r2, r3, #20
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6899      	ldr	r1, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a22:	025a      	lsls	r2, r3, #9
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6899      	ldr	r1, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	029a      	lsls	r2, r3, #10
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40012300 	.word	0x40012300
 8001a60:	0f000001 	.word	0x0f000001

08001a64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d13c      	bne.n	8001af8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d12b      	bne.n	8001af0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d127      	bne.n	8001af0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d119      	bne.n	8001af0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0220 	bic.w	r2, r2, #32
 8001aca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff fd6b 	bl	80015cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001af6:	e00e      	b.n	8001b16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff fd75 	bl	80015f4 <HAL_ADC_ErrorCallback>
}
 8001b0a:	e004      	b.n	8001b16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff fd57 	bl	80015e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f043 0204 	orr.w	r2, r3, #4
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fd4a 	bl	80015f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	05fa0000 	.word	0x05fa0000

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0b      	blt.n	8001bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4907      	ldr	r1, [pc, #28]	; (8001c04 <__NVIC_EnableIRQ+0x38>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100

08001c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db0a      	blt.n	8001c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	490c      	ldr	r1, [pc, #48]	; (8001c54 <__NVIC_SetPriority+0x4c>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c30:	e00a      	b.n	8001c48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4908      	ldr	r1, [pc, #32]	; (8001c58 <__NVIC_SetPriority+0x50>)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	761a      	strb	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1c3 0307 	rsb	r3, r3, #7
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf28      	it	cs
 8001c7a:	2304      	movcs	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d902      	bls.n	8001c8c <NVIC_EncodePriority+0x30>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b03      	subs	r3, #3
 8001c8a:	e000      	b.n	8001c8e <NVIC_EncodePriority+0x32>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	43d9      	mvns	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	4313      	orrs	r3, r2
         );
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ff4c 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cea:	f7ff ff61 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001cee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	6978      	ldr	r0, [r7, #20]
 8001cf6:	f7ff ffb1 	bl	8001c5c <NVIC_EncodePriority>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff80 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d08:	bf00      	nop
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff54 	bl	8001bcc <__NVIC_EnableIRQ>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff fae8 	bl	800130c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e099      	b.n	8001e7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d68:	e00f      	b.n	8001d8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d6a:	f7ff facf 	bl	800130c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d908      	bls.n	8001d8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2203      	movs	r2, #3
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e078      	b.n	8001e7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e8      	bne.n	8001d6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_DMA_Init+0x158>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d107      	bne.n	8001df4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	4313      	orrs	r3, r2
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f023 0307 	bic.w	r3, r3, #7
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d117      	bne.n	8001e4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fb09 	bl	8002448 <DMA_CheckFifoParam>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2240      	movs	r2, #64	; 0x40
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e016      	b.n	8001e7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fac0 	bl	80023dc <DMA_CalcBaseAndBitshift>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	223f      	movs	r2, #63	; 0x3f
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	e010803f 	.word	0xe010803f

08001e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_DMA_Start_IT+0x26>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e048      	b.n	8001f40 <HAL_DMA_Start_IT+0xb8>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d137      	bne.n	8001f32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fa52 	bl	8002380 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	223f      	movs	r2, #63	; 0x3f
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0216 	orr.w	r2, r2, #22
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f06:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e005      	b.n	8001f3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f56:	f7ff f9d9 	bl	800130c <HAL_GetTick>
 8001f5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d008      	beq.n	8001f7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e052      	b.n	8002020 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0216 	bic.w	r2, r2, #22
 8001f88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d103      	bne.n	8001faa <HAL_DMA_Abort+0x62>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0208 	bic.w	r2, r2, #8
 8001fb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fca:	e013      	b.n	8001ff4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fcc:	f7ff f99e 	bl	800130c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d90c      	bls.n	8001ff4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2203      	movs	r2, #3
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e015      	b.n	8002020 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1e4      	bne.n	8001fcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	223f      	movs	r2, #63	; 0x3f
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d004      	beq.n	8002046 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00c      	b.n	8002060 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2205      	movs	r2, #5
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002078:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <HAL_DMA_IRQHandler+0x258>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a92      	ldr	r2, [pc, #584]	; (80022c8 <HAL_DMA_IRQHandler+0x25c>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0a9b      	lsrs	r3, r3, #10
 8002084:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	2208      	movs	r2, #8
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01a      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0204 	bic.w	r2, r2, #4
 80020be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2208      	movs	r2, #8
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2201      	movs	r2, #1
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d012      	beq.n	800210e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2201      	movs	r2, #1
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	f043 0202 	orr.w	r2, r3, #2
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2204      	movs	r2, #4
 8002114:	409a      	lsls	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d012      	beq.n	8002144 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00b      	beq.n	8002144 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	2204      	movs	r2, #4
 8002132:	409a      	lsls	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	f043 0204 	orr.w	r2, r3, #4
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	2210      	movs	r2, #16
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d043      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d03c      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	2210      	movs	r2, #16
 8002168:	409a      	lsls	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d018      	beq.n	80021ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d024      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	e01f      	b.n	80021dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01b      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
 80021ac:	e016      	b.n	80021dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d107      	bne.n	80021cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0208 	bic.w	r2, r2, #8
 80021ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2220      	movs	r2, #32
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 808e 	beq.w	800230a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8086 	beq.w	800230a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	2220      	movs	r2, #32
 8002204:	409a      	lsls	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b05      	cmp	r3, #5
 8002214:	d136      	bne.n	8002284 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0216 	bic.w	r2, r2, #22
 8002224:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002234:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <HAL_DMA_IRQHandler+0x1da>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0208 	bic.w	r2, r2, #8
 8002254:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225a:	223f      	movs	r2, #63	; 0x3f
 800225c:	409a      	lsls	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	2b00      	cmp	r3, #0
 8002278:	d07d      	beq.n	8002376 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4798      	blx	r3
        }
        return;
 8002282:	e078      	b.n	8002376 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01c      	beq.n	80022cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d108      	bne.n	80022b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d030      	beq.n	800230a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
 80022b0:	e02b      	b.n	800230a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d027      	beq.n	800230a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
 80022c2:	e022      	b.n	800230a <HAL_DMA_IRQHandler+0x29e>
 80022c4:	20000008 	.word	0x20000008
 80022c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0210 	bic.w	r2, r2, #16
 80022e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	2b00      	cmp	r3, #0
 8002310:	d032      	beq.n	8002378 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d022      	beq.n	8002364 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2205      	movs	r2, #5
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3301      	adds	r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	429a      	cmp	r2, r3
 8002340:	d307      	bcc.n	8002352 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f2      	bne.n	8002336 <HAL_DMA_IRQHandler+0x2ca>
 8002350:	e000      	b.n	8002354 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002352:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
 8002374:	e000      	b.n	8002378 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002376:	bf00      	nop
    }
  }
}
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop

08002380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800239c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b40      	cmp	r3, #64	; 0x40
 80023ac:	d108      	bne.n	80023c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023be:	e007      	b.n	80023d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3b10      	subs	r3, #16
 80023ec:	4a13      	ldr	r2, [pc, #76]	; (800243c <DMA_CalcBaseAndBitshift+0x60>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <DMA_CalcBaseAndBitshift+0x64>)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d908      	bls.n	800241c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <DMA_CalcBaseAndBitshift+0x68>)
 8002412:	4013      	ands	r3, r2
 8002414:	1d1a      	adds	r2, r3, #4
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	659a      	str	r2, [r3, #88]	; 0x58
 800241a:	e006      	b.n	800242a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <DMA_CalcBaseAndBitshift+0x68>)
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	aaaaaaab 	.word	0xaaaaaaab
 8002440:	08016ff8 	.word	0x08016ff8
 8002444:	fffffc00 	.word	0xfffffc00

08002448 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11f      	bne.n	80024a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d855      	bhi.n	8002514 <DMA_CheckFifoParam+0xcc>
 8002468:	a201      	add	r2, pc, #4	; (adr r2, 8002470 <DMA_CheckFifoParam+0x28>)
 800246a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246e:	bf00      	nop
 8002470:	08002481 	.word	0x08002481
 8002474:	08002493 	.word	0x08002493
 8002478:	08002481 	.word	0x08002481
 800247c:	08002515 	.word	0x08002515
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d045      	beq.n	8002518 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002490:	e042      	b.n	8002518 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800249a:	d13f      	bne.n	800251c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e03c      	b.n	800251c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024aa:	d121      	bne.n	80024f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d836      	bhi.n	8002520 <DMA_CheckFifoParam+0xd8>
 80024b2:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <DMA_CheckFifoParam+0x70>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024cf 	.word	0x080024cf
 80024c0:	080024c9 	.word	0x080024c9
 80024c4:	080024e1 	.word	0x080024e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      break;
 80024cc:	e02f      	b.n	800252e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d024      	beq.n	8002524 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024de:	e021      	b.n	8002524 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024e8:	d11e      	bne.n	8002528 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ee:	e01b      	b.n	8002528 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d902      	bls.n	80024fc <DMA_CheckFifoParam+0xb4>
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d003      	beq.n	8002502 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024fa:	e018      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e015      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00e      	beq.n	800252c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      break;
 8002512:	e00b      	b.n	800252c <DMA_CheckFifoParam+0xe4>
      break;
 8002514:	bf00      	nop
 8002516:	e00a      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      break;
 8002518:	bf00      	nop
 800251a:	e008      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      break;
 800251c:	bf00      	nop
 800251e:	e006      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      break;
 8002520:	bf00      	nop
 8002522:	e004      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      break;
 8002524:	bf00      	nop
 8002526:	e002      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      break;   
 8002528:	bf00      	nop
 800252a:	e000      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      break;
 800252c:	bf00      	nop
    }
  } 
  
  return status; 
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e175      	b.n	8002848 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8164 	bne.w	8002842 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x4e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b12      	cmp	r3, #18
 8002588:	d123      	bne.n	80025d2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	69b9      	ldr	r1, [r7, #24]
 80025ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	2203      	movs	r2, #3
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0203 	and.w	r2, r3, #3
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d00b      	beq.n	8002626 <HAL_GPIO_Init+0xea>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d007      	beq.n	8002626 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800261a:	2b11      	cmp	r3, #17
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b12      	cmp	r3, #18
 8002624:	d130      	bne.n	8002688 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80be 	beq.w	8002842 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_GPIO_Init+0x320>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a64      	ldr	r2, [pc, #400]	; (800285c <HAL_GPIO_Init+0x320>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_GPIO_Init+0x320>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026de:	4a60      	ldr	r2, [pc, #384]	; (8002860 <HAL_GPIO_Init+0x324>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_GPIO_Init+0x328>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d037      	beq.n	800277a <HAL_GPIO_Init+0x23e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_GPIO_Init+0x32c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d031      	beq.n	8002776 <HAL_GPIO_Init+0x23a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a55      	ldr	r2, [pc, #340]	; (800286c <HAL_GPIO_Init+0x330>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <HAL_GPIO_Init+0x236>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x334>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x232>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a53      	ldr	r2, [pc, #332]	; (8002874 <HAL_GPIO_Init+0x338>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x22e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x33c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x22a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_GPIO_Init+0x340>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x226>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_GPIO_Init+0x344>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x222>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x348>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x21e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4e      	ldr	r2, [pc, #312]	; (8002888 <HAL_GPIO_Init+0x34c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x21a>
 8002752:	2309      	movs	r3, #9
 8002754:	e012      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002756:	230a      	movs	r3, #10
 8002758:	e010      	b.n	800277c <HAL_GPIO_Init+0x240>
 800275a:	2308      	movs	r3, #8
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x240>
 800275e:	2307      	movs	r3, #7
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x240>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x240>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x240>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800278c:	4934      	ldr	r1, [pc, #208]	; (8002860 <HAL_GPIO_Init+0x324>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_GPIO_Init+0x350>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_GPIO_Init+0x350>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_GPIO_Init+0x350>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_GPIO_Init+0x350>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_GPIO_Init+0x350>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_GPIO_Init+0x350>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_GPIO_Init+0x350>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_GPIO_Init+0x350>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae86 	bls.w	800255c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	3724      	adds	r7, #36	; 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40022000 	.word	0x40022000
 8002888:	40022400 	.word	0x40022400
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f006 f9ac 	bl	8008c40 <HAL_GPIO_EXTI_Callback>
  }
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40013c00 	.word	0x40013c00

080028f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07f      	b.n	8002a06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f005 ffcc 	bl	80088b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	; 0x24
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002944:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002954:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	e006      	b.n	800297c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800297a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d104      	bne.n	800298e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800298c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_I2C_Init+0x11c>)
 800299a:	430b      	orrs	r3, r1
 800299c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	ea42 0103 	orr.w	r1, r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	021a      	lsls	r2, r3, #8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69d9      	ldr	r1, [r3, #28]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1a      	ldr	r2, [r3, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	02008000 	.word	0x02008000

08002a14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	460b      	mov	r3, r1
 8002a22:	817b      	strh	r3, [r7, #10]
 8002a24:	4613      	mov	r3, r2
 8002a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	f040 80da 	bne.w	8002bea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2C_Master_Transmit+0x30>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0d3      	b.n	8002bec <HAL_I2C_Master_Transmit+0x1d8>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fc5e 	bl	800130c <HAL_GetTick>
 8002a50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2319      	movs	r3, #25
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f9e6 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0be      	b.n	8002bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2221      	movs	r2, #33	; 0x21
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2210      	movs	r2, #16
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	893a      	ldrh	r2, [r7, #8]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2bff      	cmp	r3, #255	; 0xff
 8002a9e:	d90e      	bls.n	8002abe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	22ff      	movs	r2, #255	; 0xff
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	8979      	ldrh	r1, [r7, #10]
 8002aae:	4b51      	ldr	r3, [pc, #324]	; (8002bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fb48 	bl	800314c <I2C_TransferConfig>
 8002abc:	e06c      	b.n	8002b98 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	8979      	ldrh	r1, [r7, #10]
 8002ad0:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fb37 	bl	800314c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002ade:	e05b      	b.n	8002b98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	6a39      	ldr	r1, [r7, #32]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f9e3 	bl	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e07b      	b.n	8002bec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d034      	beq.n	8002b98 <HAL_I2C_Master_Transmit+0x184>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d130      	bne.n	8002b98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2180      	movs	r1, #128	; 0x80
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f975 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e04d      	b.n	8002bec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2bff      	cmp	r3, #255	; 0xff
 8002b58:	d90e      	bls.n	8002b78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	22ff      	movs	r2, #255	; 0xff
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	8979      	ldrh	r1, [r7, #10]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 faeb 	bl	800314c <I2C_TransferConfig>
 8002b76:	e00f      	b.n	8002b98 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	8979      	ldrh	r1, [r7, #10]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fada 	bl	800314c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d19e      	bne.n	8002ae0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f9c2 	bl	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e01a      	b.n	8002bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002bca:	400b      	ands	r3, r1
 8002bcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
  }
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	80002000 	.word	0x80002000
 8002bf8:	fe00e800 	.word	0xfe00e800

08002bfc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	817b      	strh	r3, [r7, #10]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 80db 	bne.w	8002dd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_I2C_Master_Receive+0x30>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e0d4      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x1da>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fb6a 	bl	800130c <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2319      	movs	r3, #25
 8002c40:	2201      	movs	r2, #1
 8002c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f8f2 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0bf      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2222      	movs	r2, #34	; 0x22
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2210      	movs	r2, #16
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2bff      	cmp	r3, #255	; 0xff
 8002c86:	d90e      	bls.n	8002ca6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	22ff      	movs	r2, #255	; 0xff
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	8979      	ldrh	r1, [r7, #10]
 8002c96:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <HAL_I2C_Master_Receive+0x1e4>)
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa54 	bl	800314c <I2C_TransferConfig>
 8002ca4:	e06d      	b.n	8002d82 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <HAL_I2C_Master_Receive+0x1e4>)
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fa43 	bl	800314c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002cc6:	e05c      	b.n	8002d82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	6a39      	ldr	r1, [r7, #32]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f96b 	bl	8002fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e07c      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d034      	beq.n	8002d82 <HAL_I2C_Master_Receive+0x186>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d130      	bne.n	8002d82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2200      	movs	r2, #0
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f880 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e04d      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2bff      	cmp	r3, #255	; 0xff
 8002d42:	d90e      	bls.n	8002d62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	22ff      	movs	r2, #255	; 0xff
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	8979      	ldrh	r1, [r7, #10]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f9f6 	bl	800314c <I2C_TransferConfig>
 8002d60:	e00f      	b.n	8002d82 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	8979      	ldrh	r1, [r7, #10]
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f9e5 	bl	800314c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d19d      	bne.n	8002cc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	6a39      	ldr	r1, [r7, #32]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f8cd 	bl	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e01a      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2220      	movs	r2, #32
 8002da6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_I2C_Master_Receive+0x1e8>)
 8002db4:	400b      	ands	r3, r1
 8002db6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	80002400 	.word	0x80002400
 8002de4:	fe00e800 	.word	0xfe00e800

08002de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d103      	bne.n	8002e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d007      	beq.n	8002e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	619a      	str	r2, [r3, #24]
  }
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e40:	e022      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d01e      	beq.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7fe fa5f 	bl	800130c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d113      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00f      	b.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d0cd      	beq.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ebc:	e02c      	b.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f8dc 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e02a      	b.n	8002f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d01e      	beq.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fe fa17 	bl	800130c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d113      	bne.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e007      	b.n	8002f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d1cb      	bne.n	8002ebe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f3c:	e028      	b.n	8002f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f89c 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e026      	b.n	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7fe f9db 	bl	800130c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d113      	bne.n	8002f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e007      	b.n	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d1cf      	bne.n	8002f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fb4:	e055      	b.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f860 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e053      	b.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d129      	bne.n	800302c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d105      	bne.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e03f      	b.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003006:	400b      	ands	r3, r1
 8003008:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e022      	b.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7fe f96e 	bl	800130c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10f      	bne.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d1a2      	bne.n	8002fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	fe00e800 	.word	0xfe00e800

08003080 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b10      	cmp	r3, #16
 8003098:	d151      	bne.n	800313e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309a:	e022      	b.n	80030e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d01e      	beq.n	80030e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fe f932 	bl	800130c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_IsAcknowledgeFailed+0x3a>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d113      	bne.n	80030e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e02e      	b.n	8003140 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d1d5      	bne.n	800309c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2210      	movs	r2, #16
 80030f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2220      	movs	r2, #32
 80030fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff fe71 	bl	8002de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <I2C_IsAcknowledgeFailed+0xc8>)
 8003112:	400b      	ands	r3, r1
 8003114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0204 	orr.w	r2, r3, #4
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	fe00e800 	.word	0xfe00e800

0800314c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	817b      	strh	r3, [r7, #10]
 800315a:	4613      	mov	r3, r2
 800315c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	0d5b      	lsrs	r3, r3, #21
 8003168:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800316c:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <I2C_TransferConfig+0x58>)
 800316e:	430b      	orrs	r3, r1
 8003170:	43db      	mvns	r3, r3
 8003172:	ea02 0103 	and.w	r1, r2, r3
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800317c:	7a7b      	ldrb	r3, [r7, #9]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	03ff63ff 	.word	0x03ff63ff

080031a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d138      	bne.n	8003230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e032      	b.n	8003232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b20      	cmp	r3, #32
 8003252:	d139      	bne.n	80032c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800325e:	2302      	movs	r3, #2
 8003260:	e033      	b.n	80032ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2224      	movs	r2, #36	; 0x24
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e000      	b.n	80032ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
  }
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_PWREx_EnableOverDrive+0x98>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_PWREx_EnableOverDrive+0x98>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003306:	f7fe f801 	bl	800130c <HAL_GetTick>
 800330a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800330c:	e009      	b.n	8003322 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800330e:	f7fd fffd 	bl	800130c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331c:	d901      	bls.n	8003322 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e022      	b.n	8003368 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d1ee      	bne.n	800330e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800333c:	f7fd ffe6 	bl	800130c <HAL_GetTick>
 8003340:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003342:	e009      	b.n	8003358 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003344:	f7fd ffe2 	bl	800130c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003352:	d901      	bls.n	8003358 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e007      	b.n	8003368 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_PWREx_EnableOverDrive+0x9c>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003364:	d1ee      	bne.n	8003344 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	40007000 	.word	0x40007000

08003378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003380:	2300      	movs	r3, #0
 8003382:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e25e      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8087 	beq.w	80034aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800339c:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d00c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a8:	4b93      	ldr	r3, [pc, #588]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d112      	bne.n	80033da <HAL_RCC_OscConfig+0x62>
 80033b4:	4b90      	ldr	r3, [pc, #576]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c0:	d10b      	bne.n	80033da <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c2:	4b8d      	ldr	r3, [pc, #564]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d06c      	beq.n	80034a8 <HAL_RCC_OscConfig+0x130>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d168      	bne.n	80034a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e238      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x7a>
 80033e4:	4b84      	ldr	r3, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a83      	ldr	r2, [pc, #524]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e02e      	b.n	8003450 <HAL_RCC_OscConfig+0xd8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x9c>
 80033fa:	4b7f      	ldr	r3, [pc, #508]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7e      	ldr	r2, [pc, #504]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b7c      	ldr	r3, [pc, #496]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7b      	ldr	r2, [pc, #492]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800340c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e01d      	b.n	8003450 <HAL_RCC_OscConfig+0xd8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0xc0>
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a75      	ldr	r2, [pc, #468]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b73      	ldr	r3, [pc, #460]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a72      	ldr	r2, [pc, #456]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0xd8>
 8003438:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a6e      	ldr	r2, [pc, #440]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800343e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6b      	ldr	r2, [pc, #428]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800344a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd ff58 	bl	800130c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7fd ff54 	bl	800130c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1ec      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0xe8>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fd ff44 	bl	800130c <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003488:	f7fd ff40 	bl	800130c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1d8      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x110>
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d069      	beq.n	800358a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034b6:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b4d      	ldr	r3, [pc, #308]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d11c      	bne.n	8003508 <HAL_RCC_OscConfig+0x190>
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d116      	bne.n	8003508 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_RCC_OscConfig+0x17a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1ac      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	493d      	ldr	r1, [pc, #244]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	e040      	b.n	800358a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d023      	beq.n	8003558 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003510:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a38      	ldr	r2, [pc, #224]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd fef6 	bl	800130c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003524:	f7fd fef2 	bl	800130c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e18a      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003536:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003542:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4929      	ldr	r1, [pc, #164]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
 8003556:	e018      	b.n	800358a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fd fed2 	bl	800130c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356c:	f7fd fece 	bl	800130c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e166      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d038      	beq.n	8003608 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d019      	beq.n	80035d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035aa:	f7fd feaf 	bl	800130c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b2:	f7fd feab 	bl	800130c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e143      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80035c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x23a>
 80035d0:	e01a      	b.n	8003608 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80035d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_RCC_OscConfig+0x280>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fd fe95 	bl	800130c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fd fe91 	bl	800130c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d903      	bls.n	80035fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e129      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
 80035f8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	4b95      	ldr	r3, [pc, #596]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80035fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ee      	bne.n	80035e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80a4 	beq.w	800375e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003616:	4b8f      	ldr	r3, [pc, #572]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	4b8c      	ldr	r3, [pc, #560]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a8b      	ldr	r2, [pc, #556]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b89      	ldr	r3, [pc, #548]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363e:	4b86      	ldr	r3, [pc, #536]	; (8003858 <HAL_RCC_OscConfig+0x4e0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800364a:	4b83      	ldr	r3, [pc, #524]	; (8003858 <HAL_RCC_OscConfig+0x4e0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a82      	ldr	r2, [pc, #520]	; (8003858 <HAL_RCC_OscConfig+0x4e0>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fd fe59 	bl	800130c <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fd fe55 	bl	800130c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b64      	cmp	r3, #100	; 0x64
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0ed      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003670:	4b79      	ldr	r3, [pc, #484]	; (8003858 <HAL_RCC_OscConfig+0x4e0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x31a>
 8003684:	4b73      	ldr	r3, [pc, #460]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a72      	ldr	r2, [pc, #456]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e02d      	b.n	80036ee <HAL_RCC_OscConfig+0x376>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x33c>
 800369a:	4b6e      	ldr	r3, [pc, #440]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a6d      	ldr	r2, [pc, #436]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b6b      	ldr	r3, [pc, #428]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a6a      	ldr	r2, [pc, #424]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	e01c      	b.n	80036ee <HAL_RCC_OscConfig+0x376>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b05      	cmp	r3, #5
 80036ba:	d10c      	bne.n	80036d6 <HAL_RCC_OscConfig+0x35e>
 80036bc:	4b65      	ldr	r3, [pc, #404]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	4a64      	ldr	r2, [pc, #400]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036c2:	f043 0304 	orr.w	r3, r3, #4
 80036c6:	6713      	str	r3, [r2, #112]	; 0x70
 80036c8:	4b62      	ldr	r3, [pc, #392]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a61      	ldr	r2, [pc, #388]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	e00b      	b.n	80036ee <HAL_RCC_OscConfig+0x376>
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d015      	beq.n	8003722 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fd fe09 	bl	800130c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fd fe05 	bl	800130c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e09b      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003714:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ee      	beq.n	80036fe <HAL_RCC_OscConfig+0x386>
 8003720:	e014      	b.n	800374c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fd fdf3 	bl	800130c <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd fdef 	bl	800130c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e085      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003740:	4b44      	ldr	r3, [pc, #272]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ee      	bne.n	800372a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d105      	bne.n	800375e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003752:	4b40      	ldr	r3, [pc, #256]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d071      	beq.n	800384a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b08      	cmp	r3, #8
 8003770:	d069      	beq.n	8003846 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d14b      	bne.n	8003812 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377a:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a35      	ldr	r2, [pc, #212]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fdc1 	bl	800130c <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fd fdbd 	bl	800130c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e055      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	019b      	lsls	r3, r3, #6
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	3b01      	subs	r3, #1
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	071b      	lsls	r3, r3, #28
 80037d8:	491e      	ldr	r1, [pc, #120]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1c      	ldr	r2, [pc, #112]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 80037e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd fd8f 	bl	800130c <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fd fd8b 	bl	800130c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e023      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x47a>
 8003810:	e01b      	b.n	800384a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a0f      	ldr	r2, [pc, #60]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 8003818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd fd75 	bl	800130c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003826:	f7fd fd71 	bl	800130c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e009      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCC_OscConfig+0x4dc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x4ae>
 8003844:	e001      	b.n	800384a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000

0800385c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0ce      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b69      	ldr	r3, [pc, #420]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 020f 	bic.w	r2, r3, #15
 800388a:	4964      	ldr	r1, [pc, #400]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b62      	ldr	r3, [pc, #392]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b6      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a57      	ldr	r2, [pc, #348]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b52      	ldr	r3, [pc, #328]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a51      	ldr	r2, [pc, #324]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494c      	ldr	r1, [pc, #304]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07d      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b40      	ldr	r3, [pc, #256]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e071      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3c      	ldr	r3, [pc, #240]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e069      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4935      	ldr	r1, [pc, #212]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fd fcdc 	bl	800130c <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fd fcd8 	bl	800130c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e051      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	4921      	ldr	r1, [pc, #132]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e030      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4915      	ldr	r1, [pc, #84]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490d      	ldr	r1, [pc, #52]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f81d 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	fa21 f303 	lsr.w	r3, r1, r3
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <HAL_RCC_ClockConfig+0x1cc>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f005 fcd2 	bl	80093b4 <HAL_InitTick>

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00
 8003a20:	40023800 	.word	0x40023800
 8003a24:	08017000 	.word	0x08017000
 8003a28:	20000008 	.word	0x20000008

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a42:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d007      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x32>
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d008      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x38>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 808d 	bne.w	8003b72 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a5a:	60bb      	str	r3, [r7, #8]
       break;
 8003a5c:	e08c      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a60:	60bb      	str	r3, [r7, #8]
      break;
 8003a62:	e089      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a64:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a6c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a6e:	4b45      	ldr	r3, [pc, #276]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d023      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7a:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	f04f 0400 	mov.w	r4, #0
 8003a84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	ea03 0501 	and.w	r5, r3, r1
 8003a90:	ea04 0602 	and.w	r6, r4, r2
 8003a94:	4a3d      	ldr	r2, [pc, #244]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a96:	fb02 f106 	mul.w	r1, r2, r6
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	fb02 f205 	mul.w	r2, r2, r5
 8003aa0:	440a      	add	r2, r1
 8003aa2:	493a      	ldr	r1, [pc, #232]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003aa4:	fba5 0101 	umull	r0, r1, r5, r1
 8003aa8:	1853      	adds	r3, r2, r1
 8003aaa:	4619      	mov	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	f7fc fc1b 	bl	80002f0 <__aeabi_uldivmod>
 8003aba:	4603      	mov	r3, r0
 8003abc:	460c      	mov	r4, r1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e049      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac2:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	ea03 0501 	and.w	r5, r3, r1
 8003ad8:	ea04 0602 	and.w	r6, r4, r2
 8003adc:	4629      	mov	r1, r5
 8003ade:	4632      	mov	r2, r6
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	f04f 0400 	mov.w	r4, #0
 8003ae8:	0154      	lsls	r4, r2, #5
 8003aea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003aee:	014b      	lsls	r3, r1, #5
 8003af0:	4619      	mov	r1, r3
 8003af2:	4622      	mov	r2, r4
 8003af4:	1b49      	subs	r1, r1, r5
 8003af6:	eb62 0206 	sbc.w	r2, r2, r6
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	f04f 0400 	mov.w	r4, #0
 8003b02:	0194      	lsls	r4, r2, #6
 8003b04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b08:	018b      	lsls	r3, r1, #6
 8003b0a:	1a5b      	subs	r3, r3, r1
 8003b0c:	eb64 0402 	sbc.w	r4, r4, r2
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	00e2      	lsls	r2, r4, #3
 8003b1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b1e:	00d9      	lsls	r1, r3, #3
 8003b20:	460b      	mov	r3, r1
 8003b22:	4614      	mov	r4, r2
 8003b24:	195b      	adds	r3, r3, r5
 8003b26:	eb44 0406 	adc.w	r4, r4, r6
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	02a2      	lsls	r2, r4, #10
 8003b34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b38:	0299      	lsls	r1, r3, #10
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	4621      	mov	r1, r4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f04f 0400 	mov.w	r4, #0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	f7fc fbd0 	bl	80002f0 <__aeabi_uldivmod>
 8003b50:	4603      	mov	r3, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	3301      	adds	r3, #1
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	60bb      	str	r3, [r7, #8]
      break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b74:	60bb      	str	r3, [r7, #8]
      break;
 8003b76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b78:	68bb      	ldr	r3, [r7, #8]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800
 8003b88:	00f42400 	.word	0x00f42400
 8003b8c:	017d7840 	.word	0x017d7840

08003b90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000008 	.word	0x20000008

08003ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bac:	f7ff fff0 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4601      	mov	r1, r0
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0a9b      	lsrs	r3, r3, #10
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4a03      	ldr	r2, [pc, #12]	; (8003bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	08017010 	.word	0x08017010

08003bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bd4:	f7ff ffdc 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4601      	mov	r1, r0
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	0b5b      	lsrs	r3, r3, #13
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	08017010 	.word	0x08017010

08003bf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	220f      	movs	r2, #15
 8003c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_RCC_GetClockConfig+0x5c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0203 	and.w	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <HAL_RCC_GetClockConfig+0x5c>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <HAL_RCC_GetClockConfig+0x5c>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCC_GetClockConfig+0x5c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	08db      	lsrs	r3, r3, #3
 8003c32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCC_GetClockConfig+0x60>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 020f 	and.w	r2, r3, #15
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	601a      	str	r2, [r3, #0]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40023c00 	.word	0x40023c00

08003c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d012      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c84:	4b69      	ldr	r3, [pc, #420]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a68      	ldr	r2, [pc, #416]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c8e:	6093      	str	r3, [r2, #8]
 8003c90:	4b66      	ldr	r3, [pc, #408]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	4964      	ldr	r1, [pc, #400]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d017      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	4959      	ldr	r1, [pc, #356]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd4:	d101      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d017      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cf2:	4b4e      	ldr	r3, [pc, #312]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	494a      	ldr	r1, [pc, #296]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d10:	d101      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 808b 	beq.w	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	4b3a      	ldr	r3, [pc, #232]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4c:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d58:	4b35      	ldr	r3, [pc, #212]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a34      	ldr	r2, [pc, #208]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d64:	f7fd fad2 	bl	800130c <HAL_GetTick>
 8003d68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fd face 	bl	800130c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e38d      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d7e:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d035      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d02e      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da8:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003db2:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dca:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d114      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fa96 	bl	800130c <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de2:	e00a      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fd fa92 	bl	800130c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e34f      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ee      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e12:	d111      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e22:	400b      	ands	r3, r1
 8003e24:	4901      	ldr	r1, [pc, #4]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40007000 	.word	0x40007000
 8003e34:	0ffffcff 	.word	0x0ffffcff
 8003e38:	4bb3      	ldr	r3, [pc, #716]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4ab2      	ldr	r2, [pc, #712]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	4bb0      	ldr	r3, [pc, #704]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e50:	49ad      	ldr	r1, [pc, #692]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e62:	4ba9      	ldr	r3, [pc, #676]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	4aa7      	ldr	r2, [pc, #668]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e72:	4ba5      	ldr	r3, [pc, #660]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	49a2      	ldr	r1, [pc, #648]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e90:	4b9d      	ldr	r3, [pc, #628]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e9e:	499a      	ldr	r1, [pc, #616]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eb2:	4b95      	ldr	r3, [pc, #596]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec0:	4991      	ldr	r1, [pc, #580]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ed4:	4b8c      	ldr	r3, [pc, #560]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee2:	4989      	ldr	r1, [pc, #548]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ef6:	4b84      	ldr	r3, [pc, #528]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4980      	ldr	r1, [pc, #512]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f18:	4b7b      	ldr	r3, [pc, #492]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f023 0203 	bic.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	4978      	ldr	r1, [pc, #480]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f3a:	4b73      	ldr	r3, [pc, #460]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f023 020c 	bic.w	r2, r3, #12
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f48:	496f      	ldr	r1, [pc, #444]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	4967      	ldr	r1, [pc, #412]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f7e:	4b62      	ldr	r3, [pc, #392]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	495e      	ldr	r1, [pc, #376]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fa0:	4b59      	ldr	r3, [pc, #356]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	4956      	ldr	r1, [pc, #344]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fc2:	4b51      	ldr	r3, [pc, #324]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	494d      	ldr	r1, [pc, #308]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fe4:	4b48      	ldr	r3, [pc, #288]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	4945      	ldr	r1, [pc, #276]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004006:	4b40      	ldr	r3, [pc, #256]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004014:	493c      	ldr	r1, [pc, #240]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004028:	4b37      	ldr	r3, [pc, #220]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004036:	4934      	ldr	r1, [pc, #208]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004058:	492b      	ldr	r1, [pc, #172]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004068:	d101      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800406a:	2301      	movs	r3, #1
 800406c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800408a:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004098:	491b      	ldr	r1, [pc, #108]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ac:	4b16      	ldr	r3, [pc, #88]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040bc:	4912      	ldr	r1, [pc, #72]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e0:	4909      	ldr	r1, [pc, #36]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	e002      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	4985      	ldr	r1, [pc, #532]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004120:	4b80      	ldr	r3, [pc, #512]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004126:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004130:	497c      	ldr	r1, [pc, #496]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d005      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004146:	f040 80d6 	bne.w	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800414a:	4b76      	ldr	r3, [pc, #472]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a75      	ldr	r2, [pc, #468]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004150:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004156:	f7fd f8d9 	bl	800130c <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800415e:	f7fd f8d5 	bl	800130c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b64      	cmp	r3, #100	; 0x64
 800416a:	d901      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e194      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004170:	4b6c      	ldr	r3, [pc, #432]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d021      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11d      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004190:	4b64      	ldr	r3, [pc, #400]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800419e:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	0e1b      	lsrs	r3, r3, #24
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	019a      	lsls	r2, r3, #6
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	061b      	lsls	r3, r3, #24
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	071b      	lsls	r3, r3, #28
 80041c4:	4957      	ldr	r1, [pc, #348]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d02e      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f6:	d129      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041f8:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fe:	0c1b      	lsrs	r3, r3, #16
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004206:	4b47      	ldr	r3, [pc, #284]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	0f1b      	lsrs	r3, r3, #28
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	019a      	lsls	r2, r3, #6
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	431a      	orrs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	071b      	lsls	r3, r3, #28
 800422c:	493d      	ldr	r1, [pc, #244]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004234:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423a:	f023 021f 	bic.w	r2, r3, #31
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	3b01      	subs	r3, #1
 8004244:	4937      	ldr	r1, [pc, #220]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01d      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	0e1b      	lsrs	r3, r3, #24
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004266:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426c:	0f1b      	lsrs	r3, r3, #28
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	019a      	lsls	r2, r3, #6
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	431a      	orrs	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	071b      	lsls	r3, r3, #28
 800428c:	4925      	ldr	r1, [pc, #148]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	019a      	lsls	r2, r3, #6
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	071b      	lsls	r3, r3, #28
 80042bc:	4919      	ldr	r1, [pc, #100]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042c4:	4b17      	ldr	r3, [pc, #92]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fd f81c 	bl	800130c <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042d8:	f7fd f818 	bl	800130c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0d7      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f040 80cd 	bne.w	8004498 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042fe:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a08      	ldr	r2, [pc, #32]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430a:	f7fc ffff 	bl	800130c <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004310:	e00a      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004312:	f7fc fffb 	bl	800130c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b64      	cmp	r3, #100	; 0x64
 800431e:	d903      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0ba      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004324:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004328:	4b5e      	ldr	r3, [pc, #376]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004334:	d0ed      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02e      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d12a      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800435e:	4b51      	ldr	r3, [pc, #324]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800436c:	4b4d      	ldr	r3, [pc, #308]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	0f1b      	lsrs	r3, r3, #28
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	019a      	lsls	r2, r3, #6
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	431a      	orrs	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	4944      	ldr	r1, [pc, #272]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800439a:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800439c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	493d      	ldr	r1, [pc, #244]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d022      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c8:	d11d      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ca:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	0e1b      	lsrs	r3, r3, #24
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043d8:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	0f1b      	lsrs	r3, r3, #28
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	019a      	lsls	r2, r3, #6
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	431a      	orrs	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	061b      	lsls	r3, r3, #24
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	071b      	lsls	r3, r3, #28
 80043fe:	4929      	ldr	r1, [pc, #164]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d028      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004412:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	0e1b      	lsrs	r3, r3, #24
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004420:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	0c1b      	lsrs	r3, r3, #16
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	019a      	lsls	r2, r3, #6
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	041b      	lsls	r3, r3, #16
 8004438:	431a      	orrs	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	061b      	lsls	r3, r3, #24
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	071b      	lsls	r3, r3, #28
 8004446:	4917      	ldr	r1, [pc, #92]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	4911      	ldr	r1, [pc, #68]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0e      	ldr	r2, [pc, #56]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800446a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004470:	f7fc ff4c 	bl	800130c <HAL_GetTick>
 8004474:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004478:	f7fc ff48 	bl	800130c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e007      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004496:	d1ef      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800

080044a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e084      	b.n	80045c4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f004 fcdd 	bl	8008e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044fa:	d902      	bls.n	8004502 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e002      	b.n	8004508 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004510:	d007      	beq.n	8004522 <HAL_SPI_Init+0x7a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800451a:	d002      	beq.n	8004522 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004532:	d903      	bls.n	800453c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
 800453a:	e002      	b.n	8004542 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	ea42 0103 	orr.w	r1, r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	f003 0204 	and.w	r2, r3, #4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	ea42 0103 	orr.w	r1, r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_SPI_TransmitReceive_DMA+0x20>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e16c      	b.n	80048c6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045fa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004602:	7dbb      	ldrb	r3, [r7, #22]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d00d      	beq.n	8004624 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460e:	d106      	bne.n	800461e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004618:	7dbb      	ldrb	r3, [r7, #22]
 800461a:	2b04      	cmp	r3, #4
 800461c:	d002      	beq.n	8004624 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800461e:	2302      	movs	r3, #2
 8004620:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004622:	e14b      	b.n	80048bc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
    goto error;
 800463a:	e13f      	b.n	80048bc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b04      	cmp	r3, #4
 8004646:	d003      	beq.n	8004650 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2205      	movs	r2, #5
 800464c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	887a      	ldrh	r2, [r7, #2]
 8004672:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	887a      	ldrh	r2, [r7, #2]
 800467a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004698:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046a2:	d908      	bls.n	80046b6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	e06f      	b.n	8004796 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046c4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d0:	d126      	bne.n	8004720 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10f      	bne.n	80046fe <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046ec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046fc:	e010      	b.n	8004720 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800470c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	b29b      	uxth	r3, r3
 8004718:	3301      	adds	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472a:	d134      	bne.n	8004796 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800473a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004742:	b29b      	uxth	r3, r3
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d111      	bne.n	8004770 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800475a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004762:	b29b      	uxth	r3, r3
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800476e:	e012      	b.n	8004796 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004786:	b29b      	uxth	r3, r3
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	b29b      	uxth	r3, r3
 800478c:	3301      	adds	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d108      	bne.n	80047b4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	4a4a      	ldr	r2, [pc, #296]	; (80048d0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	4a49      	ldr	r2, [pc, #292]	; (80048d4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80047b2:	e007      	b.n	80047c4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	4a47      	ldr	r2, [pc, #284]	; (80048d8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	4a46      	ldr	r2, [pc, #280]	; (80048dc <HAL_SPI_TransmitReceive_DMA+0x310>)
 80047c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	4a45      	ldr	r2, [pc, #276]	; (80048e0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80047ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	2200      	movs	r2, #0
 80047d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	4619      	mov	r1, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	461a      	mov	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f7fd fb4b 	bl	8001e88 <HAL_DMA_Start_IT>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	f043 0210 	orr.w	r2, r3, #16
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004810:	e054      	b.n	80048bc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	2200      	movs	r2, #0
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	2200      	movs	r2, #0
 8004830:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	2200      	movs	r2, #0
 8004838:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	2200      	movs	r2, #0
 8004840:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	4619      	mov	r1, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	461a      	mov	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004858:	b29b      	uxth	r3, r3
 800485a:	f7fd fb15 	bl	8001e88 <HAL_DMA_Start_IT>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00c      	beq.n	800487e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	f043 0210 	orr.w	r2, r3, #16
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800487c:	e01e      	b.n	80048bc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d007      	beq.n	800489c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0220 	orr.w	r2, r2, #32
 80048aa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0202 	orr.w	r2, r2, #2
 80048ba:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	08004c4d 	.word	0x08004c4d
 80048d4:	08004b35 	.word	0x08004b35
 80048d8:	08004c69 	.word	0x08004c69
 80048dc:	08004bbb 	.word	0x08004bbb
 80048e0:	08004c85 	.word	0x08004c85

080048e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
    return;
 8004926:	e0d8      	b.n	8004ada <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_SPI_IRQHandler+0x66>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	09db      	lsrs	r3, r3, #7
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
    return;
 8004948:	e0c7      	b.n	8004ada <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10c      	bne.n	8004970 <HAL_SPI_IRQHandler+0x8c>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_SPI_IRQHandler+0x8c>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80b5 	beq.w	8004ada <HAL_SPI_IRQHandler+0x1f6>
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80ae 	beq.w	8004ada <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d023      	beq.n	80049d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b03      	cmp	r3, #3
 8004994:	d011      	beq.n	80049ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	f043 0204 	orr.w	r2, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	e00b      	b.n	80049d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	693b      	ldr	r3, [r7, #16]
        return;
 80049d0:	e083      	b.n	8004ada <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d014      	beq.n	8004a08 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e2:	f043 0201 	orr.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00c      	beq.n	8004a2e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	f043 0208 	orr.w	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a20:	2300      	movs	r3, #0
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d050      	beq.n	8004ad8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a44:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <HAL_SPI_IRQHandler+0x17e>
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d034      	beq.n	8004acc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0203 	bic.w	r2, r2, #3
 8004a70:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d011      	beq.n	8004a9e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <HAL_SPI_IRQHandler+0x1fc>)
 8004a80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd face 	bl	8002028 <HAL_DMA_Abort_IT>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d016      	beq.n	8004ad4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <HAL_SPI_IRQHandler+0x1fc>)
 8004aac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd fab8 	bl	8002028 <HAL_DMA_Abort_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004aca:	e003      	b.n	8004ad4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f827 	bl	8004b20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ad2:	e000      	b.n	8004ad6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ad4:	bf00      	nop
    return;
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
  }
}
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	08004cc5 	.word	0x08004cc5

08004ae4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b42:	f7fc fbe3 	bl	800130c <HAL_GetTick>
 8004b46:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b56:	d02a      	beq.n	8004bae <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0220 	bic.w	r2, r2, #32
 8004b66:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0203 	bic.w	r2, r2, #3
 8004b76:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	2164      	movs	r1, #100	; 0x64
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f98d 	bl	8004e9c <SPI_EndRxTransaction>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff ffba 	bl	8004b20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bac:	e002      	b.n	8004bb4 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff ff98 	bl	8004ae4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc8:	f7fc fba0 	bl	800130c <HAL_GetTick>
 8004bcc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bdc:	d030      	beq.n	8004c40 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0220 	bic.w	r2, r2, #32
 8004bec:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	2164      	movs	r1, #100	; 0x64
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f9aa 	bl	8004f4c <SPI_EndRxTxTransaction>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0203 	bic.w	r2, r2, #3
 8004c18:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff ff71 	bl	8004b20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c3e:	e002      	b.n	8004c46 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f003 ffef 	bl	8008c24 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f7ff ff4c 	bl	8004af8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff ff48 	bl	8004b0c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0203 	bic.w	r2, r2, #3
 8004ca0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca6:	f043 0210 	orr.w	r2, r3, #16
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f7ff ff32 	bl	8004b20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff ff1d 	bl	8004b20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cfe:	e04c      	b.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d048      	beq.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d08:	f7fc fb00 	bl	800130c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d902      	bls.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d13d      	bne.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d111      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d40:	d004      	beq.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d107      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d10f      	bne.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e00f      	b.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d1a3      	bne.n	8004d00 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dd0:	e057      	b.n	8004e82 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004dd8:	d106      	bne.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d048      	beq.n	8004e82 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004df0:	f7fc fa8c 	bl	800130c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d902      	bls.n	8004e06 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d13d      	bne.n	8004e82 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1e:	d111      	bne.n	8004e44 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e28:	d004      	beq.n	8004e34 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e32:	d107      	bne.n	8004e44 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4c:	d10f      	bne.n	8004e6e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e008      	b.n	8004e94 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d19f      	bne.n	8004dd2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb0:	d111      	bne.n	8004ed6 <SPI_EndRxTransaction+0x3a>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eba:	d004      	beq.n	8004ec6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec4:	d107      	bne.n	8004ed6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7ff ff04 	bl	8004cee <SPI_WaitFlagStateUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e023      	b.n	8004f44 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f04:	d11d      	bne.n	8004f42 <SPI_EndRxTransaction+0xa6>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0e:	d004      	beq.n	8004f1a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f18:	d113      	bne.n	8004f42 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff ff4b 	bl	8004dc2 <SPI_WaitFifoStateUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d007      	beq.n	8004f42 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e000      	b.n	8004f44 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff ff2c 	bl	8004dc2 <SPI_WaitFifoStateUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e027      	b.n	8004fd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff feaf 	bl	8004cee <SPI_WaitFlagStateUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e014      	b.n	8004fd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff ff05 	bl	8004dc2 <SPI_WaitFifoStateUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e000      	b.n	8004fd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e01d      	b.n	8005026 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f005 f8e4 	bl	800a1cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fbbe 	bl	8005798 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <HAL_TIM_Base_Start_IT+0x50>)
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b06      	cmp	r3, #6
 8005058:	d00b      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x42>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d007      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	00010007 	.word	0x00010007

08005084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e01d      	b.n	80050d2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f005 f96e 	bl	800a38c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 fb68 	bl	8005798 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 feea 	bl	8005ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a17      	ldr	r2, [pc, #92]	; (8005158 <HAL_TIM_PWM_Start+0x7c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_TIM_PWM_Start+0x2c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a16      	ldr	r2, [pc, #88]	; (800515c <HAL_TIM_PWM_Start+0x80>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_TIM_PWM_Start+0x30>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_TIM_PWM_Start+0x32>
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <HAL_TIM_PWM_Start+0x84>)
 800512a:	4013      	ands	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b06      	cmp	r3, #6
 8005132:	d00b      	beq.n	800514c <HAL_TIM_PWM_Start+0x70>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513a:	d007      	beq.n	800514c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40010400 	.word	0x40010400
 8005160:	00010007 	.word	0x00010007

08005164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0202 	mvn.w	r2, #2
 8005190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fad8 	bl	800575c <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 faca 	bl	8005748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fadb 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0204 	mvn.w	r2, #4
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 faae 	bl	800575c <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 faa0 	bl	8005748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fab1 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b08      	cmp	r3, #8
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0208 	mvn.w	r2, #8
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2204      	movs	r2, #4
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa84 	bl	800575c <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa76 	bl	8005748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fa87 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b10      	cmp	r3, #16
 8005274:	d122      	bne.n	80052bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b10      	cmp	r3, #16
 8005282:	d11b      	bne.n	80052bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0210 	mvn.w	r2, #16
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2208      	movs	r2, #8
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa5a 	bl	800575c <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa4c 	bl	8005748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fa5d 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10e      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0201 	mvn.w	r2, #1
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f003 fcc4 	bl	8008c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d10e      	bne.n	8005314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b80      	cmp	r3, #128	; 0x80
 8005302:	d107      	bne.n	8005314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fee4 	bl	80060dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	d10e      	bne.n	8005342 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532e:	2b80      	cmp	r3, #128	; 0x80
 8005330:	d107      	bne.n	8005342 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800533a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fed7 	bl	80060f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d10e      	bne.n	800536e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d107      	bne.n	800536e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fa0b 	bl	8005784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b20      	cmp	r3, #32
 800537a:	d10e      	bne.n	800539a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b20      	cmp	r3, #32
 8005388:	d107      	bne.n	800539a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f06f 0220 	mvn.w	r2, #32
 8005392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fe97 	bl	80060c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e105      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x226>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b14      	cmp	r3, #20
 80053d2:	f200 80f0 	bhi.w	80055b6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005431 	.word	0x08005431
 80053e0:	080055b7 	.word	0x080055b7
 80053e4:	080055b7 	.word	0x080055b7
 80053e8:	080055b7 	.word	0x080055b7
 80053ec:	08005471 	.word	0x08005471
 80053f0:	080055b7 	.word	0x080055b7
 80053f4:	080055b7 	.word	0x080055b7
 80053f8:	080055b7 	.word	0x080055b7
 80053fc:	080054b3 	.word	0x080054b3
 8005400:	080055b7 	.word	0x080055b7
 8005404:	080055b7 	.word	0x080055b7
 8005408:	080055b7 	.word	0x080055b7
 800540c:	080054f3 	.word	0x080054f3
 8005410:	080055b7 	.word	0x080055b7
 8005414:	080055b7 	.word	0x080055b7
 8005418:	080055b7 	.word	0x080055b7
 800541c:	08005535 	.word	0x08005535
 8005420:	080055b7 	.word	0x080055b7
 8005424:	080055b7 	.word	0x080055b7
 8005428:	080055b7 	.word	0x080055b7
 800542c:	08005575 	.word	0x08005575
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fa4e 	bl	80058d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0208 	orr.w	r2, r2, #8
 800544a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0204 	bic.w	r2, r2, #4
 800545a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6999      	ldr	r1, [r3, #24]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	619a      	str	r2, [r3, #24]
      break;
 800546e:	e0a3      	b.n	80055b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 faa0 	bl	80059bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6999      	ldr	r1, [r3, #24]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	021a      	lsls	r2, r3, #8
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	619a      	str	r2, [r3, #24]
      break;
 80054b0:	e082      	b.n	80055b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 faf7 	bl	8005aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0208 	orr.w	r2, r2, #8
 80054cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0204 	bic.w	r2, r2, #4
 80054dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69d9      	ldr	r1, [r3, #28]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	61da      	str	r2, [r3, #28]
      break;
 80054f0:	e062      	b.n	80055b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fb4d 	bl	8005b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69d9      	ldr	r1, [r3, #28]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	021a      	lsls	r2, r3, #8
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	61da      	str	r2, [r3, #28]
      break;
 8005532:	e041      	b.n	80055b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fb84 	bl	8005c48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0208 	orr.w	r2, r2, #8
 800554e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0204 	bic.w	r2, r2, #4
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005572:	e021      	b.n	80055b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fbb6 	bl	8005cec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800558e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	021a      	lsls	r2, r3, #8
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055b4:	e000      	b.n	80055b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80055b6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop

080055d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_ConfigClockSource+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0a6      	b.n	800573a <HAL_TIM_ConfigClockSource+0x166>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4b4f      	ldr	r3, [pc, #316]	; (8005744 <HAL_TIM_ConfigClockSource+0x170>)
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005612:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	d067      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x120>
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d80b      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x6c>
 8005628:	2b10      	cmp	r3, #16
 800562a:	d073      	beq.n	8005714 <HAL_TIM_ConfigClockSource+0x140>
 800562c:	2b10      	cmp	r3, #16
 800562e:	d802      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x62>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d06f      	beq.n	8005714 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005634:	e078      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005636:	2b20      	cmp	r3, #32
 8005638:	d06c      	beq.n	8005714 <HAL_TIM_ConfigClockSource+0x140>
 800563a:	2b30      	cmp	r3, #48	; 0x30
 800563c:	d06a      	beq.n	8005714 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800563e:	e073      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005640:	2b70      	cmp	r3, #112	; 0x70
 8005642:	d00d      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0x8c>
 8005644:	2b70      	cmp	r3, #112	; 0x70
 8005646:	d804      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x7e>
 8005648:	2b50      	cmp	r3, #80	; 0x50
 800564a:	d033      	beq.n	80056b4 <HAL_TIM_ConfigClockSource+0xe0>
 800564c:	2b60      	cmp	r3, #96	; 0x60
 800564e:	d041      	beq.n	80056d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005650:	e06a      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005656:	d066      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x152>
 8005658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565c:	d017      	beq.n	800568e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800565e:	e063      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6899      	ldr	r1, [r3, #8]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f000 fc0a 	bl	8005e88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005682:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	609a      	str	r2, [r3, #8]
      break;
 800568c:	e04c      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6899      	ldr	r1, [r3, #8]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f000 fbf3 	bl	8005e88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b0:	609a      	str	r2, [r3, #8]
      break;
 80056b2:	e039      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	461a      	mov	r2, r3
 80056c2:	f000 fb67 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2150      	movs	r1, #80	; 0x50
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fbc0 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 80056d2:	e029      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	461a      	mov	r2, r3
 80056e2:	f000 fb86 	bl	8005df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2160      	movs	r1, #96	; 0x60
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fbb0 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 80056f2:	e019      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	461a      	mov	r2, r3
 8005702:	f000 fb47 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2140      	movs	r1, #64	; 0x40
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fba0 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005712:	e009      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f000 fb97 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005724:	e000      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	fffeff88 	.word	0xfffeff88

08005748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a40      	ldr	r2, [pc, #256]	; (80058ac <TIM_Base_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3d      	ldr	r2, [pc, #244]	; (80058b0 <TIM_Base_SetConfig+0x118>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a3c      	ldr	r2, [pc, #240]	; (80058b4 <TIM_Base_SetConfig+0x11c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3b      	ldr	r2, [pc, #236]	; (80058b8 <TIM_Base_SetConfig+0x120>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3a      	ldr	r2, [pc, #232]	; (80058bc <TIM_Base_SetConfig+0x124>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2f      	ldr	r2, [pc, #188]	; (80058ac <TIM_Base_SetConfig+0x114>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d02b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f8:	d027      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2c      	ldr	r2, [pc, #176]	; (80058b0 <TIM_Base_SetConfig+0x118>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d023      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2b      	ldr	r2, [pc, #172]	; (80058b4 <TIM_Base_SetConfig+0x11c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01f      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <TIM_Base_SetConfig+0x120>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a29      	ldr	r2, [pc, #164]	; (80058bc <TIM_Base_SetConfig+0x124>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d017      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a28      	ldr	r2, [pc, #160]	; (80058c0 <TIM_Base_SetConfig+0x128>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <TIM_Base_SetConfig+0x12c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00f      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a26      	ldr	r2, [pc, #152]	; (80058c8 <TIM_Base_SetConfig+0x130>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a25      	ldr	r2, [pc, #148]	; (80058cc <TIM_Base_SetConfig+0x134>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <TIM_Base_SetConfig+0x138>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <TIM_Base_SetConfig+0x13c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d108      	bne.n	800585c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <TIM_Base_SetConfig+0x114>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <TIM_Base_SetConfig+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	615a      	str	r2, [r3, #20]
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800
 80058cc:	40001800 	.word	0x40001800
 80058d0:	40001c00 	.word	0x40001c00
 80058d4:	40002000 	.word	0x40002000

080058d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4b2b      	ldr	r3, [pc, #172]	; (80059b0 <TIM_OC1_SetConfig+0xd8>)
 8005904:	4013      	ands	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 0302 	bic.w	r3, r3, #2
 8005920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <TIM_OC1_SetConfig+0xdc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC1_SetConfig+0x64>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <TIM_OC1_SetConfig+0xe0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d10c      	bne.n	8005956 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0308 	bic.w	r3, r3, #8
 8005942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f023 0304 	bic.w	r3, r3, #4
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <TIM_OC1_SetConfig+0xdc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC1_SetConfig+0x8e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <TIM_OC1_SetConfig+0xe0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d111      	bne.n	800598a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	fffeff8f 	.word	0xfffeff8f
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40010400 	.word	0x40010400

080059bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f023 0210 	bic.w	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4b2e      	ldr	r3, [pc, #184]	; (8005aa0 <TIM_OC2_SetConfig+0xe4>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 0320 	bic.w	r3, r3, #32
 8005a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <TIM_OC2_SetConfig+0xe8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC2_SetConfig+0x68>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <TIM_OC2_SetConfig+0xec>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d10d      	bne.n	8005a40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <TIM_OC2_SetConfig+0xe8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC2_SetConfig+0x94>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <TIM_OC2_SetConfig+0xec>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d113      	bne.n	8005a78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	feff8fff 	.word	0xfeff8fff
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40010400 	.word	0x40010400

08005aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4b2d      	ldr	r3, [pc, #180]	; (8005b8c <TIM_OC3_SetConfig+0xe0>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a22      	ldr	r2, [pc, #136]	; (8005b90 <TIM_OC3_SetConfig+0xe4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_OC3_SetConfig+0x66>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <TIM_OC3_SetConfig+0xe8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d10d      	bne.n	8005b2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <TIM_OC3_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_OC3_SetConfig+0x92>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <TIM_OC3_SetConfig+0xe8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d113      	bne.n	8005b66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	fffeff8f 	.word	0xfffeff8f
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40010400 	.word	0x40010400

08005b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4b1e      	ldr	r3, [pc, #120]	; (8005c3c <TIM_OC4_SetConfig+0xa4>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	031b      	lsls	r3, r3, #12
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <TIM_OC4_SetConfig+0xa8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC4_SetConfig+0x68>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a12      	ldr	r2, [pc, #72]	; (8005c44 <TIM_OC4_SetConfig+0xac>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d109      	bne.n	8005c14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	019b      	lsls	r3, r3, #6
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	feff8fff 	.word	0xfeff8fff
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400

08005c48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <TIM_OC5_SetConfig+0x98>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a12      	ldr	r2, [pc, #72]	; (8005ce4 <TIM_OC5_SetConfig+0x9c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC5_SetConfig+0x5e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a11      	ldr	r2, [pc, #68]	; (8005ce8 <TIM_OC5_SetConfig+0xa0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d109      	bne.n	8005cba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	621a      	str	r2, [r3, #32]
}
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	fffeff8f 	.word	0xfffeff8f
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40010400 	.word	0x40010400

08005cec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <TIM_OC6_SetConfig+0x9c>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	051b      	lsls	r3, r3, #20
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a13      	ldr	r2, [pc, #76]	; (8005d8c <TIM_OC6_SetConfig+0xa0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC6_SetConfig+0x60>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <TIM_OC6_SetConfig+0xa4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	feff8fff 	.word	0xfeff8fff
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40010400 	.word	0x40010400

08005d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 030a 	bic.w	r3, r3, #10
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f023 0210 	bic.w	r2, r3, #16
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	031b      	lsls	r3, r3, #12
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f043 0307 	orr.w	r3, r3, #7
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	021a      	lsls	r2, r3, #8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	609a      	str	r2, [r3, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2201      	movs	r2, #1
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	401a      	ands	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e045      	b.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1c      	ldr	r2, [pc, #112]	; (8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1b      	ldr	r2, [pc, #108]	; (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d108      	bne.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f8a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	40010000 	.word	0x40010000
 8005fc8:	40010400 	.word	0x40010400

08005fcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e065      	b.n	80060b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	041b      	lsls	r3, r3, #16
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a14      	ldr	r2, [pc, #80]	; (80060c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d115      	bne.n	80060a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40010000 	.word	0x40010000
 80060c4:	40010400 	.word	0x40010400

080060c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e040      	b.n	8006198 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f004 fbfe 	bl	800a928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2224      	movs	r2, #36	; 0x24
 8006130:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0201 	bic.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa66 	bl	8006614 <UART_SetConfig>
 8006148:	4603      	mov	r3, r0
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e022      	b.n	8006198 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fcfe 	bl	8006b5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800616e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800617e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fd85 	bl	8006ca0 <UART_CheckIdleState>
 8006196:	4603      	mov	r3, r0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d164      	bne.n	8006280 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_UART_Transmit_DMA+0x22>
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e05d      	b.n	8006282 <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_UART_Transmit_DMA+0x34>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e056      	b.n	8006282 <HAL_UART_Transmit_DMA+0xe2>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2221      	movs	r2, #33	; 0x21
 80061fc:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02a      	beq.n	800625c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800620a:	4a20      	ldr	r2, [pc, #128]	; (800628c <HAL_UART_Transmit_DMA+0xec>)
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006212:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <HAL_UART_Transmit_DMA+0xf0>)
 8006214:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800621a:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <HAL_UART_Transmit_DMA+0xf4>)
 800621c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006222:	2200      	movs	r2, #0
 8006224:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622e:	4619      	mov	r1, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3328      	adds	r3, #40	; 0x28
 8006236:	461a      	mov	r2, r3
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	f7fb fe25 	bl	8001e88 <HAL_DMA_Start_IT>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2210      	movs	r2, #16
 8006248:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e012      	b.n	8006282 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2240      	movs	r2, #64	; 0x40
 8006262:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800627a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	e000      	b.n	8006282 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006280:	2302      	movs	r3, #2
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	08006df9 	.word	0x08006df9
 8006290:	08006e49 	.word	0x08006e49
 8006294:	08006ee5 	.word	0x08006ee5

08006298 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d16c      	bne.n	8006388 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_UART_Receive_DMA+0x22>
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e065      	b.n	800638a <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Receive_DMA+0x34>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e05e      	b.n	800638a <HAL_UART_Receive_DMA+0xf2>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2222      	movs	r2, #34	; 0x22
 80062ec:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d02a      	beq.n	800634c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fa:	4a26      	ldr	r2, [pc, #152]	; (8006394 <HAL_UART_Receive_DMA+0xfc>)
 80062fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006302:	4a25      	ldr	r2, [pc, #148]	; (8006398 <HAL_UART_Receive_DMA+0x100>)
 8006304:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800630a:	4a24      	ldr	r2, [pc, #144]	; (800639c <HAL_UART_Receive_DMA+0x104>)
 800630c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006312:	2200      	movs	r2, #0
 8006314:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3324      	adds	r3, #36	; 0x24
 8006320:	4619      	mov	r1, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006326:	461a      	mov	r2, r3
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	f7fb fdad 	bl	8001e88 <HAL_DMA_Start_IT>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2210      	movs	r2, #16
 8006338:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e01e      	b.n	800638a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006362:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006382:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	08006e65 	.word	0x08006e65
 8006398:	08006ec9 	.word	0x08006ec9
 800639c:	08006ee5 	.word	0x08006ee5

080063a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d113      	bne.n	80063f6 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00e      	beq.n	80063f6 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80eb 	beq.w	80065c2 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
      }
      return;
 80063f4:	e0e5      	b.n	80065c2 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80c0 	beq.w	800657e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 80b5 	beq.w	800657e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00e      	beq.n	800643c <HAL_UART_IRQHandler+0x9c>
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d009      	beq.n	800643c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2201      	movs	r2, #1
 800642e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006434:	f043 0201 	orr.w	r2, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <HAL_UART_IRQHandler+0xc4>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2202      	movs	r2, #2
 8006456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645c:	f043 0204 	orr.w	r2, r3, #4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00e      	beq.n	800648c <HAL_UART_IRQHandler+0xec>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d009      	beq.n	800648c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2204      	movs	r2, #4
 800647e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006484:	f043 0202 	orr.w	r2, r3, #2
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d013      	beq.n	80064be <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2208      	movs	r2, #8
 80064b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b6:	f043 0208 	orr.w	r2, r3, #8
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d07f      	beq.n	80065c6 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00c      	beq.n	80064ea <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ee:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d004      	beq.n	8006508 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006504:	2b00      	cmp	r3, #0
 8006506:	d031      	beq.n	800656c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fc55 	bl	8006db8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d123      	bne.n	8006564 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d013      	beq.n	800655c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006538:	4a26      	ldr	r2, [pc, #152]	; (80065d4 <HAL_UART_IRQHandler+0x234>)
 800653a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006540:	4618      	mov	r0, r3
 8006542:	f7fb fd71 	bl	8002028 <HAL_DMA_Abort_IT>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d016      	beq.n	800657a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006556:	4610      	mov	r0, r2
 8006558:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655a:	e00e      	b.n	800657a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f84f 	bl	8006600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006562:	e00a      	b.n	800657a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f84b 	bl	8006600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656a:	e006      	b.n	800657a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f847 	bl	8006600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006578:	e025      	b.n	80065c6 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657a:	bf00      	nop
    return;
 800657c:	e023      	b.n	80065c6 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00d      	beq.n	80065a4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006596:	2b00      	cmp	r3, #0
 8006598:	d017      	beq.n	80065ca <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
    }
    return;
 80065a2:	e012      	b.n	80065ca <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00e      	beq.n	80065cc <HAL_UART_IRQHandler+0x22c>
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d009      	beq.n	80065cc <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fce5 	bl	8006f88 <UART_EndTransmit_IT>
    return;
 80065be:	bf00      	nop
 80065c0:	e004      	b.n	80065cc <HAL_UART_IRQHandler+0x22c>
      return;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <HAL_UART_IRQHandler+0x22c>
    return;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <HAL_UART_IRQHandler+0x22c>
    return;
 80065ca:	bf00      	nop
  }

}
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	08006f5d 	.word	0x08006f5d

080065d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800661c:	2300      	movs	r3, #0
 800661e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4bb1      	ldr	r3, [pc, #708]	; (8006908 <UART_SetConfig+0x2f4>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	6939      	ldr	r1, [r7, #16]
 800664c:	430b      	orrs	r3, r1
 800664e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a9f      	ldr	r2, [pc, #636]	; (800690c <UART_SetConfig+0x2f8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d121      	bne.n	80066d8 <UART_SetConfig+0xc4>
 8006694:	4b9e      	ldr	r3, [pc, #632]	; (8006910 <UART_SetConfig+0x2fc>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d816      	bhi.n	80066d0 <UART_SetConfig+0xbc>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <UART_SetConfig+0x94>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066bf 	.word	0x080066bf
 80066b4:	080066cb 	.word	0x080066cb
 80066b8:	2301      	movs	r3, #1
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e151      	b.n	8006962 <UART_SetConfig+0x34e>
 80066be:	2302      	movs	r3, #2
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e14e      	b.n	8006962 <UART_SetConfig+0x34e>
 80066c4:	2304      	movs	r3, #4
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e14b      	b.n	8006962 <UART_SetConfig+0x34e>
 80066ca:	2308      	movs	r3, #8
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e148      	b.n	8006962 <UART_SetConfig+0x34e>
 80066d0:	2310      	movs	r3, #16
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	bf00      	nop
 80066d6:	e144      	b.n	8006962 <UART_SetConfig+0x34e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a8d      	ldr	r2, [pc, #564]	; (8006914 <UART_SetConfig+0x300>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d134      	bne.n	800674c <UART_SetConfig+0x138>
 80066e2:	4b8b      	ldr	r3, [pc, #556]	; (8006910 <UART_SetConfig+0x2fc>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f003 030c 	and.w	r3, r3, #12
 80066ec:	2b0c      	cmp	r3, #12
 80066ee:	d829      	bhi.n	8006744 <UART_SetConfig+0x130>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0xe4>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800672d 	.word	0x0800672d
 80066fc:	08006745 	.word	0x08006745
 8006700:	08006745 	.word	0x08006745
 8006704:	08006745 	.word	0x08006745
 8006708:	08006739 	.word	0x08006739
 800670c:	08006745 	.word	0x08006745
 8006710:	08006745 	.word	0x08006745
 8006714:	08006745 	.word	0x08006745
 8006718:	08006733 	.word	0x08006733
 800671c:	08006745 	.word	0x08006745
 8006720:	08006745 	.word	0x08006745
 8006724:	08006745 	.word	0x08006745
 8006728:	0800673f 	.word	0x0800673f
 800672c:	2300      	movs	r3, #0
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e117      	b.n	8006962 <UART_SetConfig+0x34e>
 8006732:	2302      	movs	r3, #2
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e114      	b.n	8006962 <UART_SetConfig+0x34e>
 8006738:	2304      	movs	r3, #4
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e111      	b.n	8006962 <UART_SetConfig+0x34e>
 800673e:	2308      	movs	r3, #8
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e10e      	b.n	8006962 <UART_SetConfig+0x34e>
 8006744:	2310      	movs	r3, #16
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	bf00      	nop
 800674a:	e10a      	b.n	8006962 <UART_SetConfig+0x34e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a71      	ldr	r2, [pc, #452]	; (8006918 <UART_SetConfig+0x304>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d120      	bne.n	8006798 <UART_SetConfig+0x184>
 8006756:	4b6e      	ldr	r3, [pc, #440]	; (8006910 <UART_SetConfig+0x2fc>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006760:	2b10      	cmp	r3, #16
 8006762:	d00f      	beq.n	8006784 <UART_SetConfig+0x170>
 8006764:	2b10      	cmp	r3, #16
 8006766:	d802      	bhi.n	800676e <UART_SetConfig+0x15a>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <UART_SetConfig+0x164>
 800676c:	e010      	b.n	8006790 <UART_SetConfig+0x17c>
 800676e:	2b20      	cmp	r3, #32
 8006770:	d005      	beq.n	800677e <UART_SetConfig+0x16a>
 8006772:	2b30      	cmp	r3, #48	; 0x30
 8006774:	d009      	beq.n	800678a <UART_SetConfig+0x176>
 8006776:	e00b      	b.n	8006790 <UART_SetConfig+0x17c>
 8006778:	2300      	movs	r3, #0
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e0f1      	b.n	8006962 <UART_SetConfig+0x34e>
 800677e:	2302      	movs	r3, #2
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e0ee      	b.n	8006962 <UART_SetConfig+0x34e>
 8006784:	2304      	movs	r3, #4
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e0eb      	b.n	8006962 <UART_SetConfig+0x34e>
 800678a:	2308      	movs	r3, #8
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	e0e8      	b.n	8006962 <UART_SetConfig+0x34e>
 8006790:	2310      	movs	r3, #16
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	bf00      	nop
 8006796:	e0e4      	b.n	8006962 <UART_SetConfig+0x34e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a5f      	ldr	r2, [pc, #380]	; (800691c <UART_SetConfig+0x308>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d120      	bne.n	80067e4 <UART_SetConfig+0x1d0>
 80067a2:	4b5b      	ldr	r3, [pc, #364]	; (8006910 <UART_SetConfig+0x2fc>)
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d00f      	beq.n	80067d0 <UART_SetConfig+0x1bc>
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d802      	bhi.n	80067ba <UART_SetConfig+0x1a6>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <UART_SetConfig+0x1b0>
 80067b8:	e010      	b.n	80067dc <UART_SetConfig+0x1c8>
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	d005      	beq.n	80067ca <UART_SetConfig+0x1b6>
 80067be:	2bc0      	cmp	r3, #192	; 0xc0
 80067c0:	d009      	beq.n	80067d6 <UART_SetConfig+0x1c2>
 80067c2:	e00b      	b.n	80067dc <UART_SetConfig+0x1c8>
 80067c4:	2300      	movs	r3, #0
 80067c6:	77fb      	strb	r3, [r7, #31]
 80067c8:	e0cb      	b.n	8006962 <UART_SetConfig+0x34e>
 80067ca:	2302      	movs	r3, #2
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e0c8      	b.n	8006962 <UART_SetConfig+0x34e>
 80067d0:	2304      	movs	r3, #4
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e0c5      	b.n	8006962 <UART_SetConfig+0x34e>
 80067d6:	2308      	movs	r3, #8
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e0c2      	b.n	8006962 <UART_SetConfig+0x34e>
 80067dc:	2310      	movs	r3, #16
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	bf00      	nop
 80067e2:	e0be      	b.n	8006962 <UART_SetConfig+0x34e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a4d      	ldr	r2, [pc, #308]	; (8006920 <UART_SetConfig+0x30c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d124      	bne.n	8006838 <UART_SetConfig+0x224>
 80067ee:	4b48      	ldr	r3, [pc, #288]	; (8006910 <UART_SetConfig+0x2fc>)
 80067f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fc:	d012      	beq.n	8006824 <UART_SetConfig+0x210>
 80067fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006802:	d802      	bhi.n	800680a <UART_SetConfig+0x1f6>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <UART_SetConfig+0x204>
 8006808:	e012      	b.n	8006830 <UART_SetConfig+0x21c>
 800680a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680e:	d006      	beq.n	800681e <UART_SetConfig+0x20a>
 8006810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006814:	d009      	beq.n	800682a <UART_SetConfig+0x216>
 8006816:	e00b      	b.n	8006830 <UART_SetConfig+0x21c>
 8006818:	2300      	movs	r3, #0
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	e0a1      	b.n	8006962 <UART_SetConfig+0x34e>
 800681e:	2302      	movs	r3, #2
 8006820:	77fb      	strb	r3, [r7, #31]
 8006822:	e09e      	b.n	8006962 <UART_SetConfig+0x34e>
 8006824:	2304      	movs	r3, #4
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e09b      	b.n	8006962 <UART_SetConfig+0x34e>
 800682a:	2308      	movs	r3, #8
 800682c:	77fb      	strb	r3, [r7, #31]
 800682e:	e098      	b.n	8006962 <UART_SetConfig+0x34e>
 8006830:	2310      	movs	r3, #16
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	bf00      	nop
 8006836:	e094      	b.n	8006962 <UART_SetConfig+0x34e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a39      	ldr	r2, [pc, #228]	; (8006924 <UART_SetConfig+0x310>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d124      	bne.n	800688c <UART_SetConfig+0x278>
 8006842:	4b33      	ldr	r3, [pc, #204]	; (8006910 <UART_SetConfig+0x2fc>)
 8006844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006850:	d012      	beq.n	8006878 <UART_SetConfig+0x264>
 8006852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006856:	d802      	bhi.n	800685e <UART_SetConfig+0x24a>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <UART_SetConfig+0x258>
 800685c:	e012      	b.n	8006884 <UART_SetConfig+0x270>
 800685e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006862:	d006      	beq.n	8006872 <UART_SetConfig+0x25e>
 8006864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006868:	d009      	beq.n	800687e <UART_SetConfig+0x26a>
 800686a:	e00b      	b.n	8006884 <UART_SetConfig+0x270>
 800686c:	2301      	movs	r3, #1
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e077      	b.n	8006962 <UART_SetConfig+0x34e>
 8006872:	2302      	movs	r3, #2
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e074      	b.n	8006962 <UART_SetConfig+0x34e>
 8006878:	2304      	movs	r3, #4
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e071      	b.n	8006962 <UART_SetConfig+0x34e>
 800687e:	2308      	movs	r3, #8
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e06e      	b.n	8006962 <UART_SetConfig+0x34e>
 8006884:	2310      	movs	r3, #16
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	bf00      	nop
 800688a:	e06a      	b.n	8006962 <UART_SetConfig+0x34e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a25      	ldr	r2, [pc, #148]	; (8006928 <UART_SetConfig+0x314>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d124      	bne.n	80068e0 <UART_SetConfig+0x2cc>
 8006896:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <UART_SetConfig+0x2fc>)
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a4:	d012      	beq.n	80068cc <UART_SetConfig+0x2b8>
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	d802      	bhi.n	80068b2 <UART_SetConfig+0x29e>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d007      	beq.n	80068c0 <UART_SetConfig+0x2ac>
 80068b0:	e012      	b.n	80068d8 <UART_SetConfig+0x2c4>
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b6:	d006      	beq.n	80068c6 <UART_SetConfig+0x2b2>
 80068b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068bc:	d009      	beq.n	80068d2 <UART_SetConfig+0x2be>
 80068be:	e00b      	b.n	80068d8 <UART_SetConfig+0x2c4>
 80068c0:	2300      	movs	r3, #0
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e04d      	b.n	8006962 <UART_SetConfig+0x34e>
 80068c6:	2302      	movs	r3, #2
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e04a      	b.n	8006962 <UART_SetConfig+0x34e>
 80068cc:	2304      	movs	r3, #4
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e047      	b.n	8006962 <UART_SetConfig+0x34e>
 80068d2:	2308      	movs	r3, #8
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	e044      	b.n	8006962 <UART_SetConfig+0x34e>
 80068d8:	2310      	movs	r3, #16
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	bf00      	nop
 80068de:	e040      	b.n	8006962 <UART_SetConfig+0x34e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a11      	ldr	r2, [pc, #68]	; (800692c <UART_SetConfig+0x318>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d139      	bne.n	800695e <UART_SetConfig+0x34a>
 80068ea:	4b09      	ldr	r3, [pc, #36]	; (8006910 <UART_SetConfig+0x2fc>)
 80068ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068f8:	d027      	beq.n	800694a <UART_SetConfig+0x336>
 80068fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fe:	d817      	bhi.n	8006930 <UART_SetConfig+0x31c>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01c      	beq.n	800693e <UART_SetConfig+0x32a>
 8006904:	e027      	b.n	8006956 <UART_SetConfig+0x342>
 8006906:	bf00      	nop
 8006908:	efff69f3 	.word	0xefff69f3
 800690c:	40011000 	.word	0x40011000
 8006910:	40023800 	.word	0x40023800
 8006914:	40004400 	.word	0x40004400
 8006918:	40004800 	.word	0x40004800
 800691c:	40004c00 	.word	0x40004c00
 8006920:	40005000 	.word	0x40005000
 8006924:	40011400 	.word	0x40011400
 8006928:	40007800 	.word	0x40007800
 800692c:	40007c00 	.word	0x40007c00
 8006930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006934:	d006      	beq.n	8006944 <UART_SetConfig+0x330>
 8006936:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800693a:	d009      	beq.n	8006950 <UART_SetConfig+0x33c>
 800693c:	e00b      	b.n	8006956 <UART_SetConfig+0x342>
 800693e:	2300      	movs	r3, #0
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e00e      	b.n	8006962 <UART_SetConfig+0x34e>
 8006944:	2302      	movs	r3, #2
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e00b      	b.n	8006962 <UART_SetConfig+0x34e>
 800694a:	2304      	movs	r3, #4
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e008      	b.n	8006962 <UART_SetConfig+0x34e>
 8006950:	2308      	movs	r3, #8
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e005      	b.n	8006962 <UART_SetConfig+0x34e>
 8006956:	2310      	movs	r3, #16
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	bf00      	nop
 800695c:	e001      	b.n	8006962 <UART_SetConfig+0x34e>
 800695e:	2310      	movs	r3, #16
 8006960:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696a:	d17c      	bne.n	8006a66 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800696c:	7ffb      	ldrb	r3, [r7, #31]
 800696e:	2b08      	cmp	r3, #8
 8006970:	d859      	bhi.n	8006a26 <UART_SetConfig+0x412>
 8006972:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <UART_SetConfig+0x364>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	0800699d 	.word	0x0800699d
 800697c:	080069bb 	.word	0x080069bb
 8006980:	080069d9 	.word	0x080069d9
 8006984:	08006a27 	.word	0x08006a27
 8006988:	080069f1 	.word	0x080069f1
 800698c:	08006a27 	.word	0x08006a27
 8006990:	08006a27 	.word	0x08006a27
 8006994:	08006a27 	.word	0x08006a27
 8006998:	08006a0f 	.word	0x08006a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800699c:	f7fd f904 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 80069a0:	4603      	mov	r3, r0
 80069a2:	005a      	lsls	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	441a      	add	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	61bb      	str	r3, [r7, #24]
        break;
 80069b8:	e038      	b.n	8006a2c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80069ba:	f7fd f909 	bl	8003bd0 <HAL_RCC_GetPCLK2Freq>
 80069be:	4603      	mov	r3, r0
 80069c0:	005a      	lsls	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	441a      	add	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	61bb      	str	r3, [r7, #24]
        break;
 80069d6:	e029      	b.n	8006a2c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	085a      	lsrs	r2, r3, #1
 80069de:	4b5d      	ldr	r3, [pc, #372]	; (8006b54 <UART_SetConfig+0x540>)
 80069e0:	4413      	add	r3, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6852      	ldr	r2, [r2, #4]
 80069e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	61bb      	str	r3, [r7, #24]
        break;
 80069ee:	e01d      	b.n	8006a2c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069f0:	f7fd f81c 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80069f4:	4603      	mov	r3, r0
 80069f6:	005a      	lsls	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	441a      	add	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	61bb      	str	r3, [r7, #24]
        break;
 8006a0c:	e00e      	b.n	8006a2c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	61bb      	str	r3, [r7, #24]
        break;
 8006a24:	e002      	b.n	8006a2c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
        break;
 8006a2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b0f      	cmp	r3, #15
 8006a30:	d916      	bls.n	8006a60 <UART_SetConfig+0x44c>
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d212      	bcs.n	8006a60 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f023 030f 	bic.w	r3, r3, #15
 8006a42:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	89fa      	ldrh	r2, [r7, #14]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	e06e      	b.n	8006b3e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]
 8006a64:	e06b      	b.n	8006b3e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8006a66:	7ffb      	ldrb	r3, [r7, #31]
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d857      	bhi.n	8006b1c <UART_SetConfig+0x508>
 8006a6c:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <UART_SetConfig+0x460>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006a99 	.word	0x08006a99
 8006a78:	08006ab5 	.word	0x08006ab5
 8006a7c:	08006ad1 	.word	0x08006ad1
 8006a80:	08006b1d 	.word	0x08006b1d
 8006a84:	08006ae9 	.word	0x08006ae9
 8006a88:	08006b1d 	.word	0x08006b1d
 8006a8c:	08006b1d 	.word	0x08006b1d
 8006a90:	08006b1d 	.word	0x08006b1d
 8006a94:	08006b05 	.word	0x08006b05
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006a98:	f7fd f886 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	61bb      	str	r3, [r7, #24]
        break;
 8006ab2:	e036      	b.n	8006b22 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006ab4:	f7fd f88c 	bl	8003bd0 <HAL_RCC_GetPCLK2Freq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	441a      	add	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	61bb      	str	r3, [r7, #24]
        break;
 8006ace:	e028      	b.n	8006b22 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	085a      	lsrs	r2, r3, #1
 8006ad6:	4b20      	ldr	r3, [pc, #128]	; (8006b58 <UART_SetConfig+0x544>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6852      	ldr	r2, [r2, #4]
 8006ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	61bb      	str	r3, [r7, #24]
        break;
 8006ae6:	e01c      	b.n	8006b22 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006ae8:	f7fc ffa0 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	441a      	add	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	61bb      	str	r3, [r7, #24]
        break;
 8006b02:	e00e      	b.n	8006b22 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	61bb      	str	r3, [r7, #24]
        break;
 8006b1a:	e002      	b.n	8006b22 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
        break;
 8006b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b0f      	cmp	r3, #15
 8006b26:	d908      	bls.n	8006b3a <UART_SetConfig+0x526>
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2e:	d204      	bcs.n	8006b3a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	60da      	str	r2, [r3, #12]
 8006b38:	e001      	b.n	8006b3e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	01e84800 	.word	0x01e84800
 8006b58:	00f42400 	.word	0x00f42400

08006b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01a      	beq.n	8006c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5a:	d10a      	bne.n	8006c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	605a      	str	r2, [r3, #4]
  }
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006cae:	f7fa fb2d 	bl	800130c <HAL_GetTick>
 8006cb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d10e      	bne.n	8006ce0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f814 	bl	8006cfe <UART_WaitOnFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e00a      	b.n	8006cf6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	603b      	str	r3, [r7, #0]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0e:	e02a      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	d026      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d18:	f7fa faf8 	bl	800130c <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d302      	bcc.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d11b      	bne.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e00f      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	bf0c      	ite	eq
 8006d76:	2301      	moveq	r3, #1
 8006d78:	2300      	movne	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d0c5      	beq.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006da4:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0e:	d014      	beq.n	8006e3a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e26:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e36:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e38:	e002      	b.n	8006e40 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f007 f9d2 	bl	800e1e4 <HAL_UART_TxCpltCallback>
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff fbbe 	bl	80065d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7a:	d01e      	beq.n	8006eba <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e92:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0201 	bic.w	r2, r2, #1
 8006ea2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f007 f988 	bl	800e1d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff fb88 	bl	80065ec <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d109      	bne.n	8006f20 <UART_DMAError+0x3c>
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b21      	cmp	r3, #33	; 0x21
 8006f10:	d106      	bne.n	8006f20 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006f1a:	6978      	ldr	r0, [r7, #20]
 8006f1c:	f7ff ff37 	bl	8006d8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	d109      	bne.n	8006f42 <UART_DMAError+0x5e>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b22      	cmp	r3, #34	; 0x22
 8006f32:	d106      	bne.n	8006f42 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006f3c:	6978      	ldr	r0, [r7, #20]
 8006f3e:	f7ff ff3b 	bl	8006db8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f46:	f043 0210 	orr.w	r2, r3, #16
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff fb56 	bl	8006600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f54:	bf00      	nop
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff fb40 	bl	8006600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f007 f919 	bl	800e1e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006fc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fcc:	2b84      	cmp	r3, #132	; 0x84
 8006fce:	d005      	beq.n	8006fdc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006fd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3303      	adds	r3, #3
 8006fda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fee:	f000 faad 	bl	800754c <vTaskStartScheduler>
  
  return osOK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffa:	b089      	sub	sp, #36	; 0x24
 8006ffc:	af04      	add	r7, sp, #16
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685c      	ldr	r4, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681d      	ldr	r5, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691e      	ldr	r6, [r3, #16]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff ffd0 	bl	8006fba <makeFreeRtosPriority>
 800701a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007024:	9202      	str	r2, [sp, #8]
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	9100      	str	r1, [sp, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	4632      	mov	r2, r6
 800702e:	4629      	mov	r1, r5
 8007030:	4620      	mov	r0, r4
 8007032:	f000 f8c5 	bl	80071c0 <xTaskCreateStatic>
 8007036:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007038:	68fb      	ldr	r3, [r7, #12]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007042 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007046:	f000 fd6d 	bl	8007b24 <xTaskGetSchedulerState>
 800704a:	4603      	mov	r3, r0
 800704c:	2b01      	cmp	r3, #1
 800704e:	d001      	beq.n	8007054 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8007050:	f000 ff82 	bl	8007f58 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8007054:	bf00      	nop
 8007056:	bd80      	pop	{r7, pc}

08007058 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f103 0208 	add.w	r2, r3, #8
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f103 0208 	add.w	r2, r3, #8
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f103 0208 	add.w	r2, r3, #8
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d103      	bne.n	800711a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e00c      	b.n	8007134 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3308      	adds	r3, #8
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e002      	b.n	8007128 <vListInsert+0x2e>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	d2f6      	bcs.n	8007122 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	601a      	str	r2, [r3, #0]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6892      	ldr	r2, [r2, #8]
 8007182:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6852      	ldr	r2, [r2, #4]
 800718c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d103      	bne.n	80071a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	1e5a      	subs	r2, r3, #1
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08e      	sub	sp, #56	; 0x38
 80071c4:	af04      	add	r7, sp, #16
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	b672      	cpsid	i
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	b662      	cpsie	i
 80071e8:	623b      	str	r3, [r7, #32]
 80071ea:	e7fe      	b.n	80071ea <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <xTaskCreateStatic+0x4a>
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	b672      	cpsid	i
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	b662      	cpsie	i
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e7fe      	b.n	8007208 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800720a:	2354      	movs	r3, #84	; 0x54
 800720c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b54      	cmp	r3, #84	; 0x54
 8007212:	d00b      	beq.n	800722c <xTaskCreateStatic+0x6c>
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	b672      	cpsid	i
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	b662      	cpsie	i
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	e7fe      	b.n	800722a <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01a      	beq.n	8007268 <xTaskCreateStatic+0xa8>
 8007232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007234:	2b00      	cmp	r3, #0
 8007236:	d017      	beq.n	8007268 <xTaskCreateStatic+0xa8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007242:	2300      	movs	r3, #0
 8007244:	9303      	str	r3, [sp, #12]
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	9302      	str	r3, [sp, #8]
 800724a:	f107 0314 	add.w	r3, r7, #20
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	68b9      	ldr	r1, [r7, #8]
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f80b 	bl	8007276 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007262:	f000 f889 	bl	8007378 <prvAddNewTaskToReadyList>
 8007266:	e001      	b.n	800726c <xTaskCreateStatic+0xac>
		}
		else
		{
			xReturn = NULL;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800726c:	697b      	ldr	r3, [r7, #20]
	}
 800726e:	4618      	mov	r0, r3
 8007270:	3728      	adds	r7, #40	; 0x28
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b088      	sub	sp, #32
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800728e:	440b      	add	r3, r1
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f023 0307 	bic.w	r3, r3, #7
 800729c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <prvInitialiseNewTask+0x4a>
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	b672      	cpsid	i
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	b662      	cpsie	i
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	e7fe      	b.n	80072be <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072c0:	2300      	movs	r3, #0
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	e012      	b.n	80072ec <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	7819      	ldrb	r1, [r3, #0]
 80072ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	4413      	add	r3, r2
 80072d4:	3334      	adds	r3, #52	; 0x34
 80072d6:	460a      	mov	r2, r1
 80072d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d006      	beq.n	80072f4 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	3301      	adds	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b0f      	cmp	r3, #15
 80072f0:	d9e9      	bls.n	80072c6 <prvInitialiseNewTask+0x50>
 80072f2:	e000      	b.n	80072f6 <prvInitialiseNewTask+0x80>
		{
			break;
 80072f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007300:	2b06      	cmp	r3, #6
 8007302:	d901      	bls.n	8007308 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007304:	2306      	movs	r3, #6
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800730c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007312:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	2200      	movs	r2, #0
 8007318:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	3304      	adds	r3, #4
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff feba 	bl	8007098 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	3318      	adds	r3, #24
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff feb5 	bl	8007098 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	f1c3 0207 	rsb	r2, r3, #7
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	2200      	movs	r2, #0
 8007348:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	68f9      	ldr	r1, [r7, #12]
 8007356:	69b8      	ldr	r0, [r7, #24]
 8007358:	f000 fc68 	bl	8007c2c <pxPortInitialiseStack>
 800735c:	4602      	mov	r2, r0
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800736e:	bf00      	nop
 8007370:	3720      	adds	r7, #32
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007380:	f000 fd5a 	bl	8007e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007384:	4b2a      	ldr	r3, [pc, #168]	; (8007430 <prvAddNewTaskToReadyList+0xb8>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3301      	adds	r3, #1
 800738a:	4a29      	ldr	r2, [pc, #164]	; (8007430 <prvAddNewTaskToReadyList+0xb8>)
 800738c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800738e:	4b29      	ldr	r3, [pc, #164]	; (8007434 <prvAddNewTaskToReadyList+0xbc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007396:	4a27      	ldr	r2, [pc, #156]	; (8007434 <prvAddNewTaskToReadyList+0xbc>)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800739c:	4b24      	ldr	r3, [pc, #144]	; (8007430 <prvAddNewTaskToReadyList+0xb8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d110      	bne.n	80073c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073a4:	f000 fb22 	bl	80079ec <prvInitialiseTaskLists>
 80073a8:	e00d      	b.n	80073c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073aa:	4b23      	ldr	r3, [pc, #140]	; (8007438 <prvAddNewTaskToReadyList+0xc0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d109      	bne.n	80073c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073b2:	4b20      	ldr	r3, [pc, #128]	; (8007434 <prvAddNewTaskToReadyList+0xbc>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d802      	bhi.n	80073c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073c0:	4a1c      	ldr	r2, [pc, #112]	; (8007434 <prvAddNewTaskToReadyList+0xbc>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073c6:	4b1d      	ldr	r3, [pc, #116]	; (800743c <prvAddNewTaskToReadyList+0xc4>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	4a1b      	ldr	r2, [pc, #108]	; (800743c <prvAddNewTaskToReadyList+0xc4>)
 80073ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	2201      	movs	r2, #1
 80073d6:	409a      	lsls	r2, r3
 80073d8:	4b19      	ldr	r3, [pc, #100]	; (8007440 <prvAddNewTaskToReadyList+0xc8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4313      	orrs	r3, r2
 80073de:	4a18      	ldr	r2, [pc, #96]	; (8007440 <prvAddNewTaskToReadyList+0xc8>)
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a15      	ldr	r2, [pc, #84]	; (8007444 <prvAddNewTaskToReadyList+0xcc>)
 80073f0:	441a      	add	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7ff fe5a 	bl	80070b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073fe:	f000 fd4d 	bl	8007e9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <prvAddNewTaskToReadyList+0xc0>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00e      	beq.n	8007428 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <prvAddNewTaskToReadyList+0xbc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	429a      	cmp	r2, r3
 8007416:	d207      	bcs.n	8007428 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007418:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <prvAddNewTaskToReadyList+0xd0>)
 800741a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20000724 	.word	0x20000724
 8007434:	20000624 	.word	0x20000624
 8007438:	20000730 	.word	0x20000730
 800743c:	20000740 	.word	0x20000740
 8007440:	2000072c 	.word	0x2000072c
 8007444:	20000628 	.word	0x20000628
 8007448:	e000ed04 	.word	0xe000ed04

0800744c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007456:	2300      	movs	r3, #0
 8007458:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <vTaskDelayUntil+0x2c>
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	b672      	cpsid	i
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	b662      	cpsie	i
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	e7fe      	b.n	8007476 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <vTaskDelayUntil+0x4a>
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	b672      	cpsid	i
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	b662      	cpsie	i
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	e7fe      	b.n	8007494 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8007496:	4b2a      	ldr	r3, [pc, #168]	; (8007540 <vTaskDelayUntil+0xf4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <vTaskDelayUntil+0x6a>
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	b672      	cpsid	i
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	b662      	cpsie	i
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e7fe      	b.n	80074b4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80074b6:	f000 f8ab 	bl	8007610 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80074ba:	4b22      	ldr	r3, [pc, #136]	; (8007544 <vTaskDelayUntil+0xf8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	4413      	add	r3, r2
 80074c8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a3a      	ldr	r2, [r7, #32]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d20b      	bcs.n	80074ec <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d211      	bcs.n	8007502 <vTaskDelayUntil+0xb6>
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d90d      	bls.n	8007502 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80074e6:	2301      	movs	r3, #1
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
 80074ea:	e00a      	b.n	8007502 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d303      	bcc.n	80074fe <vTaskDelayUntil+0xb2>
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d901      	bls.n	8007502 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80074fe:	2301      	movs	r3, #1
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	2b00      	cmp	r3, #0
 800750c:	d006      	beq.n	800751c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fb22 	bl	8007b60 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800751c:	f000 f886 	bl	800762c <xTaskResumeAll>
 8007520:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d107      	bne.n	8007538 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007528:	4b07      	ldr	r3, [pc, #28]	; (8007548 <vTaskDelayUntil+0xfc>)
 800752a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007538:	bf00      	nop
 800753a:	3728      	adds	r7, #40	; 0x28
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	2000074c 	.word	0x2000074c
 8007544:	20000728 	.word	0x20000728
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	; 0x28
 8007550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800755a:	463a      	mov	r2, r7
 800755c:	1d39      	adds	r1, r7, #4
 800755e:	f107 0308 	add.w	r3, r7, #8
 8007562:	4618      	mov	r0, r3
 8007564:	f000 ff8e 	bl	8008484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	9202      	str	r2, [sp, #8]
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	2300      	movs	r3, #0
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	2300      	movs	r3, #0
 8007578:	460a      	mov	r2, r1
 800757a:	491f      	ldr	r1, [pc, #124]	; (80075f8 <vTaskStartScheduler+0xac>)
 800757c:	481f      	ldr	r0, [pc, #124]	; (80075fc <vTaskStartScheduler+0xb0>)
 800757e:	f7ff fe1f 	bl	80071c0 <xTaskCreateStatic>
 8007582:	4602      	mov	r2, r0
 8007584:	4b1e      	ldr	r3, [pc, #120]	; (8007600 <vTaskStartScheduler+0xb4>)
 8007586:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007588:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <vTaskStartScheduler+0xb4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007590:	2301      	movs	r3, #1
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	e001      	b.n	800759a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d117      	bne.n	80075d0 <vTaskStartScheduler+0x84>
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	b672      	cpsid	i
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	b662      	cpsie	i
 80075b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <vTaskStartScheduler+0xb8>)
 80075b8:	f04f 32ff 	mov.w	r2, #4294967295
 80075bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <vTaskStartScheduler+0xbc>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80075c4:	4b11      	ldr	r3, [pc, #68]	; (800760c <vTaskStartScheduler+0xc0>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075ca:	f000 fbb9 	bl	8007d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075ce:	e00f      	b.n	80075f0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d10b      	bne.n	80075f0 <vTaskStartScheduler+0xa4>
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	b672      	cpsid	i
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	b662      	cpsie	i
 80075ec:	60fb      	str	r3, [r7, #12]
 80075ee:	e7fe      	b.n	80075ee <vTaskStartScheduler+0xa2>
}
 80075f0:	bf00      	nop
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	08016620 	.word	0x08016620
 80075fc:	080079bd 	.word	0x080079bd
 8007600:	20000748 	.word	0x20000748
 8007604:	20000744 	.word	0x20000744
 8007608:	20000730 	.word	0x20000730
 800760c:	20000728 	.word	0x20000728

08007610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007614:	4b04      	ldr	r3, [pc, #16]	; (8007628 <vTaskSuspendAll+0x18>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3301      	adds	r3, #1
 800761a:	4a03      	ldr	r2, [pc, #12]	; (8007628 <vTaskSuspendAll+0x18>)
 800761c:	6013      	str	r3, [r2, #0]
}
 800761e:	bf00      	nop
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	2000074c 	.word	0x2000074c

0800762c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800763a:	4b42      	ldr	r3, [pc, #264]	; (8007744 <xTaskResumeAll+0x118>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <xTaskResumeAll+0x2e>
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	b672      	cpsid	i
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	b662      	cpsie	i
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	e7fe      	b.n	8007658 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800765a:	f000 fbed 	bl	8007e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800765e:	4b39      	ldr	r3, [pc, #228]	; (8007744 <xTaskResumeAll+0x118>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3b01      	subs	r3, #1
 8007664:	4a37      	ldr	r2, [pc, #220]	; (8007744 <xTaskResumeAll+0x118>)
 8007666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007668:	4b36      	ldr	r3, [pc, #216]	; (8007744 <xTaskResumeAll+0x118>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d161      	bne.n	8007734 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007670:	4b35      	ldr	r3, [pc, #212]	; (8007748 <xTaskResumeAll+0x11c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d05d      	beq.n	8007734 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007678:	e02e      	b.n	80076d8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800767a:	4b34      	ldr	r3, [pc, #208]	; (800774c <xTaskResumeAll+0x120>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3318      	adds	r3, #24
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fd70 	bl	800716c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3304      	adds	r3, #4
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fd6b 	bl	800716c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	2201      	movs	r2, #1
 800769c:	409a      	lsls	r2, r3
 800769e:	4b2c      	ldr	r3, [pc, #176]	; (8007750 <xTaskResumeAll+0x124>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	4a2a      	ldr	r2, [pc, #168]	; (8007750 <xTaskResumeAll+0x124>)
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	4613      	mov	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4a27      	ldr	r2, [pc, #156]	; (8007754 <xTaskResumeAll+0x128>)
 80076b6:	441a      	add	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f7ff fcf7 	bl	80070b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	4b23      	ldr	r3, [pc, #140]	; (8007758 <xTaskResumeAll+0x12c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d302      	bcc.n	80076d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076d2:	4b22      	ldr	r3, [pc, #136]	; (800775c <xTaskResumeAll+0x130>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076d8:	4b1c      	ldr	r3, [pc, #112]	; (800774c <xTaskResumeAll+0x120>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1cc      	bne.n	800767a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076e6:	f000 f9f7 	bl	8007ad8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076ea:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <xTaskResumeAll+0x134>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d010      	beq.n	8007718 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076f6:	f000 f847 	bl	8007788 <xTaskIncrementTick>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007700:	4b16      	ldr	r3, [pc, #88]	; (800775c <xTaskResumeAll+0x130>)
 8007702:	2201      	movs	r2, #1
 8007704:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3b01      	subs	r3, #1
 800770a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f1      	bne.n	80076f6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007712:	4b13      	ldr	r3, [pc, #76]	; (8007760 <xTaskResumeAll+0x134>)
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007718:	4b10      	ldr	r3, [pc, #64]	; (800775c <xTaskResumeAll+0x130>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007720:	2301      	movs	r3, #1
 8007722:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007724:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <xTaskResumeAll+0x138>)
 8007726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007734:	f000 fbb2 	bl	8007e9c <vPortExitCritical>

	return xAlreadyYielded;
 8007738:	68bb      	ldr	r3, [r7, #8]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	2000074c 	.word	0x2000074c
 8007748:	20000724 	.word	0x20000724
 800774c:	200006e4 	.word	0x200006e4
 8007750:	2000072c 	.word	0x2000072c
 8007754:	20000628 	.word	0x20000628
 8007758:	20000624 	.word	0x20000624
 800775c:	20000738 	.word	0x20000738
 8007760:	20000734 	.word	0x20000734
 8007764:	e000ed04 	.word	0xe000ed04

08007768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <xTaskGetTickCount+0x1c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007774:	687b      	ldr	r3, [r7, #4]
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000728 	.word	0x20000728

08007788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007792:	4b51      	ldr	r3, [pc, #324]	; (80078d8 <xTaskIncrementTick+0x150>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 808e 	bne.w	80078b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800779c:	4b4f      	ldr	r3, [pc, #316]	; (80078dc <xTaskIncrementTick+0x154>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3301      	adds	r3, #1
 80077a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077a4:	4a4d      	ldr	r2, [pc, #308]	; (80078dc <xTaskIncrementTick+0x154>)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d121      	bne.n	80077f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80077b0:	4b4b      	ldr	r3, [pc, #300]	; (80078e0 <xTaskIncrementTick+0x158>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <xTaskIncrementTick+0x4a>
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	b672      	cpsid	i
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	b662      	cpsie	i
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	e7fe      	b.n	80077d0 <xTaskIncrementTick+0x48>
 80077d2:	4b43      	ldr	r3, [pc, #268]	; (80078e0 <xTaskIncrementTick+0x158>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	4b42      	ldr	r3, [pc, #264]	; (80078e4 <xTaskIncrementTick+0x15c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a40      	ldr	r2, [pc, #256]	; (80078e0 <xTaskIncrementTick+0x158>)
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	4a40      	ldr	r2, [pc, #256]	; (80078e4 <xTaskIncrementTick+0x15c>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	4b40      	ldr	r3, [pc, #256]	; (80078e8 <xTaskIncrementTick+0x160>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	4a3e      	ldr	r2, [pc, #248]	; (80078e8 <xTaskIncrementTick+0x160>)
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	f000 f972 	bl	8007ad8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077f4:	4b3d      	ldr	r3, [pc, #244]	; (80078ec <xTaskIncrementTick+0x164>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d34d      	bcc.n	800789a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077fe:	4b38      	ldr	r3, [pc, #224]	; (80078e0 <xTaskIncrementTick+0x158>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <xTaskIncrementTick+0x84>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <xTaskIncrementTick+0x86>
 800780c:	2300      	movs	r3, #0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007812:	4b36      	ldr	r3, [pc, #216]	; (80078ec <xTaskIncrementTick+0x164>)
 8007814:	f04f 32ff 	mov.w	r2, #4294967295
 8007818:	601a      	str	r2, [r3, #0]
					break;
 800781a:	e03e      	b.n	800789a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800781c:	4b30      	ldr	r3, [pc, #192]	; (80078e0 <xTaskIncrementTick+0x158>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	d203      	bcs.n	800783c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007834:	4a2d      	ldr	r2, [pc, #180]	; (80078ec <xTaskIncrementTick+0x164>)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6013      	str	r3, [r2, #0]
						break;
 800783a:	e02e      	b.n	800789a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	3304      	adds	r3, #4
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff fc93 	bl	800716c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3318      	adds	r3, #24
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff fc8a 	bl	800716c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	2201      	movs	r2, #1
 800785e:	409a      	lsls	r2, r3
 8007860:	4b23      	ldr	r3, [pc, #140]	; (80078f0 <xTaskIncrementTick+0x168>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4313      	orrs	r3, r2
 8007866:	4a22      	ldr	r2, [pc, #136]	; (80078f0 <xTaskIncrementTick+0x168>)
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786e:	4613      	mov	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4a1f      	ldr	r2, [pc, #124]	; (80078f4 <xTaskIncrementTick+0x16c>)
 8007878:	441a      	add	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3304      	adds	r3, #4
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f7ff fc16 	bl	80070b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788a:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <xTaskIncrementTick+0x170>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	429a      	cmp	r2, r3
 8007892:	d3b4      	bcc.n	80077fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007898:	e7b1      	b.n	80077fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <xTaskIncrementTick+0x170>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4914      	ldr	r1, [pc, #80]	; (80078f4 <xTaskIncrementTick+0x16c>)
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	440b      	add	r3, r1
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d907      	bls.n	80078c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80078b2:	2301      	movs	r3, #1
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e004      	b.n	80078c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80078b8:	4b10      	ldr	r3, [pc, #64]	; (80078fc <xTaskIncrementTick+0x174>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3301      	adds	r3, #1
 80078be:	4a0f      	ldr	r2, [pc, #60]	; (80078fc <xTaskIncrementTick+0x174>)
 80078c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <xTaskIncrementTick+0x178>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80078ca:	2301      	movs	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80078ce:	697b      	ldr	r3, [r7, #20]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	2000074c 	.word	0x2000074c
 80078dc:	20000728 	.word	0x20000728
 80078e0:	200006dc 	.word	0x200006dc
 80078e4:	200006e0 	.word	0x200006e0
 80078e8:	2000073c 	.word	0x2000073c
 80078ec:	20000744 	.word	0x20000744
 80078f0:	2000072c 	.word	0x2000072c
 80078f4:	20000628 	.word	0x20000628
 80078f8:	20000624 	.word	0x20000624
 80078fc:	20000734 	.word	0x20000734
 8007900:	20000738 	.word	0x20000738

08007904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800790a:	4b27      	ldr	r3, [pc, #156]	; (80079a8 <vTaskSwitchContext+0xa4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007912:	4b26      	ldr	r3, [pc, #152]	; (80079ac <vTaskSwitchContext+0xa8>)
 8007914:	2201      	movs	r2, #1
 8007916:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007918:	e040      	b.n	800799c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800791a:	4b24      	ldr	r3, [pc, #144]	; (80079ac <vTaskSwitchContext+0xa8>)
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007920:	4b23      	ldr	r3, [pc, #140]	; (80079b0 <vTaskSwitchContext+0xac>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	fab3 f383 	clz	r3, r3
 800792c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	f1c3 031f 	rsb	r3, r3, #31
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	491f      	ldr	r1, [pc, #124]	; (80079b4 <vTaskSwitchContext+0xb0>)
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <vTaskSwitchContext+0x5e>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	b672      	cpsid	i
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	b662      	cpsie	i
 800795e:	607b      	str	r3, [r7, #4]
 8007960:	e7fe      	b.n	8007960 <vTaskSwitchContext+0x5c>
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4a11      	ldr	r2, [pc, #68]	; (80079b4 <vTaskSwitchContext+0xb0>)
 800796e:	4413      	add	r3, r2
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	605a      	str	r2, [r3, #4]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	3308      	adds	r3, #8
 8007984:	429a      	cmp	r2, r3
 8007986:	d104      	bne.n	8007992 <vTaskSwitchContext+0x8e>
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	605a      	str	r2, [r3, #4]
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <vTaskSwitchContext+0xb4>)
 800799a:	6013      	str	r3, [r2, #0]
}
 800799c:	bf00      	nop
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	2000074c 	.word	0x2000074c
 80079ac:	20000738 	.word	0x20000738
 80079b0:	2000072c 	.word	0x2000072c
 80079b4:	20000628 	.word	0x20000628
 80079b8:	20000624 	.word	0x20000624

080079bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079c4:	f000 f852 	bl	8007a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <prvIdleTask+0x28>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d9f9      	bls.n	80079c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <prvIdleTask+0x2c>)
 80079d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079e0:	e7f0      	b.n	80079c4 <prvIdleTask+0x8>
 80079e2:	bf00      	nop
 80079e4:	20000628 	.word	0x20000628
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079f2:	2300      	movs	r3, #0
 80079f4:	607b      	str	r3, [r7, #4]
 80079f6:	e00c      	b.n	8007a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <prvInitialiseTaskLists+0x60>)
 8007a04:	4413      	add	r3, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fb26 	bl	8007058 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	607b      	str	r3, [r7, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b06      	cmp	r3, #6
 8007a16:	d9ef      	bls.n	80079f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a18:	480d      	ldr	r0, [pc, #52]	; (8007a50 <prvInitialiseTaskLists+0x64>)
 8007a1a:	f7ff fb1d 	bl	8007058 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a1e:	480d      	ldr	r0, [pc, #52]	; (8007a54 <prvInitialiseTaskLists+0x68>)
 8007a20:	f7ff fb1a 	bl	8007058 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a24:	480c      	ldr	r0, [pc, #48]	; (8007a58 <prvInitialiseTaskLists+0x6c>)
 8007a26:	f7ff fb17 	bl	8007058 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a2a:	480c      	ldr	r0, [pc, #48]	; (8007a5c <prvInitialiseTaskLists+0x70>)
 8007a2c:	f7ff fb14 	bl	8007058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a30:	480b      	ldr	r0, [pc, #44]	; (8007a60 <prvInitialiseTaskLists+0x74>)
 8007a32:	f7ff fb11 	bl	8007058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <prvInitialiseTaskLists+0x78>)
 8007a38:	4a05      	ldr	r2, [pc, #20]	; (8007a50 <prvInitialiseTaskLists+0x64>)
 8007a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <prvInitialiseTaskLists+0x7c>)
 8007a3e:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <prvInitialiseTaskLists+0x68>)
 8007a40:	601a      	str	r2, [r3, #0]
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000628 	.word	0x20000628
 8007a50:	200006b4 	.word	0x200006b4
 8007a54:	200006c8 	.word	0x200006c8
 8007a58:	200006e4 	.word	0x200006e4
 8007a5c:	200006f8 	.word	0x200006f8
 8007a60:	20000710 	.word	0x20000710
 8007a64:	200006dc 	.word	0x200006dc
 8007a68:	200006e0 	.word	0x200006e0

08007a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a72:	e019      	b.n	8007aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a74:	f000 f9e0 	bl	8007e38 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007a78:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <prvCheckTasksWaitingTermination+0x4c>)
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff fb71 	bl	800716c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a8a:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <prvCheckTasksWaitingTermination+0x50>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	4a0a      	ldr	r2, [pc, #40]	; (8007abc <prvCheckTasksWaitingTermination+0x50>)
 8007a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a94:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <prvCheckTasksWaitingTermination+0x54>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <prvCheckTasksWaitingTermination+0x54>)
 8007a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a9e:	f000 f9fd 	bl	8007e9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f80e 	bl	8007ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aa8:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <prvCheckTasksWaitingTermination+0x54>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e1      	bne.n	8007a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200006f8 	.word	0x200006f8
 8007abc:	20000724 	.word	0x20000724
 8007ac0:	2000070c 	.word	0x2000070c

08007ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ade:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <prvResetNextTaskUnblockTime+0x44>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <prvResetNextTaskUnblockTime+0x14>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <prvResetNextTaskUnblockTime+0x16>
 8007aec:	2300      	movs	r3, #0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007af2:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <prvResetNextTaskUnblockTime+0x48>)
 8007af4:	f04f 32ff 	mov.w	r2, #4294967295
 8007af8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007afa:	e008      	b.n	8007b0e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007afc:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <prvResetNextTaskUnblockTime+0x44>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	4a05      	ldr	r2, [pc, #20]	; (8007b20 <prvResetNextTaskUnblockTime+0x48>)
 8007b0c:	6013      	str	r3, [r2, #0]
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	200006dc 	.word	0x200006dc
 8007b20:	20000744 	.word	0x20000744

08007b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <xTaskGetSchedulerState+0x34>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b32:	2301      	movs	r3, #1
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	e008      	b.n	8007b4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b38:	4b08      	ldr	r3, [pc, #32]	; (8007b5c <xTaskGetSchedulerState+0x38>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b40:	2302      	movs	r3, #2
 8007b42:	607b      	str	r3, [r7, #4]
 8007b44:	e001      	b.n	8007b4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b46:	2300      	movs	r3, #0
 8007b48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b4a:	687b      	ldr	r3, [r7, #4]
	}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20000730 	.word	0x20000730
 8007b5c:	2000074c 	.word	0x2000074c

08007b60 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b6a:	4b29      	ldr	r3, [pc, #164]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b70:	4b28      	ldr	r3, [pc, #160]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff faf8 	bl	800716c <uxListRemove>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10b      	bne.n	8007b9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007b82:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	2201      	movs	r2, #1
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	43da      	mvns	r2, r3
 8007b90:	4b21      	ldr	r3, [pc, #132]	; (8007c18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4013      	ands	r3, r2
 8007b96:	4a20      	ldr	r2, [pc, #128]	; (8007c18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d10a      	bne.n	8007bb8 <prvAddCurrentTaskToDelayedList+0x58>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ba8:	4b1a      	ldr	r3, [pc, #104]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	481a      	ldr	r0, [pc, #104]	; (8007c1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007bb2:	f7ff fa7e 	bl	80070b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bb6:	e026      	b.n	8007c06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bc0:	4b14      	ldr	r3, [pc, #80]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d209      	bcs.n	8007be4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bd0:	4b13      	ldr	r3, [pc, #76]	; (8007c20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f7ff fa8c 	bl	80070fa <vListInsert>
}
 8007be2:	e010      	b.n	8007c06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be4:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3304      	adds	r3, #4
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	f7ff fa82 	bl	80070fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d202      	bcs.n	8007c06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c00:	4a09      	ldr	r2, [pc, #36]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	6013      	str	r3, [r2, #0]
}
 8007c06:	bf00      	nop
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000728 	.word	0x20000728
 8007c14:	20000624 	.word	0x20000624
 8007c18:	2000072c 	.word	0x2000072c
 8007c1c:	20000710 	.word	0x20000710
 8007c20:	200006e0 	.word	0x200006e0
 8007c24:	200006dc 	.word	0x200006dc
 8007c28:	20000744 	.word	0x20000744

08007c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3b04      	subs	r3, #4
 8007c3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3b04      	subs	r3, #4
 8007c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f023 0201 	bic.w	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3b04      	subs	r3, #4
 8007c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c5c:	4a0c      	ldr	r2, [pc, #48]	; (8007c90 <pxPortInitialiseStack+0x64>)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3b14      	subs	r3, #20
 8007c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3b04      	subs	r3, #4
 8007c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f06f 0202 	mvn.w	r2, #2
 8007c7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3b20      	subs	r3, #32
 8007c80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c82:	68fb      	ldr	r3, [r7, #12]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	08007c95 	.word	0x08007c95

08007c94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c9e:	4b13      	ldr	r3, [pc, #76]	; (8007cec <prvTaskExitError+0x58>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d00b      	beq.n	8007cc0 <prvTaskExitError+0x2c>
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	b672      	cpsid	i
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	b662      	cpsie	i
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	e7fe      	b.n	8007cbe <prvTaskExitError+0x2a>
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	b672      	cpsid	i
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	b662      	cpsie	i
 8007cd4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cd6:	bf00      	nop
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0fc      	beq.n	8007cd8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cde:	bf00      	nop
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	20000004 	.word	0x20000004

08007cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <pxCurrentTCBConst2>)
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	f380 8809 	msr	PSP, r0
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f04f 0000 	mov.w	r0, #0
 8007d06:	f380 8811 	msr	BASEPRI, r0
 8007d0a:	4770      	bx	lr
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst2>:
 8007d10:	20000624 	.word	0x20000624
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d18:	4808      	ldr	r0, [pc, #32]	; (8007d3c <prvPortStartFirstTask+0x24>)
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f380 8808 	msr	MSP, r0
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8814 	msr	CONTROL, r0
 8007d2a:	b662      	cpsie	i
 8007d2c:	b661      	cpsie	f
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	df00      	svc	0
 8007d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d3a:	bf00      	nop
 8007d3c:	e000ed08 	.word	0xe000ed08

08007d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d46:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <xPortStartScheduler+0xe0>)
 8007d48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	22ff      	movs	r2, #255	; 0xff
 8007d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	4b2e      	ldr	r3, [pc, #184]	; (8007e24 <xPortStartScheduler+0xe4>)
 8007d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d6e:	4b2e      	ldr	r3, [pc, #184]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007d70:	2207      	movs	r2, #7
 8007d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d74:	e009      	b.n	8007d8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007d76:	4b2c      	ldr	r3, [pc, #176]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	4a2a      	ldr	r2, [pc, #168]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d92:	2b80      	cmp	r3, #128	; 0x80
 8007d94:	d0ef      	beq.n	8007d76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d96:	4b24      	ldr	r3, [pc, #144]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f1c3 0307 	rsb	r3, r3, #7
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d00b      	beq.n	8007dba <xPortStartScheduler+0x7a>
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	b672      	cpsid	i
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	b662      	cpsie	i
 8007db6:	60bb      	str	r3, [r7, #8]
 8007db8:	e7fe      	b.n	8007db8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dba:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007dc2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007dc4:	4b18      	ldr	r3, [pc, #96]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dcc:	4a16      	ldr	r2, [pc, #88]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007dce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dd8:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <xPortStartScheduler+0xec>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <xPortStartScheduler+0xec>)
 8007dde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007de2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007de4:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <xPortStartScheduler+0xec>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a10      	ldr	r2, [pc, #64]	; (8007e2c <xPortStartScheduler+0xec>)
 8007dea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007dee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007df0:	f000 f8d4 	bl	8007f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <xPortStartScheduler+0xf0>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dfa:	f000 f8f3 	bl	8007fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dfe:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <xPortStartScheduler+0xf4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a0c      	ldr	r2, [pc, #48]	; (8007e34 <xPortStartScheduler+0xf4>)
 8007e04:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e08:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e0a:	f7ff ff85 	bl	8007d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e0e:	f7ff fd79 	bl	8007904 <vTaskSwitchContext>
	prvTaskExitError();
 8007e12:	f7ff ff3f 	bl	8007c94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	e000e400 	.word	0xe000e400
 8007e24:	20000750 	.word	0x20000750
 8007e28:	20000754 	.word	0x20000754
 8007e2c:	e000ed20 	.word	0xe000ed20
 8007e30:	20000004 	.word	0x20000004
 8007e34:	e000ef34 	.word	0xe000ef34

08007e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	b672      	cpsid	i
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	b662      	cpsie	i
 8007e52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <vPortEnterCritical+0x5c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	4a0e      	ldr	r2, [pc, #56]	; (8007e94 <vPortEnterCritical+0x5c>)
 8007e5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <vPortEnterCritical+0x5c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d110      	bne.n	8007e88 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e66:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <vPortEnterCritical+0x60>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <vPortEnterCritical+0x50>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	b672      	cpsid	i
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	b662      	cpsie	i
 8007e84:	603b      	str	r3, [r7, #0]
 8007e86:	e7fe      	b.n	8007e86 <vPortEnterCritical+0x4e>
	}
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	20000004 	.word	0x20000004
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <vPortExitCritical+0x50>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10b      	bne.n	8007ec2 <vPortExitCritical+0x26>
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	b672      	cpsid	i
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	b662      	cpsie	i
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	e7fe      	b.n	8007ec0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <vPortExitCritical+0x50>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	4a08      	ldr	r2, [pc, #32]	; (8007eec <vPortExitCritical+0x50>)
 8007eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <vPortExitCritical+0x50>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <vPortExitCritical+0x42>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20000004 	.word	0x20000004

08007ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ef0:	f3ef 8009 	mrs	r0, PSP
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	4b15      	ldr	r3, [pc, #84]	; (8007f50 <pxCurrentTCBConst>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	f01e 0f10 	tst.w	lr, #16
 8007f00:	bf08      	it	eq
 8007f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	6010      	str	r0, [r2, #0]
 8007f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f14:	b672      	cpsid	i
 8007f16:	f380 8811 	msr	BASEPRI, r0
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	b662      	cpsie	i
 8007f24:	f7ff fcee 	bl	8007904 <vTaskSwitchContext>
 8007f28:	f04f 0000 	mov.w	r0, #0
 8007f2c:	f380 8811 	msr	BASEPRI, r0
 8007f30:	bc09      	pop	{r0, r3}
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f01e 0f10 	tst.w	lr, #16
 8007f3e:	bf08      	it	eq
 8007f40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f44:	f380 8809 	msr	PSP, r0
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop

08007f50 <pxCurrentTCBConst>:
 8007f50:	20000624 	.word	0x20000624
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	b672      	cpsid	i
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	b662      	cpsie	i
 8007f72:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f74:	f7ff fc08 	bl	8007788 <xTaskIncrementTick>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <xPortSysTickHandler+0x40>)
 8007f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	2300      	movs	r3, #0
 8007f88:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <vPortSetupTimerInterrupt+0x38>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <vPortSetupTimerInterrupt+0x3c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <vPortSetupTimerInterrupt+0x40>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	099b      	lsrs	r3, r3, #6
 8007fb8:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <vPortSetupTimerInterrupt+0x44>)
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fbe:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	e000e010 	.word	0xe000e010
 8007fd4:	e000e018 	.word	0xe000e018
 8007fd8:	20000008 	.word	0x20000008
 8007fdc:	10624dd3 	.word	0x10624dd3
 8007fe0:	e000e014 	.word	0xe000e014

08007fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ff4 <vPortEnableVFP+0x10>
 8007fe8:	6801      	ldr	r1, [r0, #0]
 8007fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fee:	6001      	str	r1, [r0, #0]
 8007ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed88 	.word	0xe000ed88

08007ff8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007ffe:	463b      	mov	r3, r7
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	609a      	str	r2, [r3, #8]
 8008008:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800800a:	4b8a      	ldr	r3, [pc, #552]	; (8008234 <MX_ADC1_Init+0x23c>)
 800800c:	4a8a      	ldr	r2, [pc, #552]	; (8008238 <MX_ADC1_Init+0x240>)
 800800e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008010:	4b88      	ldr	r3, [pc, #544]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008018:	4b86      	ldr	r3, [pc, #536]	; (8008234 <MX_ADC1_Init+0x23c>)
 800801a:	2200      	movs	r2, #0
 800801c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800801e:	4b85      	ldr	r3, [pc, #532]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008020:	2201      	movs	r2, #1
 8008022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008024:	4b83      	ldr	r3, [pc, #524]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008026:	2201      	movs	r2, #1
 8008028:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800802a:	4b82      	ldr	r3, [pc, #520]	; (8008234 <MX_ADC1_Init+0x23c>)
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008032:	4b80      	ldr	r3, [pc, #512]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008034:	2200      	movs	r2, #0
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008038:	4b7e      	ldr	r3, [pc, #504]	; (8008234 <MX_ADC1_Init+0x23c>)
 800803a:	4a80      	ldr	r2, [pc, #512]	; (800823c <MX_ADC1_Init+0x244>)
 800803c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800803e:	4b7d      	ldr	r3, [pc, #500]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008040:	2200      	movs	r2, #0
 8008042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8008044:	4b7b      	ldr	r3, [pc, #492]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008046:	2210      	movs	r2, #16
 8008048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800804a:	4b7a      	ldr	r3, [pc, #488]	; (8008234 <MX_ADC1_Init+0x23c>)
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008052:	4b78      	ldr	r3, [pc, #480]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008054:	2200      	movs	r2, #0
 8008056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008058:	4876      	ldr	r0, [pc, #472]	; (8008234 <MX_ADC1_Init+0x23c>)
 800805a:	f7f9 f985 	bl	8001368 <HAL_ADC_Init>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008064:	f000 fe16 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008068:	2300      	movs	r3, #0
 800806a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800806c:	2301      	movs	r3, #1
 800806e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008070:	2307      	movs	r3, #7
 8008072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008074:	463b      	mov	r3, r7
 8008076:	4619      	mov	r1, r3
 8008078:	486e      	ldr	r0, [pc, #440]	; (8008234 <MX_ADC1_Init+0x23c>)
 800807a:	f7f9 fac5 	bl	8001608 <HAL_ADC_ConfigChannel>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008084:	f000 fe06 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008088:	2301      	movs	r3, #1
 800808a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800808c:	2302      	movs	r3, #2
 800808e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008090:	463b      	mov	r3, r7
 8008092:	4619      	mov	r1, r3
 8008094:	4867      	ldr	r0, [pc, #412]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008096:	f7f9 fab7 	bl	8001608 <HAL_ADC_ConfigChannel>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80080a0:	f000 fdf8 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80080a4:	2302      	movs	r3, #2
 80080a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80080a8:	2303      	movs	r3, #3
 80080aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080ac:	463b      	mov	r3, r7
 80080ae:	4619      	mov	r1, r3
 80080b0:	4860      	ldr	r0, [pc, #384]	; (8008234 <MX_ADC1_Init+0x23c>)
 80080b2:	f7f9 faa9 	bl	8001608 <HAL_ADC_ConfigChannel>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80080bc:	f000 fdea 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80080c0:	2303      	movs	r3, #3
 80080c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80080c4:	2304      	movs	r3, #4
 80080c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080c8:	463b      	mov	r3, r7
 80080ca:	4619      	mov	r1, r3
 80080cc:	4859      	ldr	r0, [pc, #356]	; (8008234 <MX_ADC1_Init+0x23c>)
 80080ce:	f7f9 fa9b 	bl	8001608 <HAL_ADC_ConfigChannel>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80080d8:	f000 fddc 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80080dc:	2304      	movs	r3, #4
 80080de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80080e0:	2305      	movs	r3, #5
 80080e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080e4:	463b      	mov	r3, r7
 80080e6:	4619      	mov	r1, r3
 80080e8:	4852      	ldr	r0, [pc, #328]	; (8008234 <MX_ADC1_Init+0x23c>)
 80080ea:	f7f9 fa8d 	bl	8001608 <HAL_ADC_ConfigChannel>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80080f4:	f000 fdce 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80080f8:	2305      	movs	r3, #5
 80080fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80080fc:	2306      	movs	r3, #6
 80080fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008100:	463b      	mov	r3, r7
 8008102:	4619      	mov	r1, r3
 8008104:	484b      	ldr	r0, [pc, #300]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008106:	f7f9 fa7f 	bl	8001608 <HAL_ADC_ConfigChannel>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8008110:	f000 fdc0 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8008114:	2306      	movs	r3, #6
 8008116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8008118:	2307      	movs	r3, #7
 800811a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800811c:	463b      	mov	r3, r7
 800811e:	4619      	mov	r1, r3
 8008120:	4844      	ldr	r0, [pc, #272]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008122:	f7f9 fa71 	bl	8001608 <HAL_ADC_ConfigChannel>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800812c:	f000 fdb2 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8008130:	2307      	movs	r3, #7
 8008132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8008134:	2308      	movs	r3, #8
 8008136:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008138:	463b      	mov	r3, r7
 800813a:	4619      	mov	r1, r3
 800813c:	483d      	ldr	r0, [pc, #244]	; (8008234 <MX_ADC1_Init+0x23c>)
 800813e:	f7f9 fa63 	bl	8001608 <HAL_ADC_ConfigChannel>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8008148:	f000 fda4 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800814c:	2308      	movs	r3, #8
 800814e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8008150:	2309      	movs	r3, #9
 8008152:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008154:	463b      	mov	r3, r7
 8008156:	4619      	mov	r1, r3
 8008158:	4836      	ldr	r0, [pc, #216]	; (8008234 <MX_ADC1_Init+0x23c>)
 800815a:	f7f9 fa55 	bl	8001608 <HAL_ADC_ConfigChannel>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8008164:	f000 fd96 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008168:	2309      	movs	r3, #9
 800816a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800816c:	230a      	movs	r3, #10
 800816e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008170:	463b      	mov	r3, r7
 8008172:	4619      	mov	r1, r3
 8008174:	482f      	ldr	r0, [pc, #188]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008176:	f7f9 fa47 	bl	8001608 <HAL_ADC_ConfigChannel>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8008180:	f000 fd88 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008184:	230a      	movs	r3, #10
 8008186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8008188:	230b      	movs	r3, #11
 800818a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800818c:	463b      	mov	r3, r7
 800818e:	4619      	mov	r1, r3
 8008190:	4828      	ldr	r0, [pc, #160]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008192:	f7f9 fa39 	bl	8001608 <HAL_ADC_ConfigChannel>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800819c:	f000 fd7a 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80081a0:	230b      	movs	r3, #11
 80081a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80081a4:	230c      	movs	r3, #12
 80081a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081a8:	463b      	mov	r3, r7
 80081aa:	4619      	mov	r1, r3
 80081ac:	4821      	ldr	r0, [pc, #132]	; (8008234 <MX_ADC1_Init+0x23c>)
 80081ae:	f7f9 fa2b 	bl	8001608 <HAL_ADC_ConfigChannel>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80081b8:	f000 fd6c 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80081bc:	230c      	movs	r3, #12
 80081be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80081c0:	230d      	movs	r3, #13
 80081c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081c4:	463b      	mov	r3, r7
 80081c6:	4619      	mov	r1, r3
 80081c8:	481a      	ldr	r0, [pc, #104]	; (8008234 <MX_ADC1_Init+0x23c>)
 80081ca:	f7f9 fa1d 	bl	8001608 <HAL_ADC_ConfigChannel>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80081d4:	f000 fd5e 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80081d8:	230d      	movs	r3, #13
 80081da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80081dc:	230e      	movs	r3, #14
 80081de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081e0:	463b      	mov	r3, r7
 80081e2:	4619      	mov	r1, r3
 80081e4:	4813      	ldr	r0, [pc, #76]	; (8008234 <MX_ADC1_Init+0x23c>)
 80081e6:	f7f9 fa0f 	bl	8001608 <HAL_ADC_ConfigChannel>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80081f0:	f000 fd50 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80081f4:	230e      	movs	r3, #14
 80081f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80081f8:	230f      	movs	r3, #15
 80081fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081fc:	463b      	mov	r3, r7
 80081fe:	4619      	mov	r1, r3
 8008200:	480c      	ldr	r0, [pc, #48]	; (8008234 <MX_ADC1_Init+0x23c>)
 8008202:	f7f9 fa01 	bl	8001608 <HAL_ADC_ConfigChannel>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 800820c:	f000 fd42 	bl	8008c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008210:	230f      	movs	r3, #15
 8008212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8008214:	2310      	movs	r3, #16
 8008216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008218:	463b      	mov	r3, r7
 800821a:	4619      	mov	r1, r3
 800821c:	4805      	ldr	r0, [pc, #20]	; (8008234 <MX_ADC1_Init+0x23c>)
 800821e:	f7f9 f9f3 	bl	8001608 <HAL_ADC_ConfigChannel>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8008228:	f000 fd34 	bl	8008c94 <Error_Handler>
  }

}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	200013d8 	.word	0x200013d8
 8008238:	40012000 	.word	0x40012000
 800823c:	0f000001 	.word	0x0f000001

08008240 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08c      	sub	sp, #48	; 0x30
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008248:	f107 031c 	add.w	r3, r7, #28
 800824c:	2200      	movs	r2, #0
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	609a      	str	r2, [r3, #8]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a45      	ldr	r2, [pc, #276]	; (8008374 <HAL_ADC_MspInit+0x134>)
 800825e:	4293      	cmp	r3, r2
 8008260:	f040 8084 	bne.w	800836c <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008264:	4b44      	ldr	r3, [pc, #272]	; (8008378 <HAL_ADC_MspInit+0x138>)
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	4a43      	ldr	r2, [pc, #268]	; (8008378 <HAL_ADC_MspInit+0x138>)
 800826a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800826e:	6453      	str	r3, [r2, #68]	; 0x44
 8008270:	4b41      	ldr	r3, [pc, #260]	; (8008378 <HAL_ADC_MspInit+0x138>)
 8008272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008278:	61bb      	str	r3, [r7, #24]
 800827a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800827c:	4b3e      	ldr	r3, [pc, #248]	; (8008378 <HAL_ADC_MspInit+0x138>)
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	4a3d      	ldr	r2, [pc, #244]	; (8008378 <HAL_ADC_MspInit+0x138>)
 8008282:	f043 0304 	orr.w	r3, r3, #4
 8008286:	6313      	str	r3, [r2, #48]	; 0x30
 8008288:	4b3b      	ldr	r3, [pc, #236]	; (8008378 <HAL_ADC_MspInit+0x138>)
 800828a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008294:	4b38      	ldr	r3, [pc, #224]	; (8008378 <HAL_ADC_MspInit+0x138>)
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	4a37      	ldr	r2, [pc, #220]	; (8008378 <HAL_ADC_MspInit+0x138>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6313      	str	r3, [r2, #48]	; 0x30
 80082a0:	4b35      	ldr	r3, [pc, #212]	; (8008378 <HAL_ADC_MspInit+0x138>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ac:	4b32      	ldr	r3, [pc, #200]	; (8008378 <HAL_ADC_MspInit+0x138>)
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	4a31      	ldr	r2, [pc, #196]	; (8008378 <HAL_ADC_MspInit+0x138>)
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	6313      	str	r3, [r2, #48]	; 0x30
 80082b8:	4b2f      	ldr	r3, [pc, #188]	; (8008378 <HAL_ADC_MspInit+0x138>)
 80082ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A10_Pin|A11_Pin|A12_Pin|A13_Pin 
 80082c4:	233f      	movs	r3, #63	; 0x3f
 80082c6:	61fb      	str	r3, [r7, #28]
                          |A14_Pin|A15_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082c8:	2303      	movs	r3, #3
 80082ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082d0:	f107 031c 	add.w	r3, r7, #28
 80082d4:	4619      	mov	r1, r3
 80082d6:	4829      	ldr	r0, [pc, #164]	; (800837c <HAL_ADC_MspInit+0x13c>)
 80082d8:	f7fa f930 	bl	800253c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80082dc:	23ff      	movs	r3, #255	; 0xff
 80082de:	61fb      	str	r3, [r7, #28]
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082e0:	2303      	movs	r3, #3
 80082e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082e8:	f107 031c 	add.w	r3, r7, #28
 80082ec:	4619      	mov	r1, r3
 80082ee:	4824      	ldr	r0, [pc, #144]	; (8008380 <HAL_ADC_MspInit+0x140>)
 80082f0:	f7fa f924 	bl	800253c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A8_Pin|A9_Pin;
 80082f4:	2303      	movs	r3, #3
 80082f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082f8:	2303      	movs	r3, #3
 80082fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fc:	2300      	movs	r3, #0
 80082fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008300:	f107 031c 	add.w	r3, r7, #28
 8008304:	4619      	mov	r1, r3
 8008306:	481f      	ldr	r0, [pc, #124]	; (8008384 <HAL_ADC_MspInit+0x144>)
 8008308:	f7fa f918 	bl	800253c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800830c:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <HAL_ADC_MspInit+0x148>)
 800830e:	4a1f      	ldr	r2, [pc, #124]	; (800838c <HAL_ADC_MspInit+0x14c>)
 8008310:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008312:	4b1d      	ldr	r3, [pc, #116]	; (8008388 <HAL_ADC_MspInit+0x148>)
 8008314:	2200      	movs	r2, #0
 8008316:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <HAL_ADC_MspInit+0x148>)
 800831a:	2200      	movs	r2, #0
 800831c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800831e:	4b1a      	ldr	r3, [pc, #104]	; (8008388 <HAL_ADC_MspInit+0x148>)
 8008320:	2200      	movs	r2, #0
 8008322:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008324:	4b18      	ldr	r3, [pc, #96]	; (8008388 <HAL_ADC_MspInit+0x148>)
 8008326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800832a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800832c:	4b16      	ldr	r3, [pc, #88]	; (8008388 <HAL_ADC_MspInit+0x148>)
 800832e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008332:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008334:	4b14      	ldr	r3, [pc, #80]	; (8008388 <HAL_ADC_MspInit+0x148>)
 8008336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800833a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800833c:	4b12      	ldr	r3, [pc, #72]	; (8008388 <HAL_ADC_MspInit+0x148>)
 800833e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008342:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008344:	4b10      	ldr	r3, [pc, #64]	; (8008388 <HAL_ADC_MspInit+0x148>)
 8008346:	2200      	movs	r2, #0
 8008348:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800834a:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <HAL_ADC_MspInit+0x148>)
 800834c:	2200      	movs	r2, #0
 800834e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008350:	480d      	ldr	r0, [pc, #52]	; (8008388 <HAL_ADC_MspInit+0x148>)
 8008352:	f7f9 fceb 	bl	8001d2c <HAL_DMA_Init>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 800835c:	f000 fc9a 	bl	8008c94 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a09      	ldr	r2, [pc, #36]	; (8008388 <HAL_ADC_MspInit+0x148>)
 8008364:	639a      	str	r2, [r3, #56]	; 0x38
 8008366:	4a08      	ldr	r2, [pc, #32]	; (8008388 <HAL_ADC_MspInit+0x148>)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800836c:	bf00      	nop
 800836e:	3730      	adds	r7, #48	; 0x30
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40012000 	.word	0x40012000
 8008378:	40023800 	.word	0x40023800
 800837c:	40020800 	.word	0x40020800
 8008380:	40020000 	.word	0x40020000
 8008384:	40020400 	.word	0x40020400
 8008388:	20001420 	.word	0x20001420
 800838c:	40026470 	.word	0x40026470

08008390 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008396:	4b3a      	ldr	r3, [pc, #232]	; (8008480 <MX_DMA_Init+0xf0>)
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839a:	4a39      	ldr	r2, [pc, #228]	; (8008480 <MX_DMA_Init+0xf0>)
 800839c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083a0:	6313      	str	r3, [r2, #48]	; 0x30
 80083a2:	4b37      	ldr	r3, [pc, #220]	; (8008480 <MX_DMA_Init+0xf0>)
 80083a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083aa:	607b      	str	r3, [r7, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80083ae:	4b34      	ldr	r3, [pc, #208]	; (8008480 <MX_DMA_Init+0xf0>)
 80083b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b2:	4a33      	ldr	r2, [pc, #204]	; (8008480 <MX_DMA_Init+0xf0>)
 80083b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083b8:	6313      	str	r3, [r2, #48]	; 0x30
 80083ba:	4b31      	ldr	r3, [pc, #196]	; (8008480 <MX_DMA_Init+0xf0>)
 80083bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80083c6:	2200      	movs	r2, #0
 80083c8:	2105      	movs	r1, #5
 80083ca:	200b      	movs	r0, #11
 80083cc:	f7f9 fc84 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80083d0:	200b      	movs	r0, #11
 80083d2:	f7f9 fc9d 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80083d6:	2200      	movs	r2, #0
 80083d8:	2105      	movs	r1, #5
 80083da:	200c      	movs	r0, #12
 80083dc:	f7f9 fc7c 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80083e0:	200c      	movs	r0, #12
 80083e2:	f7f9 fc95 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80083e6:	2200      	movs	r2, #0
 80083e8:	2105      	movs	r1, #5
 80083ea:	200d      	movs	r0, #13
 80083ec:	f7f9 fc74 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80083f0:	200d      	movs	r0, #13
 80083f2:	f7f9 fc8d 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80083f6:	2200      	movs	r2, #0
 80083f8:	2105      	movs	r1, #5
 80083fa:	200f      	movs	r0, #15
 80083fc:	f7f9 fc6c 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008400:	200f      	movs	r0, #15
 8008402:	f7f9 fc85 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8008406:	2200      	movs	r2, #0
 8008408:	2105      	movs	r1, #5
 800840a:	2010      	movs	r0, #16
 800840c:	f7f9 fc64 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008410:	2010      	movs	r0, #16
 8008412:	f7f9 fc7d 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8008416:	2200      	movs	r2, #0
 8008418:	2105      	movs	r1, #5
 800841a:	202f      	movs	r0, #47	; 0x2f
 800841c:	f7f9 fc5c 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8008420:	202f      	movs	r0, #47	; 0x2f
 8008422:	f7f9 fc75 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8008426:	2200      	movs	r2, #0
 8008428:	2105      	movs	r1, #5
 800842a:	2038      	movs	r0, #56	; 0x38
 800842c:	f7f9 fc54 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008430:	2038      	movs	r0, #56	; 0x38
 8008432:	f7f9 fc6d 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8008436:	2200      	movs	r2, #0
 8008438:	2105      	movs	r1, #5
 800843a:	2039      	movs	r0, #57	; 0x39
 800843c:	f7f9 fc4c 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008440:	2039      	movs	r0, #57	; 0x39
 8008442:	f7f9 fc65 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8008446:	2200      	movs	r2, #0
 8008448:	2105      	movs	r1, #5
 800844a:	203a      	movs	r0, #58	; 0x3a
 800844c:	f7f9 fc44 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008450:	203a      	movs	r0, #58	; 0x3a
 8008452:	f7f9 fc5d 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8008456:	2200      	movs	r2, #0
 8008458:	2105      	movs	r1, #5
 800845a:	203b      	movs	r0, #59	; 0x3b
 800845c:	f7f9 fc3c 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8008460:	203b      	movs	r0, #59	; 0x3b
 8008462:	f7f9 fc55 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8008466:	2200      	movs	r2, #0
 8008468:	2105      	movs	r1, #5
 800846a:	203c      	movs	r0, #60	; 0x3c
 800846c:	f7f9 fc34 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8008470:	203c      	movs	r0, #60	; 0x3c
 8008472:	f7f9 fc4d 	bl	8001d10 <HAL_NVIC_EnableIRQ>

}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	40023800 	.word	0x40023800

08008484 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4a06      	ldr	r2, [pc, #24]	; (80084b4 <vApplicationGetIdleTaskMemory+0x30>)
 800849a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2280      	movs	r2, #128	; 0x80
 80084a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	20000758 	.word	0x20000758
 80084b4:	200007ac 	.word	0x200007ac

080084b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80084b8:	b5b0      	push	{r4, r5, r7, lr}
 80084ba:	b08e      	sub	sp, #56	; 0x38
 80084bc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 80084be:	4b14      	ldr	r3, [pc, #80]	; (8008510 <MX_FREERTOS_Init+0x58>)
 80084c0:	f107 041c 	add.w	r4, r7, #28
 80084c4:	461d      	mov	r5, r3
 80084c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80084ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 80084d2:	f107 031c 	add.w	r3, r7, #28
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fd8d 	bl	8006ff8 <osThreadCreate>
 80084de:	4602      	mov	r2, r0
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <MX_FREERTOS_Init+0x5c>)
 80084e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 80084e4:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <MX_FREERTOS_Init+0x60>)
 80084e6:	463c      	mov	r4, r7
 80084e8:	461d      	mov	r5, r3
 80084ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80084f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80084f6:	463b      	mov	r3, r7
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fd7c 	bl	8006ff8 <osThreadCreate>
 8008500:	4602      	mov	r2, r0
 8008502:	4b06      	ldr	r3, [pc, #24]	; (800851c <MX_FREERTOS_Init+0x64>)
 8008504:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8008506:	bf00      	nop
 8008508:	3738      	adds	r7, #56	; 0x38
 800850a:	46bd      	mov	sp, r7
 800850c:	bdb0      	pop	{r4, r5, r7, pc}
 800850e:	bf00      	nop
 8008510:	08016634 	.word	0x08016634
 8008514:	20005480 	.word	0x20005480
 8008518:	0801665c 	.word	0x0801665c
 800851c:	200054d8 	.word	0x200054d8

08008520 <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
    
    
    

  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8008528:	f7ff f91e 	bl	8007768 <xTaskGetTickCount>
 800852c:	4603      	mov	r3, r0
 800852e:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 8008530:	2301      	movs	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 8008534:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <sendTaskFunc+0x44>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3301      	adds	r3, #1
 800853a:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <sendTaskFunc+0x44>)
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	4b09      	ldr	r3, [pc, #36]	; (8008564 <sendTaskFunc+0x44>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <sendTaskFunc+0x48>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	db04      	blt.n	8008554 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 800854a:	4b06      	ldr	r3, [pc, #24]	; (8008564 <sendTaskFunc+0x44>)
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 8008550:	f006 f872 	bl	800e638 <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	68f9      	ldr	r1, [r7, #12]
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe ff76 	bl	800744c <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 8008560:	e7e8      	b.n	8008534 <sendTaskFunc+0x14>
 8008562:	bf00      	nop
 8008564:	200009ac 	.word	0x200009ac
 8008568:	20000220 	.word	0x20000220

0800856c <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8008574:	f7ff f8f8 	bl	8007768 <xTaskGetTickCount>
 8008578:	4603      	mov	r3, r0
 800857a:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 800857c:	2301      	movs	r3, #1
 800857e:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 8008580:	f002 fcb8 	bl	800aef4 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_TerminalHandler();
 8008584:	f005 ffb0 	bl	800e4e8 <Usart_TerminalHandler>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 8008588:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <controlTaskFunc+0x4c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	4a0a      	ldr	r2, [pc, #40]	; (80085b8 <controlTaskFunc+0x4c>)
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <controlTaskFunc+0x4c>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <controlTaskFunc+0x50>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	db04      	blt.n	80085a8 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 800859e:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <controlTaskFunc+0x4c>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
		loop();
 80085a4:	f006 f83e 	bl	800e624 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 80085a8:	f107 0308 	add.w	r3, r7, #8
 80085ac:	68f9      	ldr	r1, [r7, #12]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe ff4c 	bl	800744c <vTaskDelayUntil>
			ADBoard_updateVoltage();
 80085b4:	e7e4      	b.n	8008580 <controlTaskFunc+0x14>
 80085b6:	bf00      	nop
 80085b8:	200009b0 	.word	0x200009b0
 80085bc:	2000021c 	.word	0x2000021c

080085c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08c      	sub	sp, #48	; 0x30
 80085c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085c6:	f107 031c 	add.w	r3, r7, #28
 80085ca:	2200      	movs	r2, #0
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	605a      	str	r2, [r3, #4]
 80085d0:	609a      	str	r2, [r3, #8]
 80085d2:	60da      	str	r2, [r3, #12]
 80085d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80085d6:	4b8f      	ldr	r3, [pc, #572]	; (8008814 <MX_GPIO_Init+0x254>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	4a8e      	ldr	r2, [pc, #568]	; (8008814 <MX_GPIO_Init+0x254>)
 80085dc:	f043 0310 	orr.w	r3, r3, #16
 80085e0:	6313      	str	r3, [r2, #48]	; 0x30
 80085e2:	4b8c      	ldr	r3, [pc, #560]	; (8008814 <MX_GPIO_Init+0x254>)
 80085e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085ee:	4b89      	ldr	r3, [pc, #548]	; (8008814 <MX_GPIO_Init+0x254>)
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	4a88      	ldr	r2, [pc, #544]	; (8008814 <MX_GPIO_Init+0x254>)
 80085f4:	f043 0304 	orr.w	r3, r3, #4
 80085f8:	6313      	str	r3, [r2, #48]	; 0x30
 80085fa:	4b86      	ldr	r3, [pc, #536]	; (8008814 <MX_GPIO_Init+0x254>)
 80085fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008606:	4b83      	ldr	r3, [pc, #524]	; (8008814 <MX_GPIO_Init+0x254>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	4a82      	ldr	r2, [pc, #520]	; (8008814 <MX_GPIO_Init+0x254>)
 800860c:	f043 0320 	orr.w	r3, r3, #32
 8008610:	6313      	str	r3, [r2, #48]	; 0x30
 8008612:	4b80      	ldr	r3, [pc, #512]	; (8008814 <MX_GPIO_Init+0x254>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800861e:	4b7d      	ldr	r3, [pc, #500]	; (8008814 <MX_GPIO_Init+0x254>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	4a7c      	ldr	r2, [pc, #496]	; (8008814 <MX_GPIO_Init+0x254>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6313      	str	r3, [r2, #48]	; 0x30
 800862a:	4b7a      	ldr	r3, [pc, #488]	; (8008814 <MX_GPIO_Init+0x254>)
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008636:	4b77      	ldr	r3, [pc, #476]	; (8008814 <MX_GPIO_Init+0x254>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	4a76      	ldr	r2, [pc, #472]	; (8008814 <MX_GPIO_Init+0x254>)
 800863c:	f043 0302 	orr.w	r3, r3, #2
 8008640:	6313      	str	r3, [r2, #48]	; 0x30
 8008642:	4b74      	ldr	r3, [pc, #464]	; (8008814 <MX_GPIO_Init+0x254>)
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800864e:	4b71      	ldr	r3, [pc, #452]	; (8008814 <MX_GPIO_Init+0x254>)
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	4a70      	ldr	r2, [pc, #448]	; (8008814 <MX_GPIO_Init+0x254>)
 8008654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008658:	6313      	str	r3, [r2, #48]	; 0x30
 800865a:	4b6e      	ldr	r3, [pc, #440]	; (8008814 <MX_GPIO_Init+0x254>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008662:	607b      	str	r3, [r7, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008666:	4b6b      	ldr	r3, [pc, #428]	; (8008814 <MX_GPIO_Init+0x254>)
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	4a6a      	ldr	r2, [pc, #424]	; (8008814 <MX_GPIO_Init+0x254>)
 800866c:	f043 0308 	orr.w	r3, r3, #8
 8008670:	6313      	str	r3, [r2, #48]	; 0x30
 8008672:	4b68      	ldr	r3, [pc, #416]	; (8008814 <MX_GPIO_Init+0x254>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_6_Pin|DO_1_Pin|DO_13_Pin|DO_14_Pin 
 800867e:	2200      	movs	r2, #0
 8008680:	f249 519b 	movw	r1, #38299	; 0x959b
 8008684:	4864      	ldr	r0, [pc, #400]	; (8008818 <MX_GPIO_Init+0x258>)
 8008686:	f7fa f903 	bl	8002890 <HAL_GPIO_WritePin>
                          |DO_15_Pin|DO_16_Pin|DO_17_Pin|DO_10_Pin 
                          |DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO_2_GPIO_Port, DO_2_Pin, GPIO_PIN_RESET);
 800868a:	2200      	movs	r2, #0
 800868c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008690:	4862      	ldr	r0, [pc, #392]	; (800881c <MX_GPIO_Init+0x25c>)
 8008692:	f7fa f8fd 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_5_Pin|DO_0_Pin|DO_7_Pin|DO_8_Pin 
 8008696:	2200      	movs	r2, #0
 8008698:	f244 413c 	movw	r1, #17468	; 0x443c
 800869c:	4860      	ldr	r0, [pc, #384]	; (8008820 <MX_GPIO_Init+0x260>)
 800869e:	f7fa f8f7 	bl	8002890 <HAL_GPIO_WritePin>
                          |DO_9_Pin|DO_12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_18_Pin|DO_19_Pin|DO_4_Pin|DO_3_Pin, GPIO_PIN_RESET);
 80086a2:	2200      	movs	r2, #0
 80086a4:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80086a8:	485e      	ldr	r0, [pc, #376]	; (8008824 <MX_GPIO_Init+0x264>)
 80086aa:	f7fa f8f1 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI4_CS_Pin|SPI6_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 80086ae:	2200      	movs	r2, #0
 80086b0:	f640 4102 	movw	r1, #3074	; 0xc02
 80086b4:	485c      	ldr	r0, [pc, #368]	; (8008828 <MX_GPIO_Init+0x268>)
 80086b6:	f7fa f8eb 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80086ba:	2200      	movs	r2, #0
 80086bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80086c0:	485a      	ldr	r0, [pc, #360]	; (800882c <MX_GPIO_Init+0x26c>)
 80086c2:	f7fa f8e5 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = DO_6_Pin|DO_1_Pin|DO_13_Pin|DO_14_Pin 
 80086c6:	f249 539b 	movw	r3, #38299	; 0x959b
 80086ca:	61fb      	str	r3, [r7, #28]
                          |DO_15_Pin|DO_16_Pin|DO_17_Pin|DO_10_Pin 
                          |DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086cc:	2301      	movs	r3, #1
 80086ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d0:	2300      	movs	r3, #0
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d4:	2300      	movs	r3, #0
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80086d8:	f107 031c 	add.w	r3, r7, #28
 80086dc:	4619      	mov	r1, r3
 80086de:	484e      	ldr	r0, [pc, #312]	; (8008818 <MX_GPIO_Init+0x258>)
 80086e0:	f7f9 ff2c 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DO_2_Pin;
 80086e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086ea:	2301      	movs	r3, #1
 80086ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f2:	2300      	movs	r3, #0
 80086f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DO_2_GPIO_Port, &GPIO_InitStruct);
 80086f6:	f107 031c 	add.w	r3, r7, #28
 80086fa:	4619      	mov	r1, r3
 80086fc:	4847      	ldr	r0, [pc, #284]	; (800881c <MX_GPIO_Init+0x25c>)
 80086fe:	f7f9 ff1d 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_5_Pin|DO_0_Pin|DO_7_Pin|DO_8_Pin 
 8008702:	f244 433c 	movw	r3, #17468	; 0x443c
 8008706:	61fb      	str	r3, [r7, #28]
                          |DO_9_Pin|DO_12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008708:	2301      	movs	r3, #1
 800870a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870c:	2300      	movs	r3, #0
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008710:	2300      	movs	r3, #0
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008714:	f107 031c 	add.w	r3, r7, #28
 8008718:	4619      	mov	r1, r3
 800871a:	4841      	ldr	r0, [pc, #260]	; (8008820 <MX_GPIO_Init+0x260>)
 800871c:	f7f9 ff0e 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 8008720:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8008724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008726:	2300      	movs	r3, #0
 8008728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872a:	2300      	movs	r3, #0
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800872e:	f107 031c 	add.w	r3, r7, #28
 8008732:	4619      	mov	r1, r3
 8008734:	483a      	ldr	r0, [pc, #232]	; (8008820 <MX_GPIO_Init+0x260>)
 8008736:	f7f9 ff01 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 800873a:	23ff      	movs	r3, #255	; 0xff
 800873c:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin|E6_Pin|E7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800873e:	4b3c      	ldr	r3, [pc, #240]	; (8008830 <MX_GPIO_Init+0x270>)
 8008740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008746:	f107 031c 	add.w	r3, r7, #28
 800874a:	4619      	mov	r1, r3
 800874c:	4839      	ldr	r0, [pc, #228]	; (8008834 <MX_GPIO_Init+0x274>)
 800874e:	f7f9 fef5 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DO_18_Pin|DO_19_Pin|DO_4_Pin|DO_3_Pin;
 8008752:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8008756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008758:	2301      	movs	r3, #1
 800875a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800875c:	2300      	movs	r3, #0
 800875e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008760:	2300      	movs	r3, #0
 8008762:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008764:	f107 031c 	add.w	r3, r7, #28
 8008768:	4619      	mov	r1, r3
 800876a:	482e      	ldr	r0, [pc, #184]	; (8008824 <MX_GPIO_Init+0x264>)
 800876c:	f7f9 fee6 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|SPI6_CS_Pin|SPI3_CS_Pin;
 8008770:	f640 4302 	movw	r3, #3074	; 0xc02
 8008774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008776:	2301      	movs	r3, #1
 8008778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800877a:	2301      	movs	r3, #1
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800877e:	2300      	movs	r3, #0
 8008780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008782:	f107 031c 	add.w	r3, r7, #28
 8008786:	4619      	mov	r1, r3
 8008788:	4827      	ldr	r0, [pc, #156]	; (8008828 <MX_GPIO_Init+0x268>)
 800878a:	f7f9 fed7 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800878e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008794:	2301      	movs	r3, #1
 8008796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008798:	2300      	movs	r3, #0
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800879c:	2300      	movs	r3, #0
 800879e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80087a0:	f107 031c 	add.w	r3, r7, #28
 80087a4:	4619      	mov	r1, r3
 80087a6:	4821      	ldr	r0, [pc, #132]	; (800882c <MX_GPIO_Init+0x26c>)
 80087a8:	f7f9 fec8 	bl	800253c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80087ac:	2200      	movs	r2, #0
 80087ae:	2105      	movs	r1, #5
 80087b0:	2006      	movs	r0, #6
 80087b2:	f7f9 fa91 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80087b6:	2006      	movs	r0, #6
 80087b8:	f7f9 faaa 	bl	8001d10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80087bc:	2200      	movs	r2, #0
 80087be:	2105      	movs	r1, #5
 80087c0:	2007      	movs	r0, #7
 80087c2:	f7f9 fa89 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80087c6:	2007      	movs	r0, #7
 80087c8:	f7f9 faa2 	bl	8001d10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80087cc:	2200      	movs	r2, #0
 80087ce:	2105      	movs	r1, #5
 80087d0:	2008      	movs	r0, #8
 80087d2:	f7f9 fa81 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80087d6:	2008      	movs	r0, #8
 80087d8:	f7f9 fa9a 	bl	8001d10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80087dc:	2200      	movs	r2, #0
 80087de:	2105      	movs	r1, #5
 80087e0:	2009      	movs	r0, #9
 80087e2:	f7f9 fa79 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80087e6:	2009      	movs	r0, #9
 80087e8:	f7f9 fa92 	bl	8001d10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80087ec:	2200      	movs	r2, #0
 80087ee:	2105      	movs	r1, #5
 80087f0:	200a      	movs	r0, #10
 80087f2:	f7f9 fa71 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80087f6:	200a      	movs	r0, #10
 80087f8:	f7f9 fa8a 	bl	8001d10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80087fc:	2200      	movs	r2, #0
 80087fe:	2105      	movs	r1, #5
 8008800:	2017      	movs	r0, #23
 8008802:	f7f9 fa69 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008806:	2017      	movs	r0, #23
 8008808:	f7f9 fa82 	bl	8001d10 <HAL_NVIC_EnableIRQ>

}
 800880c:	bf00      	nop
 800880e:	3730      	adds	r7, #48	; 0x30
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	40023800 	.word	0x40023800
 8008818:	40021000 	.word	0x40021000
 800881c:	40020800 	.word	0x40020800
 8008820:	40021400 	.word	0x40021400
 8008824:	40020400 	.word	0x40020400
 8008828:	40020c00 	.word	0x40020c00
 800882c:	40020000 	.word	0x40020000
 8008830:	10210000 	.word	0x10210000
 8008834:	40021800 	.word	0x40021800

08008838 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800883c:	4b1b      	ldr	r3, [pc, #108]	; (80088ac <MX_I2C2_Init+0x74>)
 800883e:	4a1c      	ldr	r2, [pc, #112]	; (80088b0 <MX_I2C2_Init+0x78>)
 8008840:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A01B56;
 8008842:	4b1a      	ldr	r3, [pc, #104]	; (80088ac <MX_I2C2_Init+0x74>)
 8008844:	4a1b      	ldr	r2, [pc, #108]	; (80088b4 <MX_I2C2_Init+0x7c>)
 8008846:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008848:	4b18      	ldr	r3, [pc, #96]	; (80088ac <MX_I2C2_Init+0x74>)
 800884a:	2200      	movs	r2, #0
 800884c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800884e:	4b17      	ldr	r3, [pc, #92]	; (80088ac <MX_I2C2_Init+0x74>)
 8008850:	2201      	movs	r2, #1
 8008852:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008854:	4b15      	ldr	r3, [pc, #84]	; (80088ac <MX_I2C2_Init+0x74>)
 8008856:	2200      	movs	r2, #0
 8008858:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800885a:	4b14      	ldr	r3, [pc, #80]	; (80088ac <MX_I2C2_Init+0x74>)
 800885c:	2200      	movs	r2, #0
 800885e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008860:	4b12      	ldr	r3, [pc, #72]	; (80088ac <MX_I2C2_Init+0x74>)
 8008862:	2200      	movs	r2, #0
 8008864:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008866:	4b11      	ldr	r3, [pc, #68]	; (80088ac <MX_I2C2_Init+0x74>)
 8008868:	2200      	movs	r2, #0
 800886a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800886c:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <MX_I2C2_Init+0x74>)
 800886e:	2200      	movs	r2, #0
 8008870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008872:	480e      	ldr	r0, [pc, #56]	; (80088ac <MX_I2C2_Init+0x74>)
 8008874:	f7fa f83e 	bl	80028f4 <HAL_I2C_Init>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800887e:	f000 fa09 	bl	8008c94 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008882:	2100      	movs	r1, #0
 8008884:	4809      	ldr	r0, [pc, #36]	; (80088ac <MX_I2C2_Init+0x74>)
 8008886:	f7fa fc8f 	bl	80031a8 <HAL_I2CEx_ConfigAnalogFilter>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008890:	f000 fa00 	bl	8008c94 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008894:	2100      	movs	r1, #0
 8008896:	4805      	ldr	r0, [pc, #20]	; (80088ac <MX_I2C2_Init+0x74>)
 8008898:	f7fa fcd1 	bl	800323e <HAL_I2CEx_ConfigDigitalFilter>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80088a2:	f000 f9f7 	bl	8008c94 <Error_Handler>
  }

}
 80088a6:	bf00      	nop
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20009530 	.word	0x20009530
 80088b0:	40005800 	.word	0x40005800
 80088b4:	00a01b56 	.word	0x00a01b56

080088b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088c0:	f107 0314 	add.w	r3, r7, #20
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	605a      	str	r2, [r3, #4]
 80088ca:	609a      	str	r2, [r3, #8]
 80088cc:	60da      	str	r2, [r3, #12]
 80088ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a2e      	ldr	r2, [pc, #184]	; (8008990 <HAL_I2C_MspInit+0xd8>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d156      	bne.n	8008988 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80088da:	4b2e      	ldr	r3, [pc, #184]	; (8008994 <HAL_I2C_MspInit+0xdc>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	4a2d      	ldr	r2, [pc, #180]	; (8008994 <HAL_I2C_MspInit+0xdc>)
 80088e0:	f043 0320 	orr.w	r3, r3, #32
 80088e4:	6313      	str	r3, [r2, #48]	; 0x30
 80088e6:	4b2b      	ldr	r3, [pc, #172]	; (8008994 <HAL_I2C_MspInit+0xdc>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80088f2:	2303      	movs	r3, #3
 80088f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088f6:	2312      	movs	r3, #18
 80088f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088fa:	2301      	movs	r3, #1
 80088fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088fe:	2303      	movs	r3, #3
 8008900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008902:	2304      	movs	r3, #4
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008906:	f107 0314 	add.w	r3, r7, #20
 800890a:	4619      	mov	r1, r3
 800890c:	4822      	ldr	r0, [pc, #136]	; (8008998 <HAL_I2C_MspInit+0xe0>)
 800890e:	f7f9 fe15 	bl	800253c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008912:	4b20      	ldr	r3, [pc, #128]	; (8008994 <HAL_I2C_MspInit+0xdc>)
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <HAL_I2C_MspInit+0xdc>)
 8008918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800891c:	6413      	str	r3, [r2, #64]	; 0x40
 800891e:	4b1d      	ldr	r3, [pc, #116]	; (8008994 <HAL_I2C_MspInit+0xdc>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800892a:	4b1c      	ldr	r3, [pc, #112]	; (800899c <HAL_I2C_MspInit+0xe4>)
 800892c:	4a1c      	ldr	r2, [pc, #112]	; (80089a0 <HAL_I2C_MspInit+0xe8>)
 800892e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8008930:	4b1a      	ldr	r3, [pc, #104]	; (800899c <HAL_I2C_MspInit+0xe4>)
 8008932:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8008936:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <HAL_I2C_MspInit+0xe4>)
 800893a:	2240      	movs	r2, #64	; 0x40
 800893c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800893e:	4b17      	ldr	r3, [pc, #92]	; (800899c <HAL_I2C_MspInit+0xe4>)
 8008940:	2200      	movs	r2, #0
 8008942:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008944:	4b15      	ldr	r3, [pc, #84]	; (800899c <HAL_I2C_MspInit+0xe4>)
 8008946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800894a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800894c:	4b13      	ldr	r3, [pc, #76]	; (800899c <HAL_I2C_MspInit+0xe4>)
 800894e:	2200      	movs	r2, #0
 8008950:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008952:	4b12      	ldr	r3, [pc, #72]	; (800899c <HAL_I2C_MspInit+0xe4>)
 8008954:	2200      	movs	r2, #0
 8008956:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8008958:	4b10      	ldr	r3, [pc, #64]	; (800899c <HAL_I2C_MspInit+0xe4>)
 800895a:	2200      	movs	r2, #0
 800895c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800895e:	4b0f      	ldr	r3, [pc, #60]	; (800899c <HAL_I2C_MspInit+0xe4>)
 8008960:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008964:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <HAL_I2C_MspInit+0xe4>)
 8008968:	2200      	movs	r2, #0
 800896a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800896c:	480b      	ldr	r0, [pc, #44]	; (800899c <HAL_I2C_MspInit+0xe4>)
 800896e:	f7f9 f9dd 	bl	8001d2c <HAL_DMA_Init>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8008978:	f000 f98c 	bl	8008c94 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a07      	ldr	r2, [pc, #28]	; (800899c <HAL_I2C_MspInit+0xe4>)
 8008980:	639a      	str	r2, [r3, #56]	; 0x38
 8008982:	4a06      	ldr	r2, [pc, #24]	; (800899c <HAL_I2C_MspInit+0xe4>)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008988:	bf00      	nop
 800898a:	3728      	adds	r7, #40	; 0x28
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40005800 	.word	0x40005800
 8008994:	40023800 	.word	0x40023800
 8008998:	40021400 	.word	0x40021400
 800899c:	2000957c 	.word	0x2000957c
 80089a0:	400260b8 	.word	0x400260b8

080089a4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80089a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80089ac:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80089b0:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <SCB_EnableICache+0x3c>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80089b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80089bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <SCB_EnableICache+0x3c>)
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	4a06      	ldr	r2, [pc, #24]	; (80089e0 <SCB_EnableICache+0x3c>)
 80089c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80089cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80089d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80089d4:	bf00      	nop
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	e000ed00 	.word	0xe000ed00

080089e4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80089ea:	4b1d      	ldr	r3, [pc, #116]	; (8008a60 <SCB_EnableDCache+0x7c>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80089f2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <SCB_EnableDCache+0x7c>)
 80089f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089fc:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	0b5b      	lsrs	r3, r3, #13
 8008a02:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008a06:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	08db      	lsrs	r3, r3, #3
 8008a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a10:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008a1a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008a20:	490f      	ldr	r1, [pc, #60]	; (8008a60 <SCB_EnableDCache+0x7c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	1e5a      	subs	r2, r3, #1
 8008a2c:	60ba      	str	r2, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1ef      	bne.n	8008a12 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	1e5a      	subs	r2, r3, #1
 8008a36:	60fa      	str	r2, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e5      	bne.n	8008a08 <SCB_EnableDCache+0x24>
 8008a3c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008a40:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <SCB_EnableDCache+0x7c>)
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <SCB_EnableDCache+0x7c>)
 8008a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a4a:	6153      	str	r3, [r2, #20]
 8008a4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008a50:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	e000ed00 	.word	0xe000ed00

08008a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008a68:	f7ff ff9c 	bl	80089a4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008a6c:	f7ff ffba 	bl	80089e4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008a70:	f7f8 fc2a 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008a74:	f000 f840 	bl	8008af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008a78:	f7ff fda2 	bl	80085c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8008a7c:	f7ff fc88 	bl	8008390 <MX_DMA_Init>
  MX_ADC1_Init();
 8008a80:	f7ff faba 	bl	8007ff8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8008a84:	f000 fe3c 	bl	8009700 <MX_TIM1_Init>
  MX_TIM2_Init();
 8008a88:	f000 ff0c 	bl	80098a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008a8c:	f000 ffa2 	bl	80099d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008a90:	f001 f81c 	bl	8009acc <MX_TIM4_Init>
  MX_TIM7_Init();
 8008a94:	f001 f896 	bl	8009bc4 <MX_TIM7_Init>
  MX_TIM8_Init();
 8008a98:	f001 f8ca 	bl	8009c30 <MX_TIM8_Init>
  MX_TIM9_Init();
 8008a9c:	f001 f982 	bl	8009da4 <MX_TIM9_Init>
  MX_TIM10_Init();
 8008aa0:	f001 f9ee 	bl	8009e80 <MX_TIM10_Init>
  MX_TIM11_Init();
 8008aa4:	f001 fa3a 	bl	8009f1c <MX_TIM11_Init>
  MX_TIM12_Init();
 8008aa8:	f001 fa86 	bl	8009fb8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8008aac:	f001 faf2 	bl	800a094 <MX_TIM13_Init>
  MX_TIM14_Init();
 8008ab0:	f001 fb3e 	bl	800a130 <MX_TIM14_Init>
  MX_I2C2_Init();
 8008ab4:	f7ff fec0 	bl	8008838 <MX_I2C2_Init>
  MX_SPI1_Init();
 8008ab8:	f000 f8f4 	bl	8008ca4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8008abc:	f000 f930 	bl	8008d20 <MX_SPI3_Init>
  MX_SPI4_Init();
 8008ac0:	f000 f96c 	bl	8008d9c <MX_SPI4_Init>
  MX_SPI6_Init();
 8008ac4:	f000 f9a8 	bl	8008e18 <MX_SPI6_Init>
  MX_UART4_Init();
 8008ac8:	f001 fe9e 	bl	800a808 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8008acc:	f001 fecc 	bl	800a868 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008ad0:	f001 fefa 	bl	800a8c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 8008ad4:	f005 f9f8 	bl	800dec8 <my_UsartInit>

	/*******************************Analog init***************************/
	AnaBuiltInStart();
 8008ad8:	f003 fd8a 	bl	800c5f0 <AnaBuiltInStart>

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 8008adc:	f002 fa5a 	bl	800af94 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 8008ae0:	f004 f914 	bl	800cd0c <PWMBuiltIn_init>
#if (PWMBOARDSPI_NUM>0)
	PWMBoardSPI_init();
#endif

#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
 8008ae4:	f003 fa8c 	bl	800c000 <PWMBoardI2C_init>
#endif

	/******************************* setup() function**************************/
	setup();
 8008ae8:	f005 fd92 	bl	800e610 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008aec:	f7ff fce4 	bl	80084b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008af0:	f7fe fa7b 	bl	8006fea <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008af4:	e7fe      	b.n	8008af4 <main+0x90>
	...

08008af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b0b8      	sub	sp, #224	; 0xe0
 8008afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008afe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008b02:	2234      	movs	r2, #52	; 0x34
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f008 ffb3 	bl	8011a72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008b0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	605a      	str	r2, [r3, #4]
 8008b16:	609a      	str	r2, [r3, #8]
 8008b18:	60da      	str	r2, [r3, #12]
 8008b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008b1c:	f107 0308 	add.w	r3, r7, #8
 8008b20:	2290      	movs	r2, #144	; 0x90
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f008 ffa4 	bl	8011a72 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b2a:	4b3c      	ldr	r3, [pc, #240]	; (8008c1c <SystemClock_Config+0x124>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	4a3b      	ldr	r2, [pc, #236]	; (8008c1c <SystemClock_Config+0x124>)
 8008b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b34:	6413      	str	r3, [r2, #64]	; 0x40
 8008b36:	4b39      	ldr	r3, [pc, #228]	; (8008c1c <SystemClock_Config+0x124>)
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3e:	607b      	str	r3, [r7, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b42:	4b37      	ldr	r3, [pc, #220]	; (8008c20 <SystemClock_Config+0x128>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a36      	ldr	r2, [pc, #216]	; (8008c20 <SystemClock_Config+0x128>)
 8008b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	4b34      	ldr	r3, [pc, #208]	; (8008c20 <SystemClock_Config+0x128>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b60:	2301      	movs	r3, #1
 8008b62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008b66:	2310      	movs	r3, #16
 8008b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008b72:	2300      	movs	r3, #0
 8008b74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008b78:	2308      	movs	r3, #8
 8008b7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008b7e:	23d8      	movs	r3, #216	; 0xd8
 8008b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008b84:	2302      	movs	r3, #2
 8008b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fa fbef 	bl	8003378 <HAL_RCC_OscConfig>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008ba0:	f000 f878 	bl	8008c94 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008ba4:	f7fa fb98 	bl	80032d8 <HAL_PWREx_EnableOverDrive>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008bae:	f000 f871 	bl	8008c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008bb2:	230f      	movs	r3, #15
 8008bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008bc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008bd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008bd8:	2107      	movs	r1, #7
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fa fe3e 	bl	800385c <HAL_RCC_ClockConfig>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008be6:	f000 f855 	bl	8008c94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8008bea:	f248 3340 	movw	r3, #33600	; 0x8340
 8008bee:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008c00:	f107 0308 	add.w	r3, r7, #8
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fb f829 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8008c10:	f000 f840 	bl	8008c94 <Error_Handler>
  }
}
 8008c14:	bf00      	nop
 8008c16:	37e0      	adds	r7, #224	; 0xe0
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40007000 	.word	0x40007000

08008c24 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
#if (ADBOARD_NUM>0)
	ret=ADBoard_SPICallback(hspi);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f002 f8ab 	bl	800ad8c <ADBoard_SPICallback>
 8008c36:	60f8      	str	r0, [r7, #12]
#endif

}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(GPIO_Pin);
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f002 f85f 	bl	800ad14 <ADBoard_BUSYCallback>
 8008c56:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_GPIO_EXTI_Callback+0x26>
		interruptCallback(GPIO_Pin);
 8008c5e:	88fb      	ldrh	r3, [r7, #6]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f003 fb7a 	bl	800c35a <interruptCallback>
}
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a04      	ldr	r2, [pc, #16]	; (8008c90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d101      	bne.n	8008c86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008c82:	f7f8 fb2f 	bl	80012e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	40000c00 	.word	0x40000c00

08008c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008c98:	bf00      	nop
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
	...

08008ca4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008ca8:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008caa:	4a1c      	ldr	r2, [pc, #112]	; (8008d1c <MX_SPI1_Init+0x78>)
 8008cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008cae:	4b1a      	ldr	r3, [pc, #104]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008cb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008cb6:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8008cbc:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cbe:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008cc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008cc4:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008cca:	4b13      	ldr	r3, [pc, #76]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008cd0:	4b11      	ldr	r3, [pc, #68]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008cd8:	4b0f      	ldr	r3, [pc, #60]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cda:	2218      	movs	r2, #24
 8008cdc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008cde:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cea:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008cf0:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cf2:	2207      	movs	r2, #7
 8008cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008cf6:	4b08      	ldr	r3, [pc, #32]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008d02:	4805      	ldr	r0, [pc, #20]	; (8008d18 <MX_SPI1_Init+0x74>)
 8008d04:	f7fb fbd0 	bl	80044a8 <HAL_SPI_Init>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008d0e:	f7ff ffc1 	bl	8008c94 <Error_Handler>
  }

}
 8008d12:	bf00      	nop
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20009828 	.word	0x20009828
 8008d1c:	40013000 	.word	0x40013000

08008d20 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008d24:	4b1b      	ldr	r3, [pc, #108]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d26:	4a1c      	ldr	r2, [pc, #112]	; (8008d98 <MX_SPI3_Init+0x78>)
 8008d28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008d2a:	4b1a      	ldr	r3, [pc, #104]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008d30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008d32:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8008d38:	4b16      	ldr	r3, [pc, #88]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d3a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008d3e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008d40:	4b14      	ldr	r3, [pc, #80]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d42:	2202      	movs	r2, #2
 8008d44:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008d46:	4b13      	ldr	r3, [pc, #76]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008d4c:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d52:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008d54:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d56:	2210      	movs	r2, #16
 8008d58:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d5a:	4b0e      	ldr	r3, [pc, #56]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d60:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d66:	4b0b      	ldr	r3, [pc, #44]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008d6c:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d6e:	2207      	movs	r2, #7
 8008d70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008d72:	4b08      	ldr	r3, [pc, #32]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008d78:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008d7e:	4805      	ldr	r0, [pc, #20]	; (8008d94 <MX_SPI3_Init+0x74>)
 8008d80:	f7fb fb92 	bl	80044a8 <HAL_SPI_Init>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008d8a:	f7ff ff83 	bl	8008c94 <Error_Handler>
  }

}
 8008d8e:	bf00      	nop
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	200096a0 	.word	0x200096a0
 8008d98:	40003c00 	.word	0x40003c00

08008d9c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8008da0:	4b1b      	ldr	r3, [pc, #108]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008da2:	4a1c      	ldr	r2, [pc, #112]	; (8008e14 <MX_SPI4_Init+0x78>)
 8008da4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008da8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008dac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8008dae:	4b18      	ldr	r3, [pc, #96]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8008db4:	4b16      	ldr	r3, [pc, #88]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008db6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008dba:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dbc:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008dc8:	4b11      	ldr	r3, [pc, #68]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dce:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8008dd0:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008dd2:	2208      	movs	r2, #8
 8008dd4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008dd6:	4b0e      	ldr	r3, [pc, #56]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008de2:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8008de8:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008dea:	2207      	movs	r2, #7
 8008dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008dee:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008df4:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008df6:	2208      	movs	r2, #8
 8008df8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8008dfa:	4805      	ldr	r0, [pc, #20]	; (8008e10 <MX_SPI4_Init+0x74>)
 8008dfc:	f7fb fb54 	bl	80044a8 <HAL_SPI_Init>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8008e06:	f7ff ff45 	bl	8008c94 <Error_Handler>
  }

}
 8008e0a:	bf00      	nop
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	200097c4 	.word	0x200097c4
 8008e14:	40013400 	.word	0x40013400

08008e18 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8008e1c:	4b1b      	ldr	r3, [pc, #108]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e1e:	4a1c      	ldr	r2, [pc, #112]	; (8008e90 <MX_SPI6_Init+0x78>)
 8008e20:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8008e22:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e28:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8008e2a:	4b18      	ldr	r3, [pc, #96]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8008e30:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e32:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008e36:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008e38:	4b14      	ldr	r3, [pc, #80]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008e3e:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8008e44:	4b11      	ldr	r3, [pc, #68]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e4a:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8008e4c:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e4e:	2230      	movs	r2, #48	; 0x30
 8008e50:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e52:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e58:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8008e64:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e66:	2207      	movs	r2, #7
 8008e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008e6a:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e72:	2208      	movs	r2, #8
 8008e74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8008e76:	4805      	ldr	r0, [pc, #20]	; (8008e8c <MX_SPI6_Init+0x74>)
 8008e78:	f7fb fb16 	bl	80044a8 <HAL_SPI_Init>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8008e82:	f7ff ff07 	bl	8008c94 <Error_Handler>
  }

}
 8008e86:	bf00      	nop
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	2000963c 	.word	0x2000963c
 8008e90:	40015400 	.word	0x40015400

08008e94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b092      	sub	sp, #72	; 0x48
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	605a      	str	r2, [r3, #4]
 8008ea6:	609a      	str	r2, [r3, #8]
 8008ea8:	60da      	str	r2, [r3, #12]
 8008eaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a59      	ldr	r2, [pc, #356]	; (8009018 <HAL_SPI_MspInit+0x184>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	f040 80c0 	bne.w	8009038 <HAL_SPI_MspInit+0x1a4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008eb8:	4b58      	ldr	r3, [pc, #352]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ebc:	4a57      	ldr	r2, [pc, #348]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008ebe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8008ec4:	4b55      	ldr	r3, [pc, #340]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ed0:	4b52      	ldr	r3, [pc, #328]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed4:	4a51      	ldr	r2, [pc, #324]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008ed6:	f043 0308 	orr.w	r3, r3, #8
 8008eda:	6313      	str	r3, [r2, #48]	; 0x30
 8008edc:	4b4f      	ldr	r3, [pc, #316]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008ee8:	4b4c      	ldr	r3, [pc, #304]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eec:	4a4b      	ldr	r2, [pc, #300]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8008ef4:	4b49      	ldr	r3, [pc, #292]	; (800901c <HAL_SPI_MspInit+0x188>)
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration    
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008f00:	2380      	movs	r3, #128	; 0x80
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f04:	2302      	movs	r3, #2
 8008f06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008f10:	2305      	movs	r3, #5
 8008f12:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4841      	ldr	r0, [pc, #260]	; (8009020 <HAL_SPI_MspInit+0x18c>)
 8008f1c:	f7f9 fb0e 	bl	800253c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8008f20:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008f24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f26:	2302      	movs	r3, #2
 8008f28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008f32:	2305      	movs	r3, #5
 8008f34:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008f36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4839      	ldr	r0, [pc, #228]	; (8009024 <HAL_SPI_MspInit+0x190>)
 8008f3e:	f7f9 fafd 	bl	800253c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8008f42:	4b39      	ldr	r3, [pc, #228]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f44:	4a39      	ldr	r2, [pc, #228]	; (800902c <HAL_SPI_MspInit+0x198>)
 8008f46:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8008f48:	4b37      	ldr	r3, [pc, #220]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f4a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008f4e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f50:	4b35      	ldr	r3, [pc, #212]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f56:	4b34      	ldr	r3, [pc, #208]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f5c:	4b32      	ldr	r3, [pc, #200]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f62:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008f64:	4b30      	ldr	r3, [pc, #192]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f6a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008f6c:	4b2e      	ldr	r3, [pc, #184]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008f72:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8008f74:	4b2c      	ldr	r3, [pc, #176]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008f7a:	4b2b      	ldr	r3, [pc, #172]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008f80:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008f82:	4b29      	ldr	r3, [pc, #164]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008f88:	4827      	ldr	r0, [pc, #156]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f8a:	f7f8 fecf 	bl	8001d2c <HAL_DMA_Init>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <HAL_SPI_MspInit+0x104>
    {
      Error_Handler();
 8008f94:	f7ff fe7e 	bl	8008c94 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a23      	ldr	r2, [pc, #140]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008f9c:	659a      	str	r2, [r3, #88]	; 0x58
 8008f9e:	4a22      	ldr	r2, [pc, #136]	; (8009028 <HAL_SPI_MspInit+0x194>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8008fa4:	4b22      	ldr	r3, [pc, #136]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fa6:	4a23      	ldr	r2, [pc, #140]	; (8009034 <HAL_SPI_MspInit+0x1a0>)
 8008fa8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8008faa:	4b21      	ldr	r3, [pc, #132]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fac:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008fb0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008fb2:	4b1f      	ldr	r3, [pc, #124]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fb4:	2240      	movs	r2, #64	; 0x40
 8008fb6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008fbe:	4b1c      	ldr	r3, [pc, #112]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fc4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008fc6:	4b1a      	ldr	r3, [pc, #104]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fcc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008fce:	4b18      	ldr	r3, [pc, #96]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008fd4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8008fd6:	4b16      	ldr	r3, [pc, #88]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008fdc:	4b14      	ldr	r3, [pc, #80]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008fe2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008fe4:	4b12      	ldr	r3, [pc, #72]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008fea:	4811      	ldr	r0, [pc, #68]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008fec:	f7f8 fe9e 	bl	8001d2c <HAL_DMA_Init>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8008ff6:	f7ff fe4d 	bl	8008c94 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8008ffe:	655a      	str	r2, [r3, #84]	; 0x54
 8009000:	4a0b      	ldr	r2, [pc, #44]	; (8009030 <HAL_SPI_MspInit+0x19c>)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8009006:	2200      	movs	r2, #0
 8009008:	2105      	movs	r1, #5
 800900a:	2023      	movs	r0, #35	; 0x23
 800900c:	f7f8 fe64 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009010:	2023      	movs	r0, #35	; 0x23
 8009012:	f7f8 fe7d 	bl	8001d10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8009016:	e19b      	b.n	8009350 <HAL_SPI_MspInit+0x4bc>
 8009018:	40013000 	.word	0x40013000
 800901c:	40023800 	.word	0x40023800
 8009020:	40020c00 	.word	0x40020c00
 8009024:	40021800 	.word	0x40021800
 8009028:	2000988c 	.word	0x2000988c
 800902c:	40026440 	.word	0x40026440
 8009030:	200098ec 	.word	0x200098ec
 8009034:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a9b      	ldr	r2, [pc, #620]	; (80092ac <HAL_SPI_MspInit+0x418>)
 800903e:	4293      	cmp	r3, r2
 8009040:	f040 80a6 	bne.w	8009190 <HAL_SPI_MspInit+0x2fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009044:	4b9a      	ldr	r3, [pc, #616]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 8009046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009048:	4a99      	ldr	r2, [pc, #612]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 800904a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800904e:	6413      	str	r3, [r2, #64]	; 0x40
 8009050:	4b97      	ldr	r3, [pc, #604]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 8009052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800905c:	4b94      	ldr	r3, [pc, #592]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	4a93      	ldr	r2, [pc, #588]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 8009062:	f043 0302 	orr.w	r3, r3, #2
 8009066:	6313      	str	r3, [r2, #48]	; 0x30
 8009068:	4b91      	ldr	r3, [pc, #580]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	623b      	str	r3, [r7, #32]
 8009072:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009074:	4b8e      	ldr	r3, [pc, #568]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	4a8d      	ldr	r2, [pc, #564]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 800907a:	f043 0304 	orr.w	r3, r3, #4
 800907e:	6313      	str	r3, [r2, #48]	; 0x30
 8009080:	4b8b      	ldr	r3, [pc, #556]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 8009082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009084:	f003 0304 	and.w	r3, r3, #4
 8009088:	61fb      	str	r3, [r7, #28]
 800908a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800908c:	2304      	movs	r3, #4
 800908e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009090:	2302      	movs	r3, #2
 8009092:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009094:	2300      	movs	r3, #0
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009098:	2303      	movs	r3, #3
 800909a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800909c:	2307      	movs	r3, #7
 800909e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090a4:	4619      	mov	r1, r3
 80090a6:	4883      	ldr	r0, [pc, #524]	; (80092b4 <HAL_SPI_MspInit+0x420>)
 80090a8:	f7f9 fa48 	bl	800253c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80090ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80090b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b2:	2302      	movs	r3, #2
 80090b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090ba:	2303      	movs	r3, #3
 80090bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80090be:	2306      	movs	r3, #6
 80090c0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090c6:	4619      	mov	r1, r3
 80090c8:	487b      	ldr	r0, [pc, #492]	; (80092b8 <HAL_SPI_MspInit+0x424>)
 80090ca:	f7f9 fa37 	bl	800253c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80090ce:	4b7b      	ldr	r3, [pc, #492]	; (80092bc <HAL_SPI_MspInit+0x428>)
 80090d0:	4a7b      	ldr	r2, [pc, #492]	; (80092c0 <HAL_SPI_MspInit+0x42c>)
 80090d2:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80090d4:	4b79      	ldr	r3, [pc, #484]	; (80092bc <HAL_SPI_MspInit+0x428>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80090da:	4b78      	ldr	r3, [pc, #480]	; (80092bc <HAL_SPI_MspInit+0x428>)
 80090dc:	2200      	movs	r2, #0
 80090de:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80090e0:	4b76      	ldr	r3, [pc, #472]	; (80092bc <HAL_SPI_MspInit+0x428>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090e6:	4b75      	ldr	r3, [pc, #468]	; (80092bc <HAL_SPI_MspInit+0x428>)
 80090e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090ec:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80090ee:	4b73      	ldr	r3, [pc, #460]	; (80092bc <HAL_SPI_MspInit+0x428>)
 80090f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090f4:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80090f6:	4b71      	ldr	r3, [pc, #452]	; (80092bc <HAL_SPI_MspInit+0x428>)
 80090f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80090fc:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80090fe:	4b6f      	ldr	r3, [pc, #444]	; (80092bc <HAL_SPI_MspInit+0x428>)
 8009100:	2200      	movs	r2, #0
 8009102:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009104:	4b6d      	ldr	r3, [pc, #436]	; (80092bc <HAL_SPI_MspInit+0x428>)
 8009106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800910a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800910c:	4b6b      	ldr	r3, [pc, #428]	; (80092bc <HAL_SPI_MspInit+0x428>)
 800910e:	2200      	movs	r2, #0
 8009110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8009112:	486a      	ldr	r0, [pc, #424]	; (80092bc <HAL_SPI_MspInit+0x428>)
 8009114:	f7f8 fe0a 	bl	8001d2c <HAL_DMA_Init>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <HAL_SPI_MspInit+0x28e>
      Error_Handler();
 800911e:	f7ff fdb9 	bl	8008c94 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a65      	ldr	r2, [pc, #404]	; (80092bc <HAL_SPI_MspInit+0x428>)
 8009126:	659a      	str	r2, [r3, #88]	; 0x58
 8009128:	4a64      	ldr	r2, [pc, #400]	; (80092bc <HAL_SPI_MspInit+0x428>)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800912e:	4b65      	ldr	r3, [pc, #404]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009130:	4a65      	ldr	r2, [pc, #404]	; (80092c8 <HAL_SPI_MspInit+0x434>)
 8009132:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8009134:	4b63      	ldr	r3, [pc, #396]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009136:	2200      	movs	r2, #0
 8009138:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800913a:	4b62      	ldr	r3, [pc, #392]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 800913c:	2240      	movs	r2, #64	; 0x40
 800913e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009140:	4b60      	ldr	r3, [pc, #384]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009142:	2200      	movs	r2, #0
 8009144:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009146:	4b5f      	ldr	r3, [pc, #380]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800914c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800914e:	4b5d      	ldr	r3, [pc, #372]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009154:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009156:	4b5b      	ldr	r3, [pc, #364]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800915c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800915e:	4b59      	ldr	r3, [pc, #356]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009160:	2200      	movs	r2, #0
 8009162:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8009164:	4b57      	ldr	r3, [pc, #348]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009166:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800916a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800916c:	4b55      	ldr	r3, [pc, #340]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 800916e:	2200      	movs	r2, #0
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8009172:	4854      	ldr	r0, [pc, #336]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009174:	f7f8 fdda 	bl	8001d2c <HAL_DMA_Init>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <HAL_SPI_MspInit+0x2ee>
      Error_Handler();
 800917e:	f7ff fd89 	bl	8008c94 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a4f      	ldr	r2, [pc, #316]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 8009186:	655a      	str	r2, [r3, #84]	; 0x54
 8009188:	4a4e      	ldr	r2, [pc, #312]	; (80092c4 <HAL_SPI_MspInit+0x430>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800918e:	e0df      	b.n	8009350 <HAL_SPI_MspInit+0x4bc>
  else if(spiHandle->Instance==SPI4)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a4d      	ldr	r2, [pc, #308]	; (80092cc <HAL_SPI_MspInit+0x438>)
 8009196:	4293      	cmp	r3, r2
 8009198:	f040 80a4 	bne.w	80092e4 <HAL_SPI_MspInit+0x450>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800919c:	4b44      	ldr	r3, [pc, #272]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 800919e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a0:	4a43      	ldr	r2, [pc, #268]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 80091a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091a6:	6453      	str	r3, [r2, #68]	; 0x44
 80091a8:	4b41      	ldr	r3, [pc, #260]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 80091aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091b0:	61bb      	str	r3, [r7, #24]
 80091b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80091b4:	4b3e      	ldr	r3, [pc, #248]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 80091b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b8:	4a3d      	ldr	r2, [pc, #244]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 80091ba:	f043 0310 	orr.w	r3, r3, #16
 80091be:	6313      	str	r3, [r2, #48]	; 0x30
 80091c0:	4b3b      	ldr	r3, [pc, #236]	; (80092b0 <HAL_SPI_MspInit+0x41c>)
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	f003 0310 	and.w	r3, r3, #16
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 80091cc:	f246 0304 	movw	r3, #24580	; 0x6004
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091d2:	2302      	movs	r3, #2
 80091d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091da:	2303      	movs	r3, #3
 80091dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80091de:	2305      	movs	r3, #5
 80091e0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80091e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091e6:	4619      	mov	r1, r3
 80091e8:	4839      	ldr	r0, [pc, #228]	; (80092d0 <HAL_SPI_MspInit+0x43c>)
 80091ea:	f7f9 f9a7 	bl	800253c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80091ee:	4b39      	ldr	r3, [pc, #228]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 80091f0:	4a39      	ldr	r2, [pc, #228]	; (80092d8 <HAL_SPI_MspInit+0x444>)
 80091f2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80091f4:	4b37      	ldr	r3, [pc, #220]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 80091f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80091fa:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80091fc:	4b35      	ldr	r3, [pc, #212]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 80091fe:	2200      	movs	r2, #0
 8009200:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009202:	4b34      	ldr	r3, [pc, #208]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 8009204:	2200      	movs	r2, #0
 8009206:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009208:	4b32      	ldr	r3, [pc, #200]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 800920a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800920e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009210:	4b30      	ldr	r3, [pc, #192]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 8009212:	2200      	movs	r2, #0
 8009214:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009216:	4b2f      	ldr	r3, [pc, #188]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 8009218:	2200      	movs	r2, #0
 800921a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800921c:	4b2d      	ldr	r3, [pc, #180]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 800921e:	2200      	movs	r2, #0
 8009220:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009222:	4b2c      	ldr	r3, [pc, #176]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 8009224:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009228:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800922a:	4b2a      	ldr	r3, [pc, #168]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 800922c:	2200      	movs	r2, #0
 800922e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8009230:	4828      	ldr	r0, [pc, #160]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 8009232:	f7f8 fd7b 	bl	8001d2c <HAL_DMA_Init>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <HAL_SPI_MspInit+0x3ac>
      Error_Handler();
 800923c:	f7ff fd2a 	bl	8008c94 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a24      	ldr	r2, [pc, #144]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 8009244:	659a      	str	r2, [r3, #88]	; 0x58
 8009246:	4a23      	ldr	r2, [pc, #140]	; (80092d4 <HAL_SPI_MspInit+0x440>)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800924c:	4b23      	ldr	r3, [pc, #140]	; (80092dc <HAL_SPI_MspInit+0x448>)
 800924e:	4a24      	ldr	r2, [pc, #144]	; (80092e0 <HAL_SPI_MspInit+0x44c>)
 8009250:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8009252:	4b22      	ldr	r3, [pc, #136]	; (80092dc <HAL_SPI_MspInit+0x448>)
 8009254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009258:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800925a:	4b20      	ldr	r3, [pc, #128]	; (80092dc <HAL_SPI_MspInit+0x448>)
 800925c:	2240      	movs	r2, #64	; 0x40
 800925e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009260:	4b1e      	ldr	r3, [pc, #120]	; (80092dc <HAL_SPI_MspInit+0x448>)
 8009262:	2200      	movs	r2, #0
 8009264:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <HAL_SPI_MspInit+0x448>)
 8009268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800926c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800926e:	4b1b      	ldr	r3, [pc, #108]	; (80092dc <HAL_SPI_MspInit+0x448>)
 8009270:	2200      	movs	r2, #0
 8009272:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009274:	4b19      	ldr	r3, [pc, #100]	; (80092dc <HAL_SPI_MspInit+0x448>)
 8009276:	2200      	movs	r2, #0
 8009278:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800927a:	4b18      	ldr	r3, [pc, #96]	; (80092dc <HAL_SPI_MspInit+0x448>)
 800927c:	2200      	movs	r2, #0
 800927e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009280:	4b16      	ldr	r3, [pc, #88]	; (80092dc <HAL_SPI_MspInit+0x448>)
 8009282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009286:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009288:	4b14      	ldr	r3, [pc, #80]	; (80092dc <HAL_SPI_MspInit+0x448>)
 800928a:	2200      	movs	r2, #0
 800928c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800928e:	4813      	ldr	r0, [pc, #76]	; (80092dc <HAL_SPI_MspInit+0x448>)
 8009290:	f7f8 fd4c 	bl	8001d2c <HAL_DMA_Init>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <HAL_SPI_MspInit+0x40a>
      Error_Handler();
 800929a:	f7ff fcfb 	bl	8008c94 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a0e      	ldr	r2, [pc, #56]	; (80092dc <HAL_SPI_MspInit+0x448>)
 80092a2:	655a      	str	r2, [r3, #84]	; 0x54
 80092a4:	4a0d      	ldr	r2, [pc, #52]	; (80092dc <HAL_SPI_MspInit+0x448>)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80092aa:	e051      	b.n	8009350 <HAL_SPI_MspInit+0x4bc>
 80092ac:	40003c00 	.word	0x40003c00
 80092b0:	40023800 	.word	0x40023800
 80092b4:	40020400 	.word	0x40020400
 80092b8:	40020800 	.word	0x40020800
 80092bc:	2000994c 	.word	0x2000994c
 80092c0:	40026010 	.word	0x40026010
 80092c4:	20009704 	.word	0x20009704
 80092c8:	40026088 	.word	0x40026088
 80092cc:	40013400 	.word	0x40013400
 80092d0:	40021000 	.word	0x40021000
 80092d4:	200095dc 	.word	0x200095dc
 80092d8:	40026410 	.word	0x40026410
 80092dc:	20009764 	.word	0x20009764
 80092e0:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1b      	ldr	r2, [pc, #108]	; (8009358 <HAL_SPI_MspInit+0x4c4>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d130      	bne.n	8009350 <HAL_SPI_MspInit+0x4bc>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80092ee:	4b1b      	ldr	r3, [pc, #108]	; (800935c <HAL_SPI_MspInit+0x4c8>)
 80092f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f2:	4a1a      	ldr	r2, [pc, #104]	; (800935c <HAL_SPI_MspInit+0x4c8>)
 80092f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092f8:	6453      	str	r3, [r2, #68]	; 0x44
 80092fa:	4b18      	ldr	r3, [pc, #96]	; (800935c <HAL_SPI_MspInit+0x4c8>)
 80092fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009302:	613b      	str	r3, [r7, #16]
 8009304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009306:	4b15      	ldr	r3, [pc, #84]	; (800935c <HAL_SPI_MspInit+0x4c8>)
 8009308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930a:	4a14      	ldr	r2, [pc, #80]	; (800935c <HAL_SPI_MspInit+0x4c8>)
 800930c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009310:	6313      	str	r3, [r2, #48]	; 0x30
 8009312:	4b12      	ldr	r3, [pc, #72]	; (800935c <HAL_SPI_MspInit+0x4c8>)
 8009314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800931e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009322:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009324:	2302      	movs	r3, #2
 8009326:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009328:	2300      	movs	r3, #0
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800932c:	2303      	movs	r3, #3
 800932e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8009330:	2305      	movs	r3, #5
 8009332:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009334:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009338:	4619      	mov	r1, r3
 800933a:	4809      	ldr	r0, [pc, #36]	; (8009360 <HAL_SPI_MspInit+0x4cc>)
 800933c:	f7f9 f8fe 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8009340:	2200      	movs	r2, #0
 8009342:	2105      	movs	r1, #5
 8009344:	2056      	movs	r0, #86	; 0x56
 8009346:	f7f8 fcc7 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 800934a:	2056      	movs	r0, #86	; 0x56
 800934c:	f7f8 fce0 	bl	8001d10 <HAL_NVIC_EnableIRQ>
}
 8009350:	bf00      	nop
 8009352:	3748      	adds	r7, #72	; 0x48
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	40015400 	.word	0x40015400
 800935c:	40023800 	.word	0x40023800
 8009360:	40021800 	.word	0x40021800

08009364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800936a:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <HAL_MspInit+0x4c>)
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	4a10      	ldr	r2, [pc, #64]	; (80093b0 <HAL_MspInit+0x4c>)
 8009370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009374:	6413      	str	r3, [r2, #64]	; 0x40
 8009376:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <HAL_MspInit+0x4c>)
 8009378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800937e:	607b      	str	r3, [r7, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009382:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <HAL_MspInit+0x4c>)
 8009384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009386:	4a0a      	ldr	r2, [pc, #40]	; (80093b0 <HAL_MspInit+0x4c>)
 8009388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800938c:	6453      	str	r3, [r2, #68]	; 0x44
 800938e:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <HAL_MspInit+0x4c>)
 8009390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800939a:	2200      	movs	r2, #0
 800939c:	210f      	movs	r1, #15
 800939e:	f06f 0001 	mvn.w	r0, #1
 80093a2:	f7f8 fc99 	bl	8001cd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	40023800 	.word	0x40023800

080093b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08c      	sub	sp, #48	; 0x30
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 80093c4:	2200      	movs	r2, #0
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	2032      	movs	r0, #50	; 0x32
 80093ca:	f7f8 fc85 	bl	8001cd8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80093ce:	2032      	movs	r0, #50	; 0x32
 80093d0:	f7f8 fc9e 	bl	8001d10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80093d4:	4b1f      	ldr	r3, [pc, #124]	; (8009454 <HAL_InitTick+0xa0>)
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	4a1e      	ldr	r2, [pc, #120]	; (8009454 <HAL_InitTick+0xa0>)
 80093da:	f043 0308 	orr.w	r3, r3, #8
 80093de:	6413      	str	r3, [r2, #64]	; 0x40
 80093e0:	4b1c      	ldr	r3, [pc, #112]	; (8009454 <HAL_InitTick+0xa0>)
 80093e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80093ec:	f107 0210 	add.w	r2, r7, #16
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fa fbfe 	bl	8003bf8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80093fc:	f7fa fbd4 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 8009400:	4603      	mov	r3, r0
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009408:	4a13      	ldr	r2, [pc, #76]	; (8009458 <HAL_InitTick+0xa4>)
 800940a:	fba2 2303 	umull	r2, r3, r2, r3
 800940e:	0c9b      	lsrs	r3, r3, #18
 8009410:	3b01      	subs	r3, #1
 8009412:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8009414:	4b11      	ldr	r3, [pc, #68]	; (800945c <HAL_InitTick+0xa8>)
 8009416:	4a12      	ldr	r2, [pc, #72]	; (8009460 <HAL_InitTick+0xac>)
 8009418:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800941a:	4b10      	ldr	r3, [pc, #64]	; (800945c <HAL_InitTick+0xa8>)
 800941c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009420:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8009422:	4a0e      	ldr	r2, [pc, #56]	; (800945c <HAL_InitTick+0xa8>)
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8009428:	4b0c      	ldr	r3, [pc, #48]	; (800945c <HAL_InitTick+0xa8>)
 800942a:	2200      	movs	r2, #0
 800942c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800942e:	4b0b      	ldr	r3, [pc, #44]	; (800945c <HAL_InitTick+0xa8>)
 8009430:	2200      	movs	r2, #0
 8009432:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8009434:	4809      	ldr	r0, [pc, #36]	; (800945c <HAL_InitTick+0xa8>)
 8009436:	f7fb fdcf 	bl	8004fd8 <HAL_TIM_Base_Init>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8009440:	4806      	ldr	r0, [pc, #24]	; (800945c <HAL_InitTick+0xa8>)
 8009442:	f7fb fdf5 	bl	8005030 <HAL_TIM_Base_Start_IT>
 8009446:	4603      	mov	r3, r0
 8009448:	e000      	b.n	800944c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
}
 800944c:	4618      	mov	r0, r3
 800944e:	3730      	adds	r7, #48	; 0x30
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	40023800 	.word	0x40023800
 8009458:	431bde83 	.word	0x431bde83
 800945c:	200099ac 	.word	0x200099ac
 8009460:	40000c00 	.word	0x40000c00

08009464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009468:	bf00      	nop
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009472:	b480      	push	{r7}
 8009474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009476:	e7fe      	b.n	8009476 <HardFault_Handler+0x4>

08009478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009478:	b480      	push	{r7}
 800947a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800947c:	e7fe      	b.n	800947c <MemManage_Handler+0x4>

0800947e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800947e:	b480      	push	{r7}
 8009480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009482:	e7fe      	b.n	8009482 <BusFault_Handler+0x4>

08009484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009488:	e7fe      	b.n	8009488 <UsageFault_Handler+0x4>

0800948a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800948a:	b480      	push	{r7}
 800948c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800948e:	bf00      	nop
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800949c:	2001      	movs	r0, #1
 800949e:	f7f9 fa11 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80094a2:	bf00      	nop
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80094aa:	2002      	movs	r0, #2
 80094ac:	f7f9 fa0a 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80094b0:	bf00      	nop
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80094b8:	2004      	movs	r0, #4
 80094ba:	f7f9 fa03 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80094be:	bf00      	nop
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80094c6:	2008      	movs	r0, #8
 80094c8:	f7f9 f9fc 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80094cc:	bf00      	nop
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80094d4:	2010      	movs	r0, #16
 80094d6:	f7f9 f9f5 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80094da:	bf00      	nop
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80094e4:	4802      	ldr	r0, [pc, #8]	; (80094f0 <DMA1_Stream0_IRQHandler+0x10>)
 80094e6:	f7f8 fdc1 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80094ea:	bf00      	nop
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	2000994c 	.word	0x2000994c

080094f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80094f8:	4802      	ldr	r0, [pc, #8]	; (8009504 <DMA1_Stream1_IRQHandler+0x10>)
 80094fa:	f7f8 fdb7 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80094fe:	bf00      	nop
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20009d4c 	.word	0x20009d4c

08009508 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800950c:	4802      	ldr	r0, [pc, #8]	; (8009518 <DMA1_Stream2_IRQHandler+0x10>)
 800950e:	f7f8 fdad 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8009512:	bf00      	nop
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20009cec 	.word	0x20009cec

0800951c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009520:	4802      	ldr	r0, [pc, #8]	; (800952c <DMA1_Stream4_IRQHandler+0x10>)
 8009522:	f7f8 fda3 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8009526:	bf00      	nop
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20009e2c 	.word	0x20009e2c

08009530 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8009534:	4802      	ldr	r0, [pc, #8]	; (8009540 <DMA1_Stream5_IRQHandler+0x10>)
 8009536:	f7f8 fd99 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800953a:	bf00      	nop
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20009704 	.word	0x20009704

08009544 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8009548:	2020      	movs	r0, #32
 800954a:	f7f9 f9bb 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800954e:	2040      	movs	r0, #64	; 0x40
 8009550:	f7f9 f9b8 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8009554:	2080      	movs	r0, #128	; 0x80
 8009556:	f7f9 f9b5 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800955a:	bf00      	nop
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009564:	4803      	ldr	r0, [pc, #12]	; (8009574 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8009566:	f7fb fdfd 	bl	8005164 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800956a:	4803      	ldr	r0, [pc, #12]	; (8009578 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800956c:	f7fb fdfa 	bl	8005164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009570:	bf00      	nop
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20009b6c 	.word	0x20009b6c
 8009578:	20009a6c 	.word	0x20009a6c

0800957c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009580:	4802      	ldr	r0, [pc, #8]	; (800958c <SPI1_IRQHandler+0x10>)
 8009582:	f7fb f9af 	bl	80048e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8009586:	bf00      	nop
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20009828 	.word	0x20009828

08009590 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	myUsart1IRQ();
 8009594:	f004 fea8 	bl	800e2e8 <myUsart1IRQ>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009598:	4806      	ldr	r0, [pc, #24]	; (80095b4 <USART1_IRQHandler+0x24>)
 800959a:	f7fc ff01 	bl	80063a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <USART1_IRQHandler+0x24>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	4b03      	ldr	r3, [pc, #12]	; (80095b4 <USART1_IRQHandler+0x24>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f042 0220 	orr.w	r2, r2, #32
 80095ac:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 80095ae:	bf00      	nop
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20009e8c 	.word	0x20009e8c

080095b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	HAL_UART_RxIdleCallback(&huart3);
 80095bc:	4803      	ldr	r0, [pc, #12]	; (80095cc <USART3_IRQHandler+0x14>)
 80095be:	f004 fd35 	bl	800e02c <HAL_UART_RxIdleCallback>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80095c2:	4802      	ldr	r0, [pc, #8]	; (80095cc <USART3_IRQHandler+0x14>)
 80095c4:	f7fc feec 	bl	80063a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80095c8:	bf00      	nop
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20009dac 	.word	0x20009dac

080095d0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80095d4:	4802      	ldr	r0, [pc, #8]	; (80095e0 <DMA1_Stream7_IRQHandler+0x10>)
 80095d6:	f7f8 fd49 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80095da:	bf00      	nop
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	2000957c 	.word	0x2000957c

080095e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80095e8:	4802      	ldr	r0, [pc, #8]	; (80095f4 <TIM5_IRQHandler+0x10>)
 80095ea:	f7fb fdbb 	bl	8005164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80095ee:	bf00      	nop
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	200099ac 	.word	0x200099ac

080095f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	HAL_UART_RxIdleCallback(&huart4);
 80095fc:	4803      	ldr	r0, [pc, #12]	; (800960c <UART4_IRQHandler+0x14>)
 80095fe:	f004 fd15 	bl	800e02c <HAL_UART_RxIdleCallback>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009602:	4802      	ldr	r0, [pc, #8]	; (800960c <UART4_IRQHandler+0x14>)
 8009604:	f7fc fecc 	bl	80063a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8009608:	bf00      	nop
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20009f0c 	.word	0x20009f0c

08009610 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8009614:	4802      	ldr	r0, [pc, #8]	; (8009620 <DMA2_Stream0_IRQHandler+0x10>)
 8009616:	f7f8 fd29 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800961a:	bf00      	nop
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	200095dc 	.word	0x200095dc

08009624 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8009628:	4802      	ldr	r0, [pc, #8]	; (8009634 <DMA2_Stream1_IRQHandler+0x10>)
 800962a:	f7f8 fd1f 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800962e:	bf00      	nop
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20009764 	.word	0x20009764

08009638 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800963c:	4802      	ldr	r0, [pc, #8]	; (8009648 <DMA2_Stream2_IRQHandler+0x10>)
 800963e:	f7f8 fd15 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009642:	bf00      	nop
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	2000988c 	.word	0x2000988c

0800964c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8009650:	4802      	ldr	r0, [pc, #8]	; (800965c <DMA2_Stream3_IRQHandler+0x10>)
 8009652:	f7f8 fd0b 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8009656:	bf00      	nop
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	200098ec 	.word	0x200098ec

08009660 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009664:	4802      	ldr	r0, [pc, #8]	; (8009670 <DMA2_Stream4_IRQHandler+0x10>)
 8009666:	f7f8 fd01 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800966a:	bf00      	nop
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20001420 	.word	0x20001420

08009674 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8009678:	4802      	ldr	r0, [pc, #8]	; (8009684 <SPI6_IRQHandler+0x10>)
 800967a:	f7fb f933 	bl	80048e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 800967e:	bf00      	nop
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	2000963c 	.word	0x2000963c

08009688 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800968c:	f7fd fcd9 	bl	8007042 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009690:	bf00      	nop
 8009692:	bd80      	pop	{r7, pc}

08009694 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009698:	4b15      	ldr	r3, [pc, #84]	; (80096f0 <SystemInit+0x5c>)
 800969a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969e:	4a14      	ldr	r2, [pc, #80]	; (80096f0 <SystemInit+0x5c>)
 80096a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80096a8:	4b12      	ldr	r3, [pc, #72]	; (80096f4 <SystemInit+0x60>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a11      	ldr	r2, [pc, #68]	; (80096f4 <SystemInit+0x60>)
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80096b4:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <SystemInit+0x60>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80096ba:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <SystemInit+0x60>)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	490d      	ldr	r1, [pc, #52]	; (80096f4 <SystemInit+0x60>)
 80096c0:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <SystemInit+0x64>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <SystemInit+0x60>)
 80096c8:	4a0c      	ldr	r2, [pc, #48]	; (80096fc <SystemInit+0x68>)
 80096ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80096cc:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <SystemInit+0x60>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a08      	ldr	r2, [pc, #32]	; (80096f4 <SystemInit+0x60>)
 80096d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80096d8:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <SystemInit+0x60>)
 80096da:	2200      	movs	r2, #0
 80096dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <SystemInit+0x5c>)
 80096e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096e4:	609a      	str	r2, [r3, #8]
#endif
}
 80096e6:	bf00      	nop
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	e000ed00 	.word	0xe000ed00
 80096f4:	40023800 	.word	0x40023800
 80096f8:	fef6ffff 	.word	0xfef6ffff
 80096fc:	24003010 	.word	0x24003010

08009700 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b09a      	sub	sp, #104	; 0x68
 8009704:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009706:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	605a      	str	r2, [r3, #4]
 8009710:	609a      	str	r2, [r3, #8]
 8009712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009714:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	605a      	str	r2, [r3, #4]
 800971e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009720:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	609a      	str	r2, [r3, #8]
 800972c:	60da      	str	r2, [r3, #12]
 800972e:	611a      	str	r2, [r3, #16]
 8009730:	615a      	str	r2, [r3, #20]
 8009732:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009734:	1d3b      	adds	r3, r7, #4
 8009736:	222c      	movs	r2, #44	; 0x2c
 8009738:	2100      	movs	r1, #0
 800973a:	4618      	mov	r0, r3
 800973c:	f008 f999 	bl	8011a72 <memset>

  htim1.Instance = TIM1;
 8009740:	4b56      	ldr	r3, [pc, #344]	; (800989c <MX_TIM1_Init+0x19c>)
 8009742:	4a57      	ldr	r2, [pc, #348]	; (80098a0 <MX_TIM1_Init+0x1a0>)
 8009744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8009746:	4b55      	ldr	r3, [pc, #340]	; (800989c <MX_TIM1_Init+0x19c>)
 8009748:	f245 425f 	movw	r2, #21599	; 0x545f
 800974c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800974e:	4b53      	ldr	r3, [pc, #332]	; (800989c <MX_TIM1_Init+0x19c>)
 8009750:	2200      	movs	r2, #0
 8009752:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8009754:	4b51      	ldr	r3, [pc, #324]	; (800989c <MX_TIM1_Init+0x19c>)
 8009756:	f240 32e7 	movw	r2, #999	; 0x3e7
 800975a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800975c:	4b4f      	ldr	r3, [pc, #316]	; (800989c <MX_TIM1_Init+0x19c>)
 800975e:	2200      	movs	r2, #0
 8009760:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009762:	4b4e      	ldr	r3, [pc, #312]	; (800989c <MX_TIM1_Init+0x19c>)
 8009764:	2200      	movs	r2, #0
 8009766:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009768:	4b4c      	ldr	r3, [pc, #304]	; (800989c <MX_TIM1_Init+0x19c>)
 800976a:	2200      	movs	r2, #0
 800976c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800976e:	484b      	ldr	r0, [pc, #300]	; (800989c <MX_TIM1_Init+0x19c>)
 8009770:	f7fb fc32 	bl	8004fd8 <HAL_TIM_Base_Init>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800977a:	f7ff fa8b 	bl	8008c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800977e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009782:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009784:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009788:	4619      	mov	r1, r3
 800978a:	4844      	ldr	r0, [pc, #272]	; (800989c <MX_TIM1_Init+0x19c>)
 800978c:	f7fb ff22 	bl	80055d4 <HAL_TIM_ConfigClockSource>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8009796:	f7ff fa7d 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800979a:	4840      	ldr	r0, [pc, #256]	; (800989c <MX_TIM1_Init+0x19c>)
 800979c:	f7fb fc72 	bl	8005084 <HAL_TIM_PWM_Init>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80097a6:	f7ff fa75 	bl	8008c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80097aa:	2300      	movs	r3, #0
 80097ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80097ae:	2300      	movs	r3, #0
 80097b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80097b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80097ba:	4619      	mov	r1, r3
 80097bc:	4837      	ldr	r0, [pc, #220]	; (800989c <MX_TIM1_Init+0x19c>)
 80097be:	f7fc fba9 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80097c8:	f7ff fa64 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80097cc:	2360      	movs	r3, #96	; 0x60
 80097ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80097d4:	2300      	movs	r3, #0
 80097d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80097d8:	2300      	movs	r3, #0
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80097dc:	2300      	movs	r3, #0
 80097de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80097e0:	2300      	movs	r3, #0
 80097e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80097e4:	2300      	movs	r3, #0
 80097e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80097e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097ec:	2200      	movs	r2, #0
 80097ee:	4619      	mov	r1, r3
 80097f0:	482a      	ldr	r0, [pc, #168]	; (800989c <MX_TIM1_Init+0x19c>)
 80097f2:	f7fb fdd7 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80097fc:	f7ff fa4a 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009804:	2204      	movs	r2, #4
 8009806:	4619      	mov	r1, r3
 8009808:	4824      	ldr	r0, [pc, #144]	; (800989c <MX_TIM1_Init+0x19c>)
 800980a:	f7fb fdcb 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8009814:	f7ff fa3e 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800981c:	2208      	movs	r2, #8
 800981e:	4619      	mov	r1, r3
 8009820:	481e      	ldr	r0, [pc, #120]	; (800989c <MX_TIM1_Init+0x19c>)
 8009822:	f7fb fdbf 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800982c:	f7ff fa32 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009834:	220c      	movs	r2, #12
 8009836:	4619      	mov	r1, r3
 8009838:	4818      	ldr	r0, [pc, #96]	; (800989c <MX_TIM1_Init+0x19c>)
 800983a:	f7fb fdb3 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8009844:	f7ff fa26 	bl	8008c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009848:	2300      	movs	r3, #0
 800984a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800984c:	2300      	movs	r3, #0
 800984e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800985c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009860:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009866:	2300      	movs	r3, #0
 8009868:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800986a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009874:	2300      	movs	r3, #0
 8009876:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009878:	1d3b      	adds	r3, r7, #4
 800987a:	4619      	mov	r1, r3
 800987c:	4807      	ldr	r0, [pc, #28]	; (800989c <MX_TIM1_Init+0x19c>)
 800987e:	f7fc fba5 	bl	8005fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8009888:	f7ff fa04 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800988c:	4803      	ldr	r0, [pc, #12]	; (800989c <MX_TIM1_Init+0x19c>)
 800988e:	f000 fdb1 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 8009892:	bf00      	nop
 8009894:	3768      	adds	r7, #104	; 0x68
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20009b6c 	.word	0x20009b6c
 80098a0:	40010000 	.word	0x40010000

080098a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08e      	sub	sp, #56	; 0x38
 80098a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098ae:	2200      	movs	r2, #0
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	605a      	str	r2, [r3, #4]
 80098b4:	609a      	str	r2, [r3, #8]
 80098b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098b8:	f107 031c 	add.w	r3, r7, #28
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80098c4:	463b      	mov	r3, r7
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	605a      	str	r2, [r3, #4]
 80098cc:	609a      	str	r2, [r3, #8]
 80098ce:	60da      	str	r2, [r3, #12]
 80098d0:	611a      	str	r2, [r3, #16]
 80098d2:	615a      	str	r2, [r3, #20]
 80098d4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80098d6:	4b3e      	ldr	r3, [pc, #248]	; (80099d0 <MX_TIM2_Init+0x12c>)
 80098d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80098dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80098de:	4b3c      	ldr	r3, [pc, #240]	; (80099d0 <MX_TIM2_Init+0x12c>)
 80098e0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80098e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098e6:	4b3a      	ldr	r3, [pc, #232]	; (80099d0 <MX_TIM2_Init+0x12c>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80098ec:	4b38      	ldr	r3, [pc, #224]	; (80099d0 <MX_TIM2_Init+0x12c>)
 80098ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80098f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098f4:	4b36      	ldr	r3, [pc, #216]	; (80099d0 <MX_TIM2_Init+0x12c>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098fa:	4b35      	ldr	r3, [pc, #212]	; (80099d0 <MX_TIM2_Init+0x12c>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009900:	4833      	ldr	r0, [pc, #204]	; (80099d0 <MX_TIM2_Init+0x12c>)
 8009902:	f7fb fb69 	bl	8004fd8 <HAL_TIM_Base_Init>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800990c:	f7ff f9c2 	bl	8008c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009914:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800991a:	4619      	mov	r1, r3
 800991c:	482c      	ldr	r0, [pc, #176]	; (80099d0 <MX_TIM2_Init+0x12c>)
 800991e:	f7fb fe59 	bl	80055d4 <HAL_TIM_ConfigClockSource>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009928:	f7ff f9b4 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800992c:	4828      	ldr	r0, [pc, #160]	; (80099d0 <MX_TIM2_Init+0x12c>)
 800992e:	f7fb fba9 	bl	8005084 <HAL_TIM_PWM_Init>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009938:	f7ff f9ac 	bl	8008c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009940:	2300      	movs	r3, #0
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009944:	f107 031c 	add.w	r3, r7, #28
 8009948:	4619      	mov	r1, r3
 800994a:	4821      	ldr	r0, [pc, #132]	; (80099d0 <MX_TIM2_Init+0x12c>)
 800994c:	f7fc fae2 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8009956:	f7ff f99d 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800995a:	2360      	movs	r3, #96	; 0x60
 800995c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009962:	2300      	movs	r3, #0
 8009964:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009966:	2300      	movs	r3, #0
 8009968:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800996a:	463b      	mov	r3, r7
 800996c:	2200      	movs	r2, #0
 800996e:	4619      	mov	r1, r3
 8009970:	4817      	ldr	r0, [pc, #92]	; (80099d0 <MX_TIM2_Init+0x12c>)
 8009972:	f7fb fd17 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800997c:	f7ff f98a 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009980:	463b      	mov	r3, r7
 8009982:	2204      	movs	r2, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4812      	ldr	r0, [pc, #72]	; (80099d0 <MX_TIM2_Init+0x12c>)
 8009988:	f7fb fd0c 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8009992:	f7ff f97f 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009996:	463b      	mov	r3, r7
 8009998:	2208      	movs	r2, #8
 800999a:	4619      	mov	r1, r3
 800999c:	480c      	ldr	r0, [pc, #48]	; (80099d0 <MX_TIM2_Init+0x12c>)
 800999e:	f7fb fd01 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80099a8:	f7ff f974 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80099ac:	463b      	mov	r3, r7
 80099ae:	220c      	movs	r2, #12
 80099b0:	4619      	mov	r1, r3
 80099b2:	4807      	ldr	r0, [pc, #28]	; (80099d0 <MX_TIM2_Init+0x12c>)
 80099b4:	f7fb fcf6 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80099be:	f7ff f969 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80099c2:	4803      	ldr	r0, [pc, #12]	; (80099d0 <MX_TIM2_Init+0x12c>)
 80099c4:	f000 fd16 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 80099c8:	bf00      	nop
 80099ca:	3738      	adds	r7, #56	; 0x38
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20009bec 	.word	0x20009bec

080099d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099da:	f107 031c 	add.w	r3, r7, #28
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	605a      	str	r2, [r3, #4]
 80099e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099e6:	463b      	mov	r3, r7
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	605a      	str	r2, [r3, #4]
 80099ee:	609a      	str	r2, [r3, #8]
 80099f0:	60da      	str	r2, [r3, #12]
 80099f2:	611a      	str	r2, [r3, #16]
 80099f4:	615a      	str	r2, [r3, #20]
 80099f6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80099f8:	4b32      	ldr	r3, [pc, #200]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 80099fa:	4a33      	ldr	r2, [pc, #204]	; (8009ac8 <MX_TIM3_Init+0xf4>)
 80099fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 80099fe:	4b31      	ldr	r3, [pc, #196]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a00:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009a04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a06:	4b2f      	ldr	r3, [pc, #188]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8009a0c:	4b2d      	ldr	r3, [pc, #180]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a14:	4b2b      	ldr	r3, [pc, #172]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a1a:	4b2a      	ldr	r3, [pc, #168]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009a20:	4828      	ldr	r0, [pc, #160]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a22:	f7fb fb2f 	bl	8005084 <HAL_TIM_PWM_Init>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009a2c:	f7ff f932 	bl	8008c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a30:	2300      	movs	r3, #0
 8009a32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009a38:	f107 031c 	add.w	r3, r7, #28
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4821      	ldr	r0, [pc, #132]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a40:	f7fc fa68 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009a4a:	f7ff f923 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a4e:	2360      	movs	r3, #96	; 0x60
 8009a50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a5e:	463b      	mov	r3, r7
 8009a60:	2200      	movs	r2, #0
 8009a62:	4619      	mov	r1, r3
 8009a64:	4817      	ldr	r0, [pc, #92]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a66:	f7fb fc9d 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8009a70:	f7ff f910 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a74:	463b      	mov	r3, r7
 8009a76:	2204      	movs	r2, #4
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4812      	ldr	r0, [pc, #72]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a7c:	f7fb fc92 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8009a86:	f7ff f905 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	2208      	movs	r2, #8
 8009a8e:	4619      	mov	r1, r3
 8009a90:	480c      	ldr	r0, [pc, #48]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009a92:	f7fb fc87 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009a9c:	f7ff f8fa 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009aa0:	463b      	mov	r3, r7
 8009aa2:	220c      	movs	r2, #12
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4807      	ldr	r0, [pc, #28]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009aa8:	f7fb fc7c 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8009ab2:	f7ff f8ef 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8009ab6:	4803      	ldr	r0, [pc, #12]	; (8009ac4 <MX_TIM3_Init+0xf0>)
 8009ab8:	f000 fc9c 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 8009abc:	bf00      	nop
 8009abe:	3728      	adds	r7, #40	; 0x28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20009aac 	.word	0x20009aac
 8009ac8:	40000400 	.word	0x40000400

08009acc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	; 0x28
 8009ad0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ad2:	f107 031c 	add.w	r3, r7, #28
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	605a      	str	r2, [r3, #4]
 8009adc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ade:	463b      	mov	r3, r7
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	605a      	str	r2, [r3, #4]
 8009ae6:	609a      	str	r2, [r3, #8]
 8009ae8:	60da      	str	r2, [r3, #12]
 8009aea:	611a      	str	r2, [r3, #16]
 8009aec:	615a      	str	r2, [r3, #20]
 8009aee:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8009af0:	4b32      	ldr	r3, [pc, #200]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009af2:	4a33      	ldr	r2, [pc, #204]	; (8009bc0 <MX_TIM4_Init+0xf4>)
 8009af4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 8009af6:	4b31      	ldr	r3, [pc, #196]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009af8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009afc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009afe:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8009b04:	4b2d      	ldr	r3, [pc, #180]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b0c:	4b2b      	ldr	r3, [pc, #172]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b12:	4b2a      	ldr	r3, [pc, #168]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009b18:	4828      	ldr	r0, [pc, #160]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b1a:	f7fb fab3 	bl	8005084 <HAL_TIM_PWM_Init>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009b24:	f7ff f8b6 	bl	8008c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009b30:	f107 031c 	add.w	r3, r7, #28
 8009b34:	4619      	mov	r1, r3
 8009b36:	4821      	ldr	r0, [pc, #132]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b38:	f7fc f9ec 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8009b42:	f7ff f8a7 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b46:	2360      	movs	r3, #96	; 0x60
 8009b48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b56:	463b      	mov	r3, r7
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4817      	ldr	r0, [pc, #92]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b5e:	f7fb fc21 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8009b68:	f7ff f894 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	2204      	movs	r2, #4
 8009b70:	4619      	mov	r1, r3
 8009b72:	4812      	ldr	r0, [pc, #72]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b74:	f7fb fc16 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8009b7e:	f7ff f889 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009b82:	463b      	mov	r3, r7
 8009b84:	2208      	movs	r2, #8
 8009b86:	4619      	mov	r1, r3
 8009b88:	480c      	ldr	r0, [pc, #48]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009b8a:	f7fb fc0b 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8009b94:	f7ff f87e 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009b98:	463b      	mov	r3, r7
 8009b9a:	220c      	movs	r2, #12
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4807      	ldr	r0, [pc, #28]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009ba0:	f7fb fc00 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009baa:	f7ff f873 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8009bae:	4803      	ldr	r0, [pc, #12]	; (8009bbc <MX_TIM4_Init+0xf0>)
 8009bb0:	f000 fc20 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 8009bb4:	bf00      	nop
 8009bb6:	3728      	adds	r7, #40	; 0x28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20009a2c 	.word	0x20009a2c
 8009bc0:	40000800 	.word	0x40000800

08009bc4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bca:	1d3b      	adds	r3, r7, #4
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	605a      	str	r2, [r3, #4]
 8009bd2:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009bd4:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <MX_TIM7_Init+0x64>)
 8009bd6:	4a15      	ldr	r2, [pc, #84]	; (8009c2c <MX_TIM7_Init+0x68>)
 8009bd8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009bda:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <MX_TIM7_Init+0x64>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009be0:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <MX_TIM7_Init+0x64>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009be6:	4b10      	ldr	r3, [pc, #64]	; (8009c28 <MX_TIM7_Init+0x64>)
 8009be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bee:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <MX_TIM7_Init+0x64>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009bf4:	480c      	ldr	r0, [pc, #48]	; (8009c28 <MX_TIM7_Init+0x64>)
 8009bf6:	f7fb f9ef 	bl	8004fd8 <HAL_TIM_Base_Init>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009c00:	f7ff f848 	bl	8008c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c04:	2300      	movs	r3, #0
 8009c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009c0c:	1d3b      	adds	r3, r7, #4
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4805      	ldr	r0, [pc, #20]	; (8009c28 <MX_TIM7_Init+0x64>)
 8009c12:	f7fc f97f 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009c1c:	f7ff f83a 	bl	8008c94 <Error_Handler>
  }

}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	20009cac 	.word	0x20009cac
 8009c2c:	40001400 	.word	0x40001400

08009c30 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b09a      	sub	sp, #104	; 0x68
 8009c34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	605a      	str	r2, [r3, #4]
 8009c40:	609a      	str	r2, [r3, #8]
 8009c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	605a      	str	r2, [r3, #4]
 8009c4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c54:	2200      	movs	r2, #0
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	605a      	str	r2, [r3, #4]
 8009c5a:	609a      	str	r2, [r3, #8]
 8009c5c:	60da      	str	r2, [r3, #12]
 8009c5e:	611a      	str	r2, [r3, #16]
 8009c60:	615a      	str	r2, [r3, #20]
 8009c62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009c64:	1d3b      	adds	r3, r7, #4
 8009c66:	222c      	movs	r2, #44	; 0x2c
 8009c68:	2100      	movs	r1, #0
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f007 ff01 	bl	8011a72 <memset>

  htim8.Instance = TIM8;
 8009c70:	4b4a      	ldr	r3, [pc, #296]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009c72:	4a4b      	ldr	r2, [pc, #300]	; (8009da0 <MX_TIM8_Init+0x170>)
 8009c74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8009c76:	4b49      	ldr	r3, [pc, #292]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009c78:	f245 425f 	movw	r2, #21599	; 0x545f
 8009c7c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c7e:	4b47      	ldr	r3, [pc, #284]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8009c84:	4b45      	ldr	r3, [pc, #276]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009c86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009c8a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c8c:	4b43      	ldr	r3, [pc, #268]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009c92:	4b42      	ldr	r3, [pc, #264]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c98:	4b40      	ldr	r3, [pc, #256]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009c9e:	483f      	ldr	r0, [pc, #252]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009ca0:	f7fb f99a 	bl	8004fd8 <HAL_TIM_Base_Init>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009caa:	f7fe fff3 	bl	8008c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cb2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009cb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4838      	ldr	r0, [pc, #224]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009cbc:	f7fb fc8a 	bl	80055d4 <HAL_TIM_ConfigClockSource>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009cc6:	f7fe ffe5 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009cca:	4834      	ldr	r0, [pc, #208]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009ccc:	f7fb f9da 	bl	8005084 <HAL_TIM_PWM_Init>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009cd6:	f7fe ffdd 	bl	8008c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009ce6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009cea:	4619      	mov	r1, r3
 8009cec:	482b      	ldr	r0, [pc, #172]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009cee:	f7fc f911 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009cf8:	f7fe ffcc 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009cfc:	2360      	movs	r3, #96	; 0x60
 8009cfe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d04:	2300      	movs	r3, #0
 8009d06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009d10:	2300      	movs	r3, #0
 8009d12:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009d14:	2300      	movs	r3, #0
 8009d16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	4619      	mov	r1, r3
 8009d20:	481e      	ldr	r0, [pc, #120]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009d22:	f7fb fb3f 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009d2c:	f7fe ffb2 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d34:	2204      	movs	r2, #4
 8009d36:	4619      	mov	r1, r3
 8009d38:	4818      	ldr	r0, [pc, #96]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009d3a:	f7fb fb33 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009d44:	f7fe ffa6 	bl	8008c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009d50:	2300      	movs	r3, #0
 8009d52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009d74:	2300      	movs	r3, #0
 8009d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009d78:	1d3b      	adds	r3, r7, #4
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4807      	ldr	r0, [pc, #28]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009d7e:	f7fc f925 	bl	8005fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8009d88:	f7fe ff84 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8009d8c:	4803      	ldr	r0, [pc, #12]	; (8009d9c <MX_TIM8_Init+0x16c>)
 8009d8e:	f000 fb31 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 8009d92:	bf00      	nop
 8009d94:	3768      	adds	r7, #104	; 0x68
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200099ec 	.word	0x200099ec
 8009da0:	40010400 	.word	0x40010400

08009da4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08c      	sub	sp, #48	; 0x30
 8009da8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009daa:	f107 0320 	add.w	r3, r7, #32
 8009dae:	2200      	movs	r2, #0
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	605a      	str	r2, [r3, #4]
 8009db4:	609a      	str	r2, [r3, #8]
 8009db6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009db8:	1d3b      	adds	r3, r7, #4
 8009dba:	2200      	movs	r2, #0
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	605a      	str	r2, [r3, #4]
 8009dc0:	609a      	str	r2, [r3, #8]
 8009dc2:	60da      	str	r2, [r3, #12]
 8009dc4:	611a      	str	r2, [r3, #16]
 8009dc6:	615a      	str	r2, [r3, #20]
 8009dc8:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8009dca:	4b2b      	ldr	r3, [pc, #172]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009dcc:	4a2b      	ldr	r2, [pc, #172]	; (8009e7c <MX_TIM9_Init+0xd8>)
 8009dce:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 8009dd0:	4b29      	ldr	r3, [pc, #164]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009dd2:	f245 425f 	movw	r2, #21599	; 0x545f
 8009dd6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009dd8:	4b27      	ldr	r3, [pc, #156]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8009dde:	4b26      	ldr	r3, [pc, #152]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009de4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009de6:	4b24      	ldr	r3, [pc, #144]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009dec:	4b22      	ldr	r3, [pc, #136]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009df2:	4821      	ldr	r0, [pc, #132]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009df4:	f7fb f8f0 	bl	8004fd8 <HAL_TIM_Base_Init>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8009dfe:	f7fe ff49 	bl	8008c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e06:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009e08:	f107 0320 	add.w	r3, r7, #32
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	481a      	ldr	r0, [pc, #104]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009e10:	f7fb fbe0 	bl	80055d4 <HAL_TIM_ConfigClockSource>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8009e1a:	f7fe ff3b 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009e1e:	4816      	ldr	r0, [pc, #88]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009e20:	f7fb f930 	bl	8005084 <HAL_TIM_PWM_Init>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8009e2a:	f7fe ff33 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e2e:	2360      	movs	r3, #96	; 0x60
 8009e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e3e:	1d3b      	adds	r3, r7, #4
 8009e40:	2200      	movs	r2, #0
 8009e42:	4619      	mov	r1, r3
 8009e44:	480c      	ldr	r0, [pc, #48]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009e46:	f7fb faad 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8009e50:	f7fe ff20 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009e54:	1d3b      	adds	r3, r7, #4
 8009e56:	2204      	movs	r2, #4
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4807      	ldr	r0, [pc, #28]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009e5c:	f7fb faa2 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8009e66:	f7fe ff15 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8009e6a:	4803      	ldr	r0, [pc, #12]	; (8009e78 <MX_TIM9_Init+0xd4>)
 8009e6c:	f000 fac2 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 8009e70:	bf00      	nop
 8009e72:	3730      	adds	r7, #48	; 0x30
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20009bac 	.word	0x20009bac
 8009e7c:	40014000 	.word	0x40014000

08009e80 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e86:	1d3b      	adds	r3, r7, #4
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	609a      	str	r2, [r3, #8]
 8009e90:	60da      	str	r2, [r3, #12]
 8009e92:	611a      	str	r2, [r3, #16]
 8009e94:	615a      	str	r2, [r3, #20]
 8009e96:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8009e98:	4b1e      	ldr	r3, [pc, #120]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009e9a:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <MX_TIM10_Init+0x98>)
 8009e9c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009ea0:	f245 425f 	movw	r2, #21599	; 0x545f
 8009ea4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ea6:	4b1b      	ldr	r3, [pc, #108]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8009eac:	4b19      	ldr	r3, [pc, #100]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009eb2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009eb4:	4b17      	ldr	r3, [pc, #92]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009eba:	4b16      	ldr	r3, [pc, #88]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009ec0:	4814      	ldr	r0, [pc, #80]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009ec2:	f7fb f889 	bl	8004fd8 <HAL_TIM_Base_Init>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8009ecc:	f7fe fee2 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8009ed0:	4810      	ldr	r0, [pc, #64]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009ed2:	f7fb f8d7 	bl	8005084 <HAL_TIM_PWM_Init>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8009edc:	f7fe feda 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ee0:	2360      	movs	r3, #96	; 0x60
 8009ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009eec:	2300      	movs	r3, #0
 8009eee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009ef0:	1d3b      	adds	r3, r7, #4
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4807      	ldr	r0, [pc, #28]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009ef8:	f7fb fa54 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8009f02:	f7fe fec7 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8009f06:	4803      	ldr	r0, [pc, #12]	; (8009f14 <MX_TIM10_Init+0x94>)
 8009f08:	f000 fa74 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 8009f0c:	bf00      	nop
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20009a6c 	.word	0x20009a6c
 8009f18:	40014400 	.word	0x40014400

08009f1c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f22:	1d3b      	adds	r3, r7, #4
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	60da      	str	r2, [r3, #12]
 8009f2e:	611a      	str	r2, [r3, #16]
 8009f30:	615a      	str	r2, [r3, #20]
 8009f32:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8009f34:	4b1e      	ldr	r3, [pc, #120]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f36:	4a1f      	ldr	r2, [pc, #124]	; (8009fb4 <MX_TIM11_Init+0x98>)
 8009f38:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 8009f3a:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f3c:	f245 425f 	movw	r2, #21599	; 0x545f
 8009f40:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f42:	4b1b      	ldr	r3, [pc, #108]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8009f48:	4b19      	ldr	r3, [pc, #100]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009f4e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f50:	4b17      	ldr	r3, [pc, #92]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f56:	4b16      	ldr	r3, [pc, #88]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009f5c:	4814      	ldr	r0, [pc, #80]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f5e:	f7fb f83b 	bl	8004fd8 <HAL_TIM_Base_Init>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8009f68:	f7fe fe94 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8009f6c:	4810      	ldr	r0, [pc, #64]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f6e:	f7fb f889 	bl	8005084 <HAL_TIM_PWM_Init>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8009f78:	f7fe fe8c 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f7c:	2360      	movs	r3, #96	; 0x60
 8009f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f8c:	1d3b      	adds	r3, r7, #4
 8009f8e:	2200      	movs	r2, #0
 8009f90:	4619      	mov	r1, r3
 8009f92:	4807      	ldr	r0, [pc, #28]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009f94:	f7fb fa06 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8009f9e:	f7fe fe79 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8009fa2:	4803      	ldr	r0, [pc, #12]	; (8009fb0 <MX_TIM11_Init+0x94>)
 8009fa4:	f000 fa26 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 8009fa8:	bf00      	nop
 8009faa:	3720      	adds	r7, #32
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20009b2c 	.word	0x20009b2c
 8009fb4:	40014800 	.word	0x40014800

08009fb8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08c      	sub	sp, #48	; 0x30
 8009fbc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fbe:	f107 0320 	add.w	r3, r7, #32
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	605a      	str	r2, [r3, #4]
 8009fc8:	609a      	str	r2, [r3, #8]
 8009fca:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009fcc:	1d3b      	adds	r3, r7, #4
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	605a      	str	r2, [r3, #4]
 8009fd4:	609a      	str	r2, [r3, #8]
 8009fd6:	60da      	str	r2, [r3, #12]
 8009fd8:	611a      	str	r2, [r3, #16]
 8009fda:	615a      	str	r2, [r3, #20]
 8009fdc:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8009fde:	4b2b      	ldr	r3, [pc, #172]	; (800a08c <MX_TIM12_Init+0xd4>)
 8009fe0:	4a2b      	ldr	r2, [pc, #172]	; (800a090 <MX_TIM12_Init+0xd8>)
 8009fe2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 10800-1;
 8009fe4:	4b29      	ldr	r3, [pc, #164]	; (800a08c <MX_TIM12_Init+0xd4>)
 8009fe6:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009fea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fec:	4b27      	ldr	r3, [pc, #156]	; (800a08c <MX_TIM12_Init+0xd4>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8009ff2:	4b26      	ldr	r3, [pc, #152]	; (800a08c <MX_TIM12_Init+0xd4>)
 8009ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ff8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ffa:	4b24      	ldr	r3, [pc, #144]	; (800a08c <MX_TIM12_Init+0xd4>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a000:	4b22      	ldr	r3, [pc, #136]	; (800a08c <MX_TIM12_Init+0xd4>)
 800a002:	2200      	movs	r2, #0
 800a004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800a006:	4821      	ldr	r0, [pc, #132]	; (800a08c <MX_TIM12_Init+0xd4>)
 800a008:	f7fa ffe6 	bl	8004fd8 <HAL_TIM_Base_Init>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800a012:	f7fe fe3f 	bl	8008c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a01a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800a01c:	f107 0320 	add.w	r3, r7, #32
 800a020:	4619      	mov	r1, r3
 800a022:	481a      	ldr	r0, [pc, #104]	; (800a08c <MX_TIM12_Init+0xd4>)
 800a024:	f7fb fad6 	bl	80055d4 <HAL_TIM_ConfigClockSource>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800a02e:	f7fe fe31 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800a032:	4816      	ldr	r0, [pc, #88]	; (800a08c <MX_TIM12_Init+0xd4>)
 800a034:	f7fb f826 	bl	8005084 <HAL_TIM_PWM_Init>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800a03e:	f7fe fe29 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a042:	2360      	movs	r3, #96	; 0x60
 800a044:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a052:	1d3b      	adds	r3, r7, #4
 800a054:	2200      	movs	r2, #0
 800a056:	4619      	mov	r1, r3
 800a058:	480c      	ldr	r0, [pc, #48]	; (800a08c <MX_TIM12_Init+0xd4>)
 800a05a:	f7fb f9a3 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 800a064:	f7fe fe16 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a068:	1d3b      	adds	r3, r7, #4
 800a06a:	2204      	movs	r2, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	4807      	ldr	r0, [pc, #28]	; (800a08c <MX_TIM12_Init+0xd4>)
 800a070:	f7fb f998 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 800a07a:	f7fe fe0b 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800a07e:	4803      	ldr	r0, [pc, #12]	; (800a08c <MX_TIM12_Init+0xd4>)
 800a080:	f000 f9b8 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 800a084:	bf00      	nop
 800a086:	3730      	adds	r7, #48	; 0x30
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20009c6c 	.word	0x20009c6c
 800a090:	40001800 	.word	0x40001800

0800a094 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a09a:	1d3b      	adds	r3, r7, #4
 800a09c:	2200      	movs	r2, #0
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	605a      	str	r2, [r3, #4]
 800a0a2:	609a      	str	r2, [r3, #8]
 800a0a4:	60da      	str	r2, [r3, #12]
 800a0a6:	611a      	str	r2, [r3, #16]
 800a0a8:	615a      	str	r2, [r3, #20]
 800a0aa:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 800a0ac:	4b1e      	ldr	r3, [pc, #120]	; (800a128 <MX_TIM13_Init+0x94>)
 800a0ae:	4a1f      	ldr	r2, [pc, #124]	; (800a12c <MX_TIM13_Init+0x98>)
 800a0b0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 10800-1;
 800a0b2:	4b1d      	ldr	r3, [pc, #116]	; (800a128 <MX_TIM13_Init+0x94>)
 800a0b4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800a0b8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ba:	4b1b      	ldr	r3, [pc, #108]	; (800a128 <MX_TIM13_Init+0x94>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 800a0c0:	4b19      	ldr	r3, [pc, #100]	; (800a128 <MX_TIM13_Init+0x94>)
 800a0c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a0c6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0c8:	4b17      	ldr	r3, [pc, #92]	; (800a128 <MX_TIM13_Init+0x94>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0ce:	4b16      	ldr	r3, [pc, #88]	; (800a128 <MX_TIM13_Init+0x94>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800a0d4:	4814      	ldr	r0, [pc, #80]	; (800a128 <MX_TIM13_Init+0x94>)
 800a0d6:	f7fa ff7f 	bl	8004fd8 <HAL_TIM_Base_Init>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800a0e0:	f7fe fdd8 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800a0e4:	4810      	ldr	r0, [pc, #64]	; (800a128 <MX_TIM13_Init+0x94>)
 800a0e6:	f7fa ffcd 	bl	8005084 <HAL_TIM_PWM_Init>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800a0f0:	f7fe fdd0 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a0f4:	2360      	movs	r3, #96	; 0x60
 800a0f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a104:	1d3b      	adds	r3, r7, #4
 800a106:	2200      	movs	r2, #0
 800a108:	4619      	mov	r1, r3
 800a10a:	4807      	ldr	r0, [pc, #28]	; (800a128 <MX_TIM13_Init+0x94>)
 800a10c:	f7fb f94a 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 800a116:	f7fe fdbd 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 800a11a:	4803      	ldr	r0, [pc, #12]	; (800a128 <MX_TIM13_Init+0x94>)
 800a11c:	f000 f96a 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 800a120:	bf00      	nop
 800a122:	3720      	adds	r7, #32
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	20009aec 	.word	0x20009aec
 800a12c:	40001c00 	.word	0x40001c00

0800a130 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a136:	1d3b      	adds	r3, r7, #4
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	605a      	str	r2, [r3, #4]
 800a13e:	609a      	str	r2, [r3, #8]
 800a140:	60da      	str	r2, [r3, #12]
 800a142:	611a      	str	r2, [r3, #16]
 800a144:	615a      	str	r2, [r3, #20]
 800a146:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 800a148:	4b1e      	ldr	r3, [pc, #120]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a14a:	4a1f      	ldr	r2, [pc, #124]	; (800a1c8 <MX_TIM14_Init+0x98>)
 800a14c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 800a14e:	4b1d      	ldr	r3, [pc, #116]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a150:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800a154:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a156:	4b1b      	ldr	r3, [pc, #108]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a158:	2200      	movs	r2, #0
 800a15a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800a15c:	4b19      	ldr	r3, [pc, #100]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a15e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a162:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a164:	4b17      	ldr	r3, [pc, #92]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a166:	2200      	movs	r2, #0
 800a168:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a16a:	4b16      	ldr	r3, [pc, #88]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800a170:	4814      	ldr	r0, [pc, #80]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a172:	f7fa ff31 	bl	8004fd8 <HAL_TIM_Base_Init>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800a17c:	f7fe fd8a 	bl	8008c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800a180:	4810      	ldr	r0, [pc, #64]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a182:	f7fa ff7f 	bl	8005084 <HAL_TIM_PWM_Init>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800a18c:	f7fe fd82 	bl	8008c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a190:	2360      	movs	r3, #96	; 0x60
 800a192:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a198:	2300      	movs	r3, #0
 800a19a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a1a0:	1d3b      	adds	r3, r7, #4
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4807      	ldr	r0, [pc, #28]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a1a8:	f7fb f8fc 	bl	80053a4 <HAL_TIM_PWM_ConfigChannel>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800a1b2:	f7fe fd6f 	bl	8008c94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800a1b6:	4803      	ldr	r0, [pc, #12]	; (800a1c4 <MX_TIM14_Init+0x94>)
 800a1b8:	f000 f91c 	bl	800a3f4 <HAL_TIM_MspPostInit>

}
 800a1bc:	bf00      	nop
 800a1be:	3720      	adds	r7, #32
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20009c2c 	.word	0x20009c2c
 800a1c8:	40002000 	.word	0x40002000

0800a1cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08c      	sub	sp, #48	; 0x30
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a62      	ldr	r2, [pc, #392]	; (800a364 <HAL_TIM_Base_MspInit+0x198>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d114      	bne.n	800a208 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a1de:	4b62      	ldr	r3, [pc, #392]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e2:	4a61      	ldr	r2, [pc, #388]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a1e4:	f043 0301 	orr.w	r3, r3, #1
 800a1e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a1ea:	4b5f      	ldr	r3, [pc, #380]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2105      	movs	r1, #5
 800a1fa:	2019      	movs	r0, #25
 800a1fc:	f7f7 fd6c 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a200:	2019      	movs	r0, #25
 800a202:	f7f7 fd85 	bl	8001d10 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800a206:	e0a8      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM2)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a210:	d10c      	bne.n	800a22c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a212:	4b55      	ldr	r3, [pc, #340]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	4a54      	ldr	r2, [pc, #336]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a218:	f043 0301 	orr.w	r3, r3, #1
 800a21c:	6413      	str	r3, [r2, #64]	; 0x40
 800a21e:	4b52      	ldr	r3, [pc, #328]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	62bb      	str	r3, [r7, #40]	; 0x28
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a22a:	e096      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM7)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a4e      	ldr	r2, [pc, #312]	; (800a36c <HAL_TIM_Base_MspInit+0x1a0>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d10c      	bne.n	800a250 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a236:	4b4c      	ldr	r3, [pc, #304]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	4a4b      	ldr	r2, [pc, #300]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a23c:	f043 0320 	orr.w	r3, r3, #32
 800a240:	6413      	str	r3, [r2, #64]	; 0x40
 800a242:	4b49      	ldr	r3, [pc, #292]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a24e:	e084      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM8)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a46      	ldr	r2, [pc, #280]	; (800a370 <HAL_TIM_Base_MspInit+0x1a4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d10c      	bne.n	800a274 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a25a:	4b43      	ldr	r3, [pc, #268]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a25e:	4a42      	ldr	r2, [pc, #264]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a260:	f043 0302 	orr.w	r3, r3, #2
 800a264:	6453      	str	r3, [r2, #68]	; 0x44
 800a266:	4b40      	ldr	r3, [pc, #256]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	623b      	str	r3, [r7, #32]
 800a270:	6a3b      	ldr	r3, [r7, #32]
}
 800a272:	e072      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM9)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a3e      	ldr	r2, [pc, #248]	; (800a374 <HAL_TIM_Base_MspInit+0x1a8>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d10c      	bne.n	800a298 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800a27e:	4b3a      	ldr	r3, [pc, #232]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a282:	4a39      	ldr	r2, [pc, #228]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a288:	6453      	str	r3, [r2, #68]	; 0x44
 800a28a:	4b37      	ldr	r3, [pc, #220]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a28e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a292:	61fb      	str	r3, [r7, #28]
 800a294:	69fb      	ldr	r3, [r7, #28]
}
 800a296:	e060      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM10)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a36      	ldr	r2, [pc, #216]	; (800a378 <HAL_TIM_Base_MspInit+0x1ac>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d114      	bne.n	800a2cc <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a2a2:	4b31      	ldr	r3, [pc, #196]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	4a30      	ldr	r2, [pc, #192]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a2a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a2ae:	4b2e      	ldr	r3, [pc, #184]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2b6:	61bb      	str	r3, [r7, #24]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2105      	movs	r1, #5
 800a2be:	2019      	movs	r0, #25
 800a2c0:	f7f7 fd0a 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a2c4:	2019      	movs	r0, #25
 800a2c6:	f7f7 fd23 	bl	8001d10 <HAL_NVIC_EnableIRQ>
}
 800a2ca:	e046      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM11)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a2a      	ldr	r2, [pc, #168]	; (800a37c <HAL_TIM_Base_MspInit+0x1b0>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d10c      	bne.n	800a2f0 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a2d6:	4b24      	ldr	r3, [pc, #144]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2da:	4a23      	ldr	r2, [pc, #140]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a2dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a2e2:	4b21      	ldr	r3, [pc, #132]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	697b      	ldr	r3, [r7, #20]
}
 800a2ee:	e034      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM12)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a22      	ldr	r2, [pc, #136]	; (800a380 <HAL_TIM_Base_MspInit+0x1b4>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d10c      	bne.n	800a314 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a2fa:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fe:	4a1a      	ldr	r2, [pc, #104]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a304:	6413      	str	r3, [r2, #64]	; 0x40
 800a306:	4b18      	ldr	r3, [pc, #96]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	693b      	ldr	r3, [r7, #16]
}
 800a312:	e022      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM13)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a1a      	ldr	r2, [pc, #104]	; (800a384 <HAL_TIM_Base_MspInit+0x1b8>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d10c      	bne.n	800a338 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800a31e:	4b12      	ldr	r3, [pc, #72]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	4a11      	ldr	r2, [pc, #68]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a328:	6413      	str	r3, [r2, #64]	; 0x40
 800a32a:	4b0f      	ldr	r3, [pc, #60]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]
}
 800a336:	e010      	b.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM14)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a12      	ldr	r2, [pc, #72]	; (800a388 <HAL_TIM_Base_MspInit+0x1bc>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d10b      	bne.n	800a35a <HAL_TIM_Base_MspInit+0x18e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	4a08      	ldr	r2, [pc, #32]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a34c:	6413      	str	r3, [r2, #64]	; 0x40
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <HAL_TIM_Base_MspInit+0x19c>)
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a356:	60bb      	str	r3, [r7, #8]
 800a358:	68bb      	ldr	r3, [r7, #8]
}
 800a35a:	bf00      	nop
 800a35c:	3730      	adds	r7, #48	; 0x30
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	40010000 	.word	0x40010000
 800a368:	40023800 	.word	0x40023800
 800a36c:	40001400 	.word	0x40001400
 800a370:	40010400 	.word	0x40010400
 800a374:	40014000 	.word	0x40014000
 800a378:	40014400 	.word	0x40014400
 800a37c:	40014800 	.word	0x40014800
 800a380:	40001800 	.word	0x40001800
 800a384:	40001c00 	.word	0x40001c00
 800a388:	40002000 	.word	0x40002000

0800a38c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a13      	ldr	r2, [pc, #76]	; (800a3e8 <HAL_TIM_PWM_MspInit+0x5c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d10c      	bne.n	800a3b8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <HAL_TIM_PWM_MspInit+0x60>)
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a2:	4a12      	ldr	r2, [pc, #72]	; (800a3ec <HAL_TIM_PWM_MspInit+0x60>)
 800a3a4:	f043 0302 	orr.w	r3, r3, #2
 800a3a8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3aa:	4b10      	ldr	r3, [pc, #64]	; (800a3ec <HAL_TIM_PWM_MspInit+0x60>)
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a3b6:	e010      	b.n	800a3da <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a0c      	ldr	r2, [pc, #48]	; (800a3f0 <HAL_TIM_PWM_MspInit+0x64>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d10b      	bne.n	800a3da <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a3c2:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <HAL_TIM_PWM_MspInit+0x60>)
 800a3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c6:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <HAL_TIM_PWM_MspInit+0x60>)
 800a3c8:	f043 0304 	orr.w	r3, r3, #4
 800a3cc:	6413      	str	r3, [r2, #64]	; 0x40
 800a3ce:	4b07      	ldr	r3, [pc, #28]	; (800a3ec <HAL_TIM_PWM_MspInit+0x60>)
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	f003 0304 	and.w	r3, r3, #4
 800a3d6:	60bb      	str	r3, [r7, #8]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
}
 800a3da:	bf00      	nop
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	40000400 	.word	0x40000400
 800a3ec:	40023800 	.word	0x40023800
 800a3f0:	40000800 	.word	0x40000800

0800a3f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b096      	sub	sp, #88	; 0x58
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	605a      	str	r2, [r3, #4]
 800a406:	609a      	str	r2, [r3, #8]
 800a408:	60da      	str	r2, [r3, #12]
 800a40a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4aa2      	ldr	r2, [pc, #648]	; (800a69c <HAL_TIM_MspPostInit+0x2a8>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d13a      	bne.n	800a48c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a416:	4ba2      	ldr	r3, [pc, #648]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	4aa1      	ldr	r2, [pc, #644]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a41c:	f043 0310 	orr.w	r3, r3, #16
 800a420:	6313      	str	r3, [r2, #48]	; 0x30
 800a422:	4b9f      	ldr	r3, [pc, #636]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a426:	f003 0310 	and.w	r3, r3, #16
 800a42a:	643b      	str	r3, [r7, #64]	; 0x40
 800a42c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a42e:	4b9c      	ldr	r3, [pc, #624]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	4a9b      	ldr	r2, [pc, #620]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a434:	f043 0301 	orr.w	r3, r3, #1
 800a438:	6313      	str	r3, [r2, #48]	; 0x30
 800a43a:	4b99      	ldr	r3, [pc, #612]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 800a446:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a44a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a44c:	2302      	movs	r3, #2
 800a44e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a450:	2300      	movs	r3, #0
 800a452:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a454:	2300      	movs	r3, #0
 800a456:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a458:	2301      	movs	r3, #1
 800a45a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a45c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a460:	4619      	mov	r1, r3
 800a462:	4890      	ldr	r0, [pc, #576]	; (800a6a4 <HAL_TIM_MspPostInit+0x2b0>)
 800a464:	f7f8 f86a 	bl	800253c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin|PWM_3_Pin;
 800a468:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a46c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a46e:	2302      	movs	r3, #2
 800a470:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a472:	2300      	movs	r3, #0
 800a474:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a476:	2300      	movs	r3, #0
 800a478:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a47a:	2301      	movs	r3, #1
 800a47c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a47e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a482:	4619      	mov	r1, r3
 800a484:	4888      	ldr	r0, [pc, #544]	; (800a6a8 <HAL_TIM_MspPostInit+0x2b4>)
 800a486:	f7f8 f859 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800a48a:	e1ab      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM2)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a494:	d13a      	bne.n	800a50c <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a496:	4b82      	ldr	r3, [pc, #520]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49a:	4a81      	ldr	r2, [pc, #516]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a49c:	f043 0302 	orr.w	r3, r3, #2
 800a4a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4a2:	4b7f      	ldr	r3, [pc, #508]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ae:	4b7c      	ldr	r3, [pc, #496]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b2:	4a7b      	ldr	r2, [pc, #492]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a4b4:	f043 0301 	orr.w	r3, r3, #1
 800a4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ba:	4b79      	ldr	r3, [pc, #484]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = PWM_6_Pin|PWM_7_Pin|PWM_5_Pin;
 800a4c6:	f640 4308 	movw	r3, #3080	; 0xc08
 800a4ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	4872      	ldr	r0, [pc, #456]	; (800a6ac <HAL_TIM_MspPostInit+0x2b8>)
 800a4e4:	f7f8 f82a 	bl	800253c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_4_Pin;
 800a4e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_4_GPIO_Port, &GPIO_InitStruct);
 800a4fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a502:	4619      	mov	r1, r3
 800a504:	4868      	ldr	r0, [pc, #416]	; (800a6a8 <HAL_TIM_MspPostInit+0x2b4>)
 800a506:	f7f8 f819 	bl	800253c <HAL_GPIO_Init>
}
 800a50a:	e16b      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM3)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a67      	ldr	r2, [pc, #412]	; (800a6b0 <HAL_TIM_MspPostInit+0x2bc>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d139      	bne.n	800a58a <HAL_TIM_MspPostInit+0x196>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a516:	4b62      	ldr	r3, [pc, #392]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51a:	4a61      	ldr	r2, [pc, #388]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a51c:	f043 0304 	orr.w	r3, r3, #4
 800a520:	6313      	str	r3, [r2, #48]	; 0x30
 800a522:	4b5f      	ldr	r3, [pc, #380]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	f003 0304 	and.w	r3, r3, #4
 800a52a:	633b      	str	r3, [r7, #48]	; 0x30
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a52e:	4b5c      	ldr	r3, [pc, #368]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a532:	4a5b      	ldr	r2, [pc, #364]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a534:	f043 0302 	orr.w	r3, r3, #2
 800a538:	6313      	str	r3, [r2, #48]	; 0x30
 800a53a:	4b59      	ldr	r3, [pc, #356]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = PWM_10_Pin|PWM_11_Pin;
 800a546:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a54a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a54c:	2302      	movs	r3, #2
 800a54e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a550:	2300      	movs	r3, #0
 800a552:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a554:	2300      	movs	r3, #0
 800a556:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a558:	2302      	movs	r3, #2
 800a55a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a55c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a560:	4619      	mov	r1, r3
 800a562:	4854      	ldr	r0, [pc, #336]	; (800a6b4 <HAL_TIM_MspPostInit+0x2c0>)
 800a564:	f7f7 ffea 	bl	800253c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_8_Pin|PWM_9_Pin;
 800a568:	2330      	movs	r3, #48	; 0x30
 800a56a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a56c:	2302      	movs	r3, #2
 800a56e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a570:	2300      	movs	r3, #0
 800a572:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a574:	2300      	movs	r3, #0
 800a576:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a578:	2302      	movs	r3, #2
 800a57a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a57c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a580:	4619      	mov	r1, r3
 800a582:	484a      	ldr	r0, [pc, #296]	; (800a6ac <HAL_TIM_MspPostInit+0x2b8>)
 800a584:	f7f7 ffda 	bl	800253c <HAL_GPIO_Init>
}
 800a588:	e12c      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM4)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a4a      	ldr	r2, [pc, #296]	; (800a6b8 <HAL_TIM_MspPostInit+0x2c4>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d11d      	bne.n	800a5d0 <HAL_TIM_MspPostInit+0x1dc>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a594:	4b42      	ldr	r3, [pc, #264]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a598:	4a41      	ldr	r2, [pc, #260]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a59a:	f043 0308 	orr.w	r3, r3, #8
 800a59e:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a0:	4b3f      	ldr	r3, [pc, #252]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a4:	f003 0308 	and.w	r3, r3, #8
 800a5a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_12_Pin|PWM_13_Pin|PWM_14_Pin|PWM_15_Pin;
 800a5ac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a5b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a5be:	2302      	movs	r3, #2
 800a5c0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a5c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	483c      	ldr	r0, [pc, #240]	; (800a6bc <HAL_TIM_MspPostInit+0x2c8>)
 800a5ca:	f7f7 ffb7 	bl	800253c <HAL_GPIO_Init>
}
 800a5ce:	e109      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM8)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a3a      	ldr	r2, [pc, #232]	; (800a6c0 <HAL_TIM_MspPostInit+0x2cc>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d11c      	bne.n	800a614 <HAL_TIM_MspPostInit+0x220>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5da:	4b31      	ldr	r3, [pc, #196]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5de:	4a30      	ldr	r2, [pc, #192]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a5e0:	f043 0304 	orr.w	r3, r3, #4
 800a5e4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5e6:	4b2e      	ldr	r3, [pc, #184]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = PWM_16_Pin|PWM_17_Pin;
 800a5f2:	23c0      	movs	r3, #192	; 0xc0
 800a5f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5fe:	2300      	movs	r3, #0
 800a600:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a602:	2303      	movs	r3, #3
 800a604:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a606:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a60a:	4619      	mov	r1, r3
 800a60c:	4829      	ldr	r0, [pc, #164]	; (800a6b4 <HAL_TIM_MspPostInit+0x2c0>)
 800a60e:	f7f7 ff95 	bl	800253c <HAL_GPIO_Init>
}
 800a612:	e0e7      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM9)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a2a      	ldr	r2, [pc, #168]	; (800a6c4 <HAL_TIM_MspPostInit+0x2d0>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d11c      	bne.n	800a658 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a61e:	4b20      	ldr	r3, [pc, #128]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	4a1f      	ldr	r2, [pc, #124]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a624:	f043 0310 	orr.w	r3, r3, #16
 800a628:	6313      	str	r3, [r2, #48]	; 0x30
 800a62a:	4b1d      	ldr	r3, [pc, #116]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62e:	f003 0310 	and.w	r3, r3, #16
 800a632:	623b      	str	r3, [r7, #32]
 800a634:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_18_Pin|PWM_19_Pin;
 800a636:	2360      	movs	r3, #96	; 0x60
 800a638:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a63a:	2302      	movs	r3, #2
 800a63c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a63e:	2300      	movs	r3, #0
 800a640:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a642:	2300      	movs	r3, #0
 800a644:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a646:	2303      	movs	r3, #3
 800a648:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a64a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a64e:	4619      	mov	r1, r3
 800a650:	4814      	ldr	r0, [pc, #80]	; (800a6a4 <HAL_TIM_MspPostInit+0x2b0>)
 800a652:	f7f7 ff73 	bl	800253c <HAL_GPIO_Init>
}
 800a656:	e0c5      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM10)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a1a      	ldr	r2, [pc, #104]	; (800a6c8 <HAL_TIM_MspPostInit+0x2d4>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d136      	bne.n	800a6d0 <HAL_TIM_MspPostInit+0x2dc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a662:	4b0f      	ldr	r3, [pc, #60]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a666:	4a0e      	ldr	r2, [pc, #56]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a668:	f043 0320 	orr.w	r3, r3, #32
 800a66c:	6313      	str	r3, [r2, #48]	; 0x30
 800a66e:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <HAL_TIM_MspPostInit+0x2ac>)
 800a670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	61fb      	str	r3, [r7, #28]
 800a678:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_20_Pin;
 800a67a:	2340      	movs	r3, #64	; 0x40
 800a67c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a67e:	2302      	movs	r3, #2
 800a680:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a682:	2300      	movs	r3, #0
 800a684:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a686:	2300      	movs	r3, #0
 800a688:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a68a:	2303      	movs	r3, #3
 800a68c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_20_GPIO_Port, &GPIO_InitStruct);
 800a68e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a692:	4619      	mov	r1, r3
 800a694:	480d      	ldr	r0, [pc, #52]	; (800a6cc <HAL_TIM_MspPostInit+0x2d8>)
 800a696:	f7f7 ff51 	bl	800253c <HAL_GPIO_Init>
}
 800a69a:	e0a3      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
 800a69c:	40010000 	.word	0x40010000
 800a6a0:	40023800 	.word	0x40023800
 800a6a4:	40021000 	.word	0x40021000
 800a6a8:	40020000 	.word	0x40020000
 800a6ac:	40020400 	.word	0x40020400
 800a6b0:	40000400 	.word	0x40000400
 800a6b4:	40020800 	.word	0x40020800
 800a6b8:	40000800 	.word	0x40000800
 800a6bc:	40020c00 	.word	0x40020c00
 800a6c0:	40010400 	.word	0x40010400
 800a6c4:	40014000 	.word	0x40014000
 800a6c8:	40014400 	.word	0x40014400
 800a6cc:	40021400 	.word	0x40021400
  else if(timHandle->Instance==TIM11)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a45      	ldr	r2, [pc, #276]	; (800a7ec <HAL_TIM_MspPostInit+0x3f8>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d11c      	bne.n	800a714 <HAL_TIM_MspPostInit+0x320>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a6da:	4b45      	ldr	r3, [pc, #276]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6de:	4a44      	ldr	r2, [pc, #272]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a6e0:	f043 0320 	orr.w	r3, r3, #32
 800a6e4:	6313      	str	r3, [r2, #48]	; 0x30
 800a6e6:	4b42      	ldr	r3, [pc, #264]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ea:	f003 0320 	and.w	r3, r3, #32
 800a6ee:	61bb      	str	r3, [r7, #24]
 800a6f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_21_Pin;
 800a6f2:	2380      	movs	r3, #128	; 0x80
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6fe:	2300      	movs	r3, #0
 800a700:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a702:	2303      	movs	r3, #3
 800a704:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_21_GPIO_Port, &GPIO_InitStruct);
 800a706:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a70a:	4619      	mov	r1, r3
 800a70c:	4839      	ldr	r0, [pc, #228]	; (800a7f4 <HAL_TIM_MspPostInit+0x400>)
 800a70e:	f7f7 ff15 	bl	800253c <HAL_GPIO_Init>
}
 800a712:	e067      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM12)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a37      	ldr	r2, [pc, #220]	; (800a7f8 <HAL_TIM_MspPostInit+0x404>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d11d      	bne.n	800a75a <HAL_TIM_MspPostInit+0x366>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a71e:	4b34      	ldr	r3, [pc, #208]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a722:	4a33      	ldr	r2, [pc, #204]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a724:	f043 0302 	orr.w	r3, r3, #2
 800a728:	6313      	str	r3, [r2, #48]	; 0x30
 800a72a:	4b31      	ldr	r3, [pc, #196]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72e:	f003 0302 	and.w	r3, r3, #2
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_22_Pin|PWM_23_Pin;
 800a736:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a73a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a73c:	2302      	movs	r3, #2
 800a73e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a740:	2300      	movs	r3, #0
 800a742:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a744:	2300      	movs	r3, #0
 800a746:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800a748:	2309      	movs	r3, #9
 800a74a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a74c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a750:	4619      	mov	r1, r3
 800a752:	482a      	ldr	r0, [pc, #168]	; (800a7fc <HAL_TIM_MspPostInit+0x408>)
 800a754:	f7f7 fef2 	bl	800253c <HAL_GPIO_Init>
}
 800a758:	e044      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM13)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a28      	ldr	r2, [pc, #160]	; (800a800 <HAL_TIM_MspPostInit+0x40c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d11d      	bne.n	800a7a0 <HAL_TIM_MspPostInit+0x3ac>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a764:	4b22      	ldr	r3, [pc, #136]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a768:	4a21      	ldr	r2, [pc, #132]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a76a:	f043 0320 	orr.w	r3, r3, #32
 800a76e:	6313      	str	r3, [r2, #48]	; 0x30
 800a770:	4b1f      	ldr	r3, [pc, #124]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a774:	f003 0320 	and.w	r3, r3, #32
 800a778:	613b      	str	r3, [r7, #16]
 800a77a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_24_Pin;
 800a77c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a780:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a782:	2302      	movs	r3, #2
 800a784:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a786:	2300      	movs	r3, #0
 800a788:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a78a:	2300      	movs	r3, #0
 800a78c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800a78e:	2309      	movs	r3, #9
 800a790:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_24_GPIO_Port, &GPIO_InitStruct);
 800a792:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a796:	4619      	mov	r1, r3
 800a798:	4816      	ldr	r0, [pc, #88]	; (800a7f4 <HAL_TIM_MspPostInit+0x400>)
 800a79a:	f7f7 fecf 	bl	800253c <HAL_GPIO_Init>
}
 800a79e:	e021      	b.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM14)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a17      	ldr	r2, [pc, #92]	; (800a804 <HAL_TIM_MspPostInit+0x410>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d11c      	bne.n	800a7e4 <HAL_TIM_MspPostInit+0x3f0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a7aa:	4b11      	ldr	r3, [pc, #68]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ae:	4a10      	ldr	r2, [pc, #64]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a7b0:	f043 0320 	orr.w	r3, r3, #32
 800a7b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a7b6:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <HAL_TIM_MspPostInit+0x3fc>)
 800a7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM25_Pin;
 800a7c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7c6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800a7d4:	2309      	movs	r3, #9
 800a7d6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM25_GPIO_Port, &GPIO_InitStruct);
 800a7d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4805      	ldr	r0, [pc, #20]	; (800a7f4 <HAL_TIM_MspPostInit+0x400>)
 800a7e0:	f7f7 feac 	bl	800253c <HAL_GPIO_Init>
}
 800a7e4:	bf00      	nop
 800a7e6:	3758      	adds	r7, #88	; 0x58
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	40014800 	.word	0x40014800
 800a7f0:	40023800 	.word	0x40023800
 800a7f4:	40021400 	.word	0x40021400
 800a7f8:	40001800 	.word	0x40001800
 800a7fc:	40020400 	.word	0x40020400
 800a800:	40001c00 	.word	0x40001c00
 800a804:	40002000 	.word	0x40002000

0800a808 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800a80c:	4b14      	ldr	r3, [pc, #80]	; (800a860 <MX_UART4_Init+0x58>)
 800a80e:	4a15      	ldr	r2, [pc, #84]	; (800a864 <MX_UART4_Init+0x5c>)
 800a810:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a812:	4b13      	ldr	r3, [pc, #76]	; (800a860 <MX_UART4_Init+0x58>)
 800a814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a818:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a81a:	4b11      	ldr	r3, [pc, #68]	; (800a860 <MX_UART4_Init+0x58>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <MX_UART4_Init+0x58>)
 800a822:	2200      	movs	r2, #0
 800a824:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a826:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <MX_UART4_Init+0x58>)
 800a828:	2200      	movs	r2, #0
 800a82a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a82c:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <MX_UART4_Init+0x58>)
 800a82e:	220c      	movs	r2, #12
 800a830:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a832:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <MX_UART4_Init+0x58>)
 800a834:	2200      	movs	r2, #0
 800a836:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a838:	4b09      	ldr	r3, [pc, #36]	; (800a860 <MX_UART4_Init+0x58>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a83e:	4b08      	ldr	r3, [pc, #32]	; (800a860 <MX_UART4_Init+0x58>)
 800a840:	2200      	movs	r2, #0
 800a842:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a844:	4b06      	ldr	r3, [pc, #24]	; (800a860 <MX_UART4_Init+0x58>)
 800a846:	2200      	movs	r2, #0
 800a848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a84a:	4805      	ldr	r0, [pc, #20]	; (800a860 <MX_UART4_Init+0x58>)
 800a84c:	f7fb fc5a 	bl	8006104 <HAL_UART_Init>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800a856:	f7fe fa1d 	bl	8008c94 <Error_Handler>
  }

}
 800a85a:	bf00      	nop
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	20009f0c 	.word	0x20009f0c
 800a864:	40004c00 	.word	0x40004c00

0800a868 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a86c:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a86e:	4a15      	ldr	r2, [pc, #84]	; (800a8c4 <MX_USART1_UART_Init+0x5c>)
 800a870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a872:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a87a:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a880:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a882:	2200      	movs	r2, #0
 800a884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a886:	4b0e      	ldr	r3, [pc, #56]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a888:	2200      	movs	r2, #0
 800a88a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a88c:	4b0c      	ldr	r3, [pc, #48]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a88e:	220c      	movs	r2, #12
 800a890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a892:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a894:	2200      	movs	r2, #0
 800a896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a898:	4b09      	ldr	r3, [pc, #36]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a89e:	4b08      	ldr	r3, [pc, #32]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a8a4:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a8aa:	4805      	ldr	r0, [pc, #20]	; (800a8c0 <MX_USART1_UART_Init+0x58>)
 800a8ac:	f7fb fc2a 	bl	8006104 <HAL_UART_Init>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a8b6:	f7fe f9ed 	bl	8008c94 <Error_Handler>
  }

}
 800a8ba:	bf00      	nop
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20009e8c 	.word	0x20009e8c
 800a8c4:	40011000 	.word	0x40011000

0800a8c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a8cc:	4b14      	ldr	r3, [pc, #80]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a8ce:	4a15      	ldr	r2, [pc, #84]	; (800a924 <MX_USART3_UART_Init+0x5c>)
 800a8d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a8d2:	4b13      	ldr	r3, [pc, #76]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a8d4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a8d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a8da:	4b11      	ldr	r3, [pc, #68]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a8e0:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a8e6:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a8ec:	4b0c      	ldr	r3, [pc, #48]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a8ee:	220c      	movs	r2, #12
 800a8f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a8f2:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a8f8:	4b09      	ldr	r3, [pc, #36]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a8fe:	4b08      	ldr	r3, [pc, #32]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a900:	2200      	movs	r2, #0
 800a902:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a904:	4b06      	ldr	r3, [pc, #24]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a906:	2200      	movs	r2, #0
 800a908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a90a:	4805      	ldr	r0, [pc, #20]	; (800a920 <MX_USART3_UART_Init+0x58>)
 800a90c:	f7fb fbfa 	bl	8006104 <HAL_UART_Init>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d001      	beq.n	800a91a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a916:	f7fe f9bd 	bl	8008c94 <Error_Handler>
  }

}
 800a91a:	bf00      	nop
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20009dac 	.word	0x20009dac
 800a924:	40004800 	.word	0x40004800

0800a928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b090      	sub	sp, #64	; 0x40
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a934:	2200      	movs	r2, #0
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	605a      	str	r2, [r3, #4]
 800a93a:	609a      	str	r2, [r3, #8]
 800a93c:	60da      	str	r2, [r3, #12]
 800a93e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a68      	ldr	r2, [pc, #416]	; (800aae8 <HAL_UART_MspInit+0x1c0>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d17b      	bne.n	800aa42 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a94a:	4b68      	ldr	r3, [pc, #416]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94e:	4a67      	ldr	r2, [pc, #412]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a954:	6413      	str	r3, [r2, #64]	; 0x40
 800a956:	4b65      	ldr	r3, [pc, #404]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a95e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a962:	4b62      	ldr	r3, [pc, #392]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a966:	4a61      	ldr	r2, [pc, #388]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a968:	f043 0301 	orr.w	r3, r3, #1
 800a96c:	6313      	str	r3, [r2, #48]	; 0x30
 800a96e:	4b5f      	ldr	r3, [pc, #380]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	627b      	str	r3, [r7, #36]	; 0x24
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a97a:	4b5c      	ldr	r3, [pc, #368]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97e:	4a5b      	ldr	r2, [pc, #364]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a980:	f043 0308 	orr.w	r3, r3, #8
 800a984:	6313      	str	r3, [r2, #48]	; 0x30
 800a986:	4b59      	ldr	r3, [pc, #356]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800a988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98a:	f003 0308 	and.w	r3, r3, #8
 800a98e:	623b      	str	r3, [r7, #32]
 800a990:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration    
    PA12     ------> UART4_TX
    PD0     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a998:	2302      	movs	r3, #2
 800a99a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a99c:	2300      	movs	r3, #0
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800a9a4:	2306      	movs	r3, #6
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4850      	ldr	r0, [pc, #320]	; (800aaf0 <HAL_UART_MspInit+0x1c8>)
 800a9b0:	f7f7 fdc4 	bl	800253c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a9c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4849      	ldr	r0, [pc, #292]	; (800aaf4 <HAL_UART_MspInit+0x1cc>)
 800a9d0:	f7f7 fdb4 	bl	800253c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800a9d4:	4b48      	ldr	r3, [pc, #288]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800a9d6:	4a49      	ldr	r2, [pc, #292]	; (800aafc <HAL_UART_MspInit+0x1d4>)
 800a9d8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800a9da:	4b47      	ldr	r3, [pc, #284]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800a9dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a9e0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9e2:	4b45      	ldr	r3, [pc, #276]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9e8:	4b43      	ldr	r3, [pc, #268]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a9ee:	4b42      	ldr	r3, [pc, #264]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800a9f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9f4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9f6:	4b40      	ldr	r3, [pc, #256]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9fc:	4b3e      	ldr	r3, [pc, #248]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800aa02:	4b3d      	ldr	r3, [pc, #244]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aa08:	4b3b      	ldr	r3, [pc, #236]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aa0e:	4b3a      	ldr	r3, [pc, #232]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800aa14:	4838      	ldr	r0, [pc, #224]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800aa16:	f7f7 f989 	bl	8001d2c <HAL_DMA_Init>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 800aa20:	f7fe f938 	bl	8008c94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a34      	ldr	r2, [pc, #208]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800aa28:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa2a:	4a33      	ldr	r2, [pc, #204]	; (800aaf8 <HAL_UART_MspInit+0x1d0>)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800aa30:	2200      	movs	r2, #0
 800aa32:	2105      	movs	r1, #5
 800aa34:	2034      	movs	r0, #52	; 0x34
 800aa36:	f7f7 f94f 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800aa3a:	2034      	movs	r0, #52	; 0x34
 800aa3c:	f7f7 f968 	bl	8001d10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800aa40:	e0f7      	b.n	800ac32 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART1)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a2e      	ldr	r2, [pc, #184]	; (800ab00 <HAL_UART_MspInit+0x1d8>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d15d      	bne.n	800ab08 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 800aa4c:	4b27      	ldr	r3, [pc, #156]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa50:	4a26      	ldr	r2, [pc, #152]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa52:	f043 0310 	orr.w	r3, r3, #16
 800aa56:	6453      	str	r3, [r2, #68]	; 0x44
 800aa58:	4b24      	ldr	r3, [pc, #144]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	61fb      	str	r3, [r7, #28]
 800aa62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa64:	4b21      	ldr	r3, [pc, #132]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa68:	4a20      	ldr	r2, [pc, #128]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa6a:	f043 0301 	orr.w	r3, r3, #1
 800aa6e:	6313      	str	r3, [r2, #48]	; 0x30
 800aa70:	4b1e      	ldr	r3, [pc, #120]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	61bb      	str	r3, [r7, #24]
 800aa7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa7c:	4b1b      	ldr	r3, [pc, #108]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa80:	4a1a      	ldr	r2, [pc, #104]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa82:	f043 0302 	orr.w	r3, r3, #2
 800aa86:	6313      	str	r3, [r2, #48]	; 0x30
 800aa88:	4b18      	ldr	r3, [pc, #96]	; (800aaec <HAL_UART_MspInit+0x1c4>)
 800aa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	617b      	str	r3, [r7, #20]
 800aa92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800aa94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aaa6:	2307      	movs	r3, #7
 800aaa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aaae:	4619      	mov	r1, r3
 800aab0:	480f      	ldr	r0, [pc, #60]	; (800aaf0 <HAL_UART_MspInit+0x1c8>)
 800aab2:	f7f7 fd43 	bl	800253c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800aab6:	2380      	movs	r3, #128	; 0x80
 800aab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaba:	2302      	movs	r3, #2
 800aabc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aac2:	2303      	movs	r3, #3
 800aac4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aac6:	2307      	movs	r3, #7
 800aac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aace:	4619      	mov	r1, r3
 800aad0:	480c      	ldr	r0, [pc, #48]	; (800ab04 <HAL_UART_MspInit+0x1dc>)
 800aad2:	f7f7 fd33 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800aad6:	2200      	movs	r2, #0
 800aad8:	2105      	movs	r1, #5
 800aada:	2025      	movs	r0, #37	; 0x25
 800aadc:	f7f7 f8fc 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aae0:	2025      	movs	r0, #37	; 0x25
 800aae2:	f7f7 f915 	bl	8001d10 <HAL_NVIC_EnableIRQ>
}
 800aae6:	e0a4      	b.n	800ac32 <HAL_UART_MspInit+0x30a>
 800aae8:	40004c00 	.word	0x40004c00
 800aaec:	40023800 	.word	0x40023800
 800aaf0:	40020000 	.word	0x40020000
 800aaf4:	40020c00 	.word	0x40020c00
 800aaf8:	20009cec 	.word	0x20009cec
 800aafc:	40026040 	.word	0x40026040
 800ab00:	40011000 	.word	0x40011000
 800ab04:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART3)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a4b      	ldr	r2, [pc, #300]	; (800ac3c <HAL_UART_MspInit+0x314>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	f040 808f 	bne.w	800ac32 <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ab14:	4b4a      	ldr	r3, [pc, #296]	; (800ac40 <HAL_UART_MspInit+0x318>)
 800ab16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab18:	4a49      	ldr	r2, [pc, #292]	; (800ac40 <HAL_UART_MspInit+0x318>)
 800ab1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab1e:	6413      	str	r3, [r2, #64]	; 0x40
 800ab20:	4b47      	ldr	r3, [pc, #284]	; (800ac40 <HAL_UART_MspInit+0x318>)
 800ab22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab28:	613b      	str	r3, [r7, #16]
 800ab2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ab2c:	4b44      	ldr	r3, [pc, #272]	; (800ac40 <HAL_UART_MspInit+0x318>)
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab30:	4a43      	ldr	r2, [pc, #268]	; (800ac40 <HAL_UART_MspInit+0x318>)
 800ab32:	f043 0308 	orr.w	r3, r3, #8
 800ab36:	6313      	str	r3, [r2, #48]	; 0x30
 800ab38:	4b41      	ldr	r3, [pc, #260]	; (800ac40 <HAL_UART_MspInit+0x318>)
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3c:	f003 0308 	and.w	r3, r3, #8
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ab44:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab52:	2303      	movs	r3, #3
 800ab54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ab56:	2307      	movs	r3, #7
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab5e:	4619      	mov	r1, r3
 800ab60:	4838      	ldr	r0, [pc, #224]	; (800ac44 <HAL_UART_MspInit+0x31c>)
 800ab62:	f7f7 fceb 	bl	800253c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800ab66:	4b38      	ldr	r3, [pc, #224]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab68:	4a38      	ldr	r2, [pc, #224]	; (800ac4c <HAL_UART_MspInit+0x324>)
 800ab6a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800ab6c:	4b36      	ldr	r3, [pc, #216]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab72:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab74:	4b34      	ldr	r3, [pc, #208]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab7a:	4b33      	ldr	r3, [pc, #204]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ab80:	4b31      	ldr	r3, [pc, #196]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab86:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab88:	4b2f      	ldr	r3, [pc, #188]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab8e:	4b2e      	ldr	r3, [pc, #184]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800ab94:	4b2c      	ldr	r3, [pc, #176]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800ab9a:	4b2b      	ldr	r3, [pc, #172]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800ab9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aba0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aba2:	4b29      	ldr	r3, [pc, #164]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800aba8:	4827      	ldr	r0, [pc, #156]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800abaa:	f7f7 f8bf 	bl	8001d2c <HAL_DMA_Init>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <HAL_UART_MspInit+0x290>
      Error_Handler();
 800abb4:	f7fe f86e 	bl	8008c94 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a23      	ldr	r2, [pc, #140]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800abbc:	66da      	str	r2, [r3, #108]	; 0x6c
 800abbe:	4a22      	ldr	r2, [pc, #136]	; (800ac48 <HAL_UART_MspInit+0x320>)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800abc4:	4b22      	ldr	r3, [pc, #136]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abc6:	4a23      	ldr	r2, [pc, #140]	; (800ac54 <HAL_UART_MspInit+0x32c>)
 800abc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800abca:	4b21      	ldr	r3, [pc, #132]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abcc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800abd0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800abd2:	4b1f      	ldr	r3, [pc, #124]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abd4:	2240      	movs	r2, #64	; 0x40
 800abd6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800abd8:	4b1d      	ldr	r3, [pc, #116]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abda:	2200      	movs	r2, #0
 800abdc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800abde:	4b1c      	ldr	r3, [pc, #112]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abe4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abe6:	4b1a      	ldr	r3, [pc, #104]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abe8:	2200      	movs	r2, #0
 800abea:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abec:	4b18      	ldr	r3, [pc, #96]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abee:	2200      	movs	r2, #0
 800abf0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800abf2:	4b17      	ldr	r3, [pc, #92]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800abf8:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800abfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800abfe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ac00:	4b13      	ldr	r3, [pc, #76]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800ac06:	4812      	ldr	r0, [pc, #72]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800ac08:	f7f7 f890 	bl	8001d2c <HAL_DMA_Init>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 800ac12:	f7fe f83f 	bl	8008c94 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a0d      	ldr	r2, [pc, #52]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800ac1a:	669a      	str	r2, [r3, #104]	; 0x68
 800ac1c:	4a0c      	ldr	r2, [pc, #48]	; (800ac50 <HAL_UART_MspInit+0x328>)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800ac22:	2200      	movs	r2, #0
 800ac24:	2105      	movs	r1, #5
 800ac26:	2027      	movs	r0, #39	; 0x27
 800ac28:	f7f7 f856 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ac2c:	2027      	movs	r0, #39	; 0x27
 800ac2e:	f7f7 f86f 	bl	8001d10 <HAL_NVIC_EnableIRQ>
}
 800ac32:	bf00      	nop
 800ac34:	3740      	adds	r7, #64	; 0x40
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	40004800 	.word	0x40004800
 800ac40:	40023800 	.word	0x40023800
 800ac44:	40020c00 	.word	0x40020c00
 800ac48:	20009d4c 	.word	0x20009d4c
 800ac4c:	40026028 	.word	0x40026028
 800ac50:	20009e2c 	.word	0x20009e2c
 800ac54:	40026070 	.word	0x40026070

0800ac58 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	ptADDevice->CS_Port->BSRR=(uint32_t)ptADDevice->CS_Pin<<16U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac6c:	0412      	lsls	r2, r2, #16
 800ac6e:	619a      	str	r2, [r3, #24]
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
	ptADDevice->CS_Port->BSRR=(uint32_t)ptADDevice->CS_Pin;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac8e:	619a      	str	r2, [r3, #24]
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
	ptADDevice->CONV_Port->BSRR=(uint32_t)ptADDevice->CONV_Pin<<16U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800acaa:	461a      	mov	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb0:	0412      	lsls	r2, r2, #16
 800acb2:	619a      	str	r2, [r3, #24]
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
	ptADDevice->CONV_Port->BSRR=(uint32_t)ptADDevice->CONV_Pin;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acd2:	619a      	str	r2, [r3, #24]
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <AD7616_getVoltage>:

static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	AD_CONV_HIGH(ptADDev);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff ffe5 	bl	800acc0 <AD_CONV_HIGH>
	delay_ns(200);
 800acf6:	20c8      	movs	r0, #200	; 0xc8
 800acf8:	f001 fb70 	bl	800c3dc <delay_ns>
	AD_CONV_LOW(ptADDev);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff ffcd 	bl	800ac9c <AD_CONV_LOW>
	ptADDev->ucDataFlag = 0;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800ad0a:	bf00      	nop
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t GPIO_Pin)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800ad22:	2300      	movs	r3, #0
 800ad24:	613b      	str	r3, [r7, #16]
 800ad26:	e024      	b.n	800ad72 <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ad28:	4b16      	ldr	r3, [pc, #88]	; (800ad84 <ADBoard_BUSYCallback+0x70>)
 800ad2a:	6819      	ldr	r1, [r3, #0]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	4413      	add	r3, r2
 800ad34:	011b      	lsls	r3, r3, #4
 800ad36:	440b      	add	r3, r1
 800ad38:	60fb      	str	r3, [r7, #12]
		if (GPIO_Pin == ptADDev->BUSY_Pin)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800ad40:	88fa      	ldrh	r2, [r7, #6]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d112      	bne.n	800ad6c <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800ad46:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <ADBoard_BUSYCallback+0x70>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	b292      	uxth	r2, r2
 800ad4e:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
				AD_CS_LOW(ptADDev);
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f7ff ff80 	bl	800ac58 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD7616_CHANNELNUM);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	2310      	movs	r3, #16
 800ad60:	4909      	ldr	r1, [pc, #36]	; (800ad88 <ADBoard_BUSYCallback+0x74>)
 800ad62:	f7f9 fc33 	bl	80045cc <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]
				break;
 800ad6a:	e005      	b.n	800ad78 <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	613b      	str	r3, [r7, #16]
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	ddd7      	ble.n	800ad28 <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800ad78:	697b      	ldr	r3, [r7, #20]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	2000000c 	.word	0x2000000c
 800ad88:	20000010 	.word	0x20000010

0800ad8c <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	int ret=1;
 800ad94:	2301      	movs	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	e085      	b.n	800aeaa <ADBoard_SPICallback+0x11e>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ad9e:	4b47      	ldr	r3, [pc, #284]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ada0:	6819      	ldr	r1, [r3, #0]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	4613      	mov	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	4413      	add	r3, r2
 800adaa:	011b      	lsls	r3, r3, #4
 800adac:	440b      	add	r3, r1
 800adae:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d174      	bne.n	800aea4 <ADBoard_SPICallback+0x118>
				{
					ptADBoardDevices->curADBoardNum=i;
 800adba:	4b40      	ldr	r3, [pc, #256]	; (800aebc <ADBoard_SPICallback+0x130>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	b292      	uxth	r2, r2
 800adc2:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
					AD_CS_HIGH(ptADDev);
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f7ff ff58 	bl	800ac7c <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
					ptADDev->chosen = 0;
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	2200      	movs	r2, #0
 800add8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
					for(int j=0;j<AD7616_CHANNELNUM;j++)
 800addc:	2300      	movs	r3, #0
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	e01a      	b.n	800ae18 <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adf2:	eddf 6a33 	vldr	s13, [pc, #204]	; 800aec0 <ADBoard_SPICallback+0x134>
 800adf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800ae00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3308      	adds	r3, #8
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD7616_CHANNELNUM;j++)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3301      	adds	r3, #1
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b0f      	cmp	r3, #15
 800ae1c:	dde1      	ble.n	800ade2 <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800ae1e:	4b27      	ldr	r3, [pc, #156]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800ae26:	3301      	adds	r3, #1
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	dc19      	bgt.n	800ae60 <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800ae2c:	4b23      	ldr	r3, [pc, #140]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 800ae34:	4b21      	ldr	r3, [pc, #132]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3201      	adds	r2, #1
 800ae3a:	b292      	uxth	r2, r2
 800ae3c:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800ae40:	4b1e      	ldr	r3, [pc, #120]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4b1d      	ldr	r3, [pc, #116]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	460b      	mov	r3, r1
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	440b      	add	r3, r1
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	4413      	add	r3, r2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff ff41 	bl	800ace0 <AD7616_getVoltage>
 800ae5e:	e01e      	b.n	800ae9e <ADBoard_SPICallback+0x112>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800ae60:	4b16      	ldr	r3, [pc, #88]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae68:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
						ptADBoardDevices->ucDataFlag = 1;
 800ae6c:	4b13      	ldr	r3, [pc, #76]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
						ptADBoardDevices->ADTimeEnd=micros();
 800ae76:	f001 fa81 	bl	800c37c <micros>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800ae84:	4b0d      	ldr	r3, [pc, #52]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f8d3 112c 	ldr.w	r1, [r3, #300]	; 0x12c
 800ae8c:	4b0b      	ldr	r3, [pc, #44]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800ae94:	4b09      	ldr	r3, [pc, #36]	; (800aebc <ADBoard_SPICallback+0x130>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	1a8a      	subs	r2, r1, r2
 800ae9a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
					}
					ret=0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	617b      	str	r3, [r7, #20]
					break;
 800aea2:	e006      	b.n	800aeb2 <ADBoard_SPICallback+0x126>
		for(int i=0;i<ADBOARD_NUM;i++)
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	3301      	adds	r3, #1
 800aea8:	613b      	str	r3, [r7, #16]
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	f77f af76 	ble.w	800ad9e <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800aeb2:	697b      	ldr	r3, [r7, #20]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	2000000c 	.word	0x2000000c
 800aec0:	47800000 	.word	0x47800000

0800aec4 <ADBoard_Reset>:

void ADBoard_Reset()
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
	AD_RESET_HIGH();
 800aec8:	4b09      	ldr	r3, [pc, #36]	; (800aef0 <ADBoard_Reset+0x2c>)
 800aeca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aece:	619a      	str	r2, [r3, #24]
	delay_us(5);
 800aed0:	2005      	movs	r0, #5
 800aed2:	f001 fa69 	bl	800c3a8 <delay_us>
	AD_RESET_LOW();
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <ADBoard_Reset+0x2c>)
 800aed8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800aedc:	619a      	str	r2, [r3, #24]
	delay_us(5);
 800aede:	2005      	movs	r0, #5
 800aee0:	f001 fa62 	bl	800c3a8 <delay_us>
	AD_RESET_HIGH();
 800aee4:	4b02      	ldr	r3, [pc, #8]	; (800aef0 <ADBoard_Reset+0x2c>)
 800aee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aeea:	619a      	str	r2, [r3, #24]
}
 800aeec:	bf00      	nop
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	40020400 	.word	0x40020400

0800aef4 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800aef8:	4b10      	ldr	r3, [pc, #64]	; (800af3c <ADBoard_updateVoltage+0x48>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
	ptADBoardDevices->curADBoardNum = 0;
 800af02:	4b0e      	ldr	r3, [pc, #56]	; (800af3c <ADBoard_updateVoltage+0x48>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2200      	movs	r2, #0
 800af08:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
	ptADBoardDevices->ADTimeStart=micros();
 800af0c:	f001 fa36 	bl	800c37c <micros>
 800af10:	4602      	mov	r2, r0
 800af12:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <ADBoard_updateVoltage+0x48>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800af1a:	4b08      	ldr	r3, [pc, #32]	; (800af3c <ADBoard_updateVoltage+0x48>)
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	4b07      	ldr	r3, [pc, #28]	; (800af3c <ADBoard_updateVoltage+0x48>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800af26:	4619      	mov	r1, r3
 800af28:	460b      	mov	r3, r1
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	440b      	add	r3, r1
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff fed4 	bl	800ace0 <AD7616_getVoltage>
}
 800af38:	bf00      	nop
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	2000000c 	.word	0x2000000c

0800af40 <AnalogRead_External>:

float AnalogRead_External(uint16_t num) {
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	80fb      	strh	r3, [r7, #6]
	if (0<=num && num<EXTERNAL_ANA_IN_NUM)
 800af4a:	88fb      	ldrh	r3, [r7, #6]
 800af4c:	2b1f      	cmp	r3, #31
 800af4e:	d814      	bhi.n	800af7a <AnalogRead_External+0x3a>
	{
		uint16_t boardnum=num/AD7616_CHANNELNUM;
 800af50:	88fb      	ldrh	r3, [r7, #6]
 800af52:	091b      	lsrs	r3, r3, #4
 800af54:	81fb      	strh	r3, [r7, #14]
		uint16_t channelnum=num%AD7616_CHANNELNUM;
 800af56:	88fb      	ldrh	r3, [r7, #6]
 800af58:	f003 030f 	and.w	r3, r3, #15
 800af5c:	81bb      	strh	r3, [r7, #12]
		return ptADBoardDevices->ADBoards[boardnum].fChannel[channelnum];
 800af5e:	4b0c      	ldr	r3, [pc, #48]	; (800af90 <AnalogRead_External+0x50>)
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	89fa      	ldrh	r2, [r7, #14]
 800af64:	89b8      	ldrh	r0, [r7, #12]
 800af66:	4613      	mov	r3, r2
 800af68:	00db      	lsls	r3, r3, #3
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4403      	add	r3, r0
 800af70:	3308      	adds	r3, #8
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	440b      	add	r3, r1
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	e001      	b.n	800af7e <AnalogRead_External+0x3e>
	}
	else
		return 0;
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	ee07 3a90 	vmov	s15, r3
}
 800af82:	eeb0 0a67 	vmov.f32	s0, s15
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	2000000c 	.word	0x2000000c

0800af94 <ADBoard_Init>:

void ADBoard_Init()
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0

	ptADBoardDevices->curADBoardNum=-1;
 800af98:	4b4a      	ldr	r3, [pc, #296]	; (800b0c4 <ADBoard_Init+0x130>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afa0:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
	ptADBoardDevices->ucDataFlag = 0;
 800afa4:	4b47      	ldr	r3, [pc, #284]	; (800b0c4 <ADBoard_Init+0x130>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
	ptADBoardDevices->ADTime=0;
 800afae:	4b45      	ldr	r3, [pc, #276]	; (800b0c4 <ADBoard_Init+0x130>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	ptADBoardDevices->ADTimeStart=0;
 800afb8:	4b42      	ldr	r3, [pc, #264]	; (800b0c4 <ADBoard_Init+0x130>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	ptADBoardDevices->ADTimeEnd=0;
 800afc2:	4b40      	ldr	r3, [pc, #256]	; (800b0c4 <ADBoard_Init+0x130>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -5;
 800afcc:	4b3d      	ldr	r3, [pc, #244]	; (800b0c4 <ADBoard_Init+0x130>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a3d      	ldr	r2, [pc, #244]	; (800b0c8 <ADBoard_Init+0x134>)
 800afd2:	661a      	str	r2, [r3, #96]	; 0x60
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 5;
 800afd4:	4b3b      	ldr	r3, [pc, #236]	; (800b0c4 <ADBoard_Init+0x130>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a3c      	ldr	r2, [pc, #240]	; (800b0cc <ADBoard_Init+0x138>)
 800afda:	665a      	str	r2, [r3, #100]	; 0x64
	ptADBoardDevices->ADBoards[0].fRange = 10;
 800afdc:	4b39      	ldr	r3, [pc, #228]	; (800b0c4 <ADBoard_Init+0x130>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a3b      	ldr	r2, [pc, #236]	; (800b0d0 <ADBoard_Init+0x13c>)
 800afe2:	669a      	str	r2, [r3, #104]	; 0x68
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi3;
 800afe4:	4b37      	ldr	r3, [pc, #220]	; (800b0c4 <ADBoard_Init+0x130>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a3a      	ldr	r2, [pc, #232]	; (800b0d4 <ADBoard_Init+0x140>)
 800afea:	671a      	str	r2, [r3, #112]	; 0x70
	ptADBoardDevices->ADBoards[0].CONV_Port = DO_18_GPIO_Port;
 800afec:	4b35      	ldr	r3, [pc, #212]	; (800b0c4 <ADBoard_Init+0x130>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a39      	ldr	r2, [pc, #228]	; (800b0d8 <ADBoard_Init+0x144>)
 800aff2:	675a      	str	r2, [r3, #116]	; 0x74
	ptADBoardDevices->ADBoards[0].CONV_Pin = DO_18_Pin;
 800aff4:	4b33      	ldr	r3, [pc, #204]	; (800b0c4 <ADBoard_Init+0x130>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800affc:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	ptADBoardDevices->ADBoards[0].CS_Port = SPI3_CS_GPIO_Port;
 800b000:	4b30      	ldr	r3, [pc, #192]	; (800b0c4 <ADBoard_Init+0x130>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a35      	ldr	r2, [pc, #212]	; (800b0dc <ADBoard_Init+0x148>)
 800b006:	67da      	str	r2, [r3, #124]	; 0x7c
	ptADBoardDevices->ADBoards[0].CS_Pin = SPI3_CS_Pin;
 800b008:	4b2e      	ldr	r3, [pc, #184]	; (800b0c4 <ADBoard_Init+0x130>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2202      	movs	r2, #2
 800b00e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	ptADBoardDevices->ADBoards[0].BUSY_Port = E7_GPIO_Port;
 800b012:	4b2c      	ldr	r3, [pc, #176]	; (800b0c4 <ADBoard_Init+0x130>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a32      	ldr	r2, [pc, #200]	; (800b0e0 <ADBoard_Init+0x14c>)
 800b018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ptADBoardDevices->ADBoards[0].BUSY_Pin = E7_Pin;
 800b01c:	4b29      	ldr	r3, [pc, #164]	; (800b0c4 <ADBoard_Init+0x130>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2280      	movs	r2, #128	; 0x80
 800b022:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	memcpy(&(ptADBoardDevices->ADBoards[1]),&(ptADBoardDevices->ADBoards[0]),sizeof(AD7616_DEVICE));
 800b026:	4b27      	ldr	r3, [pc, #156]	; (800b0c4 <ADBoard_Init+0x130>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800b02e:	4b25      	ldr	r3, [pc, #148]	; (800b0c4 <ADBoard_Init+0x130>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2290      	movs	r2, #144	; 0x90
 800b034:	4619      	mov	r1, r3
 800b036:	f006 fd11 	bl	8011a5c <memcpy>


	ptADBoardDevices->ADBoards[1].fMinVoltage = -5;
 800b03a:	4b22      	ldr	r3, [pc, #136]	; (800b0c4 <ADBoard_Init+0x130>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a22      	ldr	r2, [pc, #136]	; (800b0c8 <ADBoard_Init+0x134>)
 800b040:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	ptADBoardDevices->ADBoards[1].fMaxVoltage = 5;
 800b044:	4b1f      	ldr	r3, [pc, #124]	; (800b0c4 <ADBoard_Init+0x130>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a20      	ldr	r2, [pc, #128]	; (800b0cc <ADBoard_Init+0x138>)
 800b04a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	ptADBoardDevices->ADBoards[1].fRange = 10;
 800b04e:	4b1d      	ldr	r3, [pc, #116]	; (800b0c4 <ADBoard_Init+0x130>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a1f      	ldr	r2, [pc, #124]	; (800b0d0 <ADBoard_Init+0x13c>)
 800b054:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	ptADBoardDevices->ADBoards[1].AD_spi = &hspi1;
 800b058:	4b1a      	ldr	r3, [pc, #104]	; (800b0c4 <ADBoard_Init+0x130>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a21      	ldr	r2, [pc, #132]	; (800b0e4 <ADBoard_Init+0x150>)
 800b05e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	ptADBoardDevices->ADBoards[1].CONV_Port = DO_17_GPIO_Port;
 800b062:	4b18      	ldr	r3, [pc, #96]	; (800b0c4 <ADBoard_Init+0x130>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a20      	ldr	r2, [pc, #128]	; (800b0e8 <ADBoard_Init+0x154>)
 800b068:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	ptADBoardDevices->ADBoards[1].CONV_Pin = DO_17_Pin;
 800b06c:	4b15      	ldr	r3, [pc, #84]	; (800b0c4 <ADBoard_Init+0x130>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b074:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	ptADBoardDevices->ADBoards[1].CS_Port = SPI1_CS_GPIO_Port;
 800b078:	4b12      	ldr	r3, [pc, #72]	; (800b0c4 <ADBoard_Init+0x130>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a1b      	ldr	r2, [pc, #108]	; (800b0ec <ADBoard_Init+0x158>)
 800b07e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	ptADBoardDevices->ADBoards[1].CS_Pin = SPI1_CS_Pin;
 800b082:	4b10      	ldr	r3, [pc, #64]	; (800b0c4 <ADBoard_Init+0x130>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b08a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	ptADBoardDevices->ADBoards[1].BUSY_Port = E6_GPIO_Port;
 800b08e:	4b0d      	ldr	r3, [pc, #52]	; (800b0c4 <ADBoard_Init+0x130>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a13      	ldr	r2, [pc, #76]	; (800b0e0 <ADBoard_Init+0x14c>)
 800b094:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	ptADBoardDevices->ADBoards[1].BUSY_Pin = E6_Pin;
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <ADBoard_Init+0x130>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2240      	movs	r2, #64	; 0x40
 800b09e:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	ptADBoardDevices->ADBoards[1].chosen = 0;
 800b0a2:	4b08      	ldr	r3, [pc, #32]	; (800b0c4 <ADBoard_Init+0x130>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	ptADBoardDevices->ADBoards[1].ucDataFlag = 0;
 800b0ac:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <ADBoard_Init+0x130>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c





	ADBoard_Reset();
 800b0b6:	f7ff ff05 	bl	800aec4 <ADBoard_Reset>

	ADBoard_updateVoltage();
 800b0ba:	f7ff ff1b 	bl	800aef4 <ADBoard_updateVoltage>
}
 800b0be:	bf00      	nop
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	2000000c 	.word	0x2000000c
 800b0c8:	c0a00000 	.word	0xc0a00000
 800b0cc:	40a00000 	.word	0x40a00000
 800b0d0:	41200000 	.word	0x41200000
 800b0d4:	200096a0 	.word	0x200096a0
 800b0d8:	40020400 	.word	0x40020400
 800b0dc:	40020c00 	.word	0x40020c00
 800b0e0:	40021800 	.word	0x40021800
 800b0e4:	20009828 	.word	0x20009828
 800b0e8:	40021000 	.word	0x40021000
 800b0ec:	40020000 	.word	0x40020000

0800b0f0 <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800b0f0:	b5b0      	push	{r4, r5, r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3304      	adds	r3, #4
 800b102:	68b9      	ldr	r1, [r7, #8]
 800b104:	4618      	mov	r0, r3
 800b106:	f001 f9b1 	bl	800c46c <_ZN14SOLENOID_VALVEC1Ei>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	331c      	adds	r3, #28
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	4618      	mov	r0, r3
 800b112:	f001 f9ab 	bl	800c46c <_ZN14SOLENOID_VALVEC1Ei>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3334      	adds	r3, #52	; 0x34
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 fba7 	bl	800b870 <_ZN15PRESSURE_SENSORC1Ei>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3350      	adds	r3, #80	; 0x50
 800b126:	4618      	mov	r0, r3
 800b128:	f003 fa0c 	bl	800e544 <_ZN18PRESSURE_SENSORSPIC1Ev>
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	f241 0364 	movw	r3, #4196	; 0x1064
 800b132:	4413      	add	r3, r2
 800b134:	4a65      	ldr	r2, [pc, #404]	; (800b2cc <_ZN7CHAMBERC1Eiii+0x1dc>)
 800b136:	461c      	mov	r4, r3
 800b138:	4615      	mov	r5, r2
 800b13a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b13c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b13e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	f241 0398 	movw	r3, #4248	; 0x1098
 800b150:	4413      	add	r3, r2
 800b152:	4a5f      	ldr	r2, [pc, #380]	; (800b2d0 <_ZN7CHAMBERC1Eiii+0x1e0>)
 800b154:	461c      	mov	r4, r3
 800b156:	4615      	mov	r5, r2
 800b158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b15a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b15c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b15e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800b16e:	4413      	add	r3, r2
 800b170:	4a58      	ldr	r2, [pc, #352]	; (800b2d4 <_ZN7CHAMBERC1Eiii+0x1e4>)
 800b172:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800b17a:	4413      	add	r3, r2
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	68f9      	ldr	r1, [r7, #12]
 800b180:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800b184:	440b      	add	r3, r1
 800b186:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4a53      	ldr	r2, [pc, #332]	; (800b2d8 <_ZN7CHAMBERC1Eiii+0x1e8>)
 800b18c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressure=0;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f04f 0200 	mov.w	r2, #0
 800b196:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f04f 0200 	mov.w	r2, #0
 800b1a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f04f 0200 	mov.w	r2, #0
 800b1aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pressureDeadZone = 2000;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	4a47      	ldr	r2, [pc, #284]	; (800b2dc <_ZN7CHAMBERC1Eiii+0x1ec>)
 800b1be:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4a47      	ldr	r2, [pc, #284]	; (800b2e0 <_ZN7CHAMBERC1Eiii+0x1f0>)
 800b1c4:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4a46      	ldr	r2, [pc, #280]	; (800b2e4 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800b1ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	f241 0354 	movw	r3, #4180	; 0x1054
 800b1d4:	4413      	add	r3, r2
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]
	opening = 0;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f04f 0200 	mov.w	r2, #0
 800b1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	da00      	bge.n	800b1f4 <_ZN7CHAMBERC1Eiii+0x104>
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	105b      	asrs	r3, r3, #1
 800b1f6:	4a3c      	ldr	r2, [pc, #240]	; (800b2e8 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800b1f8:	011b      	lsls	r3, r3, #4
 800b1fa:	4413      	add	r3, r2
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2b00      	cmp	r3, #0
 800b208:	da00      	bge.n	800b20c <_ZN7CHAMBERC1Eiii+0x11c>
 800b20a:	3301      	adds	r3, #1
 800b20c:	105b      	asrs	r3, r3, #1
 800b20e:	4a36      	ldr	r2, [pc, #216]	; (800b2e8 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800b210:	011b      	lsls	r3, r3, #4
 800b212:	4413      	add	r3, r2
 800b214:	3304      	adds	r3, #4
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	da00      	bge.n	800b226 <_ZN7CHAMBERC1Eiii+0x136>
 800b224:	3301      	adds	r3, #1
 800b226:	105b      	asrs	r3, r3, #1
 800b228:	4a2f      	ldr	r2, [pc, #188]	; (800b2e8 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800b22a:	011b      	lsls	r3, r3, #4
 800b22c:	4413      	add	r3, r2
 800b22e:	3308      	adds	r3, #8
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	da00      	bge.n	800b240 <_ZN7CHAMBERC1Eiii+0x150>
 800b23e:	3301      	adds	r3, #1
 800b240:	105b      	asrs	r3, r3, #1
 800b242:	4a29      	ldr	r2, [pc, #164]	; (800b2e8 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	4413      	add	r3, r2
 800b248:	330c      	adds	r3, #12
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b258:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800b25c:	eddf 4a23 	vldr	s9, [pc, #140]	; 800b2ec <_ZN7CHAMBERC1Eiii+0x1fc>
 800b260:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800b2f0 <_ZN7CHAMBERC1Eiii+0x200>
 800b264:	eddf 3a23 	vldr	s7, [pc, #140]	; 800b2f4 <_ZN7CHAMBERC1Eiii+0x204>
 800b268:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800b2f4 <_ZN7CHAMBERC1Eiii+0x204>
 800b26c:	eddf 2a22 	vldr	s5, [pc, #136]	; 800b2f8 <_ZN7CHAMBERC1Eiii+0x208>
 800b270:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800b2fc <_ZN7CHAMBERC1Eiii+0x20c>
 800b274:	eddf 1a22 	vldr	s3, [pc, #136]	; 800b300 <_ZN7CHAMBERC1Eiii+0x210>
 800b278:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800b304 <_ZN7CHAMBERC1Eiii+0x214>
 800b27c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b2f4 <_ZN7CHAMBERC1Eiii+0x204>
 800b280:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b308 <_ZN7CHAMBERC1Eiii+0x218>
 800b284:	f000 fa92 	bl	800b7ac <NewPressureController>
 800b288:	4602      	mov	r2, r0
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	f241 035c 	movw	r3, #4188	; 0x105c
 800b294:	4413      	add	r3, r2
 800b296:	2200      	movs	r2, #0
 800b298:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	f241 0358 	movw	r3, #4184	; 0x1058
 800b2a0:	4413      	add	r3, r2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	33b4      	adds	r3, #180	; 0xb4
 800b2b4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f006 fbd9 	bl	8011a72 <memset>

}
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	08016678 	.word	0x08016678
 800b2d0:	080166ac 	.word	0x080166ac
 800b2d4:	3e99999a 	.word	0x3e99999a
 800b2d8:	3c23d70a 	.word	0x3c23d70a
 800b2dc:	44fa0000 	.word	0x44fa0000
 800b2e0:	46ea6000 	.word	0x46ea6000
 800b2e4:	c6ea6000 	.word	0xc6ea6000
 800b2e8:	20000030 	.word	0x20000030
 800b2ec:	3e99999a 	.word	0x3e99999a
 800b2f0:	387ba882 	.word	0x387ba882
 800b2f4:	00000000 	.word	0x00000000
 800b2f8:	37a7c5ac 	.word	0x37a7c5ac
 800b2fc:	471c4000 	.word	0x471c4000
 800b300:	501502f9 	.word	0x501502f9
 800b304:	3a83126f 	.word	0x3a83126f
 800b308:	48435000 	.word	0x48435000

0800b30c <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3304      	adds	r3, #4
 800b31e:	68b9      	ldr	r1, [r7, #8]
 800b320:	4618      	mov	r0, r3
 800b322:	f001 f8cd 	bl	800c4c0 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	331c      	adds	r3, #28
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f001 f8c7 	bl	800c4c0 <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	3334      	adds	r3, #52	; 0x34
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 fafb 	bl	800b934 <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b33e:	bf00      	nop
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <_ZN7CHAMBER12readPressureEv>:
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}

float CHAMBER::readPressure(){
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
	pressure = pressureSensor.read();
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3334      	adds	r3, #52	; 0x34
 800b352:	4618      	mov	r0, r3
 800b354:	f000 fab2 	bl	800b8bc <_ZN15PRESSURE_SENSOR4readEv>
 800b358:	eef0 7a40 	vmov.f32	s15, s0
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	//pressure = pressureSensorspi.read();
	return pressure;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b368:	ee07 3a90 	vmov	s15, r3
}
 800b36c:	eeb0 0a67 	vmov.f32	s0, s15
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800b384:	edd7 7a00 	vldr	s15, [r7]
 800b388:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800b56c <_ZN7CHAMBER13writePressureEf+0x1f4>
 800b38c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b394:	d501      	bpl.n	800b39a <_ZN7CHAMBER13writePressureEf+0x22>
 800b396:	4b76      	ldr	r3, [pc, #472]	; (800b570 <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800b398:	e00b      	b.n	800b3b2 <_ZN7CHAMBER13writePressureEf+0x3a>
 800b39a:	edd7 7a00 	vldr	s15, [r7]
 800b39e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800b574 <_ZN7CHAMBER13writePressureEf+0x1fc>
 800b3a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3aa:	dd01      	ble.n	800b3b0 <_ZN7CHAMBER13writePressureEf+0x38>
 800b3ac:	4b72      	ldr	r3, [pc, #456]	; (800b578 <_ZN7CHAMBER13writePressureEf+0x200>)
 800b3ae:	e000      	b.n	800b3b2 <_ZN7CHAMBER13writePressureEf+0x3a>
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

	float pErr = pressureCommand-pressure;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b3c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3c8:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800b3d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3de:	d54e      	bpl.n	800b47e <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b3ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f8:	dd03      	ble.n	800b402 <_ZN7CHAMBER13writePressureEf+0x8a>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b400:	e019      	b.n	800b436 <_ZN7CHAMBER13writePressureEf+0xbe>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b40e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b412:	edd7 7a03 	vldr	s15, [r7, #12]
 800b416:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41e:	d508      	bpl.n	800b432 <_ZN7CHAMBER13writePressureEf+0xba>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b42c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b430:	e001      	b.n	800b436 <_ZN7CHAMBER13writePressureEf+0xbe>
 800b432:	edd7 7a03 	vldr	s15, [r7, #12]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b43c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b44c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b450:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b460:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b46a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b46e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b472:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b47c:	e06a      	b.n	800b554 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b484:	eeb1 7a67 	vneg.f32	s14, s15
 800b488:	edd7 7a03 	vldr	s15, [r7, #12]
 800b48c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b494:	dd59      	ble.n	800b54a <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b4a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b4ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4b0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b8:	dd08      	ble.n	800b4cc <_ZN7CHAMBER13writePressureEf+0x154>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b4c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4ca:	e013      	b.n	800b4f4 <_ZN7CHAMBER13writePressureEf+0x17c>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b4d2:	eef1 6a67 	vneg.f32	s13, s15
 800b4d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4da:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e2:	d505      	bpl.n	800b4f0 <_ZN7CHAMBER13writePressureEf+0x178>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b4ea:	eef1 7a67 	vneg.f32	s15, s15
 800b4ee:	e001      	b.n	800b4f4 <_ZN7CHAMBER13writePressureEf+0x17c>
 800b4f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b500:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b504:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800b514:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b518:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b522:	eef1 6a67 	vneg.f32	s13, s15
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b532:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800b536:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b53a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b53e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b548:	e004      	b.n	800b554 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f04f 0200 	mov.w	r2, #0
 800b550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b55a:	eeb0 0a67 	vmov.f32	s0, s15
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f80c 	bl	800b57c <_ZN7CHAMBER12writeOpeningEf>
}
 800b564:	bf00      	nop
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	c7c35000 	.word	0xc7c35000
 800b570:	c7c35000 	.word	0xc7c35000
 800b574:	482fc800 	.word	0x482fc800
 800b578:	482fc800 	.word	0x482fc800

0800b57c <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800b588:	edd7 7a00 	vldr	s15, [r7]
 800b58c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b594:	dd2b      	ble.n	800b5ee <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800b596:	edd7 7a00 	vldr	s15, [r7]
 800b59a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a2:	d502      	bpl.n	800b5aa <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	e00c      	b.n	800b5c4 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b5aa:	edd7 7a00 	vldr	s15, [r7]
 800b5ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ba:	dd02      	ble.n	800b5c2 <_ZN7CHAMBER12writeOpeningEf+0x46>
 800b5bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b5c0:	e000      	b.n	800b5c4 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	1d1a      	adds	r2, r3, #4
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b5d4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5d8:	4610      	mov	r0, r2
 800b5da:	f000 ff81 	bl	800c4e0 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	331c      	adds	r3, #28
 800b5e2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b650 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 ff7a 	bl	800c4e0 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800b5ec:	e02c      	b.n	800b648 <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800b5ee:	edd7 7a00 	vldr	s15, [r7]
 800b5f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b5f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fe:	d501      	bpl.n	800b604 <_ZN7CHAMBER12writeOpeningEf+0x88>
 800b600:	4b14      	ldr	r3, [pc, #80]	; (800b654 <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800b602:	e00a      	b.n	800b61a <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b604:	edd7 7a00 	vldr	s15, [r7]
 800b608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b610:	dd02      	ble.n	800b618 <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800b612:	f04f 0300 	mov.w	r3, #0
 800b616:	e000      	b.n	800b61a <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3304      	adds	r3, #4
 800b624:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b650 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 ff59 	bl	800c4e0 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f103 021c 	add.w	r2, r3, #28
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b63a:	eef1 7a67 	vneg.f32	s15, s15
 800b63e:	eeb0 0a67 	vmov.f32	s0, s15
 800b642:	4610      	mov	r0, r2
 800b644:	f000 ff4c 	bl	800c4e0 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	00000000 	.word	0x00000000
 800b654:	bf800000 	.word	0xbf800000

0800b658 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800b662:	edd7 7a01 	vldr	s15, [r7, #4]
 800b666:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b66a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b66e:	eef0 7ae7 	vabs.f32	s15, s15
 800b672:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b676:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b698 <mySAT+0x40>
 800b67a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b67e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b682:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800b686:	eeb0 0a67 	vmov.f32	s0, s15
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	f3af 8000 	nop.w
 800b698:	47ae147b 	.word	0x47ae147b
 800b69c:	3f847ae1 	.word	0x3f847ae1

0800b6a0 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08a      	sub	sp, #40	; 0x28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b6ac:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	ed93 7a08 	vldr	s14, [r3, #32]
 800b6c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	edd3 6a07 	vldr	s13, [r3, #28]
 800b6d0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b774 <superTwisting2rdSMCUpdate+0xd4>
 800b6e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	edd3 7a02 	vldr	s15, [r3, #8]
 800b6f0:	eeb0 0a67 	vmov.f32	s0, s15
 800b6f4:	f7ff ffb0 	bl	800b658 <mySAT>
 800b6f8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	edd3 7a02 	vldr	s15, [r3, #8]
 800b702:	eeb0 7ae7 	vabs.f32	s14, s15
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	edd3 7a04 	vldr	s15, [r3, #16]
 800b70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b710:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	f107 0314 	add.w	r3, r7, #20
 800b722:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b724:	edd7 7a07 	vldr	s15, [r7, #28]
 800b728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b730:	db09      	blt.n	800b746 <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800b732:	ed97 0a07 	vldr	s0, [r7, #28]
 800b736:	f005 fe73 	bl	8011420 <sqrtf>
 800b73a:	eef0 7a40 	vmov.f32	s15, s0
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	edc3 7a00 	vstr	s15, [r3]
 800b744:	e003      	b.n	800b74e <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800b74e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	ee07 3a90 	vmov	s15, r3
}
 800b768:	eeb0 0a67 	vmov.f32	s0, s15
 800b76c:	3728      	adds	r7, #40	; 0x28
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	447a0000 	.word	0x447a0000

0800b778 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	ed87 0a02 	vstr	s0, [r7, #8]
 800b784:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	3324      	adds	r3, #36	; 0x24
 800b78c:	edd7 0a01 	vldr	s1, [r7, #4]
 800b790:	ed97 0a02 	vldr	s0, [r7, #8]
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff ff83 	bl	800b6a0 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	ee07 3a90 	vmov	s15, r3
}
 800b7a2:	eeb0 0a67 	vmov.f32	s0, s15
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08c      	sub	sp, #48	; 0x30
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800b7b6:	edc7 0a08 	vstr	s1, [r7, #32]
 800b7ba:	ed87 1a07 	vstr	s2, [r7, #28]
 800b7be:	edc7 1a06 	vstr	s3, [r7, #24]
 800b7c2:	ed87 2a05 	vstr	s4, [r7, #20]
 800b7c6:	edc7 2a04 	vstr	s5, [r7, #16]
 800b7ca:	ed87 3a03 	vstr	s6, [r7, #12]
 800b7ce:	edc7 3a02 	vstr	s7, [r7, #8]
 800b7d2:	ed87 4a01 	vstr	s8, [r7, #4]
 800b7d6:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800b7da:	204c      	movs	r0, #76	; 0x4c
 800b7dc:	f006 f936 	bl	8011a4c <malloc>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800b7e4:	224c      	movs	r2, #76	; 0x4c
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7ea:	f006 f942 	bl	8011a72 <memset>
	pController->psource = psource;
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f2:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f6:	6a3a      	ldr	r2, [r7, #32]
 800b7f8:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	69fa      	ldr	r2, [r7, #28]
 800b7fe:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800b800:	ed97 1a07 	vldr	s2, [r7, #28]
 800b804:	edd7 0a05 	vldr	s1, [r7, #20]
 800b808:	ed97 0a06 	vldr	s0, [r7, #24]
 800b80c:	f001 fd92 	bl	800d334 <newSimpleKalmanFilter>
 800b810:	4602      	mov	r2, r0
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800b816:	edd7 2a00 	vldr	s5, [r7]
 800b81a:	ed97 2a01 	vldr	s4, [r7, #4]
 800b81e:	edd7 1a07 	vldr	s3, [r7, #28]
 800b822:	ed97 1a02 	vldr	s2, [r7, #8]
 800b826:	edd7 0a03 	vldr	s1, [r7, #12]
 800b82a:	ed97 0a04 	vldr	s0, [r7, #16]
 800b82e:	f002 fa6a 	bl	800dd06 <newPID>
 800b832:	4602      	mov	r2, r0
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	69fa      	ldr	r2, [r7, #28]
 800b83c:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800b83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b840:	4a08      	ldr	r2, [pc, #32]	; (800b864 <NewPressureController+0xb8>)
 800b842:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b84a:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800b84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84e:	4a06      	ldr	r2, [pc, #24]	; (800b868 <NewPressureController+0xbc>)
 800b850:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	4a05      	ldr	r2, [pc, #20]	; (800b86c <NewPressureController+0xc0>)
 800b856:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3730      	adds	r7, #48	; 0x30
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	3627c5ac 	.word	0x3627c5ac
 800b868:	41a00000 	.word	0x41a00000
 800b86c:	0800b779 	.word	0x0800b779

0800b870 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f04f 0200 	mov.w	r2, #0
 800b880:	605a      	str	r2, [r3, #4]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f04f 0200 	mov.w	r2, #0
 800b888:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f851 	bl	800b934 <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800b892:	eddf 1a08 	vldr	s3, [pc, #32]	; 800b8b4 <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800b896:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800b8b8 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800b89a:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800b89e:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f854 	bl	800b950 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	48927c00 	.word	0x48927c00
 800b8b8:	00000000 	.word	0x00000000

0800b8bc <_ZN15PRESSURE_SENSOR4readEv>:

float PRESSURE_SENSOR::read()
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
	voltage = AnalogRead(AnalogPort);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fcc8 	bl	800c260 <AnalogRead>
 800b8d0:	eef0 7a40 	vmov.f32	s15, s0
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	ed93 7a05 	vldr	s14, [r3, #20]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	edd3 6a01 	vldr	s13, [r3, #4]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	edd3 7a03 	vldr	s15, [r3, #12]
 800b8ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	ed93 6a06 	vldr	s12, [r3, #24]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	edd3 7a05 	vldr	s15, [r3, #20]
 800b8fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b900:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	edd3 6a04 	vldr	s13, [r3, #16]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b910:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b914:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	edc3 7a02 	vstr	s15, [r3, #8]
	return pressure;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	ee07 3a90 	vmov	s15, r3
}
 800b92a:	eeb0 0a67 	vmov.f32	s0, s15
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <_ZN15PRESSURE_SENSOR6attachEi>:

void PRESSURE_SENSOR::attach(int num)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	601a      	str	r2, [r3, #0]

}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	6178      	str	r0, [r7, #20]
 800b958:	ed87 0a04 	vstr	s0, [r7, #16]
 800b95c:	edc7 0a03 	vstr	s1, [r7, #12]
 800b960:	ed87 1a02 	vstr	s2, [r7, #8]
 800b964:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	619a      	str	r2, [r3, #24]
}
 800b980:	bf00      	nop
 800b982:	371c      	adds	r7, #28
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3304      	adds	r3, #4
 800b99c:	2100      	movs	r1, #0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f8c9 	bl	800bb36 <_ZN4PUMPC1Ei>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	330c      	adds	r3, #12
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff ff60 	bl	800b870 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 f817 	bl	800b9e8 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]
	direction=0;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f04f 0200 	mov.w	r2, #0
 800b9cc:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f04f 0200 	mov.w	r2, #0
 800b9dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800b9f4:	68b9      	ldr	r1, [r7, #8]
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f000 f808 	bl	800ba0c <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 f813 	bl	800ba2a <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800ba04:	bf00      	nop
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 f89b 	bl	800bb58 <_ZN4PUMP6attachEi>
}
 800ba22:	bf00      	nop
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b082      	sub	sp, #8
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	330c      	adds	r3, #12
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff ff7a 	bl	800b934 <_ZN15PRESSURE_SENSOR6attachEi>
}
 800ba40:	bf00      	nop
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <_ZN15PRESSURE_SOURCE16maintainPressureEff>:

void PRESSURE_SOURCE::maintainPressure(float p_low,float p_high) {
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	ed87 0a02 	vstr	s0, [r7, #8]
 800ba54:	edc7 0a01 	vstr	s1, [r7, #4]

	pressureLower=p_low;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=p_high;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	635a      	str	r2, [r3, #52]	; 0x34
	readPressure();
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 f84f 	bl	800bb08 <_ZN15PRESSURE_SOURCE12readPressureEv>

	if(pressure<pressureLower)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ba76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7e:	d513      	bpl.n	800baa8 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x60>
	{
		if(pressureLower>0)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ba86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba8e:	dd05      	ble.n	800ba9c <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x54>
			pump.start();
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3304      	adds	r3, #4
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 f86d 	bl	800bb74 <_ZN4PUMP5startEv>
			pump.start();
		else
			pump.stop();
	}

}
 800ba9a:	e024      	b.n	800bae6 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
			pump.stop();
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 f879 	bl	800bb98 <_ZN4PUMP4stopEv>
}
 800baa6:	e01e      	b.n	800bae6 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
	else if(pressure>pressureUpper)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babc:	dc00      	bgt.n	800bac0 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x78>
}
 800babe:	e012      	b.n	800bae6 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
		if(pressureUpper<0)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800baca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bace:	d505      	bpl.n	800badc <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x94>
			pump.start();
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4618      	mov	r0, r3
 800bad6:	f000 f84d 	bl	800bb74 <_ZN4PUMP5startEv>
}
 800bada:	e004      	b.n	800bae6 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
			pump.stop();
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3304      	adds	r3, #4
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 f859 	bl	800bb98 <_ZN4PUMP4stopEv>
}
 800bae6:	bf00      	nop
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <_ZN15PRESSURE_SOURCE4stopEv>:

void PRESSURE_SOURCE::stop()
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b082      	sub	sp, #8
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
	pump.stop();
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3304      	adds	r3, #4
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 f84c 	bl	800bb98 <_ZN4PUMP4stopEv>
}
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <_ZN15PRESSURE_SOURCE12readPressureEv>:


float PRESSURE_SOURCE::readPressure() {
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
	pressure=pressureSensor.read();
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	330c      	adds	r3, #12
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7ff fed1 	bl	800b8bc <_ZN15PRESSURE_SENSOR4readEv>
 800bb1a:	eef0 7a40 	vmov.f32	s15, s0
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	return pressure;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb28:	ee07 3a90 	vmov	s15, r3
}
 800bb2c:	eeb0 0a67 	vmov.f32	s0, s15
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	6039      	str	r1, [r7, #0]
	status=0;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	605a      	str	r2, [r3, #4]
	attach(num);
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f805 	bl	800bb58 <_ZN4PUMP6attachEi>
}
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4618      	mov	r0, r3
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	601a      	str	r2, [r3, #0]
}
 800bb68:	bf00      	nop
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <_ZN4PUMP5startEv>:

void PUMP::start()
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]

	DigitalWrite(DigitalPort,1-PWM_DIGITAL_OUTPUT_REVERSED);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	2100      	movs	r1, #0
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 fb8e 	bl	800c2a6 <DigitalWrite>
	status=1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	605a      	str	r2, [r3, #4]

}
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <_ZN4PUMP4stopEv>:

void PUMP::stop()
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	DigitalWrite(DigitalPort,PWM_DIGITAL_OUTPUT_REVERSED);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	2101      	movs	r1, #1
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 fb7c 	bl	800c2a6 <DigitalWrite>
	status=0;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	605a      	str	r2, [r3, #4]

}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <PCA9685_readReg>:


static uint8_t PCABoard_I2C_Addresses[PWMBOARDI2C_NUM]={0x00,0x01,0x02,0x03};

static uint8_t PCA9685_readReg(PCA9685_PWM_DEVICE *ptPWMBoardPCA9685, uint8_t address)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af02      	add	r7, sp, #8
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
	 uint8_t initStruct[1];
	 uint8_t buffer[1];

	 initStruct[0] = address;
 800bbc8:	78fb      	ldrb	r3, [r7, #3]
 800bbca:	733b      	strb	r3, [r7, #12]

	 HAL_I2C_Master_Transmit(ptPWMBoardI2CDevices->pwm_hi2c,ptPWMBoardPCA9685->i2cAddress,initStruct,1,1);
 800bbcc:	4b10      	ldr	r3, [pc, #64]	; (800bc10 <PCA9685_readReg+0x54>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	785b      	ldrb	r3, [r3, #1]
 800bbd8:	b299      	uxth	r1, r3
 800bbda:	f107 020c 	add.w	r2, r7, #12
 800bbde:	2301      	movs	r3, #1
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	f7f6 ff16 	bl	8002a14 <HAL_I2C_Master_Transmit>
	 HAL_I2C_Master_Receive(ptPWMBoardI2CDevices->pwm_hi2c,ptPWMBoardPCA9685->i2cAddress,buffer,1,1);
 800bbe8:	4b09      	ldr	r3, [pc, #36]	; (800bc10 <PCA9685_readReg+0x54>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	785b      	ldrb	r3, [r3, #1]
 800bbf4:	b299      	uxth	r1, r3
 800bbf6:	f107 0208 	add.w	r2, r7, #8
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f7f6 fffc 	bl	8002bfc <HAL_I2C_Master_Receive>

	 return(buffer[0]);
 800bc04:	7a3b      	ldrb	r3, [r7, #8]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20000210 	.word	0x20000210

0800bc14 <PCA9685_writeReg>:
static void PCA9685_writeReg(PCA9685_PWM_DEVICE *ptPWMBoardPCA9685, uint8_t address,uint8_t data)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af02      	add	r7, sp, #8
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
 800bc20:	4613      	mov	r3, r2
 800bc22:	70bb      	strb	r3, [r7, #2]
	 uint8_t initStruct[2];
	 initStruct[0] = address;
 800bc24:	78fb      	ldrb	r3, [r7, #3]
 800bc26:	733b      	strb	r3, [r7, #12]
	 initStruct[1] = data;
 800bc28:	78bb      	ldrb	r3, [r7, #2]
 800bc2a:	737b      	strb	r3, [r7, #13]
	 HAL_I2C_Master_Transmit(ptPWMBoardI2CDevices->pwm_hi2c,ptPWMBoardPCA9685->i2cAddress,initStruct,2,1);
 800bc2c:	4b08      	ldr	r3, [pc, #32]	; (800bc50 <PCA9685_writeReg+0x3c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	785b      	ldrb	r3, [r3, #1]
 800bc38:	b299      	uxth	r1, r3
 800bc3a:	f107 020c 	add.w	r2, r7, #12
 800bc3e:	2301      	movs	r3, #1
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	2302      	movs	r3, #2
 800bc44:	f7f6 fee6 	bl	8002a14 <HAL_I2C_Master_Transmit>
}
 800bc48:	bf00      	nop
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20000210 	.word	0x20000210

0800bc54 <PCA9685_calculateDuty>:


static void PCA9685_calculateDuty(PCA9685_PWM_DEVICE *ptPWMBoardPCA9685 , uint8_t num, float fduty)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	ed87 0a01 	vstr	s0, [r7, #4]
 800bc62:	72fb      	strb	r3, [r7, #11]
	uint16_t on;
	uint16_t off;
	if (fduty <= 0) {
 800bc64:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc70:	d805      	bhi.n	800bc7e <PCA9685_calculateDuty+0x2a>
		on = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	82fb      	strh	r3, [r7, #22]
		off = 4096;
 800bc76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc7a:	82bb      	strh	r3, [r7, #20]
 800bc7c:	e029      	b.n	800bcd2 <PCA9685_calculateDuty+0x7e>
	} else if (fduty >= 1) {
 800bc7e:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc86:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8e:	db05      	blt.n	800bc9c <PCA9685_calculateDuty+0x48>
		on = 4096;
 800bc90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc94:	82fb      	strh	r3, [r7, #22]
		off = 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	82bb      	strh	r3, [r7, #20]
 800bc9a:	e01a      	b.n	800bcd2 <PCA9685_calculateDuty+0x7e>
	} else {
		on = 0;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	82fb      	strh	r3, [r7, #22]
		off = round(4096 * fduty);
 800bca0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bca4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bd24 <PCA9685_calculateDuty+0xd0>
 800bca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bcb0:	eeb0 0b47 	vmov.f64	d0, d7
 800bcb4:	f005 fb18 	bl	80112e8 <round>
 800bcb8:	eeb0 7b40 	vmov.f64	d7, d0
 800bcbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bcc0:	ee17 3a90 	vmov	r3, s15
 800bcc4:	82bb      	strh	r3, [r7, #20]
		if (off > 1)
 800bcc6:	8abb      	ldrh	r3, [r7, #20]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d902      	bls.n	800bcd2 <PCA9685_calculateDuty+0x7e>
			off--;
 800bccc:	8abb      	ldrh	r3, [r7, #20]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	82bb      	strh	r3, [r7, #20]
	}
	ptPWMBoardPCA9685->PWMBuffer[num][0] = on & 0xff;
 800bcd2:	7afb      	ldrb	r3, [r7, #11]
 800bcd4:	8afa      	ldrh	r2, [r7, #22]
 800bcd6:	b2d1      	uxtb	r1, r2
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	460a      	mov	r2, r1
 800bce0:	709a      	strb	r2, [r3, #2]
	ptPWMBoardPCA9685->PWMBuffer[num][1] = on >> 8;
 800bce2:	8afb      	ldrh	r3, [r7, #22]
 800bce4:	0a1b      	lsrs	r3, r3, #8
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	b2d1      	uxtb	r1, r2
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	460a      	mov	r2, r1
 800bcf4:	70da      	strb	r2, [r3, #3]
	ptPWMBoardPCA9685->PWMBuffer[num][2] = off & 0xff;
 800bcf6:	7afb      	ldrb	r3, [r7, #11]
 800bcf8:	8aba      	ldrh	r2, [r7, #20]
 800bcfa:	b2d1      	uxtb	r1, r2
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	460a      	mov	r2, r1
 800bd04:	711a      	strb	r2, [r3, #4]
	ptPWMBoardPCA9685->PWMBuffer[num][3] = off >> 8;
 800bd06:	8abb      	ldrh	r3, [r7, #20]
 800bd08:	0a1b      	lsrs	r3, r3, #8
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	7afb      	ldrb	r3, [r7, #11]
 800bd0e:	b2d1      	uxtb	r1, r2
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	460a      	mov	r2, r1
 800bd18:	715a      	strb	r2, [r3, #5]
}
 800bd1a:	bf00      	nop
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	45800000 	.word	0x45800000

0800bd28 <PCA9685_writeFrequency>:

static void PCA9685_writeFrequency(PCA9685_PWM_DEVICE *ptPWMBoardPCA9685,float freq)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	ed87 0a02 	vstr	s0, [r7, #8]
	  freq = CONSTRAIN(freq,EXTERNAL_PWMBOARDI2C_FREMIN,EXTERNAL_PWMBOARDI2C_FREMAX);
 800bd34:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd38:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800be38 <PCA9685_writeFrequency+0x110>
 800bd3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd44:	d501      	bpl.n	800bd4a <PCA9685_writeFrequency+0x22>
 800bd46:	4b3d      	ldr	r3, [pc, #244]	; (800be3c <PCA9685_writeFrequency+0x114>)
 800bd48:	e00b      	b.n	800bd62 <PCA9685_writeFrequency+0x3a>
 800bd4a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd4e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800be40 <PCA9685_writeFrequency+0x118>
 800bd52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd5a:	dd01      	ble.n	800bd60 <PCA9685_writeFrequency+0x38>
 800bd5c:	4b39      	ldr	r3, [pc, #228]	; (800be44 <PCA9685_writeFrequency+0x11c>)
 800bd5e:	e000      	b.n	800bd62 <PCA9685_writeFrequency+0x3a>
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	60bb      	str	r3, [r7, #8]
	  float prescaleval = 25000000.0/(4096*freq*0.915);
 800bd64:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd68:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800be48 <PCA9685_writeFrequency+0x120>
 800bd6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bd74:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800be28 <PCA9685_writeFrequency+0x100>
 800bd78:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bd7c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800be30 <PCA9685_writeFrequency+0x108>
 800bd80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bd84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bd88:	edc7 7a05 	vstr	s15, [r7, #20]
	  uint8_t prescale = floor(prescaleval + 0.5)-1;
 800bd8c:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bd94:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800bd98:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bd9c:	eeb0 0b47 	vmov.f64	d0, d7
 800bda0:	f005 fa2a 	bl	80111f8 <floor>
 800bda4:	eeb0 6b40 	vmov.f64	d6, d0
 800bda8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bdac:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bdb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bdb4:	edc7 7a01 	vstr	s15, [r7, #4]
 800bdb8:	793b      	ldrb	r3, [r7, #4]
 800bdba:	74fb      	strb	r3, [r7, #19]

	 uint8_t oldmode= PCA9685_readReg(ptPWMBoardPCA9685,PCA9685_REG_MODE1);
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f7ff fefc 	bl	800bbbc <PCA9685_readReg>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	74bb      	strb	r3, [r7, #18]
	 uint8_t sleepMode = ((oldmode & 0x7F) | 0x10); //go to sleep
 800bdc8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800bdcc:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	f043 0310 	orr.w	r3, r3, #16
 800bdd6:	b25b      	sxtb	r3, r3
 800bdd8:	747b      	strb	r3, [r7, #17]

	 PCA9685_writeReg(ptPWMBoardPCA9685,PCA9685_REG_MODE1,sleepMode);
 800bdda:	7c7b      	ldrb	r3, [r7, #17]
 800bddc:	461a      	mov	r2, r3
 800bdde:	2100      	movs	r1, #0
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f7ff ff17 	bl	800bc14 <PCA9685_writeReg>
	 PCA9685_writeReg(ptPWMBoardPCA9685,PCA9685_REG_PRESCALE,prescale);
 800bde6:	7cfb      	ldrb	r3, [r7, #19]
 800bde8:	461a      	mov	r2, r3
 800bdea:	21fe      	movs	r1, #254	; 0xfe
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f7ff ff11 	bl	800bc14 <PCA9685_writeReg>
	 PCA9685_writeReg(ptPWMBoardPCA9685,PCA9685_REG_MODE1,oldmode);
 800bdf2:	7cbb      	ldrb	r3, [r7, #18]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7ff ff0b 	bl	800bc14 <PCA9685_writeReg>
	 HAL_Delay(1);
 800bdfe:	2001      	movs	r0, #1
 800be00:	f7f5 fa90 	bl	8001324 <HAL_Delay>

	 oldmode &= 0xEF;
 800be04:	7cbb      	ldrb	r3, [r7, #18]
 800be06:	f023 0310 	bic.w	r3, r3, #16
 800be0a:	74bb      	strb	r3, [r7, #18]
	 oldmode |= 0xA1;
 800be0c:	7cbb      	ldrb	r3, [r7, #18]
 800be0e:	f063 035e 	orn	r3, r3, #94	; 0x5e
 800be12:	74bb      	strb	r3, [r7, #18]
	 PCA9685_writeReg(ptPWMBoardPCA9685,PCA9685_REG_MODE1,oldmode);
 800be14:	7cbb      	ldrb	r3, [r7, #18]
 800be16:	461a      	mov	r2, r3
 800be18:	2100      	movs	r1, #0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff fefa 	bl	800bc14 <PCA9685_writeReg>



}
 800be20:	bf00      	nop
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	147ae148 	.word	0x147ae148
 800be2c:	3fed47ae 	.word	0x3fed47ae
 800be30:	00000000 	.word	0x00000000
 800be34:	4177d784 	.word	0x4177d784
 800be38:	42200000 	.word	0x42200000
 800be3c:	42200000 	.word	0x42200000
 800be40:	447a0000 	.word	0x447a0000
 800be44:	447a0000 	.word	0x447a0000
 800be48:	45800000 	.word	0x45800000

0800be4c <PCA9685_writeDuty>:


static void PCA9685_writeDuty(PCA9685_PWM_DEVICE *ptPWMBoardPCA9685 , uint8_t num, float fduty)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af02      	add	r7, sp, #8
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	460b      	mov	r3, r1
 800be56:	ed87 0a01 	vstr	s0, [r7, #4]
 800be5a:	72fb      	strb	r3, [r7, #11]
	uint8_t sendBuf[5];
	PCA9685_calculateDuty(ptPWMBoardPCA9685,num,fduty);
 800be5c:	7afb      	ldrb	r3, [r7, #11]
 800be5e:	ed97 0a01 	vldr	s0, [r7, #4]
 800be62:	4619      	mov	r1, r3
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f7ff fef5 	bl	800bc54 <PCA9685_calculateDuty>
	sendBuf[0] = PCA9685_REG_LED0_ON_L + 4 * num;
 800be6a:	7afb      	ldrb	r3, [r7, #11]
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	3306      	adds	r3, #6
 800be72:	b2db      	uxtb	r3, r3
 800be74:	743b      	strb	r3, [r7, #16]
	memcpy(&(sendBuf[1]),&(ptPWMBoardPCA9685->PWMBuffer[num][0]),4);
 800be76:	7afb      	ldrb	r3, [r7, #11]
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	4413      	add	r3, r2
 800be7e:	3302      	adds	r3, #2
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f8c7 3011 	str.w	r3, [r7, #17]
	HAL_I2C_Master_Transmit(ptPWMBoardI2CDevices->pwm_hi2c, ptPWMBoardPCA9685->i2cAddress, sendBuf, 5,1);
 800be86:	4b09      	ldr	r3, [pc, #36]	; (800beac <PCA9685_writeDuty+0x60>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	785b      	ldrb	r3, [r3, #1]
 800be92:	b299      	uxth	r1, r3
 800be94:	f107 0210 	add.w	r2, r7, #16
 800be98:	2301      	movs	r3, #1
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	2305      	movs	r3, #5
 800be9e:	f7f6 fdb9 	bl	8002a14 <HAL_I2C_Master_Transmit>
}
 800bea2:	bf00      	nop
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20000210 	.word	0x20000210

0800beb0 <PWMBoardI2C_writeFrequency>:


void PWMBoardI2C_writeFrequency(uint8_t num,float fre)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	4603      	mov	r3, r0
 800beb8:	ed87 0a00 	vstr	s0, [r7]
 800bebc:	71fb      	strb	r3, [r7, #7]
	PCA9685_writeFrequency(&(ptPWMBoardI2CDevices->pwmBoardsI2C[num/PCA9685_CHANNELNUM]),fre);
 800bebe:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <PWMBoardI2C_writeFrequency+0x34>)
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	79fb      	ldrb	r3, [r7, #7]
 800bec4:	091b      	lsrs	r3, r3, #4
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	4619      	mov	r1, r3
 800beca:	23d0      	movs	r3, #208	; 0xd0
 800becc:	fb03 f301 	mul.w	r3, r3, r1
 800bed0:	4413      	add	r3, r2
 800bed2:	ed97 0a00 	vldr	s0, [r7]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff ff26 	bl	800bd28 <PCA9685_writeFrequency>
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	20000210 	.word	0x20000210

0800bee8 <PWMBoardI2C_writeDuty>:
void PWMBoardI2C_writeDuty(uint8_t num,float fduty)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	ed87 0a00 	vstr	s0, [r7]
 800bef4:	71fb      	strb	r3, [r7, #7]
	PCA9685_writeDuty(&(ptPWMBoardI2CDevices->pwmBoardsI2C[num/PCA9685_CHANNELNUM]),num%PCA9685_CHANNELNUM,fduty);
 800bef6:	4b0c      	ldr	r3, [pc, #48]	; (800bf28 <PWMBoardI2C_writeDuty+0x40>)
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	091b      	lsrs	r3, r3, #4
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	4619      	mov	r1, r3
 800bf02:	23d0      	movs	r3, #208	; 0xd0
 800bf04:	fb03 f301 	mul.w	r3, r3, r1
 800bf08:	441a      	add	r2, r3
 800bf0a:	79fb      	ldrb	r3, [r7, #7]
 800bf0c:	f003 030f 	and.w	r3, r3, #15
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	ed97 0a00 	vldr	s0, [r7]
 800bf16:	4619      	mov	r1, r3
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f7ff ff97 	bl	800be4c <PCA9685_writeDuty>
}
 800bf1e:	bf00      	nop
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20000210 	.word	0x20000210

0800bf2c <PWMBoardI2C_writeDutyAll>:


void PWMBoardI2C_writeDutyAll(float fduty)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af02      	add	r7, sp, #8
 800bf32:	ed87 0a01 	vstr	s0, [r7, #4]
	PCA9685_calculateDuty(&(ptPWMBoardI2CDevices->pwmBoardsI2C[0]),0,fduty);
 800bf36:	4b26      	ldr	r3, [pc, #152]	; (800bfd0 <PWMBoardI2C_writeDutyAll+0xa4>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	ed97 0a01 	vldr	s0, [r7, #4]
 800bf3e:	2100      	movs	r1, #0
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7ff fe87 	bl	800bc54 <PCA9685_calculateDuty>
	for(int i=1;i<16;i++)
 800bf46:	2301      	movs	r3, #1
 800bf48:	617b      	str	r3, [r7, #20]
 800bf4a:	e00d      	b.n	800bf68 <PWMBoardI2C_writeDutyAll+0x3c>
		memcpy(&(ptPWMBoardI2CDevices->pwmBoardsI2C[0].PWMBuffer[i][0]),&(ptPWMBoardI2CDevices->pwmBoardsI2C[0].PWMBuffer[0][0]),PWMBOARDI2C_NUM);
 800bf4c:	4b20      	ldr	r3, [pc, #128]	; (800bfd0 <PWMBoardI2C_writeDutyAll+0xa4>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	3302      	adds	r3, #2
 800bf58:	4a1d      	ldr	r2, [pc, #116]	; (800bfd0 <PWMBoardI2C_writeDutyAll+0xa4>)
 800bf5a:	6812      	ldr	r2, [r2, #0]
 800bf5c:	3202      	adds	r2, #2
 800bf5e:	6812      	ldr	r2, [r2, #0]
 800bf60:	601a      	str	r2, [r3, #0]
	for(int i=1;i<16;i++)
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	3301      	adds	r3, #1
 800bf66:	617b      	str	r3, [r7, #20]
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b0f      	cmp	r3, #15
 800bf6c:	ddee      	ble.n	800bf4c <PWMBoardI2C_writeDutyAll+0x20>
	for(int j=1;j<3;j++)
 800bf6e:	2301      	movs	r3, #1
 800bf70:	613b      	str	r3, [r7, #16]
 800bf72:	e011      	b.n	800bf98 <PWMBoardI2C_writeDutyAll+0x6c>
		memcpy(&(ptPWMBoardI2CDevices->pwmBoardsI2C[j].PWMBuffer[0][0]),&(ptPWMBoardI2CDevices->pwmBoardsI2C[0].PWMBuffer[0][0]),PCA9685_CHANNELNUM*PWMBOARDI2C_NUM);
 800bf74:	4b16      	ldr	r3, [pc, #88]	; (800bfd0 <PWMBoardI2C_writeDutyAll+0xa4>)
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	21d0      	movs	r1, #208	; 0xd0
 800bf7c:	fb01 f303 	mul.w	r3, r1, r3
 800bf80:	4413      	add	r3, r2
 800bf82:	1c98      	adds	r0, r3, #2
 800bf84:	4b12      	ldr	r3, [pc, #72]	; (800bfd0 <PWMBoardI2C_writeDutyAll+0xa4>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3302      	adds	r3, #2
 800bf8a:	2240      	movs	r2, #64	; 0x40
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	f005 fd65 	bl	8011a5c <memcpy>
	for(int j=1;j<3;j++)
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	3301      	adds	r3, #1
 800bf96:	613b      	str	r3, [r7, #16]
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	ddea      	ble.n	800bf74 <PWMBoardI2C_writeDutyAll+0x48>
	uint8_t sendBuf[5];
	sendBuf[0] = PCA9685_REG_ALLLED_ON_L;
 800bf9e:	23fa      	movs	r3, #250	; 0xfa
 800bfa0:	723b      	strb	r3, [r7, #8]
	memcpy(&(sendBuf[1]),&(ptPWMBoardI2CDevices->pwmBoardsI2C[0].PWMBuffer[0][0]),4);
 800bfa2:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <PWMBoardI2C_writeDutyAll+0xa4>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3302      	adds	r3, #2
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f8c7 3009 	str.w	r3, [r7, #9]
	HAL_I2C_Master_Transmit(ptPWMBoardI2CDevices->pwm_hi2c, CALLALL_ADDRESS, sendBuf, 5,1);
 800bfae:	4b08      	ldr	r3, [pc, #32]	; (800bfd0 <PWMBoardI2C_writeDutyAll+0xa4>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
 800bfb6:	f107 0208 	add.w	r2, r7, #8
 800bfba:	2301      	movs	r3, #1
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	2305      	movs	r3, #5
 800bfc0:	21e0      	movs	r1, #224	; 0xe0
 800bfc2:	f7f6 fd27 	bl	8002a14 <HAL_I2C_Master_Transmit>
}
 800bfc6:	bf00      	nop
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20000210 	.word	0x20000210

0800bfd4 <PWMBoardI2C_reset>:




void PWMBoardI2C_reset()
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af02      	add	r7, sp, #8
	static uint8_t buf[1] = {RESET_COMMAND};
	HAL_I2C_Master_Transmit(ptPWMBoardI2CDevices->pwm_hi2c,RESET_ADDRESS,buf,1,1);
 800bfda:	4b07      	ldr	r3, [pc, #28]	; (800bff8 <PWMBoardI2C_reset+0x24>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4a04      	ldr	r2, [pc, #16]	; (800bffc <PWMBoardI2C_reset+0x28>)
 800bfea:	2100      	movs	r1, #0
 800bfec:	f7f6 fd12 	bl	8002a14 <HAL_I2C_Master_Transmit>
}
 800bff0:	bf00      	nop
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20000210 	.word	0x20000210
 800bffc:	20000218 	.word	0x20000218

0800c000 <PWMBoardI2C_init>:
void PWMBoardI2C_init()
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
	for(int i=0;i<PWMBOARDI2C_NUM;i++)
 800c006:	2300      	movs	r3, #0
 800c008:	607b      	str	r3, [r7, #4]
 800c00a:	e033      	b.n	800c074 <PWMBoardI2C_init+0x74>
	{
		PCABoard_I2C_Addresses[i] = i;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	b2d9      	uxtb	r1, r3
 800c010:	4a30      	ldr	r2, [pc, #192]	; (800c0d4 <PWMBoardI2C_init+0xd4>)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4413      	add	r3, r2
 800c016:	460a      	mov	r2, r1
 800c018:	701a      	strb	r2, [r3, #0]
		ptPWMBoardI2CDevices->pwmBoardsI2C[i].onboardAddress = PCABoard_I2C_Addresses[i];
 800c01a:	4b2f      	ldr	r3, [pc, #188]	; (800c0d8 <PWMBoardI2C_init+0xd8>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	492d      	ldr	r1, [pc, #180]	; (800c0d4 <PWMBoardI2C_init+0xd4>)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	440b      	add	r3, r1
 800c024:	7818      	ldrb	r0, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	21d0      	movs	r1, #208	; 0xd0
 800c02a:	fb01 f303 	mul.w	r3, r1, r3
 800c02e:	4413      	add	r3, r2
 800c030:	4602      	mov	r2, r0
 800c032:	701a      	strb	r2, [r3, #0]
		ptPWMBoardI2CDevices->pwmBoardsI2C[i].i2cAddress = I2C_ShIFTED_ADDRESS(PCABoard_I2C_Addresses[i]);
 800c034:	4a27      	ldr	r2, [pc, #156]	; (800c0d4 <PWMBoardI2C_init+0xd4>)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4413      	add	r3, r2
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	005b      	lsls	r3, r3, #1
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	4a25      	ldr	r2, [pc, #148]	; (800c0d8 <PWMBoardI2C_init+0xd8>)
 800c042:	6812      	ldr	r2, [r2, #0]
 800c044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c048:	b2d8      	uxtb	r0, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	21d0      	movs	r1, #208	; 0xd0
 800c04e:	fb01 f303 	mul.w	r3, r1, r3
 800c052:	4413      	add	r3, r2
 800c054:	3301      	adds	r3, #1
 800c056:	4602      	mov	r2, r0
 800c058:	701a      	strb	r2, [r3, #0]

		ptPWMBoardI2CDevices->pwmBoardsI2C[i].frequency = 50;
 800c05a:	4b1f      	ldr	r3, [pc, #124]	; (800c0d8 <PWMBoardI2C_init+0xd8>)
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	21d0      	movs	r1, #208	; 0xd0
 800c062:	fb01 f303 	mul.w	r3, r1, r3
 800c066:	4413      	add	r3, r2
 800c068:	33cc      	adds	r3, #204	; 0xcc
 800c06a:	4a1c      	ldr	r2, [pc, #112]	; (800c0dc <PWMBoardI2C_init+0xdc>)
 800c06c:	601a      	str	r2, [r3, #0]
	for(int i=0;i<PWMBOARDI2C_NUM;i++)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3301      	adds	r3, #1
 800c072:	607b      	str	r3, [r7, #4]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b03      	cmp	r3, #3
 800c078:	ddc8      	ble.n	800c00c <PWMBoardI2C_init+0xc>
	}

	ptPWMBoardI2CDevices->pwm_hi2c = &hi2c_PWM;
 800c07a:	4b17      	ldr	r3, [pc, #92]	; (800c0d8 <PWMBoardI2C_init+0xd8>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a18      	ldr	r2, [pc, #96]	; (800c0e0 <PWMBoardI2C_init+0xe0>)
 800c080:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

	PWMBoardI2C_reset();
 800c084:	f7ff ffa6 	bl	800bfd4 <PWMBoardI2C_reset>

	for(int i=0;i<PWMBOARDI2C_NUM;i++)
 800c088:	2300      	movs	r3, #0
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	e017      	b.n	800c0be <PWMBoardI2C_init+0xbe>
	{
		PCA9685_writeFrequency(&(ptPWMBoardI2CDevices->pwmBoardsI2C[i]),ptPWMBoardI2CDevices->pwmBoardsI2C[i].frequency);
 800c08e:	4b12      	ldr	r3, [pc, #72]	; (800c0d8 <PWMBoardI2C_init+0xd8>)
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	21d0      	movs	r1, #208	; 0xd0
 800c096:	fb01 f303 	mul.w	r3, r1, r3
 800c09a:	18d0      	adds	r0, r2, r3
 800c09c:	4b0e      	ldr	r3, [pc, #56]	; (800c0d8 <PWMBoardI2C_init+0xd8>)
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	21d0      	movs	r1, #208	; 0xd0
 800c0a4:	fb01 f303 	mul.w	r3, r1, r3
 800c0a8:	4413      	add	r3, r2
 800c0aa:	33cc      	adds	r3, #204	; 0xcc
 800c0ac:	edd3 7a00 	vldr	s15, [r3]
 800c0b0:	eeb0 0a67 	vmov.f32	s0, s15
 800c0b4:	f7ff fe38 	bl	800bd28 <PCA9685_writeFrequency>
	for(int i=0;i<PWMBOARDI2C_NUM;i++)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	603b      	str	r3, [r7, #0]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	dde4      	ble.n	800c08e <PWMBoardI2C_init+0x8e>

	}
	PWMBoardI2C_writeDutyAll(1);
 800c0c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c0c8:	f7ff ff30 	bl	800bf2c <PWMBoardI2C_writeDutyAll>
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20000214 	.word	0x20000214
 800c0d8:	20000210 	.word	0x20000210
 800c0dc:	42480000 	.word	0x42480000
 800c0e0:	20009530 	.word	0x20009530

0800c0e4 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800c0e4:	b590      	push	{r4, r7, lr}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	330c      	adds	r3, #12
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7ff fc48 	bl	800b98c <_ZN15PRESSURE_SOURCEC1Eii>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	3344      	adds	r3, #68	; 0x44
 800c100:	2200      	movs	r2, #0
 800c102:	2100      	movs	r1, #0
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff fc41 	bl	800b98c <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2104      	movs	r1, #4
 800c116:	4618      	mov	r0, r3
 800c118:	f005 fc66 	bl	80119e8 <calloc>
 800c11c:	4603      	mov	r3, r0
 800c11e:	461a      	mov	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2104      	movs	r1, #4
 800c128:	4618      	mov	r0, r3
 800c12a:	f005 fc5d 	bl	80119e8 <calloc>
 800c12e:	4603      	mov	r3, r0
 800c130:	461a      	mov	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	889b      	ldrh	r3, [r3, #4]
 800c13e:	461a      	mov	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4293      	cmp	r3, r2
 800c144:	da18      	bge.n	800c178 <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800c146:	f241 00d4 	movw	r0, #4308	; 0x10d4
 800c14a:	f005 f839 	bl	80111c0 <_Znwj>
 800c14e:	4603      	mov	r3, r0
 800c150:	461c      	mov	r4, r3
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	0059      	lsls	r1, r3, #1
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	005b      	lsls	r3, r3, #1
 800c15a:	1c5a      	adds	r2, r3, #1
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4620      	mov	r0, r4
 800c160:	f7fe ffc6 	bl	800b0f0 <_ZN7CHAMBERC1Eiii>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	689a      	ldr	r2, [r3, #8]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	3301      	adds	r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	e7e0      	b.n	800c13a <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a05      	ldr	r2, [pc, #20]	; (800c190 <_ZN9PNEUDRIVEC1Ei+0xac>)
 800c17c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 10;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a04      	ldr	r2, [pc, #16]	; (800c194 <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800c184:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4618      	mov	r0, r3
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd90      	pop	{r4, r7, pc}
 800c190:	44fa0000 	.word	0x44fa0000
 800c194:	41200000 	.word	0x41200000

0800c198 <_ZN9PNEUDRIVE14writeFrequencyEf>:
		chambers[i]->valves[0].writeFrequency(frequency);
		chambers[i]->valves[1].writeFrequency(frequency);
	}
}

void PNEUDRIVE::writeFrequency(float fre){
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	ed87 0a00 	vstr	s0, [r7]
	frequency = fre;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	67da      	str	r2, [r3, #124]	; 0x7c
	for (int i = 0; i < NumChambers; i++) {
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	889b      	ldrh	r3, [r3, #4]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	da22      	bge.n	800c200 <_ZN9PNEUDRIVE14writeFrequencyEf+0x68>
		chambers[i]->valves[0].writeFrequency(frequency);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	689a      	ldr	r2, [r3, #8]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4413      	add	r3, r2
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	1d1a      	adds	r2, r3, #4
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800c1ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	f000 f9dc 	bl	800c590 <_ZN14SOLENOID_VALVE14writeFrequencyEf>
		chambers[i]->valves[1].writeFrequency(frequency);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	689a      	ldr	r2, [r3, #8]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f103 021c 	add.w	r2, r3, #28
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800c1ee:	eeb0 0a67 	vmov.f32	s0, s15
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	f000 f9cc 	bl	800c590 <_ZN14SOLENOID_VALVE14writeFrequencyEf>
	for (int i = 0; i < NumChambers; i++) {
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	e7d6      	b.n	800c1ae <_ZN9PNEUDRIVE14writeFrequencyEf+0x16>
	}
}
 800c200:	bf00      	nop
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <_ZN9PNEUDRIVE13setupPlatformEv>:
{
	chambers[num]->writePressure(pressureCommands[num]);
}


void PNEUDRIVE::setupPlatform() {
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	for(int i=0;i<NumChambers;i++){
 800c210:	2300      	movs	r3, #0
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	889b      	ldrh	r3, [r3, #4]
 800c218:	461a      	mov	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4293      	cmp	r3, r2
 800c21e:	da0e      	bge.n	800c23e <_ZN9PNEUDRIVE13setupPlatformEv+0x36>
		chambers[i]->writeOpening(0);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	689a      	ldr	r2, [r3, #8]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800c25c <_ZN9PNEUDRIVE13setupPlatformEv+0x54>
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff f9a3 	bl	800b57c <_ZN7CHAMBER12writeOpeningEf>
	for(int i=0;i<NumChambers;i++){
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3301      	adds	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	e7ea      	b.n	800c214 <_ZN9PNEUDRIVE13setupPlatformEv+0xc>
	}
	pSource.stop();
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	330c      	adds	r3, #12
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fc53 	bl	800baee <_ZN15PRESSURE_SOURCE4stopEv>
	pSink.stop();
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3344      	adds	r3, #68	; 0x44
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7ff fc4e 	bl	800baee <_ZN15PRESSURE_SOURCE4stopEv>
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	00000000 	.word	0x00000000

0800c260 <AnalogRead>:
extern TIM_HandleTypeDef htim5;
int32_t globalPeriodControlLoop=1;
int32_t globalPeriodSendLoop=1;

float AnalogRead(uint16_t num)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	80fb      	strh	r3, [r7, #6]
	float value=0;
 800c26a:	f04f 0300 	mov.w	r3, #0
 800c26e:	60fb      	str	r3, [r7, #12]
	if(0<=num && num<BUILTIN_ANA_IN_NUM)
 800c270:	88fb      	ldrh	r3, [r7, #6]
 800c272:	2b0f      	cmp	r3, #15
 800c274:	d806      	bhi.n	800c284 <AnalogRead+0x24>
		value=AnalogRead_BuiltIn(num);
 800c276:	88fb      	ldrh	r3, [r7, #6]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f9c7 	bl	800c60c <AnalogRead_BuiltIn>
 800c27e:	ed87 0a03 	vstr	s0, [r7, #12]
 800c282:	e008      	b.n	800c296 <AnalogRead+0x36>
	else
	{
#if (ADBOARD_NUM>0)
		num-=BUILTIN_ANA_IN_NUM;
 800c284:	88fb      	ldrh	r3, [r7, #6]
 800c286:	3b10      	subs	r3, #16
 800c288:	80fb      	strh	r3, [r7, #6]
		value=AnalogRead_External(num);
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fe fe57 	bl	800af40 <AnalogRead_External>
 800c292:	ed87 0a03 	vstr	s0, [r7, #12]
#endif
	}
	return value;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	ee07 3a90 	vmov	s15, r3

}
 800c29c:	eeb0 0a67 	vmov.f32	s0, s15
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b082      	sub	sp, #8
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	460a      	mov	r2, r1
 800c2b0:	80fb      	strh	r3, [r7, #6]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800c2b6:	88ba      	ldrh	r2, [r7, #4]
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	4611      	mov	r1, r2
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 f9df 	bl	800c680 <DigitalBuiltIn_Write>
}
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	ed87 0a00 	vstr	s0, [r7]
 800c2d6:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800c2d8:	88fb      	ldrh	r3, [r7, #6]
 800c2da:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800c2dc:	88fb      	ldrh	r3, [r7, #6]
 800c2de:	2b19      	cmp	r3, #25
 800c2e0:	d806      	bhi.n	800c2f0 <PWMWriteDuty+0x26>
		PWMBuiltIn_writeDuty(num,fduty);
 800c2e2:	88fb      	ldrh	r3, [r7, #6]
 800c2e4:	ed97 0a00 	vldr	s0, [r7]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fa65 	bl	800c7b8 <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800c2ee:	e00c      	b.n	800c30a <PWMWriteDuty+0x40>
		num=numori - BUILTIN_PWM_NUM;
 800c2f0:	89fb      	ldrh	r3, [r7, #14]
 800c2f2:	3b1a      	subs	r3, #26
 800c2f4:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
 800c2f6:	88fb      	ldrh	r3, [r7, #6]
 800c2f8:	2b3f      	cmp	r3, #63	; 0x3f
 800c2fa:	d806      	bhi.n	800c30a <PWMWriteDuty+0x40>
		 PWMBoardI2C_writeDuty(num,fduty);
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	ed97 0a00 	vldr	s0, [r7]
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff fdef 	bl	800bee8 <PWMBoardI2C_writeDuty>
}
 800c30a:	bf00      	nop
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <PWMWriteFrequency>:

void PWMWriteFrequency(uint16_t num, float fre)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	4603      	mov	r3, r0
 800c31a:	ed87 0a00 	vstr	s0, [r7]
 800c31e:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	81fb      	strh	r3, [r7, #14]
	if(num<BUILTIN_PWM_NUM){
 800c324:	88fb      	ldrh	r3, [r7, #6]
 800c326:	2b19      	cmp	r3, #25
 800c328:	d806      	bhi.n	800c338 <PWMWriteFrequency+0x26>
			PWMBuiltIn_writeFrequency(num,fre);
 800c32a:	88fb      	ldrh	r3, [r7, #6]
 800c32c:	ed97 0a00 	vldr	s0, [r7]
 800c330:	4618      	mov	r0, r3
 800c332:	f000 fae1 	bl	800c8f8 <PWMBuiltIn_writeFrequency>
			PWMBoardI2C_writeFrequency(num,fre);
		}
#endif

	}
}
 800c336:	e00c      	b.n	800c352 <PWMWriteFrequency+0x40>
		num= numori - BUILTIN_PWM_NUM;
 800c338:	89fb      	ldrh	r3, [r7, #14]
 800c33a:	3b1a      	subs	r3, #26
 800c33c:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
 800c33e:	88fb      	ldrh	r3, [r7, #6]
 800c340:	2b3f      	cmp	r3, #63	; 0x3f
 800c342:	d806      	bhi.n	800c352 <PWMWriteFrequency+0x40>
			PWMBoardI2C_writeFrequency(num,fre);
 800c344:	88fb      	ldrh	r3, [r7, #6]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	ed97 0a00 	vldr	s0, [r7]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7ff fdaf 	bl	800beb0 <PWMBoardI2C_writeFrequency>
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b083      	sub	sp, #12
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
};
 800c362:	bf00      	nop
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800c372:	f7f4 ffcb 	bl	800130c <HAL_GetTick>
 800c376:	4603      	mov	r3, r0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <micros>:

uint32_t micros()
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800c382:	f7ff fff4 	bl	800c36e <millis>
 800c386:	4602      	mov	r2, r0
 800c388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c38c:	fb03 f202 	mul.w	r2, r3, r2
 800c390:	4b04      	ldr	r3, [pc, #16]	; (800c3a4 <micros+0x28>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c396:	4413      	add	r3, r2
 800c398:	607b      	str	r3, [r7, #4]
	return t;
 800c39a:	687b      	ldr	r3, [r7, #4]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	200099ac 	.word	0x200099ac

0800c3a8 <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800c3b0:	f7ff ffe4 	bl	800c37c <micros>
 800c3b4:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800c3b6:	f7ff ffe1 	bl	800c37c <micros>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	bfcc      	ite	gt
 800c3c8:	2301      	movgt	r3, #1
 800c3ca:	2300      	movle	r3, #0
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d000      	beq.n	800c3d4 <delay_us+0x2c>
 800c3d2:	e7f0      	b.n	800c3b6 <delay_us+0xe>
}
 800c3d4:	bf00      	nop
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800c3e4:	4b20      	ldr	r3, [pc, #128]	; (800c468 <delay_ns+0x8c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	4b1f      	ldr	r3, [pc, #124]	; (800c468 <delay_ns+0x8c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800c3f4:	4b1c      	ldr	r3, [pc, #112]	; (800c468 <delay_ns+0x8c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4293      	cmp	r3, r2
 800c400:	bfcc      	ite	gt
 800c402:	2301      	movgt	r3, #1
 800c404:	2300      	movle	r3, #0
 800c406:	b2db      	uxtb	r3, r3
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d000      	beq.n	800c40e <delay_ns+0x32>
 800c40c:	e7f2      	b.n	800c3f4 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800c40e:	4b16      	ldr	r3, [pc, #88]	; (800c468 <delay_ns+0x8c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	6a1a      	ldr	r2, [r3, #32]
 800c414:	f241 1311 	movw	r3, #4369	; 0x1111
 800c418:	4013      	ands	r3, r2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bf0c      	ite	eq
 800c41e:	2301      	moveq	r3, #1
 800c420:	2300      	movne	r3, #0
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	d014      	beq.n	800c452 <delay_ns+0x76>
 800c428:	4b0f      	ldr	r3, [pc, #60]	; (800c468 <delay_ns+0x8c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6a1a      	ldr	r2, [r3, #32]
 800c42e:	f240 4344 	movw	r3, #1092	; 0x444
 800c432:	4013      	ands	r3, r2
 800c434:	2b00      	cmp	r3, #0
 800c436:	bf0c      	ite	eq
 800c438:	2301      	moveq	r3, #1
 800c43a:	2300      	movne	r3, #0
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d007      	beq.n	800c452 <delay_ns+0x76>
 800c442:	4b09      	ldr	r3, [pc, #36]	; (800c468 <delay_ns+0x8c>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	4b07      	ldr	r3, [pc, #28]	; (800c468 <delay_ns+0x8c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f022 0201 	bic.w	r2, r2, #1
 800c450:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <delay_ns+0x8c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2200      	movs	r2, #0
 800c458:	625a      	str	r2, [r3, #36]	; 0x24

}
 800c45a:	bf00      	nop
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	20009cac 	.word	0x20009cac

0800c46c <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]

	_duty=0;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f04f 0200 	mov.w	r2, #0
 800c47c:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	edd3 7a02 	vldr	s15, [r3, #8]
 800c484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a09      	ldr	r2, [pc, #36]	; (800c4bc <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800c496:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f04f 0200 	mov.w	r2, #0
 800c49e:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c4a6:	615a      	str	r2, [r3, #20]
	attach(num);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f808 	bl	800c4c0 <_ZN14SOLENOID_VALVE6attachEi>
}
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	41200000 	.word	0x41200000

0800c4c0 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	601a      	str	r2, [r3, #0]
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr
 800c4dc:	0000      	movs	r0, r0
	...

0800c4e0 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	ed93 7a04 	vldr	s14, [r3, #16]
 800c4f2:	edd7 7a00 	vldr	s15, [r7]
 800c4f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fe:	dd02      	ble.n	800c506 <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	e00d      	b.n	800c522 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	ed93 7a05 	vldr	s14, [r3, #20]
 800c50c:	edd7 7a00 	vldr	s15, [r7]
 800c510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c518:	d502      	bpl.n	800c520 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	e000      	b.n	800c522 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800c524:	ed97 7a00 	vldr	s14, [r7]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c532:	eef0 7ae7 	vabs.f32	s15, s15
 800c536:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c53a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800c588 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
 800c53e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c546:	dc00      	bgt.n	800c54a <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800c548:	e017      	b.n	800c57a <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	edd3 7a01 	vldr	s15, [r3, #4]
 800c556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c55a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	b29a      	uxth	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c570:	eeb0 0a67 	vmov.f32	s0, s15
 800c574:	4610      	mov	r0, r2
 800c576:	f7ff fea8 	bl	800c2ca <PWMWriteDuty>
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	f3af 8000 	nop.w
 800c588:	a0b5ed8d 	.word	0xa0b5ed8d
 800c58c:	3eb0c6f7 	.word	0x3eb0c6f7

0800c590 <_ZN14SOLENOID_VALVE14writeFrequencyEf>:
	return frequency;
}


void SOLENOID_VALVE::writeFrequency(float fre)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	ed87 0a00 	vstr	s0, [r7]
	if(fabsf(fre-frequency)>1e-6)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c5a2:	ed97 7a00 	vldr	s14, [r7]
 800c5a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5aa:	eef0 7ae7 	vabs.f32	s15, s15
 800c5ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c5b2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800c5e8 <_ZN14SOLENOID_VALVE14writeFrequencyEf+0x58>
 800c5b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5be:	dc00      	bgt.n	800c5c2 <_ZN14SOLENOID_VALVE14writeFrequencyEf+0x32>
	{
		frequency = fre;
		PWMWriteFrequency(PWMPort,frequency);
	}
}
 800c5c0:	e00d      	b.n	800c5de <_ZN14SOLENOID_VALVE14writeFrequencyEf+0x4e>
		frequency = fre;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	60da      	str	r2, [r3, #12]
		PWMWriteFrequency(PWMPort,frequency);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c5d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f7ff fe9a 	bl	800c312 <PWMWriteFrequency>
}
 800c5de:	bf00      	nop
 800c5e0:	3708      	adds	r7, #8
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	a0b5ed8d 	.word	0xa0b5ed8d
 800c5ec:	3eb0c6f7 	.word	0x3eb0c6f7

0800c5f0 <AnaBuiltInStart>:

uint16_t ADDataBuiltIn[BUILTIN_ANA_IN_NUM];
float fADDataBuiltIn[BUILTIN_ANA_IN_NUM];

void AnaBuiltInStart()
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)(&ADDataBuiltIn[0]),BUILTIN_ANA_IN_NUM);
 800c5f4:	2210      	movs	r2, #16
 800c5f6:	4903      	ldr	r1, [pc, #12]	; (800c604 <AnaBuiltInStart+0x14>)
 800c5f8:	4803      	ldr	r0, [pc, #12]	; (800c608 <AnaBuiltInStart+0x18>)
 800c5fa:	f7f4 fef9 	bl	80013f0 <HAL_ADC_Start_DMA>
}
 800c5fe:	bf00      	nop
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	2000a440 	.word	0x2000a440
 800c608:	200013d8 	.word	0x200013d8

0800c60c <AnalogRead_BuiltIn>:
		fADDataBuiltIn[i]=ADDataBuiltIn[i]/4096.0f*3.3f;

}*/

float AnalogRead_BuiltIn(int num)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	if(num>=0 && num<BUILTIN_ANA_IN_NUM)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	db1e      	blt.n	800c658 <AnalogRead_BuiltIn+0x4c>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b0f      	cmp	r3, #15
 800c61e:	dc1b      	bgt.n	800c658 <AnalogRead_BuiltIn+0x4c>
	{
		fADDataBuiltIn[num]=ADDataBuiltIn[num]/4096.0f*3.3f;
 800c620:	4a13      	ldr	r2, [pc, #76]	; (800c670 <AnalogRead_BuiltIn+0x64>)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c628:	ee07 3a90 	vmov	s15, r3
 800c62c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c630:	eddf 6a10 	vldr	s13, [pc, #64]	; 800c674 <AnalogRead_BuiltIn+0x68>
 800c634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c638:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c678 <AnalogRead_BuiltIn+0x6c>
 800c63c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c640:	4a0e      	ldr	r2, [pc, #56]	; (800c67c <AnalogRead_BuiltIn+0x70>)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	edc3 7a00 	vstr	s15, [r3]
		return fADDataBuiltIn[num];
 800c64c:	4a0b      	ldr	r2, [pc, #44]	; (800c67c <AnalogRead_BuiltIn+0x70>)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	e001      	b.n	800c65c <AnalogRead_BuiltIn+0x50>
	}
	else
		return 0;
 800c658:	f04f 0300 	mov.w	r3, #0
 800c65c:	ee07 3a90 	vmov	s15, r3
}
 800c660:	eeb0 0a67 	vmov.f32	s0, s15
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	2000a440 	.word	0x2000a440
 800c674:	45800000 	.word	0x45800000
 800c678:	40533333 	.word	0x40533333
 800c67c:	2000a400 	.word	0x2000a400

0800c680 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	460a      	mov	r2, r1
 800c68a:	80fb      	strh	r3, [r7, #6]
 800c68c:	4613      	mov	r3, r2
 800c68e:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800c690:	88bb      	ldrh	r3, [r7, #4]
 800c692:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800c694:	88fb      	ldrh	r3, [r7, #6]
 800c696:	2b13      	cmp	r3, #19
 800c698:	d80b      	bhi.n	800c6b2 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800c69a:	88fb      	ldrh	r3, [r7, #6]
 800c69c:	4a07      	ldr	r2, [pc, #28]	; (800c6bc <DigitalBuiltIn_Write+0x3c>)
 800c69e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c6a2:	88fb      	ldrh	r3, [r7, #6]
 800c6a4:	4a06      	ldr	r2, [pc, #24]	; (800c6c0 <DigitalBuiltIn_Write+0x40>)
 800c6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6aa:	7bfa      	ldrb	r2, [r7, #15]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	f7f6 f8ef 	bl	8002890 <HAL_GPIO_WritePin>
	}
}
 800c6b2:	bf00      	nop
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	20000224 	.word	0x20000224
 800c6c0:	20000274 	.word	0x20000274

0800c6c4 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	ee07 3a90 	vmov	s15, r3
 800c6d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6dc:	edd7 7a00 	vldr	s15, [r7]
 800c6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c6e8:	eeb0 0b47 	vmov.f64	d0, d7
 800c6ec:	f004 fdfc 	bl	80112e8 <round>
 800c6f0:	eeb0 7b40 	vmov.f64	d7, d0
 800c6f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c6f8:	ee17 3a90 	vmov	r3, s15
 800c6fc:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c704:	4293      	cmp	r3, r2
 800c706:	bf28      	it	cs
 800c708:	4613      	movcs	r3, r2
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800c712:	b480      	push	{r7}
 800c714:	b085      	sub	sp, #20
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	ee07 3a90 	vmov	s15, r3
 800c722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c726:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	3301      	adds	r3, #1
 800c72e:	ee07 3a90 	vmov	s15, r3
 800c732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c736:	ed97 7a03 	vldr	s14, [r7, #12]
 800c73a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c73e:	eef0 7a66 	vmov.f32	s15, s13
}
 800c742:	eeb0 0a67 	vmov.f32	s0, s15
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a0f      	ldr	r2, [pc, #60]	; (800c79c <getTIM_SOURCECLK+0x4c>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d013      	beq.n	800c78a <getTIM_SOURCECLK+0x3a>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a0e      	ldr	r2, [pc, #56]	; (800c7a0 <getTIM_SOURCECLK+0x50>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d00e      	beq.n	800c78a <getTIM_SOURCECLK+0x3a>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a0c      	ldr	r2, [pc, #48]	; (800c7a4 <getTIM_SOURCECLK+0x54>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d009      	beq.n	800c78a <getTIM_SOURCECLK+0x3a>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a0b      	ldr	r2, [pc, #44]	; (800c7a8 <getTIM_SOURCECLK+0x58>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d004      	beq.n	800c78a <getTIM_SOURCECLK+0x3a>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a09      	ldr	r2, [pc, #36]	; (800c7ac <getTIM_SOURCECLK+0x5c>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d101      	bne.n	800c78e <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800c78a:	4b09      	ldr	r3, [pc, #36]	; (800c7b0 <getTIM_SOURCECLK+0x60>)
 800c78c:	e000      	b.n	800c790 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800c78e:	4b09      	ldr	r3, [pc, #36]	; (800c7b4 <getTIM_SOURCECLK+0x64>)
}
 800c790:	4618      	mov	r0, r3
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	40010000 	.word	0x40010000
 800c7a0:	40010400 	.word	0x40010400
 800c7a4:	40014000 	.word	0x40014000
 800c7a8:	40014400 	.word	0x40014400
 800c7ac:	40014800 	.word	0x40014800
 800c7b0:	0cdfe600 	.word	0x0cdfe600
 800c7b4:	066ff300 	.word	0x066ff300

0800c7b8 <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800c7b8:	b590      	push	{r4, r7, lr}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	ed87 0a00 	vstr	s0, [r7]
 800c7c4:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c7c6:	88fb      	ldrh	r3, [r7, #6]
 800c7c8:	4a48      	ldr	r2, [pc, #288]	; (800c8ec <PWMBuiltIn_writeDuty+0x134>)
 800c7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d112      	bne.n	800c7f8 <PWMBuiltIn_writeDuty+0x40>
 800c7d2:	88fb      	ldrh	r3, [r7, #6]
 800c7d4:	4a46      	ldr	r2, [pc, #280]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c7de:	88fb      	ldrh	r3, [r7, #6]
 800c7e0:	4a43      	ldr	r2, [pc, #268]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7e6:	681c      	ldr	r4, [r3, #0]
 800c7e8:	ed97 0a00 	vldr	s0, [r7]
 800c7ec:	4608      	mov	r0, r1
 800c7ee:	f7ff ff69 	bl	800c6c4 <duty2CCR>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	6363      	str	r3, [r4, #52]	; 0x34

}
 800c7f6:	e075      	b.n	800c8e4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c7f8:	88fb      	ldrh	r3, [r7, #6]
 800c7fa:	4a3c      	ldr	r2, [pc, #240]	; (800c8ec <PWMBuiltIn_writeDuty+0x134>)
 800c7fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c800:	2b04      	cmp	r3, #4
 800c802:	d112      	bne.n	800c82a <PWMBuiltIn_writeDuty+0x72>
 800c804:	88fb      	ldrh	r3, [r7, #6]
 800c806:	4a3a      	ldr	r2, [pc, #232]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c810:	88fb      	ldrh	r3, [r7, #6]
 800c812:	4a37      	ldr	r2, [pc, #220]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c818:	681c      	ldr	r4, [r3, #0]
 800c81a:	ed97 0a00 	vldr	s0, [r7]
 800c81e:	4608      	mov	r0, r1
 800c820:	f7ff ff50 	bl	800c6c4 <duty2CCR>
 800c824:	4603      	mov	r3, r0
 800c826:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c828:	e05c      	b.n	800c8e4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c82a:	88fb      	ldrh	r3, [r7, #6]
 800c82c:	4a2f      	ldr	r2, [pc, #188]	; (800c8ec <PWMBuiltIn_writeDuty+0x134>)
 800c82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c832:	2b08      	cmp	r3, #8
 800c834:	d112      	bne.n	800c85c <PWMBuiltIn_writeDuty+0xa4>
 800c836:	88fb      	ldrh	r3, [r7, #6]
 800c838:	4a2d      	ldr	r2, [pc, #180]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c83a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c842:	88fb      	ldrh	r3, [r7, #6]
 800c844:	4a2a      	ldr	r2, [pc, #168]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c84a:	681c      	ldr	r4, [r3, #0]
 800c84c:	ed97 0a00 	vldr	s0, [r7]
 800c850:	4608      	mov	r0, r1
 800c852:	f7ff ff37 	bl	800c6c4 <duty2CCR>
 800c856:	4603      	mov	r3, r0
 800c858:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800c85a:	e043      	b.n	800c8e4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c85c:	88fb      	ldrh	r3, [r7, #6]
 800c85e:	4a23      	ldr	r2, [pc, #140]	; (800c8ec <PWMBuiltIn_writeDuty+0x134>)
 800c860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c864:	2b0c      	cmp	r3, #12
 800c866:	d112      	bne.n	800c88e <PWMBuiltIn_writeDuty+0xd6>
 800c868:	88fb      	ldrh	r3, [r7, #6]
 800c86a:	4a21      	ldr	r2, [pc, #132]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c874:	88fb      	ldrh	r3, [r7, #6]
 800c876:	4a1e      	ldr	r2, [pc, #120]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c87c:	681c      	ldr	r4, [r3, #0]
 800c87e:	ed97 0a00 	vldr	s0, [r7]
 800c882:	4608      	mov	r0, r1
 800c884:	f7ff ff1e 	bl	800c6c4 <duty2CCR>
 800c888:	4603      	mov	r3, r0
 800c88a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800c88c:	e02a      	b.n	800c8e4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c88e:	88fb      	ldrh	r3, [r7, #6]
 800c890:	4a16      	ldr	r2, [pc, #88]	; (800c8ec <PWMBuiltIn_writeDuty+0x134>)
 800c892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c896:	2b10      	cmp	r3, #16
 800c898:	d112      	bne.n	800c8c0 <PWMBuiltIn_writeDuty+0x108>
 800c89a:	88fb      	ldrh	r3, [r7, #6]
 800c89c:	4a14      	ldr	r2, [pc, #80]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c89e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c8a6:	88fb      	ldrh	r3, [r7, #6]
 800c8a8:	4a11      	ldr	r2, [pc, #68]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ae:	681c      	ldr	r4, [r3, #0]
 800c8b0:	ed97 0a00 	vldr	s0, [r7]
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	f7ff ff05 	bl	800c6c4 <duty2CCR>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800c8be:	e011      	b.n	800c8e4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c8c0:	88fb      	ldrh	r3, [r7, #6]
 800c8c2:	4a0b      	ldr	r2, [pc, #44]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c8cc:	88fb      	ldrh	r3, [r7, #6]
 800c8ce:	4a08      	ldr	r2, [pc, #32]	; (800c8f0 <PWMBuiltIn_writeDuty+0x138>)
 800c8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8d4:	681c      	ldr	r4, [r3, #0]
 800c8d6:	ed97 0a00 	vldr	s0, [r7]
 800c8da:	4608      	mov	r0, r1
 800c8dc:	f7ff fef2 	bl	800c6c4 <duty2CCR>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd90      	pop	{r4, r7, pc}
 800c8ec:	20000304 	.word	0x20000304
 800c8f0:	2000029c 	.word	0x2000029c
 800c8f4:	00000000 	.word	0x00000000

0800c8f8 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800c8f8:	b590      	push	{r4, r7, lr}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	4603      	mov	r3, r0
 800c900:	ed87 0a00 	vstr	s0, [r7]
 800c904:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800c906:	edd7 7a00 	vldr	s15, [r7]
 800c90a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c90e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800cbc8 <PWMBuiltIn_writeFrequency+0x2d0>
 800c912:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c91a:	d501      	bpl.n	800c920 <PWMBuiltIn_writeFrequency+0x28>
 800c91c:	4bac      	ldr	r3, [pc, #688]	; (800cbd0 <PWMBuiltIn_writeFrequency+0x2d8>)
 800c91e:	e00b      	b.n	800c938 <PWMBuiltIn_writeFrequency+0x40>
 800c920:	edd7 7a00 	vldr	s15, [r7]
 800c924:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cbd4 <PWMBuiltIn_writeFrequency+0x2dc>
 800c928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	dd01      	ble.n	800c936 <PWMBuiltIn_writeFrequency+0x3e>
 800c932:	4ba9      	ldr	r3, [pc, #676]	; (800cbd8 <PWMBuiltIn_writeFrequency+0x2e0>)
 800c934:	e000      	b.n	800c938 <PWMBuiltIn_writeFrequency+0x40>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c93e:	2301      	movs	r3, #1
 800c940:	613b      	str	r3, [r7, #16]
 800c942:	e06f      	b.n	800ca24 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800c944:	88fa      	ldrh	r2, [r7, #6]
 800c946:	49a5      	ldr	r1, [pc, #660]	; (800cbdc <PWMBuiltIn_writeFrequency+0x2e4>)
 800c948:	4613      	mov	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	440b      	add	r3, r1
 800c958:	edd3 7a00 	vldr	s15, [r3]
 800c95c:	ed97 7a00 	vldr	s14, [r7]
 800c960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c968:	d859      	bhi.n	800ca1e <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800c96a:	4a9d      	ldr	r2, [pc, #628]	; (800cbe0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	3b01      	subs	r3, #1
 800c976:	499a      	ldr	r1, [pc, #616]	; (800cbe0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d124      	bne.n	800c9ca <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800c980:	4a97      	ldr	r2, [pc, #604]	; (800cbe0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c988:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800c98a:	88fb      	ldrh	r3, [r7, #6]
 800c98c:	4a95      	ldr	r2, [pc, #596]	; (800cbe4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c99a:	edd7 7a00 	vldr	s15, [r7]
 800c99e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	ee07 3a90 	vmov	s15, r3
 800c9aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c9ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9b6:	ee17 1a90 	vmov	r1, s15
 800c9ba:	88fb      	ldrh	r3, [r7, #6]
 800c9bc:	4a8a      	ldr	r2, [pc, #552]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	1e4a      	subs	r2, r1, #1
 800c9c6:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800c9c8:	e02f      	b.n	800ca2a <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800c9ca:	88fb      	ldrh	r3, [r7, #6]
 800c9cc:	4a86      	ldr	r2, [pc, #536]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c9ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4985      	ldr	r1, [pc, #532]	; (800cbec <PWMBuiltIn_writeFrequency+0x2f4>)
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c9dc:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800c9de:	88fb      	ldrh	r3, [r7, #6]
 800c9e0:	4a80      	ldr	r2, [pc, #512]	; (800cbe4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c9ee:	edd7 7a00 	vldr	s15, [r7]
 800c9f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c9f6:	88fb      	ldrh	r3, [r7, #6]
 800c9f8:	4a7b      	ldr	r2, [pc, #492]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca02:	3301      	adds	r3, #1
 800ca04:	ee07 3a90 	vmov	s15, r3
 800ca08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ca0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca14:	ee17 3a90 	vmov	r3, s15
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	617b      	str	r3, [r7, #20]
			break;
 800ca1c:	e005      	b.n	800ca2a <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	3301      	adds	r3, #1
 800ca22:	613b      	str	r3, [r7, #16]
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	2b09      	cmp	r3, #9
 800ca28:	dd8c      	ble.n	800c944 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800ca2a:	88fb      	ldrh	r3, [r7, #6]
 800ca2c:	4a6e      	ldr	r2, [pc, #440]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800ca2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca36:	697a      	ldr	r2, [r7, #20]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	f000 80be 	beq.w	800cbba <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
 800ca42:	e0a9      	b.n	800cb98 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800ca44:	4a68      	ldr	r2, [pc, #416]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ca4c:	88fb      	ldrh	r3, [r7, #6]
 800ca4e:	4966      	ldr	r1, [pc, #408]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800ca50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	f040 809c 	bne.w	800cb92 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800ca5a:	4a65      	ldr	r2, [pc, #404]	; (800cbf0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d113      	bne.n	800ca8e <PWMBuiltIn_writeFrequency+0x196>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f8c2 	bl	800cbf4 <PWMBuiltIn_readDuty>
 800ca70:	eef0 7a40 	vmov.f32	s15, s0
 800ca74:	4a5c      	ldr	r2, [pc, #368]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca7c:	681c      	ldr	r4, [r3, #0]
 800ca7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ca82:	6978      	ldr	r0, [r7, #20]
 800ca84:	f7ff fe1e 	bl	800c6c4 <duty2CCR>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	6363      	str	r3, [r4, #52]	; 0x34
 800ca8c:	e07a      	b.n	800cb84 <PWMBuiltIn_writeFrequency+0x28c>
 800ca8e:	4a58      	ldr	r2, [pc, #352]	; (800cbf0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca96:	2b04      	cmp	r3, #4
 800ca98:	d113      	bne.n	800cac2 <PWMBuiltIn_writeFrequency+0x1ca>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 f8a8 	bl	800cbf4 <PWMBuiltIn_readDuty>
 800caa4:	eef0 7a40 	vmov.f32	s15, s0
 800caa8:	4a4f      	ldr	r2, [pc, #316]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab0:	681c      	ldr	r4, [r3, #0]
 800cab2:	eeb0 0a67 	vmov.f32	s0, s15
 800cab6:	6978      	ldr	r0, [r7, #20]
 800cab8:	f7ff fe04 	bl	800c6c4 <duty2CCR>
 800cabc:	4603      	mov	r3, r0
 800cabe:	63a3      	str	r3, [r4, #56]	; 0x38
 800cac0:	e060      	b.n	800cb84 <PWMBuiltIn_writeFrequency+0x28c>
 800cac2:	4a4b      	ldr	r2, [pc, #300]	; (800cbf0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caca:	2b08      	cmp	r3, #8
 800cacc:	d113      	bne.n	800caf6 <PWMBuiltIn_writeFrequency+0x1fe>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f88e 	bl	800cbf4 <PWMBuiltIn_readDuty>
 800cad8:	eef0 7a40 	vmov.f32	s15, s0
 800cadc:	4a42      	ldr	r2, [pc, #264]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cae4:	681c      	ldr	r4, [r3, #0]
 800cae6:	eeb0 0a67 	vmov.f32	s0, s15
 800caea:	6978      	ldr	r0, [r7, #20]
 800caec:	f7ff fdea 	bl	800c6c4 <duty2CCR>
 800caf0:	4603      	mov	r3, r0
 800caf2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800caf4:	e046      	b.n	800cb84 <PWMBuiltIn_writeFrequency+0x28c>
 800caf6:	4a3e      	ldr	r2, [pc, #248]	; (800cbf0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cafe:	2b0c      	cmp	r3, #12
 800cb00:	d113      	bne.n	800cb2a <PWMBuiltIn_writeFrequency+0x232>
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 f874 	bl	800cbf4 <PWMBuiltIn_readDuty>
 800cb0c:	eef0 7a40 	vmov.f32	s15, s0
 800cb10:	4a35      	ldr	r2, [pc, #212]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb18:	681c      	ldr	r4, [r3, #0]
 800cb1a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb1e:	6978      	ldr	r0, [r7, #20]
 800cb20:	f7ff fdd0 	bl	800c6c4 <duty2CCR>
 800cb24:	4603      	mov	r3, r0
 800cb26:	6423      	str	r3, [r4, #64]	; 0x40
 800cb28:	e02c      	b.n	800cb84 <PWMBuiltIn_writeFrequency+0x28c>
 800cb2a:	4a31      	ldr	r2, [pc, #196]	; (800cbf0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb32:	2b10      	cmp	r3, #16
 800cb34:	d113      	bne.n	800cb5e <PWMBuiltIn_writeFrequency+0x266>
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 f85a 	bl	800cbf4 <PWMBuiltIn_readDuty>
 800cb40:	eef0 7a40 	vmov.f32	s15, s0
 800cb44:	4a28      	ldr	r2, [pc, #160]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb4c:	681c      	ldr	r4, [r3, #0]
 800cb4e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb52:	6978      	ldr	r0, [r7, #20]
 800cb54:	f7ff fdb6 	bl	800c6c4 <duty2CCR>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	65a3      	str	r3, [r4, #88]	; 0x58
 800cb5c:	e012      	b.n	800cb84 <PWMBuiltIn_writeFrequency+0x28c>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 f846 	bl	800cbf4 <PWMBuiltIn_readDuty>
 800cb68:	eef0 7a40 	vmov.f32	s15, s0
 800cb6c:	4a1e      	ldr	r2, [pc, #120]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb74:	681c      	ldr	r4, [r3, #0]
 800cb76:	eeb0 0a67 	vmov.f32	s0, s15
 800cb7a:	6978      	ldr	r0, [r7, #20]
 800cb7c:	f7ff fda2 	bl	800c6c4 <duty2CCR>
 800cb80:	4603      	mov	r3, r0
 800cb82:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800cb84:	4a18      	ldr	r2, [pc, #96]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3301      	adds	r3, #1
 800cb96:	60fb      	str	r3, [r7, #12]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b19      	cmp	r3, #25
 800cb9c:	f77f af52 	ble.w	800ca44 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800cba0:	88fb      	ldrh	r3, [r7, #6]
 800cba2:	4a11      	ldr	r2, [pc, #68]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	62da      	str	r2, [r3, #44]	; 0x2c
 800cbae:	88fb      	ldrh	r3, [r7, #6]
 800cbb0:	4a0d      	ldr	r2, [pc, #52]	; (800cbe8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cbb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	60da      	str	r2, [r3, #12]
	}
}
 800cbba:	bf00      	nop
 800cbbc:	371c      	adds	r7, #28
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd90      	pop	{r4, r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	f3af 8000 	nop.w
 800cbc8:	eb851eb8 	.word	0xeb851eb8
 800cbcc:	3f9eb851 	.word	0x3f9eb851
 800cbd0:	3cf5c28f 	.word	0x3cf5c28f
 800cbd4:	4bcdfe60 	.word	0x4bcdfe60
 800cbd8:	4bcdfe60 	.word	0x4bcdfe60
 800cbdc:	20000a6c 	.word	0x20000a6c
 800cbe0:	20000a1c 	.word	0x20000a1c
 800cbe4:	200009b4 	.word	0x200009b4
 800cbe8:	2000029c 	.word	0x2000029c
 800cbec:	20000a44 	.word	0x20000a44
 800cbf0:	20000304 	.word	0x20000304

0800cbf4 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800cbfe:	88fb      	ldrh	r3, [r7, #6]
 800cc00:	4a2a      	ldr	r2, [pc, #168]	; (800ccac <PWMBuiltIn_readDuty+0xb8>)
 800cc02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800cc0a:	88fb      	ldrh	r3, [r7, #6]
 800cc0c:	4a28      	ldr	r2, [pc, #160]	; (800ccb0 <PWMBuiltIn_readDuty+0xbc>)
 800cc0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d106      	bne.n	800cc24 <PWMBuiltIn_readDuty+0x30>
 800cc16:	88fb      	ldrh	r3, [r7, #6]
 800cc18:	4a24      	ldr	r2, [pc, #144]	; (800ccac <PWMBuiltIn_readDuty+0xb8>)
 800cc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc22:	e039      	b.n	800cc98 <PWMBuiltIn_readDuty+0xa4>
 800cc24:	88fb      	ldrh	r3, [r7, #6]
 800cc26:	4a22      	ldr	r2, [pc, #136]	; (800ccb0 <PWMBuiltIn_readDuty+0xbc>)
 800cc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc2c:	2b04      	cmp	r3, #4
 800cc2e:	d106      	bne.n	800cc3e <PWMBuiltIn_readDuty+0x4a>
 800cc30:	88fb      	ldrh	r3, [r7, #6]
 800cc32:	4a1e      	ldr	r2, [pc, #120]	; (800ccac <PWMBuiltIn_readDuty+0xb8>)
 800cc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3c:	e02c      	b.n	800cc98 <PWMBuiltIn_readDuty+0xa4>
 800cc3e:	88fb      	ldrh	r3, [r7, #6]
 800cc40:	4a1b      	ldr	r2, [pc, #108]	; (800ccb0 <PWMBuiltIn_readDuty+0xbc>)
 800cc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc46:	2b08      	cmp	r3, #8
 800cc48:	d106      	bne.n	800cc58 <PWMBuiltIn_readDuty+0x64>
 800cc4a:	88fb      	ldrh	r3, [r7, #6]
 800cc4c:	4a17      	ldr	r2, [pc, #92]	; (800ccac <PWMBuiltIn_readDuty+0xb8>)
 800cc4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc56:	e01f      	b.n	800cc98 <PWMBuiltIn_readDuty+0xa4>
 800cc58:	88fb      	ldrh	r3, [r7, #6]
 800cc5a:	4a15      	ldr	r2, [pc, #84]	; (800ccb0 <PWMBuiltIn_readDuty+0xbc>)
 800cc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc60:	2b0c      	cmp	r3, #12
 800cc62:	d106      	bne.n	800cc72 <PWMBuiltIn_readDuty+0x7e>
 800cc64:	88fb      	ldrh	r3, [r7, #6]
 800cc66:	4a11      	ldr	r2, [pc, #68]	; (800ccac <PWMBuiltIn_readDuty+0xb8>)
 800cc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc70:	e012      	b.n	800cc98 <PWMBuiltIn_readDuty+0xa4>
 800cc72:	88fb      	ldrh	r3, [r7, #6]
 800cc74:	4a0e      	ldr	r2, [pc, #56]	; (800ccb0 <PWMBuiltIn_readDuty+0xbc>)
 800cc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc7a:	2b10      	cmp	r3, #16
 800cc7c:	d106      	bne.n	800cc8c <PWMBuiltIn_readDuty+0x98>
 800cc7e:	88fb      	ldrh	r3, [r7, #6]
 800cc80:	4a0a      	ldr	r2, [pc, #40]	; (800ccac <PWMBuiltIn_readDuty+0xb8>)
 800cc82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc8a:	e005      	b.n	800cc98 <PWMBuiltIn_readDuty+0xa4>
 800cc8c:	88fb      	ldrh	r3, [r7, #6]
 800cc8e:	4a07      	ldr	r2, [pc, #28]	; (800ccac <PWMBuiltIn_readDuty+0xb8>)
 800cc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc98:	4619      	mov	r1, r3
 800cc9a:	f7ff fd3a 	bl	800c712 <CCR2duty>
 800cc9e:	eef0 7a40 	vmov.f32	s15, s0
}
 800cca2:	eeb0 0a67 	vmov.f32	s0, s15
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	2000029c 	.word	0x2000029c
 800ccb0:	20000304 	.word	0x20000304

0800ccb4 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800ccbc:	4a07      	ldr	r2, [pc, #28]	; (800ccdc <PWMBuiltInStartChannel+0x28>)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ccc4:	4a06      	ldr	r2, [pc, #24]	; (800cce0 <PWMBuiltInStartChannel+0x2c>)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cccc:	4619      	mov	r1, r3
 800ccce:	f7f8 fa05 	bl	80050dc <HAL_TIM_PWM_Start>
}
 800ccd2:	bf00      	nop
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	2000029c 	.word	0x2000029c
 800cce0:	20000304 	.word	0x20000304

0800cce4 <PWMBuiltInStart>:
{
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
}

void PWMBuiltInStart()
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800ccea:	2300      	movs	r3, #0
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	e005      	b.n	800ccfc <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff ffdf 	bl	800ccb4 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	607b      	str	r3, [r7, #4]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b19      	cmp	r3, #25
 800cd00:	ddf6      	ble.n	800ccf0 <PWMBuiltInStart+0xc>
}
 800cd02:	bf00      	nop
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800cd12:	2300      	movs	r3, #0
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	e06f      	b.n	800cdf8 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800cd18:	4a3c      	ldr	r2, [pc, #240]	; (800ce0c <PWMBuiltIn_init+0x100>)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7ff fd15 	bl	800c750 <getTIM_SOURCECLK>
 800cd26:	4601      	mov	r1, r0
 800cd28:	4a39      	ldr	r2, [pc, #228]	; (800ce10 <PWMBuiltIn_init+0x104>)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800cd30:	2300      	movs	r3, #0
 800cd32:	60bb      	str	r3, [r7, #8]
 800cd34:	e04c      	b.n	800cdd0 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800cd36:	4a37      	ldr	r2, [pc, #220]	; (800ce14 <PWMBuiltIn_init+0x108>)
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	fa02 f303 	lsl.w	r3, r2, r3
 800cd44:	1e5a      	subs	r2, r3, #1
 800cd46:	4934      	ldr	r1, [pc, #208]	; (800ce18 <PWMBuiltIn_init+0x10c>)
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800cd4e:	4a33      	ldr	r2, [pc, #204]	; (800ce1c <PWMBuiltIn_init+0x110>)
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd56:	2201      	movs	r2, #1
 800cd58:	fa02 f303 	lsl.w	r3, r2, r3
 800cd5c:	1e5a      	subs	r2, r3, #1
 800cd5e:	4930      	ldr	r1, [pc, #192]	; (800ce20 <PWMBuiltIn_init+0x114>)
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800cd66:	4a2c      	ldr	r2, [pc, #176]	; (800ce18 <PWMBuiltIn_init+0x10c>)
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	ee07 3a90 	vmov	s15, r3
 800cd74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd78:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800cd7c:	4a28      	ldr	r2, [pc, #160]	; (800ce20 <PWMBuiltIn_init+0x114>)
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd84:	3301      	adds	r3, #1
 800cd86:	ee07 3a90 	vmov	s15, r3
 800cd8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd8e:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800cd92:	4a1f      	ldr	r2, [pc, #124]	; (800ce10 <PWMBuiltIn_init+0x104>)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd9a:	ee07 3a90 	vmov	s15, r3
 800cd9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cda2:	edd7 7a01 	vldr	s15, [r7, #4]
 800cda6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cdaa:	ed97 7a00 	vldr	s14, [r7]
 800cdae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdb2:	491c      	ldr	r1, [pc, #112]	; (800ce24 <PWMBuiltIn_init+0x118>)
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	005b      	lsls	r3, r3, #1
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	440b      	add	r3, r1
 800cdc6:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60bb      	str	r3, [r7, #8]
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b09      	cmp	r3, #9
 800cdd4:	ddaf      	ble.n	800cd36 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800ce28 <PWMBuiltIn_init+0x11c>
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff fcea 	bl	800c7b8 <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ce2c <PWMBuiltIn_init+0x120>
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff fd83 	bl	800c8f8 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2b19      	cmp	r3, #25
 800cdfc:	dd8c      	ble.n	800cd18 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800cdfe:	f7ff ff71 	bl	800cce4 <PWMBuiltInStart>
}
 800ce02:	bf00      	nop
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	2000029c 	.word	0x2000029c
 800ce10:	200009b4 	.word	0x200009b4
 800ce14:	2000036c 	.word	0x2000036c
 800ce18:	20000a1c 	.word	0x20000a1c
 800ce1c:	20000394 	.word	0x20000394
 800ce20:	20000a44 	.word	0x20000a44
 800ce24:	20000a6c 	.word	0x20000a6c
 800ce28:	00000000 	.word	0x00000000
 800ce2c:	42200000 	.word	0x42200000

0800ce30 <_ZN8JOYSTICKC1Ev>:
 *	Laboratory: Bio-Control Lab
 * Orgnization: the University of Hong Kong
 */
#include "joyStick.h"

JOYSTICK::JOYSTICK()
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
{
	jx=0;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	601a      	str	r2, [r3, #0]
	jy=0;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	605a      	str	r2, [r3, #4]
	jz=0;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	609a      	str	r2, [r3, #8]
	jRx=0;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	60da      	str	r2, [r3, #12]
	jRy=0;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	611a      	str	r2, [r3, #16]
	jRz=0;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	615a      	str	r2, [r3, #20]
	BtnNorth=0;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	BtnEast=0;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	BtnSouth=0;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	BtnWest=0;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	BtnThumbR=0;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	BtnThumbL=0;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	jxOffset = 0;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	619a      	str	r2, [r3, #24]
	jyOffset = 0;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	61da      	str	r2, [r3, #28]
	jzOffset = 0;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	621a      	str	r2, [r3, #32]
	jRxOffset = 0;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	625a      	str	r2, [r3, #36]	; 0x24
	jRyOffset = 0;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	629a      	str	r2, [r3, #40]	; 0x28
	jRzOffset = 0;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <_ZN8JOYSTICK22receiveJoyStickCommandEhiiiiii>:




void JOYSTICK::receiveJoyStickCommand(uint8_t buttonSeq,int jxx,int jyy,int jzz,int jRxx,int jRyy,int jRzz)
{
 800cebe:	b480      	push	{r7}
 800cec0:	b085      	sub	sp, #20
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60f8      	str	r0, [r7, #12]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
 800ceca:	460b      	mov	r3, r1
 800cecc:	72fb      	strb	r3, [r7, #11]

	BtnThumbR = (uint8_t)(buttonSeq & 0x01);
 800cece:	7afb      	ldrb	r3, [r7, #11]
 800ced0:	f003 0301 	and.w	r3, r3, #1
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	BtnThumbL=(uint8_t)((buttonSeq>>1) & 0x01);
 800cedc:	7afb      	ldrb	r3, [r7, #11]
 800cede:	105b      	asrs	r3, r3, #1
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	BtnSouth = (uint8_t)((buttonSeq>>2) & 0x01);
 800ceee:	7afb      	ldrb	r3, [r7, #11]
 800cef0:	109b      	asrs	r3, r3, #2
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	f003 0301 	and.w	r3, r3, #1
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	BtnEast = (uint8_t)((buttonSeq>>3) & 0x01);
 800cf00:	7afb      	ldrb	r3, [r7, #11]
 800cf02:	10db      	asrs	r3, r3, #3
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	f003 0301 	and.w	r3, r3, #1
 800cf0a:	b2da      	uxtb	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	BtnNorth = (uint8_t)((buttonSeq>>4) & 0x01);
 800cf12:	7afb      	ldrb	r3, [r7, #11]
 800cf14:	111b      	asrs	r3, r3, #4
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	BtnWest = (uint8_t)((buttonSeq>>5) & 0x01);
 800cf24:	7afb      	ldrb	r3, [r7, #11]
 800cf26:	115b      	asrs	r3, r3, #5
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	f003 0301 	and.w	r3, r3, #1
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	jx=jxx-jxOffset;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	699b      	ldr	r3, [r3, #24]
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	1ad2      	subs	r2, r2, r3
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	601a      	str	r2, [r3, #0]
	jy=jyy-jyOffset;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	69db      	ldr	r3, [r3, #28]
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	1ad2      	subs	r2, r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	605a      	str	r2, [r3, #4]
	jz=jzz-jzOffset;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	69ba      	ldr	r2, [r7, #24]
 800cf54:	1ad2      	subs	r2, r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	609a      	str	r2, [r3, #8]

	jRx=jRxx-jRxOffset;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5e:	69fa      	ldr	r2, [r7, #28]
 800cf60:	1ad2      	subs	r2, r2, r3
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	60da      	str	r2, [r3, #12]
	jRy=jRyy-jRyOffset;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6a:	6a3a      	ldr	r2, [r7, #32]
 800cf6c:	1ad2      	subs	r2, r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	611a      	str	r2, [r3, #16]
	jRz=jRzz-jRzOffset;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf78:	1ad2      	subs	r2, r2, r3
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	615a      	str	r2, [r3, #20]
}
 800cf7e:	bf00      	nop
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800cf8a:	b480      	push	{r7}
 800cf8c:	b085      	sub	sp, #20
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	60f8      	str	r0, [r7, #12]
 800cf92:	460b      	mov	r3, r1
 800cf94:	ed87 0a01 	vstr	s0, [r7, #4]
 800cf98:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9e:	7afb      	ldrb	r3, [r7, #11]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4413      	add	r3, r2
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	601a      	str	r2, [r3, #0]
}
 800cfa8:	bf00      	nop
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cfc4:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d15b      	bne.n	800d088 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	ed93 7a00 	vldr	s14, [r3]
 800cfd6:	edd7 7a03 	vldr	s15, [r7, #12]
 800cfda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfde:	edd7 7a03 	vldr	s15, [r7, #12]
 800cfe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfe6:	edd7 7a03 	vldr	s15, [r7, #12]
 800cfea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfee:	edd7 7a03 	vldr	s15, [r7, #12]
 800cff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800cffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d002:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	ed93 7a00 	vldr	s14, [r3]
 800d00c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d010:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d014:	edd7 7a03 	vldr	s15, [r7, #12]
 800d018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d01c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d020:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d028:	3304      	adds	r3, #4
 800d02a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d02e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d032:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	ed93 7a00 	vldr	s14, [r3]
 800d03c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d040:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d044:	edd7 7a03 	vldr	s15, [r7, #12]
 800d048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d04c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d050:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d058:	3308      	adds	r3, #8
 800d05a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d05e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d062:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	ed93 7a00 	vldr	s14, [r3]
 800d06c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d070:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d078:	330c      	adds	r3, #12
 800d07a:	edd7 7a03 	vldr	s15, [r7, #12]
 800d07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d082:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800d086:	e0fc      	b.n	800d282 <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d08e:	2b01      	cmp	r3, #1
 800d090:	f040 80f7 	bne.w	800d282 <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	ed93 7a00 	vldr	s14, [r3]
 800d09a:	edd7 7a03 	vldr	s15, [r7, #12]
 800d09e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0a2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0aa:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0c2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ce:	eddf 6a70 	vldr	s13, [pc, #448]	; 800d290 <kalman_setQ+0x2dc>
 800d0d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d0d6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	ed93 7a00 	vldr	s14, [r3]
 800d0e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d100:	edd7 7a03 	vldr	s15, [r7, #12]
 800d104:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d10c:	3304      	adds	r3, #4
 800d10e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800d112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d116:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	ed93 7a00 	vldr	s14, [r3]
 800d120:	edd7 7a03 	vldr	s15, [r7, #12]
 800d124:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d128:	edd7 7a03 	vldr	s15, [r7, #12]
 800d12c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d130:	edd7 7a03 	vldr	s15, [r7, #12]
 800d134:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d138:	edd7 7a03 	vldr	s15, [r7, #12]
 800d13c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d144:	3308      	adds	r3, #8
 800d146:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800d14a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d14e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	ed93 7a00 	vldr	s14, [r3]
 800d158:	edd7 7a03 	vldr	s15, [r7, #12]
 800d15c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d160:	edd7 7a03 	vldr	s15, [r7, #12]
 800d164:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d168:	edd7 7a03 	vldr	s15, [r7, #12]
 800d16c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d170:	edd7 7a03 	vldr	s15, [r7, #12]
 800d174:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d178:	edd7 7a03 	vldr	s15, [r7, #12]
 800d17c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d184:	330c      	adds	r3, #12
 800d186:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800d18a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d18e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	ed93 7a00 	vldr	s14, [r3]
 800d198:	edd7 7a03 	vldr	s15, [r7, #12]
 800d19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1bc:	3310      	adds	r3, #16
 800d1be:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d1c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d1c6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	ed93 7a00 	vldr	s14, [r3]
 800d1d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ec:	3314      	adds	r3, #20
 800d1ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d1f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d1f6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	ed93 7a00 	vldr	s14, [r3]
 800d200:	edd7 7a03 	vldr	s15, [r7, #12]
 800d204:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d208:	edd7 7a03 	vldr	s15, [r7, #12]
 800d20c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d210:	edd7 7a03 	vldr	s15, [r7, #12]
 800d214:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d218:	edd7 7a03 	vldr	s15, [r7, #12]
 800d21c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d224:	3318      	adds	r3, #24
 800d226:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800d22a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d22e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	ed93 7a00 	vldr	s14, [r3]
 800d238:	edd7 7a03 	vldr	s15, [r7, #12]
 800d23c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d240:	edd7 7a03 	vldr	s15, [r7, #12]
 800d244:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d248:	edd7 7a03 	vldr	s15, [r7, #12]
 800d24c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d254:	331c      	adds	r3, #28
 800d256:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d25a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d25e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	ed93 7a00 	vldr	s14, [r3]
 800d268:	edd7 7a03 	vldr	s15, [r7, #12]
 800d26c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d274:	3320      	adds	r3, #32
 800d276:	edd7 7a03 	vldr	s15, [r7, #12]
 800d27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d27e:	edc3 7a00 	vstr	s15, [r3]
}
 800d282:	bf00      	nop
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	42100000 	.word	0x42100000

0800d294 <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d105      	bne.n	800d2b4 <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	6812      	ldr	r2, [r2, #0]
 800d2b0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800d2b2:	e039      	b.n	800d328 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d134      	bne.n	800d328 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	6812      	ldr	r2, [r2, #0]
 800d2c6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	f04f 0200 	mov.w	r2, #0
 800d2d2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2d8:	3308      	adds	r3, #8
 800d2da:	f04f 0200 	mov.w	r2, #0
 800d2de:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2e4:	330c      	adds	r3, #12
 800d2e6:	f04f 0200 	mov.w	r2, #0
 800d2ea:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2f0:	3310      	adds	r3, #16
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	6852      	ldr	r2, [r2, #4]
 800d2f6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2fc:	3314      	adds	r3, #20
 800d2fe:	f04f 0200 	mov.w	r2, #0
 800d302:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d308:	3318      	adds	r3, #24
 800d30a:	f04f 0200 	mov.w	r2, #0
 800d30e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d314:	331c      	adds	r3, #28
 800d316:	f04f 0200 	mov.w	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d320:	3320      	adds	r3, #32
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	6892      	ldr	r2, [r2, #8]
 800d326:	601a      	str	r2, [r3, #0]
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	ed87 0a03 	vstr	s0, [r7, #12]
 800d33e:	edc7 0a02 	vstr	s1, [r7, #8]
 800d342:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800d346:	f107 0108 	add.w	r1, r7, #8
 800d34a:	f107 030c 	add.w	r3, r7, #12
 800d34e:	2200      	movs	r2, #0
 800d350:	ed97 0a01 	vldr	s0, [r7, #4]
 800d354:	4618      	mov	r0, r3
 800d356:	f000 f807 	bl	800d368 <KALMANFILTER>
 800d35a:	6178      	str	r0, [r7, #20]
	return pk;
 800d35c:	697b      	ldr	r3, [r7, #20]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3718      	adds	r7, #24
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	ed87 0a01 	vstr	s0, [r7, #4]
 800d376:	4613      	mov	r3, r2
 800d378:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800d37a:	20c4      	movs	r0, #196	; 0xc4
 800d37c:	f004 fb66 	bl	8011a4c <malloc>
 800d380:	4603      	mov	r3, r0
 800d382:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <KALMANFILTER+0x26>
		return NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	e10e      	b.n	800d5ac <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800d38e:	22c4      	movs	r2, #196	; 0xc4
 800d390:	2100      	movs	r1, #0
 800d392:	6978      	ldr	r0, [r7, #20]
 800d394:	f004 fb6d 	bl	8011a72 <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	887a      	ldrh	r2, [r7, #2]
 800d39c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800d3a0:	6978      	ldr	r0, [r7, #20]
 800d3a2:	f000 f90f 	bl	800d5c4 <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	4a82      	ldr	r2, [pc, #520]	; (800d5b4 <KALMANFILTER+0x24c>)
 800d3aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	4a81      	ldr	r2, [pc, #516]	; (800d5b8 <KALMANFILTER+0x250>)
 800d3b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	4a80      	ldr	r2, [pc, #512]	; (800d5bc <KALMANFILTER+0x254>)
 800d3ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	4a7f      	ldr	r2, [pc, #508]	; (800d5c0 <KALMANFILTER+0x258>)
 800d3c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800d3ce:	887b      	ldrh	r3, [r7, #2]
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	f040 8095 	bne.w	800d500 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d3de:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800d3ea:	ed97 7a01 	vldr	s14, [r7, #4]
 800d3ee:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	695b      	ldr	r3, [r3, #20]
 800d3fa:	3308      	adds	r3, #8
 800d3fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d404:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	695b      	ldr	r3, [r3, #20]
 800d40c:	330c      	adds	r3, #12
 800d40e:	f04f 0200 	mov.w	r2, #0
 800d412:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	695b      	ldr	r3, [r3, #20]
 800d418:	3310      	adds	r3, #16
 800d41a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d41e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	3314      	adds	r3, #20
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	3318      	adds	r3, #24
 800d430:	f04f 0200 	mov.w	r2, #0
 800d434:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	695b      	ldr	r3, [r3, #20]
 800d43a:	331c      	adds	r3, #28
 800d43c:	f04f 0200 	mov.w	r2, #0
 800d440:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	695b      	ldr	r3, [r3, #20]
 800d446:	3320      	adds	r3, #32
 800d448:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d44c:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	69db      	ldr	r3, [r3, #28]
 800d452:	f04f 0200 	mov.w	r2, #0
 800d456:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	69db      	ldr	r3, [r3, #28]
 800d45c:	3304      	adds	r3, #4
 800d45e:	f04f 0200 	mov.w	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	69db      	ldr	r3, [r3, #28]
 800d468:	3308      	adds	r3, #8
 800d46a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d46e:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d474:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d478:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47e:	3304      	adds	r3, #4
 800d480:	f04f 0200 	mov.w	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48a:	3308      	adds	r3, #8
 800d48c:	f04f 0200 	mov.w	r2, #0
 800d490:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d496:	330c      	adds	r3, #12
 800d498:	f04f 0200 	mov.w	r2, #0
 800d49c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a2:	3310      	adds	r3, #16
 800d4a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d4a8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ae:	3314      	adds	r3, #20
 800d4b0:	f04f 0200 	mov.w	r2, #0
 800d4b4:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	3318      	adds	r3, #24
 800d4bc:	f04f 0200 	mov.w	r2, #0
 800d4c0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c6:	331c      	adds	r3, #28
 800d4c8:	f04f 0200 	mov.w	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d2:	3320      	adds	r3, #32
 800d4d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d4d8:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	f103 0210 	add.w	r2, r3, #16
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	3350      	adds	r3, #80	; 0x50
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	f7f3 fe75 	bl	80011d6 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	f103 0220 	add.w	r2, r3, #32
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	3358      	adds	r3, #88	; 0x58
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	f7f3 fe6c 	bl	80011d6 <arm_mat_trans_f32>
 800d4fe:	e048      	b.n	800d592 <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800d500:	887b      	ldrh	r3, [r7, #2]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d145      	bne.n	800d592 <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	695b      	ldr	r3, [r3, #20]
 800d50a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d50e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	3304      	adds	r3, #4
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	695b      	ldr	r3, [r3, #20]
 800d51e:	3308      	adds	r3, #8
 800d520:	f04f 0200 	mov.w	r2, #0
 800d524:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	695b      	ldr	r3, [r3, #20]
 800d52a:	330c      	adds	r3, #12
 800d52c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d530:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800d532:	ed97 7a01 	vldr	s14, [r7, #4]
 800d536:	edd7 7a01 	vldr	s15, [r7, #4]
 800d53a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d54a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	3304      	adds	r3, #4
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d560:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d566:	3304      	adds	r3, #4
 800d568:	f04f 0200 	mov.w	r2, #0
 800d56c:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f103 0210 	add.w	r2, r3, #16
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	3350      	adds	r3, #80	; 0x50
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f7f3 fe2b 	bl	80011d6 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	f103 0220 	add.w	r2, r3, #32
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	3358      	adds	r3, #88	; 0x58
 800d58a:	4619      	mov	r1, r3
 800d58c:	4610      	mov	r0, r2
 800d58e:	f7f3 fe22 	bl	80011d6 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d598:	68f9      	ldr	r1, [r7, #12]
 800d59a:	6978      	ldr	r0, [r7, #20]
 800d59c:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d5a4:	68b9      	ldr	r1, [r7, #8]
 800d5a6:	6978      	ldr	r0, [r7, #20]
 800d5a8:	4798      	blx	r3

	return ptKalmanFilter;
 800d5aa:	697b      	ldr	r3, [r7, #20]
	
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	0800d935 	.word	0x0800d935
 800d5b8:	0800cfb5 	.word	0x0800cfb5
 800d5bc:	0800d295 	.word	0x0800d295
 800d5c0:	0800cf8b 	.word	0x0800cf8b

0800d5c4 <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	f040 80d9 	bne.w	800d78a <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800d5d8:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800d5dc:	f004 fa36 	bl	8011a4c <malloc>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d5f0:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800d5f2:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	68b8      	ldr	r0, [r7, #8]
 800d5fa:	f004 fa3a 	bl	8011a72 <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2201      	movs	r2, #1
 800d604:	2103      	movs	r1, #3
 800d606:	f7f3 fa15 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f103 0010 	add.w	r0, r3, #16
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	330c      	adds	r3, #12
 800d614:	2203      	movs	r2, #3
 800d616:	2103      	movs	r1, #3
 800d618:	f7f3 fa0c 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f103 0018 	add.w	r0, r3, #24
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	3330      	adds	r3, #48	; 0x30
 800d626:	2201      	movs	r2, #1
 800d628:	2103      	movs	r1, #3
 800d62a:	f7f3 fa03 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f103 0008 	add.w	r0, r3, #8
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	333c      	adds	r3, #60	; 0x3c
 800d638:	2201      	movs	r2, #1
 800d63a:	2101      	movs	r1, #1
 800d63c:	f7f3 f9fa 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f103 0020 	add.w	r0, r3, #32
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	3340      	adds	r3, #64	; 0x40
 800d64a:	2203      	movs	r2, #3
 800d64c:	2103      	movs	r1, #3
 800d64e:	f7f3 f9f1 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	33f4      	adds	r3, #244	; 0xf4
 800d65c:	2201      	movs	r2, #1
 800d65e:	2103      	movs	r1, #3
 800d660:	f7f3 f9e8 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	3364      	adds	r3, #100	; 0x64
 800d66e:	2203      	movs	r2, #3
 800d670:	2103      	movs	r1, #3
 800d672:	f7f3 f9df 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	3388      	adds	r3, #136	; 0x88
 800d680:	2203      	movs	r2, #3
 800d682:	2103      	movs	r1, #3
 800d684:	f7f3 f9d6 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	33ac      	adds	r3, #172	; 0xac
 800d692:	2203      	movs	r2, #3
 800d694:	2103      	movs	r1, #3
 800d696:	f7f3 f9cd 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	33d0      	adds	r3, #208	; 0xd0
 800d6a4:	2203      	movs	r2, #3
 800d6a6:	2103      	movs	r1, #3
 800d6a8:	f7f3 f9c4 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d6b8:	2203      	movs	r2, #3
 800d6ba:	2103      	movs	r1, #3
 800d6bc:	f7f3 f9ba 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d6cc:	2203      	movs	r2, #3
 800d6ce:	2103      	movs	r1, #3
 800d6d0:	f7f3 f9b0 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d6e0:	2203      	movs	r2, #3
 800d6e2:	2103      	movs	r1, #3
 800d6e4:	f7f3 f9a6 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800d6f4:	2203      	movs	r2, #3
 800d6f6:	2103      	movs	r1, #3
 800d6f8:	f7f3 f99c 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d708:	2203      	movs	r2, #3
 800d70a:	2103      	movs	r1, #3
 800d70c:	f7f3 f992 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d71c:	2203      	movs	r2, #3
 800d71e:	2103      	movs	r1, #3
 800d720:	f7f3 f988 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800d730:	2203      	movs	r2, #3
 800d732:	2103      	movs	r1, #3
 800d734:	f7f3 f97e 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800d744:	2201      	movs	r2, #1
 800d746:	2103      	movs	r1, #3
 800d748:	f7f3 f974 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d758:	2201      	movs	r2, #1
 800d75a:	2103      	movs	r1, #3
 800d75c:	f7f3 f96a 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d76c:	2201      	movs	r2, #1
 800d76e:	2103      	movs	r1, #3
 800d770:	f7f3 f960 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800d780:	2201      	movs	r2, #1
 800d782:	2103      	movs	r1, #3
 800d784:	f7f3 f956 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800d788:	e0d0      	b.n	800d92c <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d790:	2b00      	cmp	r3, #0
 800d792:	f040 80cb 	bne.w	800d92c <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800d796:	20bc      	movs	r0, #188	; 0xbc
 800d798:	f004 f958 	bl	8011a4c <malloc>
 800d79c:	4603      	mov	r3, r0
 800d79e:	461a      	mov	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d7ac:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800d7ae:	22bc      	movs	r2, #188	; 0xbc
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f004 f95d 	bl	8011a72 <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	2102      	movs	r1, #2
 800d7c0:	f7f3 f938 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f103 0010 	add.w	r0, r3, #16
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	3308      	adds	r3, #8
 800d7ce:	2202      	movs	r2, #2
 800d7d0:	2102      	movs	r1, #2
 800d7d2:	f7f3 f92f 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f103 0018 	add.w	r0, r3, #24
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	3318      	adds	r3, #24
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	2102      	movs	r1, #2
 800d7e4:	f7f3 f926 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f103 0008 	add.w	r0, r3, #8
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	3320      	adds	r3, #32
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	2101      	movs	r1, #1
 800d7f6:	f7f3 f91d 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f103 0020 	add.w	r0, r3, #32
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	3324      	adds	r3, #36	; 0x24
 800d804:	2202      	movs	r2, #2
 800d806:	2101      	movs	r1, #1
 800d808:	f7f3 f914 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	3358      	adds	r3, #88	; 0x58
 800d816:	2201      	movs	r2, #1
 800d818:	2101      	movs	r1, #1
 800d81a:	f7f3 f90b 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	332c      	adds	r3, #44	; 0x2c
 800d828:	2202      	movs	r2, #2
 800d82a:	2102      	movs	r1, #2
 800d82c:	f7f3 f902 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	333c      	adds	r3, #60	; 0x3c
 800d83a:	2202      	movs	r2, #2
 800d83c:	2102      	movs	r1, #2
 800d83e:	f7f3 f8f9 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	334c      	adds	r3, #76	; 0x4c
 800d84c:	2201      	movs	r2, #1
 800d84e:	2101      	movs	r1, #1
 800d850:	f7f3 f8f0 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3350      	adds	r3, #80	; 0x50
 800d85e:	2201      	movs	r2, #1
 800d860:	2102      	movs	r1, #2
 800d862:	f7f3 f8e7 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	335c      	adds	r3, #92	; 0x5c
 800d870:	2202      	movs	r2, #2
 800d872:	2102      	movs	r1, #2
 800d874:	f7f3 f8de 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	336c      	adds	r3, #108	; 0x6c
 800d882:	2201      	movs	r2, #1
 800d884:	2102      	movs	r1, #2
 800d886:	f7f3 f8d5 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	3374      	adds	r3, #116	; 0x74
 800d894:	2201      	movs	r2, #1
 800d896:	2102      	movs	r1, #2
 800d898:	f7f3 f8cc 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	337c      	adds	r3, #124	; 0x7c
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	2102      	movs	r1, #2
 800d8aa:	f7f3 f8c3 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	338c      	adds	r3, #140	; 0x8c
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	2102      	movs	r1, #2
 800d8bc:	f7f3 f8ba 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	339c      	adds	r3, #156	; 0x9c
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	f7f3 f8b1 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	33a0      	adds	r3, #160	; 0xa0
 800d8dc:	2201      	movs	r2, #1
 800d8de:	2101      	movs	r1, #1
 800d8e0:	f7f3 f8a8 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	33a4      	adds	r3, #164	; 0xa4
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	2101      	movs	r1, #1
 800d8f2:	f7f3 f89f 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	33a8      	adds	r3, #168	; 0xa8
 800d900:	2201      	movs	r2, #1
 800d902:	2101      	movs	r1, #1
 800d904:	f7f3 f896 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	33ac      	adds	r3, #172	; 0xac
 800d912:	2201      	movs	r2, #1
 800d914:	2102      	movs	r1, #2
 800d916:	f7f3 f88d 	bl	8000a34 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	33b4      	adds	r3, #180	; 0xb4
 800d924:	2201      	movs	r2, #1
 800d926:	2102      	movs	r1, #2
 800d928:	f7f3 f884 	bl	8000a34 <arm_mat_init_f32>
}
 800d92c:	bf00      	nop
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f103 0010 	add.w	r0, r3, #16
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3398      	adds	r3, #152	; 0x98
 800d948:	461a      	mov	r2, r3
 800d94a:	f7f3 fac3 	bl	8000ed4 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f103 0010 	add.w	r0, r3, #16
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	3368      	adds	r3, #104	; 0x68
 800d95e:	461a      	mov	r2, r3
 800d960:	f7f3 fab8 	bl	8000ed4 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	3370      	adds	r3, #112	; 0x70
 800d974:	461a      	mov	r2, r3
 800d976:	f7f3 faad 	bl	8000ed4 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	3368      	adds	r3, #104	; 0x68
 800d98a:	461a      	mov	r2, r3
 800d98c:	f7f2 ffba 	bl	8000904 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	3360      	adds	r3, #96	; 0x60
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	f7f3 fa97 	bl	8000ed4 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f103 0020 	add.w	r0, r3, #32
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	3378      	adds	r3, #120	; 0x78
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f7f3 fa8c 	bl	8000ed4 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	3380      	adds	r3, #128	; 0x80
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	f7f2 ff99 	bl	8000904 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3378      	adds	r3, #120	; 0x78
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f7f3 f840 	bl	8000a64 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	3348      	adds	r3, #72	; 0x48
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	f7f3 fa6d 	bl	8000ed4 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f103 0020 	add.w	r0, r3, #32
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	3388      	adds	r3, #136	; 0x88
 800da0a:	461a      	mov	r2, r3
 800da0c:	f7f3 fa62 	bl	8000ed4 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	3390      	adds	r3, #144	; 0x90
 800da20:	461a      	mov	r2, r3
 800da22:	f7f3 fb40 	bl	80010a6 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	33a0      	adds	r3, #160	; 0xa0
 800da36:	461a      	mov	r2, r3
 800da38:	f7f3 fa4c 	bl	8000ed4 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	33a0      	adds	r3, #160	; 0xa0
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	4619      	mov	r1, r3
 800da4a:	f7f2 ff5b 	bl	8000904 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f103 0120 	add.w	r1, r3, #32
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3330      	adds	r3, #48	; 0x30
 800da5e:	461a      	mov	r2, r3
 800da60:	f7f3 fa38 	bl	8000ed4 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3370      	adds	r3, #112	; 0x70
 800da74:	461a      	mov	r2, r3
 800da76:	f7f3 fa2d 	bl	8000ed4 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	3330      	adds	r3, #48	; 0x30
 800da8a:	461a      	mov	r2, r3
 800da8c:	f7f3 fb0b 	bl	80010a6 <arm_mat_sub_f32>

}
 800da90:	bf00      	nop
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800da98:	b480      	push	{r7}
 800da9a:	b089      	sub	sp, #36	; 0x24
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	61f8      	str	r0, [r7, #28]
 800daa0:	ed87 0a06 	vstr	s0, [r7, #24]
 800daa4:	edc7 0a05 	vstr	s1, [r7, #20]
 800daa8:	ed87 1a04 	vstr	s2, [r7, #16]
 800daac:	edc7 1a03 	vstr	s3, [r7, #12]
 800dab0:	ed87 2a02 	vstr	s4, [r7, #8]
 800dab4:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	69ba      	ldr	r2, [r7, #24]
 800dabc:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dad0:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	f04f 0200 	mov.w	r2, #0
 800dad8:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dae6:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	f04f 0200 	mov.w	r2, #0
 800daee:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	4a2f      	ldr	r2, [pc, #188]	; (800dbb0 <initPID+0x118>)
 800daf4:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	edd3 6a02 	vldr	s13, [r3, #8]
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	ed93 7a00 	vldr	s14, [r3]
 800db02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	edd3 6a08 	vldr	s13, [r3, #32]
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	ed93 7a08 	vldr	s14, [r3, #32]
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	ed93 6a07 	vldr	s12, [r3, #28]
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	edd3 7a05 	vldr	s15, [r3, #20]
 800db24:	ee66 7a27 	vmul.f32	s15, s12, s15
 800db28:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	edd3 7a00 	vldr	s15, [r3]
 800db3c:	eeb1 7a67 	vneg.f32	s14, s15
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	edd3 7a07 	vldr	s15, [r3, #28]
 800db46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800db50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	f04f 0200 	mov.w	r2, #0
 800db60:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	f04f 0200 	mov.w	r2, #0
 800db68:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	f04f 0200 	mov.w	r2, #0
 800db70:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	f04f 0200 	mov.w	r2, #0
 800db78:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800db80:	edd7 7a02 	vldr	s15, [r7, #8]
 800db84:	eef1 7a67 	vneg.f32	s15, s15
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800db94:	edd7 7a01 	vldr	s15, [r7, #4]
 800db98:	eef1 7a67 	vneg.f32	s15, s15
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800dba2:	bf00      	nop
 800dba4:	3724      	adds	r7, #36	; 0x24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	41700000 	.word	0x41700000

0800dbb4 <setKp>:


void setKp(PID_Type *pid, float kp)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	ed87 0a00 	vstr	s0, [r7]
	if(kp>=0)
 800dbc0:	edd7 7a00 	vldr	s15, [r7]
 800dbc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbcc:	da00      	bge.n	800dbd0 <setKp+0x1c>
		 pid->Kp = kp;
		 pid->Td = pid->Kd/pid->Kp;
		 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
		 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
	}
}
 800dbce:	e034      	b.n	800dc3a <setKp+0x86>
		 pid->Kp = kp;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	683a      	ldr	r2, [r7, #0]
 800dbd4:	601a      	str	r2, [r3, #0]
		 pid->Td = pid->Kd/pid->Kp;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	edd3 6a02 	vldr	s13, [r3, #8]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	ed93 7a00 	vldr	s14, [r3]
 800dbe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	edc3 7a08 	vstr	s15, [r3, #32]
		 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	edd3 6a08 	vldr	s13, [r3, #32]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	ed93 7a08 	vldr	s14, [r3, #32]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	ed93 6a07 	vldr	s12, [r3, #28]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	edd3 7a05 	vldr	s15, [r3, #20]
 800dc04:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dc08:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	edd3 7a00 	vldr	s15, [r3]
 800dc1c:	eeb1 7a67 	vneg.f32	s14, s15
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	edd3 7a07 	vldr	s15, [r3, #28]
 800dc26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800dc30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800dc3a:	bf00      	nop
 800dc3c:	370c      	adds	r7, #12
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr

0800dc46 <setKd>:

void setKd(PID_Type *pid, float kd)
{
 800dc46:	b480      	push	{r7}
 800dc48:	b083      	sub	sp, #12
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	ed87 0a00 	vstr	s0, [r7]
	if(kd>=0){
 800dc52:	edd7 7a00 	vldr	s15, [r7]
 800dc56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5e:	da00      	bge.n	800dc62 <setKd+0x1c>
		pid->Kd = kd;
		pid->Td = pid->Kd/pid->Kp;
		 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
		 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
	}
}
 800dc60:	e034      	b.n	800dccc <setKd+0x86>
		pid->Kd = kd;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	683a      	ldr	r2, [r7, #0]
 800dc66:	609a      	str	r2, [r3, #8]
		pid->Td = pid->Kd/pid->Kp;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	edd3 6a02 	vldr	s13, [r3, #8]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	ed93 7a00 	vldr	s14, [r3]
 800dc74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	edc3 7a08 	vstr	s15, [r3, #32]
		 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	edd3 6a08 	vldr	s13, [r3, #32]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	ed93 7a08 	vldr	s14, [r3, #32]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	ed93 6a07 	vldr	s12, [r3, #28]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	edd3 7a05 	vldr	s15, [r3, #20]
 800dc96:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dc9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	edd3 7a00 	vldr	s15, [r3]
 800dcae:	eeb1 7a67 	vneg.f32	s14, s15
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	edd3 7a07 	vldr	s15, [r3, #28]
 800dcb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800dcc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <setKi>:

void setKi(PID_Type *pid, float ki)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	ed87 0a00 	vstr	s0, [r7]
	if(ki>=0)
 800dce4:	edd7 7a00 	vldr	s15, [r7]
 800dce8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf0:	da00      	bge.n	800dcf4 <setKi+0x1c>
		pid->Ki = ki;
}
 800dcf2:	e002      	b.n	800dcfa <setKi+0x22>
		pid->Ki = ki;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	683a      	ldr	r2, [r7, #0]
 800dcf8:	605a      	str	r2, [r3, #4]
}
 800dcfa:	bf00      	nop
 800dcfc:	370c      	adds	r7, #12
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b088      	sub	sp, #32
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	ed87 0a05 	vstr	s0, [r7, #20]
 800dd10:	edc7 0a04 	vstr	s1, [r7, #16]
 800dd14:	ed87 1a03 	vstr	s2, [r7, #12]
 800dd18:	edc7 1a02 	vstr	s3, [r7, #8]
 800dd1c:	ed87 2a01 	vstr	s4, [r7, #4]
 800dd20:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800dd24:	2054      	movs	r0, #84	; 0x54
 800dd26:	f003 fe91 	bl	8011a4c <malloc>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <newPID+0x32>
		return NULL;
 800dd34:	2300      	movs	r3, #0
 800dd36:	e014      	b.n	800dd62 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800dd38:	2254      	movs	r2, #84	; 0x54
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	69f8      	ldr	r0, [r7, #28]
 800dd3e:	f003 fe98 	bl	8011a72 <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800dd42:	edd7 2a00 	vldr	s5, [r7]
 800dd46:	ed97 2a01 	vldr	s4, [r7, #4]
 800dd4a:	edd7 1a02 	vldr	s3, [r7, #8]
 800dd4e:	ed97 1a03 	vldr	s2, [r7, #12]
 800dd52:	edd7 0a04 	vldr	s1, [r7, #16]
 800dd56:	ed97 0a05 	vldr	s0, [r7, #20]
 800dd5a:	69f8      	ldr	r0, [r7, #28]
 800dd5c:	f7ff fe9c 	bl	800da98 <initPID>
	return pp;
 800dd60:	69fb      	ldr	r3, [r7, #28]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3720      	adds	r7, #32
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
	...

0800dd6c <usart1CommandHandler>:




void usart1CommandHandler()
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	af00      	add	r7, sp, #0
	serialPort1Callback((char *)Usart1Device.RxBuf);
 800dd70:	4802      	ldr	r0, [pc, #8]	; (800dd7c <usart1CommandHandler+0x10>)
 800dd72:	f000 fc79 	bl	800e668 <serialPort1Callback>

}
 800dd76:	bf00      	nop
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	2000cea2 	.word	0x2000cea2

0800dd80 <usart3CommandHandler>:
void usart3CommandHandler()
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
	int len=Usart3Device.countRxLineBuf+Usart3Device.countRxBuf;
 800dd86:	4a3b      	ldr	r2, [pc, #236]	; (800de74 <usart3CommandHandler+0xf4>)
 800dd88:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800dd8c:	4413      	add	r3, r2
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	4619      	mov	r1, r3
 800dd92:	4a38      	ldr	r2, [pc, #224]	; (800de74 <usart3CommandHandler+0xf4>)
 800dd94:	f241 7350 	movw	r3, #5968	; 0x1750
 800dd98:	4413      	add	r3, r2
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	440b      	add	r3, r1
 800dd9e:	607b      	str	r3, [r7, #4]

	//If overflow Clear
	if(len>UART_RX_BUF_SIZE)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800dda6:	dd12      	ble.n	800ddce <usart3CommandHandler+0x4e>
	{
		memset(Usart3Device.RxLineBuf,0,UART_RX_BUF_SIZE);
 800dda8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ddac:	2100      	movs	r1, #0
 800ddae:	4832      	ldr	r0, [pc, #200]	; (800de78 <usart3CommandHandler+0xf8>)
 800ddb0:	f003 fe5f 	bl	8011a72 <memset>
		Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800ddb4:	4a2f      	ldr	r2, [pc, #188]	; (800de74 <usart3CommandHandler+0xf4>)
 800ddb6:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ddba:	4413      	add	r3, r2
 800ddbc:	4a2e      	ldr	r2, [pc, #184]	; (800de78 <usart3CommandHandler+0xf8>)
 800ddbe:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=0;
 800ddc0:	4a2c      	ldr	r2, [pc, #176]	; (800de74 <usart3CommandHandler+0xf4>)
 800ddc2:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800ddc6:	4413      	add	r3, r2
 800ddc8:	2200      	movs	r2, #0
 800ddca:	801a      	strh	r2, [r3, #0]
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
			Usart3Device.countRxLineBuf=0;
		}
	}

}
 800ddcc:	e04e      	b.n	800de6c <usart3CommandHandler+0xec>
		memcpy(&(Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf]),Usart3Device.RxBuf,Usart3Device.countRxBuf);
 800ddce:	4a29      	ldr	r2, [pc, #164]	; (800de74 <usart3CommandHandler+0xf4>)
 800ddd0:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800ddd4:	4413      	add	r3, r2
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800ddde:	4413      	add	r3, r2
 800dde0:	4a24      	ldr	r2, [pc, #144]	; (800de74 <usart3CommandHandler+0xf4>)
 800dde2:	1898      	adds	r0, r3, r2
 800dde4:	4a23      	ldr	r2, [pc, #140]	; (800de74 <usart3CommandHandler+0xf4>)
 800dde6:	f241 7350 	movw	r3, #5968	; 0x1750
 800ddea:	4413      	add	r3, r2
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	4922      	ldr	r1, [pc, #136]	; (800de7c <usart3CommandHandler+0xfc>)
 800ddf2:	f003 fe33 	bl	8011a5c <memcpy>
		Usart3Device.pRxLineBuf+=Usart3Device.countRxBuf;
 800ddf6:	4a1f      	ldr	r2, [pc, #124]	; (800de74 <usart3CommandHandler+0xf4>)
 800ddf8:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ddfc:	4413      	add	r3, r2
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	491c      	ldr	r1, [pc, #112]	; (800de74 <usart3CommandHandler+0xf4>)
 800de02:	f241 7350 	movw	r3, #5968	; 0x1750
 800de06:	440b      	add	r3, r1
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	441a      	add	r2, r3
 800de0c:	4919      	ldr	r1, [pc, #100]	; (800de74 <usart3CommandHandler+0xf4>)
 800de0e:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800de12:	440b      	add	r3, r1
 800de14:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=len;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	b299      	uxth	r1, r3
 800de1a:	4a16      	ldr	r2, [pc, #88]	; (800de74 <usart3CommandHandler+0xf4>)
 800de1c:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800de20:	4413      	add	r3, r2
 800de22:	460a      	mov	r2, r1
 800de24:	801a      	strh	r2, [r3, #0]
		if (Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf-1]=='\n')
 800de26:	4a13      	ldr	r2, [pc, #76]	; (800de74 <usart3CommandHandler+0xf4>)
 800de28:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800de2c:	4413      	add	r3, r2
 800de2e:	881b      	ldrh	r3, [r3, #0]
 800de30:	3b01      	subs	r3, #1
 800de32:	4a10      	ldr	r2, [pc, #64]	; (800de74 <usart3CommandHandler+0xf4>)
 800de34:	441a      	add	r2, r3
 800de36:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800de3a:	4413      	add	r3, r2
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2b0a      	cmp	r3, #10
 800de40:	d114      	bne.n	800de6c <usart3CommandHandler+0xec>
			serialReceiveCallback((char *)Usart3Device.RxLineBuf);
 800de42:	480d      	ldr	r0, [pc, #52]	; (800de78 <usart3CommandHandler+0xf8>)
 800de44:	f000 fc02 	bl	800e64c <serialReceiveCallback>
			memset(Usart3Device.RxLineBuf,0,len);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	461a      	mov	r2, r3
 800de4c:	2100      	movs	r1, #0
 800de4e:	480a      	ldr	r0, [pc, #40]	; (800de78 <usart3CommandHandler+0xf8>)
 800de50:	f003 fe0f 	bl	8011a72 <memset>
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800de54:	4a07      	ldr	r2, [pc, #28]	; (800de74 <usart3CommandHandler+0xf4>)
 800de56:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800de5a:	4413      	add	r3, r2
 800de5c:	4a06      	ldr	r2, [pc, #24]	; (800de78 <usart3CommandHandler+0xf8>)
 800de5e:	601a      	str	r2, [r3, #0]
			Usart3Device.countRxLineBuf=0;
 800de60:	4a04      	ldr	r2, [pc, #16]	; (800de74 <usart3CommandHandler+0xf4>)
 800de62:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800de66:	4413      	add	r3, r2
 800de68:	2200      	movs	r2, #0
 800de6a:	801a      	strh	r2, [r3, #0]
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	2000d338 	.word	0x2000d338
 800de78:	2000e808 	.word	0x2000e808
 800de7c:	2000e60e 	.word	0x2000e60e

0800de80 <usart4CommandHandler>:

void usart4CommandHandler()
{
 800de80:	b580      	push	{r7, lr}
 800de82:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we want to make sure it has the right number of bytes
		serialPort4Callback((char *)Usart4Device.RxBuf);
 800de84:	4802      	ldr	r0, [pc, #8]	; (800de90 <usart4CommandHandler+0x10>)
 800de86:	f000 fbfd 	bl	800e684 <serialPort4Callback>
}
 800de8a:	bf00      	nop
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	2000b736 	.word	0x2000b736

0800de94 <UartCommandHandler>:
void UartCommandHandler(UART_DEVICE *UsartDevice)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
	if(UsartDevice == &Usart3Device)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4a08      	ldr	r2, [pc, #32]	; (800dec0 <UartCommandHandler+0x2c>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d102      	bne.n	800deaa <UartCommandHandler+0x16>
		usart3CommandHandler();
 800dea4:	f7ff ff6c 	bl	800dd80 <usart3CommandHandler>
	else if(UsartDevice == &Usart4Device)
		usart4CommandHandler();
}
 800dea8:	e005      	b.n	800deb6 <UartCommandHandler+0x22>
	else if(UsartDevice == &Usart4Device)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a05      	ldr	r2, [pc, #20]	; (800dec4 <UartCommandHandler+0x30>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d101      	bne.n	800deb6 <UartCommandHandler+0x22>
		usart4CommandHandler();
 800deb2:	f7ff ffe5 	bl	800de80 <usart4CommandHandler>
}
 800deb6:	bf00      	nop
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	2000d338 	.word	0x2000d338
 800dec4:	2000a460 	.word	0x2000a460

0800dec8 <my_UsartInit>:


/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	af00      	add	r7, sp, #0

	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800decc:	f44f 7218 	mov.w	r2, #608	; 0x260
 800ded0:	2100      	movs	r1, #0
 800ded2:	4849      	ldr	r0, [pc, #292]	; (800dff8 <my_UsartInit+0x130>)
 800ded4:	f003 fdcd 	bl	8011a72 <memset>
	printfBinStruct.header[0]=0x5a;
 800ded8:	4b47      	ldr	r3, [pc, #284]	; (800dff8 <my_UsartInit+0x130>)
 800deda:	225a      	movs	r2, #90	; 0x5a
 800dedc:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800dede:	4b46      	ldr	r3, [pc, #280]	; (800dff8 <my_UsartInit+0x130>)
 800dee0:	225a      	movs	r2, #90	; 0x5a
 800dee2:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800dee4:	4b44      	ldr	r3, [pc, #272]	; (800dff8 <my_UsartInit+0x130>)
 800dee6:	22a5      	movs	r2, #165	; 0xa5
 800dee8:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800deea:	4b43      	ldr	r3, [pc, #268]	; (800dff8 <my_UsartInit+0x130>)
 800deec:	22a5      	movs	r2, #165	; 0xa5
 800deee:	70da      	strb	r2, [r3, #3]

	printfBinStruct.pData=printfBinStruct.data;
 800def0:	4b41      	ldr	r3, [pc, #260]	; (800dff8 <my_UsartInit+0x130>)
 800def2:	4a42      	ldr	r2, [pc, #264]	; (800dffc <my_UsartInit+0x134>)
 800def4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c

	 memset(&Usart3Device,0,sizeof(Usart3Device));
 800def8:	f241 726c 	movw	r2, #5996	; 0x176c
 800defc:	2100      	movs	r1, #0
 800defe:	4840      	ldr	r0, [pc, #256]	; (800e000 <my_UsartInit+0x138>)
 800df00:	f003 fdb7 	bl	8011a72 <memset>
	 Usart3Device.huart = &huart3;
 800df04:	4b3e      	ldr	r3, [pc, #248]	; (800e000 <my_UsartInit+0x138>)
 800df06:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800df0a:	4a3e      	ldr	r2, [pc, #248]	; (800e004 <my_UsartInit+0x13c>)
 800df0c:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxBuf = Usart3Device.RxBuf;
 800df0e:	4a3c      	ldr	r2, [pc, #240]	; (800e000 <my_UsartInit+0x138>)
 800df10:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800df14:	4413      	add	r3, r2
 800df16:	4a3c      	ldr	r2, [pc, #240]	; (800e008 <my_UsartInit+0x140>)
 800df18:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800df1a:	4a39      	ldr	r2, [pc, #228]	; (800e000 <my_UsartInit+0x138>)
 800df1c:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800df20:	4413      	add	r3, r2
 800df22:	4a3a      	ldr	r2, [pc, #232]	; (800e00c <my_UsartInit+0x144>)
 800df24:	601a      	str	r2, [r3, #0]
	 Usart3Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart3Device.RxBuf;
 800df26:	4a36      	ldr	r2, [pc, #216]	; (800e000 <my_UsartInit+0x138>)
 800df28:	f241 7354 	movw	r3, #5972	; 0x1754
 800df2c:	4413      	add	r3, r2
 800df2e:	4a36      	ldr	r2, [pc, #216]	; (800e008 <my_UsartInit+0x140>)
 800df30:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart3Device.huart, Usart3Device.RxBuf, UART_RX_BUF_SIZE-1);
 800df32:	4b33      	ldr	r3, [pc, #204]	; (800e000 <my_UsartInit+0x138>)
 800df34:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800df3e:	4932      	ldr	r1, [pc, #200]	; (800e008 <my_UsartInit+0x140>)
 800df40:	4618      	mov	r0, r3
 800df42:	f7f8 f9a9 	bl	8006298 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart3Device.huart, UART_IT_IDLE);
 800df46:	4b2e      	ldr	r3, [pc, #184]	; (800e000 <my_UsartInit+0x138>)
 800df48:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	4b2b      	ldr	r3, [pc, #172]	; (800e000 <my_UsartInit+0x138>)
 800df54:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f042 0210 	orr.w	r2, r2, #16
 800df60:	601a      	str	r2, [r3, #0]

	// memset(&Usart4Device,0,sizeof(Usart4Device));
	 Usart4Device.huart = &huart4;
 800df62:	4b2b      	ldr	r3, [pc, #172]	; (800e010 <my_UsartInit+0x148>)
 800df64:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800df68:	4a2a      	ldr	r2, [pc, #168]	; (800e014 <my_UsartInit+0x14c>)
 800df6a:	601a      	str	r2, [r3, #0]
	 Usart4Device.pRxBuf = Usart4Device.RxBuf;
 800df6c:	4a28      	ldr	r2, [pc, #160]	; (800e010 <my_UsartInit+0x148>)
 800df6e:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800df72:	4413      	add	r3, r2
 800df74:	4a28      	ldr	r2, [pc, #160]	; (800e018 <my_UsartInit+0x150>)
 800df76:	601a      	str	r2, [r3, #0]
	 Usart4Device.pRxLineBuf=Usart4Device.RxLineBuf;
 800df78:	4a25      	ldr	r2, [pc, #148]	; (800e010 <my_UsartInit+0x148>)
 800df7a:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800df7e:	4413      	add	r3, r2
 800df80:	4a26      	ldr	r2, [pc, #152]	; (800e01c <my_UsartInit+0x154>)
 800df82:	601a      	str	r2, [r3, #0]
	 Usart4Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart4Device.RxBuf;
 800df84:	4a22      	ldr	r2, [pc, #136]	; (800e010 <my_UsartInit+0x148>)
 800df86:	f241 7354 	movw	r3, #5972	; 0x1754
 800df8a:	4413      	add	r3, r2
 800df8c:	4a22      	ldr	r2, [pc, #136]	; (800e018 <my_UsartInit+0x150>)
 800df8e:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart4Device.huart, Usart4Device.RxBuf, UART_RX_BUF_SIZE-1);
 800df90:	4b1f      	ldr	r3, [pc, #124]	; (800e010 <my_UsartInit+0x148>)
 800df92:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f240 12f3 	movw	r2, #499	; 0x1f3
 800df9c:	491e      	ldr	r1, [pc, #120]	; (800e018 <my_UsartInit+0x150>)
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7f8 f97a 	bl	8006298 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart4Device.huart, UART_IT_IDLE);
 800dfa4:	4b1a      	ldr	r3, [pc, #104]	; (800e010 <my_UsartInit+0x148>)
 800dfa6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	4b17      	ldr	r3, [pc, #92]	; (800e010 <my_UsartInit+0x148>)
 800dfb2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f042 0210 	orr.w	r2, r2, #16
 800dfbe:	601a      	str	r2, [r3, #0]

	 memset(&Usart1Device,0,sizeof(Usart1Device));
 800dfc0:	f241 726c 	movw	r2, #5996	; 0x176c
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	4816      	ldr	r0, [pc, #88]	; (800e020 <my_UsartInit+0x158>)
 800dfc8:	f003 fd53 	bl	8011a72 <memset>
	 Usart1Device.huart = &huart1;
 800dfcc:	4b14      	ldr	r3, [pc, #80]	; (800e020 <my_UsartInit+0x158>)
 800dfce:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dfd2:	4a14      	ldr	r2, [pc, #80]	; (800e024 <my_UsartInit+0x15c>)
 800dfd4:	601a      	str	r2, [r3, #0]
	 Usart1Device.pRxBuf = Usart1Device.RxBuf;
 800dfd6:	4a12      	ldr	r2, [pc, #72]	; (800e020 <my_UsartInit+0x158>)
 800dfd8:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800dfdc:	4413      	add	r3, r2
 800dfde:	4a12      	ldr	r2, [pc, #72]	; (800e028 <my_UsartInit+0x160>)
 800dfe0:	601a      	str	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800dfe2:	4b10      	ldr	r3, [pc, #64]	; (800e024 <my_UsartInit+0x15c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	4b0e      	ldr	r3, [pc, #56]	; (800e024 <my_UsartInit+0x15c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f042 0220 	orr.w	r2, r2, #32
 800dff0:	601a      	str	r2, [r3, #0]

}
 800dff2:	bf00      	nop
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	20000e7c 	.word	0x20000e7c
 800dffc:	20000e80 	.word	0x20000e80
 800e000:	2000d338 	.word	0x2000d338
 800e004:	20009dac 	.word	0x20009dac
 800e008:	2000e60e 	.word	0x2000e60e
 800e00c:	2000e808 	.word	0x2000e808
 800e010:	2000a460 	.word	0x2000a460
 800e014:	20009f0c 	.word	0x20009f0c
 800e018:	2000b736 	.word	0x2000b736
 800e01c:	2000b930 	.word	0x2000b930
 800e020:	2000bbcc 	.word	0x2000bbcc
 800e024:	20009e8c 	.word	0x20009e8c
 800e028:	2000cea2 	.word	0x2000cea2

0800e02c <HAL_UART_RxIdleCallback>:
  HAL_UART_IRQHandler(&huart3);
}
*/

void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	69db      	ldr	r3, [r3, #28]
 800e03a:	f003 0310 	and.w	r3, r3, #16
 800e03e:	2b10      	cmp	r3, #16
 800e040:	bf0c      	ite	eq
 800e042:	2301      	moveq	r3, #1
 800e044:	2300      	movne	r3, #0
 800e046:	b2db      	uxtb	r3, r3
 800e048:	60fb      	str	r3, [r7, #12]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f003 0310 	and.w	r3, r3, #16
 800e054:	2b00      	cmp	r3, #0
 800e056:	bf14      	ite	ne
 800e058:	2301      	movne	r3, #1
 800e05a:	2300      	moveq	r3, #0
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	60bb      	str	r3, [r7, #8]

	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d01b      	beq.n	800e09e <HAL_UART_RxIdleCallback+0x72>
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d018      	beq.n	800e09e <HAL_UART_RxIdleCallback+0x72>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2210      	movs	r2, #16
 800e072:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		if(huart == &huart3)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4a0d      	ldr	r2, [pc, #52]	; (800e0ac <HAL_UART_RxIdleCallback+0x80>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d106      	bne.n	800e08a <HAL_UART_RxIdleCallback+0x5e>
			Usart3Device.Received = 1;
 800e07c:	4a0c      	ldr	r2, [pc, #48]	; (800e0b0 <HAL_UART_RxIdleCallback+0x84>)
 800e07e:	f241 7352 	movw	r3, #5970	; 0x1752
 800e082:	4413      	add	r3, r2
 800e084:	2201      	movs	r2, #1
 800e086:	801a      	strh	r2, [r3, #0]

		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/

	}

}
 800e088:	e009      	b.n	800e09e <HAL_UART_RxIdleCallback+0x72>
		else if(huart == &huart4)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a09      	ldr	r2, [pc, #36]	; (800e0b4 <HAL_UART_RxIdleCallback+0x88>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d105      	bne.n	800e09e <HAL_UART_RxIdleCallback+0x72>
			Usart4Device.Received = 1;
 800e092:	4a09      	ldr	r2, [pc, #36]	; (800e0b8 <HAL_UART_RxIdleCallback+0x8c>)
 800e094:	f241 7352 	movw	r3, #5970	; 0x1752
 800e098:	4413      	add	r3, r2
 800e09a:	2201      	movs	r2, #1
 800e09c:	801a      	strh	r2, [r3, #0]
}
 800e09e:	bf00      	nop
 800e0a0:	3714      	adds	r7, #20
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	20009dac 	.word	0x20009dac
 800e0b0:	2000d338 	.word	0x2000d338
 800e0b4:	20009f0c 	.word	0x20009f0c
 800e0b8:	2000a460 	.word	0x2000a460

0800e0bc <_write>:

/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
	uint8_t *pDes=Usart3Device.TxBuf[Usart3Device.producerTxBufNum];
 800e0c8:	4a40      	ldr	r2, [pc, #256]	; (800e1cc <_write+0x110>)
 800e0ca:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	881b      	ldrh	r3, [r3, #0]
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e0d8:	fb03 f302 	mul.w	r3, r3, r2
 800e0dc:	4a3b      	ldr	r2, [pc, #236]	; (800e1cc <_write+0x110>)
 800e0de:	4413      	add	r3, r2
 800e0e0:	617b      	str	r3, [r7, #20]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	6978      	ldr	r0, [r7, #20]
 800e0ea:	f003 fcb7 	bl	8011a5c <memcpy>
	*(pDes+len)='\0';
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	697a      	ldr	r2, [r7, #20]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	701a      	strb	r2, [r3, #0]
	Usart3Device.countTxBuf[Usart3Device.producerTxBufNum] = len;
 800e0f8:	4a34      	ldr	r2, [pc, #208]	; (800e1cc <_write+0x110>)
 800e0fa:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800e0fe:	4413      	add	r3, r2
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	b291      	uxth	r1, r2
 800e106:	4a31      	ldr	r2, [pc, #196]	; (800e1cc <_write+0x110>)
 800e108:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	460a      	mov	r2, r1
 800e112:	80da      	strh	r2, [r3, #6]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	Usart3Device.bufferedTxNum++;
 800e114:	4a2d      	ldr	r2, [pc, #180]	; (800e1cc <_write+0x110>)
 800e116:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800e11a:	4413      	add	r3, r2
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	3301      	adds	r3, #1
 800e120:	b299      	uxth	r1, r3
 800e122:	4a2a      	ldr	r2, [pc, #168]	; (800e1cc <_write+0x110>)
 800e124:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800e128:	4413      	add	r3, r2
 800e12a:	460a      	mov	r2, r1
 800e12c:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(Usart3Device.bufferedTxNum == 1){
 800e12e:	4a27      	ldr	r2, [pc, #156]	; (800e1cc <_write+0x110>)
 800e130:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800e134:	4413      	add	r3, r2
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d11b      	bne.n	800e174 <_write+0xb8>
		HAL_UART_Transmit_DMA(Usart3Device.huart,pDes,Usart3Device.countTxBuf[Usart3Device.producerTxBufNum]);
 800e13c:	4b23      	ldr	r3, [pc, #140]	; (800e1cc <_write+0x110>)
 800e13e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e142:	6818      	ldr	r0, [r3, #0]
 800e144:	4a21      	ldr	r2, [pc, #132]	; (800e1cc <_write+0x110>)
 800e146:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800e14a:	4413      	add	r3, r2
 800e14c:	881b      	ldrh	r3, [r3, #0]
 800e14e:	4a1f      	ldr	r2, [pc, #124]	; (800e1cc <_write+0x110>)
 800e150:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800e154:	005b      	lsls	r3, r3, #1
 800e156:	4413      	add	r3, r2
 800e158:	88db      	ldrh	r3, [r3, #6]
 800e15a:	461a      	mov	r2, r3
 800e15c:	6979      	ldr	r1, [r7, #20]
 800e15e:	f7f8 f81f 	bl	80061a0 <HAL_UART_Transmit_DMA>
		Usart3Device.TxStart = micros();
 800e162:	f7fe f90b 	bl	800c37c <micros>
 800e166:	4601      	mov	r1, r0
 800e168:	4a18      	ldr	r2, [pc, #96]	; (800e1cc <_write+0x110>)
 800e16a:	f241 7358 	movw	r3, #5976	; 0x1758
 800e16e:	4413      	add	r3, r2
 800e170:	6019      	str	r1, [r3, #0]
 800e172:	e00a      	b.n	800e18a <_write+0xce>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the Usart3Devices would somehow suddenly lost the configurations
		Usart3Device.bufferedTxNum=Usart3Device.bufferedTxNum;
 800e174:	4a15      	ldr	r2, [pc, #84]	; (800e1cc <_write+0x110>)
 800e176:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800e17a:	4413      	add	r3, r2
 800e17c:	8819      	ldrh	r1, [r3, #0]
 800e17e:	4a13      	ldr	r2, [pc, #76]	; (800e1cc <_write+0x110>)
 800e180:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800e184:	4413      	add	r3, r2
 800e186:	460a      	mov	r2, r1
 800e188:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	Usart3Device.producerTxBufNum++;
 800e18a:	4a10      	ldr	r2, [pc, #64]	; (800e1cc <_write+0x110>)
 800e18c:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800e190:	4413      	add	r3, r2
 800e192:	881b      	ldrh	r3, [r3, #0]
 800e194:	3301      	adds	r3, #1
 800e196:	b299      	uxth	r1, r3
 800e198:	4a0c      	ldr	r2, [pc, #48]	; (800e1cc <_write+0x110>)
 800e19a:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800e19e:	4413      	add	r3, r2
 800e1a0:	460a      	mov	r2, r1
 800e1a2:	801a      	strh	r2, [r3, #0]
	Usart3Device.producerTxBufNum%=UART_TX_BUF_NUM;
 800e1a4:	4a09      	ldr	r2, [pc, #36]	; (800e1cc <_write+0x110>)
 800e1a6:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800e1aa:	4413      	add	r3, r2
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	f003 0307 	and.w	r3, r3, #7
 800e1b2:	b299      	uxth	r1, r3
 800e1b4:	4a05      	ldr	r2, [pc, #20]	; (800e1cc <_write+0x110>)
 800e1b6:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	460a      	mov	r2, r1
 800e1be:	801a      	strh	r2, [r3, #0]
//	while(Usart3Device.bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
 800e1c0:	687b      	ldr	r3, [r7, #4]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3718      	adds	r7, #24
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	2000d338 	.word	0x2000d338

0800e1d0 <HAL_UART_RxCpltCallback>:
void printfBinPush(int16_t dat)
{
*(printfBinStruct.pData)++=dat;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
	//printf("RxCplCall_Test\r\n");
}
 800e1d8:	bf00      	nop
 800e1da:	370c      	adds	r7, #12
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <HAL_UART_TxCpltCallback>:

/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
	 /*update information*/
	 Usart3Device.TxEnd = micros();
 800e1ec:	f7fe f8c6 	bl	800c37c <micros>
 800e1f0:	4601      	mov	r1, r0
 800e1f2:	4a3c      	ldr	r2, [pc, #240]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e1f4:	f241 735c 	movw	r3, #5980	; 0x175c
 800e1f8:	4413      	add	r3, r2
 800e1fa:	6019      	str	r1, [r3, #0]
	 Usart3Device.lastTxTime = Usart3Device.TxEnd - Usart3Device.TxStart;
 800e1fc:	4a39      	ldr	r2, [pc, #228]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e1fe:	f241 735c 	movw	r3, #5980	; 0x175c
 800e202:	4413      	add	r3, r2
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	4937      	ldr	r1, [pc, #220]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e208:	f241 7358 	movw	r3, #5976	; 0x1758
 800e20c:	440b      	add	r3, r1
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	1ad2      	subs	r2, r2, r3
 800e212:	4934      	ldr	r1, [pc, #208]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e214:	f241 7364 	movw	r3, #5988	; 0x1764
 800e218:	440b      	add	r3, r1
 800e21a:	601a      	str	r2, [r3, #0]
	 Usart3Device.lastTxCount = Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum];
 800e21c:	4b31      	ldr	r3, [pc, #196]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e21e:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800e222:	881b      	ldrh	r3, [r3, #0]
 800e224:	4a2f      	ldr	r2, [pc, #188]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e226:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	4413      	add	r3, r2
 800e22e:	88db      	ldrh	r3, [r3, #6]
 800e230:	4619      	mov	r1, r3
 800e232:	4a2c      	ldr	r2, [pc, #176]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e234:	f241 7368 	movw	r3, #5992	; 0x1768
 800e238:	4413      	add	r3, r2
 800e23a:	6019      	str	r1, [r3, #0]

	/*One consumption done. move consumer forward*/
	Usart3Device.consumerTxBufNum++;
 800e23c:	4b29      	ldr	r3, [pc, #164]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e23e:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800e242:	881b      	ldrh	r3, [r3, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	b29a      	uxth	r2, r3
 800e248:	4b26      	ldr	r3, [pc, #152]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e24a:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800e24e:	801a      	strh	r2, [r3, #0]
	Usart3Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 800e250:	4b24      	ldr	r3, [pc, #144]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e252:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	f003 0307 	and.w	r3, r3, #7
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	4b21      	ldr	r3, [pc, #132]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e260:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800e264:	801a      	strh	r2, [r3, #0]

	/*reduce one bufferedTxNum*/
	 Usart3Device.bufferedTxNum--;
 800e266:	4a1f      	ldr	r2, [pc, #124]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e268:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800e26c:	4413      	add	r3, r2
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	3b01      	subs	r3, #1
 800e272:	b299      	uxth	r1, r3
 800e274:	4a1b      	ldr	r2, [pc, #108]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e276:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800e27a:	4413      	add	r3, r2
 800e27c:	460a      	mov	r2, r1
 800e27e:	801a      	strh	r2, [r3, #0]

	/*If it is still positive, go on consume next*/
	if(Usart3Device.bufferedTxNum>0){
 800e280:	4a18      	ldr	r2, [pc, #96]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e282:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800e286:	4413      	add	r3, r2
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d025      	beq.n	800e2da <HAL_UART_TxCpltCallback+0xf6>
		Usart3Device.TxStart = micros();
 800e28e:	f7fe f875 	bl	800c37c <micros>
 800e292:	4601      	mov	r1, r0
 800e294:	4a13      	ldr	r2, [pc, #76]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e296:	f241 7358 	movw	r3, #5976	; 0x1758
 800e29a:	4413      	add	r3, r2
 800e29c:	6019      	str	r1, [r3, #0]
		uint8_t *px = &Usart3Device.TxBuf[Usart3Device.consumerTxBufNum][0];
 800e29e:	4b11      	ldr	r3, [pc, #68]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e2a0:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e2ac:	fb03 f302 	mul.w	r3, r3, r2
 800e2b0:	4a0c      	ldr	r2, [pc, #48]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e2b2:	4413      	add	r3, r2
 800e2b4:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit_DMA(Usart3Device.huart,px,Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum]);
 800e2b6:	4b0b      	ldr	r3, [pc, #44]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e2b8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e2bc:	6818      	ldr	r0, [r3, #0]
 800e2be:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e2c0:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800e2c4:	881b      	ldrh	r3, [r3, #0]
 800e2c6:	4a07      	ldr	r2, [pc, #28]	; (800e2e4 <HAL_UART_TxCpltCallback+0x100>)
 800e2c8:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800e2cc:	005b      	lsls	r3, r3, #1
 800e2ce:	4413      	add	r3, r2
 800e2d0:	88db      	ldrh	r3, [r3, #6]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	68f9      	ldr	r1, [r7, #12]
 800e2d6:	f7f7 ff63 	bl	80061a0 <HAL_UART_Transmit_DMA>
	}
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	2000d338 	.word	0x2000d338

0800e2e8 <myUsart1IRQ>:


void myUsart1IRQ()
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	af00      	add	r7, sp, #0

 	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800e2ec:	4b25      	ldr	r3, [pc, #148]	; (800e384 <myUsart1IRQ+0x9c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	69db      	ldr	r3, [r3, #28]
 800e2f2:	f003 0320 	and.w	r3, r3, #32
 800e2f6:	2b20      	cmp	r3, #32
 800e2f8:	d141      	bne.n	800e37e <myUsart1IRQ+0x96>
	{
		*(Usart1Device.pRxBuf)=(uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800e2fa:	4b22      	ldr	r3, [pc, #136]	; (800e384 <myUsart1IRQ+0x9c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e300:	4a21      	ldr	r2, [pc, #132]	; (800e388 <myUsart1IRQ+0xa0>)
 800e302:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800e306:	4413      	add	r3, r2
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	b2ca      	uxtb	r2, r1
 800e30c:	701a      	strb	r2, [r3, #0]
		if(*(Usart1Device.pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800e30e:	4a1e      	ldr	r2, [pc, #120]	; (800e388 <myUsart1IRQ+0xa0>)
 800e310:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800e314:	4413      	add	r3, r2
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	2b0a      	cmp	r3, #10
 800e31c:	d124      	bne.n	800e368 <myUsart1IRQ+0x80>
		{
			if((Usart1Device.pRxBuf)!=(Usart1Device.RxBuf)) // if '0x0a' is not in the beginning
 800e31e:	4a1a      	ldr	r2, [pc, #104]	; (800e388 <myUsart1IRQ+0xa0>)
 800e320:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800e324:	4413      	add	r3, r2
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a18      	ldr	r2, [pc, #96]	; (800e38c <myUsart1IRQ+0xa4>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d027      	beq.n	800e37e <myUsart1IRQ+0x96>
			{
				if(*(Usart1Device.pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800e32e:	4a16      	ldr	r2, [pc, #88]	; (800e388 <myUsart1IRQ+0xa0>)
 800e330:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800e334:	4413      	add	r3, r2
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	3b01      	subs	r3, #1
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	2b0d      	cmp	r3, #13
 800e33e:	d106      	bne.n	800e34e <myUsart1IRQ+0x66>
			    {
					Usart1Device.Received = 1;
 800e340:	4a11      	ldr	r2, [pc, #68]	; (800e388 <myUsart1IRQ+0xa0>)
 800e342:	f241 7352 	movw	r3, #5970	; 0x1752
 800e346:	4413      	add	r3, r2
 800e348:	2201      	movs	r2, #1
 800e34a:	801a      	strh	r2, [r3, #0]
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else Usart1Device.pRxBuf++;
	}

}
 800e34c:	e017      	b.n	800e37e <myUsart1IRQ+0x96>
					memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800e34e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e352:	2100      	movs	r1, #0
 800e354:	480d      	ldr	r0, [pc, #52]	; (800e38c <myUsart1IRQ+0xa4>)
 800e356:	f003 fb8c 	bl	8011a72 <memset>
					Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800e35a:	4a0b      	ldr	r2, [pc, #44]	; (800e388 <myUsart1IRQ+0xa0>)
 800e35c:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800e360:	4413      	add	r3, r2
 800e362:	4a0a      	ldr	r2, [pc, #40]	; (800e38c <myUsart1IRQ+0xa4>)
 800e364:	601a      	str	r2, [r3, #0]
}
 800e366:	e00a      	b.n	800e37e <myUsart1IRQ+0x96>
		else Usart1Device.pRxBuf++;
 800e368:	4a07      	ldr	r2, [pc, #28]	; (800e388 <myUsart1IRQ+0xa0>)
 800e36a:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800e36e:	4413      	add	r3, r2
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	4904      	ldr	r1, [pc, #16]	; (800e388 <myUsart1IRQ+0xa0>)
 800e376:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800e37a:	440b      	add	r3, r1
 800e37c:	601a      	str	r2, [r3, #0]
}
 800e37e:	bf00      	nop
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	20009e8c 	.word	0x20009e8c
 800e388:	2000bbcc 	.word	0x2000bbcc
 800e38c:	2000cea2 	.word	0x2000cea2

0800e390 <UsartDMAIdleHandler>:


void UsartDMAIdleHandler(UART_DEVICE *UsartDevice)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	f241 7352 	movw	r3, #5970	; 0x1752
 800e39e:	4413      	add	r3, r2
 800e3a0:	881b      	ldrh	r3, [r3, #0]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	f040 808f 	bne.w	800e4c6 <UsartDMAIdleHandler+0x136>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3b2:	2b22      	cmp	r3, #34	; 0x22
 800e3b4:	d165      	bne.n	800e482 <UsartDMAIdleHandler+0xf2>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c6:	2b40      	cmp	r3, #64	; 0x40
 800e3c8:	d15b      	bne.n	800e482 <UsartDMAIdleHandler+0xf2>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	689a      	ldr	r2, [r3, #8]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3e4:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d024      	beq.n	800e43e <UsartDMAIdleHandler+0xae>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	b29b      	uxth	r3, r3
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	b299      	uxth	r1, r3
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	f241 7350 	movw	r3, #5968	; 0x1750
 800e41a:	4413      	add	r3, r2
 800e41c:	460a      	mov	r2, r1
 800e41e:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2200      	movs	r2, #0
 800e42a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e438:	4618      	mov	r0, r3
 800e43a:	f7f3 fd85 	bl	8001f48 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e458:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	689a      	ldr	r2, [r3, #8]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f022 0201 	bic.w	r2, r2, #1
 800e474:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2220      	movs	r2, #32
 800e480:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands*/
			UartCommandHandler(UsartDevice);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff fd06 	bl	800de94 <UartCommandHandler>

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	f241 7352 	movw	r3, #5970	; 0x1752
 800e48e:	4413      	add	r3, r2
 800e490:	2200      	movs	r2, #0
 800e492:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	f241 63cc 	movw	r3, #5836	; 0x16cc
 800e49a:	4413      	add	r3, r2
 800e49c:	2264      	movs	r2, #100	; 0x64
 800e49e:	2100      	movs	r1, #0
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f003 fae6 	bl	8011a72 <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	f241 23d6 	movw	r3, #4822	; 0x12d6
 800e4ac:	4413      	add	r3, r2
 800e4ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f003 fadc 	bl	8011a72 <memset>
			UsartDevice->countRxBuf = 0;
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	f241 7350 	movw	r3, #5968	; 0x1750
 800e4c0:	4413      	add	r3, r2
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e4cc:	6818      	ldr	r0, [r3, #0]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	f241 23d6 	movw	r3, #4822	; 0x12d6
 800e4d4:	4413      	add	r3, r2
 800e4d6:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e4da:	4619      	mov	r1, r3
 800e4dc:	f7f7 fedc 	bl	8006298 <HAL_UART_Receive_DMA>
}
 800e4e0:	bf00      	nop
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <Usart_TerminalHandler>:

/*Put this function in a loop for polling*/
void Usart_TerminalHandler()
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	af00      	add	r7, sp, #0
	UsartDMAIdleHandler(&Usart3Device);
 800e4ec:	4811      	ldr	r0, [pc, #68]	; (800e534 <Usart_TerminalHandler+0x4c>)
 800e4ee:	f7ff ff4f 	bl	800e390 <UsartDMAIdleHandler>
	UsartDMAIdleHandler(&Usart4Device);
 800e4f2:	4811      	ldr	r0, [pc, #68]	; (800e538 <Usart_TerminalHandler+0x50>)
 800e4f4:	f7ff ff4c 	bl	800e390 <UsartDMAIdleHandler>

	/********************************Usart 1 Int reception****************************/
	if(Usart1Device.Received == 1)
 800e4f8:	4a10      	ldr	r2, [pc, #64]	; (800e53c <Usart_TerminalHandler+0x54>)
 800e4fa:	f241 7352 	movw	r3, #5970	; 0x1752
 800e4fe:	4413      	add	r3, r2
 800e500:	881b      	ldrh	r3, [r3, #0]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d113      	bne.n	800e52e <Usart_TerminalHandler+0x46>
	{
		usart1CommandHandler();
 800e506:	f7ff fc31 	bl	800dd6c <usart1CommandHandler>
		memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800e50a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e50e:	2100      	movs	r1, #0
 800e510:	480b      	ldr	r0, [pc, #44]	; (800e540 <Usart_TerminalHandler+0x58>)
 800e512:	f003 faae 	bl	8011a72 <memset>
		Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800e516:	4a09      	ldr	r2, [pc, #36]	; (800e53c <Usart_TerminalHandler+0x54>)
 800e518:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800e51c:	4413      	add	r3, r2
 800e51e:	4a08      	ldr	r2, [pc, #32]	; (800e540 <Usart_TerminalHandler+0x58>)
 800e520:	601a      	str	r2, [r3, #0]
		Usart1Device.Received = 0;
 800e522:	4a06      	ldr	r2, [pc, #24]	; (800e53c <Usart_TerminalHandler+0x54>)
 800e524:	f241 7352 	movw	r3, #5970	; 0x1752
 800e528:	4413      	add	r3, r2
 800e52a:	2200      	movs	r2, #0
 800e52c:	801a      	strh	r2, [r3, #0]

	}

}
 800e52e:	bf00      	nop
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	2000d338 	.word	0x2000d338
 800e538:	2000a460 	.word	0x2000a460
 800e53c:	2000bbcc 	.word	0x2000bbcc
 800e540:	2000cea2 	.word	0x2000cea2

0800e544 <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2200      	movs	r2, #0
 800e556:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f04f 0200 	mov.w	r2, #0
 800e564:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f04f 0200 	mov.w	r2, #0
 800e56c:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a0f      	ldr	r2, [pc, #60]	; (800e5b0 <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800e572:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f04f 0200 	mov.w	r2, #0
 800e57a:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f240 6266 	movw	r2, #1638	; 0x666
 800e582:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f643 1299 	movw	r2, #14745	; 0x3999
 800e58a:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a09      	ldr	r2, [pc, #36]	; (800e5b4 <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800e590:	61da      	str	r2, [r3, #28]
	CS_Port =SPI6_CS_GPIO_Port;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4a08      	ldr	r2, [pc, #32]	; (800e5b8 <_ZN18PRESSURE_SENSORSPIC1Ev+0x74>)
 800e596:	621a      	str	r2, [r3, #32]
	CS_Pin = SPI6_CS_Pin;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e59e:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	370c      	adds	r7, #12
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	48ca0080 	.word	0x48ca0080
 800e5b4:	2000963c 	.word	0x2000963c
 800e5b8:	40020c00 	.word	0x40020c00

0800e5bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e5bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e5f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e5c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e5c2:	e003      	b.n	800e5cc <LoopCopyDataInit>

0800e5c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e5c4:	4b0c      	ldr	r3, [pc, #48]	; (800e5f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e5c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e5c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e5ca:	3104      	adds	r1, #4

0800e5cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e5cc:	480b      	ldr	r0, [pc, #44]	; (800e5fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e5ce:	4b0c      	ldr	r3, [pc, #48]	; (800e600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e5d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e5d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e5d4:	d3f6      	bcc.n	800e5c4 <CopyDataInit>
  ldr  r2, =_sbss
 800e5d6:	4a0b      	ldr	r2, [pc, #44]	; (800e604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e5d8:	e002      	b.n	800e5e0 <LoopFillZerobss>

0800e5da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e5da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e5dc:	f842 3b04 	str.w	r3, [r2], #4

0800e5e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e5e0:	4b09      	ldr	r3, [pc, #36]	; (800e608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e5e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e5e4:	d3f9      	bcc.n	800e5da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e5e6:	f7fb f855 	bl	8009694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e5ea:	f003 fa0b 	bl	8011a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e5ee:	f7fa fa39 	bl	8008a64 <main>
  bx  lr    
 800e5f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e5f4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800e5f8:	08017390 	.word	0x08017390
  ldr  r0, =_sdata
 800e5fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e600:	20000608 	.word	0x20000608
  ldr  r2, =_sbss
 800e604:	20000608 	.word	0x20000608
  ldr  r3, = _ebss
 800e608:	2000eaa8 	.word	0x2000eaa8

0800e60c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e60c:	e7fe      	b.n	800e60c <ADC_IRQHandler>
	...

0800e610 <setup>:


SOFT_ARM_SEGMENT softArm;

void setup()
{
 800e610:	b580      	push	{r7, lr}
 800e612:	af00      	add	r7, sp, #0
	softArm.setup();
 800e614:	4802      	ldr	r0, [pc, #8]	; (800e620 <setup+0x10>)
 800e616:	f000 fac1 	bl	800eb9c <_ZN16SOFT_ARM_SEGMENT5setupEv>

}
 800e61a:	bf00      	nop
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	200010dc 	.word	0x200010dc

0800e624 <loop>:

void loop()
{
 800e624:	b580      	push	{r7, lr}
 800e626:	af00      	add	r7, sp, #0
	softArm.loop();
 800e628:	4802      	ldr	r0, [pc, #8]	; (800e634 <loop+0x10>)
 800e62a:	f000 faff 	bl	800ec2c <_ZN16SOFT_ARM_SEGMENT4loopEv>

}
 800e62e:	bf00      	nop
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	200010dc 	.word	0x200010dc

0800e638 <serialDisplay>:

void serialDisplay()
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	af00      	add	r7, sp, #0
	softArm.display();
 800e63c:	4802      	ldr	r0, [pc, #8]	; (800e648 <serialDisplay+0x10>)
 800e63e:	f000 fba3 	bl	800ed88 <_ZN16SOFT_ARM_SEGMENT7displayEv>
}
 800e642:	bf00      	nop
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	200010dc 	.word	0x200010dc

0800e64c <serialReceiveCallback>:

void serialReceiveCallback(char *pSerialReceiveBuffer)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
	softArm.receiveCommand(pSerialReceiveBuffer);
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	4803      	ldr	r0, [pc, #12]	; (800e664 <serialReceiveCallback+0x18>)
 800e658:	f000 fcc6 	bl	800efe8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc>
}
 800e65c:	bf00      	nop
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	200010dc 	.word	0x200010dc

0800e668 <serialPort1Callback>:

void serialPort1Callback(char *pWirelessReceiveBuffer)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
	softArm.receiveABLCommand(pWirelessReceiveBuffer);
 800e670:	6879      	ldr	r1, [r7, #4]
 800e672:	4803      	ldr	r0, [pc, #12]	; (800e680 <serialPort1Callback+0x18>)
 800e674:	f002 fd28 	bl	80110c8 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc>
}
 800e678:	bf00      	nop
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	200010dc 	.word	0x200010dc

0800e684 <serialPort4Callback>:
void clickButtonCallback(int Button_Interrupt_Pin)
{

}
void serialPort4Callback(char *pbuffer)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
	softArm.readIMU(pbuffer);
 800e68c:	6879      	ldr	r1, [r7, #4]
 800e68e:	4803      	ldr	r0, [pc, #12]	; (800e69c <serialPort4Callback+0x18>)
 800e690:	f002 fa04 	bl	8010a9c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc>
}
 800e694:	bf00      	nop
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	200010dc 	.word	0x200010dc

0800e6a0 <_Z41__static_initialization_and_destruction_0ii>:
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d108      	bne.n	800e6c2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d103      	bne.n	800e6c2 <_Z41__static_initialization_and_destruction_0ii+0x22>
SOFT_ARM_SEGMENT softArm;
 800e6ba:	2106      	movs	r1, #6
 800e6bc:	4803      	ldr	r0, [pc, #12]	; (800e6cc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800e6be:	f000 f853 	bl	800e768 <_ZN16SOFT_ARM_SEGMENTC1Ei>
}
 800e6c2:	bf00      	nop
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	200010dc 	.word	0x200010dc

0800e6d0 <_GLOBAL__sub_I_softArm>:
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e6d8:	2001      	movs	r0, #1
 800e6da:	f7ff ffe1 	bl	800e6a0 <_Z41__static_initialization_and_destruction_0ii>
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <_ZSt4acosf>:
  using ::acos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  acos(float __x)
  { return __builtin_acosf(__x); }
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	ed87 0a01 	vstr	s0, [r7, #4]
 800e6ea:	ed97 0a01 	vldr	s0, [r7, #4]
 800e6ee:	f002 fe41 	bl	8011374 <acosf>
 800e6f2:	eef0 7a40 	vmov.f32	s15, s0
 800e6f6:	eeb0 0a67 	vmov.f32	s0, s15
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	ed87 0a01 	vstr	s0, [r7, #4]
 800e70a:	edc7 0a00 	vstr	s1, [r7]
 800e70e:	edd7 0a00 	vldr	s1, [r7]
 800e712:	ed97 0a01 	vldr	s0, [r7, #4]
 800e716:	f002 fe81 	bl	801141c <atan2f>
 800e71a:	eef0 7a40 	vmov.f32	s15, s0
 800e71e:	eeb0 0a67 	vmov.f32	s0, s15
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	ed87 0a01 	vstr	s0, [r7, #4]
 800e732:	edd7 7a01 	vldr	s15, [r7, #4]
 800e736:	eef0 7ae7 	vabs.f32	s15, s15
 800e73a:	eeb0 0a67 	vmov.f32	s0, s15
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	ed87 0a01 	vstr	s0, [r7, #4]
 800e752:	edd7 7a01 	vldr	s15, [r7, #4]
 800e756:	fef8 7a67 	vrinta.f32	s15, s15
 800e75a:	eeb0 0a67 	vmov.f32	s0, s15
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
 800e768:	b590      	push	{r4, r7, lr}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	3384      	adds	r3, #132	; 0x84
 800e776:	4618      	mov	r0, r3
 800e778:	f7fe fb5a 	bl	800ce30 <_ZN8JOYSTICKC1Ev>
{
	static float initialBellowConfigurationAngle[BELLOWNUM]={0, M_PI/3, 2*M_PI/3, M_PI, -2*M_PI/3 ,-M_PI/3};
		basePlatform = new PNEUDRIVE(num);
 800e77c:	2084      	movs	r0, #132	; 0x84
 800e77e:	f002 fd1f 	bl	80111c0 <_Znwj>
 800e782:	4603      	mov	r3, r0
 800e784:	461c      	mov	r4, r3
 800e786:	6839      	ldr	r1, [r7, #0]
 800e788:	4620      	mov	r0, r4
 800e78a:	f7fd fcab 	bl	800c0e4 <_ZN9PNEUDRIVEC1Ei>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
	for(int i=0;i<BELLOWNUM;i++)
 800e794:	2300      	movs	r3, #0
 800e796:	60fb      	str	r3, [r7, #12]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b05      	cmp	r3, #5
 800e79c:	dc10      	bgt.n	800e7c0 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x58>
	{
		bellows[i]=basePlatform->chambers[i];
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e7a4:	689a      	ldr	r2, [r3, #8]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4413      	add	r3, r2
 800e7ac:	6819      	ldr	r1, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	3234      	adds	r2, #52	; 0x34
 800e7b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	60fb      	str	r3, [r7, #12]
 800e7be:	e7eb      	b.n	800e798 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x30>

	}
	length = 0.403;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4ac0      	ldr	r2, [pc, #768]	; (800eac4 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x35c>)
 800e7c4:	601a      	str	r2, [r3, #0]
	alpha = 0;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f04f 0200 	mov.w	r2, #0
 800e7cc:	605a      	str	r2, [r3, #4]
	beta = 0;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f04f 0200 	mov.w	r2, #0
 800e7d4:	609a      	str	r2, [r3, #8]
	phyc = getPhyc();
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f002 fb60 	bl	8010e9c <_ZN16SOFT_ARM_SEGMENT7getPhycEv>
 800e7dc:	eef0 7a40 	vmov.f32	s15, s0
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	edc3 7a03 	vstr	s15, [r3, #12]
	phys =getPhys();
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f002 fb70 	bl	8010ecc <_ZN16SOFT_ARM_SEGMENT7getPhysEv>
 800e7ec:	eef0 7a40 	vmov.f32	s15, s0
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	edc3 7a04 	vstr	s15, [r3, #16]

	lengthD=length;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	645a      	str	r2, [r3, #68]	; 0x44
	alphaD=alpha;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	685a      	ldr	r2, [r3, #4]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	649a      	str	r2, [r3, #72]	; 0x48
	betaD=beta;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	689a      	ldr	r2, [r3, #8]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	64da      	str	r2, [r3, #76]	; 0x4c
	phycD=getPhycD();
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f002 fb14 	bl	8010e3c <_ZN16SOFT_ARM_SEGMENT8getPhycDEv>
 800e814:	eef0 7a40 	vmov.f32	s15, s0
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	physD=getPhysD();
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f002 fb24 	bl	8010e6c <_ZN16SOFT_ARM_SEGMENT8getPhysDEv>
 800e824:	eef0 7a40 	vmov.f32	s15, s0
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	lengthCommand=length;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	671a      	str	r2, [r3, #112]	; 0x70
	alphaCommand=alpha;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	685a      	ldr	r2, [r3, #4]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	675a      	str	r2, [r3, #116]	; 0x74
	betaCommand=beta;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	689a      	ldr	r2, [r3, #8]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	679a      	str	r2, [r3, #120]	; 0x78

	angle = 0;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f04f 0200 	mov.w	r2, #0
 800e84c:	67da      	str	r2, [r3, #124]	; 0x7c
	bending =0;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f04f 0200 	mov.w	r2, #0
 800e854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	pressureBase = 0;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f04f 0200 	mov.w	r2, #0
 800e85e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	openingBase = 0;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f04f 0200 	mov.w	r2, #0
 800e868:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	frequency = 40;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a96      	ldr	r2, [pc, #600]	; (800eac8 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x360>)
 800e870:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	velocity = 1;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e87a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	lengthAnalogPort = 9;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2209      	movs	r2, #9
 800e882:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254


	startControl=0;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
	controlTime=0;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	valveOpen=0;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	wp=0;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	startDemo=0;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	interestedBellow = 0;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	Rmin = 8000;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e8bc:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	Rmax = 30000;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f247 5230 	movw	r2, #30000	; 0x7530
 800e8c6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	rawAngle=0,
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f04f 0200 	mov.w	r2, #0
 800e8d0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	rawAmplitude=0,
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f04f 0200 	mov.w	r2, #0
 800e8da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	rawAmplitudeMax=0,
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f04f 0200 	mov.w	r2, #0
 800e8e4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	buttonCheckTime[0]=100;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2264      	movs	r2, #100	; 0x64
 800e8ec:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	buttonCheckTime[1]=100;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2264      	movs	r2, #100	; 0x64
 800e8f4:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	buttonCheckTime[2]=100;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2264      	movs	r2, #100	; 0x64
 800e8fc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
	angleCommand=0;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f04f 0200 	mov.w	r2, #0
 800e906:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	amplitudeCommand=0;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f04f 0200 	mov.w	r2, #0
 800e910:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	commandSource=pressureControl;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2202      	movs	r2, #2
 800e918:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	frequencyDirty=0;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c

 	k0=400;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a69      	ldr	r2, [pc, #420]	; (800eacc <_ZN16SOFT_ARM_SEGMENTC1Ei+0x364>)
 800e928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 	length0=0.412;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a68      	ldr	r2, [pc, #416]	; (800ead0 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x368>)
 800e930:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 	crossA=2.3e-3;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a67      	ldr	r2, [pc, #412]	; (800ead4 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x36c>)
 800e938:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 	radR=0.09;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4a66      	ldr	r2, [pc, #408]	; (800ead8 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x370>)
 800e940:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 	radr=0.03;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a65      	ldr	r2, [pc, #404]	; (800eadc <_ZN16SOFT_ARM_SEGMENTC1Ei+0x374>)
 800e948:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 	C1=BELLOWNUM*k0*radR/crossA/2;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800e952:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800e956:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	edd3 7aa8 	vldr	s15, [r3, #672]	; 0x2a0
 800e960:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800e96a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e96e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	edc3 7aaa 	vstr	s15, [r3, #680]	; 0x2a8

	psource_lowerlimit=50000;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4a58      	ldr	r2, [pc, #352]	; (800eae0 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x378>)
 800e980:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	psource_upperlimit=psink_upperlimit+30000;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800e98a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800eae4 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x37c>
 800e98e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	psink_upperlimit=-20000;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	4a53      	ldr	r2, [pc, #332]	; (800eae8 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x380>)
 800e99c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	psink_lowerlimit=psink_upperlimit-10000;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800e9a6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800eaec <_ZN16SOFT_ARM_SEGMENTC1Ei+0x384>
 800e9aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
	memcpy(OpeningLimArray,preOpeningLimArray,sizeof(preOpeningLimArray));
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e9ba:	2260      	movs	r2, #96	; 0x60
 800e9bc:	494c      	ldr	r1, [pc, #304]	; (800eaf0 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x388>)
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f003 f84c 	bl	8011a5c <memcpy>

	/*Init Bellows configuration*/
	for(int i=0;i<BELLOWNUM;i++){
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60bb      	str	r3, [r7, #8]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	2b05      	cmp	r3, #5
 800e9cc:	f300 80dd 	bgt.w	800eb8a <_ZN16SOFT_ARM_SEGMENTC1Ei+0x422>

		bellowConfigurationRadius = 0.5;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800e9d6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		bellowConfigurationAngle[i] =  initialBellowConfigurationAngle[i];
 800e9da:	4a46      	ldr	r2, [pc, #280]	; (800eaf4 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x38c>)
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4413      	add	r3, r2
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	6879      	ldr	r1, [r7, #4]
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	336e      	adds	r3, #110	; 0x6e
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	440b      	add	r3, r1
 800e9ee:	601a      	str	r2, [r3, #0]
		bellowConfigurationAngleCos[i]=arm_cos_f32(bellowConfigurationAngle[i]);
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	336e      	adds	r3, #110	; 0x6e
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	edd3 7a00 	vldr	s15, [r3]
 800e9fe:	eeb0 0a67 	vmov.f32	s0, s15
 800ea02:	f7f1 fe77 	bl	80006f4 <arm_cos_f32>
 800ea06:	eef0 7a40 	vmov.f32	s15, s0
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	3380      	adds	r3, #128	; 0x80
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4413      	add	r3, r2
 800ea14:	3304      	adds	r3, #4
 800ea16:	edc3 7a00 	vstr	s15, [r3]
		bellowConfigurationAngleSin[i]= arm_sin_f32(bellowConfigurationAngle[i]);
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	336e      	adds	r3, #110	; 0x6e
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	4413      	add	r3, r2
 800ea24:	edd3 7a00 	vldr	s15, [r3]
 800ea28:	eeb0 0a67 	vmov.f32	s0, s15
 800ea2c:	f7f1 fede 	bl	80007ec <arm_sin_f32>
 800ea30:	eef0 7a40 	vmov.f32	s15, s0
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	3386      	adds	r3, #134	; 0x86
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	4413      	add	r3, r2
 800ea3e:	3304      	adds	r3, #4
 800ea40:	edc3 7a00 	vstr	s15, [r3]

		bellowConfigurationPositionX[i] = bellowConfigurationRadius * bellowConfigurationAngleCos[i];
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	3380      	adds	r3, #128	; 0x80
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	4413      	add	r3, r2
 800ea54:	3304      	adds	r3, #4
 800ea56:	edd3 7a00 	vldr	s15, [r3]
 800ea5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	3374      	adds	r3, #116	; 0x74
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	4413      	add	r3, r2
 800ea68:	3304      	adds	r3, #4
 800ea6a:	edc3 7a00 	vstr	s15, [r3]
		bellowConfigurationPositionY[i] = bellowConfigurationRadius * bellowConfigurationAngleSin[i];
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	3386      	adds	r3, #134	; 0x86
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4413      	add	r3, r2
 800ea7e:	3304      	adds	r3, #4
 800ea80:	edd3 7a00 	vldr	s15, [r3]
 800ea84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	337a      	adds	r3, #122	; 0x7a
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	3304      	adds	r3, #4
 800ea94:	edc3 7a00 	vstr	s15, [r3]

		basePlatform->chambers[i]->openingMinN=OpeningLimArray[i][0];
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ea9e:	689a      	ldr	r2, [r3, #8]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	4413      	add	r3, r2
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	6879      	ldr	r1, [r7, #4]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	3214      	adds	r2, #20
 800eaae:	0112      	lsls	r2, r2, #4
 800eab0:	440a      	add	r2, r1
 800eab2:	6812      	ldr	r2, [r2, #0]
 800eab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		basePlatform->chambers[i]->openingMaxN=OpeningLimArray[i][1];
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800eabe:	689a      	ldr	r2, [r3, #8]
 800eac0:	e01a      	b.n	800eaf8 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x390>
 800eac2:	bf00      	nop
 800eac4:	3ece5604 	.word	0x3ece5604
 800eac8:	42200000 	.word	0x42200000
 800eacc:	43c80000 	.word	0x43c80000
 800ead0:	3ed2f1aa 	.word	0x3ed2f1aa
 800ead4:	3b16bb99 	.word	0x3b16bb99
 800ead8:	3db851ec 	.word	0x3db851ec
 800eadc:	3cf5c28f 	.word	0x3cf5c28f
 800eae0:	47435000 	.word	0x47435000
 800eae4:	46ea6000 	.word	0x46ea6000
 800eae8:	c69c4000 	.word	0xc69c4000
 800eaec:	461c4000 	.word	0x461c4000
 800eaf0:	200003bc 	.word	0x200003bc
 800eaf4:	2000041c 	.word	0x2000041c
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4413      	add	r3, r2
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	6879      	ldr	r1, [r7, #4]
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	0112      	lsls	r2, r2, #4
 800eb06:	440a      	add	r2, r1
 800eb08:	f502 72a2 	add.w	r2, r2, #324	; 0x144
 800eb0c:	6812      	ldr	r2, [r2, #0]
 800eb0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		basePlatform->chambers[i]->openingMinP=OpeningLimArray[i][2];
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800eb18:	689a      	ldr	r2, [r3, #8]
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	4413      	add	r3, r2
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	6879      	ldr	r1, [r7, #4]
 800eb24:	68ba      	ldr	r2, [r7, #8]
 800eb26:	0112      	lsls	r2, r2, #4
 800eb28:	440a      	add	r2, r1
 800eb2a:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 800eb2e:	6812      	ldr	r2, [r2, #0]
 800eb30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		basePlatform->chambers[i]->openingMaxP=OpeningLimArray[i][3];
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800eb3a:	689a      	ldr	r2, [r3, #8]
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	6879      	ldr	r1, [r7, #4]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	0112      	lsls	r2, r2, #4
 800eb4a:	440a      	add	r2, r1
 800eb4c:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
 800eb50:	6812      	ldr	r2, [r2, #0]
 800eb52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

		pressureCommandMin[i]=-100000;
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	3344      	adds	r3, #68	; 0x44
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	4a0c      	ldr	r2, [pc, #48]	; (800eb94 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x42c>)
 800eb62:	601a      	str	r2, [r3, #0]
		pressureCommandMax[i]=200000;
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	334a      	adds	r3, #74	; 0x4a
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	4413      	add	r3, r2
 800eb6e:	4a0a      	ldr	r2, [pc, #40]	; (800eb98 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x430>)
 800eb70:	601a      	str	r2, [r3, #0]
		pressureD[i]=0;
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	3316      	adds	r3, #22
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	4413      	add	r3, r2
 800eb7c:	f04f 0200 	mov.w	r2, #0
 800eb80:	601a      	str	r2, [r3, #0]
	for(int i=0;i<BELLOWNUM;i++){
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	3301      	adds	r3, #1
 800eb86:	60bb      	str	r3, [r7, #8]
 800eb88:	e71e      	b.n	800e9c8 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x260>

	}
}
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd90      	pop	{r4, r7, pc}
 800eb94:	c7c35000 	.word	0xc7c35000
 800eb98:	48435000 	.word	0x48435000

0800eb9c <_ZN16SOFT_ARM_SEGMENT5setupEv>:


void SOFT_ARM_SEGMENT::setup()
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
	for(int i=0;i<BELLOWNUM;i++)
 800eba4:	2300      	movs	r3, #0
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2b05      	cmp	r3, #5
 800ebac:	dc14      	bgt.n	800ebd8 <_ZN16SOFT_ARM_SEGMENT5setupEv+0x3c>
	{
		//bellows[i]->attach(2*i,2*i+1,i);\\onboard resources
		bellows[i]->attach(i*2+BUILTIN_PWM_NUM+PWMBOARDSPI_CHANNELNUM,i*2+1+BUILTIN_PWM_NUM+PWMBOARDSPI_CHANNELNUM,31-i+BUILTIN_ANA_IN_NUM);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	3234      	adds	r2, #52	; 0x34
 800ebb4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	330d      	adds	r3, #13
 800ebbc:	0059      	lsls	r1, r3, #1
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	f103 021b 	add.w	r2, r3, #27
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800ebcc:	f7fc fb9e 	bl	800b30c <_ZN7CHAMBER6attachEiii>
	for(int i=0;i<BELLOWNUM;i++)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	60fb      	str	r3, [r7, #12]
 800ebd6:	e7e7      	b.n	800eba8 <_ZN16SOFT_ARM_SEGMENT5setupEv+0xc>
//		bellows[i]->setSensorRange_GaugePa(0.5,4.5,-Patm,60*PaPerPSI); //(-Patm ~ 60PSI)

	}
	lengthAnalogPort = BUILTIN_ANA_IN_NUM;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2210      	movs	r2, #16
 800ebdc:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
//	basePlatform->pSource.attach(0,31-11+BUILTIN_ANA_IN_NUM);
	basePlatform->pSink.attach(1,31-12+BUILTIN_ANA_IN_NUM);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ebe6:	3344      	adds	r3, #68	; 0x44
 800ebe8:	2223      	movs	r2, #35	; 0x23
 800ebea:	2101      	movs	r1, #1
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7fc fefb 	bl	800b9e8 <_ZN15PRESSURE_SOURCE6attachEii>

//	basePlatform->pSource.pressureSensor.setSensorRange_GaugePa(0.5,4.5,-Patm,60*PaPerPSI);
//	basePlatform->pSink.pressureSensor.setSensorRange_GaugePa(0.5,4.5,-Patm,60*PaPerPSI);


	basePlatform->setupPlatform();
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fd fb05 	bl	800c208 <_ZN9PNEUDRIVE13setupPlatformEv>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800ebfe:	2300      	movs	r3, #0
 800ec00:	60bb      	str	r3, [r7, #8]
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	2b19      	cmp	r3, #25
 800ec06:	dc0a      	bgt.n	800ec1e <_ZN16SOFT_ARM_SEGMENT5setupEv+0x82>
			PWMWriteDuty(i,0.4);
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800ec28 <_ZN16SOFT_ARM_SEGMENT5setupEv+0x8c>
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fd fb5a 	bl	800c2ca <PWMWriteDuty>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	60bb      	str	r3, [r7, #8]
 800ec1c:	e7f1      	b.n	800ec02 <_ZN16SOFT_ARM_SEGMENT5setupEv+0x66>
}
 800ec1e:	bf00      	nop
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	3ecccccd 	.word	0x3ecccccd

0800ec2c <_ZN16SOFT_ARM_SEGMENT4loopEv>:

void SOFT_ARM_SEGMENT::loop()
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
	readLength();
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f001 ff09 	bl	8010a4c <_ZN16SOFT_ARM_SEGMENT10readLengthEv>
	quatern2AB();
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f002 f960 	bl	8010f00 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv>
	readPressureAll();
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f001 f960 	bl	800ff06 <_ZN16SOFT_ARM_SEGMENT15readPressureAllEv>
	if(frequencyDirty == 1)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d10e      	bne.n	800ec6e <_ZN16SOFT_ARM_SEGMENT4loopEv+0x42>
		{
			basePlatform->writeFrequency(frequency);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800ec5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ec60:	4610      	mov	r0, r2
 800ec62:	f7fd fa99 	bl	800c198 <_ZN9PNEUDRIVE14writeFrequencyEf>
			frequencyDirty=0;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
		}
	if(valveOpen == 1)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d105      	bne.n	800ec84 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x58>
	{
		writeOpeningAll(-0.95);
 800ec78:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ed7c <_ZN16SOFT_ARM_SEGMENT4loopEv+0x150>
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f001 f957 	bl	800ff30 <_ZN16SOFT_ARM_SEGMENT15writeOpeningAllEf>
 800ec82:	e010      	b.n	800eca6 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x7a>
	}
	else if(valveOpen == 2)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800ec8a:	2b02      	cmp	r3, #2
 800ec8c:	d10b      	bne.n	800eca6 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x7a>
	{
		writeOpeningAll(0);
 800ec8e:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800ed80 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x154>
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f001 f94c 	bl	800ff30 <_ZN16SOFT_ARM_SEGMENT15writeOpeningAllEf>
		valveOpen++;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800ec9e:	1c5a      	adds	r2, r3, #1
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	}
	if(startControl)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d060      	beq.n	800ed72 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x146>
	{
	//	basePlatform->pSource.maintainPressure(psource_lowerlimit,psource_upperlimit);
		basePlatform->pSink.maintainPressure(psink_lowerlimit,psink_upperlimit);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ecb6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 800ecc6:	eef0 0a47 	vmov.f32	s1, s14
 800ecca:	eeb0 0a67 	vmov.f32	s0, s15
 800ecce:	4610      	mov	r0, r2
 800ecd0:	f7fc feba 	bl	800ba48 <_ZN15PRESSURE_SOURCE16maintainPressureEff>

		if(commandSource==joyStickControl)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d104      	bne.n	800ece8 <_ZN16SOFT_ARM_SEGMENT4loopEv+0xbc>
		{
			joyStickController(0);
 800ecde:	2100      	movs	r1, #0
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f001 f9c1 	bl	8010068 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi>
		}

//		switchValveStatus();
	}
	//storeLast500ms(controlCLK);
}
 800ece6:	e044      	b.n	800ed72 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x146>
		else if(commandSource==mannualControl)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d11f      	bne.n	800ed32 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x106>
			for(int i=0;i<BELLOWNUM;i++)
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	60fb      	str	r3, [r7, #12]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2b05      	cmp	r3, #5
 800ecfa:	dc3a      	bgt.n	800ed72 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x146>
				basePlatform->chambers[i]->writeOpening(basePlatform->chambers[i]->opening);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ed02:	689a      	ldr	r2, [r3, #8]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	4413      	add	r3, r2
 800ed0a:	6819      	ldr	r1, [r3, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ed12:	689a      	ldr	r2, [r3, #8]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	4413      	add	r3, r2
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800ed20:	eeb0 0a67 	vmov.f32	s0, s15
 800ed24:	4608      	mov	r0, r1
 800ed26:	f7fc fc29 	bl	800b57c <_ZN7CHAMBER12writeOpeningEf>
			for(int i=0;i<BELLOWNUM;i++)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	60fb      	str	r3, [r7, #12]
 800ed30:	e7e1      	b.n	800ecf6 <_ZN16SOFT_ARM_SEGMENT4loopEv+0xca>
		else if(commandSource==pressureControl)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800ed38:	2b02      	cmp	r3, #2
 800ed3a:	d103      	bne.n	800ed44 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x118>
			controlPressureAll();
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f001 f917 	bl	800ff70 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv>
}
 800ed42:	e016      	b.n	800ed72 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x146>
		else if(commandSource==positionControl)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	d011      	beq.n	800ed72 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x146>
		else if(commandSource==visionControl)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800ed54:	2b04      	cmp	r3, #4
 800ed56:	d10c      	bne.n	800ed72 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x146>
			lowPassABLCommand();
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 ffeb 	bl	800fd34 <_ZN16SOFT_ARM_SEGMENT17lowPassABLCommandEv>
			ABLD2PD();
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f001 ff2a 	bl	8010bb8 <_ZN16SOFT_ARM_SEGMENT7ABLD2PDEv>
			if(vvv==2)
 800ed64:	4b07      	ldr	r3, [pc, #28]	; (800ed84 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x158>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d102      	bne.n	800ed72 <_ZN16SOFT_ARM_SEGMENT4loopEv+0x146>
				controlPressureAll();
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f001 f8ff 	bl	800ff70 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv>
}
 800ed72:	bf00      	nop
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	bf733333 	.word	0xbf733333
 800ed80:	00000000 	.word	0x00000000
 800ed84:	200013a4 	.word	0x200013a4

0800ed88 <_ZN16SOFT_ARM_SEGMENT7displayEv>:

void SOFT_ARM_SEGMENT::display()
{
 800ed88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed8a:	b0ad      	sub	sp, #180	; 0xb4
 800ed8c:	af1e      	add	r7, sp, #120	; 0x78
 800ed8e:	61f8      	str	r0, [r7, #28]
	static int16_t pCommandToSend[BELLOWNUM];
	static int16_t pToSend[BELLOWNUM];
	for(int i=0;i<BELLOWNUM;i++)
 800ed90:	2300      	movs	r3, #0
 800ed92:	637b      	str	r3, [r7, #52]	; 0x34
 800ed94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed96:	2b05      	cmp	r3, #5
 800ed98:	dc38      	bgt.n	800ee0c <_ZN16SOFT_ARM_SEGMENT7displayEv+0x84>
	{
		//pCommandToSend[i]=round(bellows[i]->pressureFil/1000);
		pCommandToSend[i]=round(pressureD[i]/1000);
 800ed9a:	69fa      	ldr	r2, [r7, #28]
 800ed9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9e:	3316      	adds	r3, #22
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	4413      	add	r3, r2
 800eda4:	edd3 7a00 	vldr	s15, [r3]
 800eda8:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800efd8 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x250>
 800edac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800edb0:	eeb0 0a66 	vmov.f32	s0, s13
 800edb4:	f7ff fcc8 	bl	800e748 <_ZSt5roundf>
 800edb8:	eef0 7a40 	vmov.f32	s15, s0
 800edbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edc0:	ee17 3a90 	vmov	r3, s15
 800edc4:	b219      	sxth	r1, r3
 800edc6:	4a85      	ldr	r2, [pc, #532]	; (800efdc <_ZN16SOFT_ARM_SEGMENT7displayEv+0x254>)
 800edc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pToSend[i]=round(pressure[i]/1000);
 800edce:	69fa      	ldr	r2, [r7, #28]
 800edd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edd2:	3304      	adds	r3, #4
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	4413      	add	r3, r2
 800edd8:	3304      	adds	r3, #4
 800edda:	edd3 7a00 	vldr	s15, [r3]
 800edde:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800efd8 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x250>
 800ede2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ede6:	eeb0 0a66 	vmov.f32	s0, s13
 800edea:	f7ff fcad 	bl	800e748 <_ZSt5roundf>
 800edee:	eef0 7a40 	vmov.f32	s15, s0
 800edf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edf6:	ee17 3a90 	vmov	r3, s15
 800edfa:	b219      	sxth	r1, r3
 800edfc:	4a78      	ldr	r2, [pc, #480]	; (800efe0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x258>)
 800edfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<BELLOWNUM;i++)
 800ee04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee06:	3301      	adds	r3, #1
 800ee08:	637b      	str	r3, [r7, #52]	; 0x34
 800ee0a:	e7c3      	b.n	800ed94 <_ZN16SOFT_ARM_SEGMENT7displayEv+0xc>
	}
	int free=(int)frequency;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800ee12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee16:	ee17 3a90 	vmov	r3, s15
 800ee1a:	633b      	str	r3, [r7, #48]	; 0x30
	int lengthh=(int)(length*1000);
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	edd3 7a00 	vldr	s15, [r3]
 800ee22:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800efd8 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x250>
 800ee26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee2e:	ee17 3a90 	vmov	r3, s15
 800ee32:	62fb      	str	r3, [r7, #44]	; 0x2c
	int psourcee=(int)(basePlatform->pSource.readPressure()/1000);
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ee3a:	330c      	adds	r3, #12
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fc fe63 	bl	800bb08 <_ZN15PRESSURE_SOURCE12readPressureEv>
 800ee42:	eef0 6a40 	vmov.f32	s13, s0
 800ee46:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800efd8 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x250>
 800ee4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee52:	ee17 3a90 	vmov	r3, s15
 800ee56:	62bb      	str	r3, [r7, #40]	; 0x28
	int psinkk=(int)(basePlatform->pSink.readPressure()/1000);
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ee5e:	3344      	adds	r3, #68	; 0x44
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fc fe51 	bl	800bb08 <_ZN15PRESSURE_SOURCE12readPressureEv>
 800ee66:	eef0 6a40 	vmov.f32	s13, s0
 800ee6a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800efd8 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x250>
 800ee6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee76:	ee17 3a90 	vmov	r3, s15
 800ee7a:	627b      	str	r3, [r7, #36]	; 0x24
	P2ABL();
 800ee7c:	69f8      	ldr	r0, [r7, #28]
 800ee7e:	f001 ff3f 	bl	8010d00 <_ZN16SOFT_ARM_SEGMENT5P2ABLEv>
/*	printf("%4.2f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f\r\n",
		   HAL_GetTick()/1000.0f,
		   outputem[0],outputem[1],outputem[2],outputem[3],outputem[4],outputem[5],outputem[6],outputem[7],
		   outputem[8],outputem[9],outputem[10],outputem[11],outputem[12],outputem[13],outputem[14],outputem[15]);*/
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
			  HAL_GetTick()/1000.0f,
 800ee82:	f7f2 fa43 	bl	800130c <HAL_GetTick>
 800ee86:	ee07 0a90 	vmov	s15, r0
 800ee8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ee8e:	eddf 6a52 	vldr	s13, [pc, #328]	; 800efd8 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x250>
 800ee92:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800ee96:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
			pCommandToSend[0],
 800ee9a:	4b50      	ldr	r3, [pc, #320]	; (800efdc <_ZN16SOFT_ARM_SEGMENT7displayEv+0x254>)
 800ee9c:	f9b3 3000 	ldrsh.w	r3, [r3]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eea0:	461a      	mov	r2, r3
			pToSend[0],
 800eea2:	4b4f      	ldr	r3, [pc, #316]	; (800efe0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x258>)
 800eea4:	f9b3 3000 	ldrsh.w	r3, [r3]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eea8:	4619      	mov	r1, r3
			pCommandToSend[1],
 800eeaa:	4b4c      	ldr	r3, [pc, #304]	; (800efdc <_ZN16SOFT_ARM_SEGMENT7displayEv+0x254>)
 800eeac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eeb0:	4618      	mov	r0, r3
			pToSend[1],
 800eeb2:	4b4b      	ldr	r3, [pc, #300]	; (800efe0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x258>)
 800eeb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eeb8:	461c      	mov	r4, r3
			pCommandToSend[2],
 800eeba:	4b48      	ldr	r3, [pc, #288]	; (800efdc <_ZN16SOFT_ARM_SEGMENT7displayEv+0x254>)
 800eebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eec0:	461d      	mov	r5, r3
			pToSend[2],
 800eec2:	4b47      	ldr	r3, [pc, #284]	; (800efe0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x258>)
 800eec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eec8:	461e      	mov	r6, r3
			pCommandToSend[3],
 800eeca:	4b44      	ldr	r3, [pc, #272]	; (800efdc <_ZN16SOFT_ARM_SEGMENT7displayEv+0x254>)
 800eecc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eed0:	61bb      	str	r3, [r7, #24]
			pToSend[3],
 800eed2:	4b43      	ldr	r3, [pc, #268]	; (800efe0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x258>)
 800eed4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eed8:	617b      	str	r3, [r7, #20]
			pCommandToSend[4],
 800eeda:	4b40      	ldr	r3, [pc, #256]	; (800efdc <_ZN16SOFT_ARM_SEGMENT7displayEv+0x254>)
 800eedc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eee0:	613b      	str	r3, [r7, #16]
			pToSend[4],
 800eee2:	4b3f      	ldr	r3, [pc, #252]	; (800efe0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x258>)
 800eee4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eee8:	60fb      	str	r3, [r7, #12]
			pCommandToSend[5],
 800eeea:	4b3c      	ldr	r3, [pc, #240]	; (800efdc <_ZN16SOFT_ARM_SEGMENT7displayEv+0x254>)
 800eeec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eef0:	60bb      	str	r3, [r7, #8]
			pToSend[5],
 800eef2:	4b3b      	ldr	r3, [pc, #236]	; (800efe0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x258>)
 800eef4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800eef8:	607b      	str	r3, [r7, #4]
			free,
			lengthh,
			psourcee,
			psinkk,
			(alphaD/M_PI*180),
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800ef00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ef04:	ed9f 5b30 	vldr	d5, [pc, #192]	; 800efc8 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x240>
 800ef08:	ee86 7b05 	vdiv.f64	d7, d6, d5
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800ef0c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 800efd0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x248>
 800ef10:	ee27 7b06 	vmul.f64	d7, d7, d6
			(betaD/M_PI*180),
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800ef1a:	eeb7 5ae6 	vcvt.f64.f32	d5, s13
 800ef1e:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 800efc8 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x240>
 800ef22:	ee85 6b04 	vdiv.f64	d6, d5, d4
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800ef26:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800efd0 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x248>
 800ef2a:	ee26 6b05 	vmul.f64	d6, d6, d5
			lengthD,
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	edd3 5a11 	vldr	s11, [r3, #68]	; 0x44
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800ef34:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			imuData.q0,
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	edd3 4aae 	vldr	s9, [r3, #696]	; 0x2b8
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800ef3e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			imuData.q1,
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	edd3 3aaf 	vldr	s7, [r3, #700]	; 0x2bc
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800ef48:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			imuData.q2,
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	edd3 2ab0 	vldr	s5, [r3, #704]	; 0x2c0
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800ef52:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
			imuData.q3);
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	edd3 1ab1 	vldr	s3, [r3, #708]	; 0x2c4
	 printf("%4.2f %4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%4d	%d	%5d	%4d	%4d	%3.1f	%3.1f	%1.4f	%3.4f	%3.4f	%3.4f	%3.4f\r\n",
 800ef5c:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 800ef60:	ed8d 1b1c 	vstr	d1, [sp, #112]	; 0x70
 800ef64:	ed8d 2b1a 	vstr	d2, [sp, #104]	; 0x68
 800ef68:	ed8d 3b18 	vstr	d3, [sp, #96]	; 0x60
 800ef6c:	ed8d 4b16 	vstr	d4, [sp, #88]	; 0x58
 800ef70:	ed8d 5b14 	vstr	d5, [sp, #80]	; 0x50
 800ef74:	ed8d 6b12 	vstr	d6, [sp, #72]	; 0x48
 800ef78:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef82:	930e      	str	r3, [sp, #56]	; 0x38
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	930d      	str	r3, [sp, #52]	; 0x34
 800ef88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8a:	930c      	str	r3, [sp, #48]	; 0x30
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	930a      	str	r3, [sp, #40]	; 0x28
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	9309      	str	r3, [sp, #36]	; 0x24
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	9308      	str	r3, [sp, #32]
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	9307      	str	r3, [sp, #28]
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	9306      	str	r3, [sp, #24]
 800efa4:	9605      	str	r6, [sp, #20]
 800efa6:	9504      	str	r5, [sp, #16]
 800efa8:	9403      	str	r4, [sp, #12]
 800efaa:	9002      	str	r0, [sp, #8]
 800efac:	9101      	str	r1, [sp, #4]
 800efae:	9200      	str	r2, [sp, #0]
 800efb0:	ec53 2b10 	vmov	r2, r3, d0
 800efb4:	480b      	ldr	r0, [pc, #44]	; (800efe4 <_ZN16SOFT_ARM_SEGMENT7displayEv+0x25c>)
 800efb6:	f003 fc2f 	bl	8012818 <iprintf>
}
 800efba:	bf00      	nop
 800efbc:	373c      	adds	r7, #60	; 0x3c
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc2:	bf00      	nop
 800efc4:	f3af 8000 	nop.w
 800efc8:	54442d18 	.word	0x54442d18
 800efcc:	400921fb 	.word	0x400921fb
 800efd0:	00000000 	.word	0x00000000
 800efd4:	40668000 	.word	0x40668000
 800efd8:	447a0000 	.word	0x447a0000
 800efdc:	200013a8 	.word	0x200013a8
 800efe0:	200013b4 	.word	0x200013b4
 800efe4:	080166e0 	.word	0x080166e0

0800efe8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc>:

void SOFT_ARM_SEGMENT::receiveCommand(char *pSerialReceiveBuffer)
{
 800efe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efea:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800efee:	af06      	add	r7, sp, #24
 800eff0:	f107 030c 	add.w	r3, r7, #12
 800eff4:	6018      	str	r0, [r3, #0]
 800eff6:	f107 0308 	add.w	r3, r7, #8
 800effa:	6019      	str	r1, [r3, #0]

		char str[200];
		uint32_t b;
		float c;

		if(pSerialReceiveBuffer[0] == 'g')
 800effc:	f107 0308 	add.w	r3, r7, #8
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	2b67      	cmp	r3, #103	; 0x67
 800f006:	d10d      	bne.n	800f024 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x3c>
		{
			startControl=1;
 800f008:	f107 030c 	add.w	r3, r7, #12
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
			startDemo = 1;
 800f014:	f107 030c 	add.w	r3, r7, #12
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		else if(pSerialReceiveBuffer[0] == 'T')
			{
				vvv+=1;
				vvv=vvv%3;
			}
}
 800f020:	f000 be76 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'f')
 800f024:	f107 0308 	add.w	r3, r7, #8
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b66      	cmp	r3, #102	; 0x66
 800f02e:	d113      	bne.n	800f058 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x70>
			sscanf(&pSerialReceiveBuffer[2], "%f",&(frequency));
 800f030:	f107 0308 	add.w	r3, r7, #8
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	1c98      	adds	r0, r3, #2
 800f038:	f107 030c 	add.w	r3, r7, #12
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	33c0      	adds	r3, #192	; 0xc0
 800f040:	461a      	mov	r2, r3
 800f042:	49ce      	ldr	r1, [pc, #824]	; (800f37c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x394>)
 800f044:	f003 fc7a 	bl	801293c <siscanf>
			frequencyDirty = 1;
 800f048:	f107 030c 	add.w	r3, r7, #12
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2201      	movs	r2, #1
 800f050:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
}
 800f054:	f000 be5c 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 's')
 800f058:	f107 0308 	add.w	r3, r7, #8
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b73      	cmp	r3, #115	; 0x73
 800f062:	d143      	bne.n	800f0ec <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x104>
			startControl=0;
 800f064:	f107 030c 	add.w	r3, r7, #12
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2200      	movs	r2, #0
 800f06c:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
			startDemo = 0;
 800f070:	f107 030c 	add.w	r3, r7, #12
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2200      	movs	r2, #0
 800f078:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
			valveOpen=1;
 800f07c:	f107 030c 	add.w	r3, r7, #12
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2201      	movs	r2, #1
 800f084:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
			basePlatform->pSink.stop();
 800f088:	f107 030c 	add.w	r3, r7, #12
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f092:	3344      	adds	r3, #68	; 0x44
 800f094:	4618      	mov	r0, r3
 800f096:	f7fc fd2a 	bl	800baee <_ZN15PRESSURE_SOURCE4stopEv>
			basePlatform->pSource.stop();
 800f09a:	f107 030c 	add.w	r3, r7, #12
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f0a4:	330c      	adds	r3, #12
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fc fd21 	bl	800baee <_ZN15PRESSURE_SOURCE4stopEv>
			for(int i=0;i<BELLOWNUM;i++)
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800f0b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800f0b6:	2b05      	cmp	r3, #5
 800f0b8:	dc10      	bgt.n	800f0dc <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xf4>
				pressureD[i] = 0;
 800f0ba:	f107 030c 	add.w	r3, r7, #12
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800f0c4:	3316      	adds	r3, #22
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	f04f 0200 	mov.w	r2, #0
 800f0ce:	601a      	str	r2, [r3, #0]
			for(int i=0;i<BELLOWNUM;i++)
 800f0d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800f0da:	e7ea      	b.n	800f0b2 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xca>
			commandSource=pressureControl;
 800f0dc:	f107 030c 	add.w	r3, r7, #12
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2202      	movs	r2, #2
 800f0e4:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
}
 800f0e8:	f000 be12 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'P')
 800f0ec:	f107 0308 	add.w	r3, r7, #8
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	2b50      	cmp	r3, #80	; 0x50
 800f0f6:	d155      	bne.n	800f1a4 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x1bc>
			float *p=pressureTem;
 800f0f8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800f0fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
			sscanf(pSerialReceiveBuffer, "%s %f %f %f %f %f %f",str,p, p+1, p+2, p+3, p+4, p+5);
 800f100:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800f104:	3304      	adds	r3, #4
 800f106:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800f10a:	3208      	adds	r2, #8
 800f10c:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 800f110:	310c      	adds	r1, #12
 800f112:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800f116:	f100 0410 	add.w	r4, r0, #16
 800f11a:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800f11e:	f100 0514 	add.w	r5, r0, #20
 800f122:	f507 768e 	add.w	r6, r7, #284	; 0x11c
 800f126:	f107 0008 	add.w	r0, r7, #8
 800f12a:	9504      	str	r5, [sp, #16]
 800f12c:	9403      	str	r4, [sp, #12]
 800f12e:	9102      	str	r1, [sp, #8]
 800f130:	9201      	str	r2, [sp, #4]
 800f132:	9300      	str	r3, [sp, #0]
 800f134:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800f138:	4632      	mov	r2, r6
 800f13a:	4991      	ldr	r1, [pc, #580]	; (800f380 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x398>)
 800f13c:	6800      	ldr	r0, [r0, #0]
 800f13e:	f003 fbfd 	bl	801293c <siscanf>
			for(int i=0;i<BELLOWNUM;i++)
 800f142:	2300      	movs	r3, #0
 800f144:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800f148:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800f14c:	2b05      	cmp	r3, #5
 800f14e:	dc1b      	bgt.n	800f188 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x1a0>
				pressureD[i] = pressureTem[i]*1000.0f;
 800f150:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800f154:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4413      	add	r3, r2
 800f15c:	edd3 7a00 	vldr	s15, [r3]
 800f160:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800f384 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x39c>
 800f164:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f168:	f107 030c 	add.w	r3, r7, #12
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800f172:	3316      	adds	r3, #22
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	4413      	add	r3, r2
 800f178:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0;i<BELLOWNUM;i++)
 800f17c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800f180:	3301      	adds	r3, #1
 800f182:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800f186:	e7df      	b.n	800f148 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x160>
			commandSource=pressureControl;
 800f188:	f107 030c 	add.w	r3, r7, #12
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2202      	movs	r2, #2
 800f190:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
			wp=1;
 800f194:	f107 030c 	add.w	r3, r7, #12
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
}
 800f1a0:	f000 bdb6 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'p')
 800f1a4:	f107 0308 	add.w	r3, r7, #8
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	2b70      	cmp	r3, #112	; 0x70
 800f1ae:	f040 8123 	bne.w	800f3f8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x410>
			if (pSerialReceiveBuffer[1]==' '){
 800f1b2:	f107 0308 	add.w	r3, r7, #8
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	2b20      	cmp	r3, #32
 800f1be:	f040 80a9 	bne.w	800f314 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x32c>
				float *p=pressureTem;
 800f1c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800f1c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
				int argNum=sscanf(&pSerialReceiveBuffer[2], "%f %f %f %f %f %f",p, p+1, p+2, p+3, p+4, p+5);
 800f1ca:	f107 0308 	add.w	r3, r7, #8
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	1c9c      	adds	r4, r3, #2
 800f1d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f1d6:	1d1d      	adds	r5, r3, #4
 800f1d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800f1dc:	3308      	adds	r3, #8
 800f1de:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800f1e2:	320c      	adds	r2, #12
 800f1e4:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 800f1e8:	3110      	adds	r1, #16
 800f1ea:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800f1ee:	3014      	adds	r0, #20
 800f1f0:	9003      	str	r0, [sp, #12]
 800f1f2:	9102      	str	r1, [sp, #8]
 800f1f4:	9201      	str	r2, [sp, #4]
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	462b      	mov	r3, r5
 800f1fa:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800f1fe:	4962      	ldr	r1, [pc, #392]	; (800f388 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x3a0>)
 800f200:	4620      	mov	r0, r4
 800f202:	f003 fb9b 	bl	801293c <siscanf>
 800f206:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
				if(argNum==1){
 800f20a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d11e      	bne.n	800f250 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x268>
					for(int i=0;i<BELLOWNUM;i++)
 800f212:	2300      	movs	r3, #0
 800f214:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800f218:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800f21c:	2b05      	cmp	r3, #5
 800f21e:	dc6b      	bgt.n	800f2f8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x310>
						pressureD[i] = pressureTem[0]*1000.0f;
 800f220:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800f224:	edd3 7a00 	vldr	s15, [r3]
 800f228:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800f384 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x39c>
 800f22c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f230:	f107 030c 	add.w	r3, r7, #12
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800f23a:	3316      	adds	r3, #22
 800f23c:	009b      	lsls	r3, r3, #2
 800f23e:	4413      	add	r3, r2
 800f240:	edc3 7a00 	vstr	s15, [r3]
					for(int i=0;i<BELLOWNUM;i++)
 800f244:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800f248:	3301      	adds	r3, #1
 800f24a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800f24e:	e7e3      	b.n	800f218 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x230>
				else if(argNum==2){
 800f250:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800f254:	2b02      	cmp	r3, #2
 800f256:	d128      	bne.n	800f2aa <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x2c2>
					interestedBellow = (int)(round(pressureTem[1]));
 800f258:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800f25c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f260:	eeb0 0a67 	vmov.f32	s0, s15
 800f264:	f7ff fa70 	bl	800e748 <_ZSt5roundf>
 800f268:	eef0 7a40 	vmov.f32	s15, s0
 800f26c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f270:	ee17 2a90 	vmov	r2, s15
 800f274:	f107 030c 	add.w	r3, r7, #12
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
					pressureD[interestedBellow]=pressureTem[0]*1000;
 800f27e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800f282:	edd3 7a00 	vldr	s15, [r3]
 800f286:	f107 030c 	add.w	r3, r7, #12
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800f290:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800f384 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x39c>
 800f294:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f298:	f107 020c 	add.w	r2, r7, #12
 800f29c:	6812      	ldr	r2, [r2, #0]
 800f29e:	3316      	adds	r3, #22
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4413      	add	r3, r2
 800f2a4:	edc3 7a00 	vstr	s15, [r3]
 800f2a8:	e026      	b.n	800f2f8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x310>
				else if(argNum==6){
 800f2aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800f2ae:	2b06      	cmp	r3, #6
 800f2b0:	d122      	bne.n	800f2f8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x310>
					for(int i=0;i<BELLOWNUM;i++)
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800f2b8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800f2bc:	2b05      	cmp	r3, #5
 800f2be:	dc1b      	bgt.n	800f2f8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x310>
						pressureD[i] = pressureTem[i]*1000.0f;
 800f2c0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800f2c4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4413      	add	r3, r2
 800f2cc:	edd3 7a00 	vldr	s15, [r3]
 800f2d0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800f384 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x39c>
 800f2d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2d8:	f107 030c 	add.w	r3, r7, #12
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800f2e2:	3316      	adds	r3, #22
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	edc3 7a00 	vstr	s15, [r3]
					for(int i=0;i<BELLOWNUM;i++)
 800f2ec:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800f2f6:	e7df      	b.n	800f2b8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x2d0>
				commandSource=pressureControl;
 800f2f8:	f107 030c 	add.w	r3, r7, #12
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2202      	movs	r2, #2
 800f300:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
				wp=1;
 800f304:	f107 030c 	add.w	r3, r7, #12
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
}
 800f310:	f000 bcfe 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
			else if (pSerialReceiveBuffer[1]=='o'){
 800f314:	f107 0308 	add.w	r3, r7, #8
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	3301      	adds	r3, #1
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	2b6f      	cmp	r3, #111	; 0x6f
 800f320:	d136      	bne.n	800f390 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x3a8>
				float pressureDes=0;
 800f322:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800f326:	f04f 0200 	mov.w	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]
				sscanf(&pSerialReceiveBuffer[3], "%f",&pressureDes);
 800f32c:	f107 0308 	add.w	r3, r7, #8
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	3303      	adds	r3, #3
 800f334:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800f338:	4910      	ldr	r1, [pc, #64]	; (800f37c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x394>)
 800f33a:	4618      	mov	r0, r3
 800f33c:	f003 fafe 	bl	801293c <siscanf>
				psink_upperlimit=pressureDes*1000;
 800f340:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800f344:	edd3 7a00 	vldr	s15, [r3]
 800f348:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800f384 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x39c>
 800f34c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f350:	f107 030c 	add.w	r3, r7, #12
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
				psink_lowerlimit=psink_upperlimit-10000;
 800f35a:	f107 030c 	add.w	r3, r7, #12
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800f364:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f38c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x3a4>
 800f368:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f36c:	f107 030c 	add.w	r3, r7, #12
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
}
 800f376:	f000 bccb 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
 800f37a:	bf00      	nop
 800f37c:	08016754 	.word	0x08016754
 800f380:	08016758 	.word	0x08016758
 800f384:	447a0000 	.word	0x447a0000
 800f388:	08016770 	.word	0x08016770
 800f38c:	461c4000 	.word	0x461c4000
			else if (pSerialReceiveBuffer[1]=='i'){
 800f390:	f107 0308 	add.w	r3, r7, #8
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	3301      	adds	r3, #1
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	2b69      	cmp	r3, #105	; 0x69
 800f39c:	f040 84b8 	bne.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				float pressureDes=0;
 800f3a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f3a4:	f04f 0200 	mov.w	r2, #0
 800f3a8:	601a      	str	r2, [r3, #0]
				sscanf(&pSerialReceiveBuffer[3], "%f",&pressureDes);
 800f3aa:	f107 0308 	add.w	r3, r7, #8
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	3303      	adds	r3, #3
 800f3b2:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800f3b6:	49bf      	ldr	r1, [pc, #764]	; (800f6b4 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6cc>)
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f003 fabf 	bl	801293c <siscanf>
				psource_upperlimit=pressureDes*1000;
 800f3be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f3c2:	edd3 7a00 	vldr	s15, [r3]
 800f3c6:	ed9f 7abc 	vldr	s14, [pc, #752]	; 800f6b8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6d0>
 800f3ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3ce:	f107 030c 	add.w	r3, r7, #12
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
				psource_lowerlimit=psource_upperlimit-10000;
 800f3d8:	f107 030c 	add.w	r3, r7, #12
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 800f3e2:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 800f6bc <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6d4>
 800f3e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3ea:	f107 030c 	add.w	r3, r7, #12
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
}
 800f3f4:	f000 bc8c 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'z')
 800f3f8:	f107 0308 	add.w	r3, r7, #8
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b7a      	cmp	r3, #122	; 0x7a
 800f402:	d12c      	bne.n	800f45e <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x476>
			for(int i=0;i<BELLOWNUM;i++)
 800f404:	2300      	movs	r3, #0
 800f406:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800f40a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800f40e:	2b05      	cmp	r3, #5
 800f410:	f300 847e 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				basePlatform->chambers[i]->pressureSensor.vMin = AnalogRead(basePlatform->chambers[i]->pressureSensor.AnalogPort);
 800f414:	f107 030c 	add.w	r3, r7, #12
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f41e:	689a      	ldr	r2, [r3, #8]
 800f420:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4413      	add	r3, r2
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f42c:	b299      	uxth	r1, r3
 800f42e:	f107 030c 	add.w	r3, r7, #12
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f438:	689a      	ldr	r2, [r3, #8]
 800f43a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	681c      	ldr	r4, [r3, #0]
 800f444:	4608      	mov	r0, r1
 800f446:	f7fc ff0b 	bl	800c260 <AnalogRead>
 800f44a:	eef0 7a40 	vmov.f32	s15, s0
 800f44e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
			for(int i=0;i<BELLOWNUM;i++)
 800f452:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800f456:	3301      	adds	r3, #1
 800f458:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800f45c:	e7d5      	b.n	800f40a <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x422>
		else if(pSerialReceiveBuffer[0] == 'o')
 800f45e:	f107 0308 	add.w	r3, r7, #8
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	2b6f      	cmp	r3, #111	; 0x6f
 800f468:	d10c      	bne.n	800f484 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x49c>
			valveOpen++;
 800f46a:	f107 030c 	add.w	r3, r7, #12
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800f474:	1c5a      	adds	r2, r3, #1
 800f476:	f107 030c 	add.w	r3, r7, #12
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
}
 800f480:	f000 bc46 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'O')
 800f484:	f107 0308 	add.w	r3, r7, #8
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	2b4f      	cmp	r3, #79	; 0x4f
 800f48e:	d12c      	bne.n	800f4ea <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x502>
			commandSource=mannualControl;
 800f490:	f107 030c 	add.w	r3, r7, #12
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2201      	movs	r2, #1
 800f498:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
			int num=0;
 800f49c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	601a      	str	r2, [r3, #0]
			float op=0;
 800f4a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800f4a8:	f04f 0200 	mov.w	r2, #0
 800f4ac:	601a      	str	r2, [r3, #0]
			sscanf(&pSerialReceiveBuffer[2], "%d %f",&num,&op);
 800f4ae:	f107 0308 	add.w	r3, r7, #8
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	1c98      	adds	r0, r3, #2
 800f4b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800f4ba:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800f4be:	4980      	ldr	r1, [pc, #512]	; (800f6c0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6d8>)
 800f4c0:	f003 fa3c 	bl	801293c <siscanf>
			basePlatform->chambers[num]->opening=op;
 800f4c4:	f107 030c 	add.w	r3, r7, #12
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f4ce:	689a      	ldr	r2, [r3, #8]
 800f4d0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800f4e0:	6812      	ldr	r2, [r2, #0]
 800f4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f4e6:	f000 bc13 	b.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'u')
 800f4ea:	f107 0308 	add.w	r3, r7, #8
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2b75      	cmp	r3, #117	; 0x75
 800f4f4:	f040 808f 	bne.w	800f616 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x62e>
			if(pSerialReceiveBuffer[1] == '1')
 800f4f8:	f107 0308 	add.w	r3, r7, #8
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	3301      	adds	r3, #1
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	2b31      	cmp	r3, #49	; 0x31
 800f504:	d13f      	bne.n	800f586 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x59e>
				sscanf(&pSerialReceiveBuffer[3], "%f %d",&deflateMinN,&num);
 800f506:	f107 0308 	add.w	r3, r7, #8
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	1cd8      	adds	r0, r3, #3
 800f50e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f512:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800f516:	496b      	ldr	r1, [pc, #428]	; (800f6c4 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6dc>)
 800f518:	f003 fa10 	bl	801293c <siscanf>
				if(num<0)
 800f51c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	da1d      	bge.n	800f562 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x57a>
				 for(int i=0;i<BELLOWNUM;i++){
 800f526:	2300      	movs	r3, #0
 800f528:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800f52c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f530:	2b05      	cmp	r3, #5
 800f532:	f300 83ed 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
					basePlatform->chambers[i]->openingMinN = deflateMinN;
 800f536:	f107 030c 	add.w	r3, r7, #12
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f540:	689a      	ldr	r2, [r3, #8]
 800f542:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	4413      	add	r3, r2
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800f550:	6812      	ldr	r2, [r2, #0]
 800f552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				 for(int i=0;i<BELLOWNUM;i++){
 800f556:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f55a:	3301      	adds	r3, #1
 800f55c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800f560:	e7e4      	b.n	800f52c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x544>
					basePlatform->chambers[num]->openingMinN = deflateMinN;
 800f562:	f107 030c 	add.w	r3, r7, #12
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f56c:	689a      	ldr	r2, [r3, #8]
 800f56e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	4413      	add	r3, r2
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800f57e:	6812      	ldr	r2, [r2, #0]
 800f580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800f584:	e3c4      	b.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
			else if(pSerialReceiveBuffer[1] == '2')
 800f586:	f107 0308 	add.w	r3, r7, #8
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	3301      	adds	r3, #1
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	2b32      	cmp	r3, #50	; 0x32
 800f592:	f040 83bd 	bne.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				sscanf(&pSerialReceiveBuffer[3], "%f %d",&deflateMaxN,&num);
 800f596:	f107 0308 	add.w	r3, r7, #8
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	1cd8      	adds	r0, r3, #3
 800f59e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f5a2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800f5a6:	4947      	ldr	r1, [pc, #284]	; (800f6c4 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6dc>)
 800f5a8:	f003 f9c8 	bl	801293c <siscanf>
				if(num<0)
 800f5ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	da1d      	bge.n	800f5f2 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x60a>
				 for(int i=0;i<BELLOWNUM;i++){
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800f5bc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800f5c0:	2b05      	cmp	r3, #5
 800f5c2:	f300 83a5 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
					basePlatform->chambers[i]->openingMaxN = deflateMaxN;
 800f5c6:	f107 030c 	add.w	r3, r7, #12
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f5d0:	689a      	ldr	r2, [r3, #8]
 800f5d2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4413      	add	r3, r2
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800f5e0:	6812      	ldr	r2, [r2, #0]
 800f5e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				 for(int i=0;i<BELLOWNUM;i++){
 800f5e6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800f5f0:	e7e4      	b.n	800f5bc <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x5d4>
					basePlatform->chambers[num]->openingMaxN = deflateMaxN;
 800f5f2:	f107 030c 	add.w	r3, r7, #12
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f5fc:	689a      	ldr	r2, [r3, #8]
 800f5fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4413      	add	r3, r2
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800f60e:	6812      	ldr	r2, [r2, #0]
 800f610:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800f614:	e37c      	b.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'U')
 800f616:	f107 0308 	add.w	r3, r7, #8
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	2b55      	cmp	r3, #85	; 0x55
 800f620:	f040 809a 	bne.w	800f758 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x770>
			if(pSerialReceiveBuffer[1] == '1')
 800f624:	f107 0308 	add.w	r3, r7, #8
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	3301      	adds	r3, #1
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	2b31      	cmp	r3, #49	; 0x31
 800f630:	d14a      	bne.n	800f6c8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6e0>
						sscanf(&pSerialReceiveBuffer[3], "%f %d",&inflateMinP,&num);
 800f632:	f107 0308 	add.w	r3, r7, #8
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	1cd8      	adds	r0, r3, #3
 800f63a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f63e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800f642:	4920      	ldr	r1, [pc, #128]	; (800f6c4 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6dc>)
 800f644:	f003 f97a 	bl	801293c <siscanf>
						if(num<0)
 800f648:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	da1d      	bge.n	800f68e <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x6a6>
						 for(int i=0;i<BELLOWNUM;i++){
 800f652:	2300      	movs	r3, #0
 800f654:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800f658:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800f65c:	2b05      	cmp	r3, #5
 800f65e:	f300 8357 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
							basePlatform->chambers[i]->openingMinP = inflateMinP;
 800f662:	f107 030c 	add.w	r3, r7, #12
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f66c:	689a      	ldr	r2, [r3, #8]
 800f66e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4413      	add	r3, r2
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800f67c:	6812      	ldr	r2, [r2, #0]
 800f67e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						 for(int i=0;i<BELLOWNUM;i++){
 800f682:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800f686:	3301      	adds	r3, #1
 800f688:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800f68c:	e7e4      	b.n	800f658 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x670>
							basePlatform->chambers[num]->openingMinP = inflateMinP;
 800f68e:	f107 030c 	add.w	r3, r7, #12
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f698:	689a      	ldr	r2, [r3, #8]
 800f69a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	4413      	add	r3, r2
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800f6aa:	6812      	ldr	r2, [r2, #0]
 800f6ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f6b0:	e32e      	b.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
 800f6b2:	bf00      	nop
 800f6b4:	08016754 	.word	0x08016754
 800f6b8:	447a0000 	.word	0x447a0000
 800f6bc:	461c4000 	.word	0x461c4000
 800f6c0:	08016784 	.word	0x08016784
 800f6c4:	0801678c 	.word	0x0801678c
					else if(pSerialReceiveBuffer[1] == '2')
 800f6c8:	f107 0308 	add.w	r3, r7, #8
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	2b32      	cmp	r3, #50	; 0x32
 800f6d4:	f040 831c 	bne.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
						sscanf(&pSerialReceiveBuffer[3], "%f %d",&inflateMaxP,&num);
 800f6d8:	f107 0308 	add.w	r3, r7, #8
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	1cd8      	adds	r0, r3, #3
 800f6e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f6e4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800f6e8:	49bc      	ldr	r1, [pc, #752]	; (800f9dc <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x9f4>)
 800f6ea:	f003 f927 	bl	801293c <siscanf>
						if(num<0)
 800f6ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	da1d      	bge.n	800f734 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x74c>
							 for(int i=0;i<BELLOWNUM;i++){
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800f6fe:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800f702:	2b05      	cmp	r3, #5
 800f704:	f300 8304 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
							basePlatform->chambers[i]->openingMaxP = inflateMaxP;
 800f708:	f107 030c 	add.w	r3, r7, #12
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f712:	689a      	ldr	r2, [r3, #8]
 800f714:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	4413      	add	r3, r2
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800f722:	6812      	ldr	r2, [r2, #0]
 800f724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							 for(int i=0;i<BELLOWNUM;i++){
 800f728:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800f72c:	3301      	adds	r3, #1
 800f72e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800f732:	e7e4      	b.n	800f6fe <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x716>
							basePlatform->chambers[num]->openingMaxP = inflateMaxP;
 800f734:	f107 030c 	add.w	r3, r7, #12
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f73e:	689a      	ldr	r2, [r3, #8]
 800f740:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	4413      	add	r3, r2
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800f750:	6812      	ldr	r2, [r2, #0]
 800f752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800f756:	e2db      	b.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'k')
 800f758:	f107 0308 	add.w	r3, r7, #8
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	2b6b      	cmp	r3, #107	; 0x6b
 800f762:	f040 80ac 	bne.w	800f8be <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x8d6>
				if(pSerialReceiveBuffer[1] == 'p'){
 800f766:	f107 0308 	add.w	r3, r7, #8
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	3301      	adds	r3, #1
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	2b70      	cmp	r3, #112	; 0x70
 800f772:	d131      	bne.n	800f7d8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x7f0>
				float *p=kp;
 800f774:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f778:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
				sscanf(pSerialReceiveBuffer, "%s %f",str,p);
 800f77c:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800f780:	f107 0008 	add.w	r0, r7, #8
 800f784:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800f788:	4995      	ldr	r1, [pc, #596]	; (800f9e0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x9f8>)
 800f78a:	6800      	ldr	r0, [r0, #0]
 800f78c:	f003 f8d6 	bl	801293c <siscanf>
				 for(int i=0;i<BELLOWNUM;i++){
 800f790:	2300      	movs	r3, #0
 800f792:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800f796:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800f79a:	2b05      	cmp	r3, #5
 800f79c:	f300 82b8 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
					setKp(basePlatform->chambers[i]->pressureController->pPID, kp[0]);
 800f7a0:	f107 030c 	add.w	r3, r7, #12
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f7aa:	689a      	ldr	r2, [r3, #8]
 800f7ac:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	4413      	add	r3, r2
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	6a1a      	ldr	r2, [r3, #32]
 800f7ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f7be:	edd3 7a00 	vldr	s15, [r3]
 800f7c2:	eeb0 0a67 	vmov.f32	s0, s15
 800f7c6:	4610      	mov	r0, r2
 800f7c8:	f7fe f9f4 	bl	800dbb4 <setKp>
				 for(int i=0;i<BELLOWNUM;i++){
 800f7cc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800f7d6:	e7de      	b.n	800f796 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x7ae>
				else if(pSerialReceiveBuffer[1] == 'i'){
 800f7d8:	f107 0308 	add.w	r3, r7, #8
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	2b69      	cmp	r3, #105	; 0x69
 800f7e4:	d131      	bne.n	800f84a <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x862>
				float *p=ki;
 800f7e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f7ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
				sscanf(pSerialReceiveBuffer, "%s %f",str,p);
 800f7ee:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800f7f2:	f107 0008 	add.w	r0, r7, #8
 800f7f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800f7fa:	4979      	ldr	r1, [pc, #484]	; (800f9e0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x9f8>)
 800f7fc:	6800      	ldr	r0, [r0, #0]
 800f7fe:	f003 f89d 	bl	801293c <siscanf>
				 for(int i=0;i<BELLOWNUM;i++){
 800f802:	2300      	movs	r3, #0
 800f804:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800f808:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800f80c:	2b05      	cmp	r3, #5
 800f80e:	f300 827f 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
					setKi(basePlatform->chambers[i]->pressureController->pPID, ki[0]);
 800f812:	f107 030c 	add.w	r3, r7, #12
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f81c:	689a      	ldr	r2, [r3, #8]
 800f81e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	4413      	add	r3, r2
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	6a1a      	ldr	r2, [r3, #32]
 800f82c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f830:	edd3 7a00 	vldr	s15, [r3]
 800f834:	eeb0 0a67 	vmov.f32	s0, s15
 800f838:	4610      	mov	r0, r2
 800f83a:	f7fe fa4d 	bl	800dcd8 <setKi>
				 for(int i=0;i<BELLOWNUM;i++){
 800f83e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800f842:	3301      	adds	r3, #1
 800f844:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800f848:	e7de      	b.n	800f808 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x820>
				else if(pSerialReceiveBuffer[1] == 'd'){
 800f84a:	f107 0308 	add.w	r3, r7, #8
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	3301      	adds	r3, #1
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	2b64      	cmp	r3, #100	; 0x64
 800f856:	f040 825b 	bne.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				float *p=kd;
 800f85a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f85e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
				sscanf(pSerialReceiveBuffer, "%s %f",str,p);
 800f862:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800f866:	f107 0008 	add.w	r0, r7, #8
 800f86a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800f86e:	495c      	ldr	r1, [pc, #368]	; (800f9e0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x9f8>)
 800f870:	6800      	ldr	r0, [r0, #0]
 800f872:	f003 f863 	bl	801293c <siscanf>
				 for(int i=0;i<BELLOWNUM;i++){
 800f876:	2300      	movs	r3, #0
 800f878:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800f87c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800f880:	2b05      	cmp	r3, #5
 800f882:	f300 8245 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
					setKd(basePlatform->chambers[i]->pressureController->pPID, kd[0]);
 800f886:	f107 030c 	add.w	r3, r7, #12
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f890:	689a      	ldr	r2, [r3, #8]
 800f892:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800f896:	009b      	lsls	r3, r3, #2
 800f898:	4413      	add	r3, r2
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	6a1a      	ldr	r2, [r3, #32]
 800f8a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f8a4:	edd3 7a00 	vldr	s15, [r3]
 800f8a8:	eeb0 0a67 	vmov.f32	s0, s15
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	f7fe f9ca 	bl	800dc46 <setKd>
				 for(int i=0;i<BELLOWNUM;i++){
 800f8b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800f8bc:	e7de      	b.n	800f87c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x894>
		else if(pSerialReceiveBuffer[0] == 'd')
 800f8be:	f107 0308 	add.w	r3, r7, #8
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	2b64      	cmp	r3, #100	; 0x64
 800f8c8:	d12c      	bne.n	800f924 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x93c>
				sscanf(pSerialReceiveBuffer, "%s %f",str,&deadzone);
 800f8ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f8ce:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800f8d2:	f107 0008 	add.w	r0, r7, #8
 800f8d6:	4942      	ldr	r1, [pc, #264]	; (800f9e0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x9f8>)
 800f8d8:	6800      	ldr	r0, [r0, #0]
 800f8da:	f003 f82f 	bl	801293c <siscanf>
			for(int i=0;i<BELLOWNUM;i++){
 800f8de:	2300      	movs	r3, #0
 800f8e0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800f8e4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800f8e8:	2b05      	cmp	r3, #5
 800f8ea:	f300 8211 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				basePlatform->chambers[i]->pressureDeadZone = deadzone*1000;
 800f8ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f8f2:	edd3 7a00 	vldr	s15, [r3]
 800f8f6:	f107 030c 	add.w	r3, r7, #12
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f900:	689a      	ldr	r2, [r3, #8]
 800f902:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4413      	add	r3, r2
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800f9e4 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x9fc>
 800f910:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f914:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
			for(int i=0;i<BELLOWNUM;i++){
 800f918:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800f91c:	3301      	adds	r3, #1
 800f91e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800f922:	e7df      	b.n	800f8e4 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x8fc>
		else if(pSerialReceiveBuffer[0] == 'D')
 800f924:	f107 0308 	add.w	r3, r7, #8
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	2b44      	cmp	r3, #68	; 0x44
 800f92e:	d124      	bne.n	800f97a <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x992>
			uint32_t dd=0;
 800f930:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f934:	2200      	movs	r2, #0
 800f936:	601a      	str	r2, [r3, #0]
			float ff=0;
 800f938:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f93c:	f04f 0200 	mov.w	r2, #0
 800f940:	601a      	str	r2, [r3, #0]
			sscanf(pSerialReceiveBuffer, "%s %d %f",str,&dd,&ff);
 800f942:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800f946:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800f94a:	f107 0008 	add.w	r0, r7, #8
 800f94e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	460b      	mov	r3, r1
 800f956:	4924      	ldr	r1, [pc, #144]	; (800f9e8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xa00>)
 800f958:	6800      	ldr	r0, [r0, #0]
 800f95a:	f002 ffef 	bl	801293c <siscanf>
			PWMWriteDuty(dd,ff);
 800f95e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	b29a      	uxth	r2, r3
 800f966:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f96a:	edd3 7a00 	vldr	s15, [r3]
 800f96e:	eeb0 0a67 	vmov.f32	s0, s15
 800f972:	4610      	mov	r0, r2
 800f974:	f7fc fca9 	bl	800c2ca <PWMWriteDuty>
}
 800f978:	e1ca      	b.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'Q')
 800f97a:	f107 0308 	add.w	r3, r7, #8
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	2b51      	cmp	r3, #81	; 0x51
 800f984:	d132      	bne.n	800f9ec <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xa04>
				sscanf(pSerialReceiveBuffer, "%s %f",str,&kalmanq);
 800f986:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f98a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800f98e:	f107 0008 	add.w	r0, r7, #8
 800f992:	4913      	ldr	r1, [pc, #76]	; (800f9e0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x9f8>)
 800f994:	6800      	ldr	r0, [r0, #0]
 800f996:	f002 ffd1 	bl	801293c <siscanf>
			for(int i=0;i<BELLOWNUM;i++){
 800f99a:	2300      	movs	r3, #0
 800f99c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800f9a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800f9a4:	2b05      	cmp	r3, #5
 800f9a6:	f300 81b3 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				kalman_setQ(basePlatform->chambers[i]->pressureController->pKalmanFilter,&kalmanq);
 800f9aa:	f107 030c 	add.w	r3, r7, #12
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f9b4:	689a      	ldr	r2, [r3, #8]
 800f9b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	4413      	add	r3, r2
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	69db      	ldr	r3, [r3, #28]
 800f9c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f9c8:	4611      	mov	r1, r2
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fd faf2 	bl	800cfb4 <kalman_setQ>
			for(int i=0;i<BELLOWNUM;i++){
 800f9d0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800f9da:	e7e1      	b.n	800f9a0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0x9b8>
 800f9dc:	0801678c 	.word	0x0801678c
 800f9e0:	08016794 	.word	0x08016794
 800f9e4:	447a0000 	.word	0x447a0000
 800f9e8:	0801679c 	.word	0x0801679c
		else if(pSerialReceiveBuffer[0] == 'R')
 800f9ec:	f107 0308 	add.w	r3, r7, #8
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	2b52      	cmp	r3, #82	; 0x52
 800f9f6:	d12a      	bne.n	800fa4e <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xa66>
				sscanf(pSerialReceiveBuffer, "%s %f",str,&kalmanR);
 800f9f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f9fc:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800fa00:	f107 0008 	add.w	r0, r7, #8
 800fa04:	49c5      	ldr	r1, [pc, #788]	; (800fd1c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd34>)
 800fa06:	6800      	ldr	r0, [r0, #0]
 800fa08:	f002 ff98 	bl	801293c <siscanf>
			for(int i=0;i<BELLOWNUM;i++){
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800fa12:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fa16:	2b05      	cmp	r3, #5
 800fa18:	f300 817a 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				kalman_setR(basePlatform->chambers[i]->pressureController->pKalmanFilter,&kalmanR);
 800fa1c:	f107 030c 	add.w	r3, r7, #12
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fa26:	689a      	ldr	r2, [r3, #8]
 800fa28:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4413      	add	r3, r2
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	69db      	ldr	r3, [r3, #28]
 800fa36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fd fc29 	bl	800d294 <kalman_setR>
			for(int i=0;i<BELLOWNUM;i++){
 800fa42:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fa46:	3301      	adds	r3, #1
 800fa48:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800fa4c:	e7e1      	b.n	800fa12 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xa2a>
		else if(pSerialReceiveBuffer[0] == 'c')
 800fa4e:	f107 0308 	add.w	r3, r7, #8
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	2b63      	cmp	r3, #99	; 0x63
 800fa58:	d10d      	bne.n	800fa76 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xa8e>
			sscanf(&pSerialReceiveBuffer[2], "%d",&(interestedBellow));
 800fa5a:	f107 0308 	add.w	r3, r7, #8
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	1c98      	adds	r0, r3, #2
 800fa62:	f107 030c 	add.w	r3, r7, #12
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	49ac      	ldr	r1, [pc, #688]	; (800fd20 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd38>)
 800fa70:	f002 ff64 	bl	801293c <siscanf>
}
 800fa74:	e14c      	b.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'A')
 800fa76:	f107 0308 	add.w	r3, r7, #8
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	2b41      	cmp	r3, #65	; 0x41
 800fa80:	d10e      	bne.n	800faa0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xab8>
			if(pSerialReceiveBuffer[3] == 'A')
 800fa82:	f107 0308 	add.w	r3, r7, #8
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	3303      	adds	r3, #3
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	2b41      	cmp	r3, #65	; 0x41
 800fa8e:	f040 813f 	bne.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				wp=0;
 800fa92:	f107 030c 	add.w	r3, r7, #12
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
}
 800fa9e:	e137      	b.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'J')
 800faa0:	f107 0308 	add.w	r3, r7, #8
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	2b4a      	cmp	r3, #74	; 0x4a
 800faaa:	d15f      	bne.n	800fb6c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xb84>
				int32_t xx=0;
 800faac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fab0:	2200      	movs	r2, #0
 800fab2:	601a      	str	r2, [r3, #0]
				int32_t yy=0;
 800fab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fab8:	2200      	movs	r2, #0
 800faba:	601a      	str	r2, [r3, #0]
				int32_t zz=0;
 800fabc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fac0:	2200      	movs	r2, #0
 800fac2:	601a      	str	r2, [r3, #0]
				int32_t rxx=0;
 800fac4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fac8:	2200      	movs	r2, #0
 800faca:	601a      	str	r2, [r3, #0]
				int32_t ryy=0;
 800facc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fad0:	2200      	movs	r2, #0
 800fad2:	601a      	str	r2, [r3, #0]
				int32_t rzz=0;
 800fad4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fad8:	2200      	movs	r2, #0
 800fada:	601a      	str	r2, [r3, #0]
				sscanf(&pSerialReceiveBuffer[2], "%d %ld %ld %ld %ld %ld %ld",&btn,&xx,&yy,&zz,&rxx,&ryy,&rzz);
 800fadc:	f107 0308 	add.w	r3, r7, #8
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	1c98      	adds	r0, r3, #2
 800fae4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fae8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800faec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800faf0:	9304      	str	r3, [sp, #16]
 800faf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800faf6:	9303      	str	r3, [sp, #12]
 800faf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fafc:	9302      	str	r3, [sp, #8]
 800fafe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fb08:	9300      	str	r3, [sp, #0]
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	4985      	ldr	r1, [pc, #532]	; (800fd24 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd3c>)
 800fb0e:	f002 ff15 	bl	801293c <siscanf>
				joyStick.receiveJoyStickCommand((uint8_t)btn,xx,yy,zz,rxx,ryy,rzz);
 800fb12:	f107 030c 	add.w	r3, r7, #12
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f103 0484 	add.w	r4, r3, #132	; 0x84
 800fb1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	b2dd      	uxtb	r5, r3
 800fb24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fb28:	681e      	ldr	r6, [r3, #0]
 800fb2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	607b      	str	r3, [r7, #4]
 800fb32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800fb3c:	6812      	ldr	r2, [r2, #0]
 800fb3e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800fb42:	6809      	ldr	r1, [r1, #0]
 800fb44:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800fb48:	6800      	ldr	r0, [r0, #0]
 800fb4a:	9003      	str	r0, [sp, #12]
 800fb4c:	9102      	str	r1, [sp, #8]
 800fb4e:	9201      	str	r2, [sp, #4]
 800fb50:	9300      	str	r3, [sp, #0]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4632      	mov	r2, r6
 800fb56:	4629      	mov	r1, r5
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f7fd f9b0 	bl	800cebe <_ZN8JOYSTICK22receiveJoyStickCommandEhiiiiii>
				commandSource=joyStickControl;
 800fb5e:	f107 030c 	add.w	r3, r7, #12
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
}
 800fb6a:	e0d1      	b.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
		else if(pSerialReceiveBuffer[0] == 'h')
 800fb6c:	f107 0308 	add.w	r3, r7, #8
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	2b68      	cmp	r3, #104	; 0x68
 800fb76:	d157      	bne.n	800fc28 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xc40>
				int retNum=sscanf(&pSerialReceiveBuffer[2], "%d %d %d %d %d %d",&holdflagtemp[0],&holdflagtemp[1],&holdflagtemp[2],&holdflagtemp[3],&holdflagtemp[4],&holdflagtemp[5]);
 800fb78:	f107 0308 	add.w	r3, r7, #8
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	1c98      	adds	r0, r3, #2
 800fb80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb84:	1d19      	adds	r1, r3, #4
 800fb86:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fb8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb8e:	3314      	adds	r3, #20
 800fb90:	9303      	str	r3, [sp, #12]
 800fb92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb96:	3310      	adds	r3, #16
 800fb98:	9302      	str	r3, [sp, #8]
 800fb9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb9e:	330c      	adds	r3, #12
 800fba0:	9301      	str	r3, [sp, #4]
 800fba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fba6:	3308      	adds	r3, #8
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	460b      	mov	r3, r1
 800fbac:	495e      	ldr	r1, [pc, #376]	; (800fd28 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd40>)
 800fbae:	f002 fec5 	bl	801293c <siscanf>
 800fbb2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
				if (retNum == -1 )
 800fbb6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbbe:	d116      	bne.n	800fbee <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xc06>
					for (int i=0;i<BELLOWNUM;i++)
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800fbc6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800fbca:	2b05      	cmp	r3, #5
 800fbcc:	f300 80a0 	bgt.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
						holdflag[i]=1;
 800fbd0:	f107 030c 	add.w	r3, r7, #12
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800fbda:	323e      	adds	r2, #62	; 0x3e
 800fbdc:	2101      	movs	r1, #1
 800fbde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					for (int i=0;i<BELLOWNUM;i++)
 800fbe2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800fbec:	e7eb      	b.n	800fbc6 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xbde>
					for (int i=0;i<retNum;i++)
 800fbee:	2300      	movs	r3, #0
 800fbf0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800fbf4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800fbf8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	f280 8087 	bge.w	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
						holdflag[holdflagtemp[i]]=1;
 800fc02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc06:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800fc0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fc0e:	f107 030c 	add.w	r3, r7, #12
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	323e      	adds	r2, #62	; 0x3e
 800fc16:	2101      	movs	r1, #1
 800fc18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					for (int i=0;i<retNum;i++)
 800fc1c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800fc20:	3301      	adds	r3, #1
 800fc22:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800fc26:	e7e5      	b.n	800fbf4 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xc0c>
		else if(pSerialReceiveBuffer[0]=='l')
 800fc28:	f107 0308 	add.w	r3, r7, #8
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	2b6c      	cmp	r3, #108	; 0x6c
 800fc32:	d155      	bne.n	800fce0 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xcf8>
				int retNum=sscanf(&pSerialReceiveBuffer[2], "%d %d %d %d %d %d",&holdflagtemp[0],&holdflagtemp[1],&holdflagtemp[2],&holdflagtemp[3],&holdflagtemp[4],&holdflagtemp[5]);
 800fc34:	f107 0308 	add.w	r3, r7, #8
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	1c98      	adds	r0, r3, #2
 800fc3c:	f107 0314 	add.w	r3, r7, #20
 800fc40:	1d19      	adds	r1, r3, #4
 800fc42:	f107 0214 	add.w	r2, r7, #20
 800fc46:	f107 0314 	add.w	r3, r7, #20
 800fc4a:	3314      	adds	r3, #20
 800fc4c:	9303      	str	r3, [sp, #12]
 800fc4e:	f107 0314 	add.w	r3, r7, #20
 800fc52:	3310      	adds	r3, #16
 800fc54:	9302      	str	r3, [sp, #8]
 800fc56:	f107 0314 	add.w	r3, r7, #20
 800fc5a:	330c      	adds	r3, #12
 800fc5c:	9301      	str	r3, [sp, #4]
 800fc5e:	f107 0314 	add.w	r3, r7, #20
 800fc62:	3308      	adds	r3, #8
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	460b      	mov	r3, r1
 800fc68:	492f      	ldr	r1, [pc, #188]	; (800fd28 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd40>)
 800fc6a:	f002 fe67 	bl	801293c <siscanf>
 800fc6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
				if (retNum == -1 )
 800fc72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800fc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc7a:	d115      	bne.n	800fca8 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xcc0>
					for (int i=0;i<BELLOWNUM;i++)
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800fc82:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800fc86:	2b05      	cmp	r3, #5
 800fc88:	dc42      	bgt.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
						holdflag[i]=0;
 800fc8a:	f107 030c 	add.w	r3, r7, #12
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800fc94:	323e      	adds	r2, #62	; 0x3e
 800fc96:	2100      	movs	r1, #0
 800fc98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					for (int i=0;i<BELLOWNUM;i++)
 800fc9c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800fca0:	3301      	adds	r3, #1
 800fca2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800fca6:	e7ec      	b.n	800fc82 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xc9a>
					for (int i=0;i<retNum;i++)
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800fcae:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800fcb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	da2a      	bge.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
						holdflag[holdflagtemp[i]]=0;
 800fcba:	f107 0314 	add.w	r3, r7, #20
 800fcbe:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800fcc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fcc6:	f107 030c 	add.w	r3, r7, #12
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	323e      	adds	r2, #62	; 0x3e
 800fcce:	2100      	movs	r1, #0
 800fcd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					for (int i=0;i<retNum;i++)
 800fcd4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800fcd8:	3301      	adds	r3, #1
 800fcda:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800fcde:	e7e6      	b.n	800fcae <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xcc6>
		else if(pSerialReceiveBuffer[0] == 'T')
 800fce0:	f107 0308 	add.w	r3, r7, #8
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	2b54      	cmp	r3, #84	; 0x54
 800fcea:	d111      	bne.n	800fd10 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd28>
				vvv+=1;
 800fcec:	4b0f      	ldr	r3, [pc, #60]	; (800fd2c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd44>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	4a0e      	ldr	r2, [pc, #56]	; (800fd2c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd44>)
 800fcf4:	6013      	str	r3, [r2, #0]
				vvv=vvv%3;
 800fcf6:	4b0d      	ldr	r3, [pc, #52]	; (800fd2c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd44>)
 800fcf8:	6819      	ldr	r1, [r3, #0]
 800fcfa:	4b0d      	ldr	r3, [pc, #52]	; (800fd30 <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd48>)
 800fcfc:	fb83 3201 	smull	r3, r2, r3, r1
 800fd00:	17cb      	asrs	r3, r1, #31
 800fd02:	1ad2      	subs	r2, r2, r3
 800fd04:	4613      	mov	r3, r2
 800fd06:	005b      	lsls	r3, r3, #1
 800fd08:	4413      	add	r3, r2
 800fd0a:	1aca      	subs	r2, r1, r3
 800fd0c:	4b07      	ldr	r3, [pc, #28]	; (800fd2c <_ZN16SOFT_ARM_SEGMENT14receiveCommandEPc+0xd44>)
 800fd0e:	601a      	str	r2, [r3, #0]
}
 800fd10:	bf00      	nop
 800fd12:	f507 7715 	add.w	r7, r7, #596	; 0x254
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	08016794 	.word	0x08016794
 800fd20:	080167a8 	.word	0x080167a8
 800fd24:	080167ac 	.word	0x080167ac
 800fd28:	080167c8 	.word	0x080167c8
 800fd2c:	200013a4 	.word	0x200013a4
 800fd30:	55555556 	.word	0x55555556

0800fd34 <_ZN16SOFT_ARM_SEGMENT17lowPassABLCommandEv>:

void SOFT_ARM_SEGMENT::lowPassABLCommand()
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
	alphaD=alphaD/2+alphaCommand/2;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800fd42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fd46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800fd50:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800fd54:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800fd58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	betaD=betaD/2+betaCommand/2;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800fd68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fd6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800fd76:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800fd7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800fd7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	lengthD=lengthD/2+lengthCommand/2;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800fd8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fd92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800fd9c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800fda0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800fda4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 800fdae:	bf00      	nop
 800fdb0:	370c      	adds	r7, #12
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	0000      	movs	r0, r0
 800fdbc:	0000      	movs	r0, r0
	...

0800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>:

void SOFT_ARM_SEGMENT::increaseFrequency(float dFre){
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	ed87 0a00 	vstr	s0, [r7]
	frequency = frequency+dFre;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 800fdd2:	edd7 7a00 	vldr	s15, [r7]
 800fdd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	frequency = CONSTRAIN(frequency,0.05,10000);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800fde6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fdea:	ed9f 6b25 	vldr	d6, [pc, #148]	; 800fe80 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0xc0>
 800fdee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf6:	d501      	bpl.n	800fdfc <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0x3c>
 800fdf8:	4b23      	ldr	r3, [pc, #140]	; (800fe88 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0xc8>)
 800fdfa:	e00e      	b.n	800fe1a <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0x5a>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800fe02:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800fe8c <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0xcc>
 800fe06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0e:	dd01      	ble.n	800fe14 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0x54>
 800fe10:	4b1f      	ldr	r3, [pc, #124]	; (800fe90 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0xd0>)
 800fe12:	e002      	b.n	800fe1a <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0x5a>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	for (int i = 0; i < BELLOWNUM; i++) {
 800fe20:	2300      	movs	r3, #0
 800fe22:	60fb      	str	r3, [r7, #12]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b05      	cmp	r3, #5
 800fe28:	dc26      	bgt.n	800fe78 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0xb8>
		basePlatform->chambers[i]->valves[0].writeFrequency(frequency);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fe30:	689a      	ldr	r2, [r3, #8]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	4413      	add	r3, r2
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	1d1a      	adds	r2, r3, #4
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800fe42:	eeb0 0a67 	vmov.f32	s0, s15
 800fe46:	4610      	mov	r0, r2
 800fe48:	f7fc fba2 	bl	800c590 <_ZN14SOLENOID_VALVE14writeFrequencyEf>
		basePlatform->chambers[i]->valves[1].writeFrequency(frequency);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fe52:	689a      	ldr	r2, [r3, #8]
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4413      	add	r3, r2
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f103 021c 	add.w	r2, r3, #28
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800fe66:	eeb0 0a67 	vmov.f32	s0, s15
 800fe6a:	4610      	mov	r0, r2
 800fe6c:	f7fc fb90 	bl	800c590 <_ZN14SOLENOID_VALVE14writeFrequencyEf>
	for (int i = 0; i < BELLOWNUM; i++) {
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	3301      	adds	r3, #1
 800fe74:	60fb      	str	r3, [r7, #12]
 800fe76:	e7d5      	b.n	800fe24 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf+0x64>
	}
}
 800fe78:	bf00      	nop
 800fe7a:	3710      	adds	r7, #16
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	9999999a 	.word	0x9999999a
 800fe84:	3fa99999 	.word	0x3fa99999
 800fe88:	3d4ccccd 	.word	0x3d4ccccd
 800fe8c:	461c4000 	.word	0x461c4000
 800fe90:	461c4000 	.word	0x461c4000

0800fe94 <_ZN16SOFT_ARM_SEGMENT12readPressureEi>:
{
	openingBase = openingBase+dVel;
}

float SOFT_ARM_SEGMENT::readPressure(int num)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
	pressure[num]=basePlatform->chambers[num]->readPressure();
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fea4:	689a      	ldr	r2, [r3, #8]
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	4413      	add	r3, r2
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fb fa49 	bl	800b346 <_ZN7CHAMBER12readPressureEv>
 800feb4:	eef0 7a40 	vmov.f32	s15, s0
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	3304      	adds	r3, #4
 800febe:	009b      	lsls	r3, r3, #2
 800fec0:	4413      	add	r3, r2
 800fec2:	3304      	adds	r3, #4
 800fec4:	edc3 7a00 	vstr	s15, [r3]
	pressureFil[num]=basePlatform->chambers[num]->pressureFil;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fece:	689a      	ldr	r2, [r3, #8]
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	4413      	add	r3, r2
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800fedc:	6879      	ldr	r1, [r7, #4]
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	330a      	adds	r3, #10
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	440b      	add	r3, r1
 800fee6:	3304      	adds	r3, #4
 800fee8:	601a      	str	r2, [r3, #0]
	return pressure[num];
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	3304      	adds	r3, #4
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	4413      	add	r3, r2
 800fef4:	3304      	adds	r3, #4
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	ee07 3a90 	vmov	s15, r3
}
 800fefc:	eeb0 0a67 	vmov.f32	s0, s15
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <_ZN16SOFT_ARM_SEGMENT15readPressureAllEv>:
void SOFT_ARM_SEGMENT::readPressureAll()
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b084      	sub	sp, #16
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BELLOWNUM; i++) {
 800ff0e:	2300      	movs	r3, #0
 800ff10:	60fb      	str	r3, [r7, #12]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2b05      	cmp	r3, #5
 800ff16:	dc07      	bgt.n	800ff28 <_ZN16SOFT_ARM_SEGMENT15readPressureAllEv+0x22>
		readPressure(i);
 800ff18:	68f9      	ldr	r1, [r7, #12]
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7ff ffba 	bl	800fe94 <_ZN16SOFT_ARM_SEGMENT12readPressureEi>
	for (int i = 0; i < BELLOWNUM; i++) {
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	3301      	adds	r3, #1
 800ff24:	60fb      	str	r3, [r7, #12]
 800ff26:	e7f4      	b.n	800ff12 <_ZN16SOFT_ARM_SEGMENT15readPressureAllEv+0xc>
	}
}
 800ff28:	bf00      	nop
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <_ZN16SOFT_ARM_SEGMENT15writeOpeningAllEf>:

void SOFT_ARM_SEGMENT::writeOpeningAll(float op)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	ed87 0a00 	vstr	s0, [r7]
	for (int i = 0; i < BELLOWNUM; i++) {
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	60fb      	str	r3, [r7, #12]
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2b05      	cmp	r3, #5
 800ff44:	dc10      	bgt.n	800ff68 <_ZN16SOFT_ARM_SEGMENT15writeOpeningAllEf+0x38>
		basePlatform->chambers[i]->writeOpening(op);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ff4c:	689a      	ldr	r2, [r3, #8]
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	009b      	lsls	r3, r3, #2
 800ff52:	4413      	add	r3, r2
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	ed97 0a00 	vldr	s0, [r7]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fb fb0e 	bl	800b57c <_ZN7CHAMBER12writeOpeningEf>
	for (int i = 0; i < BELLOWNUM; i++) {
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	3301      	adds	r3, #1
 800ff64:	60fb      	str	r3, [r7, #12]
 800ff66:	e7eb      	b.n	800ff40 <_ZN16SOFT_ARM_SEGMENT15writeOpeningAllEf+0x10>
	}
}
 800ff68:	bf00      	nop
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv>:

void SOFT_ARM_SEGMENT::controlPressureAll()
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BELLOWNUM; i++) {
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60fb      	str	r3, [r7, #12]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2b05      	cmp	r3, #5
 800ff80:	dc6c      	bgt.n	801005c <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0xec>
		/*************Holding flag would override the control outcome***********/
		if(holdflag[i] == 1){
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	323e      	adds	r2, #62	; 0x3e
 800ff88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d10d      	bne.n	800ffac <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0x3c>
			basePlatform->chambers[i]->writeOpening(0);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ff96:	689a      	ldr	r2, [r3, #8]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4413      	add	r3, r2
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8010064 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0xf4>
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7fb fae9 	bl	800b57c <_ZN7CHAMBER12writeOpeningEf>
 800ffaa:	e053      	b.n	8010054 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0xe4>
		}
		else
		{
			pressureD[i]=CONSTRAIN(pressureD[i],pressureCommandMin[i],pressureCommandMax[i]);
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	3316      	adds	r3, #22
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	ed93 7a00 	vldr	s14, [r3]
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	3344      	adds	r3, #68	; 0x44
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4413      	add	r3, r2
 800ffc4:	edd3 7a00 	vldr	s15, [r3]
 800ffc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ffcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd0:	d506      	bpl.n	800ffe0 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0x70>
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	3344      	adds	r3, #68	; 0x44
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4413      	add	r3, r2
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	e01f      	b.n	8010020 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0xb0>
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	3316      	adds	r3, #22
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	4413      	add	r3, r2
 800ffea:	ed93 7a00 	vldr	s14, [r3]
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	334a      	adds	r3, #74	; 0x4a
 800fff4:	009b      	lsls	r3, r3, #2
 800fff6:	4413      	add	r3, r2
 800fff8:	edd3 7a00 	vldr	s15, [r3]
 800fffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010004:	dd06      	ble.n	8010014 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0xa4>
 8010006:	687a      	ldr	r2, [r7, #4]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	334a      	adds	r3, #74	; 0x4a
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	4413      	add	r3, r2
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	e005      	b.n	8010020 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0xb0>
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	3316      	adds	r3, #22
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4413      	add	r3, r2
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	6879      	ldr	r1, [r7, #4]
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	3216      	adds	r2, #22
 8010026:	0092      	lsls	r2, r2, #2
 8010028:	440a      	add	r2, r1
 801002a:	6013      	str	r3, [r2, #0]
			basePlatform->chambers[i]->writePressure(pressureD[i]);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010032:	689a      	ldr	r2, [r3, #8]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4413      	add	r3, r2
 801003a:	6819      	ldr	r1, [r3, #0]
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	3316      	adds	r3, #22
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	edd3 7a00 	vldr	s15, [r3]
 801004a:	eeb0 0a67 	vmov.f32	s0, s15
 801004e:	4608      	mov	r0, r1
 8010050:	f7fb f992 	bl	800b378 <_ZN7CHAMBER13writePressureEf>
	for (int i = 0; i < BELLOWNUM; i++) {
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	3301      	adds	r3, #1
 8010058:	60fb      	str	r3, [r7, #12]
 801005a:	e78f      	b.n	800ff7c <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv+0xc>
		}
	}
}
 801005c:	bf00      	nop
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	00000000 	.word	0x00000000

08010068 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi>:
	pressureD[num]=CONSTRAIN(pressureD[num],pressureCommandMin[num],pressureCommandMax[num]);

}

void SOFT_ARM_SEGMENT::joyStickController(int joystickMode)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	ed2d 8b02 	vpush	{d8}
 801006e:	b08c      	sub	sp, #48	; 0x30
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
	/******************Buttons*****************************/
		//take care of button 2 every 1ms

		// mode = joyStick.BtnThumbL;
		 joyStick.jx = ((joyStick.jx < Rmin && joyStick.jx > -Rmin)? 0 : (CONSTRAIN(joyStick.jx,-Rmax,Rmax)));
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8010082:	429a      	cmp	r2, r3
 8010084:	da08      	bge.n	8010098 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x30>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8010092:	425b      	negs	r3, r3
 8010094:	429a      	cmp	r2, r3
 8010096:	dc1d      	bgt.n	80100d4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x6c>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80100a4:	425b      	negs	r3, r3
 80100a6:	429a      	cmp	r2, r3
 80100a8:	da04      	bge.n	80100b4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x4c>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80100b0:	425b      	negs	r3, r3
 80100b2:	e010      	b.n	80100d6 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x6e>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80100c0:	429a      	cmp	r2, r3
 80100c2:	dd03      	ble.n	80100cc <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x64>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80100ca:	e004      	b.n	80100d6 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x6e>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100d2:	e000      	b.n	80100d6 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x6e>
 80100d4:	2300      	movs	r3, #0
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		 joyStick.jy = ((joyStick.jy < Rmin && joyStick.jy > -Rmin)? 0 : (CONSTRAIN(joyStick.jy,-Rmax,Rmax)));
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80100e8:	429a      	cmp	r2, r3
 80100ea:	da08      	bge.n	80100fe <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x96>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80100f8:	425b      	negs	r3, r3
 80100fa:	429a      	cmp	r2, r3
 80100fc:	dc1d      	bgt.n	801013a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0xd2>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 801010a:	425b      	negs	r3, r3
 801010c:	429a      	cmp	r2, r3
 801010e:	da04      	bge.n	801011a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0xb2>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8010116:	425b      	negs	r3, r3
 8010118:	e010      	b.n	801013c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0xd4>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8010126:	429a      	cmp	r2, r3
 8010128:	dd03      	ble.n	8010132 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0xca>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8010130:	e004      	b.n	801013c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0xd4>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010138:	e000      	b.n	801013c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0xd4>
 801013a:	2300      	movs	r3, #0
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		 //only check button 1  every 100ms
		if (buttonCheckTime[1]-- <= 0)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8010148:	1e59      	subs	r1, r3, #1
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	f8c2 1278 	str.w	r1, [r2, #632]	; 0x278
 8010150:	2b00      	cmp	r3, #0
 8010152:	bfd4      	ite	le
 8010154:	2301      	movle	r3, #1
 8010156:	2300      	movgt	r3, #0
 8010158:	b2db      	uxtb	r3, r3
 801015a:	2b00      	cmp	r3, #0
 801015c:	f000 80e5 	beq.w	801032a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2c2>
		{
			if (joyStick.jz>100) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010166:	2b64      	cmp	r3, #100	; 0x64
 8010168:	dd6b      	ble.n	8010242 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x1da>
				if(0.05<=frequency && frequency<0.5)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8010170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010174:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8010470 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x408>
 8010178:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801017c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010180:	db0f      	blt.n	80101a2 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x13a>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8010188:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801018c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010194:	d505      	bpl.n	80101a2 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x13a>
					increaseFrequency(0.05);
 8010196:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8010478 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x410>
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f7ff fe10 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 80101a0:	e0bf      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<1)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80101a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b4:	d505      	bpl.n	80101c2 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x15a>
					increaseFrequency(0.1);
 80101b6:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 801047c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x414>
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7ff fe00 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 80101c0:	e0af      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<50)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80101c8:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8010480 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x418>
 80101cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d4:	d505      	bpl.n	80101e2 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x17a>
					increaseFrequency(1);
 80101d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7ff fdf0 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 80101e0:	e09f      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<200)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80101e8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8010484 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x41c>
 80101ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f4:	d505      	bpl.n	8010202 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x19a>
					increaseFrequency(2);
 80101f6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7ff fde0 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 8010200:	e08f      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<2000)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8010208:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8010488 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x420>
 801020c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010214:	d505      	bpl.n	8010222 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x1ba>
					increaseFrequency(10);
 8010216:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f7ff fdd0 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 8010220:	e07f      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<10000)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8010228:	ed9f 7a98 	vldr	s14, [pc, #608]	; 801048c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x424>
 801022c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010234:	d575      	bpl.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
					increaseFrequency(100);
 8010236:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8010490 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x428>
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff fdc0 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 8010240:	e06f      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
			}
			else if(joyStick.jRz>100)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010248:	2b64      	cmp	r3, #100	; 0x64
 801024a:	dd6a      	ble.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
			{
				if(0.05<frequency && frequency<=0.5)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8010252:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010256:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8010470 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x408>
 801025a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801025e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010262:	dd0f      	ble.n	8010284 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x21c>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801026a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801026e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010276:	d805      	bhi.n	8010284 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x21c>
					increaseFrequency(-0.05);
 8010278:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8010494 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x42c>
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7ff fd9f 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 8010282:	e04e      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<=1)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801028a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801028e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010296:	d805      	bhi.n	80102a4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x23c>
					increaseFrequency(-0.1);
 8010298:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8010498 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x430>
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7ff fd8f 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 80102a2:	e03e      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<=50)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80102aa:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8010480 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x418>
 80102ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102b6:	d805      	bhi.n	80102c4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x25c>
					increaseFrequency(-1);
 80102b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff fd7f 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 80102c2:	e02e      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<=200)
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80102ca:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8010484 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x41c>
 80102ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d6:	d805      	bhi.n	80102e4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x27c>
					increaseFrequency(-2);
 80102d8:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f7ff fd6f 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 80102e2:	e01e      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<=2000)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80102ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8010488 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x420>
 80102ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f6:	d805      	bhi.n	8010304 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x29c>
					increaseFrequency(-10);
 80102f8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f7ff fd5f 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
 8010302:	e00e      	b.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
				else if(frequency<=10000)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801030a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801048c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x424>
 801030e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010316:	d804      	bhi.n	8010322 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x2ba>
					increaseFrequency(-100);
 8010318:	ed9f 0a60 	vldr	s0, [pc, #384]	; 801049c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x434>
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7ff fd4f 	bl	800fdc0 <_ZN16SOFT_ARM_SEGMENT17increaseFrequencyEf>
			}
			buttonCheckTime[1] = 20;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2214      	movs	r2, #20
 8010326:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
		}

		//no single button pressed
		if(!(joyStick.BtnEast || joyStick.BtnNorth || joyStick.BtnSouth || joyStick.BtnWest || joyStick.BtnThumbL || joyStick.BtnThumbR))
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8010330:	2b00      	cmp	r3, #0
 8010332:	f040 831a 	bne.w	801096a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x902>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 801033c:	2b00      	cmp	r3, #0
 801033e:	f040 8314 	bne.w	801096a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x902>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8010348:	2b00      	cmp	r3, #0
 801034a:	f040 830e 	bne.w	801096a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x902>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8010354:	2b00      	cmp	r3, #0
 8010356:	f040 8308 	bne.w	801096a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x902>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010360:	2b00      	cmp	r3, #0
 8010362:	f040 8302 	bne.w	801096a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x902>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801036c:	2b00      	cmp	r3, #0
 801036e:	f040 82fc 	bne.w	801096a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x902>
			{
			/******************Jx Jy*****************************/
			//dead zone and saturation
			 joyStick.jRx = ((joyStick.jRx < Rmin && joyStick.jRx > -Rmin)? 0 : (CONSTRAIN(joyStick.jRx,-Rmax,Rmax)));
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 801037e:	429a      	cmp	r2, r3
 8010380:	da08      	bge.n	8010394 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x32c>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 801038e:	425b      	negs	r3, r3
 8010390:	429a      	cmp	r2, r3
 8010392:	dc1d      	bgt.n	80103d0 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x368>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80103a0:	425b      	negs	r3, r3
 80103a2:	429a      	cmp	r2, r3
 80103a4:	da04      	bge.n	80103b0 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x348>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80103ac:	425b      	negs	r3, r3
 80103ae:	e010      	b.n	80103d2 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x36a>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80103bc:	429a      	cmp	r2, r3
 80103be:	dd03      	ble.n	80103c8 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x360>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80103c6:	e004      	b.n	80103d2 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x36a>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ce:	e000      	b.n	80103d2 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x36a>
 80103d0:	2300      	movs	r3, #0
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			 joyStick.jRy = ((joyStick.jRy < Rmin && joyStick.jRy > -Rmin)? 0 : (CONSTRAIN(joyStick.jRy,-Rmax,Rmax)));
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80103e4:	429a      	cmp	r2, r3
 80103e6:	da08      	bge.n	80103fa <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x392>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80103f4:	425b      	negs	r3, r3
 80103f6:	429a      	cmp	r2, r3
 80103f8:	dc1d      	bgt.n	8010436 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x3ce>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8010406:	425b      	negs	r3, r3
 8010408:	429a      	cmp	r2, r3
 801040a:	da04      	bge.n	8010416 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x3ae>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8010412:	425b      	negs	r3, r3
 8010414:	e010      	b.n	8010438 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x3d0>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8010422:	429a      	cmp	r2, r3
 8010424:	dd03      	ble.n	801042e <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x3c6>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 801042c:	e004      	b.n	8010438 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x3d0>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010434:	e000      	b.n	8010438 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x3d0>
 8010436:	2300      	movs	r3, #0
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

			if(joystickMode==0){
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	2b00      	cmp	r3, #0
 8010442:	f040 81b4 	bne.w	80107ae <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x746>

				//opening base for elongation and contraction
				if(joyStick.jy>0)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801044c:	2b00      	cmp	r3, #0
 801044e:	dd05      	ble.n	801045c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x3f4>
								 openingBase = 0.5; //elongation
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8010456:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 801045a:	e028      	b.n	80104ae <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x446>
							 else if(joyStick.jy<0)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010462:	2b00      	cmp	r3, #0
 8010464:	da1e      	bge.n	80104a4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x43c>
								 openingBase = -0.8; //contraction
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4a0d      	ldr	r2, [pc, #52]	; (80104a0 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x438>)
 801046a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 801046e:	e01e      	b.n	80104ae <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x446>
 8010470:	9999999a 	.word	0x9999999a
 8010474:	3fa99999 	.word	0x3fa99999
 8010478:	3d4ccccd 	.word	0x3d4ccccd
 801047c:	3dcccccd 	.word	0x3dcccccd
 8010480:	42480000 	.word	0x42480000
 8010484:	43480000 	.word	0x43480000
 8010488:	44fa0000 	.word	0x44fa0000
 801048c:	461c4000 	.word	0x461c4000
 8010490:	42c80000 	.word	0x42c80000
 8010494:	bd4ccccd 	.word	0xbd4ccccd
 8010498:	bdcccccd 	.word	0xbdcccccd
 801049c:	c2c80000 	.word	0xc2c80000
 80104a0:	bf4ccccd 	.word	0xbf4ccccd
							 else
								 openingBase = 0; //rotation
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f04f 0200 	mov.w	r2, #0
 80104aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

				//additional opening for rotation
				if(joyStick.jRx==0 && joyStick.jRy == 0){
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d119      	bne.n	80104ec <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x484>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d114      	bne.n	80104ec <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x484>
					rawAngle=0;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f04f 0200 	mov.w	r2, #0
 80104c8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
					rawAmplitude=0;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f04f 0200 	mov.w	r2, #0
 80104d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
					rawAmplitudeMax = Rmax;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80104dc:	ee07 3a90 	vmov	s15, r3
 80104e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	edc3 7a9c 	vstr	s15, [r3, #624]	; 0x270
 80104ea:	e0e7      	b.n	80106bc <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x654>
				}
				else{
					rawAngle = atan2f((float)joyStick.jRx, (float)joyStick.jRy);   //(-pi~pi)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104f2:	ee07 3a90 	vmov	s15, r3
 80104f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010500:	ee07 3a10 	vmov	s14, r3
 8010504:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010508:	eef0 0a47 	vmov.f32	s1, s14
 801050c:	eeb0 0a67 	vmov.f32	s0, s15
 8010510:	f000 ff84 	bl	801141c <atan2f>
 8010514:	eef0 7a40 	vmov.f32	s15, s0
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
					arm_sqrt_f32((float)(joyStick.jRx * joyStick.jRx + joyStick.jRy * joyStick.jRy),&(rawAmplitude));
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 801052a:	fb02 f203 	mul.w	r2, r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010534:	6879      	ldr	r1, [r7, #4]
 8010536:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 801053a:	fb01 f303 	mul.w	r3, r1, r3
 801053e:	4413      	add	r3, r2
 8010540:	ee07 3a90 	vmov	s15, r3
 8010544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 801054e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8010552:	623b      	str	r3, [r7, #32]
    if (in >= 0.0f)
 8010554:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801055c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010560:	db09      	blt.n	8010576 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x50e>
      *pOut = __builtin_sqrtf(in);
 8010562:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8010566:	f000 ff5b 	bl	8011420 <sqrtf>
 801056a:	eef0 7a40 	vmov.f32	s15, s0
 801056e:	6a3b      	ldr	r3, [r7, #32]
 8010570:	edc3 7a00 	vstr	s15, [r3]
 8010574:	e003      	b.n	801057e <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x516>
      *pOut = 0.0f;
 8010576:	6a3b      	ldr	r3, [r7, #32]
 8010578:	f04f 0200 	mov.w	r2, #0
 801057c:	601a      	str	r2, [r3, #0]

					if (0< rawAngle)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8010584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058c:	dd43      	ble.n	8010616 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x5ae>
					{
						if( rawAngle < M_PI_4 || rawAngle > M_3PI_4)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8010594:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010598:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8010870 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x808>
 801059c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80105a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a4:	d40b      	bmi.n	80105be <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x556>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 80105ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80105b0:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8010878 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x810>
 80105b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80105b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105bc:	dd15      	ble.n	80105ea <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x582>
							rawAmplitudeMax = Rmax / arm_cos_f32(rawAngle);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80105c4:	ee07 3a90 	vmov	s15, r3
 80105c8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 80105d2:	eeb0 0a67 	vmov.f32	s0, s15
 80105d6:	f7f0 f88d 	bl	80006f4 <arm_cos_f32>
 80105da:	eeb0 7a40 	vmov.f32	s14, s0
 80105de:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	edc3 7a9c 	vstr	s15, [r3, #624]	; 0x270
 80105e8:	e068      	b.n	80106bc <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x654>
						else
							rawAmplitudeMax = Rmax / arm_sin_f32(rawAngle);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80105f0:	ee07 3a90 	vmov	s15, r3
 80105f4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 80105fe:	eeb0 0a67 	vmov.f32	s0, s15
 8010602:	f7f0 f8f3 	bl	80007ec <arm_sin_f32>
 8010606:	eeb0 7a40 	vmov.f32	s14, s0
 801060a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	edc3 7a9c 	vstr	s15, [r3, #624]	; 0x270
 8010614:	e052      	b.n	80106bc <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x654>
					}
					else
					{
						if (-M_PI_4 < rawAngle || rawAngle < -M_3PI_4)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 801061c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010620:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8010880 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x818>
 8010624:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801062c:	dc0b      	bgt.n	8010646 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x5de>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8010634:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010638:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8010888 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x820>
 801063c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010644:	d51d      	bpl.n	8010682 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x61a>
							rawAmplitudeMax = Rmax / arm_cos_f32(rawAngle+M_PI);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 801064c:	ee07 3a90 	vmov	s15, r3
 8010650:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 801065a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801065e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8010890 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x828>
 8010662:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010666:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801066a:	eeb0 0a67 	vmov.f32	s0, s15
 801066e:	f7f0 f841 	bl	80006f4 <arm_cos_f32>
 8010672:	eeb0 7a40 	vmov.f32	s14, s0
 8010676:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	edc3 7a9c 	vstr	s15, [r3, #624]	; 0x270
 8010680:	e01c      	b.n	80106bc <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x654>
						else
							rawAmplitudeMax = Rmax / arm_sin_f32(rawAngle+M_PI);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8010688:	ee07 3a90 	vmov	s15, r3
 801068c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8010696:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801069a:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8010890 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x828>
 801069e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80106a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80106a6:	eeb0 0a67 	vmov.f32	s0, s15
 80106aa:	f7f0 f89f 	bl	80007ec <arm_sin_f32>
 80106ae:	eeb0 7a40 	vmov.f32	s14, s0
 80106b2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	edc3 7a9c 	vstr	s15, [r3, #624]	; 0x270
					}
				}
				angleCommand = rawAngle;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
				amplitudeCommand = fabsf(rawAmplitude/rawAmplitudeMax);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	edd3 6a9b 	vldr	s13, [r3, #620]	; 0x26c
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	ed93 7a9c 	vldr	s14, [r3, #624]	; 0x270
 80106d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80106d8:	eef0 7ae7 	vabs.f32	s15, s15
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
				for (int i = 0; i < BELLOWNUM; i++) {
 80106e2:	2300      	movs	r3, #0
 80106e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e8:	2b05      	cmp	r3, #5
 80106ea:	f300 8193 	bgt.w	8010a14 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9ac>
					bellowProjection[i] = (arm_cos_f32(angleCommand)* bellowConfigurationPositionX[i] + arm_sin_f32(angleCommand) * bellowConfigurationPositionY[i]);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	edd3 7a96 	vldr	s15, [r3, #600]	; 0x258
 80106f4:	eeb0 0a67 	vmov.f32	s0, s15
 80106f8:	f7ef fffc 	bl	80006f4 <arm_cos_f32>
 80106fc:	eeb0 7a40 	vmov.f32	s14, s0
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010704:	3374      	adds	r3, #116	; 0x74
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	4413      	add	r3, r2
 801070a:	3304      	adds	r3, #4
 801070c:	edd3 7a00 	vldr	s15, [r3]
 8010710:	ee27 8a27 	vmul.f32	s16, s14, s15
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	edd3 7a96 	vldr	s15, [r3, #600]	; 0x258
 801071a:	eeb0 0a67 	vmov.f32	s0, s15
 801071e:	f7f0 f865 	bl	80007ec <arm_sin_f32>
 8010722:	eeb0 7a40 	vmov.f32	s14, s0
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072a:	337a      	adds	r3, #122	; 0x7a
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	4413      	add	r3, r2
 8010730:	3304      	adds	r3, #4
 8010732:	edd3 7a00 	vldr	s15, [r3]
 8010736:	ee67 7a27 	vmul.f32	s15, s14, s15
 801073a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801073e:	687a      	ldr	r2, [r7, #4]
 8010740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010742:	3368      	adds	r3, #104	; 0x68
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	4413      	add	r3, r2
 8010748:	edc3 7a00 	vstr	s15, [r3]
					basePlatform->chambers[i]->writeOpening(-(bellowProjection[i]/bellowConfigurationRadius * amplitudeCommand*0.5) + openingBase);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010752:	689a      	ldr	r2, [r3, #8]
 8010754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010756:	009b      	lsls	r3, r3, #2
 8010758:	4413      	add	r3, r2
 801075a:	6819      	ldr	r1, [r3, #0]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8010762:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076a:	3368      	adds	r3, #104	; 0x68
 801076c:	009b      	lsls	r3, r3, #2
 801076e:	4413      	add	r3, r2
 8010770:	edd3 5a00 	vldr	s11, [r3]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 801077a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8010784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010788:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801078c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010790:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010794:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010798:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801079c:	eeb0 0a67 	vmov.f32	s0, s15
 80107a0:	4608      	mov	r0, r1
 80107a2:	f7fa feeb 	bl	800b57c <_ZN7CHAMBER12writeOpeningEf>
				for (int i = 0; i < BELLOWNUM; i++) {
 80107a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a8:	3301      	adds	r3, #1
 80107aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107ac:	e79b      	b.n	80106e6 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x67e>
					}
			}
			else if(joystickMode==1){
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	f040 812f 	bne.w	8010a14 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9ac>
				//pressure base for elongation and contraction
				if(joyStick.jy>0)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dd0a      	ble.n	80107d6 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x76e>
					 pressureBase += 50; //elongation
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80107c6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80108a8 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x840>
 80107ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
 80107d4:	e00e      	b.n	80107f4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x78c>
				 else if(joyStick.jy<0)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107dc:	2b00      	cmp	r3, #0
 80107de:	da09      	bge.n	80107f4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x78c>
					 pressureBase += -50; //contraction
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80107e6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80108a8 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x840>
 80107ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

				//additional pressure for rotation
				angleCommand += ((float)joyStick.jRy)/Rmax*0.01;   //(-1 degree ~1 degree)
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	edd3 7a96 	vldr	s15, [r3, #600]	; 0x258
 80107fa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010804:	ee07 3a90 	vmov	s15, r3
 8010808:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8010812:	ee07 3a90 	vmov	s15, r3
 8010816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801081a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 801081e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010822:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8010898 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x830>
 8010826:	ee27 7b05 	vmul.f64	d7, d7, d5
 801082a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801082e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	edc3 7a96 	vstr	s15, [r3, #600]	; 0x258
				if(angleCommand>M_PI)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	edd3 7a96 	vldr	s15, [r3, #600]	; 0x258
 801083e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010842:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8010890 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x828>
 8010846:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084e:	dd2d      	ble.n	80108ac <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x844>
					angleCommand-=2*M_PI;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	edd3 7a96 	vldr	s15, [r3, #600]	; 0x258
 8010856:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801085a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80108a0 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x838>
 801085e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	edc3 7a96 	vstr	s15, [r3, #600]	; 0x258
 801086c:	e038      	b.n	80108e0 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x878>
 801086e:	bf00      	nop
 8010870:	54442d18 	.word	0x54442d18
 8010874:	3fe921fb 	.word	0x3fe921fb
 8010878:	7f3321d2 	.word	0x7f3321d2
 801087c:	4002d97c 	.word	0x4002d97c
 8010880:	54442d18 	.word	0x54442d18
 8010884:	bfe921fb 	.word	0xbfe921fb
 8010888:	7f3321d2 	.word	0x7f3321d2
 801088c:	c002d97c 	.word	0xc002d97c
 8010890:	54442d18 	.word	0x54442d18
 8010894:	400921fb 	.word	0x400921fb
 8010898:	47ae147b 	.word	0x47ae147b
 801089c:	3f847ae1 	.word	0x3f847ae1
 80108a0:	54442d18 	.word	0x54442d18
 80108a4:	401921fb 	.word	0x401921fb
 80108a8:	42480000 	.word	0x42480000
				else if(angleCommand<=-M_PI)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	edd3 7a96 	vldr	s15, [r3, #600]	; 0x258
 80108b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80108b6:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8010a28 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9c0>
 80108ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80108be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c2:	d80d      	bhi.n	80108e0 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x878>
					angleCommand+=2*M_PI;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	edd3 7a96 	vldr	s15, [r3, #600]	; 0x258
 80108ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80108ce:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8010a30 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9c8>
 80108d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80108d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	edc3 7a96 	vstr	s15, [r3, #600]	; 0x258

				amplitudeCommand += ((float)joyStick.jRx)/Rmax*0.01;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 80108e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108f0:	ee07 3a90 	vmov	s15, r3
 80108f4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80108fe:	ee07 3a90 	vmov	s15, r3
 8010902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010906:	eec5 7a87 	vdiv.f32	s15, s11, s14
 801090a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801090e:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8010a38 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9d0>
 8010912:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010916:	ee36 7b07 	vadd.f64	d7, d6, d7
 801091a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
				amplitudeCommand=CONSTRAIN(amplitudeCommand,0,M_PI/2);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 801092a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010932:	d502      	bpl.n	801093a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x8d2>
 8010934:	f04f 0300 	mov.w	r3, #0
 8010938:	e010      	b.n	801095c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x8f4>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8010940:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010944:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8010a40 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9d8>
 8010948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010950:	dd01      	ble.n	8010956 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x8ee>
 8010952:	4b3d      	ldr	r3, [pc, #244]	; (8010a48 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9e0>)
 8010954:	e002      	b.n	801095c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x8f4>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c

				controlPressureAll();
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff fb04 	bl	800ff70 <_ZN16SOFT_ARM_SEGMENT18controlPressureAllEv>
			}
 8010968:	e054      	b.n	8010a14 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9ac>
		}
		 else {
			 int individualChoosenFlag[6]={0,0,0,0,0,0};
 801096a:	f107 0308 	add.w	r3, r7, #8
 801096e:	2200      	movs	r2, #0
 8010970:	601a      	str	r2, [r3, #0]
 8010972:	605a      	str	r2, [r3, #4]
 8010974:	609a      	str	r2, [r3, #8]
 8010976:	60da      	str	r2, [r3, #12]
 8010978:	611a      	str	r2, [r3, #16]
 801097a:	615a      	str	r2, [r3, #20]
			 if (joyStick.BtnSouth)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8010982:	2b00      	cmp	r3, #0
 8010984:	d001      	beq.n	801098a <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x922>
				 individualChoosenFlag[0]=1;
 8010986:	2301      	movs	r3, #1
 8010988:	60bb      	str	r3, [r7, #8]
			 if(joyStick.BtnEast)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8010990:	2b00      	cmp	r3, #0
 8010992:	d001      	beq.n	8010998 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x930>
				 individualChoosenFlag[1]=1;
 8010994:	2301      	movs	r3, #1
 8010996:	60fb      	str	r3, [r7, #12]
			 if(joyStick.BtnNorth)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x93e>
				 individualChoosenFlag[2]=1;
 80109a2:	2301      	movs	r3, #1
 80109a4:	613b      	str	r3, [r7, #16]
			 if(joyStick.BtnWest)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d001      	beq.n	80109b4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x94c>
				 individualChoosenFlag[3]=1;
 80109b0:	2301      	movs	r3, #1
 80109b2:	617b      	str	r3, [r7, #20]
			 if(joyStick.BtnThumbR)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d001      	beq.n	80109c2 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x95a>
				 individualChoosenFlag[4]=1;
 80109be:	2301      	movs	r3, #1
 80109c0:	61bb      	str	r3, [r7, #24]
			 if(joyStick.BtnThumbL)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d001      	beq.n	80109d0 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x968>
				 individualChoosenFlag[5]=1;
 80109cc:	2301      	movs	r3, #1
 80109ce:	61fb      	str	r3, [r7, #28]
			 for(int i=0;i<BELLOWNUM;i++)
 80109d0:	2300      	movs	r3, #0
 80109d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80109d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d6:	2b05      	cmp	r3, #5
 80109d8:	dc1d      	bgt.n	8010a16 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9ae>
				 if(individualChoosenFlag[i])
 80109da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80109e2:	4413      	add	r3, r2
 80109e4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d00f      	beq.n	8010a0c <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x9a4>
					 basePlatform->chambers[i]->writeOpening(openingBase);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80109f2:	689a      	ldr	r2, [r3, #8]
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4413      	add	r3, r2
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8010a02:	eeb0 0a67 	vmov.f32	s0, s15
 8010a06:	4610      	mov	r0, r2
 8010a08:	f7fa fdb8 	bl	800b57c <_ZN7CHAMBER12writeOpeningEf>
			 for(int i=0;i<BELLOWNUM;i++)
 8010a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0e:	3301      	adds	r3, #1
 8010a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a12:	e7df      	b.n	80109d4 <_ZN16SOFT_ARM_SEGMENT18joyStickControllerEi+0x96c>
			}
 8010a14:	bf00      	nop
		 }

}
 8010a16:	bf00      	nop
 8010a18:	3730      	adds	r7, #48	; 0x30
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	ecbd 8b02 	vpop	{d8}
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	f3af 8000 	nop.w
 8010a28:	54442d18 	.word	0x54442d18
 8010a2c:	c00921fb 	.word	0xc00921fb
 8010a30:	54442d18 	.word	0x54442d18
 8010a34:	401921fb 	.word	0x401921fb
 8010a38:	47ae147b 	.word	0x47ae147b
 8010a3c:	3f847ae1 	.word	0x3f847ae1
 8010a40:	54442d18 	.word	0x54442d18
 8010a44:	3ff921fb 	.word	0x3ff921fb
 8010a48:	3fc90fdb 	.word	0x3fc90fdb

08010a4c <_ZN16SOFT_ARM_SEGMENT10readLengthEv>:
		basePlatform->pSink.pump.start();
	else
		basePlatform->pSink.pump.stop();
}

float SOFT_ARM_SEGMENT::readLength() {
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
	float vol=AnalogRead(lengthAnalogPort);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7fb fbff 	bl	800c260 <AnalogRead>
 8010a62:	eef0 7a40 	vmov.f32	s15, s0
 8010a66:	edc7 7a03 	vstr	s15, [r7, #12]
	length= MAP(vol,0,10.0,0,1);
 8010a6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8010a6e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8010a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010a76:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010a98 <_ZN16SOFT_ARM_SEGMENT10readLengthEv+0x4c>
 8010a7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	edc3 7a00 	vstr	s15, [r3]
	return length;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	ee07 3a90 	vmov	s15, r3
}
 8010a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	00000000 	.word	0x00000000

08010a9c <_ZN16SOFT_ARM_SEGMENT7readIMUEPc>:

void SOFT_ARM_SEGMENT::readIMU(char *pBuffer) {
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
	IMUFRAME *pFrame=(IMUFRAME *)pBuffer;
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	60fb      	str	r3, [r7, #12]
	if(pFrame->headerEuler[0]==0x55 && pFrame->headerEuler[1]==0x53)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	2b55      	cmp	r3, #85	; 0x55
 8010ab0:	d178      	bne.n	8010ba4 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x108>
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	785b      	ldrb	r3, [r3, #1]
 8010ab6:	2b53      	cmp	r3, #83	; 0x53
 8010ab8:	d174      	bne.n	8010ba4 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x108>
	{
		imuData.angleX=(pFrame->Rx)/32768.0f*180;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010ac0:	b21b      	sxth	r3, r3
 8010ac2:	ee07 3a90 	vmov	s15, r3
 8010ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010aca:	eddf 6a39 	vldr	s13, [pc, #228]	; 8010bb0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x114>
 8010ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010ad2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010bb4 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 8010ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	edc3 7aab 	vstr	s15, [r3, #684]	; 0x2ac
		imuData.angleY=(pFrame->Ry)/32768.0f*180;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010ae6:	b21b      	sxth	r3, r3
 8010ae8:	ee07 3a90 	vmov	s15, r3
 8010aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010af0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8010bb0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x114>
 8010af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010af8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8010bb4 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 8010afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
		imuData.angleZ=(pFrame->Rz)/32768.0f*180;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010b0c:	b21b      	sxth	r3, r3
 8010b0e:	ee07 3a90 	vmov	s15, r3
 8010b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010bb0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x114>
 8010b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b1e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8010bb4 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x118>
 8010b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
		imuData.q0=(pFrame->q0)/32768.0f;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 8010b32:	b21b      	sxth	r3, r3
 8010b34:	ee07 3a90 	vmov	s15, r3
 8010b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b3c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8010bb0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x114>
 8010b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
		imuData.q1=(pFrame->q1)/32768.0f;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f9b3 300f 	ldrsh.w	r3, [r3, #15]
 8010b50:	b21b      	sxth	r3, r3
 8010b52:	ee07 3a90 	vmov	s15, r3
 8010b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b5a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8010bb0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x114>
 8010b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	edc3 7aaf 	vstr	s15, [r3, #700]	; 0x2bc
		imuData.q2=(pFrame->q2)/32768.0f;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f9b3 3011 	ldrsh.w	r3, [r3, #17]
 8010b6e:	b21b      	sxth	r3, r3
 8010b70:	ee07 3a90 	vmov	s15, r3
 8010b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b78:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8010bb0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x114>
 8010b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
		imuData.q3=(pFrame->q3)/32768.0f;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f9b3 3013 	ldrsh.w	r3, [r3, #19]
 8010b8c:	b21b      	sxth	r3, r3
 8010b8e:	ee07 3a90 	vmov	s15, r3
 8010b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b96:	eddf 6a06 	vldr	s13, [pc, #24]	; 8010bb0 <_ZN16SOFT_ARM_SEGMENT7readIMUEPc+0x114>
 8010b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4

	}
}
 8010ba4:	bf00      	nop
 8010ba6:	3714      	adds	r7, #20
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr
 8010bb0:	47000000 	.word	0x47000000
 8010bb4:	43340000 	.word	0x43340000

08010bb8 <_ZN16SOFT_ARM_SEGMENT7ABLD2PDEv>:




void SOFT_ARM_SEGMENT::ABLD2PD()
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	ed2d 8b02 	vpush	{d8}
 8010bbe:	b086      	sub	sp, #24
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
	//xd=At*((A*At)^-1)*b
	float b1=2*C1*(lengthD-length0)/radR/6;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 8010bca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8010bda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010bde:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	edd3 7aa8 	vldr	s15, [r3, #672]	; 0x2a0
 8010be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bec:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8010bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010bf4:	edc7 7a05 	vstr	s15, [r7, #20]
	float btem=C1*alphaD/6;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	ed93 7aaa 	vldr	s14, [r3, #680]	; 0x2a8
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8010c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010c08:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8010c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010c10:	edc7 7a04 	vstr	s15, [r7, #16]
	float b2=btem*arm_cos_f32(betaD);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8010c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8010c1e:	f7ef fd69 	bl	80006f4 <arm_cos_f32>
 8010c22:	eeb0 7a40 	vmov.f32	s14, s0
 8010c26:	edd7 7a04 	vldr	s15, [r7, #16]
 8010c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c2e:	edc7 7a03 	vstr	s15, [r7, #12]
	float b3= (1.7320508f)*btem*arm_sin_f32(betaD);
 8010c32:	edd7 7a04 	vldr	s15, [r7, #16]
 8010c36:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8010cf8 <_ZN16SOFT_ARM_SEGMENT7ABLD2PDEv+0x140>
 8010c3a:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8010c44:	eeb0 0a67 	vmov.f32	s0, s15
 8010c48:	f7ef fdd0 	bl	80007ec <arm_sin_f32>
 8010c4c:	eef0 7a40 	vmov.f32	s15, s0
 8010c50:	ee68 7a27 	vmul.f32	s15, s16, s15
 8010c54:	edc7 7a02 	vstr	s15, [r7, #8]

	pressureD[0]=b1+b2*2;
 8010c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8010c5c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010c60:	edd7 7a05 	vldr	s15, [r7, #20]
 8010c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	pressureD[1]=b1+b2+b3;
 8010c6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8010c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8010c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8010c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	pressureD[2]=b1-b2+b3;
 8010c88:	ed97 7a05 	vldr	s14, [r7, #20]
 8010c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010c90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8010c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	pressureD[3]=b1-b2*2;
 8010ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8010ca6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010caa:	ed97 7a05 	vldr	s14, [r7, #20]
 8010cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	pressureD[4]=b1-b2-b3;
 8010cb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8010cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8010cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8010cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	pressureD[5]=b1+b2-b3;
 8010cd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8010cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8010cda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8010ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

}
 8010cec:	bf00      	nop
 8010cee:	3718      	adds	r7, #24
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	ecbd 8b02 	vpop	{d8}
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	3fddb3d7 	.word	0x3fddb3d7
 8010cfc:	00000000 	.word	0x00000000

08010d00 <_ZN16SOFT_ARM_SEGMENT5P2ABLEv>:
	lengthD=(pressureD[0]+pressureD[1]+pressureD[2]+pressureD[3]+pressureD[4]+pressureD[5])/C1/2*radR+length0;
}



void SOFT_ARM_SEGMENT::P2ABL() {
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
	static float ro2=0;
	getPhyc();
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 f8c7 	bl	8010e9c <_ZN16SOFT_ARM_SEGMENT7getPhycEv>
	getPhys();
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f000 f8dc 	bl	8010ecc <_ZN16SOFT_ARM_SEGMENT7getPhysEv>
	arm_sqrt_f32(phyc*phyc+phys*phys,&ro2);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	ed93 7a03 	vldr	s14, [r3, #12]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8010d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	edd3 6a04 	vldr	s13, [r3, #16]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8010d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d38:	edc7 7a03 	vstr	s15, [r7, #12]
 8010d3c:	4b3e      	ldr	r3, [pc, #248]	; (8010e38 <_ZN16SOFT_ARM_SEGMENT5P2ABLEv+0x138>)
 8010d3e:	60bb      	str	r3, [r7, #8]
    if (in >= 0.0f)
 8010d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8010d44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4c:	db09      	blt.n	8010d62 <_ZN16SOFT_ARM_SEGMENT5P2ABLEv+0x62>
      *pOut = __builtin_sqrtf(in);
 8010d4e:	ed97 0a03 	vldr	s0, [r7, #12]
 8010d52:	f000 fb65 	bl	8011420 <sqrtf>
 8010d56:	eef0 7a40 	vmov.f32	s15, s0
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	edc3 7a00 	vstr	s15, [r3]
 8010d60:	e003      	b.n	8010d6a <_ZN16SOFT_ARM_SEGMENT5P2ABLEv+0x6a>
      *pOut = 0.0f;
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	f04f 0200 	mov.w	r2, #0
 8010d68:	601a      	str	r2, [r3, #0]
	alpha=ro2/C1;
 8010d6a:	4b33      	ldr	r3, [pc, #204]	; (8010e38 <_ZN16SOFT_ARM_SEGMENT5P2ABLEv+0x138>)
 8010d6c:	edd3 6a00 	vldr	s13, [r3]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	ed93 7aaa 	vldr	s14, [r3, #680]	; 0x2a8
 8010d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	edc3 7a01 	vstr	s15, [r3, #4]
	beta = atan2(phys,phyc);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	edd3 7a04 	vldr	s15, [r3, #16]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	ed93 7a03 	vldr	s14, [r3, #12]
 8010d8c:	eef0 0a47 	vmov.f32	s1, s14
 8010d90:	eeb0 0a67 	vmov.f32	s0, s15
 8010d94:	f7fd fcb4 	bl	800e700 <_ZSt5atan2ff>
 8010d98:	eef0 7a40 	vmov.f32	s15, s0
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	edc3 7a02 	vstr	s15, [r3, #8]
	if(alpha<M_PI/90)
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8010da8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010dac:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010e30 <_ZN16SOFT_ARM_SEGMENT5P2ABLEv+0x130>
 8010db0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db8:	d503      	bpl.n	8010dc2 <_ZN16SOFT_ARM_SEGMENT5P2ABLEv+0xc2>
		beta=0;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f04f 0200 	mov.w	r2, #0
 8010dc0:	609a      	str	r2, [r3, #8]
	length=(pressureFil[0]+pressureFil[1]+pressureFil[2]+pressureFil[3]+pressureFil[4]+pressureFil[5])/C1/2*radR+length0;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8010dce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8010dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8010df6:	ee77 6a27 	vadd.f32	s13, s14, s15
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	ed93 7aaa 	vldr	s14, [r3, #680]	; 0x2a8
 8010e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010e08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	edd3 7aa8 	vldr	s15, [r3, #672]	; 0x2a0
 8010e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8010e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	edc3 7a00 	vstr	s15, [r3]
}
 8010e26:	bf00      	nop
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	a2529d39 	.word	0xa2529d39
 8010e34:	3fa1df46 	.word	0x3fa1df46
 8010e38:	200013c0 	.word	0x200013c0

08010e3c <_ZN16SOFT_ARM_SEGMENT8getPhycDEv>:


inline float SOFT_ARM_SEGMENT::getPhycD()
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
	arm_dot_prod_f32(pressureD,bellowConfigurationAngleCos,BELLOWNUM,&phycD);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f503 7101 	add.w	r1, r3, #516	; 0x204
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	3350      	adds	r3, #80	; 0x50
 8010e54:	2206      	movs	r2, #6
 8010e56:	f7ef fbcb 	bl	80005f0 <arm_dot_prod_f32>
	return phycD;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e5e:	ee07 3a90 	vmov	s15, r3
}
 8010e62:	eeb0 0a67 	vmov.f32	s0, s15
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <_ZN16SOFT_ARM_SEGMENT8getPhysDEv>:

inline float SOFT_ARM_SEGMENT::getPhysD()
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
	arm_dot_prod_f32(pressureD,bellowConfigurationAngleSin,BELLOWNUM,&physD);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f503 7107 	add.w	r1, r3, #540	; 0x21c
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	3354      	adds	r3, #84	; 0x54
 8010e84:	2206      	movs	r2, #6
 8010e86:	f7ef fbb3 	bl	80005f0 <arm_dot_prod_f32>
	return physD;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e8e:	ee07 3a90 	vmov	s15, r3
}
 8010e92:	eeb0 0a67 	vmov.f32	s0, s15
 8010e96:	3708      	adds	r7, #8
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <_ZN16SOFT_ARM_SEGMENT7getPhycEv>:

inline float SOFT_ARM_SEGMENT::getPhyc() {
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
	arm_dot_prod_f32(pressure,bellowConfigurationAngleCos,BELLOWNUM,&phyc);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f103 0014 	add.w	r0, r3, #20
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f503 7101 	add.w	r1, r3, #516	; 0x204
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	330c      	adds	r3, #12
 8010eb4:	2206      	movs	r2, #6
 8010eb6:	f7ef fb9b 	bl	80005f0 <arm_dot_prod_f32>
	return phyc;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	ee07 3a90 	vmov	s15, r3
}
 8010ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <_ZN16SOFT_ARM_SEGMENT7getPhysEv>:

inline float SOFT_ARM_SEGMENT::getPhys() {
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
	arm_dot_prod_f32(pressure,bellowConfigurationAngleSin,BELLOWNUM,&phys);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f103 0014 	add.w	r0, r3, #20
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f503 7107 	add.w	r1, r3, #540	; 0x21c
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	3310      	adds	r3, #16
 8010ee4:	2206      	movs	r2, #6
 8010ee6:	f7ef fb83 	bl	80005f0 <arm_dot_prod_f32>
	return phys;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	691b      	ldr	r3, [r3, #16]
 8010eee:	ee07 3a90 	vmov	s15, r3
}
 8010ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	0000      	movs	r0, r0
	...

08010f00 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv>:

inline void SOFT_ARM_SEGMENT::quatern2AB(){
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b086      	sub	sp, #24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
	float n1=2*imuData.q0*imuData.q2 + 2*imuData.q1*imuData.q3;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8010f0e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8010f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8010f22:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8010f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f34:	edc7 7a05 	vstr	s15, [r7, #20]
	float n2=2*imuData.q2*imuData.q3 - 2*imuData.q0*imuData.q1;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8010f3e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8010f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8010f52:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8010f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f64:	edc7 7a04 	vstr	s15, [r7, #16]
	float n3=imuData.q0*imuData.q0 - imuData.q1*imuData.q1 - imuData.q2*imuData.q2 + imuData.q3*imuData.q3;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	ed93 7aae 	vldr	s14, [r3, #696]	; 0x2b8
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8010f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	edd3 6aaf 	vldr	s13, [r3, #700]	; 0x2bc
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8010f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	edd3 6ab0 	vldr	s13, [r3, #704]	; 0x2c0
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8010f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	edd3 6ab1 	vldr	s13, [r3, #708]	; 0x2c4
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8010fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fb4:	edc7 7a03 	vstr	s15, [r7, #12]

	  n1=CONSTRAIN(n1,-1,1);
 8010fb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8010fbc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc8:	d501      	bpl.n	8010fce <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xce>
 8010fca:	4b3d      	ldr	r3, [pc, #244]	; (80110c0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1c0>)
 8010fcc:	e00c      	b.n	8010fe8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe8>
 8010fce:	edd7 7a05 	vldr	s15, [r7, #20]
 8010fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fde:	dd02      	ble.n	8010fe6 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe6>
 8010fe0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010fe4:	e000      	b.n	8010fe8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0xe8>
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	617b      	str	r3, [r7, #20]
	  n2=CONSTRAIN(n2,-1,1);
 8010fea:	edd7 7a04 	vldr	s15, [r7, #16]
 8010fee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffa:	d501      	bpl.n	8011000 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x100>
 8010ffc:	4b30      	ldr	r3, [pc, #192]	; (80110c0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1c0>)
 8010ffe:	e00c      	b.n	801101a <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x11a>
 8011000:	edd7 7a04 	vldr	s15, [r7, #16]
 8011004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011008:	eef4 7ac7 	vcmpe.f32	s15, s14
 801100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011010:	dd02      	ble.n	8011018 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x118>
 8011012:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011016:	e000      	b.n	801101a <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x11a>
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	613b      	str	r3, [r7, #16]
	  n3=CONSTRAIN(n3,-1,1);
 801101c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011020:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102c:	d501      	bpl.n	8011032 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x132>
 801102e:	4b24      	ldr	r3, [pc, #144]	; (80110c0 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1c0>)
 8011030:	e00c      	b.n	801104c <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14c>
 8011032:	edd7 7a03 	vldr	s15, [r7, #12]
 8011036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801103a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011042:	dd02      	ble.n	801104a <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14a>
 8011044:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011048:	e000      	b.n	801104c <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x14c>
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	60fb      	str	r3, [r7, #12]

	  alpha=acos(n3);
 801104e:	edd7 7a03 	vldr	s15, [r7, #12]
 8011052:	eeb0 0a67 	vmov.f32	s0, s15
 8011056:	f7fd fb43 	bl	800e6e0 <_ZSt4acosf>
 801105a:	eef0 7a40 	vmov.f32	s15, s0
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	edc3 7a01 	vstr	s15, [r3, #4]
	  beta=-atan2(n2,n1)+imuData.angleZ/180*M_PI;
 8011064:	edd7 7a04 	vldr	s15, [r7, #16]
 8011068:	ed97 7a05 	vldr	s14, [r7, #20]
 801106c:	eef0 0a47 	vmov.f32	s1, s14
 8011070:	eeb0 0a67 	vmov.f32	s0, s15
 8011074:	f7fd fb44 	bl	800e700 <_ZSt5atan2ff>
 8011078:	eef0 7a40 	vmov.f32	s15, s0
 801107c:	eef1 7a67 	vneg.f32	s15, s15
 8011080:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	ed93 7aad 	vldr	s14, [r3, #692]	; 0x2b4
 801108a:	eddf 5a0e 	vldr	s11, [pc, #56]	; 80110c4 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1c4>
 801108e:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8011092:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011096:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80110b8 <_ZN16SOFT_ARM_SEGMENT10quatern2ABEv+0x1b8>
 801109a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801109e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80110a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80110ac:	bf00      	nop
 80110ae:	3718      	adds	r7, #24
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	f3af 8000 	nop.w
 80110b8:	54442d18 	.word	0x54442d18
 80110bc:	400921fb 	.word	0x400921fb
 80110c0:	bf800000 	.word	0xbf800000
 80110c4:	43340000 	.word	0x43340000

080110c8 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc>:

void SOFT_ARM_SEGMENT::receiveABLCommand(char* pBuffer) {
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af02      	add	r7, sp, #8
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
	if(vvv==1)
 80110d2:	4b39      	ldr	r3, [pc, #228]	; (80111b8 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xf0>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d165      	bne.n	80111a6 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xde>
	{
		sscanf(pBuffer,"%f %f %f",&alphaCommand,&betaCommand,&lengthCommand);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f103 0274 	add.w	r2, r3, #116	; 0x74
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	3370      	adds	r3, #112	; 0x70
 80110ea:	9300      	str	r3, [sp, #0]
 80110ec:	460b      	mov	r3, r1
 80110ee:	4933      	ldr	r1, [pc, #204]	; (80111bc <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xf4>)
 80110f0:	6838      	ldr	r0, [r7, #0]
 80110f2:	f001 fc23 	bl	801293c <siscanf>
		betaCommand=-betaCommand-M_PI/2;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80110fc:	eef1 7a67 	vneg.f32	s15, s15
 8011100:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011104:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80111b0 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xe8>
 8011108:	ee37 7b46 	vsub.f64	d7, d7, d6
 801110c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		if(fabs(alphaCommand-alphaD)<1.5 && fabs(betaCommand-betaD)<3 && fabs(lengthCommand-lengthD)<1)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8011122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011126:	eeb0 0a67 	vmov.f32	s0, s15
 801112a:	f7fd fafd 	bl	800e728 <_ZSt4fabsf>
 801112e:	eeb0 7a40 	vmov.f32	s14, s0
 8011132:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113e:	d52b      	bpl.n	8011198 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xd0>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011150:	eeb0 0a67 	vmov.f32	s0, s15
 8011154:	f7fd fae8 	bl	800e728 <_ZSt4fabsf>
 8011158:	eeb0 7a40 	vmov.f32	s14, s0
 801115c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011168:	d516      	bpl.n	8011198 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xd0>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8011176:	ee77 7a67 	vsub.f32	s15, s14, s15
 801117a:	eeb0 0a67 	vmov.f32	s0, s15
 801117e:	f7fd fad3 	bl	800e728 <_ZSt4fabsf>
 8011182:	eeb0 7a40 	vmov.f32	s14, s0
 8011186:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801118a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011192:	d501      	bpl.n	8011198 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xd0>
 8011194:	2301      	movs	r3, #1
 8011196:	e000      	b.n	801119a <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xd2>
 8011198:	2300      	movs	r3, #0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d003      	beq.n	80111a6 <_ZN16SOFT_ARM_SEGMENT17receiveABLCommandEPc+0xde>
		{

			commandSource=visionControl;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2204      	movs	r2, #4
 80111a2:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		}
	}
}
 80111a6:	bf00      	nop
 80111a8:	3708      	adds	r7, #8
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	54442d18 	.word	0x54442d18
 80111b4:	3ff921fb 	.word	0x3ff921fb
 80111b8:	200013a4 	.word	0x200013a4
 80111bc:	080167dc 	.word	0x080167dc

080111c0 <_Znwj>:
 80111c0:	b510      	push	{r4, lr}
 80111c2:	2800      	cmp	r0, #0
 80111c4:	bf14      	ite	ne
 80111c6:	4604      	movne	r4, r0
 80111c8:	2401      	moveq	r4, #1
 80111ca:	4620      	mov	r0, r4
 80111cc:	f000 fc3e 	bl	8011a4c <malloc>
 80111d0:	b930      	cbnz	r0, 80111e0 <_Znwj+0x20>
 80111d2:	f000 f807 	bl	80111e4 <_ZSt15get_new_handlerv>
 80111d6:	b908      	cbnz	r0, 80111dc <_Znwj+0x1c>
 80111d8:	f000 fbff 	bl	80119da <abort>
 80111dc:	4780      	blx	r0
 80111de:	e7f4      	b.n	80111ca <_Znwj+0xa>
 80111e0:	bd10      	pop	{r4, pc}
	...

080111e4 <_ZSt15get_new_handlerv>:
 80111e4:	4b02      	ldr	r3, [pc, #8]	; (80111f0 <_ZSt15get_new_handlerv+0xc>)
 80111e6:	6818      	ldr	r0, [r3, #0]
 80111e8:	f3bf 8f5b 	dmb	ish
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	200013c4 	.word	0x200013c4
 80111f4:	00000000 	.word	0x00000000

080111f8 <floor>:
 80111f8:	ee10 1a90 	vmov	r1, s1
 80111fc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011200:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011204:	2b13      	cmp	r3, #19
 8011206:	b530      	push	{r4, r5, lr}
 8011208:	ee10 0a10 	vmov	r0, s0
 801120c:	ee10 5a10 	vmov	r5, s0
 8011210:	dc33      	bgt.n	801127a <floor+0x82>
 8011212:	2b00      	cmp	r3, #0
 8011214:	da17      	bge.n	8011246 <floor+0x4e>
 8011216:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80112d8 <floor+0xe0>
 801121a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801121e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011226:	dd09      	ble.n	801123c <floor+0x44>
 8011228:	2900      	cmp	r1, #0
 801122a:	da50      	bge.n	80112ce <floor+0xd6>
 801122c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011230:	4a2b      	ldr	r2, [pc, #172]	; (80112e0 <floor+0xe8>)
 8011232:	4303      	orrs	r3, r0
 8011234:	2000      	movs	r0, #0
 8011236:	4283      	cmp	r3, r0
 8011238:	bf18      	it	ne
 801123a:	4611      	movne	r1, r2
 801123c:	460b      	mov	r3, r1
 801123e:	4602      	mov	r2, r0
 8011240:	ec43 2b10 	vmov	d0, r2, r3
 8011244:	e020      	b.n	8011288 <floor+0x90>
 8011246:	4a27      	ldr	r2, [pc, #156]	; (80112e4 <floor+0xec>)
 8011248:	411a      	asrs	r2, r3
 801124a:	ea01 0402 	and.w	r4, r1, r2
 801124e:	4304      	orrs	r4, r0
 8011250:	d01a      	beq.n	8011288 <floor+0x90>
 8011252:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80112d8 <floor+0xe0>
 8011256:	ee30 0b07 	vadd.f64	d0, d0, d7
 801125a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011262:	ddeb      	ble.n	801123c <floor+0x44>
 8011264:	2900      	cmp	r1, #0
 8011266:	bfbe      	ittt	lt
 8011268:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801126c:	fa40 f303 	asrlt.w	r3, r0, r3
 8011270:	18c9      	addlt	r1, r1, r3
 8011272:	ea21 0102 	bic.w	r1, r1, r2
 8011276:	2000      	movs	r0, #0
 8011278:	e7e0      	b.n	801123c <floor+0x44>
 801127a:	2b33      	cmp	r3, #51	; 0x33
 801127c:	dd05      	ble.n	801128a <floor+0x92>
 801127e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011282:	d101      	bne.n	8011288 <floor+0x90>
 8011284:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011288:	bd30      	pop	{r4, r5, pc}
 801128a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801128e:	f04f 32ff 	mov.w	r2, #4294967295
 8011292:	40e2      	lsrs	r2, r4
 8011294:	4202      	tst	r2, r0
 8011296:	d0f7      	beq.n	8011288 <floor+0x90>
 8011298:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80112d8 <floor+0xe0>
 801129c:	ee30 0b07 	vadd.f64	d0, d0, d7
 80112a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80112a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a8:	ddc8      	ble.n	801123c <floor+0x44>
 80112aa:	2900      	cmp	r1, #0
 80112ac:	da02      	bge.n	80112b4 <floor+0xbc>
 80112ae:	2b14      	cmp	r3, #20
 80112b0:	d103      	bne.n	80112ba <floor+0xc2>
 80112b2:	3101      	adds	r1, #1
 80112b4:	ea20 0002 	bic.w	r0, r0, r2
 80112b8:	e7c0      	b.n	801123c <floor+0x44>
 80112ba:	2401      	movs	r4, #1
 80112bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80112c0:	fa04 f303 	lsl.w	r3, r4, r3
 80112c4:	4418      	add	r0, r3
 80112c6:	42a8      	cmp	r0, r5
 80112c8:	bf38      	it	cc
 80112ca:	1909      	addcc	r1, r1, r4
 80112cc:	e7f2      	b.n	80112b4 <floor+0xbc>
 80112ce:	2000      	movs	r0, #0
 80112d0:	4601      	mov	r1, r0
 80112d2:	e7b3      	b.n	801123c <floor+0x44>
 80112d4:	f3af 8000 	nop.w
 80112d8:	8800759c 	.word	0x8800759c
 80112dc:	7e37e43c 	.word	0x7e37e43c
 80112e0:	bff00000 	.word	0xbff00000
 80112e4:	000fffff 	.word	0x000fffff

080112e8 <round>:
 80112e8:	ee10 3a90 	vmov	r3, s1
 80112ec:	b530      	push	{r4, r5, lr}
 80112ee:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80112f2:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 80112f6:	2913      	cmp	r1, #19
 80112f8:	ee10 5a90 	vmov	r5, s1
 80112fc:	ee10 2a10 	vmov	r2, s0
 8011300:	dc17      	bgt.n	8011332 <round+0x4a>
 8011302:	2900      	cmp	r1, #0
 8011304:	da09      	bge.n	801131a <round+0x32>
 8011306:	3101      	adds	r1, #1
 8011308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801130c:	d103      	bne.n	8011316 <round+0x2e>
 801130e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011312:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011316:	2200      	movs	r2, #0
 8011318:	e024      	b.n	8011364 <round+0x7c>
 801131a:	4815      	ldr	r0, [pc, #84]	; (8011370 <round+0x88>)
 801131c:	4108      	asrs	r0, r1
 801131e:	4203      	tst	r3, r0
 8011320:	d100      	bne.n	8011324 <round+0x3c>
 8011322:	b16a      	cbz	r2, 8011340 <round+0x58>
 8011324:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011328:	410b      	asrs	r3, r1
 801132a:	442b      	add	r3, r5
 801132c:	ea23 0300 	bic.w	r3, r3, r0
 8011330:	e7f1      	b.n	8011316 <round+0x2e>
 8011332:	2933      	cmp	r1, #51	; 0x33
 8011334:	dd05      	ble.n	8011342 <round+0x5a>
 8011336:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801133a:	d101      	bne.n	8011340 <round+0x58>
 801133c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011340:	bd30      	pop	{r4, r5, pc}
 8011342:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 8011346:	f04f 34ff 	mov.w	r4, #4294967295
 801134a:	40c4      	lsrs	r4, r0
 801134c:	4222      	tst	r2, r4
 801134e:	d0f7      	beq.n	8011340 <round+0x58>
 8011350:	2001      	movs	r0, #1
 8011352:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 8011356:	fa00 f101 	lsl.w	r1, r0, r1
 801135a:	1852      	adds	r2, r2, r1
 801135c:	bf28      	it	cs
 801135e:	181b      	addcs	r3, r3, r0
 8011360:	ea22 0204 	bic.w	r2, r2, r4
 8011364:	4619      	mov	r1, r3
 8011366:	4610      	mov	r0, r2
 8011368:	ec41 0b10 	vmov	d0, r0, r1
 801136c:	e7e8      	b.n	8011340 <round+0x58>
 801136e:	bf00      	nop
 8011370:	000fffff 	.word	0x000fffff

08011374 <acosf>:
 8011374:	b510      	push	{r4, lr}
 8011376:	ed2d 8b02 	vpush	{d8}
 801137a:	4c25      	ldr	r4, [pc, #148]	; (8011410 <acosf+0x9c>)
 801137c:	b08a      	sub	sp, #40	; 0x28
 801137e:	eeb0 8a40 	vmov.f32	s16, s0
 8011382:	f000 f89d 	bl	80114c0 <__ieee754_acosf>
 8011386:	f994 3000 	ldrsb.w	r3, [r4]
 801138a:	3301      	adds	r3, #1
 801138c:	eef0 8a40 	vmov.f32	s17, s0
 8011390:	d038      	beq.n	8011404 <acosf+0x90>
 8011392:	eeb4 8a48 	vcmp.f32	s16, s16
 8011396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801139a:	d633      	bvs.n	8011404 <acosf+0x90>
 801139c:	eeb0 0a48 	vmov.f32	s0, s16
 80113a0:	f000 fb14 	bl	80119cc <fabsf>
 80113a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80113a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80113ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b0:	dd28      	ble.n	8011404 <acosf+0x90>
 80113b2:	2301      	movs	r3, #1
 80113b4:	9300      	str	r3, [sp, #0]
 80113b6:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80113ba:	4b16      	ldr	r3, [pc, #88]	; (8011414 <acosf+0xa0>)
 80113bc:	9301      	str	r3, [sp, #4]
 80113be:	4816      	ldr	r0, [pc, #88]	; (8011418 <acosf+0xa4>)
 80113c0:	2300      	movs	r3, #0
 80113c2:	9308      	str	r3, [sp, #32]
 80113c4:	ed8d 8b04 	vstr	d8, [sp, #16]
 80113c8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80113cc:	f000 fa24 	bl	8011818 <nan>
 80113d0:	f994 3000 	ldrsb.w	r3, [r4]
 80113d4:	2b02      	cmp	r3, #2
 80113d6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80113da:	d104      	bne.n	80113e6 <acosf+0x72>
 80113dc:	f000 fb0c 	bl	80119f8 <__errno>
 80113e0:	2321      	movs	r3, #33	; 0x21
 80113e2:	6003      	str	r3, [r0, #0]
 80113e4:	e004      	b.n	80113f0 <acosf+0x7c>
 80113e6:	4668      	mov	r0, sp
 80113e8:	f000 fa13 	bl	8011812 <matherr>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d0f5      	beq.n	80113dc <acosf+0x68>
 80113f0:	9b08      	ldr	r3, [sp, #32]
 80113f2:	b11b      	cbz	r3, 80113fc <acosf+0x88>
 80113f4:	f000 fb00 	bl	80119f8 <__errno>
 80113f8:	9b08      	ldr	r3, [sp, #32]
 80113fa:	6003      	str	r3, [r0, #0]
 80113fc:	ed9d 0b06 	vldr	d0, [sp, #24]
 8011400:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8011404:	eeb0 0a68 	vmov.f32	s0, s17
 8011408:	b00a      	add	sp, #40	; 0x28
 801140a:	ecbd 8b02 	vpop	{d8}
 801140e:	bd10      	pop	{r4, pc}
 8011410:	20000434 	.word	0x20000434
 8011414:	08017018 	.word	0x08017018
 8011418:	08017251 	.word	0x08017251

0801141c <atan2f>:
 801141c:	f000 b94c 	b.w	80116b8 <__ieee754_atan2f>

08011420 <sqrtf>:
 8011420:	b500      	push	{lr}
 8011422:	ed2d 8b02 	vpush	{d8}
 8011426:	b08b      	sub	sp, #44	; 0x2c
 8011428:	eeb0 8a40 	vmov.f32	s16, s0
 801142c:	f000 f9ee 	bl	801180c <__ieee754_sqrtf>
 8011430:	4b21      	ldr	r3, [pc, #132]	; (80114b8 <sqrtf+0x98>)
 8011432:	f993 3000 	ldrsb.w	r3, [r3]
 8011436:	1c5a      	adds	r2, r3, #1
 8011438:	d028      	beq.n	801148c <sqrtf+0x6c>
 801143a:	eeb4 8a48 	vcmp.f32	s16, s16
 801143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011442:	d623      	bvs.n	801148c <sqrtf+0x6c>
 8011444:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801144c:	d51e      	bpl.n	801148c <sqrtf+0x6c>
 801144e:	2201      	movs	r2, #1
 8011450:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8011454:	9200      	str	r2, [sp, #0]
 8011456:	4a19      	ldr	r2, [pc, #100]	; (80114bc <sqrtf+0x9c>)
 8011458:	9201      	str	r2, [sp, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	9208      	str	r2, [sp, #32]
 801145e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011462:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011466:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80114b0 <sqrtf+0x90>
 801146a:	b9a3      	cbnz	r3, 8011496 <sqrtf+0x76>
 801146c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011470:	4668      	mov	r0, sp
 8011472:	f000 f9ce 	bl	8011812 <matherr>
 8011476:	b1a0      	cbz	r0, 80114a2 <sqrtf+0x82>
 8011478:	9b08      	ldr	r3, [sp, #32]
 801147a:	b11b      	cbz	r3, 8011484 <sqrtf+0x64>
 801147c:	f000 fabc 	bl	80119f8 <__errno>
 8011480:	9b08      	ldr	r3, [sp, #32]
 8011482:	6003      	str	r3, [r0, #0]
 8011484:	ed9d 0b06 	vldr	d0, [sp, #24]
 8011488:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801148c:	b00b      	add	sp, #44	; 0x2c
 801148e:	ecbd 8b02 	vpop	{d8}
 8011492:	f85d fb04 	ldr.w	pc, [sp], #4
 8011496:	2b02      	cmp	r3, #2
 8011498:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801149c:	ed8d 6b06 	vstr	d6, [sp, #24]
 80114a0:	d1e6      	bne.n	8011470 <sqrtf+0x50>
 80114a2:	f000 faa9 	bl	80119f8 <__errno>
 80114a6:	2321      	movs	r3, #33	; 0x21
 80114a8:	6003      	str	r3, [r0, #0]
 80114aa:	e7e5      	b.n	8011478 <sqrtf+0x58>
 80114ac:	f3af 8000 	nop.w
	...
 80114b8:	20000434 	.word	0x20000434
 80114bc:	0801701e 	.word	0x0801701e

080114c0 <__ieee754_acosf>:
 80114c0:	b508      	push	{r3, lr}
 80114c2:	ee10 3a10 	vmov	r3, s0
 80114c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80114ca:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80114ce:	ed2d 8b0c 	vpush	{d8-d13}
 80114d2:	d109      	bne.n	80114e8 <__ieee754_acosf+0x28>
 80114d4:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8011674 <__ieee754_acosf+0x1b4>
 80114d8:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8011678 <__ieee754_acosf+0x1b8>
 80114dc:	2b00      	cmp	r3, #0
 80114de:	fe30 0a08 	vselgt.f32	s0, s0, s16
 80114e2:	ecbd 8b0c 	vpop	{d8-d13}
 80114e6:	bd08      	pop	{r3, pc}
 80114e8:	dd04      	ble.n	80114f4 <__ieee754_acosf+0x34>
 80114ea:	ee30 8a40 	vsub.f32	s16, s0, s0
 80114ee:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80114f2:	e7f6      	b.n	80114e2 <__ieee754_acosf+0x22>
 80114f4:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80114f8:	da3e      	bge.n	8011578 <__ieee754_acosf+0xb8>
 80114fa:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80114fe:	f340 80b5 	ble.w	801166c <__ieee754_acosf+0x1ac>
 8011502:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011506:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801167c <__ieee754_acosf+0x1bc>
 801150a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8011680 <__ieee754_acosf+0x1c0>
 801150e:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 8011684 <__ieee754_acosf+0x1c4>
 8011512:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8011688 <__ieee754_acosf+0x1c8>
 8011516:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801151a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801168c <__ieee754_acosf+0x1cc>
 801151e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011522:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8011690 <__ieee754_acosf+0x1d0>
 8011526:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801152a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8011694 <__ieee754_acosf+0x1d4>
 801152e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011532:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8011698 <__ieee754_acosf+0x1d8>
 8011536:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801153a:	eddf 6a58 	vldr	s13, [pc, #352]	; 801169c <__ieee754_acosf+0x1dc>
 801153e:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8011542:	eddf 6a57 	vldr	s13, [pc, #348]	; 80116a0 <__ieee754_acosf+0x1e0>
 8011546:	eee6 6a27 	vfma.f32	s13, s12, s15
 801154a:	ed9f 6a56 	vldr	s12, [pc, #344]	; 80116a4 <__ieee754_acosf+0x1e4>
 801154e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011556:	eee6 6a27 	vfma.f32	s13, s12, s15
 801155a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801155e:	eef0 7a66 	vmov.f32	s15, s13
 8011562:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011566:	eea0 8a66 	vfms.f32	s16, s0, s13
 801156a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801156e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80116a8 <__ieee754_acosf+0x1e8>
 8011572:	ee30 0a48 	vsub.f32	s0, s0, s16
 8011576:	e7b4      	b.n	80114e2 <__ieee754_acosf+0x22>
 8011578:	2b00      	cmp	r3, #0
 801157a:	eddf da40 	vldr	s27, [pc, #256]	; 801167c <__ieee754_acosf+0x1bc>
 801157e:	eddf ca40 	vldr	s25, [pc, #256]	; 8011680 <__ieee754_acosf+0x1c0>
 8011582:	ed9f ca42 	vldr	s24, [pc, #264]	; 801168c <__ieee754_acosf+0x1cc>
 8011586:	eddf ba42 	vldr	s23, [pc, #264]	; 8011690 <__ieee754_acosf+0x1d0>
 801158a:	ed9f ba42 	vldr	s22, [pc, #264]	; 8011694 <__ieee754_acosf+0x1d4>
 801158e:	eddf 8a42 	vldr	s17, [pc, #264]	; 8011698 <__ieee754_acosf+0x1d8>
 8011592:	ed9f da42 	vldr	s26, [pc, #264]	; 801169c <__ieee754_acosf+0x1dc>
 8011596:	eddf aa3b 	vldr	s21, [pc, #236]	; 8011684 <__ieee754_acosf+0x1c4>
 801159a:	ed9f aa41 	vldr	s20, [pc, #260]	; 80116a0 <__ieee754_acosf+0x1e0>
 801159e:	eddf 9a41 	vldr	s19, [pc, #260]	; 80116a4 <__ieee754_acosf+0x1e4>
 80115a2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80115a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80115aa:	da28      	bge.n	80115fe <__ieee754_acosf+0x13e>
 80115ac:	ee30 0a09 	vadd.f32	s0, s0, s18
 80115b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80115b4:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80115b8:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80115bc:	eeac ca80 	vfma.f32	s24, s25, s0
 80115c0:	eeaa aa80 	vfma.f32	s20, s21, s0
 80115c4:	eeec ba00 	vfma.f32	s23, s24, s0
 80115c8:	eeea 9a00 	vfma.f32	s19, s20, s0
 80115cc:	eeab ba80 	vfma.f32	s22, s23, s0
 80115d0:	eea9 9a80 	vfma.f32	s18, s19, s0
 80115d4:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80115d8:	ee68 8a80 	vmul.f32	s17, s17, s0
 80115dc:	f000 f916 	bl	801180c <__ieee754_sqrtf>
 80115e0:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80115e4:	eddf 7a31 	vldr	s15, [pc, #196]	; 80116ac <__ieee754_acosf+0x1ec>
 80115e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80115ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80115f0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80115f4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80116b0 <__ieee754_acosf+0x1f0>
 80115f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80115fc:	e771      	b.n	80114e2 <__ieee754_acosf+0x22>
 80115fe:	ee39 8a40 	vsub.f32	s16, s18, s0
 8011602:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011606:	eeb0 0a48 	vmov.f32	s0, s16
 801160a:	f000 f8ff 	bl	801180c <__ieee754_sqrtf>
 801160e:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8011612:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8011616:	eeac ca88 	vfma.f32	s24, s25, s16
 801161a:	eeaa aa88 	vfma.f32	s20, s21, s16
 801161e:	eeec ba08 	vfma.f32	s23, s24, s16
 8011622:	ee10 3a10 	vmov	r3, s0
 8011626:	eeab ba88 	vfma.f32	s22, s23, s16
 801162a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801162e:	f023 030f 	bic.w	r3, r3, #15
 8011632:	eeea 9a08 	vfma.f32	s19, s20, s16
 8011636:	ee07 3a90 	vmov	s15, r3
 801163a:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801163e:	eeb0 6a48 	vmov.f32	s12, s16
 8011642:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8011646:	eea9 9a88 	vfma.f32	s18, s19, s16
 801164a:	ee70 6a27 	vadd.f32	s13, s0, s15
 801164e:	ee68 8a88 	vmul.f32	s17, s17, s16
 8011652:	eeb0 7a40 	vmov.f32	s14, s0
 8011656:	ee86 0a26 	vdiv.f32	s0, s12, s13
 801165a:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801165e:	eea7 0a26 	vfma.f32	s0, s14, s13
 8011662:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011666:	ee30 0a00 	vadd.f32	s0, s0, s0
 801166a:	e73a      	b.n	80114e2 <__ieee754_acosf+0x22>
 801166c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80116b4 <__ieee754_acosf+0x1f4>
 8011670:	e737      	b.n	80114e2 <__ieee754_acosf+0x22>
 8011672:	bf00      	nop
 8011674:	00000000 	.word	0x00000000
 8011678:	40490fdb 	.word	0x40490fdb
 801167c:	3811ef08 	.word	0x3811ef08
 8011680:	3a4f7f04 	.word	0x3a4f7f04
 8011684:	bf303361 	.word	0xbf303361
 8011688:	33a22168 	.word	0x33a22168
 801168c:	bd241146 	.word	0xbd241146
 8011690:	3e4e0aa8 	.word	0x3e4e0aa8
 8011694:	bea6b090 	.word	0xbea6b090
 8011698:	3e2aaaab 	.word	0x3e2aaaab
 801169c:	3d9dc62e 	.word	0x3d9dc62e
 80116a0:	4001572d 	.word	0x4001572d
 80116a4:	c019d139 	.word	0xc019d139
 80116a8:	3fc90fda 	.word	0x3fc90fda
 80116ac:	b3a22168 	.word	0xb3a22168
 80116b0:	40490fda 	.word	0x40490fda
 80116b4:	3fc90fdb 	.word	0x3fc90fdb

080116b8 <__ieee754_atan2f>:
 80116b8:	ee10 2a90 	vmov	r2, s1
 80116bc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80116c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80116c4:	b510      	push	{r4, lr}
 80116c6:	eef0 7a40 	vmov.f32	s15, s0
 80116ca:	dc06      	bgt.n	80116da <__ieee754_atan2f+0x22>
 80116cc:	ee10 0a10 	vmov	r0, s0
 80116d0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80116d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80116d8:	dd04      	ble.n	80116e4 <__ieee754_atan2f+0x2c>
 80116da:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80116de:	eeb0 0a67 	vmov.f32	s0, s15
 80116e2:	bd10      	pop	{r4, pc}
 80116e4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80116e8:	d103      	bne.n	80116f2 <__ieee754_atan2f+0x3a>
 80116ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116ee:	f000 b89b 	b.w	8011828 <atanf>
 80116f2:	1794      	asrs	r4, r2, #30
 80116f4:	f004 0402 	and.w	r4, r4, #2
 80116f8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80116fc:	b93b      	cbnz	r3, 801170e <__ieee754_atan2f+0x56>
 80116fe:	2c02      	cmp	r4, #2
 8011700:	d06b      	beq.n	80117da <__ieee754_atan2f+0x122>
 8011702:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80117e0 <__ieee754_atan2f+0x128>
 8011706:	2c03      	cmp	r4, #3
 8011708:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801170c:	e7e7      	b.n	80116de <__ieee754_atan2f+0x26>
 801170e:	b939      	cbnz	r1, 8011720 <__ieee754_atan2f+0x68>
 8011710:	eddf 7a34 	vldr	s15, [pc, #208]	; 80117e4 <__ieee754_atan2f+0x12c>
 8011714:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80117e8 <__ieee754_atan2f+0x130>
 8011718:	2800      	cmp	r0, #0
 801171a:	fe67 7a87 	vselge.f32	s15, s15, s14
 801171e:	e7de      	b.n	80116de <__ieee754_atan2f+0x26>
 8011720:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011724:	d121      	bne.n	801176a <__ieee754_atan2f+0xb2>
 8011726:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801172a:	d111      	bne.n	8011750 <__ieee754_atan2f+0x98>
 801172c:	2c02      	cmp	r4, #2
 801172e:	d009      	beq.n	8011744 <__ieee754_atan2f+0x8c>
 8011730:	2c03      	cmp	r4, #3
 8011732:	d00a      	beq.n	801174a <__ieee754_atan2f+0x92>
 8011734:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80117ec <__ieee754_atan2f+0x134>
 8011738:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80117f0 <__ieee754_atan2f+0x138>
 801173c:	2c01      	cmp	r4, #1
 801173e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8011742:	e7cc      	b.n	80116de <__ieee754_atan2f+0x26>
 8011744:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80117f4 <__ieee754_atan2f+0x13c>
 8011748:	e7c9      	b.n	80116de <__ieee754_atan2f+0x26>
 801174a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80117f8 <__ieee754_atan2f+0x140>
 801174e:	e7c6      	b.n	80116de <__ieee754_atan2f+0x26>
 8011750:	2c02      	cmp	r4, #2
 8011752:	d042      	beq.n	80117da <__ieee754_atan2f+0x122>
 8011754:	2c03      	cmp	r4, #3
 8011756:	d005      	beq.n	8011764 <__ieee754_atan2f+0xac>
 8011758:	2c01      	cmp	r4, #1
 801175a:	eddf 7a28 	vldr	s15, [pc, #160]	; 80117fc <__ieee754_atan2f+0x144>
 801175e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8011800 <__ieee754_atan2f+0x148>
 8011762:	e7ec      	b.n	801173e <__ieee754_atan2f+0x86>
 8011764:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80117e0 <__ieee754_atan2f+0x128>
 8011768:	e7b9      	b.n	80116de <__ieee754_atan2f+0x26>
 801176a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801176e:	d0cf      	beq.n	8011710 <__ieee754_atan2f+0x58>
 8011770:	1a5b      	subs	r3, r3, r1
 8011772:	15db      	asrs	r3, r3, #23
 8011774:	2b3c      	cmp	r3, #60	; 0x3c
 8011776:	dc1a      	bgt.n	80117ae <__ieee754_atan2f+0xf6>
 8011778:	2a00      	cmp	r2, #0
 801177a:	da01      	bge.n	8011780 <__ieee754_atan2f+0xc8>
 801177c:	333c      	adds	r3, #60	; 0x3c
 801177e:	db19      	blt.n	80117b4 <__ieee754_atan2f+0xfc>
 8011780:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011784:	f000 f922 	bl	80119cc <fabsf>
 8011788:	f000 f84e 	bl	8011828 <atanf>
 801178c:	eef0 7a40 	vmov.f32	s15, s0
 8011790:	2c01      	cmp	r4, #1
 8011792:	d012      	beq.n	80117ba <__ieee754_atan2f+0x102>
 8011794:	2c02      	cmp	r4, #2
 8011796:	d017      	beq.n	80117c8 <__ieee754_atan2f+0x110>
 8011798:	2c00      	cmp	r4, #0
 801179a:	d0a0      	beq.n	80116de <__ieee754_atan2f+0x26>
 801179c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8011804 <__ieee754_atan2f+0x14c>
 80117a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80117a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8011808 <__ieee754_atan2f+0x150>
 80117a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80117ac:	e797      	b.n	80116de <__ieee754_atan2f+0x26>
 80117ae:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80117e4 <__ieee754_atan2f+0x12c>
 80117b2:	e7ed      	b.n	8011790 <__ieee754_atan2f+0xd8>
 80117b4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011800 <__ieee754_atan2f+0x148>
 80117b8:	e7ea      	b.n	8011790 <__ieee754_atan2f+0xd8>
 80117ba:	ee17 3a90 	vmov	r3, s15
 80117be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80117c2:	ee07 3a90 	vmov	s15, r3
 80117c6:	e78a      	b.n	80116de <__ieee754_atan2f+0x26>
 80117c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8011804 <__ieee754_atan2f+0x14c>
 80117cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80117d0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8011808 <__ieee754_atan2f+0x150>
 80117d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117d8:	e781      	b.n	80116de <__ieee754_atan2f+0x26>
 80117da:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011808 <__ieee754_atan2f+0x150>
 80117de:	e77e      	b.n	80116de <__ieee754_atan2f+0x26>
 80117e0:	c0490fdb 	.word	0xc0490fdb
 80117e4:	3fc90fdb 	.word	0x3fc90fdb
 80117e8:	bfc90fdb 	.word	0xbfc90fdb
 80117ec:	bf490fdb 	.word	0xbf490fdb
 80117f0:	3f490fdb 	.word	0x3f490fdb
 80117f4:	4016cbe4 	.word	0x4016cbe4
 80117f8:	c016cbe4 	.word	0xc016cbe4
 80117fc:	80000000 	.word	0x80000000
 8011800:	00000000 	.word	0x00000000
 8011804:	33bbbd2e 	.word	0x33bbbd2e
 8011808:	40490fdb 	.word	0x40490fdb

0801180c <__ieee754_sqrtf>:
 801180c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011810:	4770      	bx	lr

08011812 <matherr>:
 8011812:	2000      	movs	r0, #0
 8011814:	4770      	bx	lr
	...

08011818 <nan>:
 8011818:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011820 <nan+0x8>
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop
 8011820:	00000000 	.word	0x00000000
 8011824:	7ff80000 	.word	0x7ff80000

08011828 <atanf>:
 8011828:	b538      	push	{r3, r4, r5, lr}
 801182a:	ee10 5a10 	vmov	r5, s0
 801182e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011832:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011836:	eef0 7a40 	vmov.f32	s15, s0
 801183a:	db0f      	blt.n	801185c <atanf+0x34>
 801183c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011840:	dd04      	ble.n	801184c <atanf+0x24>
 8011842:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011846:	eeb0 0a67 	vmov.f32	s0, s15
 801184a:	bd38      	pop	{r3, r4, r5, pc}
 801184c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8011980 <atanf+0x158>
 8011850:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8011984 <atanf+0x15c>
 8011854:	2d00      	cmp	r5, #0
 8011856:	fe77 7a87 	vselgt.f32	s15, s15, s14
 801185a:	e7f4      	b.n	8011846 <atanf+0x1e>
 801185c:	4b4a      	ldr	r3, [pc, #296]	; (8011988 <atanf+0x160>)
 801185e:	429c      	cmp	r4, r3
 8011860:	dc10      	bgt.n	8011884 <atanf+0x5c>
 8011862:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011866:	da0a      	bge.n	801187e <atanf+0x56>
 8011868:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801198c <atanf+0x164>
 801186c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011874:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801187c:	dce3      	bgt.n	8011846 <atanf+0x1e>
 801187e:	f04f 33ff 	mov.w	r3, #4294967295
 8011882:	e013      	b.n	80118ac <atanf+0x84>
 8011884:	f000 f8a2 	bl	80119cc <fabsf>
 8011888:	4b41      	ldr	r3, [pc, #260]	; (8011990 <atanf+0x168>)
 801188a:	429c      	cmp	r4, r3
 801188c:	dc4f      	bgt.n	801192e <atanf+0x106>
 801188e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8011892:	429c      	cmp	r4, r3
 8011894:	dc41      	bgt.n	801191a <atanf+0xf2>
 8011896:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801189a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801189e:	eea0 7a27 	vfma.f32	s14, s0, s15
 80118a2:	2300      	movs	r3, #0
 80118a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80118a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80118b2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011994 <atanf+0x16c>
 80118b6:	eddf 5a38 	vldr	s11, [pc, #224]	; 8011998 <atanf+0x170>
 80118ba:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801199c <atanf+0x174>
 80118be:	ee66 6a06 	vmul.f32	s13, s12, s12
 80118c2:	eee6 5a87 	vfma.f32	s11, s13, s14
 80118c6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80119a0 <atanf+0x178>
 80118ca:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80118ce:	eddf 5a35 	vldr	s11, [pc, #212]	; 80119a4 <atanf+0x17c>
 80118d2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80118d6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80119a8 <atanf+0x180>
 80118da:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80118de:	eddf 5a33 	vldr	s11, [pc, #204]	; 80119ac <atanf+0x184>
 80118e2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80118e6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80119b0 <atanf+0x188>
 80118ea:	eea6 5a87 	vfma.f32	s10, s13, s14
 80118ee:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80119b4 <atanf+0x18c>
 80118f2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80118f6:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80119b8 <atanf+0x190>
 80118fa:	eea7 5a26 	vfma.f32	s10, s14, s13
 80118fe:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80119bc <atanf+0x194>
 8011902:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011906:	ee27 7a26 	vmul.f32	s14, s14, s13
 801190a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801190e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011912:	d121      	bne.n	8011958 <atanf+0x130>
 8011914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011918:	e795      	b.n	8011846 <atanf+0x1e>
 801191a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801191e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011922:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011926:	2301      	movs	r3, #1
 8011928:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801192c:	e7be      	b.n	80118ac <atanf+0x84>
 801192e:	4b24      	ldr	r3, [pc, #144]	; (80119c0 <atanf+0x198>)
 8011930:	429c      	cmp	r4, r3
 8011932:	dc0b      	bgt.n	801194c <atanf+0x124>
 8011934:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801193c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011940:	2302      	movs	r3, #2
 8011942:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801194a:	e7af      	b.n	80118ac <atanf+0x84>
 801194c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011950:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011954:	2303      	movs	r3, #3
 8011956:	e7a9      	b.n	80118ac <atanf+0x84>
 8011958:	4a1a      	ldr	r2, [pc, #104]	; (80119c4 <atanf+0x19c>)
 801195a:	491b      	ldr	r1, [pc, #108]	; (80119c8 <atanf+0x1a0>)
 801195c:	009b      	lsls	r3, r3, #2
 801195e:	441a      	add	r2, r3
 8011960:	440b      	add	r3, r1
 8011962:	edd3 6a00 	vldr	s13, [r3]
 8011966:	ee37 7a66 	vsub.f32	s14, s14, s13
 801196a:	2d00      	cmp	r5, #0
 801196c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011970:	ed92 7a00 	vldr	s14, [r2]
 8011974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011978:	bfb8      	it	lt
 801197a:	eef1 7a67 	vneglt.f32	s15, s15
 801197e:	e762      	b.n	8011846 <atanf+0x1e>
 8011980:	bfc90fdb 	.word	0xbfc90fdb
 8011984:	3fc90fdb 	.word	0x3fc90fdb
 8011988:	3edfffff 	.word	0x3edfffff
 801198c:	7149f2ca 	.word	0x7149f2ca
 8011990:	3f97ffff 	.word	0x3f97ffff
 8011994:	3c8569d7 	.word	0x3c8569d7
 8011998:	3d4bda59 	.word	0x3d4bda59
 801199c:	bd6ef16b 	.word	0xbd6ef16b
 80119a0:	3d886b35 	.word	0x3d886b35
 80119a4:	3dba2e6e 	.word	0x3dba2e6e
 80119a8:	3e124925 	.word	0x3e124925
 80119ac:	3eaaaaab 	.word	0x3eaaaaab
 80119b0:	bd15a221 	.word	0xbd15a221
 80119b4:	bd9d8795 	.word	0xbd9d8795
 80119b8:	bde38e38 	.word	0xbde38e38
 80119bc:	be4ccccd 	.word	0xbe4ccccd
 80119c0:	401bffff 	.word	0x401bffff
 80119c4:	08017024 	.word	0x08017024
 80119c8:	08017034 	.word	0x08017034

080119cc <fabsf>:
 80119cc:	ee10 3a10 	vmov	r3, s0
 80119d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119d4:	ee00 3a10 	vmov	s0, r3
 80119d8:	4770      	bx	lr

080119da <abort>:
 80119da:	b508      	push	{r3, lr}
 80119dc:	2006      	movs	r0, #6
 80119de:	f000 ff71 	bl	80128c4 <raise>
 80119e2:	2001      	movs	r0, #1
 80119e4:	f004 fe0e 	bl	8016604 <_exit>

080119e8 <calloc>:
 80119e8:	4b02      	ldr	r3, [pc, #8]	; (80119f4 <calloc+0xc>)
 80119ea:	460a      	mov	r2, r1
 80119ec:	4601      	mov	r1, r0
 80119ee:	6818      	ldr	r0, [r3, #0]
 80119f0:	f000 b847 	b.w	8011a82 <_calloc_r>
 80119f4:	20000438 	.word	0x20000438

080119f8 <__errno>:
 80119f8:	4b01      	ldr	r3, [pc, #4]	; (8011a00 <__errno+0x8>)
 80119fa:	6818      	ldr	r0, [r3, #0]
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop
 8011a00:	20000438 	.word	0x20000438

08011a04 <__libc_init_array>:
 8011a04:	b570      	push	{r4, r5, r6, lr}
 8011a06:	4e0d      	ldr	r6, [pc, #52]	; (8011a3c <__libc_init_array+0x38>)
 8011a08:	4c0d      	ldr	r4, [pc, #52]	; (8011a40 <__libc_init_array+0x3c>)
 8011a0a:	1ba4      	subs	r4, r4, r6
 8011a0c:	10a4      	asrs	r4, r4, #2
 8011a0e:	2500      	movs	r5, #0
 8011a10:	42a5      	cmp	r5, r4
 8011a12:	d109      	bne.n	8011a28 <__libc_init_array+0x24>
 8011a14:	4e0b      	ldr	r6, [pc, #44]	; (8011a44 <__libc_init_array+0x40>)
 8011a16:	4c0c      	ldr	r4, [pc, #48]	; (8011a48 <__libc_init_array+0x44>)
 8011a18:	f004 fdf6 	bl	8016608 <_init>
 8011a1c:	1ba4      	subs	r4, r4, r6
 8011a1e:	10a4      	asrs	r4, r4, #2
 8011a20:	2500      	movs	r5, #0
 8011a22:	42a5      	cmp	r5, r4
 8011a24:	d105      	bne.n	8011a32 <__libc_init_array+0x2e>
 8011a26:	bd70      	pop	{r4, r5, r6, pc}
 8011a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011a2c:	4798      	blx	r3
 8011a2e:	3501      	adds	r5, #1
 8011a30:	e7ee      	b.n	8011a10 <__libc_init_array+0xc>
 8011a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011a36:	4798      	blx	r3
 8011a38:	3501      	adds	r5, #1
 8011a3a:	e7f2      	b.n	8011a22 <__libc_init_array+0x1e>
 8011a3c:	08017384 	.word	0x08017384
 8011a40:	08017384 	.word	0x08017384
 8011a44:	08017384 	.word	0x08017384
 8011a48:	0801738c 	.word	0x0801738c

08011a4c <malloc>:
 8011a4c:	4b02      	ldr	r3, [pc, #8]	; (8011a58 <malloc+0xc>)
 8011a4e:	4601      	mov	r1, r0
 8011a50:	6818      	ldr	r0, [r3, #0]
 8011a52:	f000 b873 	b.w	8011b3c <_malloc_r>
 8011a56:	bf00      	nop
 8011a58:	20000438 	.word	0x20000438

08011a5c <memcpy>:
 8011a5c:	b510      	push	{r4, lr}
 8011a5e:	1e43      	subs	r3, r0, #1
 8011a60:	440a      	add	r2, r1
 8011a62:	4291      	cmp	r1, r2
 8011a64:	d100      	bne.n	8011a68 <memcpy+0xc>
 8011a66:	bd10      	pop	{r4, pc}
 8011a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a70:	e7f7      	b.n	8011a62 <memcpy+0x6>

08011a72 <memset>:
 8011a72:	4402      	add	r2, r0
 8011a74:	4603      	mov	r3, r0
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d100      	bne.n	8011a7c <memset+0xa>
 8011a7a:	4770      	bx	lr
 8011a7c:	f803 1b01 	strb.w	r1, [r3], #1
 8011a80:	e7f9      	b.n	8011a76 <memset+0x4>

08011a82 <_calloc_r>:
 8011a82:	b538      	push	{r3, r4, r5, lr}
 8011a84:	fb02 f401 	mul.w	r4, r2, r1
 8011a88:	4621      	mov	r1, r4
 8011a8a:	f000 f857 	bl	8011b3c <_malloc_r>
 8011a8e:	4605      	mov	r5, r0
 8011a90:	b118      	cbz	r0, 8011a9a <_calloc_r+0x18>
 8011a92:	4622      	mov	r2, r4
 8011a94:	2100      	movs	r1, #0
 8011a96:	f7ff ffec 	bl	8011a72 <memset>
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08011aa0 <_free_r>:
 8011aa0:	b538      	push	{r3, r4, r5, lr}
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	2900      	cmp	r1, #0
 8011aa6:	d045      	beq.n	8011b34 <_free_r+0x94>
 8011aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011aac:	1f0c      	subs	r4, r1, #4
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	bfb8      	it	lt
 8011ab2:	18e4      	addlt	r4, r4, r3
 8011ab4:	f003 fa36 	bl	8014f24 <__malloc_lock>
 8011ab8:	4a1f      	ldr	r2, [pc, #124]	; (8011b38 <_free_r+0x98>)
 8011aba:	6813      	ldr	r3, [r2, #0]
 8011abc:	4610      	mov	r0, r2
 8011abe:	b933      	cbnz	r3, 8011ace <_free_r+0x2e>
 8011ac0:	6063      	str	r3, [r4, #4]
 8011ac2:	6014      	str	r4, [r2, #0]
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011aca:	f003 ba2c 	b.w	8014f26 <__malloc_unlock>
 8011ace:	42a3      	cmp	r3, r4
 8011ad0:	d90c      	bls.n	8011aec <_free_r+0x4c>
 8011ad2:	6821      	ldr	r1, [r4, #0]
 8011ad4:	1862      	adds	r2, r4, r1
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	bf04      	itt	eq
 8011ada:	681a      	ldreq	r2, [r3, #0]
 8011adc:	685b      	ldreq	r3, [r3, #4]
 8011ade:	6063      	str	r3, [r4, #4]
 8011ae0:	bf04      	itt	eq
 8011ae2:	1852      	addeq	r2, r2, r1
 8011ae4:	6022      	streq	r2, [r4, #0]
 8011ae6:	6004      	str	r4, [r0, #0]
 8011ae8:	e7ec      	b.n	8011ac4 <_free_r+0x24>
 8011aea:	4613      	mov	r3, r2
 8011aec:	685a      	ldr	r2, [r3, #4]
 8011aee:	b10a      	cbz	r2, 8011af4 <_free_r+0x54>
 8011af0:	42a2      	cmp	r2, r4
 8011af2:	d9fa      	bls.n	8011aea <_free_r+0x4a>
 8011af4:	6819      	ldr	r1, [r3, #0]
 8011af6:	1858      	adds	r0, r3, r1
 8011af8:	42a0      	cmp	r0, r4
 8011afa:	d10b      	bne.n	8011b14 <_free_r+0x74>
 8011afc:	6820      	ldr	r0, [r4, #0]
 8011afe:	4401      	add	r1, r0
 8011b00:	1858      	adds	r0, r3, r1
 8011b02:	4282      	cmp	r2, r0
 8011b04:	6019      	str	r1, [r3, #0]
 8011b06:	d1dd      	bne.n	8011ac4 <_free_r+0x24>
 8011b08:	6810      	ldr	r0, [r2, #0]
 8011b0a:	6852      	ldr	r2, [r2, #4]
 8011b0c:	605a      	str	r2, [r3, #4]
 8011b0e:	4401      	add	r1, r0
 8011b10:	6019      	str	r1, [r3, #0]
 8011b12:	e7d7      	b.n	8011ac4 <_free_r+0x24>
 8011b14:	d902      	bls.n	8011b1c <_free_r+0x7c>
 8011b16:	230c      	movs	r3, #12
 8011b18:	602b      	str	r3, [r5, #0]
 8011b1a:	e7d3      	b.n	8011ac4 <_free_r+0x24>
 8011b1c:	6820      	ldr	r0, [r4, #0]
 8011b1e:	1821      	adds	r1, r4, r0
 8011b20:	428a      	cmp	r2, r1
 8011b22:	bf04      	itt	eq
 8011b24:	6811      	ldreq	r1, [r2, #0]
 8011b26:	6852      	ldreq	r2, [r2, #4]
 8011b28:	6062      	str	r2, [r4, #4]
 8011b2a:	bf04      	itt	eq
 8011b2c:	1809      	addeq	r1, r1, r0
 8011b2e:	6021      	streq	r1, [r4, #0]
 8011b30:	605c      	str	r4, [r3, #4]
 8011b32:	e7c7      	b.n	8011ac4 <_free_r+0x24>
 8011b34:	bd38      	pop	{r3, r4, r5, pc}
 8011b36:	bf00      	nop
 8011b38:	200013c8 	.word	0x200013c8

08011b3c <_malloc_r>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	1ccd      	adds	r5, r1, #3
 8011b40:	f025 0503 	bic.w	r5, r5, #3
 8011b44:	3508      	adds	r5, #8
 8011b46:	2d0c      	cmp	r5, #12
 8011b48:	bf38      	it	cc
 8011b4a:	250c      	movcc	r5, #12
 8011b4c:	2d00      	cmp	r5, #0
 8011b4e:	4606      	mov	r6, r0
 8011b50:	db01      	blt.n	8011b56 <_malloc_r+0x1a>
 8011b52:	42a9      	cmp	r1, r5
 8011b54:	d903      	bls.n	8011b5e <_malloc_r+0x22>
 8011b56:	230c      	movs	r3, #12
 8011b58:	6033      	str	r3, [r6, #0]
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	bd70      	pop	{r4, r5, r6, pc}
 8011b5e:	f003 f9e1 	bl	8014f24 <__malloc_lock>
 8011b62:	4a21      	ldr	r2, [pc, #132]	; (8011be8 <_malloc_r+0xac>)
 8011b64:	6814      	ldr	r4, [r2, #0]
 8011b66:	4621      	mov	r1, r4
 8011b68:	b991      	cbnz	r1, 8011b90 <_malloc_r+0x54>
 8011b6a:	4c20      	ldr	r4, [pc, #128]	; (8011bec <_malloc_r+0xb0>)
 8011b6c:	6823      	ldr	r3, [r4, #0]
 8011b6e:	b91b      	cbnz	r3, 8011b78 <_malloc_r+0x3c>
 8011b70:	4630      	mov	r0, r6
 8011b72:	f000 fe69 	bl	8012848 <_sbrk_r>
 8011b76:	6020      	str	r0, [r4, #0]
 8011b78:	4629      	mov	r1, r5
 8011b7a:	4630      	mov	r0, r6
 8011b7c:	f000 fe64 	bl	8012848 <_sbrk_r>
 8011b80:	1c43      	adds	r3, r0, #1
 8011b82:	d124      	bne.n	8011bce <_malloc_r+0x92>
 8011b84:	230c      	movs	r3, #12
 8011b86:	6033      	str	r3, [r6, #0]
 8011b88:	4630      	mov	r0, r6
 8011b8a:	f003 f9cc 	bl	8014f26 <__malloc_unlock>
 8011b8e:	e7e4      	b.n	8011b5a <_malloc_r+0x1e>
 8011b90:	680b      	ldr	r3, [r1, #0]
 8011b92:	1b5b      	subs	r3, r3, r5
 8011b94:	d418      	bmi.n	8011bc8 <_malloc_r+0x8c>
 8011b96:	2b0b      	cmp	r3, #11
 8011b98:	d90f      	bls.n	8011bba <_malloc_r+0x7e>
 8011b9a:	600b      	str	r3, [r1, #0]
 8011b9c:	50cd      	str	r5, [r1, r3]
 8011b9e:	18cc      	adds	r4, r1, r3
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	f003 f9c0 	bl	8014f26 <__malloc_unlock>
 8011ba6:	f104 000b 	add.w	r0, r4, #11
 8011baa:	1d23      	adds	r3, r4, #4
 8011bac:	f020 0007 	bic.w	r0, r0, #7
 8011bb0:	1ac3      	subs	r3, r0, r3
 8011bb2:	d0d3      	beq.n	8011b5c <_malloc_r+0x20>
 8011bb4:	425a      	negs	r2, r3
 8011bb6:	50e2      	str	r2, [r4, r3]
 8011bb8:	e7d0      	b.n	8011b5c <_malloc_r+0x20>
 8011bba:	428c      	cmp	r4, r1
 8011bbc:	684b      	ldr	r3, [r1, #4]
 8011bbe:	bf16      	itet	ne
 8011bc0:	6063      	strne	r3, [r4, #4]
 8011bc2:	6013      	streq	r3, [r2, #0]
 8011bc4:	460c      	movne	r4, r1
 8011bc6:	e7eb      	b.n	8011ba0 <_malloc_r+0x64>
 8011bc8:	460c      	mov	r4, r1
 8011bca:	6849      	ldr	r1, [r1, #4]
 8011bcc:	e7cc      	b.n	8011b68 <_malloc_r+0x2c>
 8011bce:	1cc4      	adds	r4, r0, #3
 8011bd0:	f024 0403 	bic.w	r4, r4, #3
 8011bd4:	42a0      	cmp	r0, r4
 8011bd6:	d005      	beq.n	8011be4 <_malloc_r+0xa8>
 8011bd8:	1a21      	subs	r1, r4, r0
 8011bda:	4630      	mov	r0, r6
 8011bdc:	f000 fe34 	bl	8012848 <_sbrk_r>
 8011be0:	3001      	adds	r0, #1
 8011be2:	d0cf      	beq.n	8011b84 <_malloc_r+0x48>
 8011be4:	6025      	str	r5, [r4, #0]
 8011be6:	e7db      	b.n	8011ba0 <_malloc_r+0x64>
 8011be8:	200013c8 	.word	0x200013c8
 8011bec:	200013cc 	.word	0x200013cc

08011bf0 <__cvt>:
 8011bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bf2:	ed2d 8b02 	vpush	{d8}
 8011bf6:	eeb0 8b40 	vmov.f64	d8, d0
 8011bfa:	b085      	sub	sp, #20
 8011bfc:	4617      	mov	r7, r2
 8011bfe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011c00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011c02:	ee18 2a90 	vmov	r2, s17
 8011c06:	f025 0520 	bic.w	r5, r5, #32
 8011c0a:	2a00      	cmp	r2, #0
 8011c0c:	bfb6      	itet	lt
 8011c0e:	222d      	movlt	r2, #45	; 0x2d
 8011c10:	2200      	movge	r2, #0
 8011c12:	eeb1 8b40 	vneglt.f64	d8, d0
 8011c16:	2d46      	cmp	r5, #70	; 0x46
 8011c18:	460c      	mov	r4, r1
 8011c1a:	701a      	strb	r2, [r3, #0]
 8011c1c:	d004      	beq.n	8011c28 <__cvt+0x38>
 8011c1e:	2d45      	cmp	r5, #69	; 0x45
 8011c20:	d100      	bne.n	8011c24 <__cvt+0x34>
 8011c22:	3401      	adds	r4, #1
 8011c24:	2102      	movs	r1, #2
 8011c26:	e000      	b.n	8011c2a <__cvt+0x3a>
 8011c28:	2103      	movs	r1, #3
 8011c2a:	ab03      	add	r3, sp, #12
 8011c2c:	9301      	str	r3, [sp, #4]
 8011c2e:	ab02      	add	r3, sp, #8
 8011c30:	9300      	str	r3, [sp, #0]
 8011c32:	4622      	mov	r2, r4
 8011c34:	4633      	mov	r3, r6
 8011c36:	eeb0 0b48 	vmov.f64	d0, d8
 8011c3a:	f001 fedd 	bl	80139f8 <_dtoa_r>
 8011c3e:	2d47      	cmp	r5, #71	; 0x47
 8011c40:	d101      	bne.n	8011c46 <__cvt+0x56>
 8011c42:	07fb      	lsls	r3, r7, #31
 8011c44:	d51e      	bpl.n	8011c84 <__cvt+0x94>
 8011c46:	2d46      	cmp	r5, #70	; 0x46
 8011c48:	eb00 0304 	add.w	r3, r0, r4
 8011c4c:	d10c      	bne.n	8011c68 <__cvt+0x78>
 8011c4e:	7802      	ldrb	r2, [r0, #0]
 8011c50:	2a30      	cmp	r2, #48	; 0x30
 8011c52:	d107      	bne.n	8011c64 <__cvt+0x74>
 8011c54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5c:	bf1c      	itt	ne
 8011c5e:	f1c4 0401 	rsbne	r4, r4, #1
 8011c62:	6034      	strne	r4, [r6, #0]
 8011c64:	6832      	ldr	r2, [r6, #0]
 8011c66:	4413      	add	r3, r2
 8011c68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c70:	d007      	beq.n	8011c82 <__cvt+0x92>
 8011c72:	2130      	movs	r1, #48	; 0x30
 8011c74:	9a03      	ldr	r2, [sp, #12]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d204      	bcs.n	8011c84 <__cvt+0x94>
 8011c7a:	1c54      	adds	r4, r2, #1
 8011c7c:	9403      	str	r4, [sp, #12]
 8011c7e:	7011      	strb	r1, [r2, #0]
 8011c80:	e7f8      	b.n	8011c74 <__cvt+0x84>
 8011c82:	9303      	str	r3, [sp, #12]
 8011c84:	9b03      	ldr	r3, [sp, #12]
 8011c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c88:	1a1b      	subs	r3, r3, r0
 8011c8a:	6013      	str	r3, [r2, #0]
 8011c8c:	b005      	add	sp, #20
 8011c8e:	ecbd 8b02 	vpop	{d8}
 8011c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c94 <__exponent>:
 8011c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c96:	2900      	cmp	r1, #0
 8011c98:	4604      	mov	r4, r0
 8011c9a:	bfba      	itte	lt
 8011c9c:	4249      	neglt	r1, r1
 8011c9e:	232d      	movlt	r3, #45	; 0x2d
 8011ca0:	232b      	movge	r3, #43	; 0x2b
 8011ca2:	2909      	cmp	r1, #9
 8011ca4:	f804 2b02 	strb.w	r2, [r4], #2
 8011ca8:	7043      	strb	r3, [r0, #1]
 8011caa:	dd20      	ble.n	8011cee <__exponent+0x5a>
 8011cac:	f10d 0307 	add.w	r3, sp, #7
 8011cb0:	461f      	mov	r7, r3
 8011cb2:	260a      	movs	r6, #10
 8011cb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8011cb8:	fb06 1115 	mls	r1, r6, r5, r1
 8011cbc:	3130      	adds	r1, #48	; 0x30
 8011cbe:	2d09      	cmp	r5, #9
 8011cc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011cc4:	f103 32ff 	add.w	r2, r3, #4294967295
 8011cc8:	4629      	mov	r1, r5
 8011cca:	dc09      	bgt.n	8011ce0 <__exponent+0x4c>
 8011ccc:	3130      	adds	r1, #48	; 0x30
 8011cce:	3b02      	subs	r3, #2
 8011cd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011cd4:	42bb      	cmp	r3, r7
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	d304      	bcc.n	8011ce4 <__exponent+0x50>
 8011cda:	1a10      	subs	r0, r2, r0
 8011cdc:	b003      	add	sp, #12
 8011cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	e7e7      	b.n	8011cb4 <__exponent+0x20>
 8011ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ce8:	f804 2b01 	strb.w	r2, [r4], #1
 8011cec:	e7f2      	b.n	8011cd4 <__exponent+0x40>
 8011cee:	2330      	movs	r3, #48	; 0x30
 8011cf0:	4419      	add	r1, r3
 8011cf2:	7083      	strb	r3, [r0, #2]
 8011cf4:	1d02      	adds	r2, r0, #4
 8011cf6:	70c1      	strb	r1, [r0, #3]
 8011cf8:	e7ef      	b.n	8011cda <__exponent+0x46>
 8011cfa:	0000      	movs	r0, r0
 8011cfc:	0000      	movs	r0, r0
	...

08011d00 <_printf_float>:
 8011d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d04:	b08d      	sub	sp, #52	; 0x34
 8011d06:	460c      	mov	r4, r1
 8011d08:	4616      	mov	r6, r2
 8011d0a:	461f      	mov	r7, r3
 8011d0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011d10:	4605      	mov	r5, r0
 8011d12:	f003 f871 	bl	8014df8 <_localeconv_r>
 8011d16:	f8d0 b000 	ldr.w	fp, [r0]
 8011d1a:	4658      	mov	r0, fp
 8011d1c:	f7ee fa90 	bl	8000240 <strlen>
 8011d20:	2300      	movs	r3, #0
 8011d22:	930a      	str	r3, [sp, #40]	; 0x28
 8011d24:	f8d8 3000 	ldr.w	r3, [r8]
 8011d28:	9005      	str	r0, [sp, #20]
 8011d2a:	3307      	adds	r3, #7
 8011d2c:	f023 0307 	bic.w	r3, r3, #7
 8011d30:	f103 0108 	add.w	r1, r3, #8
 8011d34:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011d38:	6822      	ldr	r2, [r4, #0]
 8011d3a:	f8c8 1000 	str.w	r1, [r8]
 8011d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011d46:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8011fd0 <_printf_float+0x2d0>
 8011d4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011d4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011d52:	eeb4 6b47 	vcmp.f64	d6, d7
 8011d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5a:	dd24      	ble.n	8011da6 <_printf_float+0xa6>
 8011d5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d64:	d502      	bpl.n	8011d6c <_printf_float+0x6c>
 8011d66:	232d      	movs	r3, #45	; 0x2d
 8011d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d6c:	499a      	ldr	r1, [pc, #616]	; (8011fd8 <_printf_float+0x2d8>)
 8011d6e:	4b9b      	ldr	r3, [pc, #620]	; (8011fdc <_printf_float+0x2dc>)
 8011d70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011d74:	bf8c      	ite	hi
 8011d76:	4688      	movhi	r8, r1
 8011d78:	4698      	movls	r8, r3
 8011d7a:	f022 0204 	bic.w	r2, r2, #4
 8011d7e:	2303      	movs	r3, #3
 8011d80:	6123      	str	r3, [r4, #16]
 8011d82:	6022      	str	r2, [r4, #0]
 8011d84:	f04f 0a00 	mov.w	sl, #0
 8011d88:	9700      	str	r7, [sp, #0]
 8011d8a:	4633      	mov	r3, r6
 8011d8c:	aa0b      	add	r2, sp, #44	; 0x2c
 8011d8e:	4621      	mov	r1, r4
 8011d90:	4628      	mov	r0, r5
 8011d92:	f000 f9e1 	bl	8012158 <_printf_common>
 8011d96:	3001      	adds	r0, #1
 8011d98:	f040 8089 	bne.w	8011eae <_printf_float+0x1ae>
 8011d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011da0:	b00d      	add	sp, #52	; 0x34
 8011da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da6:	eeb4 0b40 	vcmp.f64	d0, d0
 8011daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dae:	d702      	bvc.n	8011db6 <_printf_float+0xb6>
 8011db0:	498b      	ldr	r1, [pc, #556]	; (8011fe0 <_printf_float+0x2e0>)
 8011db2:	4b8c      	ldr	r3, [pc, #560]	; (8011fe4 <_printf_float+0x2e4>)
 8011db4:	e7dc      	b.n	8011d70 <_printf_float+0x70>
 8011db6:	6861      	ldr	r1, [r4, #4]
 8011db8:	1c4b      	adds	r3, r1, #1
 8011dba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011dbe:	ab0a      	add	r3, sp, #40	; 0x28
 8011dc0:	a809      	add	r0, sp, #36	; 0x24
 8011dc2:	d13b      	bne.n	8011e3c <_printf_float+0x13c>
 8011dc4:	2106      	movs	r1, #6
 8011dc6:	6061      	str	r1, [r4, #4]
 8011dc8:	f04f 0c00 	mov.w	ip, #0
 8011dcc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8011dd0:	e9cd 0900 	strd	r0, r9, [sp]
 8011dd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011dd8:	6022      	str	r2, [r4, #0]
 8011dda:	6861      	ldr	r1, [r4, #4]
 8011ddc:	4628      	mov	r0, r5
 8011dde:	f7ff ff07 	bl	8011bf0 <__cvt>
 8011de2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8011de6:	2b47      	cmp	r3, #71	; 0x47
 8011de8:	4680      	mov	r8, r0
 8011dea:	d109      	bne.n	8011e00 <_printf_float+0x100>
 8011dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dee:	1cd8      	adds	r0, r3, #3
 8011df0:	db02      	blt.n	8011df8 <_printf_float+0xf8>
 8011df2:	6862      	ldr	r2, [r4, #4]
 8011df4:	4293      	cmp	r3, r2
 8011df6:	dd47      	ble.n	8011e88 <_printf_float+0x188>
 8011df8:	f1a9 0902 	sub.w	r9, r9, #2
 8011dfc:	fa5f f989 	uxtb.w	r9, r9
 8011e00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e06:	d824      	bhi.n	8011e52 <_printf_float+0x152>
 8011e08:	3901      	subs	r1, #1
 8011e0a:	464a      	mov	r2, r9
 8011e0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011e10:	9109      	str	r1, [sp, #36]	; 0x24
 8011e12:	f7ff ff3f 	bl	8011c94 <__exponent>
 8011e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e18:	1813      	adds	r3, r2, r0
 8011e1a:	2a01      	cmp	r2, #1
 8011e1c:	4682      	mov	sl, r0
 8011e1e:	6123      	str	r3, [r4, #16]
 8011e20:	dc02      	bgt.n	8011e28 <_printf_float+0x128>
 8011e22:	6822      	ldr	r2, [r4, #0]
 8011e24:	07d1      	lsls	r1, r2, #31
 8011e26:	d501      	bpl.n	8011e2c <_printf_float+0x12c>
 8011e28:	3301      	adds	r3, #1
 8011e2a:	6123      	str	r3, [r4, #16]
 8011e2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d0a9      	beq.n	8011d88 <_printf_float+0x88>
 8011e34:	232d      	movs	r3, #45	; 0x2d
 8011e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e3a:	e7a5      	b.n	8011d88 <_printf_float+0x88>
 8011e3c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8011e40:	f000 8178 	beq.w	8012134 <_printf_float+0x434>
 8011e44:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011e48:	d1be      	bne.n	8011dc8 <_printf_float+0xc8>
 8011e4a:	2900      	cmp	r1, #0
 8011e4c:	d1bc      	bne.n	8011dc8 <_printf_float+0xc8>
 8011e4e:	2101      	movs	r1, #1
 8011e50:	e7b9      	b.n	8011dc6 <_printf_float+0xc6>
 8011e52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011e56:	d119      	bne.n	8011e8c <_printf_float+0x18c>
 8011e58:	2900      	cmp	r1, #0
 8011e5a:	6863      	ldr	r3, [r4, #4]
 8011e5c:	dd0c      	ble.n	8011e78 <_printf_float+0x178>
 8011e5e:	6121      	str	r1, [r4, #16]
 8011e60:	b913      	cbnz	r3, 8011e68 <_printf_float+0x168>
 8011e62:	6822      	ldr	r2, [r4, #0]
 8011e64:	07d2      	lsls	r2, r2, #31
 8011e66:	d502      	bpl.n	8011e6e <_printf_float+0x16e>
 8011e68:	3301      	adds	r3, #1
 8011e6a:	440b      	add	r3, r1
 8011e6c:	6123      	str	r3, [r4, #16]
 8011e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e70:	65a3      	str	r3, [r4, #88]	; 0x58
 8011e72:	f04f 0a00 	mov.w	sl, #0
 8011e76:	e7d9      	b.n	8011e2c <_printf_float+0x12c>
 8011e78:	b913      	cbnz	r3, 8011e80 <_printf_float+0x180>
 8011e7a:	6822      	ldr	r2, [r4, #0]
 8011e7c:	07d0      	lsls	r0, r2, #31
 8011e7e:	d501      	bpl.n	8011e84 <_printf_float+0x184>
 8011e80:	3302      	adds	r3, #2
 8011e82:	e7f3      	b.n	8011e6c <_printf_float+0x16c>
 8011e84:	2301      	movs	r3, #1
 8011e86:	e7f1      	b.n	8011e6c <_printf_float+0x16c>
 8011e88:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011e8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011e90:	4293      	cmp	r3, r2
 8011e92:	db05      	blt.n	8011ea0 <_printf_float+0x1a0>
 8011e94:	6822      	ldr	r2, [r4, #0]
 8011e96:	6123      	str	r3, [r4, #16]
 8011e98:	07d1      	lsls	r1, r2, #31
 8011e9a:	d5e8      	bpl.n	8011e6e <_printf_float+0x16e>
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	e7e5      	b.n	8011e6c <_printf_float+0x16c>
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	bfd4      	ite	le
 8011ea4:	f1c3 0302 	rsble	r3, r3, #2
 8011ea8:	2301      	movgt	r3, #1
 8011eaa:	4413      	add	r3, r2
 8011eac:	e7de      	b.n	8011e6c <_printf_float+0x16c>
 8011eae:	6823      	ldr	r3, [r4, #0]
 8011eb0:	055a      	lsls	r2, r3, #21
 8011eb2:	d407      	bmi.n	8011ec4 <_printf_float+0x1c4>
 8011eb4:	6923      	ldr	r3, [r4, #16]
 8011eb6:	4642      	mov	r2, r8
 8011eb8:	4631      	mov	r1, r6
 8011eba:	4628      	mov	r0, r5
 8011ebc:	47b8      	blx	r7
 8011ebe:	3001      	adds	r0, #1
 8011ec0:	d12a      	bne.n	8011f18 <_printf_float+0x218>
 8011ec2:	e76b      	b.n	8011d9c <_printf_float+0x9c>
 8011ec4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011ec8:	f240 80de 	bls.w	8012088 <_printf_float+0x388>
 8011ecc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011ed0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed8:	d133      	bne.n	8011f42 <_printf_float+0x242>
 8011eda:	2301      	movs	r3, #1
 8011edc:	4a42      	ldr	r2, [pc, #264]	; (8011fe8 <_printf_float+0x2e8>)
 8011ede:	4631      	mov	r1, r6
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	47b8      	blx	r7
 8011ee4:	3001      	adds	r0, #1
 8011ee6:	f43f af59 	beq.w	8011d9c <_printf_float+0x9c>
 8011eea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	db02      	blt.n	8011ef8 <_printf_float+0x1f8>
 8011ef2:	6823      	ldr	r3, [r4, #0]
 8011ef4:	07d8      	lsls	r0, r3, #31
 8011ef6:	d50f      	bpl.n	8011f18 <_printf_float+0x218>
 8011ef8:	9b05      	ldr	r3, [sp, #20]
 8011efa:	465a      	mov	r2, fp
 8011efc:	4631      	mov	r1, r6
 8011efe:	4628      	mov	r0, r5
 8011f00:	47b8      	blx	r7
 8011f02:	3001      	adds	r0, #1
 8011f04:	f43f af4a 	beq.w	8011d9c <_printf_float+0x9c>
 8011f08:	f04f 0800 	mov.w	r8, #0
 8011f0c:	f104 091a 	add.w	r9, r4, #26
 8011f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f12:	3b01      	subs	r3, #1
 8011f14:	4543      	cmp	r3, r8
 8011f16:	dc09      	bgt.n	8011f2c <_printf_float+0x22c>
 8011f18:	6823      	ldr	r3, [r4, #0]
 8011f1a:	079b      	lsls	r3, r3, #30
 8011f1c:	f100 8105 	bmi.w	801212a <_printf_float+0x42a>
 8011f20:	68e0      	ldr	r0, [r4, #12]
 8011f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f24:	4298      	cmp	r0, r3
 8011f26:	bfb8      	it	lt
 8011f28:	4618      	movlt	r0, r3
 8011f2a:	e739      	b.n	8011da0 <_printf_float+0xa0>
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	464a      	mov	r2, r9
 8011f30:	4631      	mov	r1, r6
 8011f32:	4628      	mov	r0, r5
 8011f34:	47b8      	blx	r7
 8011f36:	3001      	adds	r0, #1
 8011f38:	f43f af30 	beq.w	8011d9c <_printf_float+0x9c>
 8011f3c:	f108 0801 	add.w	r8, r8, #1
 8011f40:	e7e6      	b.n	8011f10 <_printf_float+0x210>
 8011f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	dc2b      	bgt.n	8011fa0 <_printf_float+0x2a0>
 8011f48:	2301      	movs	r3, #1
 8011f4a:	4a27      	ldr	r2, [pc, #156]	; (8011fe8 <_printf_float+0x2e8>)
 8011f4c:	4631      	mov	r1, r6
 8011f4e:	4628      	mov	r0, r5
 8011f50:	47b8      	blx	r7
 8011f52:	3001      	adds	r0, #1
 8011f54:	f43f af22 	beq.w	8011d9c <_printf_float+0x9c>
 8011f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f5a:	b923      	cbnz	r3, 8011f66 <_printf_float+0x266>
 8011f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f5e:	b913      	cbnz	r3, 8011f66 <_printf_float+0x266>
 8011f60:	6823      	ldr	r3, [r4, #0]
 8011f62:	07d9      	lsls	r1, r3, #31
 8011f64:	d5d8      	bpl.n	8011f18 <_printf_float+0x218>
 8011f66:	9b05      	ldr	r3, [sp, #20]
 8011f68:	465a      	mov	r2, fp
 8011f6a:	4631      	mov	r1, r6
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	47b8      	blx	r7
 8011f70:	3001      	adds	r0, #1
 8011f72:	f43f af13 	beq.w	8011d9c <_printf_float+0x9c>
 8011f76:	f04f 0900 	mov.w	r9, #0
 8011f7a:	f104 0a1a 	add.w	sl, r4, #26
 8011f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f80:	425b      	negs	r3, r3
 8011f82:	454b      	cmp	r3, r9
 8011f84:	dc01      	bgt.n	8011f8a <_printf_float+0x28a>
 8011f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f88:	e795      	b.n	8011eb6 <_printf_float+0x1b6>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	4652      	mov	r2, sl
 8011f8e:	4631      	mov	r1, r6
 8011f90:	4628      	mov	r0, r5
 8011f92:	47b8      	blx	r7
 8011f94:	3001      	adds	r0, #1
 8011f96:	f43f af01 	beq.w	8011d9c <_printf_float+0x9c>
 8011f9a:	f109 0901 	add.w	r9, r9, #1
 8011f9e:	e7ee      	b.n	8011f7e <_printf_float+0x27e>
 8011fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	bfa8      	it	ge
 8011fa8:	461a      	movge	r2, r3
 8011faa:	2a00      	cmp	r2, #0
 8011fac:	4691      	mov	r9, r2
 8011fae:	dd07      	ble.n	8011fc0 <_printf_float+0x2c0>
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	4631      	mov	r1, r6
 8011fb4:	4642      	mov	r2, r8
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	47b8      	blx	r7
 8011fba:	3001      	adds	r0, #1
 8011fbc:	f43f aeee 	beq.w	8011d9c <_printf_float+0x9c>
 8011fc0:	f104 031a 	add.w	r3, r4, #26
 8011fc4:	f04f 0a00 	mov.w	sl, #0
 8011fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fcc:	9307      	str	r3, [sp, #28]
 8011fce:	e017      	b.n	8012000 <_printf_float+0x300>
 8011fd0:	ffffffff 	.word	0xffffffff
 8011fd4:	7fefffff 	.word	0x7fefffff
 8011fd8:	0801704c 	.word	0x0801704c
 8011fdc:	08017048 	.word	0x08017048
 8011fe0:	08017054 	.word	0x08017054
 8011fe4:	08017050 	.word	0x08017050
 8011fe8:	08017273 	.word	0x08017273
 8011fec:	2301      	movs	r3, #1
 8011fee:	9a07      	ldr	r2, [sp, #28]
 8011ff0:	4631      	mov	r1, r6
 8011ff2:	4628      	mov	r0, r5
 8011ff4:	47b8      	blx	r7
 8011ff6:	3001      	adds	r0, #1
 8011ff8:	f43f aed0 	beq.w	8011d9c <_printf_float+0x9c>
 8011ffc:	f10a 0a01 	add.w	sl, sl, #1
 8012000:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012002:	9306      	str	r3, [sp, #24]
 8012004:	eba3 0309 	sub.w	r3, r3, r9
 8012008:	4553      	cmp	r3, sl
 801200a:	dcef      	bgt.n	8011fec <_printf_float+0x2ec>
 801200c:	9b06      	ldr	r3, [sp, #24]
 801200e:	4498      	add	r8, r3
 8012010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012014:	429a      	cmp	r2, r3
 8012016:	db15      	blt.n	8012044 <_printf_float+0x344>
 8012018:	6823      	ldr	r3, [r4, #0]
 801201a:	07da      	lsls	r2, r3, #31
 801201c:	d412      	bmi.n	8012044 <_printf_float+0x344>
 801201e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012020:	9a06      	ldr	r2, [sp, #24]
 8012022:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012024:	1a9a      	subs	r2, r3, r2
 8012026:	eba3 0a01 	sub.w	sl, r3, r1
 801202a:	4592      	cmp	sl, r2
 801202c:	bfa8      	it	ge
 801202e:	4692      	movge	sl, r2
 8012030:	f1ba 0f00 	cmp.w	sl, #0
 8012034:	dc0e      	bgt.n	8012054 <_printf_float+0x354>
 8012036:	f04f 0800 	mov.w	r8, #0
 801203a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801203e:	f104 091a 	add.w	r9, r4, #26
 8012042:	e019      	b.n	8012078 <_printf_float+0x378>
 8012044:	9b05      	ldr	r3, [sp, #20]
 8012046:	465a      	mov	r2, fp
 8012048:	4631      	mov	r1, r6
 801204a:	4628      	mov	r0, r5
 801204c:	47b8      	blx	r7
 801204e:	3001      	adds	r0, #1
 8012050:	d1e5      	bne.n	801201e <_printf_float+0x31e>
 8012052:	e6a3      	b.n	8011d9c <_printf_float+0x9c>
 8012054:	4653      	mov	r3, sl
 8012056:	4642      	mov	r2, r8
 8012058:	4631      	mov	r1, r6
 801205a:	4628      	mov	r0, r5
 801205c:	47b8      	blx	r7
 801205e:	3001      	adds	r0, #1
 8012060:	d1e9      	bne.n	8012036 <_printf_float+0x336>
 8012062:	e69b      	b.n	8011d9c <_printf_float+0x9c>
 8012064:	2301      	movs	r3, #1
 8012066:	464a      	mov	r2, r9
 8012068:	4631      	mov	r1, r6
 801206a:	4628      	mov	r0, r5
 801206c:	47b8      	blx	r7
 801206e:	3001      	adds	r0, #1
 8012070:	f43f ae94 	beq.w	8011d9c <_printf_float+0x9c>
 8012074:	f108 0801 	add.w	r8, r8, #1
 8012078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801207c:	1a9b      	subs	r3, r3, r2
 801207e:	eba3 030a 	sub.w	r3, r3, sl
 8012082:	4543      	cmp	r3, r8
 8012084:	dcee      	bgt.n	8012064 <_printf_float+0x364>
 8012086:	e747      	b.n	8011f18 <_printf_float+0x218>
 8012088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801208a:	2a01      	cmp	r2, #1
 801208c:	dc01      	bgt.n	8012092 <_printf_float+0x392>
 801208e:	07db      	lsls	r3, r3, #31
 8012090:	d539      	bpl.n	8012106 <_printf_float+0x406>
 8012092:	2301      	movs	r3, #1
 8012094:	4642      	mov	r2, r8
 8012096:	4631      	mov	r1, r6
 8012098:	4628      	mov	r0, r5
 801209a:	47b8      	blx	r7
 801209c:	3001      	adds	r0, #1
 801209e:	f43f ae7d 	beq.w	8011d9c <_printf_float+0x9c>
 80120a2:	9b05      	ldr	r3, [sp, #20]
 80120a4:	465a      	mov	r2, fp
 80120a6:	4631      	mov	r1, r6
 80120a8:	4628      	mov	r0, r5
 80120aa:	47b8      	blx	r7
 80120ac:	3001      	adds	r0, #1
 80120ae:	f108 0801 	add.w	r8, r8, #1
 80120b2:	f43f ae73 	beq.w	8011d9c <_printf_float+0x9c>
 80120b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80120ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80120c8:	d018      	beq.n	80120fc <_printf_float+0x3fc>
 80120ca:	4642      	mov	r2, r8
 80120cc:	4631      	mov	r1, r6
 80120ce:	4628      	mov	r0, r5
 80120d0:	47b8      	blx	r7
 80120d2:	3001      	adds	r0, #1
 80120d4:	d10e      	bne.n	80120f4 <_printf_float+0x3f4>
 80120d6:	e661      	b.n	8011d9c <_printf_float+0x9c>
 80120d8:	2301      	movs	r3, #1
 80120da:	464a      	mov	r2, r9
 80120dc:	4631      	mov	r1, r6
 80120de:	4628      	mov	r0, r5
 80120e0:	47b8      	blx	r7
 80120e2:	3001      	adds	r0, #1
 80120e4:	f43f ae5a 	beq.w	8011d9c <_printf_float+0x9c>
 80120e8:	f108 0801 	add.w	r8, r8, #1
 80120ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120ee:	3b01      	subs	r3, #1
 80120f0:	4543      	cmp	r3, r8
 80120f2:	dcf1      	bgt.n	80120d8 <_printf_float+0x3d8>
 80120f4:	4653      	mov	r3, sl
 80120f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80120fa:	e6dd      	b.n	8011eb8 <_printf_float+0x1b8>
 80120fc:	f04f 0800 	mov.w	r8, #0
 8012100:	f104 091a 	add.w	r9, r4, #26
 8012104:	e7f2      	b.n	80120ec <_printf_float+0x3ec>
 8012106:	2301      	movs	r3, #1
 8012108:	e7df      	b.n	80120ca <_printf_float+0x3ca>
 801210a:	2301      	movs	r3, #1
 801210c:	464a      	mov	r2, r9
 801210e:	4631      	mov	r1, r6
 8012110:	4628      	mov	r0, r5
 8012112:	47b8      	blx	r7
 8012114:	3001      	adds	r0, #1
 8012116:	f43f ae41 	beq.w	8011d9c <_printf_float+0x9c>
 801211a:	f108 0801 	add.w	r8, r8, #1
 801211e:	68e3      	ldr	r3, [r4, #12]
 8012120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012122:	1a9b      	subs	r3, r3, r2
 8012124:	4543      	cmp	r3, r8
 8012126:	dcf0      	bgt.n	801210a <_printf_float+0x40a>
 8012128:	e6fa      	b.n	8011f20 <_printf_float+0x220>
 801212a:	f04f 0800 	mov.w	r8, #0
 801212e:	f104 0919 	add.w	r9, r4, #25
 8012132:	e7f4      	b.n	801211e <_printf_float+0x41e>
 8012134:	2900      	cmp	r1, #0
 8012136:	f43f ae8a 	beq.w	8011e4e <_printf_float+0x14e>
 801213a:	f04f 0c00 	mov.w	ip, #0
 801213e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8012142:	e9cd 0900 	strd	r0, r9, [sp]
 8012146:	6022      	str	r2, [r4, #0]
 8012148:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801214c:	4628      	mov	r0, r5
 801214e:	f7ff fd4f 	bl	8011bf0 <__cvt>
 8012152:	4680      	mov	r8, r0
 8012154:	e64a      	b.n	8011dec <_printf_float+0xec>
 8012156:	bf00      	nop

08012158 <_printf_common>:
 8012158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801215c:	4691      	mov	r9, r2
 801215e:	461f      	mov	r7, r3
 8012160:	688a      	ldr	r2, [r1, #8]
 8012162:	690b      	ldr	r3, [r1, #16]
 8012164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012168:	4293      	cmp	r3, r2
 801216a:	bfb8      	it	lt
 801216c:	4613      	movlt	r3, r2
 801216e:	f8c9 3000 	str.w	r3, [r9]
 8012172:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012176:	4606      	mov	r6, r0
 8012178:	460c      	mov	r4, r1
 801217a:	b112      	cbz	r2, 8012182 <_printf_common+0x2a>
 801217c:	3301      	adds	r3, #1
 801217e:	f8c9 3000 	str.w	r3, [r9]
 8012182:	6823      	ldr	r3, [r4, #0]
 8012184:	0699      	lsls	r1, r3, #26
 8012186:	bf42      	ittt	mi
 8012188:	f8d9 3000 	ldrmi.w	r3, [r9]
 801218c:	3302      	addmi	r3, #2
 801218e:	f8c9 3000 	strmi.w	r3, [r9]
 8012192:	6825      	ldr	r5, [r4, #0]
 8012194:	f015 0506 	ands.w	r5, r5, #6
 8012198:	d107      	bne.n	80121aa <_printf_common+0x52>
 801219a:	f104 0a19 	add.w	sl, r4, #25
 801219e:	68e3      	ldr	r3, [r4, #12]
 80121a0:	f8d9 2000 	ldr.w	r2, [r9]
 80121a4:	1a9b      	subs	r3, r3, r2
 80121a6:	42ab      	cmp	r3, r5
 80121a8:	dc28      	bgt.n	80121fc <_printf_common+0xa4>
 80121aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80121ae:	6822      	ldr	r2, [r4, #0]
 80121b0:	3300      	adds	r3, #0
 80121b2:	bf18      	it	ne
 80121b4:	2301      	movne	r3, #1
 80121b6:	0692      	lsls	r2, r2, #26
 80121b8:	d42d      	bmi.n	8012216 <_printf_common+0xbe>
 80121ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80121be:	4639      	mov	r1, r7
 80121c0:	4630      	mov	r0, r6
 80121c2:	47c0      	blx	r8
 80121c4:	3001      	adds	r0, #1
 80121c6:	d020      	beq.n	801220a <_printf_common+0xb2>
 80121c8:	6823      	ldr	r3, [r4, #0]
 80121ca:	68e5      	ldr	r5, [r4, #12]
 80121cc:	f8d9 2000 	ldr.w	r2, [r9]
 80121d0:	f003 0306 	and.w	r3, r3, #6
 80121d4:	2b04      	cmp	r3, #4
 80121d6:	bf08      	it	eq
 80121d8:	1aad      	subeq	r5, r5, r2
 80121da:	68a3      	ldr	r3, [r4, #8]
 80121dc:	6922      	ldr	r2, [r4, #16]
 80121de:	bf0c      	ite	eq
 80121e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80121e4:	2500      	movne	r5, #0
 80121e6:	4293      	cmp	r3, r2
 80121e8:	bfc4      	itt	gt
 80121ea:	1a9b      	subgt	r3, r3, r2
 80121ec:	18ed      	addgt	r5, r5, r3
 80121ee:	f04f 0900 	mov.w	r9, #0
 80121f2:	341a      	adds	r4, #26
 80121f4:	454d      	cmp	r5, r9
 80121f6:	d11a      	bne.n	801222e <_printf_common+0xd6>
 80121f8:	2000      	movs	r0, #0
 80121fa:	e008      	b.n	801220e <_printf_common+0xb6>
 80121fc:	2301      	movs	r3, #1
 80121fe:	4652      	mov	r2, sl
 8012200:	4639      	mov	r1, r7
 8012202:	4630      	mov	r0, r6
 8012204:	47c0      	blx	r8
 8012206:	3001      	adds	r0, #1
 8012208:	d103      	bne.n	8012212 <_printf_common+0xba>
 801220a:	f04f 30ff 	mov.w	r0, #4294967295
 801220e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012212:	3501      	adds	r5, #1
 8012214:	e7c3      	b.n	801219e <_printf_common+0x46>
 8012216:	18e1      	adds	r1, r4, r3
 8012218:	1c5a      	adds	r2, r3, #1
 801221a:	2030      	movs	r0, #48	; 0x30
 801221c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012220:	4422      	add	r2, r4
 8012222:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012226:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801222a:	3302      	adds	r3, #2
 801222c:	e7c5      	b.n	80121ba <_printf_common+0x62>
 801222e:	2301      	movs	r3, #1
 8012230:	4622      	mov	r2, r4
 8012232:	4639      	mov	r1, r7
 8012234:	4630      	mov	r0, r6
 8012236:	47c0      	blx	r8
 8012238:	3001      	adds	r0, #1
 801223a:	d0e6      	beq.n	801220a <_printf_common+0xb2>
 801223c:	f109 0901 	add.w	r9, r9, #1
 8012240:	e7d8      	b.n	80121f4 <_printf_common+0x9c>
	...

08012244 <_printf_i>:
 8012244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012248:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801224c:	460c      	mov	r4, r1
 801224e:	7e09      	ldrb	r1, [r1, #24]
 8012250:	b085      	sub	sp, #20
 8012252:	296e      	cmp	r1, #110	; 0x6e
 8012254:	4617      	mov	r7, r2
 8012256:	4606      	mov	r6, r0
 8012258:	4698      	mov	r8, r3
 801225a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801225c:	f000 80b3 	beq.w	80123c6 <_printf_i+0x182>
 8012260:	d822      	bhi.n	80122a8 <_printf_i+0x64>
 8012262:	2963      	cmp	r1, #99	; 0x63
 8012264:	d036      	beq.n	80122d4 <_printf_i+0x90>
 8012266:	d80a      	bhi.n	801227e <_printf_i+0x3a>
 8012268:	2900      	cmp	r1, #0
 801226a:	f000 80b9 	beq.w	80123e0 <_printf_i+0x19c>
 801226e:	2958      	cmp	r1, #88	; 0x58
 8012270:	f000 8083 	beq.w	801237a <_printf_i+0x136>
 8012274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012278:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801227c:	e032      	b.n	80122e4 <_printf_i+0xa0>
 801227e:	2964      	cmp	r1, #100	; 0x64
 8012280:	d001      	beq.n	8012286 <_printf_i+0x42>
 8012282:	2969      	cmp	r1, #105	; 0x69
 8012284:	d1f6      	bne.n	8012274 <_printf_i+0x30>
 8012286:	6820      	ldr	r0, [r4, #0]
 8012288:	6813      	ldr	r3, [r2, #0]
 801228a:	0605      	lsls	r5, r0, #24
 801228c:	f103 0104 	add.w	r1, r3, #4
 8012290:	d52a      	bpl.n	80122e8 <_printf_i+0xa4>
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	6011      	str	r1, [r2, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	da03      	bge.n	80122a2 <_printf_i+0x5e>
 801229a:	222d      	movs	r2, #45	; 0x2d
 801229c:	425b      	negs	r3, r3
 801229e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80122a2:	486f      	ldr	r0, [pc, #444]	; (8012460 <_printf_i+0x21c>)
 80122a4:	220a      	movs	r2, #10
 80122a6:	e039      	b.n	801231c <_printf_i+0xd8>
 80122a8:	2973      	cmp	r1, #115	; 0x73
 80122aa:	f000 809d 	beq.w	80123e8 <_printf_i+0x1a4>
 80122ae:	d808      	bhi.n	80122c2 <_printf_i+0x7e>
 80122b0:	296f      	cmp	r1, #111	; 0x6f
 80122b2:	d020      	beq.n	80122f6 <_printf_i+0xb2>
 80122b4:	2970      	cmp	r1, #112	; 0x70
 80122b6:	d1dd      	bne.n	8012274 <_printf_i+0x30>
 80122b8:	6823      	ldr	r3, [r4, #0]
 80122ba:	f043 0320 	orr.w	r3, r3, #32
 80122be:	6023      	str	r3, [r4, #0]
 80122c0:	e003      	b.n	80122ca <_printf_i+0x86>
 80122c2:	2975      	cmp	r1, #117	; 0x75
 80122c4:	d017      	beq.n	80122f6 <_printf_i+0xb2>
 80122c6:	2978      	cmp	r1, #120	; 0x78
 80122c8:	d1d4      	bne.n	8012274 <_printf_i+0x30>
 80122ca:	2378      	movs	r3, #120	; 0x78
 80122cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80122d0:	4864      	ldr	r0, [pc, #400]	; (8012464 <_printf_i+0x220>)
 80122d2:	e055      	b.n	8012380 <_printf_i+0x13c>
 80122d4:	6813      	ldr	r3, [r2, #0]
 80122d6:	1d19      	adds	r1, r3, #4
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	6011      	str	r1, [r2, #0]
 80122dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80122e4:	2301      	movs	r3, #1
 80122e6:	e08c      	b.n	8012402 <_printf_i+0x1be>
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	6011      	str	r1, [r2, #0]
 80122ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80122f0:	bf18      	it	ne
 80122f2:	b21b      	sxthne	r3, r3
 80122f4:	e7cf      	b.n	8012296 <_printf_i+0x52>
 80122f6:	6813      	ldr	r3, [r2, #0]
 80122f8:	6825      	ldr	r5, [r4, #0]
 80122fa:	1d18      	adds	r0, r3, #4
 80122fc:	6010      	str	r0, [r2, #0]
 80122fe:	0628      	lsls	r0, r5, #24
 8012300:	d501      	bpl.n	8012306 <_printf_i+0xc2>
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	e002      	b.n	801230c <_printf_i+0xc8>
 8012306:	0668      	lsls	r0, r5, #25
 8012308:	d5fb      	bpl.n	8012302 <_printf_i+0xbe>
 801230a:	881b      	ldrh	r3, [r3, #0]
 801230c:	4854      	ldr	r0, [pc, #336]	; (8012460 <_printf_i+0x21c>)
 801230e:	296f      	cmp	r1, #111	; 0x6f
 8012310:	bf14      	ite	ne
 8012312:	220a      	movne	r2, #10
 8012314:	2208      	moveq	r2, #8
 8012316:	2100      	movs	r1, #0
 8012318:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801231c:	6865      	ldr	r5, [r4, #4]
 801231e:	60a5      	str	r5, [r4, #8]
 8012320:	2d00      	cmp	r5, #0
 8012322:	f2c0 8095 	blt.w	8012450 <_printf_i+0x20c>
 8012326:	6821      	ldr	r1, [r4, #0]
 8012328:	f021 0104 	bic.w	r1, r1, #4
 801232c:	6021      	str	r1, [r4, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d13d      	bne.n	80123ae <_printf_i+0x16a>
 8012332:	2d00      	cmp	r5, #0
 8012334:	f040 808e 	bne.w	8012454 <_printf_i+0x210>
 8012338:	4665      	mov	r5, ip
 801233a:	2a08      	cmp	r2, #8
 801233c:	d10b      	bne.n	8012356 <_printf_i+0x112>
 801233e:	6823      	ldr	r3, [r4, #0]
 8012340:	07db      	lsls	r3, r3, #31
 8012342:	d508      	bpl.n	8012356 <_printf_i+0x112>
 8012344:	6923      	ldr	r3, [r4, #16]
 8012346:	6862      	ldr	r2, [r4, #4]
 8012348:	429a      	cmp	r2, r3
 801234a:	bfde      	ittt	le
 801234c:	2330      	movle	r3, #48	; 0x30
 801234e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012352:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012356:	ebac 0305 	sub.w	r3, ip, r5
 801235a:	6123      	str	r3, [r4, #16]
 801235c:	f8cd 8000 	str.w	r8, [sp]
 8012360:	463b      	mov	r3, r7
 8012362:	aa03      	add	r2, sp, #12
 8012364:	4621      	mov	r1, r4
 8012366:	4630      	mov	r0, r6
 8012368:	f7ff fef6 	bl	8012158 <_printf_common>
 801236c:	3001      	adds	r0, #1
 801236e:	d14d      	bne.n	801240c <_printf_i+0x1c8>
 8012370:	f04f 30ff 	mov.w	r0, #4294967295
 8012374:	b005      	add	sp, #20
 8012376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801237a:	4839      	ldr	r0, [pc, #228]	; (8012460 <_printf_i+0x21c>)
 801237c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012380:	6813      	ldr	r3, [r2, #0]
 8012382:	6821      	ldr	r1, [r4, #0]
 8012384:	1d1d      	adds	r5, r3, #4
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	6015      	str	r5, [r2, #0]
 801238a:	060a      	lsls	r2, r1, #24
 801238c:	d50b      	bpl.n	80123a6 <_printf_i+0x162>
 801238e:	07ca      	lsls	r2, r1, #31
 8012390:	bf44      	itt	mi
 8012392:	f041 0120 	orrmi.w	r1, r1, #32
 8012396:	6021      	strmi	r1, [r4, #0]
 8012398:	b91b      	cbnz	r3, 80123a2 <_printf_i+0x15e>
 801239a:	6822      	ldr	r2, [r4, #0]
 801239c:	f022 0220 	bic.w	r2, r2, #32
 80123a0:	6022      	str	r2, [r4, #0]
 80123a2:	2210      	movs	r2, #16
 80123a4:	e7b7      	b.n	8012316 <_printf_i+0xd2>
 80123a6:	064d      	lsls	r5, r1, #25
 80123a8:	bf48      	it	mi
 80123aa:	b29b      	uxthmi	r3, r3
 80123ac:	e7ef      	b.n	801238e <_printf_i+0x14a>
 80123ae:	4665      	mov	r5, ip
 80123b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80123b4:	fb02 3311 	mls	r3, r2, r1, r3
 80123b8:	5cc3      	ldrb	r3, [r0, r3]
 80123ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80123be:	460b      	mov	r3, r1
 80123c0:	2900      	cmp	r1, #0
 80123c2:	d1f5      	bne.n	80123b0 <_printf_i+0x16c>
 80123c4:	e7b9      	b.n	801233a <_printf_i+0xf6>
 80123c6:	6813      	ldr	r3, [r2, #0]
 80123c8:	6825      	ldr	r5, [r4, #0]
 80123ca:	6961      	ldr	r1, [r4, #20]
 80123cc:	1d18      	adds	r0, r3, #4
 80123ce:	6010      	str	r0, [r2, #0]
 80123d0:	0628      	lsls	r0, r5, #24
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	d501      	bpl.n	80123da <_printf_i+0x196>
 80123d6:	6019      	str	r1, [r3, #0]
 80123d8:	e002      	b.n	80123e0 <_printf_i+0x19c>
 80123da:	066a      	lsls	r2, r5, #25
 80123dc:	d5fb      	bpl.n	80123d6 <_printf_i+0x192>
 80123de:	8019      	strh	r1, [r3, #0]
 80123e0:	2300      	movs	r3, #0
 80123e2:	6123      	str	r3, [r4, #16]
 80123e4:	4665      	mov	r5, ip
 80123e6:	e7b9      	b.n	801235c <_printf_i+0x118>
 80123e8:	6813      	ldr	r3, [r2, #0]
 80123ea:	1d19      	adds	r1, r3, #4
 80123ec:	6011      	str	r1, [r2, #0]
 80123ee:	681d      	ldr	r5, [r3, #0]
 80123f0:	6862      	ldr	r2, [r4, #4]
 80123f2:	2100      	movs	r1, #0
 80123f4:	4628      	mov	r0, r5
 80123f6:	f7ed ff2b 	bl	8000250 <memchr>
 80123fa:	b108      	cbz	r0, 8012400 <_printf_i+0x1bc>
 80123fc:	1b40      	subs	r0, r0, r5
 80123fe:	6060      	str	r0, [r4, #4]
 8012400:	6863      	ldr	r3, [r4, #4]
 8012402:	6123      	str	r3, [r4, #16]
 8012404:	2300      	movs	r3, #0
 8012406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801240a:	e7a7      	b.n	801235c <_printf_i+0x118>
 801240c:	6923      	ldr	r3, [r4, #16]
 801240e:	462a      	mov	r2, r5
 8012410:	4639      	mov	r1, r7
 8012412:	4630      	mov	r0, r6
 8012414:	47c0      	blx	r8
 8012416:	3001      	adds	r0, #1
 8012418:	d0aa      	beq.n	8012370 <_printf_i+0x12c>
 801241a:	6823      	ldr	r3, [r4, #0]
 801241c:	079b      	lsls	r3, r3, #30
 801241e:	d413      	bmi.n	8012448 <_printf_i+0x204>
 8012420:	68e0      	ldr	r0, [r4, #12]
 8012422:	9b03      	ldr	r3, [sp, #12]
 8012424:	4298      	cmp	r0, r3
 8012426:	bfb8      	it	lt
 8012428:	4618      	movlt	r0, r3
 801242a:	e7a3      	b.n	8012374 <_printf_i+0x130>
 801242c:	2301      	movs	r3, #1
 801242e:	464a      	mov	r2, r9
 8012430:	4639      	mov	r1, r7
 8012432:	4630      	mov	r0, r6
 8012434:	47c0      	blx	r8
 8012436:	3001      	adds	r0, #1
 8012438:	d09a      	beq.n	8012370 <_printf_i+0x12c>
 801243a:	3501      	adds	r5, #1
 801243c:	68e3      	ldr	r3, [r4, #12]
 801243e:	9a03      	ldr	r2, [sp, #12]
 8012440:	1a9b      	subs	r3, r3, r2
 8012442:	42ab      	cmp	r3, r5
 8012444:	dcf2      	bgt.n	801242c <_printf_i+0x1e8>
 8012446:	e7eb      	b.n	8012420 <_printf_i+0x1dc>
 8012448:	2500      	movs	r5, #0
 801244a:	f104 0919 	add.w	r9, r4, #25
 801244e:	e7f5      	b.n	801243c <_printf_i+0x1f8>
 8012450:	2b00      	cmp	r3, #0
 8012452:	d1ac      	bne.n	80123ae <_printf_i+0x16a>
 8012454:	7803      	ldrb	r3, [r0, #0]
 8012456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801245a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801245e:	e76c      	b.n	801233a <_printf_i+0xf6>
 8012460:	08017058 	.word	0x08017058
 8012464:	08017069 	.word	0x08017069

08012468 <_scanf_float>:
 8012468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246c:	469a      	mov	sl, r3
 801246e:	688b      	ldr	r3, [r1, #8]
 8012470:	4616      	mov	r6, r2
 8012472:	1e5a      	subs	r2, r3, #1
 8012474:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012478:	b087      	sub	sp, #28
 801247a:	bf83      	ittte	hi
 801247c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012480:	189b      	addhi	r3, r3, r2
 8012482:	9301      	strhi	r3, [sp, #4]
 8012484:	2300      	movls	r3, #0
 8012486:	bf86      	itte	hi
 8012488:	f240 135d 	movwhi	r3, #349	; 0x15d
 801248c:	608b      	strhi	r3, [r1, #8]
 801248e:	9301      	strls	r3, [sp, #4]
 8012490:	680b      	ldr	r3, [r1, #0]
 8012492:	4688      	mov	r8, r1
 8012494:	f04f 0b00 	mov.w	fp, #0
 8012498:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801249c:	f848 3b1c 	str.w	r3, [r8], #28
 80124a0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80124a4:	4607      	mov	r7, r0
 80124a6:	460c      	mov	r4, r1
 80124a8:	4645      	mov	r5, r8
 80124aa:	465a      	mov	r2, fp
 80124ac:	46d9      	mov	r9, fp
 80124ae:	f8cd b008 	str.w	fp, [sp, #8]
 80124b2:	68a1      	ldr	r1, [r4, #8]
 80124b4:	b181      	cbz	r1, 80124d8 <_scanf_float+0x70>
 80124b6:	6833      	ldr	r3, [r6, #0]
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	2b49      	cmp	r3, #73	; 0x49
 80124bc:	d071      	beq.n	80125a2 <_scanf_float+0x13a>
 80124be:	d84d      	bhi.n	801255c <_scanf_float+0xf4>
 80124c0:	2b39      	cmp	r3, #57	; 0x39
 80124c2:	d840      	bhi.n	8012546 <_scanf_float+0xde>
 80124c4:	2b31      	cmp	r3, #49	; 0x31
 80124c6:	f080 8088 	bcs.w	80125da <_scanf_float+0x172>
 80124ca:	2b2d      	cmp	r3, #45	; 0x2d
 80124cc:	f000 8090 	beq.w	80125f0 <_scanf_float+0x188>
 80124d0:	d815      	bhi.n	80124fe <_scanf_float+0x96>
 80124d2:	2b2b      	cmp	r3, #43	; 0x2b
 80124d4:	f000 808c 	beq.w	80125f0 <_scanf_float+0x188>
 80124d8:	f1b9 0f00 	cmp.w	r9, #0
 80124dc:	d003      	beq.n	80124e6 <_scanf_float+0x7e>
 80124de:	6823      	ldr	r3, [r4, #0]
 80124e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	3a01      	subs	r2, #1
 80124e8:	2a01      	cmp	r2, #1
 80124ea:	f200 80ea 	bhi.w	80126c2 <_scanf_float+0x25a>
 80124ee:	4545      	cmp	r5, r8
 80124f0:	f200 80dc 	bhi.w	80126ac <_scanf_float+0x244>
 80124f4:	2601      	movs	r6, #1
 80124f6:	4630      	mov	r0, r6
 80124f8:	b007      	add	sp, #28
 80124fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124fe:	2b2e      	cmp	r3, #46	; 0x2e
 8012500:	f000 809f 	beq.w	8012642 <_scanf_float+0x1da>
 8012504:	2b30      	cmp	r3, #48	; 0x30
 8012506:	d1e7      	bne.n	80124d8 <_scanf_float+0x70>
 8012508:	6820      	ldr	r0, [r4, #0]
 801250a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801250e:	d064      	beq.n	80125da <_scanf_float+0x172>
 8012510:	9b01      	ldr	r3, [sp, #4]
 8012512:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012516:	6020      	str	r0, [r4, #0]
 8012518:	f109 0901 	add.w	r9, r9, #1
 801251c:	b11b      	cbz	r3, 8012526 <_scanf_float+0xbe>
 801251e:	3b01      	subs	r3, #1
 8012520:	3101      	adds	r1, #1
 8012522:	9301      	str	r3, [sp, #4]
 8012524:	60a1      	str	r1, [r4, #8]
 8012526:	68a3      	ldr	r3, [r4, #8]
 8012528:	3b01      	subs	r3, #1
 801252a:	60a3      	str	r3, [r4, #8]
 801252c:	6923      	ldr	r3, [r4, #16]
 801252e:	3301      	adds	r3, #1
 8012530:	6123      	str	r3, [r4, #16]
 8012532:	6873      	ldr	r3, [r6, #4]
 8012534:	3b01      	subs	r3, #1
 8012536:	2b00      	cmp	r3, #0
 8012538:	6073      	str	r3, [r6, #4]
 801253a:	f340 80ac 	ble.w	8012696 <_scanf_float+0x22e>
 801253e:	6833      	ldr	r3, [r6, #0]
 8012540:	3301      	adds	r3, #1
 8012542:	6033      	str	r3, [r6, #0]
 8012544:	e7b5      	b.n	80124b2 <_scanf_float+0x4a>
 8012546:	2b45      	cmp	r3, #69	; 0x45
 8012548:	f000 8085 	beq.w	8012656 <_scanf_float+0x1ee>
 801254c:	2b46      	cmp	r3, #70	; 0x46
 801254e:	d06a      	beq.n	8012626 <_scanf_float+0x1be>
 8012550:	2b41      	cmp	r3, #65	; 0x41
 8012552:	d1c1      	bne.n	80124d8 <_scanf_float+0x70>
 8012554:	2a01      	cmp	r2, #1
 8012556:	d1bf      	bne.n	80124d8 <_scanf_float+0x70>
 8012558:	2202      	movs	r2, #2
 801255a:	e046      	b.n	80125ea <_scanf_float+0x182>
 801255c:	2b65      	cmp	r3, #101	; 0x65
 801255e:	d07a      	beq.n	8012656 <_scanf_float+0x1ee>
 8012560:	d818      	bhi.n	8012594 <_scanf_float+0x12c>
 8012562:	2b54      	cmp	r3, #84	; 0x54
 8012564:	d066      	beq.n	8012634 <_scanf_float+0x1cc>
 8012566:	d811      	bhi.n	801258c <_scanf_float+0x124>
 8012568:	2b4e      	cmp	r3, #78	; 0x4e
 801256a:	d1b5      	bne.n	80124d8 <_scanf_float+0x70>
 801256c:	2a00      	cmp	r2, #0
 801256e:	d146      	bne.n	80125fe <_scanf_float+0x196>
 8012570:	f1b9 0f00 	cmp.w	r9, #0
 8012574:	d145      	bne.n	8012602 <_scanf_float+0x19a>
 8012576:	6821      	ldr	r1, [r4, #0]
 8012578:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801257c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012580:	d13f      	bne.n	8012602 <_scanf_float+0x19a>
 8012582:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012586:	6021      	str	r1, [r4, #0]
 8012588:	2201      	movs	r2, #1
 801258a:	e02e      	b.n	80125ea <_scanf_float+0x182>
 801258c:	2b59      	cmp	r3, #89	; 0x59
 801258e:	d01e      	beq.n	80125ce <_scanf_float+0x166>
 8012590:	2b61      	cmp	r3, #97	; 0x61
 8012592:	e7de      	b.n	8012552 <_scanf_float+0xea>
 8012594:	2b6e      	cmp	r3, #110	; 0x6e
 8012596:	d0e9      	beq.n	801256c <_scanf_float+0x104>
 8012598:	d815      	bhi.n	80125c6 <_scanf_float+0x15e>
 801259a:	2b66      	cmp	r3, #102	; 0x66
 801259c:	d043      	beq.n	8012626 <_scanf_float+0x1be>
 801259e:	2b69      	cmp	r3, #105	; 0x69
 80125a0:	d19a      	bne.n	80124d8 <_scanf_float+0x70>
 80125a2:	f1bb 0f00 	cmp.w	fp, #0
 80125a6:	d138      	bne.n	801261a <_scanf_float+0x1b2>
 80125a8:	f1b9 0f00 	cmp.w	r9, #0
 80125ac:	d197      	bne.n	80124de <_scanf_float+0x76>
 80125ae:	6821      	ldr	r1, [r4, #0]
 80125b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80125b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80125b8:	d195      	bne.n	80124e6 <_scanf_float+0x7e>
 80125ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80125be:	6021      	str	r1, [r4, #0]
 80125c0:	f04f 0b01 	mov.w	fp, #1
 80125c4:	e011      	b.n	80125ea <_scanf_float+0x182>
 80125c6:	2b74      	cmp	r3, #116	; 0x74
 80125c8:	d034      	beq.n	8012634 <_scanf_float+0x1cc>
 80125ca:	2b79      	cmp	r3, #121	; 0x79
 80125cc:	d184      	bne.n	80124d8 <_scanf_float+0x70>
 80125ce:	f1bb 0f07 	cmp.w	fp, #7
 80125d2:	d181      	bne.n	80124d8 <_scanf_float+0x70>
 80125d4:	f04f 0b08 	mov.w	fp, #8
 80125d8:	e007      	b.n	80125ea <_scanf_float+0x182>
 80125da:	eb12 0f0b 	cmn.w	r2, fp
 80125de:	f47f af7b 	bne.w	80124d8 <_scanf_float+0x70>
 80125e2:	6821      	ldr	r1, [r4, #0]
 80125e4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80125e8:	6021      	str	r1, [r4, #0]
 80125ea:	702b      	strb	r3, [r5, #0]
 80125ec:	3501      	adds	r5, #1
 80125ee:	e79a      	b.n	8012526 <_scanf_float+0xbe>
 80125f0:	6821      	ldr	r1, [r4, #0]
 80125f2:	0608      	lsls	r0, r1, #24
 80125f4:	f57f af70 	bpl.w	80124d8 <_scanf_float+0x70>
 80125f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80125fc:	e7f4      	b.n	80125e8 <_scanf_float+0x180>
 80125fe:	2a02      	cmp	r2, #2
 8012600:	d047      	beq.n	8012692 <_scanf_float+0x22a>
 8012602:	f1bb 0f01 	cmp.w	fp, #1
 8012606:	d003      	beq.n	8012610 <_scanf_float+0x1a8>
 8012608:	f1bb 0f04 	cmp.w	fp, #4
 801260c:	f47f af64 	bne.w	80124d8 <_scanf_float+0x70>
 8012610:	f10b 0b01 	add.w	fp, fp, #1
 8012614:	fa5f fb8b 	uxtb.w	fp, fp
 8012618:	e7e7      	b.n	80125ea <_scanf_float+0x182>
 801261a:	f1bb 0f03 	cmp.w	fp, #3
 801261e:	d0f7      	beq.n	8012610 <_scanf_float+0x1a8>
 8012620:	f1bb 0f05 	cmp.w	fp, #5
 8012624:	e7f2      	b.n	801260c <_scanf_float+0x1a4>
 8012626:	f1bb 0f02 	cmp.w	fp, #2
 801262a:	f47f af55 	bne.w	80124d8 <_scanf_float+0x70>
 801262e:	f04f 0b03 	mov.w	fp, #3
 8012632:	e7da      	b.n	80125ea <_scanf_float+0x182>
 8012634:	f1bb 0f06 	cmp.w	fp, #6
 8012638:	f47f af4e 	bne.w	80124d8 <_scanf_float+0x70>
 801263c:	f04f 0b07 	mov.w	fp, #7
 8012640:	e7d3      	b.n	80125ea <_scanf_float+0x182>
 8012642:	6821      	ldr	r1, [r4, #0]
 8012644:	0588      	lsls	r0, r1, #22
 8012646:	f57f af47 	bpl.w	80124d8 <_scanf_float+0x70>
 801264a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801264e:	6021      	str	r1, [r4, #0]
 8012650:	f8cd 9008 	str.w	r9, [sp, #8]
 8012654:	e7c9      	b.n	80125ea <_scanf_float+0x182>
 8012656:	6821      	ldr	r1, [r4, #0]
 8012658:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801265c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012660:	d006      	beq.n	8012670 <_scanf_float+0x208>
 8012662:	0548      	lsls	r0, r1, #21
 8012664:	f57f af38 	bpl.w	80124d8 <_scanf_float+0x70>
 8012668:	f1b9 0f00 	cmp.w	r9, #0
 801266c:	f43f af3b 	beq.w	80124e6 <_scanf_float+0x7e>
 8012670:	0588      	lsls	r0, r1, #22
 8012672:	bf58      	it	pl
 8012674:	9802      	ldrpl	r0, [sp, #8]
 8012676:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801267a:	bf58      	it	pl
 801267c:	eba9 0000 	subpl.w	r0, r9, r0
 8012680:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012684:	bf58      	it	pl
 8012686:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801268a:	6021      	str	r1, [r4, #0]
 801268c:	f04f 0900 	mov.w	r9, #0
 8012690:	e7ab      	b.n	80125ea <_scanf_float+0x182>
 8012692:	2203      	movs	r2, #3
 8012694:	e7a9      	b.n	80125ea <_scanf_float+0x182>
 8012696:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801269a:	9205      	str	r2, [sp, #20]
 801269c:	4631      	mov	r1, r6
 801269e:	4638      	mov	r0, r7
 80126a0:	4798      	blx	r3
 80126a2:	9a05      	ldr	r2, [sp, #20]
 80126a4:	2800      	cmp	r0, #0
 80126a6:	f43f af04 	beq.w	80124b2 <_scanf_float+0x4a>
 80126aa:	e715      	b.n	80124d8 <_scanf_float+0x70>
 80126ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80126b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80126b4:	4632      	mov	r2, r6
 80126b6:	4638      	mov	r0, r7
 80126b8:	4798      	blx	r3
 80126ba:	6923      	ldr	r3, [r4, #16]
 80126bc:	3b01      	subs	r3, #1
 80126be:	6123      	str	r3, [r4, #16]
 80126c0:	e715      	b.n	80124ee <_scanf_float+0x86>
 80126c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80126c6:	2b06      	cmp	r3, #6
 80126c8:	d80a      	bhi.n	80126e0 <_scanf_float+0x278>
 80126ca:	f1bb 0f02 	cmp.w	fp, #2
 80126ce:	d966      	bls.n	801279e <_scanf_float+0x336>
 80126d0:	f1ab 0b03 	sub.w	fp, fp, #3
 80126d4:	fa5f fb8b 	uxtb.w	fp, fp
 80126d8:	eba5 0b0b 	sub.w	fp, r5, fp
 80126dc:	455d      	cmp	r5, fp
 80126de:	d149      	bne.n	8012774 <_scanf_float+0x30c>
 80126e0:	6823      	ldr	r3, [r4, #0]
 80126e2:	05da      	lsls	r2, r3, #23
 80126e4:	d51f      	bpl.n	8012726 <_scanf_float+0x2be>
 80126e6:	055b      	lsls	r3, r3, #21
 80126e8:	d466      	bmi.n	80127b8 <_scanf_float+0x350>
 80126ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80126ee:	6923      	ldr	r3, [r4, #16]
 80126f0:	2965      	cmp	r1, #101	; 0x65
 80126f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80126f6:	f105 3bff 	add.w	fp, r5, #4294967295
 80126fa:	6123      	str	r3, [r4, #16]
 80126fc:	d00d      	beq.n	801271a <_scanf_float+0x2b2>
 80126fe:	2945      	cmp	r1, #69	; 0x45
 8012700:	d00b      	beq.n	801271a <_scanf_float+0x2b2>
 8012702:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012706:	4632      	mov	r2, r6
 8012708:	4638      	mov	r0, r7
 801270a:	4798      	blx	r3
 801270c:	6923      	ldr	r3, [r4, #16]
 801270e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012712:	3b01      	subs	r3, #1
 8012714:	f1a5 0b02 	sub.w	fp, r5, #2
 8012718:	6123      	str	r3, [r4, #16]
 801271a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801271e:	4632      	mov	r2, r6
 8012720:	4638      	mov	r0, r7
 8012722:	4798      	blx	r3
 8012724:	465d      	mov	r5, fp
 8012726:	6826      	ldr	r6, [r4, #0]
 8012728:	f016 0610 	ands.w	r6, r6, #16
 801272c:	d170      	bne.n	8012810 <_scanf_float+0x3a8>
 801272e:	702e      	strb	r6, [r5, #0]
 8012730:	6823      	ldr	r3, [r4, #0]
 8012732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801273a:	d140      	bne.n	80127be <_scanf_float+0x356>
 801273c:	9b02      	ldr	r3, [sp, #8]
 801273e:	eba9 0303 	sub.w	r3, r9, r3
 8012742:	425a      	negs	r2, r3
 8012744:	2b00      	cmp	r3, #0
 8012746:	d147      	bne.n	80127d8 <_scanf_float+0x370>
 8012748:	2200      	movs	r2, #0
 801274a:	4638      	mov	r0, r7
 801274c:	4641      	mov	r1, r8
 801274e:	f000 ff47 	bl	80135e0 <_strtod_r>
 8012752:	6820      	ldr	r0, [r4, #0]
 8012754:	f8da 3000 	ldr.w	r3, [sl]
 8012758:	f010 0f02 	tst.w	r0, #2
 801275c:	f103 0204 	add.w	r2, r3, #4
 8012760:	f8ca 2000 	str.w	r2, [sl]
 8012764:	d043      	beq.n	80127ee <_scanf_float+0x386>
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	ed83 0b00 	vstr	d0, [r3]
 801276c:	68e3      	ldr	r3, [r4, #12]
 801276e:	3301      	adds	r3, #1
 8012770:	60e3      	str	r3, [r4, #12]
 8012772:	e6c0      	b.n	80124f6 <_scanf_float+0x8e>
 8012774:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012778:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801277c:	4632      	mov	r2, r6
 801277e:	4638      	mov	r0, r7
 8012780:	4798      	blx	r3
 8012782:	6923      	ldr	r3, [r4, #16]
 8012784:	3b01      	subs	r3, #1
 8012786:	6123      	str	r3, [r4, #16]
 8012788:	e7a8      	b.n	80126dc <_scanf_float+0x274>
 801278a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801278e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012792:	4632      	mov	r2, r6
 8012794:	4638      	mov	r0, r7
 8012796:	4798      	blx	r3
 8012798:	6923      	ldr	r3, [r4, #16]
 801279a:	3b01      	subs	r3, #1
 801279c:	6123      	str	r3, [r4, #16]
 801279e:	4545      	cmp	r5, r8
 80127a0:	d8f3      	bhi.n	801278a <_scanf_float+0x322>
 80127a2:	e6a7      	b.n	80124f4 <_scanf_float+0x8c>
 80127a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80127a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80127ac:	4632      	mov	r2, r6
 80127ae:	4638      	mov	r0, r7
 80127b0:	4798      	blx	r3
 80127b2:	6923      	ldr	r3, [r4, #16]
 80127b4:	3b01      	subs	r3, #1
 80127b6:	6123      	str	r3, [r4, #16]
 80127b8:	4545      	cmp	r5, r8
 80127ba:	d8f3      	bhi.n	80127a4 <_scanf_float+0x33c>
 80127bc:	e69a      	b.n	80124f4 <_scanf_float+0x8c>
 80127be:	9b03      	ldr	r3, [sp, #12]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d0c1      	beq.n	8012748 <_scanf_float+0x2e0>
 80127c4:	9904      	ldr	r1, [sp, #16]
 80127c6:	230a      	movs	r3, #10
 80127c8:	4632      	mov	r2, r6
 80127ca:	3101      	adds	r1, #1
 80127cc:	4638      	mov	r0, r7
 80127ce:	f000 ff93 	bl	80136f8 <_strtol_r>
 80127d2:	9b03      	ldr	r3, [sp, #12]
 80127d4:	9d04      	ldr	r5, [sp, #16]
 80127d6:	1ac2      	subs	r2, r0, r3
 80127d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80127dc:	429d      	cmp	r5, r3
 80127de:	bf28      	it	cs
 80127e0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80127e4:	490b      	ldr	r1, [pc, #44]	; (8012814 <_scanf_float+0x3ac>)
 80127e6:	4628      	mov	r0, r5
 80127e8:	f000 f888 	bl	80128fc <siprintf>
 80127ec:	e7ac      	b.n	8012748 <_scanf_float+0x2e0>
 80127ee:	f010 0004 	ands.w	r0, r0, #4
 80127f2:	d1b8      	bne.n	8012766 <_scanf_float+0x2fe>
 80127f4:	eeb4 0b40 	vcmp.f64	d0, d0
 80127f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fc:	681d      	ldr	r5, [r3, #0]
 80127fe:	d704      	bvc.n	801280a <_scanf_float+0x3a2>
 8012800:	f000 f832 	bl	8012868 <nanf>
 8012804:	ed85 0a00 	vstr	s0, [r5]
 8012808:	e7b0      	b.n	801276c <_scanf_float+0x304>
 801280a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801280e:	e7f9      	b.n	8012804 <_scanf_float+0x39c>
 8012810:	2600      	movs	r6, #0
 8012812:	e670      	b.n	80124f6 <_scanf_float+0x8e>
 8012814:	0801707a 	.word	0x0801707a

08012818 <iprintf>:
 8012818:	b40f      	push	{r0, r1, r2, r3}
 801281a:	4b0a      	ldr	r3, [pc, #40]	; (8012844 <iprintf+0x2c>)
 801281c:	b513      	push	{r0, r1, r4, lr}
 801281e:	681c      	ldr	r4, [r3, #0]
 8012820:	b124      	cbz	r4, 801282c <iprintf+0x14>
 8012822:	69a3      	ldr	r3, [r4, #24]
 8012824:	b913      	cbnz	r3, 801282c <iprintf+0x14>
 8012826:	4620      	mov	r0, r4
 8012828:	f001 ff22 	bl	8014670 <__sinit>
 801282c:	ab05      	add	r3, sp, #20
 801282e:	9a04      	ldr	r2, [sp, #16]
 8012830:	68a1      	ldr	r1, [r4, #8]
 8012832:	9301      	str	r3, [sp, #4]
 8012834:	4620      	mov	r0, r4
 8012836:	f003 fa9d 	bl	8015d74 <_vfiprintf_r>
 801283a:	b002      	add	sp, #8
 801283c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012840:	b004      	add	sp, #16
 8012842:	4770      	bx	lr
 8012844:	20000438 	.word	0x20000438

08012848 <_sbrk_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4c06      	ldr	r4, [pc, #24]	; (8012864 <_sbrk_r+0x1c>)
 801284c:	2300      	movs	r3, #0
 801284e:	4605      	mov	r5, r0
 8012850:	4608      	mov	r0, r1
 8012852:	6023      	str	r3, [r4, #0]
 8012854:	f003 fec8 	bl	80165e8 <_sbrk>
 8012858:	1c43      	adds	r3, r0, #1
 801285a:	d102      	bne.n	8012862 <_sbrk_r+0x1a>
 801285c:	6823      	ldr	r3, [r4, #0]
 801285e:	b103      	cbz	r3, 8012862 <_sbrk_r+0x1a>
 8012860:	602b      	str	r3, [r5, #0]
 8012862:	bd38      	pop	{r3, r4, r5, pc}
 8012864:	2000eaa4 	.word	0x2000eaa4

08012868 <nanf>:
 8012868:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012870 <nanf+0x8>
 801286c:	4770      	bx	lr
 801286e:	bf00      	nop
 8012870:	7fc00000 	.word	0x7fc00000

08012874 <_raise_r>:
 8012874:	291f      	cmp	r1, #31
 8012876:	b538      	push	{r3, r4, r5, lr}
 8012878:	4604      	mov	r4, r0
 801287a:	460d      	mov	r5, r1
 801287c:	d904      	bls.n	8012888 <_raise_r+0x14>
 801287e:	2316      	movs	r3, #22
 8012880:	6003      	str	r3, [r0, #0]
 8012882:	f04f 30ff 	mov.w	r0, #4294967295
 8012886:	bd38      	pop	{r3, r4, r5, pc}
 8012888:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801288a:	b112      	cbz	r2, 8012892 <_raise_r+0x1e>
 801288c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012890:	b94b      	cbnz	r3, 80128a6 <_raise_r+0x32>
 8012892:	4620      	mov	r0, r4
 8012894:	f000 f830 	bl	80128f8 <_getpid_r>
 8012898:	462a      	mov	r2, r5
 801289a:	4601      	mov	r1, r0
 801289c:	4620      	mov	r0, r4
 801289e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128a2:	f000 b817 	b.w	80128d4 <_kill_r>
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d00a      	beq.n	80128c0 <_raise_r+0x4c>
 80128aa:	1c59      	adds	r1, r3, #1
 80128ac:	d103      	bne.n	80128b6 <_raise_r+0x42>
 80128ae:	2316      	movs	r3, #22
 80128b0:	6003      	str	r3, [r0, #0]
 80128b2:	2001      	movs	r0, #1
 80128b4:	e7e7      	b.n	8012886 <_raise_r+0x12>
 80128b6:	2400      	movs	r4, #0
 80128b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80128bc:	4628      	mov	r0, r5
 80128be:	4798      	blx	r3
 80128c0:	2000      	movs	r0, #0
 80128c2:	e7e0      	b.n	8012886 <_raise_r+0x12>

080128c4 <raise>:
 80128c4:	4b02      	ldr	r3, [pc, #8]	; (80128d0 <raise+0xc>)
 80128c6:	4601      	mov	r1, r0
 80128c8:	6818      	ldr	r0, [r3, #0]
 80128ca:	f7ff bfd3 	b.w	8012874 <_raise_r>
 80128ce:	bf00      	nop
 80128d0:	20000438 	.word	0x20000438

080128d4 <_kill_r>:
 80128d4:	b538      	push	{r3, r4, r5, lr}
 80128d6:	4c07      	ldr	r4, [pc, #28]	; (80128f4 <_kill_r+0x20>)
 80128d8:	2300      	movs	r3, #0
 80128da:	4605      	mov	r5, r0
 80128dc:	4608      	mov	r0, r1
 80128de:	4611      	mov	r1, r2
 80128e0:	6023      	str	r3, [r4, #0]
 80128e2:	f003 fe69 	bl	80165b8 <_kill>
 80128e6:	1c43      	adds	r3, r0, #1
 80128e8:	d102      	bne.n	80128f0 <_kill_r+0x1c>
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	b103      	cbz	r3, 80128f0 <_kill_r+0x1c>
 80128ee:	602b      	str	r3, [r5, #0]
 80128f0:	bd38      	pop	{r3, r4, r5, pc}
 80128f2:	bf00      	nop
 80128f4:	2000eaa4 	.word	0x2000eaa4

080128f8 <_getpid_r>:
 80128f8:	f003 be4e 	b.w	8016598 <_getpid>

080128fc <siprintf>:
 80128fc:	b40e      	push	{r1, r2, r3}
 80128fe:	b500      	push	{lr}
 8012900:	b09c      	sub	sp, #112	; 0x70
 8012902:	ab1d      	add	r3, sp, #116	; 0x74
 8012904:	9002      	str	r0, [sp, #8]
 8012906:	9006      	str	r0, [sp, #24]
 8012908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801290c:	4809      	ldr	r0, [pc, #36]	; (8012934 <siprintf+0x38>)
 801290e:	9107      	str	r1, [sp, #28]
 8012910:	9104      	str	r1, [sp, #16]
 8012912:	4909      	ldr	r1, [pc, #36]	; (8012938 <siprintf+0x3c>)
 8012914:	f853 2b04 	ldr.w	r2, [r3], #4
 8012918:	9105      	str	r1, [sp, #20]
 801291a:	6800      	ldr	r0, [r0, #0]
 801291c:	9301      	str	r3, [sp, #4]
 801291e:	a902      	add	r1, sp, #8
 8012920:	f002 ff5c 	bl	80157dc <_svfiprintf_r>
 8012924:	9b02      	ldr	r3, [sp, #8]
 8012926:	2200      	movs	r2, #0
 8012928:	701a      	strb	r2, [r3, #0]
 801292a:	b01c      	add	sp, #112	; 0x70
 801292c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012930:	b003      	add	sp, #12
 8012932:	4770      	bx	lr
 8012934:	20000438 	.word	0x20000438
 8012938:	ffff0208 	.word	0xffff0208

0801293c <siscanf>:
 801293c:	b40e      	push	{r1, r2, r3}
 801293e:	b530      	push	{r4, r5, lr}
 8012940:	b09c      	sub	sp, #112	; 0x70
 8012942:	ac1f      	add	r4, sp, #124	; 0x7c
 8012944:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012948:	f854 5b04 	ldr.w	r5, [r4], #4
 801294c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012950:	9002      	str	r0, [sp, #8]
 8012952:	9006      	str	r0, [sp, #24]
 8012954:	f7ed fc74 	bl	8000240 <strlen>
 8012958:	4b0b      	ldr	r3, [pc, #44]	; (8012988 <siscanf+0x4c>)
 801295a:	9003      	str	r0, [sp, #12]
 801295c:	9007      	str	r0, [sp, #28]
 801295e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012960:	480a      	ldr	r0, [pc, #40]	; (801298c <siscanf+0x50>)
 8012962:	9401      	str	r4, [sp, #4]
 8012964:	2300      	movs	r3, #0
 8012966:	930f      	str	r3, [sp, #60]	; 0x3c
 8012968:	9314      	str	r3, [sp, #80]	; 0x50
 801296a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801296e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012972:	462a      	mov	r2, r5
 8012974:	4623      	mov	r3, r4
 8012976:	a902      	add	r1, sp, #8
 8012978:	6800      	ldr	r0, [r0, #0]
 801297a:	f003 f881 	bl	8015a80 <__ssvfiscanf_r>
 801297e:	b01c      	add	sp, #112	; 0x70
 8012980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012984:	b003      	add	sp, #12
 8012986:	4770      	bx	lr
 8012988:	080129b3 	.word	0x080129b3
 801298c:	20000438 	.word	0x20000438

08012990 <__sread>:
 8012990:	b510      	push	{r4, lr}
 8012992:	460c      	mov	r4, r1
 8012994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012998:	f003 fc5a 	bl	8016250 <_read_r>
 801299c:	2800      	cmp	r0, #0
 801299e:	bfab      	itete	ge
 80129a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80129a2:	89a3      	ldrhlt	r3, [r4, #12]
 80129a4:	181b      	addge	r3, r3, r0
 80129a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80129aa:	bfac      	ite	ge
 80129ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80129ae:	81a3      	strhlt	r3, [r4, #12]
 80129b0:	bd10      	pop	{r4, pc}

080129b2 <__seofread>:
 80129b2:	2000      	movs	r0, #0
 80129b4:	4770      	bx	lr

080129b6 <__swrite>:
 80129b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ba:	461f      	mov	r7, r3
 80129bc:	898b      	ldrh	r3, [r1, #12]
 80129be:	05db      	lsls	r3, r3, #23
 80129c0:	4605      	mov	r5, r0
 80129c2:	460c      	mov	r4, r1
 80129c4:	4616      	mov	r6, r2
 80129c6:	d505      	bpl.n	80129d4 <__swrite+0x1e>
 80129c8:	2302      	movs	r3, #2
 80129ca:	2200      	movs	r2, #0
 80129cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129d0:	f002 fa20 	bl	8014e14 <_lseek_r>
 80129d4:	89a3      	ldrh	r3, [r4, #12]
 80129d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80129de:	81a3      	strh	r3, [r4, #12]
 80129e0:	4632      	mov	r2, r6
 80129e2:	463b      	mov	r3, r7
 80129e4:	4628      	mov	r0, r5
 80129e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129ea:	f000 bee9 	b.w	80137c0 <_write_r>

080129ee <__sseek>:
 80129ee:	b510      	push	{r4, lr}
 80129f0:	460c      	mov	r4, r1
 80129f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129f6:	f002 fa0d 	bl	8014e14 <_lseek_r>
 80129fa:	1c43      	adds	r3, r0, #1
 80129fc:	89a3      	ldrh	r3, [r4, #12]
 80129fe:	bf15      	itete	ne
 8012a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a0a:	81a3      	strheq	r3, [r4, #12]
 8012a0c:	bf18      	it	ne
 8012a0e:	81a3      	strhne	r3, [r4, #12]
 8012a10:	bd10      	pop	{r4, pc}

08012a12 <__sclose>:
 8012a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a16:	f000 bf53 	b.w	80138c0 <_close_r>

08012a1a <sulp>:
 8012a1a:	b570      	push	{r4, r5, r6, lr}
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	460d      	mov	r5, r1
 8012a20:	4616      	mov	r6, r2
 8012a22:	ec45 4b10 	vmov	d0, r4, r5
 8012a26:	f002 fd4b 	bl	80154c0 <__ulp>
 8012a2a:	b17e      	cbz	r6, 8012a4c <sulp+0x32>
 8012a2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012a30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	dd09      	ble.n	8012a4c <sulp+0x32>
 8012a38:	051b      	lsls	r3, r3, #20
 8012a3a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012a3e:	2000      	movs	r0, #0
 8012a40:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8012a44:	ec41 0b17 	vmov	d7, r0, r1
 8012a48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a50 <_strtod_l>:
 8012a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a54:	ed2d 8b0c 	vpush	{d8-d13}
 8012a58:	4698      	mov	r8, r3
 8012a5a:	b09d      	sub	sp, #116	; 0x74
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	4604      	mov	r4, r0
 8012a60:	4640      	mov	r0, r8
 8012a62:	460e      	mov	r6, r1
 8012a64:	9214      	str	r2, [sp, #80]	; 0x50
 8012a66:	9318      	str	r3, [sp, #96]	; 0x60
 8012a68:	f002 f9c4 	bl	8014df4 <__localeconv_l>
 8012a6c:	4681      	mov	r9, r0
 8012a6e:	6800      	ldr	r0, [r0, #0]
 8012a70:	f7ed fbe6 	bl	8000240 <strlen>
 8012a74:	f04f 0a00 	mov.w	sl, #0
 8012a78:	4607      	mov	r7, r0
 8012a7a:	f04f 0b00 	mov.w	fp, #0
 8012a7e:	9617      	str	r6, [sp, #92]	; 0x5c
 8012a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a82:	781a      	ldrb	r2, [r3, #0]
 8012a84:	2a0d      	cmp	r2, #13
 8012a86:	d834      	bhi.n	8012af2 <_strtod_l+0xa2>
 8012a88:	2a09      	cmp	r2, #9
 8012a8a:	d238      	bcs.n	8012afe <_strtod_l+0xae>
 8012a8c:	2a00      	cmp	r2, #0
 8012a8e:	d040      	beq.n	8012b12 <_strtod_l+0xc2>
 8012a90:	2300      	movs	r3, #0
 8012a92:	930d      	str	r3, [sp, #52]	; 0x34
 8012a94:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8012a96:	782b      	ldrb	r3, [r5, #0]
 8012a98:	2b30      	cmp	r3, #48	; 0x30
 8012a9a:	f040 80b3 	bne.w	8012c04 <_strtod_l+0x1b4>
 8012a9e:	786b      	ldrb	r3, [r5, #1]
 8012aa0:	2b58      	cmp	r3, #88	; 0x58
 8012aa2:	d001      	beq.n	8012aa8 <_strtod_l+0x58>
 8012aa4:	2b78      	cmp	r3, #120	; 0x78
 8012aa6:	d169      	bne.n	8012b7c <_strtod_l+0x12c>
 8012aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aaa:	9301      	str	r3, [sp, #4]
 8012aac:	ab18      	add	r3, sp, #96	; 0x60
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	f8cd 8008 	str.w	r8, [sp, #8]
 8012ab4:	ab19      	add	r3, sp, #100	; 0x64
 8012ab6:	4a8f      	ldr	r2, [pc, #572]	; (8012cf4 <_strtod_l+0x2a4>)
 8012ab8:	a917      	add	r1, sp, #92	; 0x5c
 8012aba:	4620      	mov	r0, r4
 8012abc:	f001 feb1 	bl	8014822 <__gethex>
 8012ac0:	f010 0607 	ands.w	r6, r0, #7
 8012ac4:	4607      	mov	r7, r0
 8012ac6:	d005      	beq.n	8012ad4 <_strtod_l+0x84>
 8012ac8:	2e06      	cmp	r6, #6
 8012aca:	d12c      	bne.n	8012b26 <_strtod_l+0xd6>
 8012acc:	3501      	adds	r5, #1
 8012ace:	2300      	movs	r3, #0
 8012ad0:	9517      	str	r5, [sp, #92]	; 0x5c
 8012ad2:	930d      	str	r3, [sp, #52]	; 0x34
 8012ad4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f040 855e 	bne.w	8013598 <_strtod_l+0xb48>
 8012adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ade:	b1eb      	cbz	r3, 8012b1c <_strtod_l+0xcc>
 8012ae0:	ec4b ab17 	vmov	d7, sl, fp
 8012ae4:	eeb1 0b47 	vneg.f64	d0, d7
 8012ae8:	b01d      	add	sp, #116	; 0x74
 8012aea:	ecbd 8b0c 	vpop	{d8-d13}
 8012aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af2:	2a2b      	cmp	r2, #43	; 0x2b
 8012af4:	d015      	beq.n	8012b22 <_strtod_l+0xd2>
 8012af6:	2a2d      	cmp	r2, #45	; 0x2d
 8012af8:	d004      	beq.n	8012b04 <_strtod_l+0xb4>
 8012afa:	2a20      	cmp	r2, #32
 8012afc:	d1c8      	bne.n	8012a90 <_strtod_l+0x40>
 8012afe:	3301      	adds	r3, #1
 8012b00:	9317      	str	r3, [sp, #92]	; 0x5c
 8012b02:	e7bd      	b.n	8012a80 <_strtod_l+0x30>
 8012b04:	2201      	movs	r2, #1
 8012b06:	920d      	str	r2, [sp, #52]	; 0x34
 8012b08:	1c5a      	adds	r2, r3, #1
 8012b0a:	9217      	str	r2, [sp, #92]	; 0x5c
 8012b0c:	785b      	ldrb	r3, [r3, #1]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1c0      	bne.n	8012a94 <_strtod_l+0x44>
 8012b12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b14:	9617      	str	r6, [sp, #92]	; 0x5c
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	f040 853c 	bne.w	8013594 <_strtod_l+0xb44>
 8012b1c:	ec4b ab10 	vmov	d0, sl, fp
 8012b20:	e7e2      	b.n	8012ae8 <_strtod_l+0x98>
 8012b22:	2200      	movs	r2, #0
 8012b24:	e7ef      	b.n	8012b06 <_strtod_l+0xb6>
 8012b26:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012b28:	b13a      	cbz	r2, 8012b3a <_strtod_l+0xea>
 8012b2a:	2135      	movs	r1, #53	; 0x35
 8012b2c:	a81a      	add	r0, sp, #104	; 0x68
 8012b2e:	f002 fdc0 	bl	80156b2 <__copybits>
 8012b32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012b34:	4620      	mov	r0, r4
 8012b36:	f002 fa2b 	bl	8014f90 <_Bfree>
 8012b3a:	3e01      	subs	r6, #1
 8012b3c:	2e04      	cmp	r6, #4
 8012b3e:	d806      	bhi.n	8012b4e <_strtod_l+0xfe>
 8012b40:	e8df f006 	tbb	[pc, r6]
 8012b44:	1714030a 	.word	0x1714030a
 8012b48:	0a          	.byte	0x0a
 8012b49:	00          	.byte	0x00
 8012b4a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8012b4e:	073b      	lsls	r3, r7, #28
 8012b50:	d5c0      	bpl.n	8012ad4 <_strtod_l+0x84>
 8012b52:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012b56:	e7bd      	b.n	8012ad4 <_strtod_l+0x84>
 8012b58:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8012b5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012b5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012b62:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012b66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012b6a:	e7f0      	b.n	8012b4e <_strtod_l+0xfe>
 8012b6c:	f8df b188 	ldr.w	fp, [pc, #392]	; 8012cf8 <_strtod_l+0x2a8>
 8012b70:	e7ed      	b.n	8012b4e <_strtod_l+0xfe>
 8012b72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012b76:	f04f 3aff 	mov.w	sl, #4294967295
 8012b7a:	e7e8      	b.n	8012b4e <_strtod_l+0xfe>
 8012b7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b7e:	1c5a      	adds	r2, r3, #1
 8012b80:	9217      	str	r2, [sp, #92]	; 0x5c
 8012b82:	785b      	ldrb	r3, [r3, #1]
 8012b84:	2b30      	cmp	r3, #48	; 0x30
 8012b86:	d0f9      	beq.n	8012b7c <_strtod_l+0x12c>
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d0a3      	beq.n	8012ad4 <_strtod_l+0x84>
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8012b90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b92:	930c      	str	r3, [sp, #48]	; 0x30
 8012b94:	2300      	movs	r3, #0
 8012b96:	9306      	str	r3, [sp, #24]
 8012b98:	9308      	str	r3, [sp, #32]
 8012b9a:	461d      	mov	r5, r3
 8012b9c:	220a      	movs	r2, #10
 8012b9e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012ba0:	f890 8000 	ldrb.w	r8, [r0]
 8012ba4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8012ba8:	b2d9      	uxtb	r1, r3
 8012baa:	2909      	cmp	r1, #9
 8012bac:	d92c      	bls.n	8012c08 <_strtod_l+0x1b8>
 8012bae:	463a      	mov	r2, r7
 8012bb0:	f8d9 1000 	ldr.w	r1, [r9]
 8012bb4:	f003 fb90 	bl	80162d8 <strncmp>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d035      	beq.n	8012c28 <_strtod_l+0x1d8>
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	4642      	mov	r2, r8
 8012bc0:	462b      	mov	r3, r5
 8012bc2:	4601      	mov	r1, r0
 8012bc4:	9004      	str	r0, [sp, #16]
 8012bc6:	2a65      	cmp	r2, #101	; 0x65
 8012bc8:	d001      	beq.n	8012bce <_strtod_l+0x17e>
 8012bca:	2a45      	cmp	r2, #69	; 0x45
 8012bcc:	d117      	bne.n	8012bfe <_strtod_l+0x1ae>
 8012bce:	b923      	cbnz	r3, 8012bda <_strtod_l+0x18a>
 8012bd0:	b910      	cbnz	r0, 8012bd8 <_strtod_l+0x188>
 8012bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d09c      	beq.n	8012b12 <_strtod_l+0xc2>
 8012bd8:	2300      	movs	r3, #0
 8012bda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012bdc:	1c72      	adds	r2, r6, #1
 8012bde:	9217      	str	r2, [sp, #92]	; 0x5c
 8012be0:	7872      	ldrb	r2, [r6, #1]
 8012be2:	2a2b      	cmp	r2, #43	; 0x2b
 8012be4:	f000 8082 	beq.w	8012cec <_strtod_l+0x29c>
 8012be8:	2a2d      	cmp	r2, #45	; 0x2d
 8012bea:	d079      	beq.n	8012ce0 <_strtod_l+0x290>
 8012bec:	f04f 0e00 	mov.w	lr, #0
 8012bf0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8012bf4:	f1bc 0f09 	cmp.w	ip, #9
 8012bf8:	f240 8086 	bls.w	8012d08 <_strtod_l+0x2b8>
 8012bfc:	9617      	str	r6, [sp, #92]	; 0x5c
 8012bfe:	f04f 0800 	mov.w	r8, #0
 8012c02:	e0a8      	b.n	8012d56 <_strtod_l+0x306>
 8012c04:	2300      	movs	r3, #0
 8012c06:	e7c2      	b.n	8012b8e <_strtod_l+0x13e>
 8012c08:	2d08      	cmp	r5, #8
 8012c0a:	bfd5      	itete	le
 8012c0c:	9908      	ldrle	r1, [sp, #32]
 8012c0e:	9906      	ldrgt	r1, [sp, #24]
 8012c10:	fb02 3301 	mlale	r3, r2, r1, r3
 8012c14:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012c18:	f100 0001 	add.w	r0, r0, #1
 8012c1c:	bfd4      	ite	le
 8012c1e:	9308      	strle	r3, [sp, #32]
 8012c20:	9306      	strgt	r3, [sp, #24]
 8012c22:	3501      	adds	r5, #1
 8012c24:	9017      	str	r0, [sp, #92]	; 0x5c
 8012c26:	e7ba      	b.n	8012b9e <_strtod_l+0x14e>
 8012c28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c2a:	19da      	adds	r2, r3, r7
 8012c2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8012c2e:	5dda      	ldrb	r2, [r3, r7]
 8012c30:	2d00      	cmp	r5, #0
 8012c32:	d038      	beq.n	8012ca6 <_strtod_l+0x256>
 8012c34:	4601      	mov	r1, r0
 8012c36:	462b      	mov	r3, r5
 8012c38:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8012c3c:	2f09      	cmp	r7, #9
 8012c3e:	d913      	bls.n	8012c68 <_strtod_l+0x218>
 8012c40:	2701      	movs	r7, #1
 8012c42:	9704      	str	r7, [sp, #16]
 8012c44:	e7bf      	b.n	8012bc6 <_strtod_l+0x176>
 8012c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c48:	1c5a      	adds	r2, r3, #1
 8012c4a:	9217      	str	r2, [sp, #92]	; 0x5c
 8012c4c:	785a      	ldrb	r2, [r3, #1]
 8012c4e:	3001      	adds	r0, #1
 8012c50:	2a30      	cmp	r2, #48	; 0x30
 8012c52:	d0f8      	beq.n	8012c46 <_strtod_l+0x1f6>
 8012c54:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012c58:	2b08      	cmp	r3, #8
 8012c5a:	f200 84a2 	bhi.w	80135a2 <_strtod_l+0xb52>
 8012c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c60:	930c      	str	r3, [sp, #48]	; 0x30
 8012c62:	4601      	mov	r1, r0
 8012c64:	2000      	movs	r0, #0
 8012c66:	4603      	mov	r3, r0
 8012c68:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8012c6c:	f100 0701 	add.w	r7, r0, #1
 8012c70:	d013      	beq.n	8012c9a <_strtod_l+0x24a>
 8012c72:	4439      	add	r1, r7
 8012c74:	eb00 0e03 	add.w	lr, r0, r3
 8012c78:	461f      	mov	r7, r3
 8012c7a:	f04f 0c0a 	mov.w	ip, #10
 8012c7e:	45be      	cmp	lr, r7
 8012c80:	d113      	bne.n	8012caa <_strtod_l+0x25a>
 8012c82:	181f      	adds	r7, r3, r0
 8012c84:	2f08      	cmp	r7, #8
 8012c86:	f103 0301 	add.w	r3, r3, #1
 8012c8a:	4403      	add	r3, r0
 8012c8c:	dc1d      	bgt.n	8012cca <_strtod_l+0x27a>
 8012c8e:	9a08      	ldr	r2, [sp, #32]
 8012c90:	200a      	movs	r0, #10
 8012c92:	fb00 8202 	mla	r2, r0, r2, r8
 8012c96:	9208      	str	r2, [sp, #32]
 8012c98:	2700      	movs	r7, #0
 8012c9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012c9c:	1c50      	adds	r0, r2, #1
 8012c9e:	9017      	str	r0, [sp, #92]	; 0x5c
 8012ca0:	7852      	ldrb	r2, [r2, #1]
 8012ca2:	4638      	mov	r0, r7
 8012ca4:	e7c8      	b.n	8012c38 <_strtod_l+0x1e8>
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	e7d2      	b.n	8012c50 <_strtod_l+0x200>
 8012caa:	2f08      	cmp	r7, #8
 8012cac:	f107 0701 	add.w	r7, r7, #1
 8012cb0:	dc04      	bgt.n	8012cbc <_strtod_l+0x26c>
 8012cb2:	9a08      	ldr	r2, [sp, #32]
 8012cb4:	fb0c f202 	mul.w	r2, ip, r2
 8012cb8:	9208      	str	r2, [sp, #32]
 8012cba:	e7e0      	b.n	8012c7e <_strtod_l+0x22e>
 8012cbc:	2f10      	cmp	r7, #16
 8012cbe:	bfde      	ittt	le
 8012cc0:	9a06      	ldrle	r2, [sp, #24]
 8012cc2:	fb0c f202 	mulle.w	r2, ip, r2
 8012cc6:	9206      	strle	r2, [sp, #24]
 8012cc8:	e7d9      	b.n	8012c7e <_strtod_l+0x22e>
 8012cca:	2b10      	cmp	r3, #16
 8012ccc:	bfdf      	itttt	le
 8012cce:	9a06      	ldrle	r2, [sp, #24]
 8012cd0:	200a      	movle	r0, #10
 8012cd2:	fb00 8202 	mlale	r2, r0, r2, r8
 8012cd6:	9206      	strle	r2, [sp, #24]
 8012cd8:	e7de      	b.n	8012c98 <_strtod_l+0x248>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	9304      	str	r3, [sp, #16]
 8012cde:	e777      	b.n	8012bd0 <_strtod_l+0x180>
 8012ce0:	f04f 0e01 	mov.w	lr, #1
 8012ce4:	1cb2      	adds	r2, r6, #2
 8012ce6:	9217      	str	r2, [sp, #92]	; 0x5c
 8012ce8:	78b2      	ldrb	r2, [r6, #2]
 8012cea:	e781      	b.n	8012bf0 <_strtod_l+0x1a0>
 8012cec:	f04f 0e00 	mov.w	lr, #0
 8012cf0:	e7f8      	b.n	8012ce4 <_strtod_l+0x294>
 8012cf2:	bf00      	nop
 8012cf4:	08017080 	.word	0x08017080
 8012cf8:	7ff00000 	.word	0x7ff00000
 8012cfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012cfe:	f102 0c01 	add.w	ip, r2, #1
 8012d02:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8012d06:	7852      	ldrb	r2, [r2, #1]
 8012d08:	2a30      	cmp	r2, #48	; 0x30
 8012d0a:	d0f7      	beq.n	8012cfc <_strtod_l+0x2ac>
 8012d0c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8012d10:	f1bc 0f08 	cmp.w	ip, #8
 8012d14:	f63f af73 	bhi.w	8012bfe <_strtod_l+0x1ae>
 8012d18:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8012d1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012d1e:	920e      	str	r2, [sp, #56]	; 0x38
 8012d20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012d22:	f102 0c01 	add.w	ip, r2, #1
 8012d26:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8012d2a:	7852      	ldrb	r2, [r2, #1]
 8012d2c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8012d30:	f1b9 0f09 	cmp.w	r9, #9
 8012d34:	d939      	bls.n	8012daa <_strtod_l+0x35a>
 8012d36:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012d38:	ebac 0c07 	sub.w	ip, ip, r7
 8012d3c:	f1bc 0f08 	cmp.w	ip, #8
 8012d40:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8012d44:	dc37      	bgt.n	8012db6 <_strtod_l+0x366>
 8012d46:	45e0      	cmp	r8, ip
 8012d48:	bfa8      	it	ge
 8012d4a:	46e0      	movge	r8, ip
 8012d4c:	f1be 0f00 	cmp.w	lr, #0
 8012d50:	d001      	beq.n	8012d56 <_strtod_l+0x306>
 8012d52:	f1c8 0800 	rsb	r8, r8, #0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d151      	bne.n	8012dfe <_strtod_l+0x3ae>
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	f47f aeba 	bne.w	8012ad4 <_strtod_l+0x84>
 8012d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f47f aeb6 	bne.w	8012ad4 <_strtod_l+0x84>
 8012d68:	9b04      	ldr	r3, [sp, #16]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f47f aed1 	bne.w	8012b12 <_strtod_l+0xc2>
 8012d70:	2a4e      	cmp	r2, #78	; 0x4e
 8012d72:	d027      	beq.n	8012dc4 <_strtod_l+0x374>
 8012d74:	dc21      	bgt.n	8012dba <_strtod_l+0x36a>
 8012d76:	2a49      	cmp	r2, #73	; 0x49
 8012d78:	f47f aecb 	bne.w	8012b12 <_strtod_l+0xc2>
 8012d7c:	499a      	ldr	r1, [pc, #616]	; (8012fe8 <_strtod_l+0x598>)
 8012d7e:	a817      	add	r0, sp, #92	; 0x5c
 8012d80:	f001 ff82 	bl	8014c88 <__match>
 8012d84:	2800      	cmp	r0, #0
 8012d86:	f43f aec4 	beq.w	8012b12 <_strtod_l+0xc2>
 8012d8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012d8c:	4997      	ldr	r1, [pc, #604]	; (8012fec <_strtod_l+0x59c>)
 8012d8e:	3b01      	subs	r3, #1
 8012d90:	a817      	add	r0, sp, #92	; 0x5c
 8012d92:	9317      	str	r3, [sp, #92]	; 0x5c
 8012d94:	f001 ff78 	bl	8014c88 <__match>
 8012d98:	b910      	cbnz	r0, 8012da0 <_strtod_l+0x350>
 8012d9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012d9c:	3301      	adds	r3, #1
 8012d9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012da0:	f8df b260 	ldr.w	fp, [pc, #608]	; 8013004 <_strtod_l+0x5b4>
 8012da4:	f04f 0a00 	mov.w	sl, #0
 8012da8:	e694      	b.n	8012ad4 <_strtod_l+0x84>
 8012daa:	270a      	movs	r7, #10
 8012dac:	fb07 2808 	mla	r8, r7, r8, r2
 8012db0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8012db4:	e7b4      	b.n	8012d20 <_strtod_l+0x2d0>
 8012db6:	46e0      	mov	r8, ip
 8012db8:	e7c8      	b.n	8012d4c <_strtod_l+0x2fc>
 8012dba:	2a69      	cmp	r2, #105	; 0x69
 8012dbc:	d0de      	beq.n	8012d7c <_strtod_l+0x32c>
 8012dbe:	2a6e      	cmp	r2, #110	; 0x6e
 8012dc0:	f47f aea7 	bne.w	8012b12 <_strtod_l+0xc2>
 8012dc4:	498a      	ldr	r1, [pc, #552]	; (8012ff0 <_strtod_l+0x5a0>)
 8012dc6:	a817      	add	r0, sp, #92	; 0x5c
 8012dc8:	f001 ff5e 	bl	8014c88 <__match>
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	f43f aea0 	beq.w	8012b12 <_strtod_l+0xc2>
 8012dd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	2b28      	cmp	r3, #40	; 0x28
 8012dd8:	d10e      	bne.n	8012df8 <_strtod_l+0x3a8>
 8012dda:	aa1a      	add	r2, sp, #104	; 0x68
 8012ddc:	4985      	ldr	r1, [pc, #532]	; (8012ff4 <_strtod_l+0x5a4>)
 8012dde:	a817      	add	r0, sp, #92	; 0x5c
 8012de0:	f001 ff66 	bl	8014cb0 <__hexnan>
 8012de4:	2805      	cmp	r0, #5
 8012de6:	d107      	bne.n	8012df8 <_strtod_l+0x3a8>
 8012de8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012dea:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012dee:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012df2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012df6:	e66d      	b.n	8012ad4 <_strtod_l+0x84>
 8012df8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8013008 <_strtod_l+0x5b8>
 8012dfc:	e7d2      	b.n	8012da4 <_strtod_l+0x354>
 8012dfe:	eddd 7a08 	vldr	s15, [sp, #32]
 8012e02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012e06:	eba8 0201 	sub.w	r2, r8, r1
 8012e0a:	2d00      	cmp	r5, #0
 8012e0c:	bf08      	it	eq
 8012e0e:	461d      	moveq	r5, r3
 8012e10:	2b10      	cmp	r3, #16
 8012e12:	9204      	str	r2, [sp, #16]
 8012e14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012e18:	461a      	mov	r2, r3
 8012e1a:	bfa8      	it	ge
 8012e1c:	2210      	movge	r2, #16
 8012e1e:	2b09      	cmp	r3, #9
 8012e20:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8012e24:	dc14      	bgt.n	8012e50 <_strtod_l+0x400>
 8012e26:	9904      	ldr	r1, [sp, #16]
 8012e28:	2900      	cmp	r1, #0
 8012e2a:	f43f ae53 	beq.w	8012ad4 <_strtod_l+0x84>
 8012e2e:	9904      	ldr	r1, [sp, #16]
 8012e30:	dd72      	ble.n	8012f18 <_strtod_l+0x4c8>
 8012e32:	2916      	cmp	r1, #22
 8012e34:	dc5a      	bgt.n	8012eec <_strtod_l+0x49c>
 8012e36:	4970      	ldr	r1, [pc, #448]	; (8012ff8 <_strtod_l+0x5a8>)
 8012e38:	9b04      	ldr	r3, [sp, #16]
 8012e3a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e3e:	ed91 7b00 	vldr	d7, [r1]
 8012e42:	ec4b ab16 	vmov	d6, sl, fp
 8012e46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e4a:	ec5b ab17 	vmov	sl, fp, d7
 8012e4e:	e641      	b.n	8012ad4 <_strtod_l+0x84>
 8012e50:	4969      	ldr	r1, [pc, #420]	; (8012ff8 <_strtod_l+0x5a8>)
 8012e52:	eddd 7a06 	vldr	s15, [sp, #24]
 8012e56:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012e5a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8012e5e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012e62:	2b0f      	cmp	r3, #15
 8012e64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012e68:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012e6c:	ec5b ab17 	vmov	sl, fp, d7
 8012e70:	ddd9      	ble.n	8012e26 <_strtod_l+0x3d6>
 8012e72:	9904      	ldr	r1, [sp, #16]
 8012e74:	1a9a      	subs	r2, r3, r2
 8012e76:	440a      	add	r2, r1
 8012e78:	2a00      	cmp	r2, #0
 8012e7a:	f340 8096 	ble.w	8012faa <_strtod_l+0x55a>
 8012e7e:	f012 000f 	ands.w	r0, r2, #15
 8012e82:	d00a      	beq.n	8012e9a <_strtod_l+0x44a>
 8012e84:	495c      	ldr	r1, [pc, #368]	; (8012ff8 <_strtod_l+0x5a8>)
 8012e86:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012e8a:	ed91 7b00 	vldr	d7, [r1]
 8012e8e:	ec4b ab16 	vmov	d6, sl, fp
 8012e92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e96:	ec5b ab17 	vmov	sl, fp, d7
 8012e9a:	f032 020f 	bics.w	r2, r2, #15
 8012e9e:	d072      	beq.n	8012f86 <_strtod_l+0x536>
 8012ea0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8012ea4:	dd45      	ble.n	8012f32 <_strtod_l+0x4e2>
 8012ea6:	2500      	movs	r5, #0
 8012ea8:	46a8      	mov	r8, r5
 8012eaa:	9506      	str	r5, [sp, #24]
 8012eac:	46a9      	mov	r9, r5
 8012eae:	2322      	movs	r3, #34	; 0x22
 8012eb0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8013004 <_strtod_l+0x5b4>
 8012eb4:	6023      	str	r3, [r4, #0]
 8012eb6:	f04f 0a00 	mov.w	sl, #0
 8012eba:	9b06      	ldr	r3, [sp, #24]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	f43f ae09 	beq.w	8012ad4 <_strtod_l+0x84>
 8012ec2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f002 f863 	bl	8014f90 <_Bfree>
 8012eca:	4649      	mov	r1, r9
 8012ecc:	4620      	mov	r0, r4
 8012ece:	f002 f85f 	bl	8014f90 <_Bfree>
 8012ed2:	4641      	mov	r1, r8
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f002 f85b 	bl	8014f90 <_Bfree>
 8012eda:	9906      	ldr	r1, [sp, #24]
 8012edc:	4620      	mov	r0, r4
 8012ede:	f002 f857 	bl	8014f90 <_Bfree>
 8012ee2:	4629      	mov	r1, r5
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	f002 f853 	bl	8014f90 <_Bfree>
 8012eea:	e5f3      	b.n	8012ad4 <_strtod_l+0x84>
 8012eec:	9804      	ldr	r0, [sp, #16]
 8012eee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8012ef2:	4281      	cmp	r1, r0
 8012ef4:	dbbd      	blt.n	8012e72 <_strtod_l+0x422>
 8012ef6:	4a40      	ldr	r2, [pc, #256]	; (8012ff8 <_strtod_l+0x5a8>)
 8012ef8:	f1c3 030f 	rsb	r3, r3, #15
 8012efc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012f00:	ed91 7b00 	vldr	d7, [r1]
 8012f04:	ec4b ab16 	vmov	d6, sl, fp
 8012f08:	1ac3      	subs	r3, r0, r3
 8012f0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012f0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f12:	ed92 6b00 	vldr	d6, [r2]
 8012f16:	e796      	b.n	8012e46 <_strtod_l+0x3f6>
 8012f18:	3116      	adds	r1, #22
 8012f1a:	dbaa      	blt.n	8012e72 <_strtod_l+0x422>
 8012f1c:	4936      	ldr	r1, [pc, #216]	; (8012ff8 <_strtod_l+0x5a8>)
 8012f1e:	9b04      	ldr	r3, [sp, #16]
 8012f20:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8012f24:	ed91 7b00 	vldr	d7, [r1]
 8012f28:	ec4b ab16 	vmov	d6, sl, fp
 8012f2c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012f30:	e78b      	b.n	8012e4a <_strtod_l+0x3fa>
 8012f32:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8012f36:	2000      	movs	r0, #0
 8012f38:	4e30      	ldr	r6, [pc, #192]	; (8012ffc <_strtod_l+0x5ac>)
 8012f3a:	1112      	asrs	r2, r2, #4
 8012f3c:	4601      	mov	r1, r0
 8012f3e:	2a01      	cmp	r2, #1
 8012f40:	dc23      	bgt.n	8012f8a <_strtod_l+0x53a>
 8012f42:	b108      	cbz	r0, 8012f48 <_strtod_l+0x4f8>
 8012f44:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012f48:	4a2c      	ldr	r2, [pc, #176]	; (8012ffc <_strtod_l+0x5ac>)
 8012f4a:	482d      	ldr	r0, [pc, #180]	; (8013000 <_strtod_l+0x5b0>)
 8012f4c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8012f50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012f54:	ed91 7b00 	vldr	d7, [r1]
 8012f58:	ec4b ab16 	vmov	d6, sl, fp
 8012f5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012f64:	9907      	ldr	r1, [sp, #28]
 8012f66:	4a27      	ldr	r2, [pc, #156]	; (8013004 <_strtod_l+0x5b4>)
 8012f68:	400a      	ands	r2, r1
 8012f6a:	4282      	cmp	r2, r0
 8012f6c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012f70:	d899      	bhi.n	8012ea6 <_strtod_l+0x456>
 8012f72:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8012f76:	4282      	cmp	r2, r0
 8012f78:	bf86      	itte	hi
 8012f7a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801300c <_strtod_l+0x5bc>
 8012f7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012f82:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8012f86:	2700      	movs	r7, #0
 8012f88:	e070      	b.n	801306c <_strtod_l+0x61c>
 8012f8a:	07d7      	lsls	r7, r2, #31
 8012f8c:	d50a      	bpl.n	8012fa4 <_strtod_l+0x554>
 8012f8e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8012f92:	ed90 7b00 	vldr	d7, [r0]
 8012f96:	ed9d 6b06 	vldr	d6, [sp, #24]
 8012f9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012f9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012fa2:	2001      	movs	r0, #1
 8012fa4:	3101      	adds	r1, #1
 8012fa6:	1052      	asrs	r2, r2, #1
 8012fa8:	e7c9      	b.n	8012f3e <_strtod_l+0x4ee>
 8012faa:	d0ec      	beq.n	8012f86 <_strtod_l+0x536>
 8012fac:	4252      	negs	r2, r2
 8012fae:	f012 000f 	ands.w	r0, r2, #15
 8012fb2:	d00a      	beq.n	8012fca <_strtod_l+0x57a>
 8012fb4:	4910      	ldr	r1, [pc, #64]	; (8012ff8 <_strtod_l+0x5a8>)
 8012fb6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012fba:	ed91 7b00 	vldr	d7, [r1]
 8012fbe:	ec4b ab16 	vmov	d6, sl, fp
 8012fc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012fc6:	ec5b ab17 	vmov	sl, fp, d7
 8012fca:	1112      	asrs	r2, r2, #4
 8012fcc:	d0db      	beq.n	8012f86 <_strtod_l+0x536>
 8012fce:	2a1f      	cmp	r2, #31
 8012fd0:	dd1e      	ble.n	8013010 <_strtod_l+0x5c0>
 8012fd2:	2500      	movs	r5, #0
 8012fd4:	46a8      	mov	r8, r5
 8012fd6:	9506      	str	r5, [sp, #24]
 8012fd8:	46a9      	mov	r9, r5
 8012fda:	2322      	movs	r3, #34	; 0x22
 8012fdc:	f04f 0a00 	mov.w	sl, #0
 8012fe0:	f04f 0b00 	mov.w	fp, #0
 8012fe4:	6023      	str	r3, [r4, #0]
 8012fe6:	e768      	b.n	8012eba <_strtod_l+0x46a>
 8012fe8:	0801704d 	.word	0x0801704d
 8012fec:	080170d3 	.word	0x080170d3
 8012ff0:	08017055 	.word	0x08017055
 8012ff4:	08017094 	.word	0x08017094
 8012ff8:	08017178 	.word	0x08017178
 8012ffc:	08017150 	.word	0x08017150
 8013000:	7ca00000 	.word	0x7ca00000
 8013004:	7ff00000 	.word	0x7ff00000
 8013008:	fff80000 	.word	0xfff80000
 801300c:	7fefffff 	.word	0x7fefffff
 8013010:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8013014:	f012 0710 	ands.w	r7, r2, #16
 8013018:	49ab      	ldr	r1, [pc, #684]	; (80132c8 <_strtod_l+0x878>)
 801301a:	bf18      	it	ne
 801301c:	276a      	movne	r7, #106	; 0x6a
 801301e:	2000      	movs	r0, #0
 8013020:	2a00      	cmp	r2, #0
 8013022:	f300 8113 	bgt.w	801324c <_strtod_l+0x7fc>
 8013026:	b108      	cbz	r0, 801302c <_strtod_l+0x5dc>
 8013028:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801302c:	b1bf      	cbz	r7, 801305e <_strtod_l+0x60e>
 801302e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013032:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8013036:	2a00      	cmp	r2, #0
 8013038:	4659      	mov	r1, fp
 801303a:	dd10      	ble.n	801305e <_strtod_l+0x60e>
 801303c:	2a1f      	cmp	r2, #31
 801303e:	f340 8113 	ble.w	8013268 <_strtod_l+0x818>
 8013042:	2a34      	cmp	r2, #52	; 0x34
 8013044:	bfde      	ittt	le
 8013046:	3a20      	suble	r2, #32
 8013048:	f04f 30ff 	movle.w	r0, #4294967295
 801304c:	fa00 f202 	lslle.w	r2, r0, r2
 8013050:	f04f 0a00 	mov.w	sl, #0
 8013054:	bfcc      	ite	gt
 8013056:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801305a:	ea02 0b01 	andle.w	fp, r2, r1
 801305e:	ec4b ab17 	vmov	d7, sl, fp
 8013062:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801306a:	d0b2      	beq.n	8012fd2 <_strtod_l+0x582>
 801306c:	9a08      	ldr	r2, [sp, #32]
 801306e:	9200      	str	r2, [sp, #0]
 8013070:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013072:	462a      	mov	r2, r5
 8013074:	4620      	mov	r0, r4
 8013076:	f001 ffdd 	bl	8015034 <__s2b>
 801307a:	9006      	str	r0, [sp, #24]
 801307c:	2800      	cmp	r0, #0
 801307e:	f43f af12 	beq.w	8012ea6 <_strtod_l+0x456>
 8013082:	9a04      	ldr	r2, [sp, #16]
 8013084:	9b04      	ldr	r3, [sp, #16]
 8013086:	2a00      	cmp	r2, #0
 8013088:	f1c3 0300 	rsb	r3, r3, #0
 801308c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 80132b0 <_strtod_l+0x860>
 8013090:	bfa8      	it	ge
 8013092:	2300      	movge	r3, #0
 8013094:	ed9f ab88 	vldr	d10, [pc, #544]	; 80132b8 <_strtod_l+0x868>
 8013098:	ed9f bb89 	vldr	d11, [pc, #548]	; 80132c0 <_strtod_l+0x870>
 801309c:	930e      	str	r3, [sp, #56]	; 0x38
 801309e:	2500      	movs	r5, #0
 80130a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80130a4:	9310      	str	r3, [sp, #64]	; 0x40
 80130a6:	46a8      	mov	r8, r5
 80130a8:	9b06      	ldr	r3, [sp, #24]
 80130aa:	4620      	mov	r0, r4
 80130ac:	6859      	ldr	r1, [r3, #4]
 80130ae:	f001 ff3b 	bl	8014f28 <_Balloc>
 80130b2:	4681      	mov	r9, r0
 80130b4:	2800      	cmp	r0, #0
 80130b6:	f43f aefa 	beq.w	8012eae <_strtod_l+0x45e>
 80130ba:	9b06      	ldr	r3, [sp, #24]
 80130bc:	691a      	ldr	r2, [r3, #16]
 80130be:	3202      	adds	r2, #2
 80130c0:	f103 010c 	add.w	r1, r3, #12
 80130c4:	0092      	lsls	r2, r2, #2
 80130c6:	300c      	adds	r0, #12
 80130c8:	f7fe fcc8 	bl	8011a5c <memcpy>
 80130cc:	aa1a      	add	r2, sp, #104	; 0x68
 80130ce:	a919      	add	r1, sp, #100	; 0x64
 80130d0:	ec4b ab10 	vmov	d0, sl, fp
 80130d4:	4620      	mov	r0, r4
 80130d6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80130da:	f002 fa67 	bl	80155ac <__d2b>
 80130de:	9018      	str	r0, [sp, #96]	; 0x60
 80130e0:	2800      	cmp	r0, #0
 80130e2:	f43f aee4 	beq.w	8012eae <_strtod_l+0x45e>
 80130e6:	2101      	movs	r1, #1
 80130e8:	4620      	mov	r0, r4
 80130ea:	f002 f82f 	bl	801514c <__i2b>
 80130ee:	4680      	mov	r8, r0
 80130f0:	2800      	cmp	r0, #0
 80130f2:	f43f aedc 	beq.w	8012eae <_strtod_l+0x45e>
 80130f6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80130f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80130fa:	2e00      	cmp	r6, #0
 80130fc:	bfb1      	iteee	lt
 80130fe:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8013100:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013102:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8013104:	18f3      	addge	r3, r6, r3
 8013106:	bfba      	itte	lt
 8013108:	1b98      	sublt	r0, r3, r6
 801310a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801310c:	9308      	strge	r3, [sp, #32]
 801310e:	eba6 0607 	sub.w	r6, r6, r7
 8013112:	bfb8      	it	lt
 8013114:	9308      	strlt	r3, [sp, #32]
 8013116:	4416      	add	r6, r2
 8013118:	4b6c      	ldr	r3, [pc, #432]	; (80132cc <_strtod_l+0x87c>)
 801311a:	3e01      	subs	r6, #1
 801311c:	429e      	cmp	r6, r3
 801311e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013122:	f280 80b4 	bge.w	801328e <_strtod_l+0x83e>
 8013126:	1b9b      	subs	r3, r3, r6
 8013128:	2b1f      	cmp	r3, #31
 801312a:	eba2 0203 	sub.w	r2, r2, r3
 801312e:	f04f 0101 	mov.w	r1, #1
 8013132:	f300 80a0 	bgt.w	8013276 <_strtod_l+0x826>
 8013136:	fa01 f303 	lsl.w	r3, r1, r3
 801313a:	9311      	str	r3, [sp, #68]	; 0x44
 801313c:	2300      	movs	r3, #0
 801313e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013140:	9b08      	ldr	r3, [sp, #32]
 8013142:	4413      	add	r3, r2
 8013144:	4402      	add	r2, r0
 8013146:	18be      	adds	r6, r7, r2
 8013148:	9a08      	ldr	r2, [sp, #32]
 801314a:	429a      	cmp	r2, r3
 801314c:	bfa8      	it	ge
 801314e:	461a      	movge	r2, r3
 8013150:	42b2      	cmp	r2, r6
 8013152:	bfa8      	it	ge
 8013154:	4632      	movge	r2, r6
 8013156:	2a00      	cmp	r2, #0
 8013158:	dd04      	ble.n	8013164 <_strtod_l+0x714>
 801315a:	9908      	ldr	r1, [sp, #32]
 801315c:	1a9b      	subs	r3, r3, r2
 801315e:	1ab6      	subs	r6, r6, r2
 8013160:	1a8a      	subs	r2, r1, r2
 8013162:	9208      	str	r2, [sp, #32]
 8013164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013166:	b1c2      	cbz	r2, 801319a <_strtod_l+0x74a>
 8013168:	4641      	mov	r1, r8
 801316a:	4620      	mov	r0, r4
 801316c:	9315      	str	r3, [sp, #84]	; 0x54
 801316e:	f002 f88d 	bl	801528c <__pow5mult>
 8013172:	4680      	mov	r8, r0
 8013174:	2800      	cmp	r0, #0
 8013176:	f43f ae9a 	beq.w	8012eae <_strtod_l+0x45e>
 801317a:	4601      	mov	r1, r0
 801317c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801317e:	4620      	mov	r0, r4
 8013180:	f001 ffed 	bl	801515e <__multiply>
 8013184:	900c      	str	r0, [sp, #48]	; 0x30
 8013186:	2800      	cmp	r0, #0
 8013188:	f43f ae91 	beq.w	8012eae <_strtod_l+0x45e>
 801318c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801318e:	4620      	mov	r0, r4
 8013190:	f001 fefe 	bl	8014f90 <_Bfree>
 8013194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013198:	9218      	str	r2, [sp, #96]	; 0x60
 801319a:	2b00      	cmp	r3, #0
 801319c:	dc7c      	bgt.n	8013298 <_strtod_l+0x848>
 801319e:	9b04      	ldr	r3, [sp, #16]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	dd08      	ble.n	80131b6 <_strtod_l+0x766>
 80131a4:	4649      	mov	r1, r9
 80131a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80131a8:	4620      	mov	r0, r4
 80131aa:	f002 f86f 	bl	801528c <__pow5mult>
 80131ae:	4681      	mov	r9, r0
 80131b0:	2800      	cmp	r0, #0
 80131b2:	f43f ae7c 	beq.w	8012eae <_strtod_l+0x45e>
 80131b6:	2e00      	cmp	r6, #0
 80131b8:	dd08      	ble.n	80131cc <_strtod_l+0x77c>
 80131ba:	4649      	mov	r1, r9
 80131bc:	4632      	mov	r2, r6
 80131be:	4620      	mov	r0, r4
 80131c0:	f002 f8b2 	bl	8015328 <__lshift>
 80131c4:	4681      	mov	r9, r0
 80131c6:	2800      	cmp	r0, #0
 80131c8:	f43f ae71 	beq.w	8012eae <_strtod_l+0x45e>
 80131cc:	9b08      	ldr	r3, [sp, #32]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	dd08      	ble.n	80131e4 <_strtod_l+0x794>
 80131d2:	4641      	mov	r1, r8
 80131d4:	461a      	mov	r2, r3
 80131d6:	4620      	mov	r0, r4
 80131d8:	f002 f8a6 	bl	8015328 <__lshift>
 80131dc:	4680      	mov	r8, r0
 80131de:	2800      	cmp	r0, #0
 80131e0:	f43f ae65 	beq.w	8012eae <_strtod_l+0x45e>
 80131e4:	464a      	mov	r2, r9
 80131e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80131e8:	4620      	mov	r0, r4
 80131ea:	f002 f90b 	bl	8015404 <__mdiff>
 80131ee:	4605      	mov	r5, r0
 80131f0:	2800      	cmp	r0, #0
 80131f2:	f43f ae5c 	beq.w	8012eae <_strtod_l+0x45e>
 80131f6:	68c3      	ldr	r3, [r0, #12]
 80131f8:	930c      	str	r3, [sp, #48]	; 0x30
 80131fa:	2300      	movs	r3, #0
 80131fc:	60c3      	str	r3, [r0, #12]
 80131fe:	4641      	mov	r1, r8
 8013200:	f002 f8e6 	bl	80153d0 <__mcmp>
 8013204:	2800      	cmp	r0, #0
 8013206:	da63      	bge.n	80132d0 <_strtod_l+0x880>
 8013208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801320a:	b9e3      	cbnz	r3, 8013246 <_strtod_l+0x7f6>
 801320c:	f1ba 0f00 	cmp.w	sl, #0
 8013210:	d119      	bne.n	8013246 <_strtod_l+0x7f6>
 8013212:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013216:	b9b3      	cbnz	r3, 8013246 <_strtod_l+0x7f6>
 8013218:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801321c:	0d1b      	lsrs	r3, r3, #20
 801321e:	051b      	lsls	r3, r3, #20
 8013220:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013224:	d90f      	bls.n	8013246 <_strtod_l+0x7f6>
 8013226:	696b      	ldr	r3, [r5, #20]
 8013228:	b913      	cbnz	r3, 8013230 <_strtod_l+0x7e0>
 801322a:	692b      	ldr	r3, [r5, #16]
 801322c:	2b01      	cmp	r3, #1
 801322e:	dd0a      	ble.n	8013246 <_strtod_l+0x7f6>
 8013230:	4629      	mov	r1, r5
 8013232:	2201      	movs	r2, #1
 8013234:	4620      	mov	r0, r4
 8013236:	f002 f877 	bl	8015328 <__lshift>
 801323a:	4641      	mov	r1, r8
 801323c:	4605      	mov	r5, r0
 801323e:	f002 f8c7 	bl	80153d0 <__mcmp>
 8013242:	2800      	cmp	r0, #0
 8013244:	dc75      	bgt.n	8013332 <_strtod_l+0x8e2>
 8013246:	2f00      	cmp	r7, #0
 8013248:	d17f      	bne.n	801334a <_strtod_l+0x8fa>
 801324a:	e63a      	b.n	8012ec2 <_strtod_l+0x472>
 801324c:	07d6      	lsls	r6, r2, #31
 801324e:	d508      	bpl.n	8013262 <_strtod_l+0x812>
 8013250:	ed9d 6b06 	vldr	d6, [sp, #24]
 8013254:	ed91 7b00 	vldr	d7, [r1]
 8013258:	ee26 7b07 	vmul.f64	d7, d6, d7
 801325c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013260:	2001      	movs	r0, #1
 8013262:	1052      	asrs	r2, r2, #1
 8013264:	3108      	adds	r1, #8
 8013266:	e6db      	b.n	8013020 <_strtod_l+0x5d0>
 8013268:	f04f 31ff 	mov.w	r1, #4294967295
 801326c:	fa01 f202 	lsl.w	r2, r1, r2
 8013270:	ea02 0a0a 	and.w	sl, r2, sl
 8013274:	e6f3      	b.n	801305e <_strtod_l+0x60e>
 8013276:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801327a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801327e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013282:	36e2      	adds	r6, #226	; 0xe2
 8013284:	fa01 f306 	lsl.w	r3, r1, r6
 8013288:	930f      	str	r3, [sp, #60]	; 0x3c
 801328a:	9111      	str	r1, [sp, #68]	; 0x44
 801328c:	e758      	b.n	8013140 <_strtod_l+0x6f0>
 801328e:	2300      	movs	r3, #0
 8013290:	930f      	str	r3, [sp, #60]	; 0x3c
 8013292:	2301      	movs	r3, #1
 8013294:	9311      	str	r3, [sp, #68]	; 0x44
 8013296:	e753      	b.n	8013140 <_strtod_l+0x6f0>
 8013298:	461a      	mov	r2, r3
 801329a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801329c:	4620      	mov	r0, r4
 801329e:	f002 f843 	bl	8015328 <__lshift>
 80132a2:	9018      	str	r0, [sp, #96]	; 0x60
 80132a4:	2800      	cmp	r0, #0
 80132a6:	f47f af7a 	bne.w	801319e <_strtod_l+0x74e>
 80132aa:	e600      	b.n	8012eae <_strtod_l+0x45e>
 80132ac:	f3af 8000 	nop.w
 80132b0:	94a03595 	.word	0x94a03595
 80132b4:	3fdfffff 	.word	0x3fdfffff
 80132b8:	35afe535 	.word	0x35afe535
 80132bc:	3fe00000 	.word	0x3fe00000
 80132c0:	94a03595 	.word	0x94a03595
 80132c4:	3fcfffff 	.word	0x3fcfffff
 80132c8:	080170a8 	.word	0x080170a8
 80132cc:	fffffc02 	.word	0xfffffc02
 80132d0:	f8cd b020 	str.w	fp, [sp, #32]
 80132d4:	f040 8085 	bne.w	80133e2 <_strtod_l+0x992>
 80132d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80132de:	b322      	cbz	r2, 801332a <_strtod_l+0x8da>
 80132e0:	4ab7      	ldr	r2, [pc, #732]	; (80135c0 <_strtod_l+0xb70>)
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d154      	bne.n	8013390 <_strtod_l+0x940>
 80132e6:	4651      	mov	r1, sl
 80132e8:	b1e7      	cbz	r7, 8013324 <_strtod_l+0x8d4>
 80132ea:	4bb6      	ldr	r3, [pc, #728]	; (80135c4 <_strtod_l+0xb74>)
 80132ec:	465a      	mov	r2, fp
 80132ee:	4013      	ands	r3, r2
 80132f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80132f4:	f04f 32ff 	mov.w	r2, #4294967295
 80132f8:	d803      	bhi.n	8013302 <_strtod_l+0x8b2>
 80132fa:	0d1b      	lsrs	r3, r3, #20
 80132fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013300:	409a      	lsls	r2, r3
 8013302:	4291      	cmp	r1, r2
 8013304:	d144      	bne.n	8013390 <_strtod_l+0x940>
 8013306:	4bb0      	ldr	r3, [pc, #704]	; (80135c8 <_strtod_l+0xb78>)
 8013308:	9a08      	ldr	r2, [sp, #32]
 801330a:	429a      	cmp	r2, r3
 801330c:	d102      	bne.n	8013314 <_strtod_l+0x8c4>
 801330e:	3101      	adds	r1, #1
 8013310:	f43f adcd 	beq.w	8012eae <_strtod_l+0x45e>
 8013314:	4bab      	ldr	r3, [pc, #684]	; (80135c4 <_strtod_l+0xb74>)
 8013316:	9a08      	ldr	r2, [sp, #32]
 8013318:	401a      	ands	r2, r3
 801331a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801331e:	f04f 0a00 	mov.w	sl, #0
 8013322:	e790      	b.n	8013246 <_strtod_l+0x7f6>
 8013324:	f04f 32ff 	mov.w	r2, #4294967295
 8013328:	e7eb      	b.n	8013302 <_strtod_l+0x8b2>
 801332a:	bb8b      	cbnz	r3, 8013390 <_strtod_l+0x940>
 801332c:	f1ba 0f00 	cmp.w	sl, #0
 8013330:	d12e      	bne.n	8013390 <_strtod_l+0x940>
 8013332:	465b      	mov	r3, fp
 8013334:	4aa3      	ldr	r2, [pc, #652]	; (80135c4 <_strtod_l+0xb74>)
 8013336:	b30f      	cbz	r7, 801337c <_strtod_l+0x92c>
 8013338:	ea02 010b 	and.w	r1, r2, fp
 801333c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013340:	dc1c      	bgt.n	801337c <_strtod_l+0x92c>
 8013342:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013346:	f77f ae48 	ble.w	8012fda <_strtod_l+0x58a>
 801334a:	4aa0      	ldr	r2, [pc, #640]	; (80135cc <_strtod_l+0xb7c>)
 801334c:	2300      	movs	r3, #0
 801334e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8013352:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8013356:	ec4b ab17 	vmov	d7, sl, fp
 801335a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801335e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013362:	9b05      	ldr	r3, [sp, #20]
 8013364:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013368:	2b00      	cmp	r3, #0
 801336a:	f47f adaa 	bne.w	8012ec2 <_strtod_l+0x472>
 801336e:	9b04      	ldr	r3, [sp, #16]
 8013370:	2b00      	cmp	r3, #0
 8013372:	f47f ada6 	bne.w	8012ec2 <_strtod_l+0x472>
 8013376:	2322      	movs	r3, #34	; 0x22
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	e5a2      	b.n	8012ec2 <_strtod_l+0x472>
 801337c:	4013      	ands	r3, r2
 801337e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013382:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013386:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801338a:	f04f 3aff 	mov.w	sl, #4294967295
 801338e:	e75a      	b.n	8013246 <_strtod_l+0x7f6>
 8013390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013392:	b18b      	cbz	r3, 80133b8 <_strtod_l+0x968>
 8013394:	9a08      	ldr	r2, [sp, #32]
 8013396:	4213      	tst	r3, r2
 8013398:	f43f af55 	beq.w	8013246 <_strtod_l+0x7f6>
 801339c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801339e:	463a      	mov	r2, r7
 80133a0:	4650      	mov	r0, sl
 80133a2:	4659      	mov	r1, fp
 80133a4:	b163      	cbz	r3, 80133c0 <_strtod_l+0x970>
 80133a6:	f7ff fb38 	bl	8012a1a <sulp>
 80133aa:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80133ae:	ee37 7b00 	vadd.f64	d7, d7, d0
 80133b2:	ec5b ab17 	vmov	sl, fp, d7
 80133b6:	e746      	b.n	8013246 <_strtod_l+0x7f6>
 80133b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133ba:	ea13 0f0a 	tst.w	r3, sl
 80133be:	e7eb      	b.n	8013398 <_strtod_l+0x948>
 80133c0:	f7ff fb2b 	bl	8012a1a <sulp>
 80133c4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80133c8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80133cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80133d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80133d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80133dc:	f43f adfd 	beq.w	8012fda <_strtod_l+0x58a>
 80133e0:	e731      	b.n	8013246 <_strtod_l+0x7f6>
 80133e2:	4641      	mov	r1, r8
 80133e4:	4628      	mov	r0, r5
 80133e6:	f002 f930 	bl	801564a <__ratio>
 80133ea:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80133ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80133f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f6:	d869      	bhi.n	80134cc <_strtod_l+0xa7c>
 80133f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d045      	beq.n	801348a <_strtod_l+0xa3a>
 80133fe:	4b74      	ldr	r3, [pc, #464]	; (80135d0 <_strtod_l+0xb80>)
 8013400:	2200      	movs	r2, #0
 8013402:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8013406:	9808      	ldr	r0, [sp, #32]
 8013408:	496e      	ldr	r1, [pc, #440]	; (80135c4 <_strtod_l+0xb74>)
 801340a:	ea00 0601 	and.w	r6, r0, r1
 801340e:	4871      	ldr	r0, [pc, #452]	; (80135d4 <_strtod_l+0xb84>)
 8013410:	4286      	cmp	r6, r0
 8013412:	f040 8089 	bne.w	8013528 <_strtod_l+0xad8>
 8013416:	910f      	str	r1, [sp, #60]	; 0x3c
 8013418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801341c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8013420:	9908      	ldr	r1, [sp, #32]
 8013422:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8013426:	ec4b ab10 	vmov	d0, sl, fp
 801342a:	ec43 2b1c 	vmov	d12, r2, r3
 801342e:	f002 f847 	bl	80154c0 <__ulp>
 8013432:	ec4b ab1d 	vmov	d13, sl, fp
 8013436:	eeac db00 	vfma.f64	d13, d12, d0
 801343a:	ed8d db08 	vstr	d13, [sp, #32]
 801343e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013440:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013442:	4a65      	ldr	r2, [pc, #404]	; (80135d8 <_strtod_l+0xb88>)
 8013444:	4019      	ands	r1, r3
 8013446:	4291      	cmp	r1, r2
 8013448:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801344c:	d948      	bls.n	80134e0 <_strtod_l+0xa90>
 801344e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013450:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013454:	4293      	cmp	r3, r2
 8013456:	d103      	bne.n	8013460 <_strtod_l+0xa10>
 8013458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801345a:	3301      	adds	r3, #1
 801345c:	f43f ad27 	beq.w	8012eae <_strtod_l+0x45e>
 8013460:	f8df b164 	ldr.w	fp, [pc, #356]	; 80135c8 <_strtod_l+0xb78>
 8013464:	f04f 3aff 	mov.w	sl, #4294967295
 8013468:	9918      	ldr	r1, [sp, #96]	; 0x60
 801346a:	4620      	mov	r0, r4
 801346c:	f001 fd90 	bl	8014f90 <_Bfree>
 8013470:	4649      	mov	r1, r9
 8013472:	4620      	mov	r0, r4
 8013474:	f001 fd8c 	bl	8014f90 <_Bfree>
 8013478:	4641      	mov	r1, r8
 801347a:	4620      	mov	r0, r4
 801347c:	f001 fd88 	bl	8014f90 <_Bfree>
 8013480:	4629      	mov	r1, r5
 8013482:	4620      	mov	r0, r4
 8013484:	f001 fd84 	bl	8014f90 <_Bfree>
 8013488:	e60e      	b.n	80130a8 <_strtod_l+0x658>
 801348a:	f1ba 0f00 	cmp.w	sl, #0
 801348e:	d113      	bne.n	80134b8 <_strtod_l+0xa68>
 8013490:	9b08      	ldr	r3, [sp, #32]
 8013492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013496:	b9b3      	cbnz	r3, 80134c6 <_strtod_l+0xa76>
 8013498:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801349c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80134a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80134a8:	d401      	bmi.n	80134ae <_strtod_l+0xa5e>
 80134aa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80134ae:	eeb1 7b48 	vneg.f64	d7, d8
 80134b2:	ec53 2b17 	vmov	r2, r3, d7
 80134b6:	e7a6      	b.n	8013406 <_strtod_l+0x9b6>
 80134b8:	f1ba 0f01 	cmp.w	sl, #1
 80134bc:	d103      	bne.n	80134c6 <_strtod_l+0xa76>
 80134be:	9b08      	ldr	r3, [sp, #32]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	f43f ad8a 	beq.w	8012fda <_strtod_l+0x58a>
 80134c6:	2200      	movs	r2, #0
 80134c8:	4b44      	ldr	r3, [pc, #272]	; (80135dc <_strtod_l+0xb8c>)
 80134ca:	e79a      	b.n	8013402 <_strtod_l+0x9b2>
 80134cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80134d2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d0e9      	beq.n	80134ae <_strtod_l+0xa5e>
 80134da:	ec53 2b18 	vmov	r2, r3, d8
 80134de:	e792      	b.n	8013406 <_strtod_l+0x9b6>
 80134e0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80134e4:	2f00      	cmp	r7, #0
 80134e6:	d1bf      	bne.n	8013468 <_strtod_l+0xa18>
 80134e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80134ec:	0d1b      	lsrs	r3, r3, #20
 80134ee:	051b      	lsls	r3, r3, #20
 80134f0:	429e      	cmp	r6, r3
 80134f2:	d1b9      	bne.n	8013468 <_strtod_l+0xa18>
 80134f4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 80134f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134fa:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80134fe:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013502:	b92b      	cbnz	r3, 8013510 <_strtod_l+0xac0>
 8013504:	f1ba 0f00 	cmp.w	sl, #0
 8013508:	d102      	bne.n	8013510 <_strtod_l+0xac0>
 801350a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 801350e:	b3d2      	cbz	r2, 8013586 <_strtod_l+0xb36>
 8013510:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013518:	f53f acd3 	bmi.w	8012ec2 <_strtod_l+0x472>
 801351c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8013520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013524:	dda0      	ble.n	8013468 <_strtod_l+0xa18>
 8013526:	e4cc      	b.n	8012ec2 <_strtod_l+0x472>
 8013528:	b1ef      	cbz	r7, 8013566 <_strtod_l+0xb16>
 801352a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 801352e:	d81a      	bhi.n	8013566 <_strtod_l+0xb16>
 8013530:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80135b8 <_strtod_l+0xb68>
 8013534:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353c:	d810      	bhi.n	8013560 <_strtod_l+0xb10>
 801353e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8013542:	ee17 3a90 	vmov	r3, s15
 8013546:	2b00      	cmp	r3, #0
 8013548:	bf08      	it	eq
 801354a:	2301      	moveq	r3, #1
 801354c:	ee07 3a90 	vmov	s15, r3
 8013550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013552:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8013556:	b99b      	cbnz	r3, 8013580 <_strtod_l+0xb30>
 8013558:	eeb1 7b48 	vneg.f64	d7, d8
 801355c:	ec53 2b17 	vmov	r2, r3, d7
 8013560:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8013564:	1b8b      	subs	r3, r1, r6
 8013566:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801356a:	ec43 2b1c 	vmov	d12, r2, r3
 801356e:	f001 ffa7 	bl	80154c0 <__ulp>
 8013572:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013576:	eeac 7b00 	vfma.f64	d7, d12, d0
 801357a:	ec5b ab17 	vmov	sl, fp, d7
 801357e:	e7b1      	b.n	80134e4 <_strtod_l+0xa94>
 8013580:	ec53 2b18 	vmov	r2, r3, d8
 8013584:	e7ec      	b.n	8013560 <_strtod_l+0xb10>
 8013586:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801358e:	f57f af6b 	bpl.w	8013468 <_strtod_l+0xa18>
 8013592:	e496      	b.n	8012ec2 <_strtod_l+0x472>
 8013594:	2300      	movs	r3, #0
 8013596:	930d      	str	r3, [sp, #52]	; 0x34
 8013598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801359a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801359c:	6013      	str	r3, [r2, #0]
 801359e:	f7ff ba9d 	b.w	8012adc <_strtod_l+0x8c>
 80135a2:	2a65      	cmp	r2, #101	; 0x65
 80135a4:	f04f 0100 	mov.w	r1, #0
 80135a8:	f43f ab97 	beq.w	8012cda <_strtod_l+0x28a>
 80135ac:	2701      	movs	r7, #1
 80135ae:	460b      	mov	r3, r1
 80135b0:	9704      	str	r7, [sp, #16]
 80135b2:	f7ff bb0a 	b.w	8012bca <_strtod_l+0x17a>
 80135b6:	bf00      	nop
 80135b8:	ffc00000 	.word	0xffc00000
 80135bc:	41dfffff 	.word	0x41dfffff
 80135c0:	000fffff 	.word	0x000fffff
 80135c4:	7ff00000 	.word	0x7ff00000
 80135c8:	7fefffff 	.word	0x7fefffff
 80135cc:	39500000 	.word	0x39500000
 80135d0:	3ff00000 	.word	0x3ff00000
 80135d4:	7fe00000 	.word	0x7fe00000
 80135d8:	7c9fffff 	.word	0x7c9fffff
 80135dc:	bff00000 	.word	0xbff00000

080135e0 <_strtod_r>:
 80135e0:	4b05      	ldr	r3, [pc, #20]	; (80135f8 <_strtod_r+0x18>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	b410      	push	{r4}
 80135e6:	6a1b      	ldr	r3, [r3, #32]
 80135e8:	4c04      	ldr	r4, [pc, #16]	; (80135fc <_strtod_r+0x1c>)
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	bf08      	it	eq
 80135ee:	4623      	moveq	r3, r4
 80135f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135f4:	f7ff ba2c 	b.w	8012a50 <_strtod_l>
 80135f8:	20000438 	.word	0x20000438
 80135fc:	2000049c 	.word	0x2000049c

08013600 <_strtol_l.isra.0>:
 8013600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013604:	4680      	mov	r8, r0
 8013606:	4689      	mov	r9, r1
 8013608:	4692      	mov	sl, r2
 801360a:	461e      	mov	r6, r3
 801360c:	460f      	mov	r7, r1
 801360e:	463d      	mov	r5, r7
 8013610:	9808      	ldr	r0, [sp, #32]
 8013612:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013616:	f001 fbdb 	bl	8014dd0 <__locale_ctype_ptr_l>
 801361a:	4420      	add	r0, r4
 801361c:	7843      	ldrb	r3, [r0, #1]
 801361e:	f013 0308 	ands.w	r3, r3, #8
 8013622:	d132      	bne.n	801368a <_strtol_l.isra.0+0x8a>
 8013624:	2c2d      	cmp	r4, #45	; 0x2d
 8013626:	d132      	bne.n	801368e <_strtol_l.isra.0+0x8e>
 8013628:	787c      	ldrb	r4, [r7, #1]
 801362a:	1cbd      	adds	r5, r7, #2
 801362c:	2201      	movs	r2, #1
 801362e:	2e00      	cmp	r6, #0
 8013630:	d05d      	beq.n	80136ee <_strtol_l.isra.0+0xee>
 8013632:	2e10      	cmp	r6, #16
 8013634:	d109      	bne.n	801364a <_strtol_l.isra.0+0x4a>
 8013636:	2c30      	cmp	r4, #48	; 0x30
 8013638:	d107      	bne.n	801364a <_strtol_l.isra.0+0x4a>
 801363a:	782b      	ldrb	r3, [r5, #0]
 801363c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013640:	2b58      	cmp	r3, #88	; 0x58
 8013642:	d14f      	bne.n	80136e4 <_strtol_l.isra.0+0xe4>
 8013644:	786c      	ldrb	r4, [r5, #1]
 8013646:	2610      	movs	r6, #16
 8013648:	3502      	adds	r5, #2
 801364a:	2a00      	cmp	r2, #0
 801364c:	bf14      	ite	ne
 801364e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013652:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013656:	2700      	movs	r7, #0
 8013658:	fbb1 fcf6 	udiv	ip, r1, r6
 801365c:	4638      	mov	r0, r7
 801365e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013662:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013666:	2b09      	cmp	r3, #9
 8013668:	d817      	bhi.n	801369a <_strtol_l.isra.0+0x9a>
 801366a:	461c      	mov	r4, r3
 801366c:	42a6      	cmp	r6, r4
 801366e:	dd23      	ble.n	80136b8 <_strtol_l.isra.0+0xb8>
 8013670:	1c7b      	adds	r3, r7, #1
 8013672:	d007      	beq.n	8013684 <_strtol_l.isra.0+0x84>
 8013674:	4584      	cmp	ip, r0
 8013676:	d31c      	bcc.n	80136b2 <_strtol_l.isra.0+0xb2>
 8013678:	d101      	bne.n	801367e <_strtol_l.isra.0+0x7e>
 801367a:	45a6      	cmp	lr, r4
 801367c:	db19      	blt.n	80136b2 <_strtol_l.isra.0+0xb2>
 801367e:	fb00 4006 	mla	r0, r0, r6, r4
 8013682:	2701      	movs	r7, #1
 8013684:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013688:	e7eb      	b.n	8013662 <_strtol_l.isra.0+0x62>
 801368a:	462f      	mov	r7, r5
 801368c:	e7bf      	b.n	801360e <_strtol_l.isra.0+0xe>
 801368e:	2c2b      	cmp	r4, #43	; 0x2b
 8013690:	bf04      	itt	eq
 8013692:	1cbd      	addeq	r5, r7, #2
 8013694:	787c      	ldrbeq	r4, [r7, #1]
 8013696:	461a      	mov	r2, r3
 8013698:	e7c9      	b.n	801362e <_strtol_l.isra.0+0x2e>
 801369a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801369e:	2b19      	cmp	r3, #25
 80136a0:	d801      	bhi.n	80136a6 <_strtol_l.isra.0+0xa6>
 80136a2:	3c37      	subs	r4, #55	; 0x37
 80136a4:	e7e2      	b.n	801366c <_strtol_l.isra.0+0x6c>
 80136a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80136aa:	2b19      	cmp	r3, #25
 80136ac:	d804      	bhi.n	80136b8 <_strtol_l.isra.0+0xb8>
 80136ae:	3c57      	subs	r4, #87	; 0x57
 80136b0:	e7dc      	b.n	801366c <_strtol_l.isra.0+0x6c>
 80136b2:	f04f 37ff 	mov.w	r7, #4294967295
 80136b6:	e7e5      	b.n	8013684 <_strtol_l.isra.0+0x84>
 80136b8:	1c7b      	adds	r3, r7, #1
 80136ba:	d108      	bne.n	80136ce <_strtol_l.isra.0+0xce>
 80136bc:	2322      	movs	r3, #34	; 0x22
 80136be:	f8c8 3000 	str.w	r3, [r8]
 80136c2:	4608      	mov	r0, r1
 80136c4:	f1ba 0f00 	cmp.w	sl, #0
 80136c8:	d107      	bne.n	80136da <_strtol_l.isra.0+0xda>
 80136ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ce:	b102      	cbz	r2, 80136d2 <_strtol_l.isra.0+0xd2>
 80136d0:	4240      	negs	r0, r0
 80136d2:	f1ba 0f00 	cmp.w	sl, #0
 80136d6:	d0f8      	beq.n	80136ca <_strtol_l.isra.0+0xca>
 80136d8:	b10f      	cbz	r7, 80136de <_strtol_l.isra.0+0xde>
 80136da:	f105 39ff 	add.w	r9, r5, #4294967295
 80136de:	f8ca 9000 	str.w	r9, [sl]
 80136e2:	e7f2      	b.n	80136ca <_strtol_l.isra.0+0xca>
 80136e4:	2430      	movs	r4, #48	; 0x30
 80136e6:	2e00      	cmp	r6, #0
 80136e8:	d1af      	bne.n	801364a <_strtol_l.isra.0+0x4a>
 80136ea:	2608      	movs	r6, #8
 80136ec:	e7ad      	b.n	801364a <_strtol_l.isra.0+0x4a>
 80136ee:	2c30      	cmp	r4, #48	; 0x30
 80136f0:	d0a3      	beq.n	801363a <_strtol_l.isra.0+0x3a>
 80136f2:	260a      	movs	r6, #10
 80136f4:	e7a9      	b.n	801364a <_strtol_l.isra.0+0x4a>
	...

080136f8 <_strtol_r>:
 80136f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136fa:	4c06      	ldr	r4, [pc, #24]	; (8013714 <_strtol_r+0x1c>)
 80136fc:	4d06      	ldr	r5, [pc, #24]	; (8013718 <_strtol_r+0x20>)
 80136fe:	6824      	ldr	r4, [r4, #0]
 8013700:	6a24      	ldr	r4, [r4, #32]
 8013702:	2c00      	cmp	r4, #0
 8013704:	bf08      	it	eq
 8013706:	462c      	moveq	r4, r5
 8013708:	9400      	str	r4, [sp, #0]
 801370a:	f7ff ff79 	bl	8013600 <_strtol_l.isra.0>
 801370e:	b003      	add	sp, #12
 8013710:	bd30      	pop	{r4, r5, pc}
 8013712:	bf00      	nop
 8013714:	20000438 	.word	0x20000438
 8013718:	2000049c 	.word	0x2000049c

0801371c <__swbuf_r>:
 801371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801371e:	460e      	mov	r6, r1
 8013720:	4614      	mov	r4, r2
 8013722:	4605      	mov	r5, r0
 8013724:	b118      	cbz	r0, 801372e <__swbuf_r+0x12>
 8013726:	6983      	ldr	r3, [r0, #24]
 8013728:	b90b      	cbnz	r3, 801372e <__swbuf_r+0x12>
 801372a:	f000 ffa1 	bl	8014670 <__sinit>
 801372e:	4b21      	ldr	r3, [pc, #132]	; (80137b4 <__swbuf_r+0x98>)
 8013730:	429c      	cmp	r4, r3
 8013732:	d12a      	bne.n	801378a <__swbuf_r+0x6e>
 8013734:	686c      	ldr	r4, [r5, #4]
 8013736:	69a3      	ldr	r3, [r4, #24]
 8013738:	60a3      	str	r3, [r4, #8]
 801373a:	89a3      	ldrh	r3, [r4, #12]
 801373c:	071a      	lsls	r2, r3, #28
 801373e:	d52e      	bpl.n	801379e <__swbuf_r+0x82>
 8013740:	6923      	ldr	r3, [r4, #16]
 8013742:	b363      	cbz	r3, 801379e <__swbuf_r+0x82>
 8013744:	6923      	ldr	r3, [r4, #16]
 8013746:	6820      	ldr	r0, [r4, #0]
 8013748:	1ac0      	subs	r0, r0, r3
 801374a:	6963      	ldr	r3, [r4, #20]
 801374c:	b2f6      	uxtb	r6, r6
 801374e:	4283      	cmp	r3, r0
 8013750:	4637      	mov	r7, r6
 8013752:	dc04      	bgt.n	801375e <__swbuf_r+0x42>
 8013754:	4621      	mov	r1, r4
 8013756:	4628      	mov	r0, r5
 8013758:	f000 ff20 	bl	801459c <_fflush_r>
 801375c:	bb28      	cbnz	r0, 80137aa <__swbuf_r+0x8e>
 801375e:	68a3      	ldr	r3, [r4, #8]
 8013760:	3b01      	subs	r3, #1
 8013762:	60a3      	str	r3, [r4, #8]
 8013764:	6823      	ldr	r3, [r4, #0]
 8013766:	1c5a      	adds	r2, r3, #1
 8013768:	6022      	str	r2, [r4, #0]
 801376a:	701e      	strb	r6, [r3, #0]
 801376c:	6963      	ldr	r3, [r4, #20]
 801376e:	3001      	adds	r0, #1
 8013770:	4283      	cmp	r3, r0
 8013772:	d004      	beq.n	801377e <__swbuf_r+0x62>
 8013774:	89a3      	ldrh	r3, [r4, #12]
 8013776:	07db      	lsls	r3, r3, #31
 8013778:	d519      	bpl.n	80137ae <__swbuf_r+0x92>
 801377a:	2e0a      	cmp	r6, #10
 801377c:	d117      	bne.n	80137ae <__swbuf_r+0x92>
 801377e:	4621      	mov	r1, r4
 8013780:	4628      	mov	r0, r5
 8013782:	f000 ff0b 	bl	801459c <_fflush_r>
 8013786:	b190      	cbz	r0, 80137ae <__swbuf_r+0x92>
 8013788:	e00f      	b.n	80137aa <__swbuf_r+0x8e>
 801378a:	4b0b      	ldr	r3, [pc, #44]	; (80137b8 <__swbuf_r+0x9c>)
 801378c:	429c      	cmp	r4, r3
 801378e:	d101      	bne.n	8013794 <__swbuf_r+0x78>
 8013790:	68ac      	ldr	r4, [r5, #8]
 8013792:	e7d0      	b.n	8013736 <__swbuf_r+0x1a>
 8013794:	4b09      	ldr	r3, [pc, #36]	; (80137bc <__swbuf_r+0xa0>)
 8013796:	429c      	cmp	r4, r3
 8013798:	bf08      	it	eq
 801379a:	68ec      	ldreq	r4, [r5, #12]
 801379c:	e7cb      	b.n	8013736 <__swbuf_r+0x1a>
 801379e:	4621      	mov	r1, r4
 80137a0:	4628      	mov	r0, r5
 80137a2:	f000 f81f 	bl	80137e4 <__swsetup_r>
 80137a6:	2800      	cmp	r0, #0
 80137a8:	d0cc      	beq.n	8013744 <__swbuf_r+0x28>
 80137aa:	f04f 37ff 	mov.w	r7, #4294967295
 80137ae:	4638      	mov	r0, r7
 80137b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137b2:	bf00      	nop
 80137b4:	08017100 	.word	0x08017100
 80137b8:	08017120 	.word	0x08017120
 80137bc:	080170e0 	.word	0x080170e0

080137c0 <_write_r>:
 80137c0:	b538      	push	{r3, r4, r5, lr}
 80137c2:	4c07      	ldr	r4, [pc, #28]	; (80137e0 <_write_r+0x20>)
 80137c4:	4605      	mov	r5, r0
 80137c6:	4608      	mov	r0, r1
 80137c8:	4611      	mov	r1, r2
 80137ca:	2200      	movs	r2, #0
 80137cc:	6022      	str	r2, [r4, #0]
 80137ce:	461a      	mov	r2, r3
 80137d0:	f7fa fc74 	bl	800e0bc <_write>
 80137d4:	1c43      	adds	r3, r0, #1
 80137d6:	d102      	bne.n	80137de <_write_r+0x1e>
 80137d8:	6823      	ldr	r3, [r4, #0]
 80137da:	b103      	cbz	r3, 80137de <_write_r+0x1e>
 80137dc:	602b      	str	r3, [r5, #0]
 80137de:	bd38      	pop	{r3, r4, r5, pc}
 80137e0:	2000eaa4 	.word	0x2000eaa4

080137e4 <__swsetup_r>:
 80137e4:	4b32      	ldr	r3, [pc, #200]	; (80138b0 <__swsetup_r+0xcc>)
 80137e6:	b570      	push	{r4, r5, r6, lr}
 80137e8:	681d      	ldr	r5, [r3, #0]
 80137ea:	4606      	mov	r6, r0
 80137ec:	460c      	mov	r4, r1
 80137ee:	b125      	cbz	r5, 80137fa <__swsetup_r+0x16>
 80137f0:	69ab      	ldr	r3, [r5, #24]
 80137f2:	b913      	cbnz	r3, 80137fa <__swsetup_r+0x16>
 80137f4:	4628      	mov	r0, r5
 80137f6:	f000 ff3b 	bl	8014670 <__sinit>
 80137fa:	4b2e      	ldr	r3, [pc, #184]	; (80138b4 <__swsetup_r+0xd0>)
 80137fc:	429c      	cmp	r4, r3
 80137fe:	d10f      	bne.n	8013820 <__swsetup_r+0x3c>
 8013800:	686c      	ldr	r4, [r5, #4]
 8013802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013806:	b29a      	uxth	r2, r3
 8013808:	0715      	lsls	r5, r2, #28
 801380a:	d42c      	bmi.n	8013866 <__swsetup_r+0x82>
 801380c:	06d0      	lsls	r0, r2, #27
 801380e:	d411      	bmi.n	8013834 <__swsetup_r+0x50>
 8013810:	2209      	movs	r2, #9
 8013812:	6032      	str	r2, [r6, #0]
 8013814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013818:	81a3      	strh	r3, [r4, #12]
 801381a:	f04f 30ff 	mov.w	r0, #4294967295
 801381e:	e03e      	b.n	801389e <__swsetup_r+0xba>
 8013820:	4b25      	ldr	r3, [pc, #148]	; (80138b8 <__swsetup_r+0xd4>)
 8013822:	429c      	cmp	r4, r3
 8013824:	d101      	bne.n	801382a <__swsetup_r+0x46>
 8013826:	68ac      	ldr	r4, [r5, #8]
 8013828:	e7eb      	b.n	8013802 <__swsetup_r+0x1e>
 801382a:	4b24      	ldr	r3, [pc, #144]	; (80138bc <__swsetup_r+0xd8>)
 801382c:	429c      	cmp	r4, r3
 801382e:	bf08      	it	eq
 8013830:	68ec      	ldreq	r4, [r5, #12]
 8013832:	e7e6      	b.n	8013802 <__swsetup_r+0x1e>
 8013834:	0751      	lsls	r1, r2, #29
 8013836:	d512      	bpl.n	801385e <__swsetup_r+0x7a>
 8013838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801383a:	b141      	cbz	r1, 801384e <__swsetup_r+0x6a>
 801383c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013840:	4299      	cmp	r1, r3
 8013842:	d002      	beq.n	801384a <__swsetup_r+0x66>
 8013844:	4630      	mov	r0, r6
 8013846:	f7fe f92b 	bl	8011aa0 <_free_r>
 801384a:	2300      	movs	r3, #0
 801384c:	6363      	str	r3, [r4, #52]	; 0x34
 801384e:	89a3      	ldrh	r3, [r4, #12]
 8013850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013854:	81a3      	strh	r3, [r4, #12]
 8013856:	2300      	movs	r3, #0
 8013858:	6063      	str	r3, [r4, #4]
 801385a:	6923      	ldr	r3, [r4, #16]
 801385c:	6023      	str	r3, [r4, #0]
 801385e:	89a3      	ldrh	r3, [r4, #12]
 8013860:	f043 0308 	orr.w	r3, r3, #8
 8013864:	81a3      	strh	r3, [r4, #12]
 8013866:	6923      	ldr	r3, [r4, #16]
 8013868:	b94b      	cbnz	r3, 801387e <__swsetup_r+0x9a>
 801386a:	89a3      	ldrh	r3, [r4, #12]
 801386c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013874:	d003      	beq.n	801387e <__swsetup_r+0x9a>
 8013876:	4621      	mov	r1, r4
 8013878:	4630      	mov	r0, r6
 801387a:	f001 fb01 	bl	8014e80 <__smakebuf_r>
 801387e:	89a2      	ldrh	r2, [r4, #12]
 8013880:	f012 0301 	ands.w	r3, r2, #1
 8013884:	d00c      	beq.n	80138a0 <__swsetup_r+0xbc>
 8013886:	2300      	movs	r3, #0
 8013888:	60a3      	str	r3, [r4, #8]
 801388a:	6963      	ldr	r3, [r4, #20]
 801388c:	425b      	negs	r3, r3
 801388e:	61a3      	str	r3, [r4, #24]
 8013890:	6923      	ldr	r3, [r4, #16]
 8013892:	b953      	cbnz	r3, 80138aa <__swsetup_r+0xc6>
 8013894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013898:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801389c:	d1ba      	bne.n	8013814 <__swsetup_r+0x30>
 801389e:	bd70      	pop	{r4, r5, r6, pc}
 80138a0:	0792      	lsls	r2, r2, #30
 80138a2:	bf58      	it	pl
 80138a4:	6963      	ldrpl	r3, [r4, #20]
 80138a6:	60a3      	str	r3, [r4, #8]
 80138a8:	e7f2      	b.n	8013890 <__swsetup_r+0xac>
 80138aa:	2000      	movs	r0, #0
 80138ac:	e7f7      	b.n	801389e <__swsetup_r+0xba>
 80138ae:	bf00      	nop
 80138b0:	20000438 	.word	0x20000438
 80138b4:	08017100 	.word	0x08017100
 80138b8:	08017120 	.word	0x08017120
 80138bc:	080170e0 	.word	0x080170e0

080138c0 <_close_r>:
 80138c0:	b538      	push	{r3, r4, r5, lr}
 80138c2:	4c06      	ldr	r4, [pc, #24]	; (80138dc <_close_r+0x1c>)
 80138c4:	2300      	movs	r3, #0
 80138c6:	4605      	mov	r5, r0
 80138c8:	4608      	mov	r0, r1
 80138ca:	6023      	str	r3, [r4, #0]
 80138cc:	f002 fe54 	bl	8016578 <_close>
 80138d0:	1c43      	adds	r3, r0, #1
 80138d2:	d102      	bne.n	80138da <_close_r+0x1a>
 80138d4:	6823      	ldr	r3, [r4, #0]
 80138d6:	b103      	cbz	r3, 80138da <_close_r+0x1a>
 80138d8:	602b      	str	r3, [r5, #0]
 80138da:	bd38      	pop	{r3, r4, r5, pc}
 80138dc:	2000eaa4 	.word	0x2000eaa4

080138e0 <quorem>:
 80138e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e4:	6903      	ldr	r3, [r0, #16]
 80138e6:	690c      	ldr	r4, [r1, #16]
 80138e8:	42a3      	cmp	r3, r4
 80138ea:	4680      	mov	r8, r0
 80138ec:	f2c0 8082 	blt.w	80139f4 <quorem+0x114>
 80138f0:	3c01      	subs	r4, #1
 80138f2:	f101 0714 	add.w	r7, r1, #20
 80138f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80138fa:	f100 0614 	add.w	r6, r0, #20
 80138fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013902:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013906:	eb06 030c 	add.w	r3, r6, ip
 801390a:	3501      	adds	r5, #1
 801390c:	eb07 090c 	add.w	r9, r7, ip
 8013910:	9301      	str	r3, [sp, #4]
 8013912:	fbb0 f5f5 	udiv	r5, r0, r5
 8013916:	b395      	cbz	r5, 801397e <quorem+0x9e>
 8013918:	f04f 0a00 	mov.w	sl, #0
 801391c:	4638      	mov	r0, r7
 801391e:	46b6      	mov	lr, r6
 8013920:	46d3      	mov	fp, sl
 8013922:	f850 2b04 	ldr.w	r2, [r0], #4
 8013926:	b293      	uxth	r3, r2
 8013928:	fb05 a303 	mla	r3, r5, r3, sl
 801392c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013930:	b29b      	uxth	r3, r3
 8013932:	ebab 0303 	sub.w	r3, fp, r3
 8013936:	0c12      	lsrs	r2, r2, #16
 8013938:	f8de b000 	ldr.w	fp, [lr]
 801393c:	fb05 a202 	mla	r2, r5, r2, sl
 8013940:	fa13 f38b 	uxtah	r3, r3, fp
 8013944:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013948:	fa1f fb82 	uxth.w	fp, r2
 801394c:	f8de 2000 	ldr.w	r2, [lr]
 8013950:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013958:	b29b      	uxth	r3, r3
 801395a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801395e:	4581      	cmp	r9, r0
 8013960:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013964:	f84e 3b04 	str.w	r3, [lr], #4
 8013968:	d2db      	bcs.n	8013922 <quorem+0x42>
 801396a:	f856 300c 	ldr.w	r3, [r6, ip]
 801396e:	b933      	cbnz	r3, 801397e <quorem+0x9e>
 8013970:	9b01      	ldr	r3, [sp, #4]
 8013972:	3b04      	subs	r3, #4
 8013974:	429e      	cmp	r6, r3
 8013976:	461a      	mov	r2, r3
 8013978:	d330      	bcc.n	80139dc <quorem+0xfc>
 801397a:	f8c8 4010 	str.w	r4, [r8, #16]
 801397e:	4640      	mov	r0, r8
 8013980:	f001 fd26 	bl	80153d0 <__mcmp>
 8013984:	2800      	cmp	r0, #0
 8013986:	db25      	blt.n	80139d4 <quorem+0xf4>
 8013988:	3501      	adds	r5, #1
 801398a:	4630      	mov	r0, r6
 801398c:	f04f 0c00 	mov.w	ip, #0
 8013990:	f857 2b04 	ldr.w	r2, [r7], #4
 8013994:	f8d0 e000 	ldr.w	lr, [r0]
 8013998:	b293      	uxth	r3, r2
 801399a:	ebac 0303 	sub.w	r3, ip, r3
 801399e:	0c12      	lsrs	r2, r2, #16
 80139a0:	fa13 f38e 	uxtah	r3, r3, lr
 80139a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80139a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80139b2:	45b9      	cmp	r9, r7
 80139b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80139b8:	f840 3b04 	str.w	r3, [r0], #4
 80139bc:	d2e8      	bcs.n	8013990 <quorem+0xb0>
 80139be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80139c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80139c6:	b92a      	cbnz	r2, 80139d4 <quorem+0xf4>
 80139c8:	3b04      	subs	r3, #4
 80139ca:	429e      	cmp	r6, r3
 80139cc:	461a      	mov	r2, r3
 80139ce:	d30b      	bcc.n	80139e8 <quorem+0x108>
 80139d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80139d4:	4628      	mov	r0, r5
 80139d6:	b003      	add	sp, #12
 80139d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139dc:	6812      	ldr	r2, [r2, #0]
 80139de:	3b04      	subs	r3, #4
 80139e0:	2a00      	cmp	r2, #0
 80139e2:	d1ca      	bne.n	801397a <quorem+0x9a>
 80139e4:	3c01      	subs	r4, #1
 80139e6:	e7c5      	b.n	8013974 <quorem+0x94>
 80139e8:	6812      	ldr	r2, [r2, #0]
 80139ea:	3b04      	subs	r3, #4
 80139ec:	2a00      	cmp	r2, #0
 80139ee:	d1ef      	bne.n	80139d0 <quorem+0xf0>
 80139f0:	3c01      	subs	r4, #1
 80139f2:	e7ea      	b.n	80139ca <quorem+0xea>
 80139f4:	2000      	movs	r0, #0
 80139f6:	e7ee      	b.n	80139d6 <quorem+0xf6>

080139f8 <_dtoa_r>:
 80139f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139fc:	ec57 6b10 	vmov	r6, r7, d0
 8013a00:	b095      	sub	sp, #84	; 0x54
 8013a02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013a04:	9108      	str	r1, [sp, #32]
 8013a06:	4604      	mov	r4, r0
 8013a08:	920a      	str	r2, [sp, #40]	; 0x28
 8013a0a:	9311      	str	r3, [sp, #68]	; 0x44
 8013a0c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8013a10:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013a14:	b93d      	cbnz	r5, 8013a26 <_dtoa_r+0x2e>
 8013a16:	2010      	movs	r0, #16
 8013a18:	f7fe f818 	bl	8011a4c <malloc>
 8013a1c:	6260      	str	r0, [r4, #36]	; 0x24
 8013a1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013a22:	6005      	str	r5, [r0, #0]
 8013a24:	60c5      	str	r5, [r0, #12]
 8013a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a28:	6819      	ldr	r1, [r3, #0]
 8013a2a:	b151      	cbz	r1, 8013a42 <_dtoa_r+0x4a>
 8013a2c:	685a      	ldr	r2, [r3, #4]
 8013a2e:	604a      	str	r2, [r1, #4]
 8013a30:	2301      	movs	r3, #1
 8013a32:	4093      	lsls	r3, r2
 8013a34:	608b      	str	r3, [r1, #8]
 8013a36:	4620      	mov	r0, r4
 8013a38:	f001 faaa 	bl	8014f90 <_Bfree>
 8013a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a3e:	2200      	movs	r2, #0
 8013a40:	601a      	str	r2, [r3, #0]
 8013a42:	1e3b      	subs	r3, r7, #0
 8013a44:	bfb9      	ittee	lt
 8013a46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013a4a:	9303      	strlt	r3, [sp, #12]
 8013a4c:	2300      	movge	r3, #0
 8013a4e:	f8c8 3000 	strge.w	r3, [r8]
 8013a52:	9d03      	ldr	r5, [sp, #12]
 8013a54:	4bac      	ldr	r3, [pc, #688]	; (8013d08 <_dtoa_r+0x310>)
 8013a56:	bfbc      	itt	lt
 8013a58:	2201      	movlt	r2, #1
 8013a5a:	f8c8 2000 	strlt.w	r2, [r8]
 8013a5e:	43ab      	bics	r3, r5
 8013a60:	d11b      	bne.n	8013a9a <_dtoa_r+0xa2>
 8013a62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a64:	f242 730f 	movw	r3, #9999	; 0x270f
 8013a68:	6013      	str	r3, [r2, #0]
 8013a6a:	9b02      	ldr	r3, [sp, #8]
 8013a6c:	b923      	cbnz	r3, 8013a78 <_dtoa_r+0x80>
 8013a6e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013a72:	2d00      	cmp	r5, #0
 8013a74:	f000 84dd 	beq.w	8014432 <_dtoa_r+0xa3a>
 8013a78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013a7a:	b953      	cbnz	r3, 8013a92 <_dtoa_r+0x9a>
 8013a7c:	4ba3      	ldr	r3, [pc, #652]	; (8013d0c <_dtoa_r+0x314>)
 8013a7e:	e020      	b.n	8013ac2 <_dtoa_r+0xca>
 8013a80:	4ba3      	ldr	r3, [pc, #652]	; (8013d10 <_dtoa_r+0x318>)
 8013a82:	9304      	str	r3, [sp, #16]
 8013a84:	3308      	adds	r3, #8
 8013a86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013a88:	6013      	str	r3, [r2, #0]
 8013a8a:	9804      	ldr	r0, [sp, #16]
 8013a8c:	b015      	add	sp, #84	; 0x54
 8013a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a92:	4b9e      	ldr	r3, [pc, #632]	; (8013d0c <_dtoa_r+0x314>)
 8013a94:	9304      	str	r3, [sp, #16]
 8013a96:	3303      	adds	r3, #3
 8013a98:	e7f5      	b.n	8013a86 <_dtoa_r+0x8e>
 8013a9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013aaa:	d10c      	bne.n	8013ac6 <_dtoa_r+0xce>
 8013aac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013aae:	2301      	movs	r3, #1
 8013ab0:	6013      	str	r3, [r2, #0]
 8013ab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	f000 84b9 	beq.w	801442c <_dtoa_r+0xa34>
 8013aba:	4b96      	ldr	r3, [pc, #600]	; (8013d14 <_dtoa_r+0x31c>)
 8013abc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013abe:	6013      	str	r3, [r2, #0]
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	9304      	str	r3, [sp, #16]
 8013ac4:	e7e1      	b.n	8013a8a <_dtoa_r+0x92>
 8013ac6:	a913      	add	r1, sp, #76	; 0x4c
 8013ac8:	aa12      	add	r2, sp, #72	; 0x48
 8013aca:	ed9d 0b04 	vldr	d0, [sp, #16]
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f001 fd6c 	bl	80155ac <__d2b>
 8013ad4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8013ad8:	9001      	str	r0, [sp, #4]
 8013ada:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013adc:	2e00      	cmp	r6, #0
 8013ade:	d046      	beq.n	8013b6e <_dtoa_r+0x176>
 8013ae0:	9805      	ldr	r0, [sp, #20]
 8013ae2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8013ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013aea:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8013aee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013af2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8013af6:	2700      	movs	r7, #0
 8013af8:	ee07 aa90 	vmov	s15, sl
 8013afc:	ec43 2b16 	vmov	d6, r2, r3
 8013b00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013b04:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8013cf0 <_dtoa_r+0x2f8>
 8013b08:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013b0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013b10:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8013cf8 <_dtoa_r+0x300>
 8013b14:	eea7 6b04 	vfma.f64	d6, d7, d4
 8013b18:	eeb0 7b46 	vmov.f64	d7, d6
 8013b1c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8013d00 <_dtoa_r+0x308>
 8013b20:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013b24:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013b28:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b30:	ee16 ba90 	vmov	fp, s13
 8013b34:	d508      	bpl.n	8013b48 <_dtoa_r+0x150>
 8013b36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013b3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8013b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b42:	bf18      	it	ne
 8013b44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013b48:	f1bb 0f16 	cmp.w	fp, #22
 8013b4c:	d834      	bhi.n	8013bb8 <_dtoa_r+0x1c0>
 8013b4e:	4b72      	ldr	r3, [pc, #456]	; (8013d18 <_dtoa_r+0x320>)
 8013b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013b54:	ed93 7b00 	vldr	d7, [r3]
 8013b58:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013b5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b64:	dd01      	ble.n	8013b6a <_dtoa_r+0x172>
 8013b66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	e025      	b.n	8013bba <_dtoa_r+0x1c2>
 8013b6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013b70:	eb01 0a03 	add.w	sl, r1, r3
 8013b74:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8013b78:	2b20      	cmp	r3, #32
 8013b7a:	dd17      	ble.n	8013bac <_dtoa_r+0x1b4>
 8013b7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8013b80:	9a02      	ldr	r2, [sp, #8]
 8013b82:	409d      	lsls	r5, r3
 8013b84:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8013b88:	fa22 f303 	lsr.w	r3, r2, r3
 8013b8c:	432b      	orrs	r3, r5
 8013b8e:	ee07 3a90 	vmov	s15, r3
 8013b92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013b9e:	9805      	ldr	r0, [sp, #20]
 8013ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ba4:	2701      	movs	r7, #1
 8013ba6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8013baa:	e7a5      	b.n	8013af8 <_dtoa_r+0x100>
 8013bac:	9a02      	ldr	r2, [sp, #8]
 8013bae:	f1c3 0320 	rsb	r3, r3, #32
 8013bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8013bb6:	e7ea      	b.n	8013b8e <_dtoa_r+0x196>
 8013bb8:	2301      	movs	r3, #1
 8013bba:	eba1 0a0a 	sub.w	sl, r1, sl
 8013bbe:	9310      	str	r3, [sp, #64]	; 0x40
 8013bc0:	f1ba 0301 	subs.w	r3, sl, #1
 8013bc4:	9307      	str	r3, [sp, #28]
 8013bc6:	bf43      	ittte	mi
 8013bc8:	2300      	movmi	r3, #0
 8013bca:	f1ca 0a01 	rsbmi	sl, sl, #1
 8013bce:	9307      	strmi	r3, [sp, #28]
 8013bd0:	f04f 0a00 	movpl.w	sl, #0
 8013bd4:	f1bb 0f00 	cmp.w	fp, #0
 8013bd8:	db19      	blt.n	8013c0e <_dtoa_r+0x216>
 8013bda:	9b07      	ldr	r3, [sp, #28]
 8013bdc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013be0:	445b      	add	r3, fp
 8013be2:	9307      	str	r3, [sp, #28]
 8013be4:	f04f 0800 	mov.w	r8, #0
 8013be8:	9b08      	ldr	r3, [sp, #32]
 8013bea:	2b09      	cmp	r3, #9
 8013bec:	d866      	bhi.n	8013cbc <_dtoa_r+0x2c4>
 8013bee:	2b05      	cmp	r3, #5
 8013bf0:	bfc4      	itt	gt
 8013bf2:	3b04      	subgt	r3, #4
 8013bf4:	9308      	strgt	r3, [sp, #32]
 8013bf6:	9b08      	ldr	r3, [sp, #32]
 8013bf8:	f1a3 0302 	sub.w	r3, r3, #2
 8013bfc:	bfcc      	ite	gt
 8013bfe:	2500      	movgt	r5, #0
 8013c00:	2501      	movle	r5, #1
 8013c02:	2b03      	cmp	r3, #3
 8013c04:	d866      	bhi.n	8013cd4 <_dtoa_r+0x2dc>
 8013c06:	e8df f003 	tbb	[pc, r3]
 8013c0a:	5755      	.short	0x5755
 8013c0c:	4909      	.short	0x4909
 8013c0e:	2300      	movs	r3, #0
 8013c10:	ebaa 0a0b 	sub.w	sl, sl, fp
 8013c14:	f1cb 0800 	rsb	r8, fp, #0
 8013c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c1a:	e7e5      	b.n	8013be8 <_dtoa_r+0x1f0>
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8013c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	dd59      	ble.n	8013cda <_dtoa_r+0x2e2>
 8013c26:	9306      	str	r3, [sp, #24]
 8013c28:	4699      	mov	r9, r3
 8013c2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	6072      	str	r2, [r6, #4]
 8013c30:	2204      	movs	r2, #4
 8013c32:	f102 0014 	add.w	r0, r2, #20
 8013c36:	4298      	cmp	r0, r3
 8013c38:	6871      	ldr	r1, [r6, #4]
 8013c3a:	d953      	bls.n	8013ce4 <_dtoa_r+0x2ec>
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f001 f973 	bl	8014f28 <_Balloc>
 8013c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c44:	6030      	str	r0, [r6, #0]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	9304      	str	r3, [sp, #16]
 8013c4a:	f1b9 0f0e 	cmp.w	r9, #14
 8013c4e:	f200 80c2 	bhi.w	8013dd6 <_dtoa_r+0x3de>
 8013c52:	2d00      	cmp	r5, #0
 8013c54:	f000 80bf 	beq.w	8013dd6 <_dtoa_r+0x3de>
 8013c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c5c:	f1bb 0f00 	cmp.w	fp, #0
 8013c60:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8013c64:	f340 80e6 	ble.w	8013e34 <_dtoa_r+0x43c>
 8013c68:	4a2b      	ldr	r2, [pc, #172]	; (8013d18 <_dtoa_r+0x320>)
 8013c6a:	f00b 030f 	and.w	r3, fp, #15
 8013c6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013c72:	ed93 7b00 	vldr	d7, [r3]
 8013c76:	ea4f 132b 	mov.w	r3, fp, asr #4
 8013c7a:	06da      	lsls	r2, r3, #27
 8013c7c:	f140 80d8 	bpl.w	8013e30 <_dtoa_r+0x438>
 8013c80:	4a26      	ldr	r2, [pc, #152]	; (8013d1c <_dtoa_r+0x324>)
 8013c82:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8013c86:	ed92 6b08 	vldr	d6, [r2, #32]
 8013c8a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8013c8e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013c92:	f003 030f 	and.w	r3, r3, #15
 8013c96:	2203      	movs	r2, #3
 8013c98:	4920      	ldr	r1, [pc, #128]	; (8013d1c <_dtoa_r+0x324>)
 8013c9a:	e04a      	b.n	8013d32 <_dtoa_r+0x33a>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8013ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ca2:	445b      	add	r3, fp
 8013ca4:	f103 0901 	add.w	r9, r3, #1
 8013ca8:	9306      	str	r3, [sp, #24]
 8013caa:	464b      	mov	r3, r9
 8013cac:	2b01      	cmp	r3, #1
 8013cae:	bfb8      	it	lt
 8013cb0:	2301      	movlt	r3, #1
 8013cb2:	e7ba      	b.n	8013c2a <_dtoa_r+0x232>
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	e7b2      	b.n	8013c1e <_dtoa_r+0x226>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	e7f0      	b.n	8013c9e <_dtoa_r+0x2a6>
 8013cbc:	2501      	movs	r5, #1
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8013cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8013cc8:	9306      	str	r3, [sp, #24]
 8013cca:	4699      	mov	r9, r3
 8013ccc:	2200      	movs	r2, #0
 8013cce:	2312      	movs	r3, #18
 8013cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8013cd2:	e7aa      	b.n	8013c2a <_dtoa_r+0x232>
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8013cd8:	e7f4      	b.n	8013cc4 <_dtoa_r+0x2cc>
 8013cda:	2301      	movs	r3, #1
 8013cdc:	9306      	str	r3, [sp, #24]
 8013cde:	4699      	mov	r9, r3
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	e7f5      	b.n	8013cd0 <_dtoa_r+0x2d8>
 8013ce4:	3101      	adds	r1, #1
 8013ce6:	6071      	str	r1, [r6, #4]
 8013ce8:	0052      	lsls	r2, r2, #1
 8013cea:	e7a2      	b.n	8013c32 <_dtoa_r+0x23a>
 8013cec:	f3af 8000 	nop.w
 8013cf0:	636f4361 	.word	0x636f4361
 8013cf4:	3fd287a7 	.word	0x3fd287a7
 8013cf8:	8b60c8b3 	.word	0x8b60c8b3
 8013cfc:	3fc68a28 	.word	0x3fc68a28
 8013d00:	509f79fb 	.word	0x509f79fb
 8013d04:	3fd34413 	.word	0x3fd34413
 8013d08:	7ff00000 	.word	0x7ff00000
 8013d0c:	080170d9 	.word	0x080170d9
 8013d10:	080170d0 	.word	0x080170d0
 8013d14:	08017274 	.word	0x08017274
 8013d18:	08017178 	.word	0x08017178
 8013d1c:	08017150 	.word	0x08017150
 8013d20:	07de      	lsls	r6, r3, #31
 8013d22:	d504      	bpl.n	8013d2e <_dtoa_r+0x336>
 8013d24:	ed91 6b00 	vldr	d6, [r1]
 8013d28:	3201      	adds	r2, #1
 8013d2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013d2e:	105b      	asrs	r3, r3, #1
 8013d30:	3108      	adds	r1, #8
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d1f4      	bne.n	8013d20 <_dtoa_r+0x328>
 8013d36:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013d3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013d3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013d42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f000 80a7 	beq.w	8013e98 <_dtoa_r+0x4a0>
 8013d4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013d4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5a:	f140 809d 	bpl.w	8013e98 <_dtoa_r+0x4a0>
 8013d5e:	f1b9 0f00 	cmp.w	r9, #0
 8013d62:	f000 8099 	beq.w	8013e98 <_dtoa_r+0x4a0>
 8013d66:	9b06      	ldr	r3, [sp, #24]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	dd30      	ble.n	8013dce <_dtoa_r+0x3d6>
 8013d6c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013d70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013d74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013d78:	9d06      	ldr	r5, [sp, #24]
 8013d7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013d7e:	3201      	adds	r2, #1
 8013d80:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013d84:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013d88:	ee07 2a90 	vmov	s15, r2
 8013d8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013d90:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013d94:	ed8d 5b02 	vstr	d5, [sp, #8]
 8013d98:	9a03      	ldr	r2, [sp, #12]
 8013d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d9e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8013da2:	2d00      	cmp	r5, #0
 8013da4:	d17b      	bne.n	8013e9e <_dtoa_r+0x4a6>
 8013da6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013daa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013dae:	ec41 0b17 	vmov	d7, r0, r1
 8013db2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dba:	f300 8253 	bgt.w	8014264 <_dtoa_r+0x86c>
 8013dbe:	eeb1 7b47 	vneg.f64	d7, d7
 8013dc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dca:	f100 8249 	bmi.w	8014260 <_dtoa_r+0x868>
 8013dce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013dd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	f2c0 8119 	blt.w	8014010 <_dtoa_r+0x618>
 8013dde:	f1bb 0f0e 	cmp.w	fp, #14
 8013de2:	f300 8115 	bgt.w	8014010 <_dtoa_r+0x618>
 8013de6:	4bc3      	ldr	r3, [pc, #780]	; (80140f4 <_dtoa_r+0x6fc>)
 8013de8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013dec:	ed93 6b00 	vldr	d6, [r3]
 8013df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	f280 80ba 	bge.w	8013f6c <_dtoa_r+0x574>
 8013df8:	f1b9 0f00 	cmp.w	r9, #0
 8013dfc:	f300 80b6 	bgt.w	8013f6c <_dtoa_r+0x574>
 8013e00:	f040 822d 	bne.w	801425e <_dtoa_r+0x866>
 8013e04:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013e08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013e0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013e10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e18:	464d      	mov	r5, r9
 8013e1a:	464f      	mov	r7, r9
 8013e1c:	f280 8204 	bge.w	8014228 <_dtoa_r+0x830>
 8013e20:	9b04      	ldr	r3, [sp, #16]
 8013e22:	9a04      	ldr	r2, [sp, #16]
 8013e24:	1c5e      	adds	r6, r3, #1
 8013e26:	2331      	movs	r3, #49	; 0x31
 8013e28:	7013      	strb	r3, [r2, #0]
 8013e2a:	f10b 0b01 	add.w	fp, fp, #1
 8013e2e:	e1ff      	b.n	8014230 <_dtoa_r+0x838>
 8013e30:	2202      	movs	r2, #2
 8013e32:	e731      	b.n	8013c98 <_dtoa_r+0x2a0>
 8013e34:	d02e      	beq.n	8013e94 <_dtoa_r+0x49c>
 8013e36:	f1cb 0300 	rsb	r3, fp, #0
 8013e3a:	4aae      	ldr	r2, [pc, #696]	; (80140f4 <_dtoa_r+0x6fc>)
 8013e3c:	f003 010f 	and.w	r1, r3, #15
 8013e40:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013e44:	ed92 7b00 	vldr	d7, [r2]
 8013e48:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8013e4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013e50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013e54:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8013e58:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013e5c:	49a6      	ldr	r1, [pc, #664]	; (80140f8 <_dtoa_r+0x700>)
 8013e5e:	111b      	asrs	r3, r3, #4
 8013e60:	2000      	movs	r0, #0
 8013e62:	2202      	movs	r2, #2
 8013e64:	b93b      	cbnz	r3, 8013e76 <_dtoa_r+0x47e>
 8013e66:	2800      	cmp	r0, #0
 8013e68:	f43f af6b 	beq.w	8013d42 <_dtoa_r+0x34a>
 8013e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e74:	e765      	b.n	8013d42 <_dtoa_r+0x34a>
 8013e76:	07dd      	lsls	r5, r3, #31
 8013e78:	d509      	bpl.n	8013e8e <_dtoa_r+0x496>
 8013e7a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8013e7e:	ed91 7b00 	vldr	d7, [r1]
 8013e82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013e86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013e8a:	3201      	adds	r2, #1
 8013e8c:	2001      	movs	r0, #1
 8013e8e:	105b      	asrs	r3, r3, #1
 8013e90:	3108      	adds	r1, #8
 8013e92:	e7e7      	b.n	8013e64 <_dtoa_r+0x46c>
 8013e94:	2202      	movs	r2, #2
 8013e96:	e754      	b.n	8013d42 <_dtoa_r+0x34a>
 8013e98:	465b      	mov	r3, fp
 8013e9a:	464d      	mov	r5, r9
 8013e9c:	e770      	b.n	8013d80 <_dtoa_r+0x388>
 8013e9e:	4a95      	ldr	r2, [pc, #596]	; (80140f4 <_dtoa_r+0x6fc>)
 8013ea0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8013ea4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013eaa:	ec41 0b17 	vmov	d7, r0, r1
 8013eae:	b35a      	cbz	r2, 8013f08 <_dtoa_r+0x510>
 8013eb0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013eb4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013eb8:	9e04      	ldr	r6, [sp, #16]
 8013eba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013ebe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013ec2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013ec6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013eca:	ee14 2a90 	vmov	r2, s9
 8013ece:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013ed2:	3230      	adds	r2, #48	; 0x30
 8013ed4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013ed8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee0:	f806 2b01 	strb.w	r2, [r6], #1
 8013ee4:	d43b      	bmi.n	8013f5e <_dtoa_r+0x566>
 8013ee6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013eea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef2:	d472      	bmi.n	8013fda <_dtoa_r+0x5e2>
 8013ef4:	9a04      	ldr	r2, [sp, #16]
 8013ef6:	1ab2      	subs	r2, r6, r2
 8013ef8:	4295      	cmp	r5, r2
 8013efa:	f77f af68 	ble.w	8013dce <_dtoa_r+0x3d6>
 8013efe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013f02:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013f06:	e7de      	b.n	8013ec6 <_dtoa_r+0x4ce>
 8013f08:	9a04      	ldr	r2, [sp, #16]
 8013f0a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8013f0e:	1956      	adds	r6, r2, r5
 8013f10:	4611      	mov	r1, r2
 8013f12:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013f16:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013f1a:	ee14 2a90 	vmov	r2, s9
 8013f1e:	3230      	adds	r2, #48	; 0x30
 8013f20:	f801 2b01 	strb.w	r2, [r1], #1
 8013f24:	42b1      	cmp	r1, r6
 8013f26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013f2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013f2e:	d11a      	bne.n	8013f66 <_dtoa_r+0x56e>
 8013f30:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013f34:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013f38:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f40:	dc4b      	bgt.n	8013fda <_dtoa_r+0x5e2>
 8013f42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013f46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4e:	f57f af3e 	bpl.w	8013dce <_dtoa_r+0x3d6>
 8013f52:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013f56:	2a30      	cmp	r2, #48	; 0x30
 8013f58:	f106 31ff 	add.w	r1, r6, #4294967295
 8013f5c:	d001      	beq.n	8013f62 <_dtoa_r+0x56a>
 8013f5e:	469b      	mov	fp, r3
 8013f60:	e02a      	b.n	8013fb8 <_dtoa_r+0x5c0>
 8013f62:	460e      	mov	r6, r1
 8013f64:	e7f5      	b.n	8013f52 <_dtoa_r+0x55a>
 8013f66:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013f6a:	e7d4      	b.n	8013f16 <_dtoa_r+0x51e>
 8013f6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013f70:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013f74:	9e04      	ldr	r6, [sp, #16]
 8013f76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013f7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013f7e:	ee15 3a10 	vmov	r3, s10
 8013f82:	3330      	adds	r3, #48	; 0x30
 8013f84:	f806 3b01 	strb.w	r3, [r6], #1
 8013f88:	9b04      	ldr	r3, [sp, #16]
 8013f8a:	1af3      	subs	r3, r6, r3
 8013f8c:	4599      	cmp	r9, r3
 8013f8e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013f92:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013f96:	d133      	bne.n	8014000 <_dtoa_r+0x608>
 8013f98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013f9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa4:	dc18      	bgt.n	8013fd8 <_dtoa_r+0x5e0>
 8013fa6:	eeb4 7b46 	vcmp.f64	d7, d6
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	d103      	bne.n	8013fb8 <_dtoa_r+0x5c0>
 8013fb0:	ee15 3a10 	vmov	r3, s10
 8013fb4:	07db      	lsls	r3, r3, #31
 8013fb6:	d40f      	bmi.n	8013fd8 <_dtoa_r+0x5e0>
 8013fb8:	9901      	ldr	r1, [sp, #4]
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f000 ffe8 	bl	8014f90 <_Bfree>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013fc4:	7033      	strb	r3, [r6, #0]
 8013fc6:	f10b 0301 	add.w	r3, fp, #1
 8013fca:	6013      	str	r3, [r2, #0]
 8013fcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f43f ad5b 	beq.w	8013a8a <_dtoa_r+0x92>
 8013fd4:	601e      	str	r6, [r3, #0]
 8013fd6:	e558      	b.n	8013a8a <_dtoa_r+0x92>
 8013fd8:	465b      	mov	r3, fp
 8013fda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013fde:	2939      	cmp	r1, #57	; 0x39
 8013fe0:	f106 32ff 	add.w	r2, r6, #4294967295
 8013fe4:	d106      	bne.n	8013ff4 <_dtoa_r+0x5fc>
 8013fe6:	9904      	ldr	r1, [sp, #16]
 8013fe8:	4291      	cmp	r1, r2
 8013fea:	d107      	bne.n	8013ffc <_dtoa_r+0x604>
 8013fec:	2230      	movs	r2, #48	; 0x30
 8013fee:	700a      	strb	r2, [r1, #0]
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	460a      	mov	r2, r1
 8013ff4:	7811      	ldrb	r1, [r2, #0]
 8013ff6:	3101      	adds	r1, #1
 8013ff8:	7011      	strb	r1, [r2, #0]
 8013ffa:	e7b0      	b.n	8013f5e <_dtoa_r+0x566>
 8013ffc:	4616      	mov	r6, r2
 8013ffe:	e7ec      	b.n	8013fda <_dtoa_r+0x5e2>
 8014000:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014004:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801400c:	d1b3      	bne.n	8013f76 <_dtoa_r+0x57e>
 801400e:	e7d3      	b.n	8013fb8 <_dtoa_r+0x5c0>
 8014010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014012:	2a00      	cmp	r2, #0
 8014014:	f000 808d 	beq.w	8014132 <_dtoa_r+0x73a>
 8014018:	9a08      	ldr	r2, [sp, #32]
 801401a:	2a01      	cmp	r2, #1
 801401c:	dc72      	bgt.n	8014104 <_dtoa_r+0x70c>
 801401e:	2f00      	cmp	r7, #0
 8014020:	d06c      	beq.n	80140fc <_dtoa_r+0x704>
 8014022:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014026:	4645      	mov	r5, r8
 8014028:	4656      	mov	r6, sl
 801402a:	9a07      	ldr	r2, [sp, #28]
 801402c:	2101      	movs	r1, #1
 801402e:	441a      	add	r2, r3
 8014030:	4620      	mov	r0, r4
 8014032:	449a      	add	sl, r3
 8014034:	9207      	str	r2, [sp, #28]
 8014036:	f001 f889 	bl	801514c <__i2b>
 801403a:	4607      	mov	r7, r0
 801403c:	2e00      	cmp	r6, #0
 801403e:	dd0b      	ble.n	8014058 <_dtoa_r+0x660>
 8014040:	9b07      	ldr	r3, [sp, #28]
 8014042:	2b00      	cmp	r3, #0
 8014044:	dd08      	ble.n	8014058 <_dtoa_r+0x660>
 8014046:	42b3      	cmp	r3, r6
 8014048:	9a07      	ldr	r2, [sp, #28]
 801404a:	bfa8      	it	ge
 801404c:	4633      	movge	r3, r6
 801404e:	ebaa 0a03 	sub.w	sl, sl, r3
 8014052:	1af6      	subs	r6, r6, r3
 8014054:	1ad3      	subs	r3, r2, r3
 8014056:	9307      	str	r3, [sp, #28]
 8014058:	f1b8 0f00 	cmp.w	r8, #0
 801405c:	d01d      	beq.n	801409a <_dtoa_r+0x6a2>
 801405e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014060:	2b00      	cmp	r3, #0
 8014062:	d06a      	beq.n	801413a <_dtoa_r+0x742>
 8014064:	b18d      	cbz	r5, 801408a <_dtoa_r+0x692>
 8014066:	4639      	mov	r1, r7
 8014068:	462a      	mov	r2, r5
 801406a:	4620      	mov	r0, r4
 801406c:	f001 f90e 	bl	801528c <__pow5mult>
 8014070:	9a01      	ldr	r2, [sp, #4]
 8014072:	4601      	mov	r1, r0
 8014074:	4607      	mov	r7, r0
 8014076:	4620      	mov	r0, r4
 8014078:	f001 f871 	bl	801515e <__multiply>
 801407c:	9901      	ldr	r1, [sp, #4]
 801407e:	900c      	str	r0, [sp, #48]	; 0x30
 8014080:	4620      	mov	r0, r4
 8014082:	f000 ff85 	bl	8014f90 <_Bfree>
 8014086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014088:	9301      	str	r3, [sp, #4]
 801408a:	ebb8 0205 	subs.w	r2, r8, r5
 801408e:	d004      	beq.n	801409a <_dtoa_r+0x6a2>
 8014090:	9901      	ldr	r1, [sp, #4]
 8014092:	4620      	mov	r0, r4
 8014094:	f001 f8fa 	bl	801528c <__pow5mult>
 8014098:	9001      	str	r0, [sp, #4]
 801409a:	2101      	movs	r1, #1
 801409c:	4620      	mov	r0, r4
 801409e:	f001 f855 	bl	801514c <__i2b>
 80140a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140a4:	4605      	mov	r5, r0
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	f000 81ca 	beq.w	8014440 <_dtoa_r+0xa48>
 80140ac:	461a      	mov	r2, r3
 80140ae:	4601      	mov	r1, r0
 80140b0:	4620      	mov	r0, r4
 80140b2:	f001 f8eb 	bl	801528c <__pow5mult>
 80140b6:	9b08      	ldr	r3, [sp, #32]
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	4605      	mov	r5, r0
 80140bc:	dc44      	bgt.n	8014148 <_dtoa_r+0x750>
 80140be:	9b02      	ldr	r3, [sp, #8]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d13c      	bne.n	801413e <_dtoa_r+0x746>
 80140c4:	9b03      	ldr	r3, [sp, #12]
 80140c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d137      	bne.n	801413e <_dtoa_r+0x746>
 80140ce:	9b03      	ldr	r3, [sp, #12]
 80140d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80140d4:	0d1b      	lsrs	r3, r3, #20
 80140d6:	051b      	lsls	r3, r3, #20
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d033      	beq.n	8014144 <_dtoa_r+0x74c>
 80140dc:	9b07      	ldr	r3, [sp, #28]
 80140de:	3301      	adds	r3, #1
 80140e0:	f10a 0a01 	add.w	sl, sl, #1
 80140e4:	9307      	str	r3, [sp, #28]
 80140e6:	f04f 0801 	mov.w	r8, #1
 80140ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140ec:	bb73      	cbnz	r3, 801414c <_dtoa_r+0x754>
 80140ee:	2001      	movs	r0, #1
 80140f0:	e034      	b.n	801415c <_dtoa_r+0x764>
 80140f2:	bf00      	nop
 80140f4:	08017178 	.word	0x08017178
 80140f8:	08017150 	.word	0x08017150
 80140fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014102:	e790      	b.n	8014026 <_dtoa_r+0x62e>
 8014104:	f109 35ff 	add.w	r5, r9, #4294967295
 8014108:	45a8      	cmp	r8, r5
 801410a:	bfbf      	itttt	lt
 801410c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801410e:	eba5 0808 	sublt.w	r8, r5, r8
 8014112:	4443      	addlt	r3, r8
 8014114:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8014116:	bfb6      	itet	lt
 8014118:	46a8      	movlt	r8, r5
 801411a:	eba8 0505 	subge.w	r5, r8, r5
 801411e:	2500      	movlt	r5, #0
 8014120:	f1b9 0f00 	cmp.w	r9, #0
 8014124:	bfb9      	ittee	lt
 8014126:	ebaa 0609 	sublt.w	r6, sl, r9
 801412a:	2300      	movlt	r3, #0
 801412c:	4656      	movge	r6, sl
 801412e:	464b      	movge	r3, r9
 8014130:	e77b      	b.n	801402a <_dtoa_r+0x632>
 8014132:	4645      	mov	r5, r8
 8014134:	4656      	mov	r6, sl
 8014136:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014138:	e780      	b.n	801403c <_dtoa_r+0x644>
 801413a:	4642      	mov	r2, r8
 801413c:	e7a8      	b.n	8014090 <_dtoa_r+0x698>
 801413e:	f04f 0800 	mov.w	r8, #0
 8014142:	e7d2      	b.n	80140ea <_dtoa_r+0x6f2>
 8014144:	4698      	mov	r8, r3
 8014146:	e7d0      	b.n	80140ea <_dtoa_r+0x6f2>
 8014148:	f04f 0800 	mov.w	r8, #0
 801414c:	692b      	ldr	r3, [r5, #16]
 801414e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014152:	6918      	ldr	r0, [r3, #16]
 8014154:	f000 ffac 	bl	80150b0 <__hi0bits>
 8014158:	f1c0 0020 	rsb	r0, r0, #32
 801415c:	9b07      	ldr	r3, [sp, #28]
 801415e:	4418      	add	r0, r3
 8014160:	f010 001f 	ands.w	r0, r0, #31
 8014164:	d047      	beq.n	80141f6 <_dtoa_r+0x7fe>
 8014166:	f1c0 0320 	rsb	r3, r0, #32
 801416a:	2b04      	cmp	r3, #4
 801416c:	dd3b      	ble.n	80141e6 <_dtoa_r+0x7ee>
 801416e:	9b07      	ldr	r3, [sp, #28]
 8014170:	f1c0 001c 	rsb	r0, r0, #28
 8014174:	4482      	add	sl, r0
 8014176:	4406      	add	r6, r0
 8014178:	4403      	add	r3, r0
 801417a:	9307      	str	r3, [sp, #28]
 801417c:	f1ba 0f00 	cmp.w	sl, #0
 8014180:	dd05      	ble.n	801418e <_dtoa_r+0x796>
 8014182:	4652      	mov	r2, sl
 8014184:	9901      	ldr	r1, [sp, #4]
 8014186:	4620      	mov	r0, r4
 8014188:	f001 f8ce 	bl	8015328 <__lshift>
 801418c:	9001      	str	r0, [sp, #4]
 801418e:	9b07      	ldr	r3, [sp, #28]
 8014190:	2b00      	cmp	r3, #0
 8014192:	dd05      	ble.n	80141a0 <_dtoa_r+0x7a8>
 8014194:	4629      	mov	r1, r5
 8014196:	461a      	mov	r2, r3
 8014198:	4620      	mov	r0, r4
 801419a:	f001 f8c5 	bl	8015328 <__lshift>
 801419e:	4605      	mov	r5, r0
 80141a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80141a2:	b353      	cbz	r3, 80141fa <_dtoa_r+0x802>
 80141a4:	4629      	mov	r1, r5
 80141a6:	9801      	ldr	r0, [sp, #4]
 80141a8:	f001 f912 	bl	80153d0 <__mcmp>
 80141ac:	2800      	cmp	r0, #0
 80141ae:	da24      	bge.n	80141fa <_dtoa_r+0x802>
 80141b0:	2300      	movs	r3, #0
 80141b2:	220a      	movs	r2, #10
 80141b4:	9901      	ldr	r1, [sp, #4]
 80141b6:	4620      	mov	r0, r4
 80141b8:	f000 ff01 	bl	8014fbe <__multadd>
 80141bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141be:	9001      	str	r0, [sp, #4]
 80141c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	f000 8142 	beq.w	801444e <_dtoa_r+0xa56>
 80141ca:	2300      	movs	r3, #0
 80141cc:	4639      	mov	r1, r7
 80141ce:	220a      	movs	r2, #10
 80141d0:	4620      	mov	r0, r4
 80141d2:	f000 fef4 	bl	8014fbe <__multadd>
 80141d6:	9b06      	ldr	r3, [sp, #24]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	4607      	mov	r7, r0
 80141dc:	dc4b      	bgt.n	8014276 <_dtoa_r+0x87e>
 80141de:	9b08      	ldr	r3, [sp, #32]
 80141e0:	2b02      	cmp	r3, #2
 80141e2:	dd48      	ble.n	8014276 <_dtoa_r+0x87e>
 80141e4:	e011      	b.n	801420a <_dtoa_r+0x812>
 80141e6:	d0c9      	beq.n	801417c <_dtoa_r+0x784>
 80141e8:	9a07      	ldr	r2, [sp, #28]
 80141ea:	331c      	adds	r3, #28
 80141ec:	441a      	add	r2, r3
 80141ee:	449a      	add	sl, r3
 80141f0:	441e      	add	r6, r3
 80141f2:	4613      	mov	r3, r2
 80141f4:	e7c1      	b.n	801417a <_dtoa_r+0x782>
 80141f6:	4603      	mov	r3, r0
 80141f8:	e7f6      	b.n	80141e8 <_dtoa_r+0x7f0>
 80141fa:	f1b9 0f00 	cmp.w	r9, #0
 80141fe:	dc34      	bgt.n	801426a <_dtoa_r+0x872>
 8014200:	9b08      	ldr	r3, [sp, #32]
 8014202:	2b02      	cmp	r3, #2
 8014204:	dd31      	ble.n	801426a <_dtoa_r+0x872>
 8014206:	f8cd 9018 	str.w	r9, [sp, #24]
 801420a:	9b06      	ldr	r3, [sp, #24]
 801420c:	b963      	cbnz	r3, 8014228 <_dtoa_r+0x830>
 801420e:	4629      	mov	r1, r5
 8014210:	2205      	movs	r2, #5
 8014212:	4620      	mov	r0, r4
 8014214:	f000 fed3 	bl	8014fbe <__multadd>
 8014218:	4601      	mov	r1, r0
 801421a:	4605      	mov	r5, r0
 801421c:	9801      	ldr	r0, [sp, #4]
 801421e:	f001 f8d7 	bl	80153d0 <__mcmp>
 8014222:	2800      	cmp	r0, #0
 8014224:	f73f adfc 	bgt.w	8013e20 <_dtoa_r+0x428>
 8014228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801422a:	9e04      	ldr	r6, [sp, #16]
 801422c:	ea6f 0b03 	mvn.w	fp, r3
 8014230:	f04f 0900 	mov.w	r9, #0
 8014234:	4629      	mov	r1, r5
 8014236:	4620      	mov	r0, r4
 8014238:	f000 feaa 	bl	8014f90 <_Bfree>
 801423c:	2f00      	cmp	r7, #0
 801423e:	f43f aebb 	beq.w	8013fb8 <_dtoa_r+0x5c0>
 8014242:	f1b9 0f00 	cmp.w	r9, #0
 8014246:	d005      	beq.n	8014254 <_dtoa_r+0x85c>
 8014248:	45b9      	cmp	r9, r7
 801424a:	d003      	beq.n	8014254 <_dtoa_r+0x85c>
 801424c:	4649      	mov	r1, r9
 801424e:	4620      	mov	r0, r4
 8014250:	f000 fe9e 	bl	8014f90 <_Bfree>
 8014254:	4639      	mov	r1, r7
 8014256:	4620      	mov	r0, r4
 8014258:	f000 fe9a 	bl	8014f90 <_Bfree>
 801425c:	e6ac      	b.n	8013fb8 <_dtoa_r+0x5c0>
 801425e:	2500      	movs	r5, #0
 8014260:	462f      	mov	r7, r5
 8014262:	e7e1      	b.n	8014228 <_dtoa_r+0x830>
 8014264:	469b      	mov	fp, r3
 8014266:	462f      	mov	r7, r5
 8014268:	e5da      	b.n	8013e20 <_dtoa_r+0x428>
 801426a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801426c:	f8cd 9018 	str.w	r9, [sp, #24]
 8014270:	2b00      	cmp	r3, #0
 8014272:	f000 80f3 	beq.w	801445c <_dtoa_r+0xa64>
 8014276:	2e00      	cmp	r6, #0
 8014278:	dd05      	ble.n	8014286 <_dtoa_r+0x88e>
 801427a:	4639      	mov	r1, r7
 801427c:	4632      	mov	r2, r6
 801427e:	4620      	mov	r0, r4
 8014280:	f001 f852 	bl	8015328 <__lshift>
 8014284:	4607      	mov	r7, r0
 8014286:	f1b8 0f00 	cmp.w	r8, #0
 801428a:	d04c      	beq.n	8014326 <_dtoa_r+0x92e>
 801428c:	6879      	ldr	r1, [r7, #4]
 801428e:	4620      	mov	r0, r4
 8014290:	f000 fe4a 	bl	8014f28 <_Balloc>
 8014294:	693a      	ldr	r2, [r7, #16]
 8014296:	3202      	adds	r2, #2
 8014298:	4606      	mov	r6, r0
 801429a:	0092      	lsls	r2, r2, #2
 801429c:	f107 010c 	add.w	r1, r7, #12
 80142a0:	300c      	adds	r0, #12
 80142a2:	f7fd fbdb 	bl	8011a5c <memcpy>
 80142a6:	2201      	movs	r2, #1
 80142a8:	4631      	mov	r1, r6
 80142aa:	4620      	mov	r0, r4
 80142ac:	f001 f83c 	bl	8015328 <__lshift>
 80142b0:	9b02      	ldr	r3, [sp, #8]
 80142b2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80142b6:	f003 0301 	and.w	r3, r3, #1
 80142ba:	46b9      	mov	r9, r7
 80142bc:	9307      	str	r3, [sp, #28]
 80142be:	4607      	mov	r7, r0
 80142c0:	4629      	mov	r1, r5
 80142c2:	9801      	ldr	r0, [sp, #4]
 80142c4:	f7ff fb0c 	bl	80138e0 <quorem>
 80142c8:	4649      	mov	r1, r9
 80142ca:	4606      	mov	r6, r0
 80142cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80142d0:	9801      	ldr	r0, [sp, #4]
 80142d2:	f001 f87d 	bl	80153d0 <__mcmp>
 80142d6:	463a      	mov	r2, r7
 80142d8:	9002      	str	r0, [sp, #8]
 80142da:	4629      	mov	r1, r5
 80142dc:	4620      	mov	r0, r4
 80142de:	f001 f891 	bl	8015404 <__mdiff>
 80142e2:	68c3      	ldr	r3, [r0, #12]
 80142e4:	4602      	mov	r2, r0
 80142e6:	bb03      	cbnz	r3, 801432a <_dtoa_r+0x932>
 80142e8:	4601      	mov	r1, r0
 80142ea:	9009      	str	r0, [sp, #36]	; 0x24
 80142ec:	9801      	ldr	r0, [sp, #4]
 80142ee:	f001 f86f 	bl	80153d0 <__mcmp>
 80142f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142f4:	4603      	mov	r3, r0
 80142f6:	4611      	mov	r1, r2
 80142f8:	4620      	mov	r0, r4
 80142fa:	9309      	str	r3, [sp, #36]	; 0x24
 80142fc:	f000 fe48 	bl	8014f90 <_Bfree>
 8014300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014302:	b9a3      	cbnz	r3, 801432e <_dtoa_r+0x936>
 8014304:	9a08      	ldr	r2, [sp, #32]
 8014306:	b992      	cbnz	r2, 801432e <_dtoa_r+0x936>
 8014308:	9a07      	ldr	r2, [sp, #28]
 801430a:	b982      	cbnz	r2, 801432e <_dtoa_r+0x936>
 801430c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014310:	d029      	beq.n	8014366 <_dtoa_r+0x96e>
 8014312:	9b02      	ldr	r3, [sp, #8]
 8014314:	2b00      	cmp	r3, #0
 8014316:	dd01      	ble.n	801431c <_dtoa_r+0x924>
 8014318:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801431c:	f10a 0601 	add.w	r6, sl, #1
 8014320:	f88a 8000 	strb.w	r8, [sl]
 8014324:	e786      	b.n	8014234 <_dtoa_r+0x83c>
 8014326:	4638      	mov	r0, r7
 8014328:	e7c2      	b.n	80142b0 <_dtoa_r+0x8b8>
 801432a:	2301      	movs	r3, #1
 801432c:	e7e3      	b.n	80142f6 <_dtoa_r+0x8fe>
 801432e:	9a02      	ldr	r2, [sp, #8]
 8014330:	2a00      	cmp	r2, #0
 8014332:	db04      	blt.n	801433e <_dtoa_r+0x946>
 8014334:	d124      	bne.n	8014380 <_dtoa_r+0x988>
 8014336:	9a08      	ldr	r2, [sp, #32]
 8014338:	bb12      	cbnz	r2, 8014380 <_dtoa_r+0x988>
 801433a:	9a07      	ldr	r2, [sp, #28]
 801433c:	bb02      	cbnz	r2, 8014380 <_dtoa_r+0x988>
 801433e:	2b00      	cmp	r3, #0
 8014340:	ddec      	ble.n	801431c <_dtoa_r+0x924>
 8014342:	2201      	movs	r2, #1
 8014344:	9901      	ldr	r1, [sp, #4]
 8014346:	4620      	mov	r0, r4
 8014348:	f000 ffee 	bl	8015328 <__lshift>
 801434c:	4629      	mov	r1, r5
 801434e:	9001      	str	r0, [sp, #4]
 8014350:	f001 f83e 	bl	80153d0 <__mcmp>
 8014354:	2800      	cmp	r0, #0
 8014356:	dc03      	bgt.n	8014360 <_dtoa_r+0x968>
 8014358:	d1e0      	bne.n	801431c <_dtoa_r+0x924>
 801435a:	f018 0f01 	tst.w	r8, #1
 801435e:	d0dd      	beq.n	801431c <_dtoa_r+0x924>
 8014360:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014364:	d1d8      	bne.n	8014318 <_dtoa_r+0x920>
 8014366:	2339      	movs	r3, #57	; 0x39
 8014368:	f10a 0601 	add.w	r6, sl, #1
 801436c:	f88a 3000 	strb.w	r3, [sl]
 8014370:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014374:	2b39      	cmp	r3, #57	; 0x39
 8014376:	f106 32ff 	add.w	r2, r6, #4294967295
 801437a:	d04c      	beq.n	8014416 <_dtoa_r+0xa1e>
 801437c:	3301      	adds	r3, #1
 801437e:	e051      	b.n	8014424 <_dtoa_r+0xa2c>
 8014380:	2b00      	cmp	r3, #0
 8014382:	f10a 0601 	add.w	r6, sl, #1
 8014386:	dd05      	ble.n	8014394 <_dtoa_r+0x99c>
 8014388:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801438c:	d0eb      	beq.n	8014366 <_dtoa_r+0x96e>
 801438e:	f108 0801 	add.w	r8, r8, #1
 8014392:	e7c5      	b.n	8014320 <_dtoa_r+0x928>
 8014394:	9b04      	ldr	r3, [sp, #16]
 8014396:	9a06      	ldr	r2, [sp, #24]
 8014398:	f806 8c01 	strb.w	r8, [r6, #-1]
 801439c:	1af3      	subs	r3, r6, r3
 801439e:	4293      	cmp	r3, r2
 80143a0:	d021      	beq.n	80143e6 <_dtoa_r+0x9ee>
 80143a2:	2300      	movs	r3, #0
 80143a4:	220a      	movs	r2, #10
 80143a6:	9901      	ldr	r1, [sp, #4]
 80143a8:	4620      	mov	r0, r4
 80143aa:	f000 fe08 	bl	8014fbe <__multadd>
 80143ae:	45b9      	cmp	r9, r7
 80143b0:	9001      	str	r0, [sp, #4]
 80143b2:	f04f 0300 	mov.w	r3, #0
 80143b6:	f04f 020a 	mov.w	r2, #10
 80143ba:	4649      	mov	r1, r9
 80143bc:	4620      	mov	r0, r4
 80143be:	d105      	bne.n	80143cc <_dtoa_r+0x9d4>
 80143c0:	f000 fdfd 	bl	8014fbe <__multadd>
 80143c4:	4681      	mov	r9, r0
 80143c6:	4607      	mov	r7, r0
 80143c8:	46b2      	mov	sl, r6
 80143ca:	e779      	b.n	80142c0 <_dtoa_r+0x8c8>
 80143cc:	f000 fdf7 	bl	8014fbe <__multadd>
 80143d0:	4639      	mov	r1, r7
 80143d2:	4681      	mov	r9, r0
 80143d4:	2300      	movs	r3, #0
 80143d6:	220a      	movs	r2, #10
 80143d8:	4620      	mov	r0, r4
 80143da:	f000 fdf0 	bl	8014fbe <__multadd>
 80143de:	4607      	mov	r7, r0
 80143e0:	e7f2      	b.n	80143c8 <_dtoa_r+0x9d0>
 80143e2:	f04f 0900 	mov.w	r9, #0
 80143e6:	2201      	movs	r2, #1
 80143e8:	9901      	ldr	r1, [sp, #4]
 80143ea:	4620      	mov	r0, r4
 80143ec:	f000 ff9c 	bl	8015328 <__lshift>
 80143f0:	4629      	mov	r1, r5
 80143f2:	9001      	str	r0, [sp, #4]
 80143f4:	f000 ffec 	bl	80153d0 <__mcmp>
 80143f8:	2800      	cmp	r0, #0
 80143fa:	dcb9      	bgt.n	8014370 <_dtoa_r+0x978>
 80143fc:	d102      	bne.n	8014404 <_dtoa_r+0xa0c>
 80143fe:	f018 0f01 	tst.w	r8, #1
 8014402:	d1b5      	bne.n	8014370 <_dtoa_r+0x978>
 8014404:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014408:	2b30      	cmp	r3, #48	; 0x30
 801440a:	f106 32ff 	add.w	r2, r6, #4294967295
 801440e:	f47f af11 	bne.w	8014234 <_dtoa_r+0x83c>
 8014412:	4616      	mov	r6, r2
 8014414:	e7f6      	b.n	8014404 <_dtoa_r+0xa0c>
 8014416:	9b04      	ldr	r3, [sp, #16]
 8014418:	4293      	cmp	r3, r2
 801441a:	d105      	bne.n	8014428 <_dtoa_r+0xa30>
 801441c:	9a04      	ldr	r2, [sp, #16]
 801441e:	f10b 0b01 	add.w	fp, fp, #1
 8014422:	2331      	movs	r3, #49	; 0x31
 8014424:	7013      	strb	r3, [r2, #0]
 8014426:	e705      	b.n	8014234 <_dtoa_r+0x83c>
 8014428:	4616      	mov	r6, r2
 801442a:	e7a1      	b.n	8014370 <_dtoa_r+0x978>
 801442c:	4b16      	ldr	r3, [pc, #88]	; (8014488 <_dtoa_r+0xa90>)
 801442e:	f7ff bb48 	b.w	8013ac2 <_dtoa_r+0xca>
 8014432:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014434:	2b00      	cmp	r3, #0
 8014436:	f47f ab23 	bne.w	8013a80 <_dtoa_r+0x88>
 801443a:	4b14      	ldr	r3, [pc, #80]	; (801448c <_dtoa_r+0xa94>)
 801443c:	f7ff bb41 	b.w	8013ac2 <_dtoa_r+0xca>
 8014440:	9b08      	ldr	r3, [sp, #32]
 8014442:	2b01      	cmp	r3, #1
 8014444:	f77f ae3b 	ble.w	80140be <_dtoa_r+0x6c6>
 8014448:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801444c:	e64f      	b.n	80140ee <_dtoa_r+0x6f6>
 801444e:	9b06      	ldr	r3, [sp, #24]
 8014450:	2b00      	cmp	r3, #0
 8014452:	dc03      	bgt.n	801445c <_dtoa_r+0xa64>
 8014454:	9b08      	ldr	r3, [sp, #32]
 8014456:	2b02      	cmp	r3, #2
 8014458:	f73f aed7 	bgt.w	801420a <_dtoa_r+0x812>
 801445c:	9e04      	ldr	r6, [sp, #16]
 801445e:	9801      	ldr	r0, [sp, #4]
 8014460:	4629      	mov	r1, r5
 8014462:	f7ff fa3d 	bl	80138e0 <quorem>
 8014466:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801446a:	f806 8b01 	strb.w	r8, [r6], #1
 801446e:	9b04      	ldr	r3, [sp, #16]
 8014470:	9a06      	ldr	r2, [sp, #24]
 8014472:	1af3      	subs	r3, r6, r3
 8014474:	429a      	cmp	r2, r3
 8014476:	ddb4      	ble.n	80143e2 <_dtoa_r+0x9ea>
 8014478:	2300      	movs	r3, #0
 801447a:	220a      	movs	r2, #10
 801447c:	9901      	ldr	r1, [sp, #4]
 801447e:	4620      	mov	r0, r4
 8014480:	f000 fd9d 	bl	8014fbe <__multadd>
 8014484:	9001      	str	r0, [sp, #4]
 8014486:	e7ea      	b.n	801445e <_dtoa_r+0xa66>
 8014488:	08017273 	.word	0x08017273
 801448c:	080170d0 	.word	0x080170d0

08014490 <__sflush_r>:
 8014490:	898a      	ldrh	r2, [r1, #12]
 8014492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014496:	4605      	mov	r5, r0
 8014498:	0710      	lsls	r0, r2, #28
 801449a:	460c      	mov	r4, r1
 801449c:	d458      	bmi.n	8014550 <__sflush_r+0xc0>
 801449e:	684b      	ldr	r3, [r1, #4]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	dc05      	bgt.n	80144b0 <__sflush_r+0x20>
 80144a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	dc02      	bgt.n	80144b0 <__sflush_r+0x20>
 80144aa:	2000      	movs	r0, #0
 80144ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80144b2:	2e00      	cmp	r6, #0
 80144b4:	d0f9      	beq.n	80144aa <__sflush_r+0x1a>
 80144b6:	2300      	movs	r3, #0
 80144b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80144bc:	682f      	ldr	r7, [r5, #0]
 80144be:	6a21      	ldr	r1, [r4, #32]
 80144c0:	602b      	str	r3, [r5, #0]
 80144c2:	d032      	beq.n	801452a <__sflush_r+0x9a>
 80144c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80144c6:	89a3      	ldrh	r3, [r4, #12]
 80144c8:	075a      	lsls	r2, r3, #29
 80144ca:	d505      	bpl.n	80144d8 <__sflush_r+0x48>
 80144cc:	6863      	ldr	r3, [r4, #4]
 80144ce:	1ac0      	subs	r0, r0, r3
 80144d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80144d2:	b10b      	cbz	r3, 80144d8 <__sflush_r+0x48>
 80144d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80144d6:	1ac0      	subs	r0, r0, r3
 80144d8:	2300      	movs	r3, #0
 80144da:	4602      	mov	r2, r0
 80144dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80144de:	6a21      	ldr	r1, [r4, #32]
 80144e0:	4628      	mov	r0, r5
 80144e2:	47b0      	blx	r6
 80144e4:	1c43      	adds	r3, r0, #1
 80144e6:	89a3      	ldrh	r3, [r4, #12]
 80144e8:	d106      	bne.n	80144f8 <__sflush_r+0x68>
 80144ea:	6829      	ldr	r1, [r5, #0]
 80144ec:	291d      	cmp	r1, #29
 80144ee:	d848      	bhi.n	8014582 <__sflush_r+0xf2>
 80144f0:	4a29      	ldr	r2, [pc, #164]	; (8014598 <__sflush_r+0x108>)
 80144f2:	40ca      	lsrs	r2, r1
 80144f4:	07d6      	lsls	r6, r2, #31
 80144f6:	d544      	bpl.n	8014582 <__sflush_r+0xf2>
 80144f8:	2200      	movs	r2, #0
 80144fa:	6062      	str	r2, [r4, #4]
 80144fc:	04d9      	lsls	r1, r3, #19
 80144fe:	6922      	ldr	r2, [r4, #16]
 8014500:	6022      	str	r2, [r4, #0]
 8014502:	d504      	bpl.n	801450e <__sflush_r+0x7e>
 8014504:	1c42      	adds	r2, r0, #1
 8014506:	d101      	bne.n	801450c <__sflush_r+0x7c>
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	b903      	cbnz	r3, 801450e <__sflush_r+0x7e>
 801450c:	6560      	str	r0, [r4, #84]	; 0x54
 801450e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014510:	602f      	str	r7, [r5, #0]
 8014512:	2900      	cmp	r1, #0
 8014514:	d0c9      	beq.n	80144aa <__sflush_r+0x1a>
 8014516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801451a:	4299      	cmp	r1, r3
 801451c:	d002      	beq.n	8014524 <__sflush_r+0x94>
 801451e:	4628      	mov	r0, r5
 8014520:	f7fd fabe 	bl	8011aa0 <_free_r>
 8014524:	2000      	movs	r0, #0
 8014526:	6360      	str	r0, [r4, #52]	; 0x34
 8014528:	e7c0      	b.n	80144ac <__sflush_r+0x1c>
 801452a:	2301      	movs	r3, #1
 801452c:	4628      	mov	r0, r5
 801452e:	47b0      	blx	r6
 8014530:	1c41      	adds	r1, r0, #1
 8014532:	d1c8      	bne.n	80144c6 <__sflush_r+0x36>
 8014534:	682b      	ldr	r3, [r5, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d0c5      	beq.n	80144c6 <__sflush_r+0x36>
 801453a:	2b1d      	cmp	r3, #29
 801453c:	d001      	beq.n	8014542 <__sflush_r+0xb2>
 801453e:	2b16      	cmp	r3, #22
 8014540:	d101      	bne.n	8014546 <__sflush_r+0xb6>
 8014542:	602f      	str	r7, [r5, #0]
 8014544:	e7b1      	b.n	80144aa <__sflush_r+0x1a>
 8014546:	89a3      	ldrh	r3, [r4, #12]
 8014548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801454c:	81a3      	strh	r3, [r4, #12]
 801454e:	e7ad      	b.n	80144ac <__sflush_r+0x1c>
 8014550:	690f      	ldr	r7, [r1, #16]
 8014552:	2f00      	cmp	r7, #0
 8014554:	d0a9      	beq.n	80144aa <__sflush_r+0x1a>
 8014556:	0793      	lsls	r3, r2, #30
 8014558:	680e      	ldr	r6, [r1, #0]
 801455a:	bf08      	it	eq
 801455c:	694b      	ldreq	r3, [r1, #20]
 801455e:	600f      	str	r7, [r1, #0]
 8014560:	bf18      	it	ne
 8014562:	2300      	movne	r3, #0
 8014564:	eba6 0807 	sub.w	r8, r6, r7
 8014568:	608b      	str	r3, [r1, #8]
 801456a:	f1b8 0f00 	cmp.w	r8, #0
 801456e:	dd9c      	ble.n	80144aa <__sflush_r+0x1a>
 8014570:	4643      	mov	r3, r8
 8014572:	463a      	mov	r2, r7
 8014574:	6a21      	ldr	r1, [r4, #32]
 8014576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014578:	4628      	mov	r0, r5
 801457a:	47b0      	blx	r6
 801457c:	2800      	cmp	r0, #0
 801457e:	dc06      	bgt.n	801458e <__sflush_r+0xfe>
 8014580:	89a3      	ldrh	r3, [r4, #12]
 8014582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014586:	81a3      	strh	r3, [r4, #12]
 8014588:	f04f 30ff 	mov.w	r0, #4294967295
 801458c:	e78e      	b.n	80144ac <__sflush_r+0x1c>
 801458e:	4407      	add	r7, r0
 8014590:	eba8 0800 	sub.w	r8, r8, r0
 8014594:	e7e9      	b.n	801456a <__sflush_r+0xda>
 8014596:	bf00      	nop
 8014598:	20400001 	.word	0x20400001

0801459c <_fflush_r>:
 801459c:	b538      	push	{r3, r4, r5, lr}
 801459e:	690b      	ldr	r3, [r1, #16]
 80145a0:	4605      	mov	r5, r0
 80145a2:	460c      	mov	r4, r1
 80145a4:	b1db      	cbz	r3, 80145de <_fflush_r+0x42>
 80145a6:	b118      	cbz	r0, 80145b0 <_fflush_r+0x14>
 80145a8:	6983      	ldr	r3, [r0, #24]
 80145aa:	b90b      	cbnz	r3, 80145b0 <_fflush_r+0x14>
 80145ac:	f000 f860 	bl	8014670 <__sinit>
 80145b0:	4b0c      	ldr	r3, [pc, #48]	; (80145e4 <_fflush_r+0x48>)
 80145b2:	429c      	cmp	r4, r3
 80145b4:	d109      	bne.n	80145ca <_fflush_r+0x2e>
 80145b6:	686c      	ldr	r4, [r5, #4]
 80145b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145bc:	b17b      	cbz	r3, 80145de <_fflush_r+0x42>
 80145be:	4621      	mov	r1, r4
 80145c0:	4628      	mov	r0, r5
 80145c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145c6:	f7ff bf63 	b.w	8014490 <__sflush_r>
 80145ca:	4b07      	ldr	r3, [pc, #28]	; (80145e8 <_fflush_r+0x4c>)
 80145cc:	429c      	cmp	r4, r3
 80145ce:	d101      	bne.n	80145d4 <_fflush_r+0x38>
 80145d0:	68ac      	ldr	r4, [r5, #8]
 80145d2:	e7f1      	b.n	80145b8 <_fflush_r+0x1c>
 80145d4:	4b05      	ldr	r3, [pc, #20]	; (80145ec <_fflush_r+0x50>)
 80145d6:	429c      	cmp	r4, r3
 80145d8:	bf08      	it	eq
 80145da:	68ec      	ldreq	r4, [r5, #12]
 80145dc:	e7ec      	b.n	80145b8 <_fflush_r+0x1c>
 80145de:	2000      	movs	r0, #0
 80145e0:	bd38      	pop	{r3, r4, r5, pc}
 80145e2:	bf00      	nop
 80145e4:	08017100 	.word	0x08017100
 80145e8:	08017120 	.word	0x08017120
 80145ec:	080170e0 	.word	0x080170e0

080145f0 <std>:
 80145f0:	2300      	movs	r3, #0
 80145f2:	b510      	push	{r4, lr}
 80145f4:	4604      	mov	r4, r0
 80145f6:	e9c0 3300 	strd	r3, r3, [r0]
 80145fa:	6083      	str	r3, [r0, #8]
 80145fc:	8181      	strh	r1, [r0, #12]
 80145fe:	6643      	str	r3, [r0, #100]	; 0x64
 8014600:	81c2      	strh	r2, [r0, #14]
 8014602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014606:	6183      	str	r3, [r0, #24]
 8014608:	4619      	mov	r1, r3
 801460a:	2208      	movs	r2, #8
 801460c:	305c      	adds	r0, #92	; 0x5c
 801460e:	f7fd fa30 	bl	8011a72 <memset>
 8014612:	4b05      	ldr	r3, [pc, #20]	; (8014628 <std+0x38>)
 8014614:	6263      	str	r3, [r4, #36]	; 0x24
 8014616:	4b05      	ldr	r3, [pc, #20]	; (801462c <std+0x3c>)
 8014618:	62a3      	str	r3, [r4, #40]	; 0x28
 801461a:	4b05      	ldr	r3, [pc, #20]	; (8014630 <std+0x40>)
 801461c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801461e:	4b05      	ldr	r3, [pc, #20]	; (8014634 <std+0x44>)
 8014620:	6224      	str	r4, [r4, #32]
 8014622:	6323      	str	r3, [r4, #48]	; 0x30
 8014624:	bd10      	pop	{r4, pc}
 8014626:	bf00      	nop
 8014628:	08012991 	.word	0x08012991
 801462c:	080129b7 	.word	0x080129b7
 8014630:	080129ef 	.word	0x080129ef
 8014634:	08012a13 	.word	0x08012a13

08014638 <_cleanup_r>:
 8014638:	4901      	ldr	r1, [pc, #4]	; (8014640 <_cleanup_r+0x8>)
 801463a:	f000 b885 	b.w	8014748 <_fwalk_reent>
 801463e:	bf00      	nop
 8014640:	0801459d 	.word	0x0801459d

08014644 <__sfmoreglue>:
 8014644:	b570      	push	{r4, r5, r6, lr}
 8014646:	1e4a      	subs	r2, r1, #1
 8014648:	2568      	movs	r5, #104	; 0x68
 801464a:	4355      	muls	r5, r2
 801464c:	460e      	mov	r6, r1
 801464e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014652:	f7fd fa73 	bl	8011b3c <_malloc_r>
 8014656:	4604      	mov	r4, r0
 8014658:	b140      	cbz	r0, 801466c <__sfmoreglue+0x28>
 801465a:	2100      	movs	r1, #0
 801465c:	e9c0 1600 	strd	r1, r6, [r0]
 8014660:	300c      	adds	r0, #12
 8014662:	60a0      	str	r0, [r4, #8]
 8014664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014668:	f7fd fa03 	bl	8011a72 <memset>
 801466c:	4620      	mov	r0, r4
 801466e:	bd70      	pop	{r4, r5, r6, pc}

08014670 <__sinit>:
 8014670:	6983      	ldr	r3, [r0, #24]
 8014672:	b510      	push	{r4, lr}
 8014674:	4604      	mov	r4, r0
 8014676:	bb33      	cbnz	r3, 80146c6 <__sinit+0x56>
 8014678:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801467c:	6503      	str	r3, [r0, #80]	; 0x50
 801467e:	4b12      	ldr	r3, [pc, #72]	; (80146c8 <__sinit+0x58>)
 8014680:	4a12      	ldr	r2, [pc, #72]	; (80146cc <__sinit+0x5c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	6282      	str	r2, [r0, #40]	; 0x28
 8014686:	4298      	cmp	r0, r3
 8014688:	bf04      	itt	eq
 801468a:	2301      	moveq	r3, #1
 801468c:	6183      	streq	r3, [r0, #24]
 801468e:	f000 f81f 	bl	80146d0 <__sfp>
 8014692:	6060      	str	r0, [r4, #4]
 8014694:	4620      	mov	r0, r4
 8014696:	f000 f81b 	bl	80146d0 <__sfp>
 801469a:	60a0      	str	r0, [r4, #8]
 801469c:	4620      	mov	r0, r4
 801469e:	f000 f817 	bl	80146d0 <__sfp>
 80146a2:	2200      	movs	r2, #0
 80146a4:	60e0      	str	r0, [r4, #12]
 80146a6:	2104      	movs	r1, #4
 80146a8:	6860      	ldr	r0, [r4, #4]
 80146aa:	f7ff ffa1 	bl	80145f0 <std>
 80146ae:	2201      	movs	r2, #1
 80146b0:	2109      	movs	r1, #9
 80146b2:	68a0      	ldr	r0, [r4, #8]
 80146b4:	f7ff ff9c 	bl	80145f0 <std>
 80146b8:	2202      	movs	r2, #2
 80146ba:	2112      	movs	r1, #18
 80146bc:	68e0      	ldr	r0, [r4, #12]
 80146be:	f7ff ff97 	bl	80145f0 <std>
 80146c2:	2301      	movs	r3, #1
 80146c4:	61a3      	str	r3, [r4, #24]
 80146c6:	bd10      	pop	{r4, pc}
 80146c8:	08017044 	.word	0x08017044
 80146cc:	08014639 	.word	0x08014639

080146d0 <__sfp>:
 80146d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146d2:	4b1b      	ldr	r3, [pc, #108]	; (8014740 <__sfp+0x70>)
 80146d4:	681e      	ldr	r6, [r3, #0]
 80146d6:	69b3      	ldr	r3, [r6, #24]
 80146d8:	4607      	mov	r7, r0
 80146da:	b913      	cbnz	r3, 80146e2 <__sfp+0x12>
 80146dc:	4630      	mov	r0, r6
 80146de:	f7ff ffc7 	bl	8014670 <__sinit>
 80146e2:	3648      	adds	r6, #72	; 0x48
 80146e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80146e8:	3b01      	subs	r3, #1
 80146ea:	d503      	bpl.n	80146f4 <__sfp+0x24>
 80146ec:	6833      	ldr	r3, [r6, #0]
 80146ee:	b133      	cbz	r3, 80146fe <__sfp+0x2e>
 80146f0:	6836      	ldr	r6, [r6, #0]
 80146f2:	e7f7      	b.n	80146e4 <__sfp+0x14>
 80146f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80146f8:	b16d      	cbz	r5, 8014716 <__sfp+0x46>
 80146fa:	3468      	adds	r4, #104	; 0x68
 80146fc:	e7f4      	b.n	80146e8 <__sfp+0x18>
 80146fe:	2104      	movs	r1, #4
 8014700:	4638      	mov	r0, r7
 8014702:	f7ff ff9f 	bl	8014644 <__sfmoreglue>
 8014706:	6030      	str	r0, [r6, #0]
 8014708:	2800      	cmp	r0, #0
 801470a:	d1f1      	bne.n	80146f0 <__sfp+0x20>
 801470c:	230c      	movs	r3, #12
 801470e:	603b      	str	r3, [r7, #0]
 8014710:	4604      	mov	r4, r0
 8014712:	4620      	mov	r0, r4
 8014714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014716:	4b0b      	ldr	r3, [pc, #44]	; (8014744 <__sfp+0x74>)
 8014718:	6665      	str	r5, [r4, #100]	; 0x64
 801471a:	e9c4 5500 	strd	r5, r5, [r4]
 801471e:	60a5      	str	r5, [r4, #8]
 8014720:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014724:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014728:	2208      	movs	r2, #8
 801472a:	4629      	mov	r1, r5
 801472c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014730:	f7fd f99f 	bl	8011a72 <memset>
 8014734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801473c:	e7e9      	b.n	8014712 <__sfp+0x42>
 801473e:	bf00      	nop
 8014740:	08017044 	.word	0x08017044
 8014744:	ffff0001 	.word	0xffff0001

08014748 <_fwalk_reent>:
 8014748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801474c:	4680      	mov	r8, r0
 801474e:	4689      	mov	r9, r1
 8014750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014754:	2600      	movs	r6, #0
 8014756:	b914      	cbnz	r4, 801475e <_fwalk_reent+0x16>
 8014758:	4630      	mov	r0, r6
 801475a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801475e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014762:	3f01      	subs	r7, #1
 8014764:	d501      	bpl.n	801476a <_fwalk_reent+0x22>
 8014766:	6824      	ldr	r4, [r4, #0]
 8014768:	e7f5      	b.n	8014756 <_fwalk_reent+0xe>
 801476a:	89ab      	ldrh	r3, [r5, #12]
 801476c:	2b01      	cmp	r3, #1
 801476e:	d907      	bls.n	8014780 <_fwalk_reent+0x38>
 8014770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014774:	3301      	adds	r3, #1
 8014776:	d003      	beq.n	8014780 <_fwalk_reent+0x38>
 8014778:	4629      	mov	r1, r5
 801477a:	4640      	mov	r0, r8
 801477c:	47c8      	blx	r9
 801477e:	4306      	orrs	r6, r0
 8014780:	3568      	adds	r5, #104	; 0x68
 8014782:	e7ee      	b.n	8014762 <_fwalk_reent+0x1a>

08014784 <rshift>:
 8014784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014786:	6906      	ldr	r6, [r0, #16]
 8014788:	114b      	asrs	r3, r1, #5
 801478a:	429e      	cmp	r6, r3
 801478c:	f100 0414 	add.w	r4, r0, #20
 8014790:	dd30      	ble.n	80147f4 <rshift+0x70>
 8014792:	f011 011f 	ands.w	r1, r1, #31
 8014796:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801479a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801479e:	d108      	bne.n	80147b2 <rshift+0x2e>
 80147a0:	4621      	mov	r1, r4
 80147a2:	42b2      	cmp	r2, r6
 80147a4:	460b      	mov	r3, r1
 80147a6:	d211      	bcs.n	80147cc <rshift+0x48>
 80147a8:	f852 3b04 	ldr.w	r3, [r2], #4
 80147ac:	f841 3b04 	str.w	r3, [r1], #4
 80147b0:	e7f7      	b.n	80147a2 <rshift+0x1e>
 80147b2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80147b6:	f1c1 0c20 	rsb	ip, r1, #32
 80147ba:	40cd      	lsrs	r5, r1
 80147bc:	3204      	adds	r2, #4
 80147be:	4623      	mov	r3, r4
 80147c0:	42b2      	cmp	r2, r6
 80147c2:	4617      	mov	r7, r2
 80147c4:	d30c      	bcc.n	80147e0 <rshift+0x5c>
 80147c6:	601d      	str	r5, [r3, #0]
 80147c8:	b105      	cbz	r5, 80147cc <rshift+0x48>
 80147ca:	3304      	adds	r3, #4
 80147cc:	1b1a      	subs	r2, r3, r4
 80147ce:	42a3      	cmp	r3, r4
 80147d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80147d4:	bf08      	it	eq
 80147d6:	2300      	moveq	r3, #0
 80147d8:	6102      	str	r2, [r0, #16]
 80147da:	bf08      	it	eq
 80147dc:	6143      	streq	r3, [r0, #20]
 80147de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147e0:	683f      	ldr	r7, [r7, #0]
 80147e2:	fa07 f70c 	lsl.w	r7, r7, ip
 80147e6:	433d      	orrs	r5, r7
 80147e8:	f843 5b04 	str.w	r5, [r3], #4
 80147ec:	f852 5b04 	ldr.w	r5, [r2], #4
 80147f0:	40cd      	lsrs	r5, r1
 80147f2:	e7e5      	b.n	80147c0 <rshift+0x3c>
 80147f4:	4623      	mov	r3, r4
 80147f6:	e7e9      	b.n	80147cc <rshift+0x48>

080147f8 <__hexdig_fun>:
 80147f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80147fc:	2b09      	cmp	r3, #9
 80147fe:	d802      	bhi.n	8014806 <__hexdig_fun+0xe>
 8014800:	3820      	subs	r0, #32
 8014802:	b2c0      	uxtb	r0, r0
 8014804:	4770      	bx	lr
 8014806:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801480a:	2b05      	cmp	r3, #5
 801480c:	d801      	bhi.n	8014812 <__hexdig_fun+0x1a>
 801480e:	3847      	subs	r0, #71	; 0x47
 8014810:	e7f7      	b.n	8014802 <__hexdig_fun+0xa>
 8014812:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014816:	2b05      	cmp	r3, #5
 8014818:	d801      	bhi.n	801481e <__hexdig_fun+0x26>
 801481a:	3827      	subs	r0, #39	; 0x27
 801481c:	e7f1      	b.n	8014802 <__hexdig_fun+0xa>
 801481e:	2000      	movs	r0, #0
 8014820:	4770      	bx	lr

08014822 <__gethex>:
 8014822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014826:	b08b      	sub	sp, #44	; 0x2c
 8014828:	468a      	mov	sl, r1
 801482a:	9002      	str	r0, [sp, #8]
 801482c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801482e:	9306      	str	r3, [sp, #24]
 8014830:	4690      	mov	r8, r2
 8014832:	f000 fadf 	bl	8014df4 <__localeconv_l>
 8014836:	6803      	ldr	r3, [r0, #0]
 8014838:	9303      	str	r3, [sp, #12]
 801483a:	4618      	mov	r0, r3
 801483c:	f7eb fd00 	bl	8000240 <strlen>
 8014840:	9b03      	ldr	r3, [sp, #12]
 8014842:	9001      	str	r0, [sp, #4]
 8014844:	4403      	add	r3, r0
 8014846:	f04f 0b00 	mov.w	fp, #0
 801484a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801484e:	9307      	str	r3, [sp, #28]
 8014850:	f8da 3000 	ldr.w	r3, [sl]
 8014854:	3302      	adds	r3, #2
 8014856:	461f      	mov	r7, r3
 8014858:	f813 0b01 	ldrb.w	r0, [r3], #1
 801485c:	2830      	cmp	r0, #48	; 0x30
 801485e:	d06c      	beq.n	801493a <__gethex+0x118>
 8014860:	f7ff ffca 	bl	80147f8 <__hexdig_fun>
 8014864:	4604      	mov	r4, r0
 8014866:	2800      	cmp	r0, #0
 8014868:	d16a      	bne.n	8014940 <__gethex+0x11e>
 801486a:	9a01      	ldr	r2, [sp, #4]
 801486c:	9903      	ldr	r1, [sp, #12]
 801486e:	4638      	mov	r0, r7
 8014870:	f001 fd32 	bl	80162d8 <strncmp>
 8014874:	2800      	cmp	r0, #0
 8014876:	d166      	bne.n	8014946 <__gethex+0x124>
 8014878:	9b01      	ldr	r3, [sp, #4]
 801487a:	5cf8      	ldrb	r0, [r7, r3]
 801487c:	18fe      	adds	r6, r7, r3
 801487e:	f7ff ffbb 	bl	80147f8 <__hexdig_fun>
 8014882:	2800      	cmp	r0, #0
 8014884:	d062      	beq.n	801494c <__gethex+0x12a>
 8014886:	4633      	mov	r3, r6
 8014888:	7818      	ldrb	r0, [r3, #0]
 801488a:	2830      	cmp	r0, #48	; 0x30
 801488c:	461f      	mov	r7, r3
 801488e:	f103 0301 	add.w	r3, r3, #1
 8014892:	d0f9      	beq.n	8014888 <__gethex+0x66>
 8014894:	f7ff ffb0 	bl	80147f8 <__hexdig_fun>
 8014898:	fab0 f580 	clz	r5, r0
 801489c:	096d      	lsrs	r5, r5, #5
 801489e:	4634      	mov	r4, r6
 80148a0:	f04f 0b01 	mov.w	fp, #1
 80148a4:	463a      	mov	r2, r7
 80148a6:	4616      	mov	r6, r2
 80148a8:	3201      	adds	r2, #1
 80148aa:	7830      	ldrb	r0, [r6, #0]
 80148ac:	f7ff ffa4 	bl	80147f8 <__hexdig_fun>
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d1f8      	bne.n	80148a6 <__gethex+0x84>
 80148b4:	9a01      	ldr	r2, [sp, #4]
 80148b6:	9903      	ldr	r1, [sp, #12]
 80148b8:	4630      	mov	r0, r6
 80148ba:	f001 fd0d 	bl	80162d8 <strncmp>
 80148be:	b950      	cbnz	r0, 80148d6 <__gethex+0xb4>
 80148c0:	b954      	cbnz	r4, 80148d8 <__gethex+0xb6>
 80148c2:	9b01      	ldr	r3, [sp, #4]
 80148c4:	18f4      	adds	r4, r6, r3
 80148c6:	4622      	mov	r2, r4
 80148c8:	4616      	mov	r6, r2
 80148ca:	3201      	adds	r2, #1
 80148cc:	7830      	ldrb	r0, [r6, #0]
 80148ce:	f7ff ff93 	bl	80147f8 <__hexdig_fun>
 80148d2:	2800      	cmp	r0, #0
 80148d4:	d1f8      	bne.n	80148c8 <__gethex+0xa6>
 80148d6:	b10c      	cbz	r4, 80148dc <__gethex+0xba>
 80148d8:	1ba4      	subs	r4, r4, r6
 80148da:	00a4      	lsls	r4, r4, #2
 80148dc:	7833      	ldrb	r3, [r6, #0]
 80148de:	2b50      	cmp	r3, #80	; 0x50
 80148e0:	d001      	beq.n	80148e6 <__gethex+0xc4>
 80148e2:	2b70      	cmp	r3, #112	; 0x70
 80148e4:	d140      	bne.n	8014968 <__gethex+0x146>
 80148e6:	7873      	ldrb	r3, [r6, #1]
 80148e8:	2b2b      	cmp	r3, #43	; 0x2b
 80148ea:	d031      	beq.n	8014950 <__gethex+0x12e>
 80148ec:	2b2d      	cmp	r3, #45	; 0x2d
 80148ee:	d033      	beq.n	8014958 <__gethex+0x136>
 80148f0:	1c71      	adds	r1, r6, #1
 80148f2:	f04f 0900 	mov.w	r9, #0
 80148f6:	7808      	ldrb	r0, [r1, #0]
 80148f8:	f7ff ff7e 	bl	80147f8 <__hexdig_fun>
 80148fc:	1e43      	subs	r3, r0, #1
 80148fe:	b2db      	uxtb	r3, r3
 8014900:	2b18      	cmp	r3, #24
 8014902:	d831      	bhi.n	8014968 <__gethex+0x146>
 8014904:	f1a0 0210 	sub.w	r2, r0, #16
 8014908:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801490c:	f7ff ff74 	bl	80147f8 <__hexdig_fun>
 8014910:	1e43      	subs	r3, r0, #1
 8014912:	b2db      	uxtb	r3, r3
 8014914:	2b18      	cmp	r3, #24
 8014916:	d922      	bls.n	801495e <__gethex+0x13c>
 8014918:	f1b9 0f00 	cmp.w	r9, #0
 801491c:	d000      	beq.n	8014920 <__gethex+0xfe>
 801491e:	4252      	negs	r2, r2
 8014920:	4414      	add	r4, r2
 8014922:	f8ca 1000 	str.w	r1, [sl]
 8014926:	b30d      	cbz	r5, 801496c <__gethex+0x14a>
 8014928:	f1bb 0f00 	cmp.w	fp, #0
 801492c:	bf0c      	ite	eq
 801492e:	2706      	moveq	r7, #6
 8014930:	2700      	movne	r7, #0
 8014932:	4638      	mov	r0, r7
 8014934:	b00b      	add	sp, #44	; 0x2c
 8014936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801493a:	f10b 0b01 	add.w	fp, fp, #1
 801493e:	e78a      	b.n	8014856 <__gethex+0x34>
 8014940:	2500      	movs	r5, #0
 8014942:	462c      	mov	r4, r5
 8014944:	e7ae      	b.n	80148a4 <__gethex+0x82>
 8014946:	463e      	mov	r6, r7
 8014948:	2501      	movs	r5, #1
 801494a:	e7c7      	b.n	80148dc <__gethex+0xba>
 801494c:	4604      	mov	r4, r0
 801494e:	e7fb      	b.n	8014948 <__gethex+0x126>
 8014950:	f04f 0900 	mov.w	r9, #0
 8014954:	1cb1      	adds	r1, r6, #2
 8014956:	e7ce      	b.n	80148f6 <__gethex+0xd4>
 8014958:	f04f 0901 	mov.w	r9, #1
 801495c:	e7fa      	b.n	8014954 <__gethex+0x132>
 801495e:	230a      	movs	r3, #10
 8014960:	fb03 0202 	mla	r2, r3, r2, r0
 8014964:	3a10      	subs	r2, #16
 8014966:	e7cf      	b.n	8014908 <__gethex+0xe6>
 8014968:	4631      	mov	r1, r6
 801496a:	e7da      	b.n	8014922 <__gethex+0x100>
 801496c:	1bf3      	subs	r3, r6, r7
 801496e:	3b01      	subs	r3, #1
 8014970:	4629      	mov	r1, r5
 8014972:	2b07      	cmp	r3, #7
 8014974:	dc49      	bgt.n	8014a0a <__gethex+0x1e8>
 8014976:	9802      	ldr	r0, [sp, #8]
 8014978:	f000 fad6 	bl	8014f28 <_Balloc>
 801497c:	9b01      	ldr	r3, [sp, #4]
 801497e:	f100 0914 	add.w	r9, r0, #20
 8014982:	f04f 0b00 	mov.w	fp, #0
 8014986:	f1c3 0301 	rsb	r3, r3, #1
 801498a:	4605      	mov	r5, r0
 801498c:	f8cd 9010 	str.w	r9, [sp, #16]
 8014990:	46da      	mov	sl, fp
 8014992:	9308      	str	r3, [sp, #32]
 8014994:	42b7      	cmp	r7, r6
 8014996:	d33b      	bcc.n	8014a10 <__gethex+0x1ee>
 8014998:	9804      	ldr	r0, [sp, #16]
 801499a:	f840 ab04 	str.w	sl, [r0], #4
 801499e:	eba0 0009 	sub.w	r0, r0, r9
 80149a2:	1080      	asrs	r0, r0, #2
 80149a4:	6128      	str	r0, [r5, #16]
 80149a6:	0147      	lsls	r7, r0, #5
 80149a8:	4650      	mov	r0, sl
 80149aa:	f000 fb81 	bl	80150b0 <__hi0bits>
 80149ae:	f8d8 6000 	ldr.w	r6, [r8]
 80149b2:	1a3f      	subs	r7, r7, r0
 80149b4:	42b7      	cmp	r7, r6
 80149b6:	dd64      	ble.n	8014a82 <__gethex+0x260>
 80149b8:	1bbf      	subs	r7, r7, r6
 80149ba:	4639      	mov	r1, r7
 80149bc:	4628      	mov	r0, r5
 80149be:	f000 fe92 	bl	80156e6 <__any_on>
 80149c2:	4682      	mov	sl, r0
 80149c4:	b178      	cbz	r0, 80149e6 <__gethex+0x1c4>
 80149c6:	1e7b      	subs	r3, r7, #1
 80149c8:	1159      	asrs	r1, r3, #5
 80149ca:	f003 021f 	and.w	r2, r3, #31
 80149ce:	f04f 0a01 	mov.w	sl, #1
 80149d2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80149d6:	fa0a f202 	lsl.w	r2, sl, r2
 80149da:	420a      	tst	r2, r1
 80149dc:	d003      	beq.n	80149e6 <__gethex+0x1c4>
 80149de:	4553      	cmp	r3, sl
 80149e0:	dc46      	bgt.n	8014a70 <__gethex+0x24e>
 80149e2:	f04f 0a02 	mov.w	sl, #2
 80149e6:	4639      	mov	r1, r7
 80149e8:	4628      	mov	r0, r5
 80149ea:	f7ff fecb 	bl	8014784 <rshift>
 80149ee:	443c      	add	r4, r7
 80149f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80149f4:	42a3      	cmp	r3, r4
 80149f6:	da52      	bge.n	8014a9e <__gethex+0x27c>
 80149f8:	4629      	mov	r1, r5
 80149fa:	9802      	ldr	r0, [sp, #8]
 80149fc:	f000 fac8 	bl	8014f90 <_Bfree>
 8014a00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a02:	2300      	movs	r3, #0
 8014a04:	6013      	str	r3, [r2, #0]
 8014a06:	27a3      	movs	r7, #163	; 0xa3
 8014a08:	e793      	b.n	8014932 <__gethex+0x110>
 8014a0a:	3101      	adds	r1, #1
 8014a0c:	105b      	asrs	r3, r3, #1
 8014a0e:	e7b0      	b.n	8014972 <__gethex+0x150>
 8014a10:	1e73      	subs	r3, r6, #1
 8014a12:	9305      	str	r3, [sp, #20]
 8014a14:	9a07      	ldr	r2, [sp, #28]
 8014a16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d018      	beq.n	8014a50 <__gethex+0x22e>
 8014a1e:	f1bb 0f20 	cmp.w	fp, #32
 8014a22:	d107      	bne.n	8014a34 <__gethex+0x212>
 8014a24:	9b04      	ldr	r3, [sp, #16]
 8014a26:	f8c3 a000 	str.w	sl, [r3]
 8014a2a:	3304      	adds	r3, #4
 8014a2c:	f04f 0a00 	mov.w	sl, #0
 8014a30:	9304      	str	r3, [sp, #16]
 8014a32:	46d3      	mov	fp, sl
 8014a34:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014a38:	f7ff fede 	bl	80147f8 <__hexdig_fun>
 8014a3c:	f000 000f 	and.w	r0, r0, #15
 8014a40:	fa00 f00b 	lsl.w	r0, r0, fp
 8014a44:	ea4a 0a00 	orr.w	sl, sl, r0
 8014a48:	f10b 0b04 	add.w	fp, fp, #4
 8014a4c:	9b05      	ldr	r3, [sp, #20]
 8014a4e:	e00d      	b.n	8014a6c <__gethex+0x24a>
 8014a50:	9b05      	ldr	r3, [sp, #20]
 8014a52:	9a08      	ldr	r2, [sp, #32]
 8014a54:	4413      	add	r3, r2
 8014a56:	42bb      	cmp	r3, r7
 8014a58:	d3e1      	bcc.n	8014a1e <__gethex+0x1fc>
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	9a01      	ldr	r2, [sp, #4]
 8014a5e:	9903      	ldr	r1, [sp, #12]
 8014a60:	9309      	str	r3, [sp, #36]	; 0x24
 8014a62:	f001 fc39 	bl	80162d8 <strncmp>
 8014a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d1d8      	bne.n	8014a1e <__gethex+0x1fc>
 8014a6c:	461e      	mov	r6, r3
 8014a6e:	e791      	b.n	8014994 <__gethex+0x172>
 8014a70:	1eb9      	subs	r1, r7, #2
 8014a72:	4628      	mov	r0, r5
 8014a74:	f000 fe37 	bl	80156e6 <__any_on>
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d0b2      	beq.n	80149e2 <__gethex+0x1c0>
 8014a7c:	f04f 0a03 	mov.w	sl, #3
 8014a80:	e7b1      	b.n	80149e6 <__gethex+0x1c4>
 8014a82:	da09      	bge.n	8014a98 <__gethex+0x276>
 8014a84:	1bf7      	subs	r7, r6, r7
 8014a86:	4629      	mov	r1, r5
 8014a88:	463a      	mov	r2, r7
 8014a8a:	9802      	ldr	r0, [sp, #8]
 8014a8c:	f000 fc4c 	bl	8015328 <__lshift>
 8014a90:	1be4      	subs	r4, r4, r7
 8014a92:	4605      	mov	r5, r0
 8014a94:	f100 0914 	add.w	r9, r0, #20
 8014a98:	f04f 0a00 	mov.w	sl, #0
 8014a9c:	e7a8      	b.n	80149f0 <__gethex+0x1ce>
 8014a9e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014aa2:	42a0      	cmp	r0, r4
 8014aa4:	dd6a      	ble.n	8014b7c <__gethex+0x35a>
 8014aa6:	1b04      	subs	r4, r0, r4
 8014aa8:	42a6      	cmp	r6, r4
 8014aaa:	dc2e      	bgt.n	8014b0a <__gethex+0x2e8>
 8014aac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014ab0:	2b02      	cmp	r3, #2
 8014ab2:	d022      	beq.n	8014afa <__gethex+0x2d8>
 8014ab4:	2b03      	cmp	r3, #3
 8014ab6:	d024      	beq.n	8014b02 <__gethex+0x2e0>
 8014ab8:	2b01      	cmp	r3, #1
 8014aba:	d115      	bne.n	8014ae8 <__gethex+0x2c6>
 8014abc:	42a6      	cmp	r6, r4
 8014abe:	d113      	bne.n	8014ae8 <__gethex+0x2c6>
 8014ac0:	2e01      	cmp	r6, #1
 8014ac2:	dc0b      	bgt.n	8014adc <__gethex+0x2ba>
 8014ac4:	9a06      	ldr	r2, [sp, #24]
 8014ac6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014aca:	6013      	str	r3, [r2, #0]
 8014acc:	2301      	movs	r3, #1
 8014ace:	612b      	str	r3, [r5, #16]
 8014ad0:	f8c9 3000 	str.w	r3, [r9]
 8014ad4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ad6:	2762      	movs	r7, #98	; 0x62
 8014ad8:	601d      	str	r5, [r3, #0]
 8014ada:	e72a      	b.n	8014932 <__gethex+0x110>
 8014adc:	1e71      	subs	r1, r6, #1
 8014ade:	4628      	mov	r0, r5
 8014ae0:	f000 fe01 	bl	80156e6 <__any_on>
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	d1ed      	bne.n	8014ac4 <__gethex+0x2a2>
 8014ae8:	4629      	mov	r1, r5
 8014aea:	9802      	ldr	r0, [sp, #8]
 8014aec:	f000 fa50 	bl	8014f90 <_Bfree>
 8014af0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014af2:	2300      	movs	r3, #0
 8014af4:	6013      	str	r3, [r2, #0]
 8014af6:	2750      	movs	r7, #80	; 0x50
 8014af8:	e71b      	b.n	8014932 <__gethex+0x110>
 8014afa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d0e1      	beq.n	8014ac4 <__gethex+0x2a2>
 8014b00:	e7f2      	b.n	8014ae8 <__gethex+0x2c6>
 8014b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d1dd      	bne.n	8014ac4 <__gethex+0x2a2>
 8014b08:	e7ee      	b.n	8014ae8 <__gethex+0x2c6>
 8014b0a:	1e67      	subs	r7, r4, #1
 8014b0c:	f1ba 0f00 	cmp.w	sl, #0
 8014b10:	d131      	bne.n	8014b76 <__gethex+0x354>
 8014b12:	b127      	cbz	r7, 8014b1e <__gethex+0x2fc>
 8014b14:	4639      	mov	r1, r7
 8014b16:	4628      	mov	r0, r5
 8014b18:	f000 fde5 	bl	80156e6 <__any_on>
 8014b1c:	4682      	mov	sl, r0
 8014b1e:	117a      	asrs	r2, r7, #5
 8014b20:	2301      	movs	r3, #1
 8014b22:	f007 071f 	and.w	r7, r7, #31
 8014b26:	fa03 f707 	lsl.w	r7, r3, r7
 8014b2a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8014b2e:	4621      	mov	r1, r4
 8014b30:	421f      	tst	r7, r3
 8014b32:	4628      	mov	r0, r5
 8014b34:	bf18      	it	ne
 8014b36:	f04a 0a02 	orrne.w	sl, sl, #2
 8014b3a:	1b36      	subs	r6, r6, r4
 8014b3c:	f7ff fe22 	bl	8014784 <rshift>
 8014b40:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014b44:	2702      	movs	r7, #2
 8014b46:	f1ba 0f00 	cmp.w	sl, #0
 8014b4a:	d048      	beq.n	8014bde <__gethex+0x3bc>
 8014b4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b50:	2b02      	cmp	r3, #2
 8014b52:	d015      	beq.n	8014b80 <__gethex+0x35e>
 8014b54:	2b03      	cmp	r3, #3
 8014b56:	d017      	beq.n	8014b88 <__gethex+0x366>
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d109      	bne.n	8014b70 <__gethex+0x34e>
 8014b5c:	f01a 0f02 	tst.w	sl, #2
 8014b60:	d006      	beq.n	8014b70 <__gethex+0x34e>
 8014b62:	f8d9 3000 	ldr.w	r3, [r9]
 8014b66:	ea4a 0a03 	orr.w	sl, sl, r3
 8014b6a:	f01a 0f01 	tst.w	sl, #1
 8014b6e:	d10e      	bne.n	8014b8e <__gethex+0x36c>
 8014b70:	f047 0710 	orr.w	r7, r7, #16
 8014b74:	e033      	b.n	8014bde <__gethex+0x3bc>
 8014b76:	f04f 0a01 	mov.w	sl, #1
 8014b7a:	e7d0      	b.n	8014b1e <__gethex+0x2fc>
 8014b7c:	2701      	movs	r7, #1
 8014b7e:	e7e2      	b.n	8014b46 <__gethex+0x324>
 8014b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b82:	f1c3 0301 	rsb	r3, r3, #1
 8014b86:	9315      	str	r3, [sp, #84]	; 0x54
 8014b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d0f0      	beq.n	8014b70 <__gethex+0x34e>
 8014b8e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8014b92:	f105 0314 	add.w	r3, r5, #20
 8014b96:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8014b9a:	eb03 010a 	add.w	r1, r3, sl
 8014b9e:	f04f 0c00 	mov.w	ip, #0
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ba8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014bac:	d01c      	beq.n	8014be8 <__gethex+0x3c6>
 8014bae:	3201      	adds	r2, #1
 8014bb0:	6002      	str	r2, [r0, #0]
 8014bb2:	2f02      	cmp	r7, #2
 8014bb4:	f105 0314 	add.w	r3, r5, #20
 8014bb8:	d138      	bne.n	8014c2c <__gethex+0x40a>
 8014bba:	f8d8 2000 	ldr.w	r2, [r8]
 8014bbe:	3a01      	subs	r2, #1
 8014bc0:	42b2      	cmp	r2, r6
 8014bc2:	d10a      	bne.n	8014bda <__gethex+0x3b8>
 8014bc4:	1171      	asrs	r1, r6, #5
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	f006 061f 	and.w	r6, r6, #31
 8014bcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014bd0:	fa02 f606 	lsl.w	r6, r2, r6
 8014bd4:	421e      	tst	r6, r3
 8014bd6:	bf18      	it	ne
 8014bd8:	4617      	movne	r7, r2
 8014bda:	f047 0720 	orr.w	r7, r7, #32
 8014bde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014be0:	601d      	str	r5, [r3, #0]
 8014be2:	9b06      	ldr	r3, [sp, #24]
 8014be4:	601c      	str	r4, [r3, #0]
 8014be6:	e6a4      	b.n	8014932 <__gethex+0x110>
 8014be8:	4299      	cmp	r1, r3
 8014bea:	f843 cc04 	str.w	ip, [r3, #-4]
 8014bee:	d8d8      	bhi.n	8014ba2 <__gethex+0x380>
 8014bf0:	68ab      	ldr	r3, [r5, #8]
 8014bf2:	4599      	cmp	r9, r3
 8014bf4:	db12      	blt.n	8014c1c <__gethex+0x3fa>
 8014bf6:	6869      	ldr	r1, [r5, #4]
 8014bf8:	9802      	ldr	r0, [sp, #8]
 8014bfa:	3101      	adds	r1, #1
 8014bfc:	f000 f994 	bl	8014f28 <_Balloc>
 8014c00:	692a      	ldr	r2, [r5, #16]
 8014c02:	3202      	adds	r2, #2
 8014c04:	f105 010c 	add.w	r1, r5, #12
 8014c08:	4683      	mov	fp, r0
 8014c0a:	0092      	lsls	r2, r2, #2
 8014c0c:	300c      	adds	r0, #12
 8014c0e:	f7fc ff25 	bl	8011a5c <memcpy>
 8014c12:	4629      	mov	r1, r5
 8014c14:	9802      	ldr	r0, [sp, #8]
 8014c16:	f000 f9bb 	bl	8014f90 <_Bfree>
 8014c1a:	465d      	mov	r5, fp
 8014c1c:	692b      	ldr	r3, [r5, #16]
 8014c1e:	1c5a      	adds	r2, r3, #1
 8014c20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014c24:	612a      	str	r2, [r5, #16]
 8014c26:	2201      	movs	r2, #1
 8014c28:	615a      	str	r2, [r3, #20]
 8014c2a:	e7c2      	b.n	8014bb2 <__gethex+0x390>
 8014c2c:	692a      	ldr	r2, [r5, #16]
 8014c2e:	454a      	cmp	r2, r9
 8014c30:	dd0b      	ble.n	8014c4a <__gethex+0x428>
 8014c32:	2101      	movs	r1, #1
 8014c34:	4628      	mov	r0, r5
 8014c36:	f7ff fda5 	bl	8014784 <rshift>
 8014c3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c3e:	3401      	adds	r4, #1
 8014c40:	42a3      	cmp	r3, r4
 8014c42:	f6ff aed9 	blt.w	80149f8 <__gethex+0x1d6>
 8014c46:	2701      	movs	r7, #1
 8014c48:	e7c7      	b.n	8014bda <__gethex+0x3b8>
 8014c4a:	f016 061f 	ands.w	r6, r6, #31
 8014c4e:	d0fa      	beq.n	8014c46 <__gethex+0x424>
 8014c50:	449a      	add	sl, r3
 8014c52:	f1c6 0620 	rsb	r6, r6, #32
 8014c56:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014c5a:	f000 fa29 	bl	80150b0 <__hi0bits>
 8014c5e:	42b0      	cmp	r0, r6
 8014c60:	dbe7      	blt.n	8014c32 <__gethex+0x410>
 8014c62:	e7f0      	b.n	8014c46 <__gethex+0x424>

08014c64 <L_shift>:
 8014c64:	f1c2 0208 	rsb	r2, r2, #8
 8014c68:	0092      	lsls	r2, r2, #2
 8014c6a:	b570      	push	{r4, r5, r6, lr}
 8014c6c:	f1c2 0620 	rsb	r6, r2, #32
 8014c70:	6843      	ldr	r3, [r0, #4]
 8014c72:	6804      	ldr	r4, [r0, #0]
 8014c74:	fa03 f506 	lsl.w	r5, r3, r6
 8014c78:	432c      	orrs	r4, r5
 8014c7a:	40d3      	lsrs	r3, r2
 8014c7c:	6004      	str	r4, [r0, #0]
 8014c7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014c82:	4288      	cmp	r0, r1
 8014c84:	d3f4      	bcc.n	8014c70 <L_shift+0xc>
 8014c86:	bd70      	pop	{r4, r5, r6, pc}

08014c88 <__match>:
 8014c88:	b530      	push	{r4, r5, lr}
 8014c8a:	6803      	ldr	r3, [r0, #0]
 8014c8c:	3301      	adds	r3, #1
 8014c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c92:	b914      	cbnz	r4, 8014c9a <__match+0x12>
 8014c94:	6003      	str	r3, [r0, #0]
 8014c96:	2001      	movs	r0, #1
 8014c98:	bd30      	pop	{r4, r5, pc}
 8014c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014ca2:	2d19      	cmp	r5, #25
 8014ca4:	bf98      	it	ls
 8014ca6:	3220      	addls	r2, #32
 8014ca8:	42a2      	cmp	r2, r4
 8014caa:	d0f0      	beq.n	8014c8e <__match+0x6>
 8014cac:	2000      	movs	r0, #0
 8014cae:	e7f3      	b.n	8014c98 <__match+0x10>

08014cb0 <__hexnan>:
 8014cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb4:	680b      	ldr	r3, [r1, #0]
 8014cb6:	6801      	ldr	r1, [r0, #0]
 8014cb8:	115f      	asrs	r7, r3, #5
 8014cba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8014cbe:	f013 031f 	ands.w	r3, r3, #31
 8014cc2:	b087      	sub	sp, #28
 8014cc4:	bf18      	it	ne
 8014cc6:	3704      	addne	r7, #4
 8014cc8:	2500      	movs	r5, #0
 8014cca:	1f3e      	subs	r6, r7, #4
 8014ccc:	4682      	mov	sl, r0
 8014cce:	4690      	mov	r8, r2
 8014cd0:	9301      	str	r3, [sp, #4]
 8014cd2:	f847 5c04 	str.w	r5, [r7, #-4]
 8014cd6:	46b1      	mov	r9, r6
 8014cd8:	4634      	mov	r4, r6
 8014cda:	9502      	str	r5, [sp, #8]
 8014cdc:	46ab      	mov	fp, r5
 8014cde:	784a      	ldrb	r2, [r1, #1]
 8014ce0:	1c4b      	adds	r3, r1, #1
 8014ce2:	9303      	str	r3, [sp, #12]
 8014ce4:	b342      	cbz	r2, 8014d38 <__hexnan+0x88>
 8014ce6:	4610      	mov	r0, r2
 8014ce8:	9105      	str	r1, [sp, #20]
 8014cea:	9204      	str	r2, [sp, #16]
 8014cec:	f7ff fd84 	bl	80147f8 <__hexdig_fun>
 8014cf0:	2800      	cmp	r0, #0
 8014cf2:	d143      	bne.n	8014d7c <__hexnan+0xcc>
 8014cf4:	9a04      	ldr	r2, [sp, #16]
 8014cf6:	9905      	ldr	r1, [sp, #20]
 8014cf8:	2a20      	cmp	r2, #32
 8014cfa:	d818      	bhi.n	8014d2e <__hexnan+0x7e>
 8014cfc:	9b02      	ldr	r3, [sp, #8]
 8014cfe:	459b      	cmp	fp, r3
 8014d00:	dd13      	ble.n	8014d2a <__hexnan+0x7a>
 8014d02:	454c      	cmp	r4, r9
 8014d04:	d206      	bcs.n	8014d14 <__hexnan+0x64>
 8014d06:	2d07      	cmp	r5, #7
 8014d08:	dc04      	bgt.n	8014d14 <__hexnan+0x64>
 8014d0a:	462a      	mov	r2, r5
 8014d0c:	4649      	mov	r1, r9
 8014d0e:	4620      	mov	r0, r4
 8014d10:	f7ff ffa8 	bl	8014c64 <L_shift>
 8014d14:	4544      	cmp	r4, r8
 8014d16:	d944      	bls.n	8014da2 <__hexnan+0xf2>
 8014d18:	2300      	movs	r3, #0
 8014d1a:	f1a4 0904 	sub.w	r9, r4, #4
 8014d1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d22:	f8cd b008 	str.w	fp, [sp, #8]
 8014d26:	464c      	mov	r4, r9
 8014d28:	461d      	mov	r5, r3
 8014d2a:	9903      	ldr	r1, [sp, #12]
 8014d2c:	e7d7      	b.n	8014cde <__hexnan+0x2e>
 8014d2e:	2a29      	cmp	r2, #41	; 0x29
 8014d30:	d14a      	bne.n	8014dc8 <__hexnan+0x118>
 8014d32:	3102      	adds	r1, #2
 8014d34:	f8ca 1000 	str.w	r1, [sl]
 8014d38:	f1bb 0f00 	cmp.w	fp, #0
 8014d3c:	d044      	beq.n	8014dc8 <__hexnan+0x118>
 8014d3e:	454c      	cmp	r4, r9
 8014d40:	d206      	bcs.n	8014d50 <__hexnan+0xa0>
 8014d42:	2d07      	cmp	r5, #7
 8014d44:	dc04      	bgt.n	8014d50 <__hexnan+0xa0>
 8014d46:	462a      	mov	r2, r5
 8014d48:	4649      	mov	r1, r9
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f7ff ff8a 	bl	8014c64 <L_shift>
 8014d50:	4544      	cmp	r4, r8
 8014d52:	d928      	bls.n	8014da6 <__hexnan+0xf6>
 8014d54:	4643      	mov	r3, r8
 8014d56:	f854 2b04 	ldr.w	r2, [r4], #4
 8014d5a:	f843 2b04 	str.w	r2, [r3], #4
 8014d5e:	42a6      	cmp	r6, r4
 8014d60:	d2f9      	bcs.n	8014d56 <__hexnan+0xa6>
 8014d62:	2200      	movs	r2, #0
 8014d64:	f843 2b04 	str.w	r2, [r3], #4
 8014d68:	429e      	cmp	r6, r3
 8014d6a:	d2fb      	bcs.n	8014d64 <__hexnan+0xb4>
 8014d6c:	6833      	ldr	r3, [r6, #0]
 8014d6e:	b91b      	cbnz	r3, 8014d78 <__hexnan+0xc8>
 8014d70:	4546      	cmp	r6, r8
 8014d72:	d127      	bne.n	8014dc4 <__hexnan+0x114>
 8014d74:	2301      	movs	r3, #1
 8014d76:	6033      	str	r3, [r6, #0]
 8014d78:	2005      	movs	r0, #5
 8014d7a:	e026      	b.n	8014dca <__hexnan+0x11a>
 8014d7c:	3501      	adds	r5, #1
 8014d7e:	2d08      	cmp	r5, #8
 8014d80:	f10b 0b01 	add.w	fp, fp, #1
 8014d84:	dd06      	ble.n	8014d94 <__hexnan+0xe4>
 8014d86:	4544      	cmp	r4, r8
 8014d88:	d9cf      	bls.n	8014d2a <__hexnan+0x7a>
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d90:	2501      	movs	r5, #1
 8014d92:	3c04      	subs	r4, #4
 8014d94:	6822      	ldr	r2, [r4, #0]
 8014d96:	f000 000f 	and.w	r0, r0, #15
 8014d9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014d9e:	6020      	str	r0, [r4, #0]
 8014da0:	e7c3      	b.n	8014d2a <__hexnan+0x7a>
 8014da2:	2508      	movs	r5, #8
 8014da4:	e7c1      	b.n	8014d2a <__hexnan+0x7a>
 8014da6:	9b01      	ldr	r3, [sp, #4]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d0df      	beq.n	8014d6c <__hexnan+0xbc>
 8014dac:	f04f 32ff 	mov.w	r2, #4294967295
 8014db0:	f1c3 0320 	rsb	r3, r3, #32
 8014db4:	fa22 f303 	lsr.w	r3, r2, r3
 8014db8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014dbc:	401a      	ands	r2, r3
 8014dbe:	f847 2c04 	str.w	r2, [r7, #-4]
 8014dc2:	e7d3      	b.n	8014d6c <__hexnan+0xbc>
 8014dc4:	3e04      	subs	r6, #4
 8014dc6:	e7d1      	b.n	8014d6c <__hexnan+0xbc>
 8014dc8:	2004      	movs	r0, #4
 8014dca:	b007      	add	sp, #28
 8014dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014dd0 <__locale_ctype_ptr_l>:
 8014dd0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014dd4:	4770      	bx	lr
	...

08014dd8 <__locale_ctype_ptr>:
 8014dd8:	4b04      	ldr	r3, [pc, #16]	; (8014dec <__locale_ctype_ptr+0x14>)
 8014dda:	4a05      	ldr	r2, [pc, #20]	; (8014df0 <__locale_ctype_ptr+0x18>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	6a1b      	ldr	r3, [r3, #32]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	bf08      	it	eq
 8014de4:	4613      	moveq	r3, r2
 8014de6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8014dea:	4770      	bx	lr
 8014dec:	20000438 	.word	0x20000438
 8014df0:	2000049c 	.word	0x2000049c

08014df4 <__localeconv_l>:
 8014df4:	30f0      	adds	r0, #240	; 0xf0
 8014df6:	4770      	bx	lr

08014df8 <_localeconv_r>:
 8014df8:	4b04      	ldr	r3, [pc, #16]	; (8014e0c <_localeconv_r+0x14>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	6a18      	ldr	r0, [r3, #32]
 8014dfe:	4b04      	ldr	r3, [pc, #16]	; (8014e10 <_localeconv_r+0x18>)
 8014e00:	2800      	cmp	r0, #0
 8014e02:	bf08      	it	eq
 8014e04:	4618      	moveq	r0, r3
 8014e06:	30f0      	adds	r0, #240	; 0xf0
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop
 8014e0c:	20000438 	.word	0x20000438
 8014e10:	2000049c 	.word	0x2000049c

08014e14 <_lseek_r>:
 8014e14:	b538      	push	{r3, r4, r5, lr}
 8014e16:	4c07      	ldr	r4, [pc, #28]	; (8014e34 <_lseek_r+0x20>)
 8014e18:	4605      	mov	r5, r0
 8014e1a:	4608      	mov	r0, r1
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	2200      	movs	r2, #0
 8014e20:	6022      	str	r2, [r4, #0]
 8014e22:	461a      	mov	r2, r3
 8014e24:	f001 fbd0 	bl	80165c8 <_lseek>
 8014e28:	1c43      	adds	r3, r0, #1
 8014e2a:	d102      	bne.n	8014e32 <_lseek_r+0x1e>
 8014e2c:	6823      	ldr	r3, [r4, #0]
 8014e2e:	b103      	cbz	r3, 8014e32 <_lseek_r+0x1e>
 8014e30:	602b      	str	r3, [r5, #0]
 8014e32:	bd38      	pop	{r3, r4, r5, pc}
 8014e34:	2000eaa4 	.word	0x2000eaa4

08014e38 <__swhatbuf_r>:
 8014e38:	b570      	push	{r4, r5, r6, lr}
 8014e3a:	460e      	mov	r6, r1
 8014e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e40:	2900      	cmp	r1, #0
 8014e42:	b096      	sub	sp, #88	; 0x58
 8014e44:	4614      	mov	r4, r2
 8014e46:	461d      	mov	r5, r3
 8014e48:	da07      	bge.n	8014e5a <__swhatbuf_r+0x22>
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	602b      	str	r3, [r5, #0]
 8014e4e:	89b3      	ldrh	r3, [r6, #12]
 8014e50:	061a      	lsls	r2, r3, #24
 8014e52:	d410      	bmi.n	8014e76 <__swhatbuf_r+0x3e>
 8014e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e58:	e00e      	b.n	8014e78 <__swhatbuf_r+0x40>
 8014e5a:	466a      	mov	r2, sp
 8014e5c:	f001 fb22 	bl	80164a4 <_fstat_r>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	dbf2      	blt.n	8014e4a <__swhatbuf_r+0x12>
 8014e64:	9a01      	ldr	r2, [sp, #4]
 8014e66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014e6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014e6e:	425a      	negs	r2, r3
 8014e70:	415a      	adcs	r2, r3
 8014e72:	602a      	str	r2, [r5, #0]
 8014e74:	e7ee      	b.n	8014e54 <__swhatbuf_r+0x1c>
 8014e76:	2340      	movs	r3, #64	; 0x40
 8014e78:	2000      	movs	r0, #0
 8014e7a:	6023      	str	r3, [r4, #0]
 8014e7c:	b016      	add	sp, #88	; 0x58
 8014e7e:	bd70      	pop	{r4, r5, r6, pc}

08014e80 <__smakebuf_r>:
 8014e80:	898b      	ldrh	r3, [r1, #12]
 8014e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e84:	079d      	lsls	r5, r3, #30
 8014e86:	4606      	mov	r6, r0
 8014e88:	460c      	mov	r4, r1
 8014e8a:	d507      	bpl.n	8014e9c <__smakebuf_r+0x1c>
 8014e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014e90:	6023      	str	r3, [r4, #0]
 8014e92:	6123      	str	r3, [r4, #16]
 8014e94:	2301      	movs	r3, #1
 8014e96:	6163      	str	r3, [r4, #20]
 8014e98:	b002      	add	sp, #8
 8014e9a:	bd70      	pop	{r4, r5, r6, pc}
 8014e9c:	ab01      	add	r3, sp, #4
 8014e9e:	466a      	mov	r2, sp
 8014ea0:	f7ff ffca 	bl	8014e38 <__swhatbuf_r>
 8014ea4:	9900      	ldr	r1, [sp, #0]
 8014ea6:	4605      	mov	r5, r0
 8014ea8:	4630      	mov	r0, r6
 8014eaa:	f7fc fe47 	bl	8011b3c <_malloc_r>
 8014eae:	b948      	cbnz	r0, 8014ec4 <__smakebuf_r+0x44>
 8014eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eb4:	059a      	lsls	r2, r3, #22
 8014eb6:	d4ef      	bmi.n	8014e98 <__smakebuf_r+0x18>
 8014eb8:	f023 0303 	bic.w	r3, r3, #3
 8014ebc:	f043 0302 	orr.w	r3, r3, #2
 8014ec0:	81a3      	strh	r3, [r4, #12]
 8014ec2:	e7e3      	b.n	8014e8c <__smakebuf_r+0xc>
 8014ec4:	4b0d      	ldr	r3, [pc, #52]	; (8014efc <__smakebuf_r+0x7c>)
 8014ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ec8:	89a3      	ldrh	r3, [r4, #12]
 8014eca:	6020      	str	r0, [r4, #0]
 8014ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ed0:	81a3      	strh	r3, [r4, #12]
 8014ed2:	9b00      	ldr	r3, [sp, #0]
 8014ed4:	6163      	str	r3, [r4, #20]
 8014ed6:	9b01      	ldr	r3, [sp, #4]
 8014ed8:	6120      	str	r0, [r4, #16]
 8014eda:	b15b      	cbz	r3, 8014ef4 <__smakebuf_r+0x74>
 8014edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ee0:	4630      	mov	r0, r6
 8014ee2:	f001 faf1 	bl	80164c8 <_isatty_r>
 8014ee6:	b128      	cbz	r0, 8014ef4 <__smakebuf_r+0x74>
 8014ee8:	89a3      	ldrh	r3, [r4, #12]
 8014eea:	f023 0303 	bic.w	r3, r3, #3
 8014eee:	f043 0301 	orr.w	r3, r3, #1
 8014ef2:	81a3      	strh	r3, [r4, #12]
 8014ef4:	89a3      	ldrh	r3, [r4, #12]
 8014ef6:	431d      	orrs	r5, r3
 8014ef8:	81a5      	strh	r5, [r4, #12]
 8014efa:	e7cd      	b.n	8014e98 <__smakebuf_r+0x18>
 8014efc:	08014639 	.word	0x08014639

08014f00 <__ascii_mbtowc>:
 8014f00:	b082      	sub	sp, #8
 8014f02:	b901      	cbnz	r1, 8014f06 <__ascii_mbtowc+0x6>
 8014f04:	a901      	add	r1, sp, #4
 8014f06:	b142      	cbz	r2, 8014f1a <__ascii_mbtowc+0x1a>
 8014f08:	b14b      	cbz	r3, 8014f1e <__ascii_mbtowc+0x1e>
 8014f0a:	7813      	ldrb	r3, [r2, #0]
 8014f0c:	600b      	str	r3, [r1, #0]
 8014f0e:	7812      	ldrb	r2, [r2, #0]
 8014f10:	1c10      	adds	r0, r2, #0
 8014f12:	bf18      	it	ne
 8014f14:	2001      	movne	r0, #1
 8014f16:	b002      	add	sp, #8
 8014f18:	4770      	bx	lr
 8014f1a:	4610      	mov	r0, r2
 8014f1c:	e7fb      	b.n	8014f16 <__ascii_mbtowc+0x16>
 8014f1e:	f06f 0001 	mvn.w	r0, #1
 8014f22:	e7f8      	b.n	8014f16 <__ascii_mbtowc+0x16>

08014f24 <__malloc_lock>:
 8014f24:	4770      	bx	lr

08014f26 <__malloc_unlock>:
 8014f26:	4770      	bx	lr

08014f28 <_Balloc>:
 8014f28:	b570      	push	{r4, r5, r6, lr}
 8014f2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014f2c:	4604      	mov	r4, r0
 8014f2e:	460e      	mov	r6, r1
 8014f30:	b93d      	cbnz	r5, 8014f42 <_Balloc+0x1a>
 8014f32:	2010      	movs	r0, #16
 8014f34:	f7fc fd8a 	bl	8011a4c <malloc>
 8014f38:	6260      	str	r0, [r4, #36]	; 0x24
 8014f3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014f3e:	6005      	str	r5, [r0, #0]
 8014f40:	60c5      	str	r5, [r0, #12]
 8014f42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014f44:	68eb      	ldr	r3, [r5, #12]
 8014f46:	b183      	cbz	r3, 8014f6a <_Balloc+0x42>
 8014f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f4a:	68db      	ldr	r3, [r3, #12]
 8014f4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014f50:	b9b8      	cbnz	r0, 8014f82 <_Balloc+0x5a>
 8014f52:	2101      	movs	r1, #1
 8014f54:	fa01 f506 	lsl.w	r5, r1, r6
 8014f58:	1d6a      	adds	r2, r5, #5
 8014f5a:	0092      	lsls	r2, r2, #2
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	f7fc fd90 	bl	8011a82 <_calloc_r>
 8014f62:	b160      	cbz	r0, 8014f7e <_Balloc+0x56>
 8014f64:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014f68:	e00e      	b.n	8014f88 <_Balloc+0x60>
 8014f6a:	2221      	movs	r2, #33	; 0x21
 8014f6c:	2104      	movs	r1, #4
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f7fc fd87 	bl	8011a82 <_calloc_r>
 8014f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f76:	60e8      	str	r0, [r5, #12]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d1e4      	bne.n	8014f48 <_Balloc+0x20>
 8014f7e:	2000      	movs	r0, #0
 8014f80:	bd70      	pop	{r4, r5, r6, pc}
 8014f82:	6802      	ldr	r2, [r0, #0]
 8014f84:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014f88:	2300      	movs	r3, #0
 8014f8a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f8e:	e7f7      	b.n	8014f80 <_Balloc+0x58>

08014f90 <_Bfree>:
 8014f90:	b570      	push	{r4, r5, r6, lr}
 8014f92:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014f94:	4606      	mov	r6, r0
 8014f96:	460d      	mov	r5, r1
 8014f98:	b93c      	cbnz	r4, 8014faa <_Bfree+0x1a>
 8014f9a:	2010      	movs	r0, #16
 8014f9c:	f7fc fd56 	bl	8011a4c <malloc>
 8014fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8014fa2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014fa6:	6004      	str	r4, [r0, #0]
 8014fa8:	60c4      	str	r4, [r0, #12]
 8014faa:	b13d      	cbz	r5, 8014fbc <_Bfree+0x2c>
 8014fac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014fae:	686a      	ldr	r2, [r5, #4]
 8014fb0:	68db      	ldr	r3, [r3, #12]
 8014fb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014fb6:	6029      	str	r1, [r5, #0]
 8014fb8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014fbc:	bd70      	pop	{r4, r5, r6, pc}

08014fbe <__multadd>:
 8014fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc2:	690d      	ldr	r5, [r1, #16]
 8014fc4:	461f      	mov	r7, r3
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	460c      	mov	r4, r1
 8014fca:	f101 0c14 	add.w	ip, r1, #20
 8014fce:	2300      	movs	r3, #0
 8014fd0:	f8dc 0000 	ldr.w	r0, [ip]
 8014fd4:	b281      	uxth	r1, r0
 8014fd6:	fb02 7101 	mla	r1, r2, r1, r7
 8014fda:	0c0f      	lsrs	r7, r1, #16
 8014fdc:	0c00      	lsrs	r0, r0, #16
 8014fde:	fb02 7000 	mla	r0, r2, r0, r7
 8014fe2:	b289      	uxth	r1, r1
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014fea:	429d      	cmp	r5, r3
 8014fec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014ff0:	f84c 1b04 	str.w	r1, [ip], #4
 8014ff4:	dcec      	bgt.n	8014fd0 <__multadd+0x12>
 8014ff6:	b1d7      	cbz	r7, 801502e <__multadd+0x70>
 8014ff8:	68a3      	ldr	r3, [r4, #8]
 8014ffa:	42ab      	cmp	r3, r5
 8014ffc:	dc12      	bgt.n	8015024 <__multadd+0x66>
 8014ffe:	6861      	ldr	r1, [r4, #4]
 8015000:	4630      	mov	r0, r6
 8015002:	3101      	adds	r1, #1
 8015004:	f7ff ff90 	bl	8014f28 <_Balloc>
 8015008:	6922      	ldr	r2, [r4, #16]
 801500a:	3202      	adds	r2, #2
 801500c:	f104 010c 	add.w	r1, r4, #12
 8015010:	4680      	mov	r8, r0
 8015012:	0092      	lsls	r2, r2, #2
 8015014:	300c      	adds	r0, #12
 8015016:	f7fc fd21 	bl	8011a5c <memcpy>
 801501a:	4621      	mov	r1, r4
 801501c:	4630      	mov	r0, r6
 801501e:	f7ff ffb7 	bl	8014f90 <_Bfree>
 8015022:	4644      	mov	r4, r8
 8015024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015028:	3501      	adds	r5, #1
 801502a:	615f      	str	r7, [r3, #20]
 801502c:	6125      	str	r5, [r4, #16]
 801502e:	4620      	mov	r0, r4
 8015030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015034 <__s2b>:
 8015034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015038:	460c      	mov	r4, r1
 801503a:	4615      	mov	r5, r2
 801503c:	461f      	mov	r7, r3
 801503e:	2209      	movs	r2, #9
 8015040:	3308      	adds	r3, #8
 8015042:	4606      	mov	r6, r0
 8015044:	fb93 f3f2 	sdiv	r3, r3, r2
 8015048:	2100      	movs	r1, #0
 801504a:	2201      	movs	r2, #1
 801504c:	429a      	cmp	r2, r3
 801504e:	db20      	blt.n	8015092 <__s2b+0x5e>
 8015050:	4630      	mov	r0, r6
 8015052:	f7ff ff69 	bl	8014f28 <_Balloc>
 8015056:	9b08      	ldr	r3, [sp, #32]
 8015058:	6143      	str	r3, [r0, #20]
 801505a:	2d09      	cmp	r5, #9
 801505c:	f04f 0301 	mov.w	r3, #1
 8015060:	6103      	str	r3, [r0, #16]
 8015062:	dd19      	ble.n	8015098 <__s2b+0x64>
 8015064:	f104 0809 	add.w	r8, r4, #9
 8015068:	46c1      	mov	r9, r8
 801506a:	442c      	add	r4, r5
 801506c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015070:	4601      	mov	r1, r0
 8015072:	3b30      	subs	r3, #48	; 0x30
 8015074:	220a      	movs	r2, #10
 8015076:	4630      	mov	r0, r6
 8015078:	f7ff ffa1 	bl	8014fbe <__multadd>
 801507c:	45a1      	cmp	r9, r4
 801507e:	d1f5      	bne.n	801506c <__s2b+0x38>
 8015080:	eb08 0405 	add.w	r4, r8, r5
 8015084:	3c08      	subs	r4, #8
 8015086:	1b2d      	subs	r5, r5, r4
 8015088:	1963      	adds	r3, r4, r5
 801508a:	42bb      	cmp	r3, r7
 801508c:	db07      	blt.n	801509e <__s2b+0x6a>
 801508e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015092:	0052      	lsls	r2, r2, #1
 8015094:	3101      	adds	r1, #1
 8015096:	e7d9      	b.n	801504c <__s2b+0x18>
 8015098:	340a      	adds	r4, #10
 801509a:	2509      	movs	r5, #9
 801509c:	e7f3      	b.n	8015086 <__s2b+0x52>
 801509e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80150a2:	4601      	mov	r1, r0
 80150a4:	3b30      	subs	r3, #48	; 0x30
 80150a6:	220a      	movs	r2, #10
 80150a8:	4630      	mov	r0, r6
 80150aa:	f7ff ff88 	bl	8014fbe <__multadd>
 80150ae:	e7eb      	b.n	8015088 <__s2b+0x54>

080150b0 <__hi0bits>:
 80150b0:	0c02      	lsrs	r2, r0, #16
 80150b2:	0412      	lsls	r2, r2, #16
 80150b4:	4603      	mov	r3, r0
 80150b6:	b9b2      	cbnz	r2, 80150e6 <__hi0bits+0x36>
 80150b8:	0403      	lsls	r3, r0, #16
 80150ba:	2010      	movs	r0, #16
 80150bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80150c0:	bf04      	itt	eq
 80150c2:	021b      	lsleq	r3, r3, #8
 80150c4:	3008      	addeq	r0, #8
 80150c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80150ca:	bf04      	itt	eq
 80150cc:	011b      	lsleq	r3, r3, #4
 80150ce:	3004      	addeq	r0, #4
 80150d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80150d4:	bf04      	itt	eq
 80150d6:	009b      	lsleq	r3, r3, #2
 80150d8:	3002      	addeq	r0, #2
 80150da:	2b00      	cmp	r3, #0
 80150dc:	db06      	blt.n	80150ec <__hi0bits+0x3c>
 80150de:	005b      	lsls	r3, r3, #1
 80150e0:	d503      	bpl.n	80150ea <__hi0bits+0x3a>
 80150e2:	3001      	adds	r0, #1
 80150e4:	4770      	bx	lr
 80150e6:	2000      	movs	r0, #0
 80150e8:	e7e8      	b.n	80150bc <__hi0bits+0xc>
 80150ea:	2020      	movs	r0, #32
 80150ec:	4770      	bx	lr

080150ee <__lo0bits>:
 80150ee:	6803      	ldr	r3, [r0, #0]
 80150f0:	f013 0207 	ands.w	r2, r3, #7
 80150f4:	4601      	mov	r1, r0
 80150f6:	d00b      	beq.n	8015110 <__lo0bits+0x22>
 80150f8:	07da      	lsls	r2, r3, #31
 80150fa:	d423      	bmi.n	8015144 <__lo0bits+0x56>
 80150fc:	0798      	lsls	r0, r3, #30
 80150fe:	bf49      	itett	mi
 8015100:	085b      	lsrmi	r3, r3, #1
 8015102:	089b      	lsrpl	r3, r3, #2
 8015104:	2001      	movmi	r0, #1
 8015106:	600b      	strmi	r3, [r1, #0]
 8015108:	bf5c      	itt	pl
 801510a:	600b      	strpl	r3, [r1, #0]
 801510c:	2002      	movpl	r0, #2
 801510e:	4770      	bx	lr
 8015110:	b298      	uxth	r0, r3
 8015112:	b9a8      	cbnz	r0, 8015140 <__lo0bits+0x52>
 8015114:	0c1b      	lsrs	r3, r3, #16
 8015116:	2010      	movs	r0, #16
 8015118:	f013 0fff 	tst.w	r3, #255	; 0xff
 801511c:	bf04      	itt	eq
 801511e:	0a1b      	lsreq	r3, r3, #8
 8015120:	3008      	addeq	r0, #8
 8015122:	071a      	lsls	r2, r3, #28
 8015124:	bf04      	itt	eq
 8015126:	091b      	lsreq	r3, r3, #4
 8015128:	3004      	addeq	r0, #4
 801512a:	079a      	lsls	r2, r3, #30
 801512c:	bf04      	itt	eq
 801512e:	089b      	lsreq	r3, r3, #2
 8015130:	3002      	addeq	r0, #2
 8015132:	07da      	lsls	r2, r3, #31
 8015134:	d402      	bmi.n	801513c <__lo0bits+0x4e>
 8015136:	085b      	lsrs	r3, r3, #1
 8015138:	d006      	beq.n	8015148 <__lo0bits+0x5a>
 801513a:	3001      	adds	r0, #1
 801513c:	600b      	str	r3, [r1, #0]
 801513e:	4770      	bx	lr
 8015140:	4610      	mov	r0, r2
 8015142:	e7e9      	b.n	8015118 <__lo0bits+0x2a>
 8015144:	2000      	movs	r0, #0
 8015146:	4770      	bx	lr
 8015148:	2020      	movs	r0, #32
 801514a:	4770      	bx	lr

0801514c <__i2b>:
 801514c:	b510      	push	{r4, lr}
 801514e:	460c      	mov	r4, r1
 8015150:	2101      	movs	r1, #1
 8015152:	f7ff fee9 	bl	8014f28 <_Balloc>
 8015156:	2201      	movs	r2, #1
 8015158:	6144      	str	r4, [r0, #20]
 801515a:	6102      	str	r2, [r0, #16]
 801515c:	bd10      	pop	{r4, pc}

0801515e <__multiply>:
 801515e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015162:	4614      	mov	r4, r2
 8015164:	690a      	ldr	r2, [r1, #16]
 8015166:	6923      	ldr	r3, [r4, #16]
 8015168:	429a      	cmp	r2, r3
 801516a:	bfb8      	it	lt
 801516c:	460b      	movlt	r3, r1
 801516e:	4688      	mov	r8, r1
 8015170:	bfbc      	itt	lt
 8015172:	46a0      	movlt	r8, r4
 8015174:	461c      	movlt	r4, r3
 8015176:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801517a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801517e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015182:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015186:	eb07 0609 	add.w	r6, r7, r9
 801518a:	42b3      	cmp	r3, r6
 801518c:	bfb8      	it	lt
 801518e:	3101      	addlt	r1, #1
 8015190:	f7ff feca 	bl	8014f28 <_Balloc>
 8015194:	f100 0514 	add.w	r5, r0, #20
 8015198:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801519c:	462b      	mov	r3, r5
 801519e:	2200      	movs	r2, #0
 80151a0:	4573      	cmp	r3, lr
 80151a2:	d316      	bcc.n	80151d2 <__multiply+0x74>
 80151a4:	f104 0214 	add.w	r2, r4, #20
 80151a8:	f108 0114 	add.w	r1, r8, #20
 80151ac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80151b0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80151b4:	9300      	str	r3, [sp, #0]
 80151b6:	9b00      	ldr	r3, [sp, #0]
 80151b8:	9201      	str	r2, [sp, #4]
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d80c      	bhi.n	80151d8 <__multiply+0x7a>
 80151be:	2e00      	cmp	r6, #0
 80151c0:	dd03      	ble.n	80151ca <__multiply+0x6c>
 80151c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d05d      	beq.n	8015286 <__multiply+0x128>
 80151ca:	6106      	str	r6, [r0, #16]
 80151cc:	b003      	add	sp, #12
 80151ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d2:	f843 2b04 	str.w	r2, [r3], #4
 80151d6:	e7e3      	b.n	80151a0 <__multiply+0x42>
 80151d8:	f8b2 b000 	ldrh.w	fp, [r2]
 80151dc:	f1bb 0f00 	cmp.w	fp, #0
 80151e0:	d023      	beq.n	801522a <__multiply+0xcc>
 80151e2:	4689      	mov	r9, r1
 80151e4:	46ac      	mov	ip, r5
 80151e6:	f04f 0800 	mov.w	r8, #0
 80151ea:	f859 4b04 	ldr.w	r4, [r9], #4
 80151ee:	f8dc a000 	ldr.w	sl, [ip]
 80151f2:	b2a3      	uxth	r3, r4
 80151f4:	fa1f fa8a 	uxth.w	sl, sl
 80151f8:	fb0b a303 	mla	r3, fp, r3, sl
 80151fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015200:	f8dc 4000 	ldr.w	r4, [ip]
 8015204:	4443      	add	r3, r8
 8015206:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801520a:	fb0b 840a 	mla	r4, fp, sl, r8
 801520e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015212:	46e2      	mov	sl, ip
 8015214:	b29b      	uxth	r3, r3
 8015216:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801521a:	454f      	cmp	r7, r9
 801521c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015220:	f84a 3b04 	str.w	r3, [sl], #4
 8015224:	d82b      	bhi.n	801527e <__multiply+0x120>
 8015226:	f8cc 8004 	str.w	r8, [ip, #4]
 801522a:	9b01      	ldr	r3, [sp, #4]
 801522c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015230:	3204      	adds	r2, #4
 8015232:	f1ba 0f00 	cmp.w	sl, #0
 8015236:	d020      	beq.n	801527a <__multiply+0x11c>
 8015238:	682b      	ldr	r3, [r5, #0]
 801523a:	4689      	mov	r9, r1
 801523c:	46a8      	mov	r8, r5
 801523e:	f04f 0b00 	mov.w	fp, #0
 8015242:	f8b9 c000 	ldrh.w	ip, [r9]
 8015246:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801524a:	fb0a 440c 	mla	r4, sl, ip, r4
 801524e:	445c      	add	r4, fp
 8015250:	46c4      	mov	ip, r8
 8015252:	b29b      	uxth	r3, r3
 8015254:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015258:	f84c 3b04 	str.w	r3, [ip], #4
 801525c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015260:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015264:	0c1b      	lsrs	r3, r3, #16
 8015266:	fb0a b303 	mla	r3, sl, r3, fp
 801526a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801526e:	454f      	cmp	r7, r9
 8015270:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015274:	d805      	bhi.n	8015282 <__multiply+0x124>
 8015276:	f8c8 3004 	str.w	r3, [r8, #4]
 801527a:	3504      	adds	r5, #4
 801527c:	e79b      	b.n	80151b6 <__multiply+0x58>
 801527e:	46d4      	mov	ip, sl
 8015280:	e7b3      	b.n	80151ea <__multiply+0x8c>
 8015282:	46e0      	mov	r8, ip
 8015284:	e7dd      	b.n	8015242 <__multiply+0xe4>
 8015286:	3e01      	subs	r6, #1
 8015288:	e799      	b.n	80151be <__multiply+0x60>
	...

0801528c <__pow5mult>:
 801528c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015290:	4615      	mov	r5, r2
 8015292:	f012 0203 	ands.w	r2, r2, #3
 8015296:	4606      	mov	r6, r0
 8015298:	460f      	mov	r7, r1
 801529a:	d007      	beq.n	80152ac <__pow5mult+0x20>
 801529c:	3a01      	subs	r2, #1
 801529e:	4c21      	ldr	r4, [pc, #132]	; (8015324 <__pow5mult+0x98>)
 80152a0:	2300      	movs	r3, #0
 80152a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80152a6:	f7ff fe8a 	bl	8014fbe <__multadd>
 80152aa:	4607      	mov	r7, r0
 80152ac:	10ad      	asrs	r5, r5, #2
 80152ae:	d035      	beq.n	801531c <__pow5mult+0x90>
 80152b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80152b2:	b93c      	cbnz	r4, 80152c4 <__pow5mult+0x38>
 80152b4:	2010      	movs	r0, #16
 80152b6:	f7fc fbc9 	bl	8011a4c <malloc>
 80152ba:	6270      	str	r0, [r6, #36]	; 0x24
 80152bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80152c0:	6004      	str	r4, [r0, #0]
 80152c2:	60c4      	str	r4, [r0, #12]
 80152c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80152c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80152cc:	b94c      	cbnz	r4, 80152e2 <__pow5mult+0x56>
 80152ce:	f240 2171 	movw	r1, #625	; 0x271
 80152d2:	4630      	mov	r0, r6
 80152d4:	f7ff ff3a 	bl	801514c <__i2b>
 80152d8:	2300      	movs	r3, #0
 80152da:	f8c8 0008 	str.w	r0, [r8, #8]
 80152de:	4604      	mov	r4, r0
 80152e0:	6003      	str	r3, [r0, #0]
 80152e2:	f04f 0800 	mov.w	r8, #0
 80152e6:	07eb      	lsls	r3, r5, #31
 80152e8:	d50a      	bpl.n	8015300 <__pow5mult+0x74>
 80152ea:	4639      	mov	r1, r7
 80152ec:	4622      	mov	r2, r4
 80152ee:	4630      	mov	r0, r6
 80152f0:	f7ff ff35 	bl	801515e <__multiply>
 80152f4:	4639      	mov	r1, r7
 80152f6:	4681      	mov	r9, r0
 80152f8:	4630      	mov	r0, r6
 80152fa:	f7ff fe49 	bl	8014f90 <_Bfree>
 80152fe:	464f      	mov	r7, r9
 8015300:	106d      	asrs	r5, r5, #1
 8015302:	d00b      	beq.n	801531c <__pow5mult+0x90>
 8015304:	6820      	ldr	r0, [r4, #0]
 8015306:	b938      	cbnz	r0, 8015318 <__pow5mult+0x8c>
 8015308:	4622      	mov	r2, r4
 801530a:	4621      	mov	r1, r4
 801530c:	4630      	mov	r0, r6
 801530e:	f7ff ff26 	bl	801515e <__multiply>
 8015312:	6020      	str	r0, [r4, #0]
 8015314:	f8c0 8000 	str.w	r8, [r0]
 8015318:	4604      	mov	r4, r0
 801531a:	e7e4      	b.n	80152e6 <__pow5mult+0x5a>
 801531c:	4638      	mov	r0, r7
 801531e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015322:	bf00      	nop
 8015324:	08017240 	.word	0x08017240

08015328 <__lshift>:
 8015328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801532c:	460c      	mov	r4, r1
 801532e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015332:	6923      	ldr	r3, [r4, #16]
 8015334:	6849      	ldr	r1, [r1, #4]
 8015336:	eb0a 0903 	add.w	r9, sl, r3
 801533a:	68a3      	ldr	r3, [r4, #8]
 801533c:	4607      	mov	r7, r0
 801533e:	4616      	mov	r6, r2
 8015340:	f109 0501 	add.w	r5, r9, #1
 8015344:	42ab      	cmp	r3, r5
 8015346:	db32      	blt.n	80153ae <__lshift+0x86>
 8015348:	4638      	mov	r0, r7
 801534a:	f7ff fded 	bl	8014f28 <_Balloc>
 801534e:	2300      	movs	r3, #0
 8015350:	4680      	mov	r8, r0
 8015352:	f100 0114 	add.w	r1, r0, #20
 8015356:	461a      	mov	r2, r3
 8015358:	4553      	cmp	r3, sl
 801535a:	db2b      	blt.n	80153b4 <__lshift+0x8c>
 801535c:	6920      	ldr	r0, [r4, #16]
 801535e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015362:	f104 0314 	add.w	r3, r4, #20
 8015366:	f016 021f 	ands.w	r2, r6, #31
 801536a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801536e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015372:	d025      	beq.n	80153c0 <__lshift+0x98>
 8015374:	f1c2 0e20 	rsb	lr, r2, #32
 8015378:	2000      	movs	r0, #0
 801537a:	681e      	ldr	r6, [r3, #0]
 801537c:	468a      	mov	sl, r1
 801537e:	4096      	lsls	r6, r2
 8015380:	4330      	orrs	r0, r6
 8015382:	f84a 0b04 	str.w	r0, [sl], #4
 8015386:	f853 0b04 	ldr.w	r0, [r3], #4
 801538a:	459c      	cmp	ip, r3
 801538c:	fa20 f00e 	lsr.w	r0, r0, lr
 8015390:	d814      	bhi.n	80153bc <__lshift+0x94>
 8015392:	6048      	str	r0, [r1, #4]
 8015394:	b108      	cbz	r0, 801539a <__lshift+0x72>
 8015396:	f109 0502 	add.w	r5, r9, #2
 801539a:	3d01      	subs	r5, #1
 801539c:	4638      	mov	r0, r7
 801539e:	f8c8 5010 	str.w	r5, [r8, #16]
 80153a2:	4621      	mov	r1, r4
 80153a4:	f7ff fdf4 	bl	8014f90 <_Bfree>
 80153a8:	4640      	mov	r0, r8
 80153aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153ae:	3101      	adds	r1, #1
 80153b0:	005b      	lsls	r3, r3, #1
 80153b2:	e7c7      	b.n	8015344 <__lshift+0x1c>
 80153b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80153b8:	3301      	adds	r3, #1
 80153ba:	e7cd      	b.n	8015358 <__lshift+0x30>
 80153bc:	4651      	mov	r1, sl
 80153be:	e7dc      	b.n	801537a <__lshift+0x52>
 80153c0:	3904      	subs	r1, #4
 80153c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80153c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80153ca:	459c      	cmp	ip, r3
 80153cc:	d8f9      	bhi.n	80153c2 <__lshift+0x9a>
 80153ce:	e7e4      	b.n	801539a <__lshift+0x72>

080153d0 <__mcmp>:
 80153d0:	6903      	ldr	r3, [r0, #16]
 80153d2:	690a      	ldr	r2, [r1, #16]
 80153d4:	1a9b      	subs	r3, r3, r2
 80153d6:	b530      	push	{r4, r5, lr}
 80153d8:	d10c      	bne.n	80153f4 <__mcmp+0x24>
 80153da:	0092      	lsls	r2, r2, #2
 80153dc:	3014      	adds	r0, #20
 80153de:	3114      	adds	r1, #20
 80153e0:	1884      	adds	r4, r0, r2
 80153e2:	4411      	add	r1, r2
 80153e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80153e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80153ec:	4295      	cmp	r5, r2
 80153ee:	d003      	beq.n	80153f8 <__mcmp+0x28>
 80153f0:	d305      	bcc.n	80153fe <__mcmp+0x2e>
 80153f2:	2301      	movs	r3, #1
 80153f4:	4618      	mov	r0, r3
 80153f6:	bd30      	pop	{r4, r5, pc}
 80153f8:	42a0      	cmp	r0, r4
 80153fa:	d3f3      	bcc.n	80153e4 <__mcmp+0x14>
 80153fc:	e7fa      	b.n	80153f4 <__mcmp+0x24>
 80153fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015402:	e7f7      	b.n	80153f4 <__mcmp+0x24>

08015404 <__mdiff>:
 8015404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015408:	460d      	mov	r5, r1
 801540a:	4607      	mov	r7, r0
 801540c:	4611      	mov	r1, r2
 801540e:	4628      	mov	r0, r5
 8015410:	4614      	mov	r4, r2
 8015412:	f7ff ffdd 	bl	80153d0 <__mcmp>
 8015416:	1e06      	subs	r6, r0, #0
 8015418:	d108      	bne.n	801542c <__mdiff+0x28>
 801541a:	4631      	mov	r1, r6
 801541c:	4638      	mov	r0, r7
 801541e:	f7ff fd83 	bl	8014f28 <_Balloc>
 8015422:	2301      	movs	r3, #1
 8015424:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801542c:	bfa4      	itt	ge
 801542e:	4623      	movge	r3, r4
 8015430:	462c      	movge	r4, r5
 8015432:	4638      	mov	r0, r7
 8015434:	6861      	ldr	r1, [r4, #4]
 8015436:	bfa6      	itte	ge
 8015438:	461d      	movge	r5, r3
 801543a:	2600      	movge	r6, #0
 801543c:	2601      	movlt	r6, #1
 801543e:	f7ff fd73 	bl	8014f28 <_Balloc>
 8015442:	692b      	ldr	r3, [r5, #16]
 8015444:	60c6      	str	r6, [r0, #12]
 8015446:	6926      	ldr	r6, [r4, #16]
 8015448:	f105 0914 	add.w	r9, r5, #20
 801544c:	f104 0214 	add.w	r2, r4, #20
 8015450:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015454:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015458:	f100 0514 	add.w	r5, r0, #20
 801545c:	f04f 0e00 	mov.w	lr, #0
 8015460:	f852 ab04 	ldr.w	sl, [r2], #4
 8015464:	f859 4b04 	ldr.w	r4, [r9], #4
 8015468:	fa1e f18a 	uxtah	r1, lr, sl
 801546c:	b2a3      	uxth	r3, r4
 801546e:	1ac9      	subs	r1, r1, r3
 8015470:	0c23      	lsrs	r3, r4, #16
 8015472:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015476:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801547a:	b289      	uxth	r1, r1
 801547c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015480:	45c8      	cmp	r8, r9
 8015482:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015486:	4694      	mov	ip, r2
 8015488:	f845 3b04 	str.w	r3, [r5], #4
 801548c:	d8e8      	bhi.n	8015460 <__mdiff+0x5c>
 801548e:	45bc      	cmp	ip, r7
 8015490:	d304      	bcc.n	801549c <__mdiff+0x98>
 8015492:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015496:	b183      	cbz	r3, 80154ba <__mdiff+0xb6>
 8015498:	6106      	str	r6, [r0, #16]
 801549a:	e7c5      	b.n	8015428 <__mdiff+0x24>
 801549c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80154a0:	fa1e f381 	uxtah	r3, lr, r1
 80154a4:	141a      	asrs	r2, r3, #16
 80154a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80154b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80154b4:	f845 3b04 	str.w	r3, [r5], #4
 80154b8:	e7e9      	b.n	801548e <__mdiff+0x8a>
 80154ba:	3e01      	subs	r6, #1
 80154bc:	e7e9      	b.n	8015492 <__mdiff+0x8e>
	...

080154c0 <__ulp>:
 80154c0:	4b12      	ldr	r3, [pc, #72]	; (801550c <__ulp+0x4c>)
 80154c2:	ee10 2a90 	vmov	r2, s1
 80154c6:	401a      	ands	r2, r3
 80154c8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	dd04      	ble.n	80154da <__ulp+0x1a>
 80154d0:	2000      	movs	r0, #0
 80154d2:	4619      	mov	r1, r3
 80154d4:	ec41 0b10 	vmov	d0, r0, r1
 80154d8:	4770      	bx	lr
 80154da:	425b      	negs	r3, r3
 80154dc:	151b      	asrs	r3, r3, #20
 80154de:	2b13      	cmp	r3, #19
 80154e0:	f04f 0000 	mov.w	r0, #0
 80154e4:	f04f 0100 	mov.w	r1, #0
 80154e8:	dc04      	bgt.n	80154f4 <__ulp+0x34>
 80154ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80154ee:	fa42 f103 	asr.w	r1, r2, r3
 80154f2:	e7ef      	b.n	80154d4 <__ulp+0x14>
 80154f4:	3b14      	subs	r3, #20
 80154f6:	2b1e      	cmp	r3, #30
 80154f8:	f04f 0201 	mov.w	r2, #1
 80154fc:	bfda      	itte	le
 80154fe:	f1c3 031f 	rsble	r3, r3, #31
 8015502:	fa02 f303 	lslle.w	r3, r2, r3
 8015506:	4613      	movgt	r3, r2
 8015508:	4618      	mov	r0, r3
 801550a:	e7e3      	b.n	80154d4 <__ulp+0x14>
 801550c:	7ff00000 	.word	0x7ff00000

08015510 <__b2d>:
 8015510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015512:	6905      	ldr	r5, [r0, #16]
 8015514:	f100 0714 	add.w	r7, r0, #20
 8015518:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801551c:	1f2e      	subs	r6, r5, #4
 801551e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015522:	4620      	mov	r0, r4
 8015524:	f7ff fdc4 	bl	80150b0 <__hi0bits>
 8015528:	f1c0 0320 	rsb	r3, r0, #32
 801552c:	280a      	cmp	r0, #10
 801552e:	600b      	str	r3, [r1, #0]
 8015530:	f8df c074 	ldr.w	ip, [pc, #116]	; 80155a8 <__b2d+0x98>
 8015534:	dc14      	bgt.n	8015560 <__b2d+0x50>
 8015536:	f1c0 0e0b 	rsb	lr, r0, #11
 801553a:	fa24 f10e 	lsr.w	r1, r4, lr
 801553e:	42b7      	cmp	r7, r6
 8015540:	ea41 030c 	orr.w	r3, r1, ip
 8015544:	bf34      	ite	cc
 8015546:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801554a:	2100      	movcs	r1, #0
 801554c:	3015      	adds	r0, #21
 801554e:	fa04 f000 	lsl.w	r0, r4, r0
 8015552:	fa21 f10e 	lsr.w	r1, r1, lr
 8015556:	ea40 0201 	orr.w	r2, r0, r1
 801555a:	ec43 2b10 	vmov	d0, r2, r3
 801555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015560:	42b7      	cmp	r7, r6
 8015562:	bf3a      	itte	cc
 8015564:	f1a5 0608 	subcc.w	r6, r5, #8
 8015568:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801556c:	2100      	movcs	r1, #0
 801556e:	380b      	subs	r0, #11
 8015570:	d015      	beq.n	801559e <__b2d+0x8e>
 8015572:	4084      	lsls	r4, r0
 8015574:	f1c0 0520 	rsb	r5, r0, #32
 8015578:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801557c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015580:	42be      	cmp	r6, r7
 8015582:	fa21 fc05 	lsr.w	ip, r1, r5
 8015586:	ea44 030c 	orr.w	r3, r4, ip
 801558a:	bf8c      	ite	hi
 801558c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015590:	2400      	movls	r4, #0
 8015592:	fa01 f000 	lsl.w	r0, r1, r0
 8015596:	40ec      	lsrs	r4, r5
 8015598:	ea40 0204 	orr.w	r2, r0, r4
 801559c:	e7dd      	b.n	801555a <__b2d+0x4a>
 801559e:	ea44 030c 	orr.w	r3, r4, ip
 80155a2:	460a      	mov	r2, r1
 80155a4:	e7d9      	b.n	801555a <__b2d+0x4a>
 80155a6:	bf00      	nop
 80155a8:	3ff00000 	.word	0x3ff00000

080155ac <__d2b>:
 80155ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80155b0:	460e      	mov	r6, r1
 80155b2:	2101      	movs	r1, #1
 80155b4:	ec59 8b10 	vmov	r8, r9, d0
 80155b8:	4615      	mov	r5, r2
 80155ba:	f7ff fcb5 	bl	8014f28 <_Balloc>
 80155be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80155c2:	4607      	mov	r7, r0
 80155c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80155c8:	bb34      	cbnz	r4, 8015618 <__d2b+0x6c>
 80155ca:	9301      	str	r3, [sp, #4]
 80155cc:	f1b8 0300 	subs.w	r3, r8, #0
 80155d0:	d027      	beq.n	8015622 <__d2b+0x76>
 80155d2:	a802      	add	r0, sp, #8
 80155d4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80155d8:	f7ff fd89 	bl	80150ee <__lo0bits>
 80155dc:	9900      	ldr	r1, [sp, #0]
 80155de:	b1f0      	cbz	r0, 801561e <__d2b+0x72>
 80155e0:	9a01      	ldr	r2, [sp, #4]
 80155e2:	f1c0 0320 	rsb	r3, r0, #32
 80155e6:	fa02 f303 	lsl.w	r3, r2, r3
 80155ea:	430b      	orrs	r3, r1
 80155ec:	40c2      	lsrs	r2, r0
 80155ee:	617b      	str	r3, [r7, #20]
 80155f0:	9201      	str	r2, [sp, #4]
 80155f2:	9b01      	ldr	r3, [sp, #4]
 80155f4:	61bb      	str	r3, [r7, #24]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	bf14      	ite	ne
 80155fa:	2102      	movne	r1, #2
 80155fc:	2101      	moveq	r1, #1
 80155fe:	6139      	str	r1, [r7, #16]
 8015600:	b1c4      	cbz	r4, 8015634 <__d2b+0x88>
 8015602:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015606:	4404      	add	r4, r0
 8015608:	6034      	str	r4, [r6, #0]
 801560a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801560e:	6028      	str	r0, [r5, #0]
 8015610:	4638      	mov	r0, r7
 8015612:	b003      	add	sp, #12
 8015614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801561c:	e7d5      	b.n	80155ca <__d2b+0x1e>
 801561e:	6179      	str	r1, [r7, #20]
 8015620:	e7e7      	b.n	80155f2 <__d2b+0x46>
 8015622:	a801      	add	r0, sp, #4
 8015624:	f7ff fd63 	bl	80150ee <__lo0bits>
 8015628:	9b01      	ldr	r3, [sp, #4]
 801562a:	617b      	str	r3, [r7, #20]
 801562c:	2101      	movs	r1, #1
 801562e:	6139      	str	r1, [r7, #16]
 8015630:	3020      	adds	r0, #32
 8015632:	e7e5      	b.n	8015600 <__d2b+0x54>
 8015634:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801563c:	6030      	str	r0, [r6, #0]
 801563e:	6918      	ldr	r0, [r3, #16]
 8015640:	f7ff fd36 	bl	80150b0 <__hi0bits>
 8015644:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015648:	e7e1      	b.n	801560e <__d2b+0x62>

0801564a <__ratio>:
 801564a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801564e:	4688      	mov	r8, r1
 8015650:	4669      	mov	r1, sp
 8015652:	4681      	mov	r9, r0
 8015654:	f7ff ff5c 	bl	8015510 <__b2d>
 8015658:	a901      	add	r1, sp, #4
 801565a:	4640      	mov	r0, r8
 801565c:	ec57 6b10 	vmov	r6, r7, d0
 8015660:	ee10 4a10 	vmov	r4, s0
 8015664:	f7ff ff54 	bl	8015510 <__b2d>
 8015668:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801566c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015670:	eba3 0c02 	sub.w	ip, r3, r2
 8015674:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015678:	1a9b      	subs	r3, r3, r2
 801567a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801567e:	ec51 0b10 	vmov	r0, r1, d0
 8015682:	2b00      	cmp	r3, #0
 8015684:	ee10 aa10 	vmov	sl, s0
 8015688:	bfce      	itee	gt
 801568a:	463a      	movgt	r2, r7
 801568c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015690:	460a      	movle	r2, r1
 8015692:	463d      	mov	r5, r7
 8015694:	468b      	mov	fp, r1
 8015696:	bfcc      	ite	gt
 8015698:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801569c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80156a0:	ec45 4b17 	vmov	d7, r4, r5
 80156a4:	ec4b ab16 	vmov	d6, sl, fp
 80156a8:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80156ac:	b003      	add	sp, #12
 80156ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080156b2 <__copybits>:
 80156b2:	3901      	subs	r1, #1
 80156b4:	b510      	push	{r4, lr}
 80156b6:	1149      	asrs	r1, r1, #5
 80156b8:	6914      	ldr	r4, [r2, #16]
 80156ba:	3101      	adds	r1, #1
 80156bc:	f102 0314 	add.w	r3, r2, #20
 80156c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80156c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80156c8:	42a3      	cmp	r3, r4
 80156ca:	4602      	mov	r2, r0
 80156cc:	d303      	bcc.n	80156d6 <__copybits+0x24>
 80156ce:	2300      	movs	r3, #0
 80156d0:	428a      	cmp	r2, r1
 80156d2:	d305      	bcc.n	80156e0 <__copybits+0x2e>
 80156d4:	bd10      	pop	{r4, pc}
 80156d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80156da:	f840 2b04 	str.w	r2, [r0], #4
 80156de:	e7f3      	b.n	80156c8 <__copybits+0x16>
 80156e0:	f842 3b04 	str.w	r3, [r2], #4
 80156e4:	e7f4      	b.n	80156d0 <__copybits+0x1e>

080156e6 <__any_on>:
 80156e6:	f100 0214 	add.w	r2, r0, #20
 80156ea:	6900      	ldr	r0, [r0, #16]
 80156ec:	114b      	asrs	r3, r1, #5
 80156ee:	4298      	cmp	r0, r3
 80156f0:	b510      	push	{r4, lr}
 80156f2:	db11      	blt.n	8015718 <__any_on+0x32>
 80156f4:	dd0a      	ble.n	801570c <__any_on+0x26>
 80156f6:	f011 011f 	ands.w	r1, r1, #31
 80156fa:	d007      	beq.n	801570c <__any_on+0x26>
 80156fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015700:	fa24 f001 	lsr.w	r0, r4, r1
 8015704:	fa00 f101 	lsl.w	r1, r0, r1
 8015708:	428c      	cmp	r4, r1
 801570a:	d10b      	bne.n	8015724 <__any_on+0x3e>
 801570c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015710:	4293      	cmp	r3, r2
 8015712:	d803      	bhi.n	801571c <__any_on+0x36>
 8015714:	2000      	movs	r0, #0
 8015716:	bd10      	pop	{r4, pc}
 8015718:	4603      	mov	r3, r0
 801571a:	e7f7      	b.n	801570c <__any_on+0x26>
 801571c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015720:	2900      	cmp	r1, #0
 8015722:	d0f5      	beq.n	8015710 <__any_on+0x2a>
 8015724:	2001      	movs	r0, #1
 8015726:	e7f6      	b.n	8015716 <__any_on+0x30>

08015728 <__ssputs_r>:
 8015728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801572c:	688e      	ldr	r6, [r1, #8]
 801572e:	429e      	cmp	r6, r3
 8015730:	4682      	mov	sl, r0
 8015732:	460c      	mov	r4, r1
 8015734:	4690      	mov	r8, r2
 8015736:	4699      	mov	r9, r3
 8015738:	d837      	bhi.n	80157aa <__ssputs_r+0x82>
 801573a:	898a      	ldrh	r2, [r1, #12]
 801573c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015740:	d031      	beq.n	80157a6 <__ssputs_r+0x7e>
 8015742:	6825      	ldr	r5, [r4, #0]
 8015744:	6909      	ldr	r1, [r1, #16]
 8015746:	1a6f      	subs	r7, r5, r1
 8015748:	6965      	ldr	r5, [r4, #20]
 801574a:	2302      	movs	r3, #2
 801574c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015750:	fb95 f5f3 	sdiv	r5, r5, r3
 8015754:	f109 0301 	add.w	r3, r9, #1
 8015758:	443b      	add	r3, r7
 801575a:	429d      	cmp	r5, r3
 801575c:	bf38      	it	cc
 801575e:	461d      	movcc	r5, r3
 8015760:	0553      	lsls	r3, r2, #21
 8015762:	d530      	bpl.n	80157c6 <__ssputs_r+0x9e>
 8015764:	4629      	mov	r1, r5
 8015766:	f7fc f9e9 	bl	8011b3c <_malloc_r>
 801576a:	4606      	mov	r6, r0
 801576c:	b950      	cbnz	r0, 8015784 <__ssputs_r+0x5c>
 801576e:	230c      	movs	r3, #12
 8015770:	f8ca 3000 	str.w	r3, [sl]
 8015774:	89a3      	ldrh	r3, [r4, #12]
 8015776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801577a:	81a3      	strh	r3, [r4, #12]
 801577c:	f04f 30ff 	mov.w	r0, #4294967295
 8015780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015784:	463a      	mov	r2, r7
 8015786:	6921      	ldr	r1, [r4, #16]
 8015788:	f7fc f968 	bl	8011a5c <memcpy>
 801578c:	89a3      	ldrh	r3, [r4, #12]
 801578e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015796:	81a3      	strh	r3, [r4, #12]
 8015798:	6126      	str	r6, [r4, #16]
 801579a:	6165      	str	r5, [r4, #20]
 801579c:	443e      	add	r6, r7
 801579e:	1bed      	subs	r5, r5, r7
 80157a0:	6026      	str	r6, [r4, #0]
 80157a2:	60a5      	str	r5, [r4, #8]
 80157a4:	464e      	mov	r6, r9
 80157a6:	454e      	cmp	r6, r9
 80157a8:	d900      	bls.n	80157ac <__ssputs_r+0x84>
 80157aa:	464e      	mov	r6, r9
 80157ac:	4632      	mov	r2, r6
 80157ae:	4641      	mov	r1, r8
 80157b0:	6820      	ldr	r0, [r4, #0]
 80157b2:	f000 fe99 	bl	80164e8 <memmove>
 80157b6:	68a3      	ldr	r3, [r4, #8]
 80157b8:	1b9b      	subs	r3, r3, r6
 80157ba:	60a3      	str	r3, [r4, #8]
 80157bc:	6823      	ldr	r3, [r4, #0]
 80157be:	441e      	add	r6, r3
 80157c0:	6026      	str	r6, [r4, #0]
 80157c2:	2000      	movs	r0, #0
 80157c4:	e7dc      	b.n	8015780 <__ssputs_r+0x58>
 80157c6:	462a      	mov	r2, r5
 80157c8:	f000 fea7 	bl	801651a <_realloc_r>
 80157cc:	4606      	mov	r6, r0
 80157ce:	2800      	cmp	r0, #0
 80157d0:	d1e2      	bne.n	8015798 <__ssputs_r+0x70>
 80157d2:	6921      	ldr	r1, [r4, #16]
 80157d4:	4650      	mov	r0, sl
 80157d6:	f7fc f963 	bl	8011aa0 <_free_r>
 80157da:	e7c8      	b.n	801576e <__ssputs_r+0x46>

080157dc <_svfiprintf_r>:
 80157dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e0:	461d      	mov	r5, r3
 80157e2:	898b      	ldrh	r3, [r1, #12]
 80157e4:	061f      	lsls	r7, r3, #24
 80157e6:	b09d      	sub	sp, #116	; 0x74
 80157e8:	4680      	mov	r8, r0
 80157ea:	460c      	mov	r4, r1
 80157ec:	4616      	mov	r6, r2
 80157ee:	d50f      	bpl.n	8015810 <_svfiprintf_r+0x34>
 80157f0:	690b      	ldr	r3, [r1, #16]
 80157f2:	b96b      	cbnz	r3, 8015810 <_svfiprintf_r+0x34>
 80157f4:	2140      	movs	r1, #64	; 0x40
 80157f6:	f7fc f9a1 	bl	8011b3c <_malloc_r>
 80157fa:	6020      	str	r0, [r4, #0]
 80157fc:	6120      	str	r0, [r4, #16]
 80157fe:	b928      	cbnz	r0, 801580c <_svfiprintf_r+0x30>
 8015800:	230c      	movs	r3, #12
 8015802:	f8c8 3000 	str.w	r3, [r8]
 8015806:	f04f 30ff 	mov.w	r0, #4294967295
 801580a:	e0c8      	b.n	801599e <_svfiprintf_r+0x1c2>
 801580c:	2340      	movs	r3, #64	; 0x40
 801580e:	6163      	str	r3, [r4, #20]
 8015810:	2300      	movs	r3, #0
 8015812:	9309      	str	r3, [sp, #36]	; 0x24
 8015814:	2320      	movs	r3, #32
 8015816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801581a:	2330      	movs	r3, #48	; 0x30
 801581c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015820:	9503      	str	r5, [sp, #12]
 8015822:	f04f 0b01 	mov.w	fp, #1
 8015826:	4637      	mov	r7, r6
 8015828:	463d      	mov	r5, r7
 801582a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801582e:	b10b      	cbz	r3, 8015834 <_svfiprintf_r+0x58>
 8015830:	2b25      	cmp	r3, #37	; 0x25
 8015832:	d13e      	bne.n	80158b2 <_svfiprintf_r+0xd6>
 8015834:	ebb7 0a06 	subs.w	sl, r7, r6
 8015838:	d00b      	beq.n	8015852 <_svfiprintf_r+0x76>
 801583a:	4653      	mov	r3, sl
 801583c:	4632      	mov	r2, r6
 801583e:	4621      	mov	r1, r4
 8015840:	4640      	mov	r0, r8
 8015842:	f7ff ff71 	bl	8015728 <__ssputs_r>
 8015846:	3001      	adds	r0, #1
 8015848:	f000 80a4 	beq.w	8015994 <_svfiprintf_r+0x1b8>
 801584c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801584e:	4453      	add	r3, sl
 8015850:	9309      	str	r3, [sp, #36]	; 0x24
 8015852:	783b      	ldrb	r3, [r7, #0]
 8015854:	2b00      	cmp	r3, #0
 8015856:	f000 809d 	beq.w	8015994 <_svfiprintf_r+0x1b8>
 801585a:	2300      	movs	r3, #0
 801585c:	f04f 32ff 	mov.w	r2, #4294967295
 8015860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015864:	9304      	str	r3, [sp, #16]
 8015866:	9307      	str	r3, [sp, #28]
 8015868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801586c:	931a      	str	r3, [sp, #104]	; 0x68
 801586e:	462f      	mov	r7, r5
 8015870:	2205      	movs	r2, #5
 8015872:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015876:	4850      	ldr	r0, [pc, #320]	; (80159b8 <_svfiprintf_r+0x1dc>)
 8015878:	f7ea fcea 	bl	8000250 <memchr>
 801587c:	9b04      	ldr	r3, [sp, #16]
 801587e:	b9d0      	cbnz	r0, 80158b6 <_svfiprintf_r+0xda>
 8015880:	06d9      	lsls	r1, r3, #27
 8015882:	bf44      	itt	mi
 8015884:	2220      	movmi	r2, #32
 8015886:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801588a:	071a      	lsls	r2, r3, #28
 801588c:	bf44      	itt	mi
 801588e:	222b      	movmi	r2, #43	; 0x2b
 8015890:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015894:	782a      	ldrb	r2, [r5, #0]
 8015896:	2a2a      	cmp	r2, #42	; 0x2a
 8015898:	d015      	beq.n	80158c6 <_svfiprintf_r+0xea>
 801589a:	9a07      	ldr	r2, [sp, #28]
 801589c:	462f      	mov	r7, r5
 801589e:	2000      	movs	r0, #0
 80158a0:	250a      	movs	r5, #10
 80158a2:	4639      	mov	r1, r7
 80158a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158a8:	3b30      	subs	r3, #48	; 0x30
 80158aa:	2b09      	cmp	r3, #9
 80158ac:	d94d      	bls.n	801594a <_svfiprintf_r+0x16e>
 80158ae:	b1b8      	cbz	r0, 80158e0 <_svfiprintf_r+0x104>
 80158b0:	e00f      	b.n	80158d2 <_svfiprintf_r+0xf6>
 80158b2:	462f      	mov	r7, r5
 80158b4:	e7b8      	b.n	8015828 <_svfiprintf_r+0x4c>
 80158b6:	4a40      	ldr	r2, [pc, #256]	; (80159b8 <_svfiprintf_r+0x1dc>)
 80158b8:	1a80      	subs	r0, r0, r2
 80158ba:	fa0b f000 	lsl.w	r0, fp, r0
 80158be:	4318      	orrs	r0, r3
 80158c0:	9004      	str	r0, [sp, #16]
 80158c2:	463d      	mov	r5, r7
 80158c4:	e7d3      	b.n	801586e <_svfiprintf_r+0x92>
 80158c6:	9a03      	ldr	r2, [sp, #12]
 80158c8:	1d11      	adds	r1, r2, #4
 80158ca:	6812      	ldr	r2, [r2, #0]
 80158cc:	9103      	str	r1, [sp, #12]
 80158ce:	2a00      	cmp	r2, #0
 80158d0:	db01      	blt.n	80158d6 <_svfiprintf_r+0xfa>
 80158d2:	9207      	str	r2, [sp, #28]
 80158d4:	e004      	b.n	80158e0 <_svfiprintf_r+0x104>
 80158d6:	4252      	negs	r2, r2
 80158d8:	f043 0302 	orr.w	r3, r3, #2
 80158dc:	9207      	str	r2, [sp, #28]
 80158de:	9304      	str	r3, [sp, #16]
 80158e0:	783b      	ldrb	r3, [r7, #0]
 80158e2:	2b2e      	cmp	r3, #46	; 0x2e
 80158e4:	d10c      	bne.n	8015900 <_svfiprintf_r+0x124>
 80158e6:	787b      	ldrb	r3, [r7, #1]
 80158e8:	2b2a      	cmp	r3, #42	; 0x2a
 80158ea:	d133      	bne.n	8015954 <_svfiprintf_r+0x178>
 80158ec:	9b03      	ldr	r3, [sp, #12]
 80158ee:	1d1a      	adds	r2, r3, #4
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	9203      	str	r2, [sp, #12]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	bfb8      	it	lt
 80158f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80158fc:	3702      	adds	r7, #2
 80158fe:	9305      	str	r3, [sp, #20]
 8015900:	4d2e      	ldr	r5, [pc, #184]	; (80159bc <_svfiprintf_r+0x1e0>)
 8015902:	7839      	ldrb	r1, [r7, #0]
 8015904:	2203      	movs	r2, #3
 8015906:	4628      	mov	r0, r5
 8015908:	f7ea fca2 	bl	8000250 <memchr>
 801590c:	b138      	cbz	r0, 801591e <_svfiprintf_r+0x142>
 801590e:	2340      	movs	r3, #64	; 0x40
 8015910:	1b40      	subs	r0, r0, r5
 8015912:	fa03 f000 	lsl.w	r0, r3, r0
 8015916:	9b04      	ldr	r3, [sp, #16]
 8015918:	4303      	orrs	r3, r0
 801591a:	3701      	adds	r7, #1
 801591c:	9304      	str	r3, [sp, #16]
 801591e:	7839      	ldrb	r1, [r7, #0]
 8015920:	4827      	ldr	r0, [pc, #156]	; (80159c0 <_svfiprintf_r+0x1e4>)
 8015922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015926:	2206      	movs	r2, #6
 8015928:	1c7e      	adds	r6, r7, #1
 801592a:	f7ea fc91 	bl	8000250 <memchr>
 801592e:	2800      	cmp	r0, #0
 8015930:	d038      	beq.n	80159a4 <_svfiprintf_r+0x1c8>
 8015932:	4b24      	ldr	r3, [pc, #144]	; (80159c4 <_svfiprintf_r+0x1e8>)
 8015934:	bb13      	cbnz	r3, 801597c <_svfiprintf_r+0x1a0>
 8015936:	9b03      	ldr	r3, [sp, #12]
 8015938:	3307      	adds	r3, #7
 801593a:	f023 0307 	bic.w	r3, r3, #7
 801593e:	3308      	adds	r3, #8
 8015940:	9303      	str	r3, [sp, #12]
 8015942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015944:	444b      	add	r3, r9
 8015946:	9309      	str	r3, [sp, #36]	; 0x24
 8015948:	e76d      	b.n	8015826 <_svfiprintf_r+0x4a>
 801594a:	fb05 3202 	mla	r2, r5, r2, r3
 801594e:	2001      	movs	r0, #1
 8015950:	460f      	mov	r7, r1
 8015952:	e7a6      	b.n	80158a2 <_svfiprintf_r+0xc6>
 8015954:	2300      	movs	r3, #0
 8015956:	3701      	adds	r7, #1
 8015958:	9305      	str	r3, [sp, #20]
 801595a:	4619      	mov	r1, r3
 801595c:	250a      	movs	r5, #10
 801595e:	4638      	mov	r0, r7
 8015960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015964:	3a30      	subs	r2, #48	; 0x30
 8015966:	2a09      	cmp	r2, #9
 8015968:	d903      	bls.n	8015972 <_svfiprintf_r+0x196>
 801596a:	2b00      	cmp	r3, #0
 801596c:	d0c8      	beq.n	8015900 <_svfiprintf_r+0x124>
 801596e:	9105      	str	r1, [sp, #20]
 8015970:	e7c6      	b.n	8015900 <_svfiprintf_r+0x124>
 8015972:	fb05 2101 	mla	r1, r5, r1, r2
 8015976:	2301      	movs	r3, #1
 8015978:	4607      	mov	r7, r0
 801597a:	e7f0      	b.n	801595e <_svfiprintf_r+0x182>
 801597c:	ab03      	add	r3, sp, #12
 801597e:	9300      	str	r3, [sp, #0]
 8015980:	4622      	mov	r2, r4
 8015982:	4b11      	ldr	r3, [pc, #68]	; (80159c8 <_svfiprintf_r+0x1ec>)
 8015984:	a904      	add	r1, sp, #16
 8015986:	4640      	mov	r0, r8
 8015988:	f7fc f9ba 	bl	8011d00 <_printf_float>
 801598c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015990:	4681      	mov	r9, r0
 8015992:	d1d6      	bne.n	8015942 <_svfiprintf_r+0x166>
 8015994:	89a3      	ldrh	r3, [r4, #12]
 8015996:	065b      	lsls	r3, r3, #25
 8015998:	f53f af35 	bmi.w	8015806 <_svfiprintf_r+0x2a>
 801599c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801599e:	b01d      	add	sp, #116	; 0x74
 80159a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a4:	ab03      	add	r3, sp, #12
 80159a6:	9300      	str	r3, [sp, #0]
 80159a8:	4622      	mov	r2, r4
 80159aa:	4b07      	ldr	r3, [pc, #28]	; (80159c8 <_svfiprintf_r+0x1ec>)
 80159ac:	a904      	add	r1, sp, #16
 80159ae:	4640      	mov	r0, r8
 80159b0:	f7fc fc48 	bl	8012244 <_printf_i>
 80159b4:	e7ea      	b.n	801598c <_svfiprintf_r+0x1b0>
 80159b6:	bf00      	nop
 80159b8:	0801724c 	.word	0x0801724c
 80159bc:	08017252 	.word	0x08017252
 80159c0:	08017256 	.word	0x08017256
 80159c4:	08011d01 	.word	0x08011d01
 80159c8:	08015729 	.word	0x08015729

080159cc <_sungetc_r>:
 80159cc:	b538      	push	{r3, r4, r5, lr}
 80159ce:	1c4b      	adds	r3, r1, #1
 80159d0:	4614      	mov	r4, r2
 80159d2:	d103      	bne.n	80159dc <_sungetc_r+0x10>
 80159d4:	f04f 35ff 	mov.w	r5, #4294967295
 80159d8:	4628      	mov	r0, r5
 80159da:	bd38      	pop	{r3, r4, r5, pc}
 80159dc:	8993      	ldrh	r3, [r2, #12]
 80159de:	f023 0320 	bic.w	r3, r3, #32
 80159e2:	8193      	strh	r3, [r2, #12]
 80159e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159e6:	6852      	ldr	r2, [r2, #4]
 80159e8:	b2cd      	uxtb	r5, r1
 80159ea:	b18b      	cbz	r3, 8015a10 <_sungetc_r+0x44>
 80159ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80159ee:	4293      	cmp	r3, r2
 80159f0:	dd08      	ble.n	8015a04 <_sungetc_r+0x38>
 80159f2:	6823      	ldr	r3, [r4, #0]
 80159f4:	1e5a      	subs	r2, r3, #1
 80159f6:	6022      	str	r2, [r4, #0]
 80159f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80159fc:	6863      	ldr	r3, [r4, #4]
 80159fe:	3301      	adds	r3, #1
 8015a00:	6063      	str	r3, [r4, #4]
 8015a02:	e7e9      	b.n	80159d8 <_sungetc_r+0xc>
 8015a04:	4621      	mov	r1, r4
 8015a06:	f000 fd05 	bl	8016414 <__submore>
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d0f1      	beq.n	80159f2 <_sungetc_r+0x26>
 8015a0e:	e7e1      	b.n	80159d4 <_sungetc_r+0x8>
 8015a10:	6921      	ldr	r1, [r4, #16]
 8015a12:	6823      	ldr	r3, [r4, #0]
 8015a14:	b151      	cbz	r1, 8015a2c <_sungetc_r+0x60>
 8015a16:	4299      	cmp	r1, r3
 8015a18:	d208      	bcs.n	8015a2c <_sungetc_r+0x60>
 8015a1a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015a1e:	42a9      	cmp	r1, r5
 8015a20:	d104      	bne.n	8015a2c <_sungetc_r+0x60>
 8015a22:	3b01      	subs	r3, #1
 8015a24:	3201      	adds	r2, #1
 8015a26:	6023      	str	r3, [r4, #0]
 8015a28:	6062      	str	r2, [r4, #4]
 8015a2a:	e7d5      	b.n	80159d8 <_sungetc_r+0xc>
 8015a2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a34:	6363      	str	r3, [r4, #52]	; 0x34
 8015a36:	2303      	movs	r3, #3
 8015a38:	63a3      	str	r3, [r4, #56]	; 0x38
 8015a3a:	4623      	mov	r3, r4
 8015a3c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015a40:	6023      	str	r3, [r4, #0]
 8015a42:	2301      	movs	r3, #1
 8015a44:	e7dc      	b.n	8015a00 <_sungetc_r+0x34>

08015a46 <__ssrefill_r>:
 8015a46:	b510      	push	{r4, lr}
 8015a48:	460c      	mov	r4, r1
 8015a4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015a4c:	b169      	cbz	r1, 8015a6a <__ssrefill_r+0x24>
 8015a4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a52:	4299      	cmp	r1, r3
 8015a54:	d001      	beq.n	8015a5a <__ssrefill_r+0x14>
 8015a56:	f7fc f823 	bl	8011aa0 <_free_r>
 8015a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015a5c:	6063      	str	r3, [r4, #4]
 8015a5e:	2000      	movs	r0, #0
 8015a60:	6360      	str	r0, [r4, #52]	; 0x34
 8015a62:	b113      	cbz	r3, 8015a6a <__ssrefill_r+0x24>
 8015a64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015a66:	6023      	str	r3, [r4, #0]
 8015a68:	bd10      	pop	{r4, pc}
 8015a6a:	6923      	ldr	r3, [r4, #16]
 8015a6c:	6023      	str	r3, [r4, #0]
 8015a6e:	2300      	movs	r3, #0
 8015a70:	6063      	str	r3, [r4, #4]
 8015a72:	89a3      	ldrh	r3, [r4, #12]
 8015a74:	f043 0320 	orr.w	r3, r3, #32
 8015a78:	81a3      	strh	r3, [r4, #12]
 8015a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a7e:	e7f3      	b.n	8015a68 <__ssrefill_r+0x22>

08015a80 <__ssvfiscanf_r>:
 8015a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a84:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8015a88:	460c      	mov	r4, r1
 8015a8a:	2100      	movs	r1, #0
 8015a8c:	9144      	str	r1, [sp, #272]	; 0x110
 8015a8e:	9145      	str	r1, [sp, #276]	; 0x114
 8015a90:	499f      	ldr	r1, [pc, #636]	; (8015d10 <__ssvfiscanf_r+0x290>)
 8015a92:	91a0      	str	r1, [sp, #640]	; 0x280
 8015a94:	f10d 0804 	add.w	r8, sp, #4
 8015a98:	499e      	ldr	r1, [pc, #632]	; (8015d14 <__ssvfiscanf_r+0x294>)
 8015a9a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8015d18 <__ssvfiscanf_r+0x298>
 8015a9e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015aa2:	4606      	mov	r6, r0
 8015aa4:	4692      	mov	sl, r2
 8015aa6:	91a1      	str	r1, [sp, #644]	; 0x284
 8015aa8:	9300      	str	r3, [sp, #0]
 8015aaa:	270a      	movs	r7, #10
 8015aac:	f89a 3000 	ldrb.w	r3, [sl]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	f000 812a 	beq.w	8015d0a <__ssvfiscanf_r+0x28a>
 8015ab6:	4655      	mov	r5, sl
 8015ab8:	f7ff f98e 	bl	8014dd8 <__locale_ctype_ptr>
 8015abc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8015ac0:	4458      	add	r0, fp
 8015ac2:	7843      	ldrb	r3, [r0, #1]
 8015ac4:	f013 0308 	ands.w	r3, r3, #8
 8015ac8:	d01c      	beq.n	8015b04 <__ssvfiscanf_r+0x84>
 8015aca:	6863      	ldr	r3, [r4, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	dd12      	ble.n	8015af6 <__ssvfiscanf_r+0x76>
 8015ad0:	f7ff f982 	bl	8014dd8 <__locale_ctype_ptr>
 8015ad4:	6823      	ldr	r3, [r4, #0]
 8015ad6:	781a      	ldrb	r2, [r3, #0]
 8015ad8:	4410      	add	r0, r2
 8015ada:	7842      	ldrb	r2, [r0, #1]
 8015adc:	0712      	lsls	r2, r2, #28
 8015ade:	d401      	bmi.n	8015ae4 <__ssvfiscanf_r+0x64>
 8015ae0:	46aa      	mov	sl, r5
 8015ae2:	e7e3      	b.n	8015aac <__ssvfiscanf_r+0x2c>
 8015ae4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015ae6:	3201      	adds	r2, #1
 8015ae8:	9245      	str	r2, [sp, #276]	; 0x114
 8015aea:	6862      	ldr	r2, [r4, #4]
 8015aec:	3301      	adds	r3, #1
 8015aee:	3a01      	subs	r2, #1
 8015af0:	6062      	str	r2, [r4, #4]
 8015af2:	6023      	str	r3, [r4, #0]
 8015af4:	e7e9      	b.n	8015aca <__ssvfiscanf_r+0x4a>
 8015af6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015af8:	4621      	mov	r1, r4
 8015afa:	4630      	mov	r0, r6
 8015afc:	4798      	blx	r3
 8015afe:	2800      	cmp	r0, #0
 8015b00:	d0e6      	beq.n	8015ad0 <__ssvfiscanf_r+0x50>
 8015b02:	e7ed      	b.n	8015ae0 <__ssvfiscanf_r+0x60>
 8015b04:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8015b08:	f040 8082 	bne.w	8015c10 <__ssvfiscanf_r+0x190>
 8015b0c:	9343      	str	r3, [sp, #268]	; 0x10c
 8015b0e:	9341      	str	r3, [sp, #260]	; 0x104
 8015b10:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8015b14:	2b2a      	cmp	r3, #42	; 0x2a
 8015b16:	d103      	bne.n	8015b20 <__ssvfiscanf_r+0xa0>
 8015b18:	2310      	movs	r3, #16
 8015b1a:	9341      	str	r3, [sp, #260]	; 0x104
 8015b1c:	f10a 0502 	add.w	r5, sl, #2
 8015b20:	46aa      	mov	sl, r5
 8015b22:	f815 1b01 	ldrb.w	r1, [r5], #1
 8015b26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015b2a:	2a09      	cmp	r2, #9
 8015b2c:	d922      	bls.n	8015b74 <__ssvfiscanf_r+0xf4>
 8015b2e:	2203      	movs	r2, #3
 8015b30:	4879      	ldr	r0, [pc, #484]	; (8015d18 <__ssvfiscanf_r+0x298>)
 8015b32:	f7ea fb8d 	bl	8000250 <memchr>
 8015b36:	b138      	cbz	r0, 8015b48 <__ssvfiscanf_r+0xc8>
 8015b38:	eba0 0309 	sub.w	r3, r0, r9
 8015b3c:	2001      	movs	r0, #1
 8015b3e:	4098      	lsls	r0, r3
 8015b40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015b42:	4318      	orrs	r0, r3
 8015b44:	9041      	str	r0, [sp, #260]	; 0x104
 8015b46:	46aa      	mov	sl, r5
 8015b48:	f89a 3000 	ldrb.w	r3, [sl]
 8015b4c:	2b67      	cmp	r3, #103	; 0x67
 8015b4e:	f10a 0501 	add.w	r5, sl, #1
 8015b52:	d82b      	bhi.n	8015bac <__ssvfiscanf_r+0x12c>
 8015b54:	2b65      	cmp	r3, #101	; 0x65
 8015b56:	f080 809f 	bcs.w	8015c98 <__ssvfiscanf_r+0x218>
 8015b5a:	2b47      	cmp	r3, #71	; 0x47
 8015b5c:	d810      	bhi.n	8015b80 <__ssvfiscanf_r+0x100>
 8015b5e:	2b45      	cmp	r3, #69	; 0x45
 8015b60:	f080 809a 	bcs.w	8015c98 <__ssvfiscanf_r+0x218>
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d06c      	beq.n	8015c42 <__ssvfiscanf_r+0x1c2>
 8015b68:	2b25      	cmp	r3, #37	; 0x25
 8015b6a:	d051      	beq.n	8015c10 <__ssvfiscanf_r+0x190>
 8015b6c:	2303      	movs	r3, #3
 8015b6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8015b70:	9742      	str	r7, [sp, #264]	; 0x108
 8015b72:	e027      	b.n	8015bc4 <__ssvfiscanf_r+0x144>
 8015b74:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015b76:	fb07 1303 	mla	r3, r7, r3, r1
 8015b7a:	3b30      	subs	r3, #48	; 0x30
 8015b7c:	9343      	str	r3, [sp, #268]	; 0x10c
 8015b7e:	e7cf      	b.n	8015b20 <__ssvfiscanf_r+0xa0>
 8015b80:	2b5b      	cmp	r3, #91	; 0x5b
 8015b82:	d06a      	beq.n	8015c5a <__ssvfiscanf_r+0x1da>
 8015b84:	d80c      	bhi.n	8015ba0 <__ssvfiscanf_r+0x120>
 8015b86:	2b58      	cmp	r3, #88	; 0x58
 8015b88:	d1f0      	bne.n	8015b6c <__ssvfiscanf_r+0xec>
 8015b8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015b90:	9241      	str	r2, [sp, #260]	; 0x104
 8015b92:	2210      	movs	r2, #16
 8015b94:	9242      	str	r2, [sp, #264]	; 0x108
 8015b96:	2b6e      	cmp	r3, #110	; 0x6e
 8015b98:	bf8c      	ite	hi
 8015b9a:	2304      	movhi	r3, #4
 8015b9c:	2303      	movls	r3, #3
 8015b9e:	e010      	b.n	8015bc2 <__ssvfiscanf_r+0x142>
 8015ba0:	2b63      	cmp	r3, #99	; 0x63
 8015ba2:	d065      	beq.n	8015c70 <__ssvfiscanf_r+0x1f0>
 8015ba4:	2b64      	cmp	r3, #100	; 0x64
 8015ba6:	d1e1      	bne.n	8015b6c <__ssvfiscanf_r+0xec>
 8015ba8:	9742      	str	r7, [sp, #264]	; 0x108
 8015baa:	e7f4      	b.n	8015b96 <__ssvfiscanf_r+0x116>
 8015bac:	2b70      	cmp	r3, #112	; 0x70
 8015bae:	d04b      	beq.n	8015c48 <__ssvfiscanf_r+0x1c8>
 8015bb0:	d826      	bhi.n	8015c00 <__ssvfiscanf_r+0x180>
 8015bb2:	2b6e      	cmp	r3, #110	; 0x6e
 8015bb4:	d062      	beq.n	8015c7c <__ssvfiscanf_r+0x1fc>
 8015bb6:	d84c      	bhi.n	8015c52 <__ssvfiscanf_r+0x1d2>
 8015bb8:	2b69      	cmp	r3, #105	; 0x69
 8015bba:	d1d7      	bne.n	8015b6c <__ssvfiscanf_r+0xec>
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	9342      	str	r3, [sp, #264]	; 0x108
 8015bc0:	2303      	movs	r3, #3
 8015bc2:	9347      	str	r3, [sp, #284]	; 0x11c
 8015bc4:	6863      	ldr	r3, [r4, #4]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	dd68      	ble.n	8015c9c <__ssvfiscanf_r+0x21c>
 8015bca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015bcc:	0659      	lsls	r1, r3, #25
 8015bce:	d407      	bmi.n	8015be0 <__ssvfiscanf_r+0x160>
 8015bd0:	f7ff f902 	bl	8014dd8 <__locale_ctype_ptr>
 8015bd4:	6823      	ldr	r3, [r4, #0]
 8015bd6:	781a      	ldrb	r2, [r3, #0]
 8015bd8:	4410      	add	r0, r2
 8015bda:	7842      	ldrb	r2, [r0, #1]
 8015bdc:	0712      	lsls	r2, r2, #28
 8015bde:	d464      	bmi.n	8015caa <__ssvfiscanf_r+0x22a>
 8015be0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015be2:	2b02      	cmp	r3, #2
 8015be4:	dc73      	bgt.n	8015cce <__ssvfiscanf_r+0x24e>
 8015be6:	466b      	mov	r3, sp
 8015be8:	4622      	mov	r2, r4
 8015bea:	a941      	add	r1, sp, #260	; 0x104
 8015bec:	4630      	mov	r0, r6
 8015bee:	f000 f9d7 	bl	8015fa0 <_scanf_chars>
 8015bf2:	2801      	cmp	r0, #1
 8015bf4:	f000 8089 	beq.w	8015d0a <__ssvfiscanf_r+0x28a>
 8015bf8:	2802      	cmp	r0, #2
 8015bfa:	f47f af71 	bne.w	8015ae0 <__ssvfiscanf_r+0x60>
 8015bfe:	e01d      	b.n	8015c3c <__ssvfiscanf_r+0x1bc>
 8015c00:	2b75      	cmp	r3, #117	; 0x75
 8015c02:	d0d1      	beq.n	8015ba8 <__ssvfiscanf_r+0x128>
 8015c04:	2b78      	cmp	r3, #120	; 0x78
 8015c06:	d0c0      	beq.n	8015b8a <__ssvfiscanf_r+0x10a>
 8015c08:	2b73      	cmp	r3, #115	; 0x73
 8015c0a:	d1af      	bne.n	8015b6c <__ssvfiscanf_r+0xec>
 8015c0c:	2302      	movs	r3, #2
 8015c0e:	e7d8      	b.n	8015bc2 <__ssvfiscanf_r+0x142>
 8015c10:	6863      	ldr	r3, [r4, #4]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	dd0c      	ble.n	8015c30 <__ssvfiscanf_r+0x1b0>
 8015c16:	6823      	ldr	r3, [r4, #0]
 8015c18:	781a      	ldrb	r2, [r3, #0]
 8015c1a:	455a      	cmp	r2, fp
 8015c1c:	d175      	bne.n	8015d0a <__ssvfiscanf_r+0x28a>
 8015c1e:	3301      	adds	r3, #1
 8015c20:	6862      	ldr	r2, [r4, #4]
 8015c22:	6023      	str	r3, [r4, #0]
 8015c24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015c26:	3a01      	subs	r2, #1
 8015c28:	3301      	adds	r3, #1
 8015c2a:	6062      	str	r2, [r4, #4]
 8015c2c:	9345      	str	r3, [sp, #276]	; 0x114
 8015c2e:	e757      	b.n	8015ae0 <__ssvfiscanf_r+0x60>
 8015c30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015c32:	4621      	mov	r1, r4
 8015c34:	4630      	mov	r0, r6
 8015c36:	4798      	blx	r3
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	d0ec      	beq.n	8015c16 <__ssvfiscanf_r+0x196>
 8015c3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015c3e:	2800      	cmp	r0, #0
 8015c40:	d159      	bne.n	8015cf6 <__ssvfiscanf_r+0x276>
 8015c42:	f04f 30ff 	mov.w	r0, #4294967295
 8015c46:	e05c      	b.n	8015d02 <__ssvfiscanf_r+0x282>
 8015c48:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015c4a:	f042 0220 	orr.w	r2, r2, #32
 8015c4e:	9241      	str	r2, [sp, #260]	; 0x104
 8015c50:	e79b      	b.n	8015b8a <__ssvfiscanf_r+0x10a>
 8015c52:	2308      	movs	r3, #8
 8015c54:	9342      	str	r3, [sp, #264]	; 0x108
 8015c56:	2304      	movs	r3, #4
 8015c58:	e7b3      	b.n	8015bc2 <__ssvfiscanf_r+0x142>
 8015c5a:	4629      	mov	r1, r5
 8015c5c:	4640      	mov	r0, r8
 8015c5e:	f000 fb09 	bl	8016274 <__sccl>
 8015c62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c68:	9341      	str	r3, [sp, #260]	; 0x104
 8015c6a:	4605      	mov	r5, r0
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	e7a8      	b.n	8015bc2 <__ssvfiscanf_r+0x142>
 8015c70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c76:	9341      	str	r3, [sp, #260]	; 0x104
 8015c78:	2300      	movs	r3, #0
 8015c7a:	e7a2      	b.n	8015bc2 <__ssvfiscanf_r+0x142>
 8015c7c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015c7e:	06c3      	lsls	r3, r0, #27
 8015c80:	f53f af2e 	bmi.w	8015ae0 <__ssvfiscanf_r+0x60>
 8015c84:	9b00      	ldr	r3, [sp, #0]
 8015c86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015c88:	1d19      	adds	r1, r3, #4
 8015c8a:	9100      	str	r1, [sp, #0]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	07c0      	lsls	r0, r0, #31
 8015c90:	bf4c      	ite	mi
 8015c92:	801a      	strhmi	r2, [r3, #0]
 8015c94:	601a      	strpl	r2, [r3, #0]
 8015c96:	e723      	b.n	8015ae0 <__ssvfiscanf_r+0x60>
 8015c98:	2305      	movs	r3, #5
 8015c9a:	e792      	b.n	8015bc2 <__ssvfiscanf_r+0x142>
 8015c9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4630      	mov	r0, r6
 8015ca2:	4798      	blx	r3
 8015ca4:	2800      	cmp	r0, #0
 8015ca6:	d090      	beq.n	8015bca <__ssvfiscanf_r+0x14a>
 8015ca8:	e7c8      	b.n	8015c3c <__ssvfiscanf_r+0x1bc>
 8015caa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015cac:	3201      	adds	r2, #1
 8015cae:	9245      	str	r2, [sp, #276]	; 0x114
 8015cb0:	6862      	ldr	r2, [r4, #4]
 8015cb2:	3a01      	subs	r2, #1
 8015cb4:	2a00      	cmp	r2, #0
 8015cb6:	6062      	str	r2, [r4, #4]
 8015cb8:	dd02      	ble.n	8015cc0 <__ssvfiscanf_r+0x240>
 8015cba:	3301      	adds	r3, #1
 8015cbc:	6023      	str	r3, [r4, #0]
 8015cbe:	e787      	b.n	8015bd0 <__ssvfiscanf_r+0x150>
 8015cc0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015cc2:	4621      	mov	r1, r4
 8015cc4:	4630      	mov	r0, r6
 8015cc6:	4798      	blx	r3
 8015cc8:	2800      	cmp	r0, #0
 8015cca:	d081      	beq.n	8015bd0 <__ssvfiscanf_r+0x150>
 8015ccc:	e7b6      	b.n	8015c3c <__ssvfiscanf_r+0x1bc>
 8015cce:	2b04      	cmp	r3, #4
 8015cd0:	dc06      	bgt.n	8015ce0 <__ssvfiscanf_r+0x260>
 8015cd2:	466b      	mov	r3, sp
 8015cd4:	4622      	mov	r2, r4
 8015cd6:	a941      	add	r1, sp, #260	; 0x104
 8015cd8:	4630      	mov	r0, r6
 8015cda:	f000 f9c5 	bl	8016068 <_scanf_i>
 8015cde:	e788      	b.n	8015bf2 <__ssvfiscanf_r+0x172>
 8015ce0:	4b0e      	ldr	r3, [pc, #56]	; (8015d1c <__ssvfiscanf_r+0x29c>)
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	f43f aefc 	beq.w	8015ae0 <__ssvfiscanf_r+0x60>
 8015ce8:	466b      	mov	r3, sp
 8015cea:	4622      	mov	r2, r4
 8015cec:	a941      	add	r1, sp, #260	; 0x104
 8015cee:	4630      	mov	r0, r6
 8015cf0:	f7fc fbba 	bl	8012468 <_scanf_float>
 8015cf4:	e77d      	b.n	8015bf2 <__ssvfiscanf_r+0x172>
 8015cf6:	89a3      	ldrh	r3, [r4, #12]
 8015cf8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015cfc:	bf18      	it	ne
 8015cfe:	f04f 30ff 	movne.w	r0, #4294967295
 8015d02:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d0a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015d0c:	e7f9      	b.n	8015d02 <__ssvfiscanf_r+0x282>
 8015d0e:	bf00      	nop
 8015d10:	080159cd 	.word	0x080159cd
 8015d14:	08015a47 	.word	0x08015a47
 8015d18:	08017252 	.word	0x08017252
 8015d1c:	08012469 	.word	0x08012469

08015d20 <__sfputc_r>:
 8015d20:	6893      	ldr	r3, [r2, #8]
 8015d22:	3b01      	subs	r3, #1
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	b410      	push	{r4}
 8015d28:	6093      	str	r3, [r2, #8]
 8015d2a:	da08      	bge.n	8015d3e <__sfputc_r+0x1e>
 8015d2c:	6994      	ldr	r4, [r2, #24]
 8015d2e:	42a3      	cmp	r3, r4
 8015d30:	db01      	blt.n	8015d36 <__sfputc_r+0x16>
 8015d32:	290a      	cmp	r1, #10
 8015d34:	d103      	bne.n	8015d3e <__sfputc_r+0x1e>
 8015d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d3a:	f7fd bcef 	b.w	801371c <__swbuf_r>
 8015d3e:	6813      	ldr	r3, [r2, #0]
 8015d40:	1c58      	adds	r0, r3, #1
 8015d42:	6010      	str	r0, [r2, #0]
 8015d44:	7019      	strb	r1, [r3, #0]
 8015d46:	4608      	mov	r0, r1
 8015d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d4c:	4770      	bx	lr

08015d4e <__sfputs_r>:
 8015d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d50:	4606      	mov	r6, r0
 8015d52:	460f      	mov	r7, r1
 8015d54:	4614      	mov	r4, r2
 8015d56:	18d5      	adds	r5, r2, r3
 8015d58:	42ac      	cmp	r4, r5
 8015d5a:	d101      	bne.n	8015d60 <__sfputs_r+0x12>
 8015d5c:	2000      	movs	r0, #0
 8015d5e:	e007      	b.n	8015d70 <__sfputs_r+0x22>
 8015d60:	463a      	mov	r2, r7
 8015d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d66:	4630      	mov	r0, r6
 8015d68:	f7ff ffda 	bl	8015d20 <__sfputc_r>
 8015d6c:	1c43      	adds	r3, r0, #1
 8015d6e:	d1f3      	bne.n	8015d58 <__sfputs_r+0xa>
 8015d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015d74 <_vfiprintf_r>:
 8015d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d78:	460c      	mov	r4, r1
 8015d7a:	b09d      	sub	sp, #116	; 0x74
 8015d7c:	4617      	mov	r7, r2
 8015d7e:	461d      	mov	r5, r3
 8015d80:	4606      	mov	r6, r0
 8015d82:	b118      	cbz	r0, 8015d8c <_vfiprintf_r+0x18>
 8015d84:	6983      	ldr	r3, [r0, #24]
 8015d86:	b90b      	cbnz	r3, 8015d8c <_vfiprintf_r+0x18>
 8015d88:	f7fe fc72 	bl	8014670 <__sinit>
 8015d8c:	4b7c      	ldr	r3, [pc, #496]	; (8015f80 <_vfiprintf_r+0x20c>)
 8015d8e:	429c      	cmp	r4, r3
 8015d90:	d158      	bne.n	8015e44 <_vfiprintf_r+0xd0>
 8015d92:	6874      	ldr	r4, [r6, #4]
 8015d94:	89a3      	ldrh	r3, [r4, #12]
 8015d96:	0718      	lsls	r0, r3, #28
 8015d98:	d55e      	bpl.n	8015e58 <_vfiprintf_r+0xe4>
 8015d9a:	6923      	ldr	r3, [r4, #16]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d05b      	beq.n	8015e58 <_vfiprintf_r+0xe4>
 8015da0:	2300      	movs	r3, #0
 8015da2:	9309      	str	r3, [sp, #36]	; 0x24
 8015da4:	2320      	movs	r3, #32
 8015da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015daa:	2330      	movs	r3, #48	; 0x30
 8015dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015db0:	9503      	str	r5, [sp, #12]
 8015db2:	f04f 0b01 	mov.w	fp, #1
 8015db6:	46b8      	mov	r8, r7
 8015db8:	4645      	mov	r5, r8
 8015dba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015dbe:	b10b      	cbz	r3, 8015dc4 <_vfiprintf_r+0x50>
 8015dc0:	2b25      	cmp	r3, #37	; 0x25
 8015dc2:	d154      	bne.n	8015e6e <_vfiprintf_r+0xfa>
 8015dc4:	ebb8 0a07 	subs.w	sl, r8, r7
 8015dc8:	d00b      	beq.n	8015de2 <_vfiprintf_r+0x6e>
 8015dca:	4653      	mov	r3, sl
 8015dcc:	463a      	mov	r2, r7
 8015dce:	4621      	mov	r1, r4
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f7ff ffbc 	bl	8015d4e <__sfputs_r>
 8015dd6:	3001      	adds	r0, #1
 8015dd8:	f000 80c2 	beq.w	8015f60 <_vfiprintf_r+0x1ec>
 8015ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dde:	4453      	add	r3, sl
 8015de0:	9309      	str	r3, [sp, #36]	; 0x24
 8015de2:	f898 3000 	ldrb.w	r3, [r8]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	f000 80ba 	beq.w	8015f60 <_vfiprintf_r+0x1ec>
 8015dec:	2300      	movs	r3, #0
 8015dee:	f04f 32ff 	mov.w	r2, #4294967295
 8015df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015df6:	9304      	str	r3, [sp, #16]
 8015df8:	9307      	str	r3, [sp, #28]
 8015dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8015e00:	46a8      	mov	r8, r5
 8015e02:	2205      	movs	r2, #5
 8015e04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015e08:	485e      	ldr	r0, [pc, #376]	; (8015f84 <_vfiprintf_r+0x210>)
 8015e0a:	f7ea fa21 	bl	8000250 <memchr>
 8015e0e:	9b04      	ldr	r3, [sp, #16]
 8015e10:	bb78      	cbnz	r0, 8015e72 <_vfiprintf_r+0xfe>
 8015e12:	06d9      	lsls	r1, r3, #27
 8015e14:	bf44      	itt	mi
 8015e16:	2220      	movmi	r2, #32
 8015e18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015e1c:	071a      	lsls	r2, r3, #28
 8015e1e:	bf44      	itt	mi
 8015e20:	222b      	movmi	r2, #43	; 0x2b
 8015e22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015e26:	782a      	ldrb	r2, [r5, #0]
 8015e28:	2a2a      	cmp	r2, #42	; 0x2a
 8015e2a:	d02a      	beq.n	8015e82 <_vfiprintf_r+0x10e>
 8015e2c:	9a07      	ldr	r2, [sp, #28]
 8015e2e:	46a8      	mov	r8, r5
 8015e30:	2000      	movs	r0, #0
 8015e32:	250a      	movs	r5, #10
 8015e34:	4641      	mov	r1, r8
 8015e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e3a:	3b30      	subs	r3, #48	; 0x30
 8015e3c:	2b09      	cmp	r3, #9
 8015e3e:	d969      	bls.n	8015f14 <_vfiprintf_r+0x1a0>
 8015e40:	b360      	cbz	r0, 8015e9c <_vfiprintf_r+0x128>
 8015e42:	e024      	b.n	8015e8e <_vfiprintf_r+0x11a>
 8015e44:	4b50      	ldr	r3, [pc, #320]	; (8015f88 <_vfiprintf_r+0x214>)
 8015e46:	429c      	cmp	r4, r3
 8015e48:	d101      	bne.n	8015e4e <_vfiprintf_r+0xda>
 8015e4a:	68b4      	ldr	r4, [r6, #8]
 8015e4c:	e7a2      	b.n	8015d94 <_vfiprintf_r+0x20>
 8015e4e:	4b4f      	ldr	r3, [pc, #316]	; (8015f8c <_vfiprintf_r+0x218>)
 8015e50:	429c      	cmp	r4, r3
 8015e52:	bf08      	it	eq
 8015e54:	68f4      	ldreq	r4, [r6, #12]
 8015e56:	e79d      	b.n	8015d94 <_vfiprintf_r+0x20>
 8015e58:	4621      	mov	r1, r4
 8015e5a:	4630      	mov	r0, r6
 8015e5c:	f7fd fcc2 	bl	80137e4 <__swsetup_r>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	d09d      	beq.n	8015da0 <_vfiprintf_r+0x2c>
 8015e64:	f04f 30ff 	mov.w	r0, #4294967295
 8015e68:	b01d      	add	sp, #116	; 0x74
 8015e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e6e:	46a8      	mov	r8, r5
 8015e70:	e7a2      	b.n	8015db8 <_vfiprintf_r+0x44>
 8015e72:	4a44      	ldr	r2, [pc, #272]	; (8015f84 <_vfiprintf_r+0x210>)
 8015e74:	1a80      	subs	r0, r0, r2
 8015e76:	fa0b f000 	lsl.w	r0, fp, r0
 8015e7a:	4318      	orrs	r0, r3
 8015e7c:	9004      	str	r0, [sp, #16]
 8015e7e:	4645      	mov	r5, r8
 8015e80:	e7be      	b.n	8015e00 <_vfiprintf_r+0x8c>
 8015e82:	9a03      	ldr	r2, [sp, #12]
 8015e84:	1d11      	adds	r1, r2, #4
 8015e86:	6812      	ldr	r2, [r2, #0]
 8015e88:	9103      	str	r1, [sp, #12]
 8015e8a:	2a00      	cmp	r2, #0
 8015e8c:	db01      	blt.n	8015e92 <_vfiprintf_r+0x11e>
 8015e8e:	9207      	str	r2, [sp, #28]
 8015e90:	e004      	b.n	8015e9c <_vfiprintf_r+0x128>
 8015e92:	4252      	negs	r2, r2
 8015e94:	f043 0302 	orr.w	r3, r3, #2
 8015e98:	9207      	str	r2, [sp, #28]
 8015e9a:	9304      	str	r3, [sp, #16]
 8015e9c:	f898 3000 	ldrb.w	r3, [r8]
 8015ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8015ea2:	d10e      	bne.n	8015ec2 <_vfiprintf_r+0x14e>
 8015ea4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8015eaa:	d138      	bne.n	8015f1e <_vfiprintf_r+0x1aa>
 8015eac:	9b03      	ldr	r3, [sp, #12]
 8015eae:	1d1a      	adds	r2, r3, #4
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	9203      	str	r2, [sp, #12]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	bfb8      	it	lt
 8015eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ebc:	f108 0802 	add.w	r8, r8, #2
 8015ec0:	9305      	str	r3, [sp, #20]
 8015ec2:	4d33      	ldr	r5, [pc, #204]	; (8015f90 <_vfiprintf_r+0x21c>)
 8015ec4:	f898 1000 	ldrb.w	r1, [r8]
 8015ec8:	2203      	movs	r2, #3
 8015eca:	4628      	mov	r0, r5
 8015ecc:	f7ea f9c0 	bl	8000250 <memchr>
 8015ed0:	b140      	cbz	r0, 8015ee4 <_vfiprintf_r+0x170>
 8015ed2:	2340      	movs	r3, #64	; 0x40
 8015ed4:	1b40      	subs	r0, r0, r5
 8015ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8015eda:	9b04      	ldr	r3, [sp, #16]
 8015edc:	4303      	orrs	r3, r0
 8015ede:	f108 0801 	add.w	r8, r8, #1
 8015ee2:	9304      	str	r3, [sp, #16]
 8015ee4:	f898 1000 	ldrb.w	r1, [r8]
 8015ee8:	482a      	ldr	r0, [pc, #168]	; (8015f94 <_vfiprintf_r+0x220>)
 8015eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015eee:	2206      	movs	r2, #6
 8015ef0:	f108 0701 	add.w	r7, r8, #1
 8015ef4:	f7ea f9ac 	bl	8000250 <memchr>
 8015ef8:	2800      	cmp	r0, #0
 8015efa:	d037      	beq.n	8015f6c <_vfiprintf_r+0x1f8>
 8015efc:	4b26      	ldr	r3, [pc, #152]	; (8015f98 <_vfiprintf_r+0x224>)
 8015efe:	bb1b      	cbnz	r3, 8015f48 <_vfiprintf_r+0x1d4>
 8015f00:	9b03      	ldr	r3, [sp, #12]
 8015f02:	3307      	adds	r3, #7
 8015f04:	f023 0307 	bic.w	r3, r3, #7
 8015f08:	3308      	adds	r3, #8
 8015f0a:	9303      	str	r3, [sp, #12]
 8015f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f0e:	444b      	add	r3, r9
 8015f10:	9309      	str	r3, [sp, #36]	; 0x24
 8015f12:	e750      	b.n	8015db6 <_vfiprintf_r+0x42>
 8015f14:	fb05 3202 	mla	r2, r5, r2, r3
 8015f18:	2001      	movs	r0, #1
 8015f1a:	4688      	mov	r8, r1
 8015f1c:	e78a      	b.n	8015e34 <_vfiprintf_r+0xc0>
 8015f1e:	2300      	movs	r3, #0
 8015f20:	f108 0801 	add.w	r8, r8, #1
 8015f24:	9305      	str	r3, [sp, #20]
 8015f26:	4619      	mov	r1, r3
 8015f28:	250a      	movs	r5, #10
 8015f2a:	4640      	mov	r0, r8
 8015f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f30:	3a30      	subs	r2, #48	; 0x30
 8015f32:	2a09      	cmp	r2, #9
 8015f34:	d903      	bls.n	8015f3e <_vfiprintf_r+0x1ca>
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d0c3      	beq.n	8015ec2 <_vfiprintf_r+0x14e>
 8015f3a:	9105      	str	r1, [sp, #20]
 8015f3c:	e7c1      	b.n	8015ec2 <_vfiprintf_r+0x14e>
 8015f3e:	fb05 2101 	mla	r1, r5, r1, r2
 8015f42:	2301      	movs	r3, #1
 8015f44:	4680      	mov	r8, r0
 8015f46:	e7f0      	b.n	8015f2a <_vfiprintf_r+0x1b6>
 8015f48:	ab03      	add	r3, sp, #12
 8015f4a:	9300      	str	r3, [sp, #0]
 8015f4c:	4622      	mov	r2, r4
 8015f4e:	4b13      	ldr	r3, [pc, #76]	; (8015f9c <_vfiprintf_r+0x228>)
 8015f50:	a904      	add	r1, sp, #16
 8015f52:	4630      	mov	r0, r6
 8015f54:	f7fb fed4 	bl	8011d00 <_printf_float>
 8015f58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015f5c:	4681      	mov	r9, r0
 8015f5e:	d1d5      	bne.n	8015f0c <_vfiprintf_r+0x198>
 8015f60:	89a3      	ldrh	r3, [r4, #12]
 8015f62:	065b      	lsls	r3, r3, #25
 8015f64:	f53f af7e 	bmi.w	8015e64 <_vfiprintf_r+0xf0>
 8015f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f6a:	e77d      	b.n	8015e68 <_vfiprintf_r+0xf4>
 8015f6c:	ab03      	add	r3, sp, #12
 8015f6e:	9300      	str	r3, [sp, #0]
 8015f70:	4622      	mov	r2, r4
 8015f72:	4b0a      	ldr	r3, [pc, #40]	; (8015f9c <_vfiprintf_r+0x228>)
 8015f74:	a904      	add	r1, sp, #16
 8015f76:	4630      	mov	r0, r6
 8015f78:	f7fc f964 	bl	8012244 <_printf_i>
 8015f7c:	e7ec      	b.n	8015f58 <_vfiprintf_r+0x1e4>
 8015f7e:	bf00      	nop
 8015f80:	08017100 	.word	0x08017100
 8015f84:	0801724c 	.word	0x0801724c
 8015f88:	08017120 	.word	0x08017120
 8015f8c:	080170e0 	.word	0x080170e0
 8015f90:	08017252 	.word	0x08017252
 8015f94:	08017256 	.word	0x08017256
 8015f98:	08011d01 	.word	0x08011d01
 8015f9c:	08015d4f 	.word	0x08015d4f

08015fa0 <_scanf_chars>:
 8015fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fa4:	4615      	mov	r5, r2
 8015fa6:	688a      	ldr	r2, [r1, #8]
 8015fa8:	4680      	mov	r8, r0
 8015faa:	460c      	mov	r4, r1
 8015fac:	b932      	cbnz	r2, 8015fbc <_scanf_chars+0x1c>
 8015fae:	698a      	ldr	r2, [r1, #24]
 8015fb0:	2a00      	cmp	r2, #0
 8015fb2:	bf14      	ite	ne
 8015fb4:	f04f 32ff 	movne.w	r2, #4294967295
 8015fb8:	2201      	moveq	r2, #1
 8015fba:	608a      	str	r2, [r1, #8]
 8015fbc:	6822      	ldr	r2, [r4, #0]
 8015fbe:	06d1      	lsls	r1, r2, #27
 8015fc0:	bf5f      	itttt	pl
 8015fc2:	681a      	ldrpl	r2, [r3, #0]
 8015fc4:	1d11      	addpl	r1, r2, #4
 8015fc6:	6019      	strpl	r1, [r3, #0]
 8015fc8:	6817      	ldrpl	r7, [r2, #0]
 8015fca:	2600      	movs	r6, #0
 8015fcc:	69a3      	ldr	r3, [r4, #24]
 8015fce:	b1db      	cbz	r3, 8016008 <_scanf_chars+0x68>
 8015fd0:	2b01      	cmp	r3, #1
 8015fd2:	d107      	bne.n	8015fe4 <_scanf_chars+0x44>
 8015fd4:	682b      	ldr	r3, [r5, #0]
 8015fd6:	6962      	ldr	r2, [r4, #20]
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	5cd3      	ldrb	r3, [r2, r3]
 8015fdc:	b9a3      	cbnz	r3, 8016008 <_scanf_chars+0x68>
 8015fde:	2e00      	cmp	r6, #0
 8015fe0:	d132      	bne.n	8016048 <_scanf_chars+0xa8>
 8015fe2:	e006      	b.n	8015ff2 <_scanf_chars+0x52>
 8015fe4:	2b02      	cmp	r3, #2
 8015fe6:	d007      	beq.n	8015ff8 <_scanf_chars+0x58>
 8015fe8:	2e00      	cmp	r6, #0
 8015fea:	d12d      	bne.n	8016048 <_scanf_chars+0xa8>
 8015fec:	69a3      	ldr	r3, [r4, #24]
 8015fee:	2b01      	cmp	r3, #1
 8015ff0:	d12a      	bne.n	8016048 <_scanf_chars+0xa8>
 8015ff2:	2001      	movs	r0, #1
 8015ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ff8:	f7fe feee 	bl	8014dd8 <__locale_ctype_ptr>
 8015ffc:	682b      	ldr	r3, [r5, #0]
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	4418      	add	r0, r3
 8016002:	7843      	ldrb	r3, [r0, #1]
 8016004:	071b      	lsls	r3, r3, #28
 8016006:	d4ef      	bmi.n	8015fe8 <_scanf_chars+0x48>
 8016008:	6823      	ldr	r3, [r4, #0]
 801600a:	06da      	lsls	r2, r3, #27
 801600c:	bf5e      	ittt	pl
 801600e:	682b      	ldrpl	r3, [r5, #0]
 8016010:	781b      	ldrbpl	r3, [r3, #0]
 8016012:	703b      	strbpl	r3, [r7, #0]
 8016014:	682a      	ldr	r2, [r5, #0]
 8016016:	686b      	ldr	r3, [r5, #4]
 8016018:	f102 0201 	add.w	r2, r2, #1
 801601c:	602a      	str	r2, [r5, #0]
 801601e:	68a2      	ldr	r2, [r4, #8]
 8016020:	f103 33ff 	add.w	r3, r3, #4294967295
 8016024:	f102 32ff 	add.w	r2, r2, #4294967295
 8016028:	606b      	str	r3, [r5, #4]
 801602a:	f106 0601 	add.w	r6, r6, #1
 801602e:	bf58      	it	pl
 8016030:	3701      	addpl	r7, #1
 8016032:	60a2      	str	r2, [r4, #8]
 8016034:	b142      	cbz	r2, 8016048 <_scanf_chars+0xa8>
 8016036:	2b00      	cmp	r3, #0
 8016038:	dcc8      	bgt.n	8015fcc <_scanf_chars+0x2c>
 801603a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801603e:	4629      	mov	r1, r5
 8016040:	4640      	mov	r0, r8
 8016042:	4798      	blx	r3
 8016044:	2800      	cmp	r0, #0
 8016046:	d0c1      	beq.n	8015fcc <_scanf_chars+0x2c>
 8016048:	6823      	ldr	r3, [r4, #0]
 801604a:	f013 0310 	ands.w	r3, r3, #16
 801604e:	d105      	bne.n	801605c <_scanf_chars+0xbc>
 8016050:	68e2      	ldr	r2, [r4, #12]
 8016052:	3201      	adds	r2, #1
 8016054:	60e2      	str	r2, [r4, #12]
 8016056:	69a2      	ldr	r2, [r4, #24]
 8016058:	b102      	cbz	r2, 801605c <_scanf_chars+0xbc>
 801605a:	703b      	strb	r3, [r7, #0]
 801605c:	6923      	ldr	r3, [r4, #16]
 801605e:	441e      	add	r6, r3
 8016060:	6126      	str	r6, [r4, #16]
 8016062:	2000      	movs	r0, #0
 8016064:	e7c6      	b.n	8015ff4 <_scanf_chars+0x54>
	...

08016068 <_scanf_i>:
 8016068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801606c:	469a      	mov	sl, r3
 801606e:	4b74      	ldr	r3, [pc, #464]	; (8016240 <_scanf_i+0x1d8>)
 8016070:	460c      	mov	r4, r1
 8016072:	4683      	mov	fp, r0
 8016074:	4616      	mov	r6, r2
 8016076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801607a:	b087      	sub	sp, #28
 801607c:	ab03      	add	r3, sp, #12
 801607e:	68a7      	ldr	r7, [r4, #8]
 8016080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016084:	4b6f      	ldr	r3, [pc, #444]	; (8016244 <_scanf_i+0x1dc>)
 8016086:	69a1      	ldr	r1, [r4, #24]
 8016088:	4a6f      	ldr	r2, [pc, #444]	; (8016248 <_scanf_i+0x1e0>)
 801608a:	2903      	cmp	r1, #3
 801608c:	bf08      	it	eq
 801608e:	461a      	moveq	r2, r3
 8016090:	1e7b      	subs	r3, r7, #1
 8016092:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016096:	bf84      	itt	hi
 8016098:	f240 135d 	movwhi	r3, #349	; 0x15d
 801609c:	60a3      	strhi	r3, [r4, #8]
 801609e:	6823      	ldr	r3, [r4, #0]
 80160a0:	9200      	str	r2, [sp, #0]
 80160a2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80160a6:	bf88      	it	hi
 80160a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80160ac:	f104 091c 	add.w	r9, r4, #28
 80160b0:	6023      	str	r3, [r4, #0]
 80160b2:	bf8c      	ite	hi
 80160b4:	197f      	addhi	r7, r7, r5
 80160b6:	2700      	movls	r7, #0
 80160b8:	464b      	mov	r3, r9
 80160ba:	f04f 0800 	mov.w	r8, #0
 80160be:	9301      	str	r3, [sp, #4]
 80160c0:	6831      	ldr	r1, [r6, #0]
 80160c2:	ab03      	add	r3, sp, #12
 80160c4:	2202      	movs	r2, #2
 80160c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80160ca:	7809      	ldrb	r1, [r1, #0]
 80160cc:	f7ea f8c0 	bl	8000250 <memchr>
 80160d0:	9b01      	ldr	r3, [sp, #4]
 80160d2:	b330      	cbz	r0, 8016122 <_scanf_i+0xba>
 80160d4:	f1b8 0f01 	cmp.w	r8, #1
 80160d8:	d15a      	bne.n	8016190 <_scanf_i+0x128>
 80160da:	6862      	ldr	r2, [r4, #4]
 80160dc:	b92a      	cbnz	r2, 80160ea <_scanf_i+0x82>
 80160de:	6822      	ldr	r2, [r4, #0]
 80160e0:	2108      	movs	r1, #8
 80160e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80160e6:	6061      	str	r1, [r4, #4]
 80160e8:	6022      	str	r2, [r4, #0]
 80160ea:	6822      	ldr	r2, [r4, #0]
 80160ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80160f0:	6022      	str	r2, [r4, #0]
 80160f2:	68a2      	ldr	r2, [r4, #8]
 80160f4:	1e51      	subs	r1, r2, #1
 80160f6:	60a1      	str	r1, [r4, #8]
 80160f8:	b19a      	cbz	r2, 8016122 <_scanf_i+0xba>
 80160fa:	6832      	ldr	r2, [r6, #0]
 80160fc:	1c51      	adds	r1, r2, #1
 80160fe:	6031      	str	r1, [r6, #0]
 8016100:	7812      	ldrb	r2, [r2, #0]
 8016102:	701a      	strb	r2, [r3, #0]
 8016104:	1c5d      	adds	r5, r3, #1
 8016106:	6873      	ldr	r3, [r6, #4]
 8016108:	3b01      	subs	r3, #1
 801610a:	2b00      	cmp	r3, #0
 801610c:	6073      	str	r3, [r6, #4]
 801610e:	dc07      	bgt.n	8016120 <_scanf_i+0xb8>
 8016110:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016114:	4631      	mov	r1, r6
 8016116:	4658      	mov	r0, fp
 8016118:	4798      	blx	r3
 801611a:	2800      	cmp	r0, #0
 801611c:	f040 8086 	bne.w	801622c <_scanf_i+0x1c4>
 8016120:	462b      	mov	r3, r5
 8016122:	f108 0801 	add.w	r8, r8, #1
 8016126:	f1b8 0f03 	cmp.w	r8, #3
 801612a:	d1c8      	bne.n	80160be <_scanf_i+0x56>
 801612c:	6862      	ldr	r2, [r4, #4]
 801612e:	b90a      	cbnz	r2, 8016134 <_scanf_i+0xcc>
 8016130:	220a      	movs	r2, #10
 8016132:	6062      	str	r2, [r4, #4]
 8016134:	6862      	ldr	r2, [r4, #4]
 8016136:	4945      	ldr	r1, [pc, #276]	; (801624c <_scanf_i+0x1e4>)
 8016138:	6960      	ldr	r0, [r4, #20]
 801613a:	9301      	str	r3, [sp, #4]
 801613c:	1a89      	subs	r1, r1, r2
 801613e:	f000 f899 	bl	8016274 <__sccl>
 8016142:	9b01      	ldr	r3, [sp, #4]
 8016144:	f04f 0800 	mov.w	r8, #0
 8016148:	461d      	mov	r5, r3
 801614a:	68a3      	ldr	r3, [r4, #8]
 801614c:	6822      	ldr	r2, [r4, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d03a      	beq.n	80161c8 <_scanf_i+0x160>
 8016152:	6831      	ldr	r1, [r6, #0]
 8016154:	6960      	ldr	r0, [r4, #20]
 8016156:	f891 c000 	ldrb.w	ip, [r1]
 801615a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801615e:	2800      	cmp	r0, #0
 8016160:	d032      	beq.n	80161c8 <_scanf_i+0x160>
 8016162:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016166:	d121      	bne.n	80161ac <_scanf_i+0x144>
 8016168:	0510      	lsls	r0, r2, #20
 801616a:	d51f      	bpl.n	80161ac <_scanf_i+0x144>
 801616c:	f108 0801 	add.w	r8, r8, #1
 8016170:	b117      	cbz	r7, 8016178 <_scanf_i+0x110>
 8016172:	3301      	adds	r3, #1
 8016174:	3f01      	subs	r7, #1
 8016176:	60a3      	str	r3, [r4, #8]
 8016178:	6873      	ldr	r3, [r6, #4]
 801617a:	3b01      	subs	r3, #1
 801617c:	2b00      	cmp	r3, #0
 801617e:	6073      	str	r3, [r6, #4]
 8016180:	dd1b      	ble.n	80161ba <_scanf_i+0x152>
 8016182:	6833      	ldr	r3, [r6, #0]
 8016184:	3301      	adds	r3, #1
 8016186:	6033      	str	r3, [r6, #0]
 8016188:	68a3      	ldr	r3, [r4, #8]
 801618a:	3b01      	subs	r3, #1
 801618c:	60a3      	str	r3, [r4, #8]
 801618e:	e7dc      	b.n	801614a <_scanf_i+0xe2>
 8016190:	f1b8 0f02 	cmp.w	r8, #2
 8016194:	d1ad      	bne.n	80160f2 <_scanf_i+0x8a>
 8016196:	6822      	ldr	r2, [r4, #0]
 8016198:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801619c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80161a0:	d1bf      	bne.n	8016122 <_scanf_i+0xba>
 80161a2:	2110      	movs	r1, #16
 80161a4:	6061      	str	r1, [r4, #4]
 80161a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80161aa:	e7a1      	b.n	80160f0 <_scanf_i+0x88>
 80161ac:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80161b0:	6022      	str	r2, [r4, #0]
 80161b2:	780b      	ldrb	r3, [r1, #0]
 80161b4:	702b      	strb	r3, [r5, #0]
 80161b6:	3501      	adds	r5, #1
 80161b8:	e7de      	b.n	8016178 <_scanf_i+0x110>
 80161ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80161be:	4631      	mov	r1, r6
 80161c0:	4658      	mov	r0, fp
 80161c2:	4798      	blx	r3
 80161c4:	2800      	cmp	r0, #0
 80161c6:	d0df      	beq.n	8016188 <_scanf_i+0x120>
 80161c8:	6823      	ldr	r3, [r4, #0]
 80161ca:	05d9      	lsls	r1, r3, #23
 80161cc:	d50c      	bpl.n	80161e8 <_scanf_i+0x180>
 80161ce:	454d      	cmp	r5, r9
 80161d0:	d908      	bls.n	80161e4 <_scanf_i+0x17c>
 80161d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80161d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161da:	4632      	mov	r2, r6
 80161dc:	4658      	mov	r0, fp
 80161de:	4798      	blx	r3
 80161e0:	1e6f      	subs	r7, r5, #1
 80161e2:	463d      	mov	r5, r7
 80161e4:	454d      	cmp	r5, r9
 80161e6:	d029      	beq.n	801623c <_scanf_i+0x1d4>
 80161e8:	6822      	ldr	r2, [r4, #0]
 80161ea:	f012 0210 	ands.w	r2, r2, #16
 80161ee:	d113      	bne.n	8016218 <_scanf_i+0x1b0>
 80161f0:	702a      	strb	r2, [r5, #0]
 80161f2:	6863      	ldr	r3, [r4, #4]
 80161f4:	9e00      	ldr	r6, [sp, #0]
 80161f6:	4649      	mov	r1, r9
 80161f8:	4658      	mov	r0, fp
 80161fa:	47b0      	blx	r6
 80161fc:	f8da 3000 	ldr.w	r3, [sl]
 8016200:	6821      	ldr	r1, [r4, #0]
 8016202:	1d1a      	adds	r2, r3, #4
 8016204:	f8ca 2000 	str.w	r2, [sl]
 8016208:	f011 0f20 	tst.w	r1, #32
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	d010      	beq.n	8016232 <_scanf_i+0x1ca>
 8016210:	6018      	str	r0, [r3, #0]
 8016212:	68e3      	ldr	r3, [r4, #12]
 8016214:	3301      	adds	r3, #1
 8016216:	60e3      	str	r3, [r4, #12]
 8016218:	eba5 0509 	sub.w	r5, r5, r9
 801621c:	44a8      	add	r8, r5
 801621e:	6925      	ldr	r5, [r4, #16]
 8016220:	4445      	add	r5, r8
 8016222:	6125      	str	r5, [r4, #16]
 8016224:	2000      	movs	r0, #0
 8016226:	b007      	add	sp, #28
 8016228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801622c:	f04f 0800 	mov.w	r8, #0
 8016230:	e7ca      	b.n	80161c8 <_scanf_i+0x160>
 8016232:	07ca      	lsls	r2, r1, #31
 8016234:	bf4c      	ite	mi
 8016236:	8018      	strhmi	r0, [r3, #0]
 8016238:	6018      	strpl	r0, [r3, #0]
 801623a:	e7ea      	b.n	8016212 <_scanf_i+0x1aa>
 801623c:	2001      	movs	r0, #1
 801623e:	e7f2      	b.n	8016226 <_scanf_i+0x1be>
 8016240:	080167e8 	.word	0x080167e8
 8016244:	080136f9 	.word	0x080136f9
 8016248:	080163f1 	.word	0x080163f1
 801624c:	0801726d 	.word	0x0801726d

08016250 <_read_r>:
 8016250:	b538      	push	{r3, r4, r5, lr}
 8016252:	4c07      	ldr	r4, [pc, #28]	; (8016270 <_read_r+0x20>)
 8016254:	4605      	mov	r5, r0
 8016256:	4608      	mov	r0, r1
 8016258:	4611      	mov	r1, r2
 801625a:	2200      	movs	r2, #0
 801625c:	6022      	str	r2, [r4, #0]
 801625e:	461a      	mov	r2, r3
 8016260:	f000 f9ba 	bl	80165d8 <_read>
 8016264:	1c43      	adds	r3, r0, #1
 8016266:	d102      	bne.n	801626e <_read_r+0x1e>
 8016268:	6823      	ldr	r3, [r4, #0]
 801626a:	b103      	cbz	r3, 801626e <_read_r+0x1e>
 801626c:	602b      	str	r3, [r5, #0]
 801626e:	bd38      	pop	{r3, r4, r5, pc}
 8016270:	2000eaa4 	.word	0x2000eaa4

08016274 <__sccl>:
 8016274:	b570      	push	{r4, r5, r6, lr}
 8016276:	780b      	ldrb	r3, [r1, #0]
 8016278:	2b5e      	cmp	r3, #94	; 0x5e
 801627a:	bf13      	iteet	ne
 801627c:	1c4a      	addne	r2, r1, #1
 801627e:	1c8a      	addeq	r2, r1, #2
 8016280:	784b      	ldrbeq	r3, [r1, #1]
 8016282:	2100      	movne	r1, #0
 8016284:	bf08      	it	eq
 8016286:	2101      	moveq	r1, #1
 8016288:	1e44      	subs	r4, r0, #1
 801628a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801628e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8016292:	42ac      	cmp	r4, r5
 8016294:	d1fb      	bne.n	801628e <__sccl+0x1a>
 8016296:	b913      	cbnz	r3, 801629e <__sccl+0x2a>
 8016298:	3a01      	subs	r2, #1
 801629a:	4610      	mov	r0, r2
 801629c:	bd70      	pop	{r4, r5, r6, pc}
 801629e:	f081 0401 	eor.w	r4, r1, #1
 80162a2:	54c4      	strb	r4, [r0, r3]
 80162a4:	1c51      	adds	r1, r2, #1
 80162a6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80162aa:	2d2d      	cmp	r5, #45	; 0x2d
 80162ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80162b0:	460a      	mov	r2, r1
 80162b2:	d006      	beq.n	80162c2 <__sccl+0x4e>
 80162b4:	2d5d      	cmp	r5, #93	; 0x5d
 80162b6:	d0f0      	beq.n	801629a <__sccl+0x26>
 80162b8:	b90d      	cbnz	r5, 80162be <__sccl+0x4a>
 80162ba:	4632      	mov	r2, r6
 80162bc:	e7ed      	b.n	801629a <__sccl+0x26>
 80162be:	462b      	mov	r3, r5
 80162c0:	e7ef      	b.n	80162a2 <__sccl+0x2e>
 80162c2:	780e      	ldrb	r6, [r1, #0]
 80162c4:	2e5d      	cmp	r6, #93	; 0x5d
 80162c6:	d0fa      	beq.n	80162be <__sccl+0x4a>
 80162c8:	42b3      	cmp	r3, r6
 80162ca:	dcf8      	bgt.n	80162be <__sccl+0x4a>
 80162cc:	3301      	adds	r3, #1
 80162ce:	429e      	cmp	r6, r3
 80162d0:	54c4      	strb	r4, [r0, r3]
 80162d2:	dcfb      	bgt.n	80162cc <__sccl+0x58>
 80162d4:	3102      	adds	r1, #2
 80162d6:	e7e6      	b.n	80162a6 <__sccl+0x32>

080162d8 <strncmp>:
 80162d8:	b510      	push	{r4, lr}
 80162da:	b16a      	cbz	r2, 80162f8 <strncmp+0x20>
 80162dc:	3901      	subs	r1, #1
 80162de:	1884      	adds	r4, r0, r2
 80162e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80162e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80162e8:	4293      	cmp	r3, r2
 80162ea:	d103      	bne.n	80162f4 <strncmp+0x1c>
 80162ec:	42a0      	cmp	r0, r4
 80162ee:	d001      	beq.n	80162f4 <strncmp+0x1c>
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d1f5      	bne.n	80162e0 <strncmp+0x8>
 80162f4:	1a98      	subs	r0, r3, r2
 80162f6:	bd10      	pop	{r4, pc}
 80162f8:	4610      	mov	r0, r2
 80162fa:	e7fc      	b.n	80162f6 <strncmp+0x1e>

080162fc <_strtoul_l.isra.0>:
 80162fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016300:	4680      	mov	r8, r0
 8016302:	4689      	mov	r9, r1
 8016304:	4692      	mov	sl, r2
 8016306:	461e      	mov	r6, r3
 8016308:	460f      	mov	r7, r1
 801630a:	463d      	mov	r5, r7
 801630c:	9808      	ldr	r0, [sp, #32]
 801630e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016312:	f7fe fd5d 	bl	8014dd0 <__locale_ctype_ptr_l>
 8016316:	4420      	add	r0, r4
 8016318:	7843      	ldrb	r3, [r0, #1]
 801631a:	f013 0308 	ands.w	r3, r3, #8
 801631e:	d130      	bne.n	8016382 <_strtoul_l.isra.0+0x86>
 8016320:	2c2d      	cmp	r4, #45	; 0x2d
 8016322:	d130      	bne.n	8016386 <_strtoul_l.isra.0+0x8a>
 8016324:	787c      	ldrb	r4, [r7, #1]
 8016326:	1cbd      	adds	r5, r7, #2
 8016328:	2101      	movs	r1, #1
 801632a:	2e00      	cmp	r6, #0
 801632c:	d05c      	beq.n	80163e8 <_strtoul_l.isra.0+0xec>
 801632e:	2e10      	cmp	r6, #16
 8016330:	d109      	bne.n	8016346 <_strtoul_l.isra.0+0x4a>
 8016332:	2c30      	cmp	r4, #48	; 0x30
 8016334:	d107      	bne.n	8016346 <_strtoul_l.isra.0+0x4a>
 8016336:	782b      	ldrb	r3, [r5, #0]
 8016338:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801633c:	2b58      	cmp	r3, #88	; 0x58
 801633e:	d14e      	bne.n	80163de <_strtoul_l.isra.0+0xe2>
 8016340:	786c      	ldrb	r4, [r5, #1]
 8016342:	2610      	movs	r6, #16
 8016344:	3502      	adds	r5, #2
 8016346:	f04f 32ff 	mov.w	r2, #4294967295
 801634a:	2300      	movs	r3, #0
 801634c:	fbb2 f2f6 	udiv	r2, r2, r6
 8016350:	fb06 fc02 	mul.w	ip, r6, r2
 8016354:	ea6f 0c0c 	mvn.w	ip, ip
 8016358:	4618      	mov	r0, r3
 801635a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801635e:	2f09      	cmp	r7, #9
 8016360:	d817      	bhi.n	8016392 <_strtoul_l.isra.0+0x96>
 8016362:	463c      	mov	r4, r7
 8016364:	42a6      	cmp	r6, r4
 8016366:	dd23      	ble.n	80163b0 <_strtoul_l.isra.0+0xb4>
 8016368:	2b00      	cmp	r3, #0
 801636a:	db1e      	blt.n	80163aa <_strtoul_l.isra.0+0xae>
 801636c:	4282      	cmp	r2, r0
 801636e:	d31c      	bcc.n	80163aa <_strtoul_l.isra.0+0xae>
 8016370:	d101      	bne.n	8016376 <_strtoul_l.isra.0+0x7a>
 8016372:	45a4      	cmp	ip, r4
 8016374:	db19      	blt.n	80163aa <_strtoul_l.isra.0+0xae>
 8016376:	fb00 4006 	mla	r0, r0, r6, r4
 801637a:	2301      	movs	r3, #1
 801637c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016380:	e7eb      	b.n	801635a <_strtoul_l.isra.0+0x5e>
 8016382:	462f      	mov	r7, r5
 8016384:	e7c1      	b.n	801630a <_strtoul_l.isra.0+0xe>
 8016386:	2c2b      	cmp	r4, #43	; 0x2b
 8016388:	bf04      	itt	eq
 801638a:	1cbd      	addeq	r5, r7, #2
 801638c:	787c      	ldrbeq	r4, [r7, #1]
 801638e:	4619      	mov	r1, r3
 8016390:	e7cb      	b.n	801632a <_strtoul_l.isra.0+0x2e>
 8016392:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016396:	2f19      	cmp	r7, #25
 8016398:	d801      	bhi.n	801639e <_strtoul_l.isra.0+0xa2>
 801639a:	3c37      	subs	r4, #55	; 0x37
 801639c:	e7e2      	b.n	8016364 <_strtoul_l.isra.0+0x68>
 801639e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80163a2:	2f19      	cmp	r7, #25
 80163a4:	d804      	bhi.n	80163b0 <_strtoul_l.isra.0+0xb4>
 80163a6:	3c57      	subs	r4, #87	; 0x57
 80163a8:	e7dc      	b.n	8016364 <_strtoul_l.isra.0+0x68>
 80163aa:	f04f 33ff 	mov.w	r3, #4294967295
 80163ae:	e7e5      	b.n	801637c <_strtoul_l.isra.0+0x80>
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	da09      	bge.n	80163c8 <_strtoul_l.isra.0+0xcc>
 80163b4:	2322      	movs	r3, #34	; 0x22
 80163b6:	f8c8 3000 	str.w	r3, [r8]
 80163ba:	f04f 30ff 	mov.w	r0, #4294967295
 80163be:	f1ba 0f00 	cmp.w	sl, #0
 80163c2:	d107      	bne.n	80163d4 <_strtoul_l.isra.0+0xd8>
 80163c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163c8:	b101      	cbz	r1, 80163cc <_strtoul_l.isra.0+0xd0>
 80163ca:	4240      	negs	r0, r0
 80163cc:	f1ba 0f00 	cmp.w	sl, #0
 80163d0:	d0f8      	beq.n	80163c4 <_strtoul_l.isra.0+0xc8>
 80163d2:	b10b      	cbz	r3, 80163d8 <_strtoul_l.isra.0+0xdc>
 80163d4:	f105 39ff 	add.w	r9, r5, #4294967295
 80163d8:	f8ca 9000 	str.w	r9, [sl]
 80163dc:	e7f2      	b.n	80163c4 <_strtoul_l.isra.0+0xc8>
 80163de:	2430      	movs	r4, #48	; 0x30
 80163e0:	2e00      	cmp	r6, #0
 80163e2:	d1b0      	bne.n	8016346 <_strtoul_l.isra.0+0x4a>
 80163e4:	2608      	movs	r6, #8
 80163e6:	e7ae      	b.n	8016346 <_strtoul_l.isra.0+0x4a>
 80163e8:	2c30      	cmp	r4, #48	; 0x30
 80163ea:	d0a4      	beq.n	8016336 <_strtoul_l.isra.0+0x3a>
 80163ec:	260a      	movs	r6, #10
 80163ee:	e7aa      	b.n	8016346 <_strtoul_l.isra.0+0x4a>

080163f0 <_strtoul_r>:
 80163f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163f2:	4c06      	ldr	r4, [pc, #24]	; (801640c <_strtoul_r+0x1c>)
 80163f4:	4d06      	ldr	r5, [pc, #24]	; (8016410 <_strtoul_r+0x20>)
 80163f6:	6824      	ldr	r4, [r4, #0]
 80163f8:	6a24      	ldr	r4, [r4, #32]
 80163fa:	2c00      	cmp	r4, #0
 80163fc:	bf08      	it	eq
 80163fe:	462c      	moveq	r4, r5
 8016400:	9400      	str	r4, [sp, #0]
 8016402:	f7ff ff7b 	bl	80162fc <_strtoul_l.isra.0>
 8016406:	b003      	add	sp, #12
 8016408:	bd30      	pop	{r4, r5, pc}
 801640a:	bf00      	nop
 801640c:	20000438 	.word	0x20000438
 8016410:	2000049c 	.word	0x2000049c

08016414 <__submore>:
 8016414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016418:	460c      	mov	r4, r1
 801641a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801641c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016420:	4299      	cmp	r1, r3
 8016422:	d11d      	bne.n	8016460 <__submore+0x4c>
 8016424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016428:	f7fb fb88 	bl	8011b3c <_malloc_r>
 801642c:	b918      	cbnz	r0, 8016436 <__submore+0x22>
 801642e:	f04f 30ff 	mov.w	r0, #4294967295
 8016432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801643a:	63a3      	str	r3, [r4, #56]	; 0x38
 801643c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016440:	6360      	str	r0, [r4, #52]	; 0x34
 8016442:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016446:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801644a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801644e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016452:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016456:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801645a:	6020      	str	r0, [r4, #0]
 801645c:	2000      	movs	r0, #0
 801645e:	e7e8      	b.n	8016432 <__submore+0x1e>
 8016460:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016462:	0077      	lsls	r7, r6, #1
 8016464:	463a      	mov	r2, r7
 8016466:	f000 f858 	bl	801651a <_realloc_r>
 801646a:	4605      	mov	r5, r0
 801646c:	2800      	cmp	r0, #0
 801646e:	d0de      	beq.n	801642e <__submore+0x1a>
 8016470:	eb00 0806 	add.w	r8, r0, r6
 8016474:	4601      	mov	r1, r0
 8016476:	4632      	mov	r2, r6
 8016478:	4640      	mov	r0, r8
 801647a:	f7fb faef 	bl	8011a5c <memcpy>
 801647e:	f8c4 8000 	str.w	r8, [r4]
 8016482:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016486:	e7e9      	b.n	801645c <__submore+0x48>

08016488 <__ascii_wctomb>:
 8016488:	b149      	cbz	r1, 801649e <__ascii_wctomb+0x16>
 801648a:	2aff      	cmp	r2, #255	; 0xff
 801648c:	bf85      	ittet	hi
 801648e:	238a      	movhi	r3, #138	; 0x8a
 8016490:	6003      	strhi	r3, [r0, #0]
 8016492:	700a      	strbls	r2, [r1, #0]
 8016494:	f04f 30ff 	movhi.w	r0, #4294967295
 8016498:	bf98      	it	ls
 801649a:	2001      	movls	r0, #1
 801649c:	4770      	bx	lr
 801649e:	4608      	mov	r0, r1
 80164a0:	4770      	bx	lr
	...

080164a4 <_fstat_r>:
 80164a4:	b538      	push	{r3, r4, r5, lr}
 80164a6:	4c07      	ldr	r4, [pc, #28]	; (80164c4 <_fstat_r+0x20>)
 80164a8:	2300      	movs	r3, #0
 80164aa:	4605      	mov	r5, r0
 80164ac:	4608      	mov	r0, r1
 80164ae:	4611      	mov	r1, r2
 80164b0:	6023      	str	r3, [r4, #0]
 80164b2:	f000 f869 	bl	8016588 <_fstat>
 80164b6:	1c43      	adds	r3, r0, #1
 80164b8:	d102      	bne.n	80164c0 <_fstat_r+0x1c>
 80164ba:	6823      	ldr	r3, [r4, #0]
 80164bc:	b103      	cbz	r3, 80164c0 <_fstat_r+0x1c>
 80164be:	602b      	str	r3, [r5, #0]
 80164c0:	bd38      	pop	{r3, r4, r5, pc}
 80164c2:	bf00      	nop
 80164c4:	2000eaa4 	.word	0x2000eaa4

080164c8 <_isatty_r>:
 80164c8:	b538      	push	{r3, r4, r5, lr}
 80164ca:	4c06      	ldr	r4, [pc, #24]	; (80164e4 <_isatty_r+0x1c>)
 80164cc:	2300      	movs	r3, #0
 80164ce:	4605      	mov	r5, r0
 80164d0:	4608      	mov	r0, r1
 80164d2:	6023      	str	r3, [r4, #0]
 80164d4:	f000 f868 	bl	80165a8 <_isatty>
 80164d8:	1c43      	adds	r3, r0, #1
 80164da:	d102      	bne.n	80164e2 <_isatty_r+0x1a>
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	b103      	cbz	r3, 80164e2 <_isatty_r+0x1a>
 80164e0:	602b      	str	r3, [r5, #0]
 80164e2:	bd38      	pop	{r3, r4, r5, pc}
 80164e4:	2000eaa4 	.word	0x2000eaa4

080164e8 <memmove>:
 80164e8:	4288      	cmp	r0, r1
 80164ea:	b510      	push	{r4, lr}
 80164ec:	eb01 0302 	add.w	r3, r1, r2
 80164f0:	d807      	bhi.n	8016502 <memmove+0x1a>
 80164f2:	1e42      	subs	r2, r0, #1
 80164f4:	4299      	cmp	r1, r3
 80164f6:	d00a      	beq.n	801650e <memmove+0x26>
 80164f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016500:	e7f8      	b.n	80164f4 <memmove+0xc>
 8016502:	4283      	cmp	r3, r0
 8016504:	d9f5      	bls.n	80164f2 <memmove+0xa>
 8016506:	1881      	adds	r1, r0, r2
 8016508:	1ad2      	subs	r2, r2, r3
 801650a:	42d3      	cmn	r3, r2
 801650c:	d100      	bne.n	8016510 <memmove+0x28>
 801650e:	bd10      	pop	{r4, pc}
 8016510:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016514:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016518:	e7f7      	b.n	801650a <memmove+0x22>

0801651a <_realloc_r>:
 801651a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801651c:	4607      	mov	r7, r0
 801651e:	4614      	mov	r4, r2
 8016520:	460e      	mov	r6, r1
 8016522:	b921      	cbnz	r1, 801652e <_realloc_r+0x14>
 8016524:	4611      	mov	r1, r2
 8016526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801652a:	f7fb bb07 	b.w	8011b3c <_malloc_r>
 801652e:	b922      	cbnz	r2, 801653a <_realloc_r+0x20>
 8016530:	f7fb fab6 	bl	8011aa0 <_free_r>
 8016534:	4625      	mov	r5, r4
 8016536:	4628      	mov	r0, r5
 8016538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801653a:	f000 f814 	bl	8016566 <_malloc_usable_size_r>
 801653e:	42a0      	cmp	r0, r4
 8016540:	d20f      	bcs.n	8016562 <_realloc_r+0x48>
 8016542:	4621      	mov	r1, r4
 8016544:	4638      	mov	r0, r7
 8016546:	f7fb faf9 	bl	8011b3c <_malloc_r>
 801654a:	4605      	mov	r5, r0
 801654c:	2800      	cmp	r0, #0
 801654e:	d0f2      	beq.n	8016536 <_realloc_r+0x1c>
 8016550:	4631      	mov	r1, r6
 8016552:	4622      	mov	r2, r4
 8016554:	f7fb fa82 	bl	8011a5c <memcpy>
 8016558:	4631      	mov	r1, r6
 801655a:	4638      	mov	r0, r7
 801655c:	f7fb faa0 	bl	8011aa0 <_free_r>
 8016560:	e7e9      	b.n	8016536 <_realloc_r+0x1c>
 8016562:	4635      	mov	r5, r6
 8016564:	e7e7      	b.n	8016536 <_realloc_r+0x1c>

08016566 <_malloc_usable_size_r>:
 8016566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801656a:	1f18      	subs	r0, r3, #4
 801656c:	2b00      	cmp	r3, #0
 801656e:	bfbc      	itt	lt
 8016570:	580b      	ldrlt	r3, [r1, r0]
 8016572:	18c0      	addlt	r0, r0, r3
 8016574:	4770      	bx	lr
	...

08016578 <_close>:
 8016578:	4b02      	ldr	r3, [pc, #8]	; (8016584 <_close+0xc>)
 801657a:	2258      	movs	r2, #88	; 0x58
 801657c:	601a      	str	r2, [r3, #0]
 801657e:	f04f 30ff 	mov.w	r0, #4294967295
 8016582:	4770      	bx	lr
 8016584:	2000eaa4 	.word	0x2000eaa4

08016588 <_fstat>:
 8016588:	4b02      	ldr	r3, [pc, #8]	; (8016594 <_fstat+0xc>)
 801658a:	2258      	movs	r2, #88	; 0x58
 801658c:	601a      	str	r2, [r3, #0]
 801658e:	f04f 30ff 	mov.w	r0, #4294967295
 8016592:	4770      	bx	lr
 8016594:	2000eaa4 	.word	0x2000eaa4

08016598 <_getpid>:
 8016598:	4b02      	ldr	r3, [pc, #8]	; (80165a4 <_getpid+0xc>)
 801659a:	2258      	movs	r2, #88	; 0x58
 801659c:	601a      	str	r2, [r3, #0]
 801659e:	f04f 30ff 	mov.w	r0, #4294967295
 80165a2:	4770      	bx	lr
 80165a4:	2000eaa4 	.word	0x2000eaa4

080165a8 <_isatty>:
 80165a8:	4b02      	ldr	r3, [pc, #8]	; (80165b4 <_isatty+0xc>)
 80165aa:	2258      	movs	r2, #88	; 0x58
 80165ac:	601a      	str	r2, [r3, #0]
 80165ae:	2000      	movs	r0, #0
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop
 80165b4:	2000eaa4 	.word	0x2000eaa4

080165b8 <_kill>:
 80165b8:	4b02      	ldr	r3, [pc, #8]	; (80165c4 <_kill+0xc>)
 80165ba:	2258      	movs	r2, #88	; 0x58
 80165bc:	601a      	str	r2, [r3, #0]
 80165be:	f04f 30ff 	mov.w	r0, #4294967295
 80165c2:	4770      	bx	lr
 80165c4:	2000eaa4 	.word	0x2000eaa4

080165c8 <_lseek>:
 80165c8:	4b02      	ldr	r3, [pc, #8]	; (80165d4 <_lseek+0xc>)
 80165ca:	2258      	movs	r2, #88	; 0x58
 80165cc:	601a      	str	r2, [r3, #0]
 80165ce:	f04f 30ff 	mov.w	r0, #4294967295
 80165d2:	4770      	bx	lr
 80165d4:	2000eaa4 	.word	0x2000eaa4

080165d8 <_read>:
 80165d8:	4b02      	ldr	r3, [pc, #8]	; (80165e4 <_read+0xc>)
 80165da:	2258      	movs	r2, #88	; 0x58
 80165dc:	601a      	str	r2, [r3, #0]
 80165de:	f04f 30ff 	mov.w	r0, #4294967295
 80165e2:	4770      	bx	lr
 80165e4:	2000eaa4 	.word	0x2000eaa4

080165e8 <_sbrk>:
 80165e8:	4b04      	ldr	r3, [pc, #16]	; (80165fc <_sbrk+0x14>)
 80165ea:	6819      	ldr	r1, [r3, #0]
 80165ec:	4602      	mov	r2, r0
 80165ee:	b909      	cbnz	r1, 80165f4 <_sbrk+0xc>
 80165f0:	4903      	ldr	r1, [pc, #12]	; (8016600 <_sbrk+0x18>)
 80165f2:	6019      	str	r1, [r3, #0]
 80165f4:	6818      	ldr	r0, [r3, #0]
 80165f6:	4402      	add	r2, r0
 80165f8:	601a      	str	r2, [r3, #0]
 80165fa:	4770      	bx	lr
 80165fc:	200013d0 	.word	0x200013d0
 8016600:	2000eaa8 	.word	0x2000eaa8

08016604 <_exit>:
 8016604:	e7fe      	b.n	8016604 <_exit>
	...

08016608 <_init>:
 8016608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801660a:	bf00      	nop
 801660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801660e:	bc08      	pop	{r3}
 8016610:	469e      	mov	lr, r3
 8016612:	4770      	bx	lr

08016614 <_fini>:
 8016614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016616:	bf00      	nop
 8016618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801661a:	bc08      	pop	{r3}
 801661c:	469e      	mov	lr, r3
 801661e:	4770      	bx	lr
