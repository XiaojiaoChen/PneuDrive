
PneuDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bd8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08012dd8  08012dd8  00022dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080132dc  080132dc  00030514  2**0
                  CONTENTS
  4 .ARM          00000008  080132dc  080132dc  000232dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080132e4  080132e4  00030514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080132e4  080132e4  000232e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080132ec  080132ec  000232ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000514  20000000  080132f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000df74  20000514  08013804  00030514  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e488  08013804  0003e488  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030514  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040dc7  00000000  00000000  00030542  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bcb  00000000  00000000  00071309  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002068  00000000  00000000  00078ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d00  00000000  00000000  0007af40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032b3c  00000000  00000000  0007cc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025e72  00000000  00000000  000af77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c7ed  00000000  00000000  000d55ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1ddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096e8  00000000  00000000  001e1e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  001eb540  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001eb5f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000514 	.word	0x20000514
 800021c:	00000000 	.word	0x00000000
 8000220:	08012dc0 	.word	0x08012dc0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000518 	.word	0x20000518
 800023c:	08012dc0 	.word	0x08012dc0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000624:	e052      	b.n	80006cc <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000644:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000654:	ed97 7a07 	vldr	s14, [r7, #28]
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	3304      	adds	r3, #4
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000688:	edd7 7a08 	vldr	s15, [r7, #32]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000694:	ed97 7a07 	vldr	s14, [r7, #28]
 8000698:	edd7 7a05 	vldr	s15, [r7, #20]
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	3308      	adds	r3, #8
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	330c      	adds	r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	3310      	adds	r3, #16
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006bc:	3310      	adds	r3, #16
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	3310      	adds	r3, #16
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3b01      	subs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1a9      	bne.n	8000626 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006da:	e013      	b.n	8000704 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	637a      	str	r2, [r7, #52]	; 0x34
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3b01      	subs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1e8      	bne.n	80006dc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000710:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000714:	4618      	mov	r0, r3
 8000716:	3744      	adds	r7, #68	; 0x44
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	4613      	mov	r3, r2
 8000730:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	897a      	ldrh	r2, [r7, #10]
 8000736:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000750:	b480      	push	{r7}
 8000752:	b09b      	sub	sp, #108	; 0x6c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000784:	e029      	b.n	80007da <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 800078e:	e008      	b.n	80007a2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	65ba      	str	r2, [r7, #88]	; 0x58
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
        j--;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ba:	e008      	b.n	80007ce <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
        j--;
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1d2      	bne.n	8000786 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80007e8:	e1aa      	b.n	8000b40 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f6:	4413      	add	r3, r2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	4413      	add	r3, r2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800080a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	e036      	b.n	800088a <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	dd10      	ble.n	800084e <arm_mat_inverse_f32+0xfe>
 800082c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d503      	bpl.n	8000848 <arm_mat_inverse_f32+0xf8>
 8000840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	e016      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	e013      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 800084e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eef1 7a67 	vneg.f32	s15, s15
 8000858:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d505      	bpl.n	8000872 <arm_mat_inverse_f32+0x122>
 8000866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eef1 7a67 	vneg.f32	s15, s15
 8000870:	e001      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000872:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000880:	4413      	add	r3, r2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3c4      	bcc.n	800081c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d102      	bne.n	80008a6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e186      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd02      	ble.n	80008c2 <arm_mat_inverse_f32+0x172>
 80008bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c0:	e003      	b.n	80008ca <arm_mat_inverse_f32+0x17a>
 80008c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c6:	eef1 7a67 	vneg.f32	s15, s15
 80008ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ce:	eef4 7a47 	vcmp.f32	s15, s14
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d069      	beq.n	80009ac <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80008e2:	e060      	b.n	80009a6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000900:	4413      	add	r3, r2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd03      	ble.n	800091c <arm_mat_inverse_f32+0x1cc>
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	e004      	b.n	8000926 <arm_mat_inverse_f32+0x1d6>
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eef1 7a67 	vneg.f32	s15, s15
 8000926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800092a:	eef4 7a47 	vcmp.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d132      	bne.n	800099a <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800093c:	e010      	b.n	8000960 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	65fa      	str	r2, [r7, #92]	; 0x5c
 800094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	663a      	str	r2, [r7, #96]	; 0x60
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3b01      	subs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1eb      	bne.n	800093e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800096a:	e010      	b.n	800098e <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800096c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	657a      	str	r2, [r7, #84]	; 0x54
 8000978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	1d1a      	adds	r2, r3, #4
 8000982:	65ba      	str	r2, [r7, #88]	; 0x58
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	3b01      	subs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1eb      	bne.n	800096c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000994:	2301      	movs	r3, #1
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000998:	e008      	b.n	80009ac <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	3301      	adds	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a2:	3b01      	subs	r3, #1
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d19b      	bne.n	80008e4 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d009      	beq.n	80009c6 <arm_mat_inverse_f32+0x276>
 80009b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d102      	bne.n	80009c6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009c0:	f06f 0304 	mvn.w	r3, #4
 80009c4:	e0f6      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009d2:	4413      	add	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 80009fc:	e010      	b.n	8000a20 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80009fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	663a      	str	r2, [r7, #96]	; 0x60
 8000a0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a2a:	e010      	b.n	8000a4e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a38:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1eb      	bne.n	8000a2c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a64:	e060      	b.n	8000b28 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10c      	bne.n	8000a88 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a78:	4413      	add	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a82:	4413      	add	r3, r2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a86:	e044      	b.n	8000b12 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000a9e:	e017      	b.n	8000ad0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	653a      	str	r2, [r7, #80]	; 0x50
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	663a      	str	r2, [r7, #96]	; 0x60
 8000abe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	3b01      	subs	r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e4      	bne.n	8000aa0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000ada:	e017      	b.n	8000b0c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b02:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b24:	3301      	adds	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19b      	bne.n	8000a66 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b30:	3304      	adds	r3, #4
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	3b01      	subs	r3, #1
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae51 	bne.w	80007ea <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d02d      	beq.n	8000bb0 <arm_mat_inverse_f32+0x460>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	d126      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b6c:	e00d      	b.n	8000b8a <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b74:	4413      	add	r3, r2
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d10a      	bne.n	8000b9a <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b86:	3301      	adds	r3, #1
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3ea      	bcc.n	8000b6e <arm_mat_inverse_f32+0x41e>
 8000b98:	e000      	b.n	8000b9c <arm_mat_inverse_f32+0x44c>
            break;
 8000b9a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000baa:	23fb      	movs	r3, #251	; 0xfb
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	376c      	adds	r7, #108	; 0x6c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b095      	sub	sp, #84	; 0x54
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8000bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bfc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c0a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c26:	e061      	b.n	8000cec <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c34:	4413      	add	r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	4413      	add	r3, r2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	4413      	add	r3, r2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000ca0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc4:	4413      	add	r3, r2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000cc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ce6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d19a      	bne.n	8000c28 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000cfa:	e017      	b.n	8000d2c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d22:	4413      	add	r3, r2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e4      	bne.n	8000cfc <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	1d1a      	adds	r2, r3, #4
 8000d36:	643a      	str	r2, [r7, #64]	; 0x40
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d3e:	3301      	adds	r3, #1
 8000d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d50:	3b01      	subs	r3, #1
 8000d52:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f af5d 	bne.w	8000c16 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d70:	3b01      	subs	r3, #1
 8000d72:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af41 	bne.w	8000bfe <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000d82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3754      	adds	r7, #84	; 0x54
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b091      	sub	sp, #68	; 0x44
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f302 	mul.w	r3, r3, r2
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000dc6:	e052      	b.n	8000e6e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	3304      	adds	r3, #4
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	330c      	adds	r3, #12
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	3310      	adds	r3, #16
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	3310      	adds	r3, #16
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3310      	adds	r3, #16
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1a9      	bne.n	8000dc8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e7c:	e013      	b.n	8000ea6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	637a      	str	r2, [r7, #52]	; 0x34
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000eb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3744      	adds	r7, #68	; 0x44
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b08b      	sub	sp, #44	; 0x2c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83bb      	strh	r3, [r7, #28]
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000efc:	e02e      	b.n	8000f5c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	627a      	str	r2, [r7, #36]	; 0x24
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4413      	add	r3, r2
 8000f12:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	627a      	str	r2, [r7, #36]	; 0x24
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f20:	8a7b      	ldrh	r3, [r7, #18]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	627a      	str	r2, [r7, #36]	; 0x24
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4413      	add	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1cd      	bne.n	8000efe <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f6a:	e00d      	b.n	8000f88 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	627a      	str	r2, [r7, #36]	; 0x24
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	4413      	add	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ee      	bne.n	8000f6c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000f9a:	8b7b      	ldrh	r3, [r7, #26]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1a5      	bne.n	8000eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fcf8 	bl	80019ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f007 feee 	bl	8008da0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f007 fec4 	bl	8008d50 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	200010cc 	.word	0x200010cc

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200010cc 	.word	0x200010cc

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_Delay+0x40>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e031      	b.n	80010ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f006 fdfc 	bl	8007c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_Init+0x84>)
 8001098:	4013      	ands	r3, r2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fa5a 	bl	800155c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ffffeefd 	.word	0xffffeefd

080010dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Start_DMA+0x1e>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e0c7      	b.n	800128a <HAL_ADC_Start_DMA+0x1ae>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d018      	beq.n	8001142 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001120:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <HAL_ADC_Start_DMA+0x1b8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <HAL_ADC_Start_DMA+0x1bc>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9a      	lsrs	r2, r3, #18
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001134:	e002      	b.n	800113c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3b01      	subs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f9      	bne.n	8001136 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b01      	cmp	r3, #1
 800114e:	f040 809b 	bne.w	8001288 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <HAL_ADC_Start_DMA+0x1c0>)
 8001158:	4013      	ands	r3, r2
 800115a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001178:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118c:	d106      	bne.n	800119c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f023 0206 	bic.w	r2, r3, #6
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
 800119a:	e002      	b.n	80011a2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ae:	4a3c      	ldr	r2, [pc, #240]	; (80012a0 <HAL_ADC_Start_DMA+0x1c4>)
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b6:	4a3b      	ldr	r2, [pc, #236]	; (80012a4 <HAL_ADC_Start_DMA+0x1c8>)
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	4a3a      	ldr	r2, [pc, #232]	; (80012a8 <HAL_ADC_Start_DMA+0x1cc>)
 80011c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	334c      	adds	r3, #76	; 0x4c
 80011f6:	4619      	mov	r1, r3
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f000 fcba 	bl	8001b74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_ADC_Start_DMA+0x1d0>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10f      	bne.n	800122c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d136      	bne.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	e02d      	b.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_ADC_Start_DMA+0x1d4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10e      	bne.n	8001254 <HAL_ADC_Start_DMA+0x178>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001252:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_ADC_Start_DMA+0x1d0>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	d113      	bne.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <HAL_ADC_Start_DMA+0x1d8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10e      	bne.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001286:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	431bde83 	.word	0x431bde83
 800129c:	fffff8fe 	.word	0xfffff8fe
 80012a0:	08001751 	.word	0x08001751
 80012a4:	0800180b 	.word	0x0800180b
 80012a8:	08001827 	.word	0x08001827
 80012ac:	40012300 	.word	0x40012300
 80012b0:	40012000 	.word	0x40012000
 80012b4:	40012200 	.word	0x40012200

080012b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1c>
 800130c:	2302      	movs	r3, #2
 800130e:	e115      	b.n	800153c <HAL_ADC_ConfigChannel+0x248>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d935      	bls.n	800138c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68d9      	ldr	r1, [r3, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	3b1e      	subs	r3, #30
 8001336:	2207      	movs	r2, #7
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43da      	mvns	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7f      	ldr	r2, [pc, #508]	; (8001548 <HAL_ADC_ConfigChannel+0x254>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d10a      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68d9      	ldr	r1, [r3, #12]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	061a      	lsls	r2, r3, #24
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	e035      	b.n	80013d2 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68d9      	ldr	r1, [r3, #12]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	4603      	mov	r3, r0
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4403      	add	r3, r0
 800137e:	3b1e      	subs	r3, #30
 8001380:	409a      	lsls	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	e022      	b.n	80013d2 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6919      	ldr	r1, [r3, #16]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	2207      	movs	r2, #7
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	400a      	ands	r2, r1
 80013ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6919      	ldr	r1, [r3, #16]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4403      	add	r3, r0
 80013c8:	409a      	lsls	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d824      	bhi.n	8001424 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3b05      	subs	r3, #5
 80013ec:	221f      	movs	r2, #31
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	400a      	ands	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	3b05      	subs	r3, #5
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
 8001422:	e04c      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d824      	bhi.n	8001476 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	3b23      	subs	r3, #35	; 0x23
 800143e:	221f      	movs	r2, #31
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	3b23      	subs	r3, #35	; 0x23
 8001468:	fa00 f203 	lsl.w	r2, r0, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
 8001474:	e023      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b41      	subs	r3, #65	; 0x41
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b41      	subs	r3, #65	; 0x41
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_ADC_ConfigChannel+0x258>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d109      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1e8>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b12      	cmp	r3, #18
 80014ce:	d105      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_ADC_ConfigChannel+0x25c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_ADC_ConfigChannel+0x25c>)
 80014d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014da:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_ADC_ConfigChannel+0x258>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d125      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23e>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_ADC_ConfigChannel+0x254>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d003      	beq.n	80014f8 <HAL_ADC_ConfigChannel+0x204>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b11      	cmp	r3, #17
 80014f6:	d11c      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_ADC_ConfigChannel+0x25c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_ADC_ConfigChannel+0x25c>)
 80014fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001502:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <HAL_ADC_ConfigChannel+0x254>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d111      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_ADC_ConfigChannel+0x260>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <HAL_ADC_ConfigChannel+0x264>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9a      	lsrs	r2, r3, #18
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001524:	e002      	b.n	800152c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3b01      	subs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	10000012 	.word	0x10000012
 800154c:	40012000 	.word	0x40012000
 8001550:	40012300 	.word	0x40012300
 8001554:	20000008 	.word	0x20000008
 8001558:	431bde83 	.word	0x431bde83

0800155c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001564:	4b78      	ldr	r3, [pc, #480]	; (8001748 <ADC_Init+0x1ec>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a77      	ldr	r2, [pc, #476]	; (8001748 <ADC_Init+0x1ec>)
 800156a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800156e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001570:	4b75      	ldr	r3, [pc, #468]	; (8001748 <ADC_Init+0x1ec>)
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	4973      	ldr	r1, [pc, #460]	; (8001748 <ADC_Init+0x1ec>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800158c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	021a      	lsls	r2, r3, #8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6899      	ldr	r1, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	4a58      	ldr	r2, [pc, #352]	; (800174c <ADC_Init+0x1f0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d022      	beq.n	8001636 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6899      	ldr	r1, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6899      	ldr	r1, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	e00f      	b.n	8001656 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0202 	bic.w	r2, r2, #2
 8001664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	005a      	lsls	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d01b      	beq.n	80016bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6859      	ldr	r1, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	3b01      	subs	r3, #1
 80016b0:	035a      	lsls	r2, r3, #13
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	e007      	b.n	80016cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	051a      	lsls	r2, r3, #20
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800170e:	025a      	lsls	r2, r3, #9
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6899      	ldr	r1, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	029a      	lsls	r2, r3, #10
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40012300 	.word	0x40012300
 800174c:	0f000001 	.word	0x0f000001

08001750 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001766:	2b00      	cmp	r3, #0
 8001768:	d13c      	bne.n	80017e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d12b      	bne.n	80017dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d127      	bne.n	80017dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d119      	bne.n	80017dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0220 	bic.w	r2, r2, #32
 80017b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fd6b 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017e2:	e00e      	b.n	8001802 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff fd75 	bl	80012e0 <HAL_ADC_ErrorCallback>
}
 80017f6:	e004      	b.n	8001802 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff fd57 	bl	80012cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f043 0204 	orr.w	r2, r3, #4
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff fd4a 	bl	80012e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <__NVIC_SetPriorityGrouping+0x40>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	4313      	orrs	r3, r2
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x40>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00
 8001898:	05fa0000 	.word	0x05fa0000

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff4c 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d6:	f7ff ff61 	bl	800189c <__NVIC_GetPriorityGrouping>
 80019da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	6978      	ldr	r0, [r7, #20]
 80019e2:	f7ff ffb1 	bl	8001948 <NVIC_EncodePriority>
 80019e6:	4602      	mov	r2, r0
 80019e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff80 	bl	80018f4 <__NVIC_SetPriority>
}
 80019f4:	bf00      	nop
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff54 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff fae8 	bl	8000ff8 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e099      	b.n	8001b68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a54:	e00f      	b.n	8001a76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a56:	f7ff facf 	bl	8000ff8 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d908      	bls.n	8001a76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e078      	b.n	8001b68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e8      	bne.n	8001a56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_DMA_Init+0x158>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d107      	bne.n	8001ae0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f023 0307 	bic.w	r3, r3, #7
 8001af6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d117      	bne.n	8001b3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 fb09 	bl	8002134 <DMA_CheckFifoParam>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b36:	2301      	movs	r3, #1
 8001b38:	e016      	b.n	8001b68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fac0 	bl	80020c8 <DMA_CalcBaseAndBitshift>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	223f      	movs	r2, #63	; 0x3f
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	e010803f 	.word	0xe010803f

08001b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_DMA_Start_IT+0x26>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e048      	b.n	8001c2c <HAL_DMA_Start_IT+0xb8>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d137      	bne.n	8001c1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 fa52 	bl	800206c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bcc:	223f      	movs	r2, #63	; 0x3f
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0216 	orr.w	r2, r2, #22
 8001be2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bf2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0208 	orr.w	r2, r2, #8
 8001c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e005      	b.n	8001c2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c42:	f7ff f9d9 	bl	8000ff8 <HAL_GetTick>
 8001c46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d008      	beq.n	8001c66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e052      	b.n	8001d0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0216 	bic.w	r2, r2, #22
 8001c74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_DMA_Abort+0x62>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0208 	bic.w	r2, r2, #8
 8001ca4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb6:	e013      	b.n	8001ce0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb8:	f7ff f99e 	bl	8000ff8 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d90c      	bls.n	8001ce0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e015      	b.n	8001d0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e4      	bne.n	8001cb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	223f      	movs	r2, #63	; 0x3f
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d004      	beq.n	8001d32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00c      	b.n	8001d4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2205      	movs	r2, #5
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d64:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_DMA_IRQHandler+0x258>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a92      	ldr	r2, [pc, #584]	; (8001fb4 <HAL_DMA_IRQHandler+0x25c>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2208      	movs	r2, #8
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0204 	bic.w	r2, r2, #4
 8001daa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2208      	movs	r2, #8
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2201      	movs	r2, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2204      	movs	r2, #4
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2210      	movs	r2, #16
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d043      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03c      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2210      	movs	r2, #16
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d024      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
 8001e86:	e01f      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
 8001e98:	e016      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0208 	bic.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2220      	movs	r2, #32
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 808e 	beq.w	8001ff6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8086 	beq.w	8001ff6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2220      	movs	r2, #32
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d136      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0216 	bic.w	r2, r2, #22
 8001f10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x1da>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0208 	bic.w	r2, r2, #8
 8001f40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	223f      	movs	r2, #63	; 0x3f
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d07d      	beq.n	8002062 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
        }
        return;
 8001f6e:	e078      	b.n	8002062 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01c      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d108      	bne.n	8001f9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d030      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e02b      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
 8001fae:	e022      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0210 	bic.w	r2, r2, #16
 8001fd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d032      	beq.n	8002064 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d022      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2205      	movs	r2, #5
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d307      	bcc.n	800203e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f2      	bne.n	8002022 <HAL_DMA_IRQHandler+0x2ca>
 800203c:	e000      	b.n	8002040 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800203e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e000      	b.n	8002064 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002062:	bf00      	nop
    }
  }
}
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop

0800206c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d108      	bne.n	80020ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020aa:	e007      	b.n	80020bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3b10      	subs	r3, #16
 80020d8:	4a13      	ldr	r2, [pc, #76]	; (8002128 <DMA_CalcBaseAndBitshift+0x60>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <DMA_CalcBaseAndBitshift+0x64>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d908      	bls.n	8002108 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <DMA_CalcBaseAndBitshift+0x68>)
 80020fe:	4013      	ands	r3, r2
 8002100:	1d1a      	adds	r2, r3, #4
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	659a      	str	r2, [r3, #88]	; 0x58
 8002106:	e006      	b.n	8002116 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <DMA_CalcBaseAndBitshift+0x68>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	aaaaaaab 	.word	0xaaaaaaab
 800212c:	08012f7c 	.word	0x08012f7c
 8002130:	fffffc00 	.word	0xfffffc00

08002134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11f      	bne.n	800218e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d855      	bhi.n	8002200 <DMA_CheckFifoParam+0xcc>
 8002154:	a201      	add	r2, pc, #4	; (adr r2, 800215c <DMA_CheckFifoParam+0x28>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	0800216d 	.word	0x0800216d
 8002160:	0800217f 	.word	0x0800217f
 8002164:	0800216d 	.word	0x0800216d
 8002168:	08002201 	.word	0x08002201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d045      	beq.n	8002204 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217c:	e042      	b.n	8002204 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002186:	d13f      	bne.n	8002208 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218c:	e03c      	b.n	8002208 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002196:	d121      	bne.n	80021dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d836      	bhi.n	800220c <DMA_CheckFifoParam+0xd8>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <DMA_CheckFifoParam+0x70>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bb 	.word	0x080021bb
 80021ac:	080021b5 	.word	0x080021b5
 80021b0:	080021cd 	.word	0x080021cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e02f      	b.n	800221a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d024      	beq.n	8002210 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ca:	e021      	b.n	8002210 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d4:	d11e      	bne.n	8002214 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021da:	e01b      	b.n	8002214 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d902      	bls.n	80021e8 <DMA_CheckFifoParam+0xb4>
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d003      	beq.n	80021ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e6:	e018      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e015      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00e      	beq.n	8002218 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      break;
 80021fe:	e00b      	b.n	8002218 <DMA_CheckFifoParam+0xe4>
      break;
 8002200:	bf00      	nop
 8002202:	e00a      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002204:	bf00      	nop
 8002206:	e008      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002208:	bf00      	nop
 800220a:	e006      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 800220c:	bf00      	nop
 800220e:	e004      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002210:	bf00      	nop
 8002212:	e002      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;   
 8002214:	bf00      	nop
 8002216:	e000      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002218:	bf00      	nop
    }
  } 
  
  return status; 
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e175      	b.n	8002534 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8164 	bne.w	800252e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x4e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b12      	cmp	r3, #18
 8002274:	d123      	bne.n	80022be <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	69b9      	ldr	r1, [r7, #24]
 80022ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0203 	and.w	r2, r3, #3
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d00b      	beq.n	8002312 <HAL_GPIO_Init+0xea>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002306:	2b11      	cmp	r3, #17
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b12      	cmp	r3, #18
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80be 	beq.w	800252e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_GPIO_Init+0x320>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a64      	ldr	r2, [pc, #400]	; (8002548 <HAL_GPIO_Init+0x320>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b62      	ldr	r3, [pc, #392]	; (8002548 <HAL_GPIO_Init+0x320>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ca:	4a60      	ldr	r2, [pc, #384]	; (800254c <HAL_GPIO_Init+0x324>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_GPIO_Init+0x328>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d037      	beq.n	8002466 <HAL_GPIO_Init+0x23e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a56      	ldr	r2, [pc, #344]	; (8002554 <HAL_GPIO_Init+0x32c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d031      	beq.n	8002462 <HAL_GPIO_Init+0x23a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a55      	ldr	r2, [pc, #340]	; (8002558 <HAL_GPIO_Init+0x330>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d02b      	beq.n	800245e <HAL_GPIO_Init+0x236>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a54      	ldr	r2, [pc, #336]	; (800255c <HAL_GPIO_Init+0x334>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d025      	beq.n	800245a <HAL_GPIO_Init+0x232>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a53      	ldr	r2, [pc, #332]	; (8002560 <HAL_GPIO_Init+0x338>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01f      	beq.n	8002456 <HAL_GPIO_Init+0x22e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_GPIO_Init+0x33c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <HAL_GPIO_Init+0x22a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a51      	ldr	r2, [pc, #324]	; (8002568 <HAL_GPIO_Init+0x340>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x226>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a50      	ldr	r2, [pc, #320]	; (800256c <HAL_GPIO_Init+0x344>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x222>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4f      	ldr	r2, [pc, #316]	; (8002570 <HAL_GPIO_Init+0x348>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x21e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4e      	ldr	r2, [pc, #312]	; (8002574 <HAL_GPIO_Init+0x34c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x21a>
 800243e:	2309      	movs	r3, #9
 8002440:	e012      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002442:	230a      	movs	r3, #10
 8002444:	e010      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002446:	2308      	movs	r3, #8
 8002448:	e00e      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800244a:	2307      	movs	r3, #7
 800244c:	e00c      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800244e:	2306      	movs	r3, #6
 8002450:	e00a      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002452:	2305      	movs	r3, #5
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002456:	2304      	movs	r3, #4
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002478:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_GPIO_Init+0x324>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002486:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <HAL_GPIO_Init+0x350>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024aa:	4a33      	ldr	r2, [pc, #204]	; (8002578 <HAL_GPIO_Init+0x350>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_GPIO_Init+0x350>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d4:	4a28      	ldr	r2, [pc, #160]	; (8002578 <HAL_GPIO_Init+0x350>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_GPIO_Init+0x350>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_GPIO_Init+0x350>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_GPIO_Init+0x350>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002528:	4a13      	ldr	r2, [pc, #76]	; (8002578 <HAL_GPIO_Init+0x350>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f ae86 	bls.w	8002248 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	3724      	adds	r7, #36	; 0x24
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40023800 	.word	0x40023800
 800254c:	40013800 	.word	0x40013800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800
 800255c:	40020c00 	.word	0x40020c00
 8002560:	40021000 	.word	0x40021000
 8002564:	40021400 	.word	0x40021400
 8002568:	40021800 	.word	0x40021800
 800256c:	40021c00 	.word	0x40021c00
 8002570:	40022000 	.word	0x40022000
 8002574:	40022400 	.word	0x40022400
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f006 f82c 	bl	800862c <HAL_GPIO_EXTI_Callback>
  }
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40013c00 	.word	0x40013c00

080025e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07f      	b.n	80026f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f005 fe4c 	bl	80082a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002630:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002640:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e006      	b.n	8002668 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002666:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d104      	bne.n	800267a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002678:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_I2C_Init+0x11c>)
 8002686:	430b      	orrs	r3, r1
 8002688:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002698:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	ea42 0103 	orr.w	r1, r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	021a      	lsls	r2, r3, #8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69d9      	ldr	r1, [r3, #28]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1a      	ldr	r2, [r3, #32]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	02008000 	.word	0x02008000

08002700 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b20      	cmp	r3, #32
 8002714:	d138      	bne.n	8002788 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002720:	2302      	movs	r3, #2
 8002722:	e032      	b.n	800278a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002752:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d139      	bne.n	8002820 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e033      	b.n	8002822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2224      	movs	r2, #36	; 0x24
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800285e:	f7fe fbcb 	bl	8000ff8 <HAL_GetTick>
 8002862:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002864:	e009      	b.n	800287a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002866:	f7fe fbc7 	bl	8000ff8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002874:	d901      	bls.n	800287a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e022      	b.n	80028c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d1ee      	bne.n	8002866 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002892:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002894:	f7fe fbb0 	bl	8000ff8 <HAL_GetTick>
 8002898:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800289a:	e009      	b.n	80028b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800289c:	f7fe fbac 	bl	8000ff8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028aa:	d901      	bls.n	80028b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e007      	b.n	80028c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028bc:	d1ee      	bne.n	800289c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000

080028d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e25e      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8087 	beq.w	8002a02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f4:	4b96      	ldr	r3, [pc, #600]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d00c      	beq.n	800291a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002900:	4b93      	ldr	r3, [pc, #588]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d112      	bne.n	8002932 <HAL_RCC_OscConfig+0x62>
 800290c:	4b90      	ldr	r3, [pc, #576]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002918:	d10b      	bne.n	8002932 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291a:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d06c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x130>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d168      	bne.n	8002a00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e238      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x7a>
 800293c:	4b84      	ldr	r3, [pc, #528]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a83      	ldr	r2, [pc, #524]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e02e      	b.n	80029a8 <HAL_RCC_OscConfig+0xd8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x9c>
 8002952:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7e      	ldr	r2, [pc, #504]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b7c      	ldr	r3, [pc, #496]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a7b      	ldr	r2, [pc, #492]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e01d      	b.n	80029a8 <HAL_RCC_OscConfig+0xd8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0xc0>
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a72      	ldr	r2, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0xd8>
 8002990:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fb22 	bl	8000ff8 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fe fb1e 	bl	8000ff8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1ec      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0xe8>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fb0e 	bl	8000ff8 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe fb0a 	bl	8000ff8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e1d8      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x110>
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d069      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a0e:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1a:	4b4d      	ldr	r3, [pc, #308]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d11c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x190>
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d116      	bne.n	8002a60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_RCC_OscConfig+0x17a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e1ac      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	493d      	ldr	r1, [pc, #244]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	e040      	b.n	8002ae2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d023      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fac0 	bl	8000ff8 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fabc 	bl	8000ff8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e18a      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4929      	ldr	r1, [pc, #164]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
 8002aae:	e018      	b.n	8002ae2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fa9c 	bl	8000ff8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fa98 	bl	8000ff8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e166      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d038      	beq.n	8002b60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d019      	beq.n	8002b2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fa79 	bl	8000ff8 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fa75 	bl	8000ff8 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e143      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x23a>
 8002b28:	e01a      	b.n	8002b60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe fa5f 	bl	8000ff8 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fa5b 	bl	8000ff8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d903      	bls.n	8002b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e129      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
 8002b50:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b95      	ldr	r3, [pc, #596]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a4 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b8f      	ldr	r3, [pc, #572]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b8c      	ldr	r3, [pc, #560]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a8b      	ldr	r2, [pc, #556]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b89      	ldr	r3, [pc, #548]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b96:	4b86      	ldr	r3, [pc, #536]	; (8002db0 <HAL_RCC_OscConfig+0x4e0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ba2:	4b83      	ldr	r3, [pc, #524]	; (8002db0 <HAL_RCC_OscConfig+0x4e0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a82      	ldr	r2, [pc, #520]	; (8002db0 <HAL_RCC_OscConfig+0x4e0>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7fe fa23 	bl	8000ff8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe fa1f 	bl	8000ff8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	; 0x64
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0ed      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc8:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <HAL_RCC_OscConfig+0x4e0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x31a>
 8002bdc:	4b73      	ldr	r3, [pc, #460]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4a72      	ldr	r2, [pc, #456]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
 8002be8:	e02d      	b.n	8002c46 <HAL_RCC_OscConfig+0x376>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x33c>
 8002bf2:	4b6e      	ldr	r3, [pc, #440]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a6d      	ldr	r2, [pc, #436]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfe:	4b6b      	ldr	r3, [pc, #428]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a6a      	ldr	r2, [pc, #424]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	e01c      	b.n	8002c46 <HAL_RCC_OscConfig+0x376>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCC_OscConfig+0x35e>
 8002c14:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a64      	ldr	r2, [pc, #400]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b62      	ldr	r3, [pc, #392]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a61      	ldr	r2, [pc, #388]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0x376>
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a5e      	ldr	r2, [pc, #376]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3a:	4b5c      	ldr	r3, [pc, #368]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d015      	beq.n	8002c7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe f9d3 	bl	8000ff8 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe f9cf 	bl	8000ff8 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e09b      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ee      	beq.n	8002c56 <HAL_RCC_OscConfig+0x386>
 8002c78:	e014      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe f9bd 	bl	8000ff8 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe f9b9 	bl	8000ff8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e085      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	4b44      	ldr	r3, [pc, #272]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002caa:	4b40      	ldr	r3, [pc, #256]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a3f      	ldr	r2, [pc, #252]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d071      	beq.n	8002da2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d069      	beq.n	8002d9e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d14b      	bne.n	8002d6a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a35      	ldr	r2, [pc, #212]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe f98b 	bl	8000ff8 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fe f987 	bl	8000ff8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e055      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	019b      	lsls	r3, r3, #6
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	071b      	lsls	r3, r3, #28
 8002d30:	491e      	ldr	r1, [pc, #120]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fe f959 	bl	8000ff8 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe f955 	bl	8000ff8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e023      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x47a>
 8002d68:	e01b      	b.n	8002da2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe f93f 	bl	8000ff8 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe f93b 	bl	8000ff8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e009      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x4dc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4ae>
 8002d9c:	e001      	b.n	8002da2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0ce      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d910      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b66      	ldr	r3, [pc, #408]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	4964      	ldr	r1, [pc, #400]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0b6      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e14:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a57      	ldr	r2, [pc, #348]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e2c:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a51      	ldr	r2, [pc, #324]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4b4f      	ldr	r3, [pc, #316]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	494c      	ldr	r1, [pc, #304]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d040      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d115      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e07d      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e071      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3c      	ldr	r3, [pc, #240]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e069      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4935      	ldr	r1, [pc, #212]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea8:	f7fe f8a6 	bl	8000ff8 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe f8a2 	bl	8000ff8 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e051      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d210      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 020f 	bic.w	r2, r3, #15
 8002eee:	4921      	ldr	r1, [pc, #132]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e030      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4915      	ldr	r1, [pc, #84]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	490d      	ldr	r1, [pc, #52]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f46:	f000 f81d 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	5cd3      	ldrb	r3, [r2, r3]
 8002f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_RCC_ClockConfig+0x1cc>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f005 ff1c 	bl	8008da0 <HAL_InitTick>

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023c00 	.word	0x40023c00
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	08012f84 	.word	0x08012f84
 8002f80:	20000008 	.word	0x20000008

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	2300      	movs	r3, #0
 8002f94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9a:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_GetSysClockFreq+0x158>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d007      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x32>
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x38>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 808d 	bne.w	80030ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002fb2:	60bb      	str	r3, [r7, #8]
       break;
 8002fb4:	e08c      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fb6:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fb8:	60bb      	str	r3, [r7, #8]
      break;
 8002fba:	e089      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fbc:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_GetSysClockFreq+0x158>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fc6:	4b45      	ldr	r3, [pc, #276]	; (80030dc <HAL_RCC_GetSysClockFreq+0x158>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d023      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd2:	4b42      	ldr	r3, [pc, #264]	; (80030dc <HAL_RCC_GetSysClockFreq+0x158>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	f04f 0400 	mov.w	r4, #0
 8002fdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	ea03 0501 	and.w	r5, r3, r1
 8002fe8:	ea04 0602 	and.w	r6, r4, r2
 8002fec:	4a3d      	ldr	r2, [pc, #244]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fee:	fb02 f106 	mul.w	r1, r2, r6
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	fb02 f205 	mul.w	r2, r2, r5
 8002ff8:	440a      	add	r2, r1
 8002ffa:	493a      	ldr	r1, [pc, #232]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ffc:	fba5 0101 	umull	r0, r1, r5, r1
 8003000:	1853      	adds	r3, r2, r1
 8003002:	4619      	mov	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f04f 0400 	mov.w	r4, #0
 800300a:	461a      	mov	r2, r3
 800300c:	4623      	mov	r3, r4
 800300e:	f7fd f96f 	bl	80002f0 <__aeabi_uldivmod>
 8003012:	4603      	mov	r3, r0
 8003014:	460c      	mov	r4, r1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e049      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_GetSysClockFreq+0x158>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	f04f 0400 	mov.w	r4, #0
 8003024:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	ea03 0501 	and.w	r5, r3, r1
 8003030:	ea04 0602 	and.w	r6, r4, r2
 8003034:	4629      	mov	r1, r5
 8003036:	4632      	mov	r2, r6
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	0154      	lsls	r4, r2, #5
 8003042:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003046:	014b      	lsls	r3, r1, #5
 8003048:	4619      	mov	r1, r3
 800304a:	4622      	mov	r2, r4
 800304c:	1b49      	subs	r1, r1, r5
 800304e:	eb62 0206 	sbc.w	r2, r2, r6
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	f04f 0400 	mov.w	r4, #0
 800305a:	0194      	lsls	r4, r2, #6
 800305c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003060:	018b      	lsls	r3, r1, #6
 8003062:	1a5b      	subs	r3, r3, r1
 8003064:	eb64 0402 	sbc.w	r4, r4, r2
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	00e2      	lsls	r2, r4, #3
 8003072:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003076:	00d9      	lsls	r1, r3, #3
 8003078:	460b      	mov	r3, r1
 800307a:	4614      	mov	r4, r2
 800307c:	195b      	adds	r3, r3, r5
 800307e:	eb44 0406 	adc.w	r4, r4, r6
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	02a2      	lsls	r2, r4, #10
 800308c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003090:	0299      	lsls	r1, r3, #10
 8003092:	460b      	mov	r3, r1
 8003094:	4614      	mov	r4, r2
 8003096:	4618      	mov	r0, r3
 8003098:	4621      	mov	r1, r4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f04f 0400 	mov.w	r4, #0
 80030a0:	461a      	mov	r2, r3
 80030a2:	4623      	mov	r3, r4
 80030a4:	f7fd f924 	bl	80002f0 <__aeabi_uldivmod>
 80030a8:	4603      	mov	r3, r0
 80030aa:	460c      	mov	r4, r1
 80030ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_GetSysClockFreq+0x158>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	3301      	adds	r3, #1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	60bb      	str	r3, [r7, #8]
      break;
 80030c8:	e002      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030cc:	60bb      	str	r3, [r7, #8]
      break;
 80030ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d0:	68bb      	ldr	r3, [r7, #8]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	017d7840 	.word	0x017d7840

080030e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000008 	.word	0x20000008

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003104:	f7ff fff0 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003108:	4601      	mov	r1, r0
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0a9b      	lsrs	r3, r3, #10
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4a03      	ldr	r2, [pc, #12]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003116:	5cd3      	ldrb	r3, [r2, r3]
 8003118:	fa21 f303 	lsr.w	r3, r1, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	08012f94 	.word	0x08012f94

08003128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800312c:	f7ff ffdc 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003130:	4601      	mov	r1, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0b5b      	lsrs	r3, r3, #13
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4a03      	ldr	r2, [pc, #12]	; (800314c <HAL_RCC_GetPCLK2Freq+0x24>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08012f94 	.word	0x08012f94

08003150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	220f      	movs	r2, #15
 800315e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_RCC_GetClockConfig+0x5c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_RCC_GetClockConfig+0x5c>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_RCC_GetClockConfig+0x5c>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_GetClockConfig+0x5c>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HAL_RCC_GetClockConfig+0x60>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 020f 	and.w	r2, r3, #15
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40023c00 	.word	0x40023c00

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d012      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031dc:	4b69      	ldr	r3, [pc, #420]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a68      	ldr	r2, [pc, #416]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031e6:	6093      	str	r3, [r2, #8]
 80031e8:	4b66      	ldr	r3, [pc, #408]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	4964      	ldr	r1, [pc, #400]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031fe:	2301      	movs	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d017      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800320e:	4b5d      	ldr	r3, [pc, #372]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	4959      	ldr	r1, [pc, #356]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800322c:	d101      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800322e:	2301      	movs	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d017      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800324a:	4b4e      	ldr	r3, [pc, #312]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003250:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	494a      	ldr	r1, [pc, #296]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003268:	d101      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003276:	2301      	movs	r3, #1
 8003278:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 808b 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003298:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4a39      	ldr	r2, [pc, #228]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a2:	6413      	str	r3, [r2, #64]	; 0x40
 80032a4:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a34      	ldr	r2, [pc, #208]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fd fe9c 	bl	8000ff8 <HAL_GetTick>
 80032c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c4:	f7fd fe98 	bl	8000ff8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e38d      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032d6:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e2:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d035      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d02e      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003300:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003320:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003322:	4a18      	ldr	r2, [pc, #96]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003328:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d114      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fe60 	bl	8000ff8 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fd fe5c 	bl	8000ff8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e34f      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800336a:	d111      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800337a:	400b      	ands	r3, r1
 800337c:	4901      	ldr	r1, [pc, #4]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
 8003382:	e00b      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000
 800338c:	0ffffcff 	.word	0x0ffffcff
 8003390:	4bb3      	ldr	r3, [pc, #716]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4ab2      	ldr	r2, [pc, #712]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003396:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800339a:	6093      	str	r3, [r2, #8]
 800339c:	4bb0      	ldr	r3, [pc, #704]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	49ad      	ldr	r1, [pc, #692]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d010      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ba:	4ba9      	ldr	r3, [pc, #676]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c0:	4aa7      	ldr	r2, [pc, #668]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033ca:	4ba5      	ldr	r3, [pc, #660]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	49a2      	ldr	r1, [pc, #648]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033e8:	4b9d      	ldr	r3, [pc, #628]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f6:	499a      	ldr	r1, [pc, #616]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800340a:	4b95      	ldr	r3, [pc, #596]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003418:	4991      	ldr	r1, [pc, #580]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800342c:	4b8c      	ldr	r3, [pc, #560]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343a:	4989      	ldr	r1, [pc, #548]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800344e:	4b84      	ldr	r3, [pc, #528]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4980      	ldr	r1, [pc, #512]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003470:	4b7b      	ldr	r3, [pc, #492]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f023 0203 	bic.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	4978      	ldr	r1, [pc, #480]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003492:	4b73      	ldr	r3, [pc, #460]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f023 020c 	bic.w	r2, r3, #12
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a0:	496f      	ldr	r1, [pc, #444]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	4967      	ldr	r1, [pc, #412]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034d6:	4b62      	ldr	r3, [pc, #392]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	495e      	ldr	r1, [pc, #376]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	4956      	ldr	r1, [pc, #344]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800351a:	4b51      	ldr	r3, [pc, #324]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800353c:	4b48      	ldr	r3, [pc, #288]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	4945      	ldr	r1, [pc, #276]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800355e:	4b40      	ldr	r3, [pc, #256]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	493c      	ldr	r1, [pc, #240]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003580:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d011      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035a2:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b0:	492b      	ldr	r1, [pc, #172]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035e2:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f0:	491b      	ldr	r1, [pc, #108]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003614:	4912      	ldr	r1, [pc, #72]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003638:	4909      	ldr	r1, [pc, #36]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00f      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800364e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003652:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	e002      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	4985      	ldr	r1, [pc, #532]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003678:	4b80      	ldr	r3, [pc, #512]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800367a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800367e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003688:	497c      	ldr	r1, [pc, #496]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d005      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800369e:	f040 80d6 	bne.w	800384e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036a2:	4b76      	ldr	r3, [pc, #472]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a75      	ldr	r2, [pc, #468]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ae:	f7fd fca3 	bl	8000ff8 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036b6:	f7fd fc9f 	bl	8000ff8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	; 0x64
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e194      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036c8:	4b6c      	ldr	r3, [pc, #432]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d021      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d11d      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036e8:	4b64      	ldr	r3, [pc, #400]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ee:	0c1b      	lsrs	r3, r3, #16
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036f6:	4b61      	ldr	r3, [pc, #388]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fc:	0e1b      	lsrs	r3, r3, #24
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	019a      	lsls	r2, r3, #6
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	061b      	lsls	r3, r3, #24
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	071b      	lsls	r3, r3, #28
 800371c:	4957      	ldr	r1, [pc, #348]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02e      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374e:	d129      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003750:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800375e:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003764:	0f1b      	lsrs	r3, r3, #28
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	019a      	lsls	r2, r3, #6
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	431a      	orrs	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	071b      	lsls	r3, r3, #28
 8003784:	493d      	ldr	r1, [pc, #244]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800378c:	4b3b      	ldr	r3, [pc, #236]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800378e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003792:	f023 021f 	bic.w	r2, r3, #31
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	3b01      	subs	r3, #1
 800379c:	4937      	ldr	r1, [pc, #220]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01d      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037b0:	4b32      	ldr	r3, [pc, #200]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b6:	0e1b      	lsrs	r3, r3, #24
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037be:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c4:	0f1b      	lsrs	r3, r3, #28
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	019a      	lsls	r2, r3, #6
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	431a      	orrs	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	431a      	orrs	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	071b      	lsls	r3, r3, #28
 80037e4:	4925      	ldr	r1, [pc, #148]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d011      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	019a      	lsls	r2, r3, #6
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	061b      	lsls	r3, r3, #24
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	071b      	lsls	r3, r3, #28
 8003814:	4919      	ldr	r1, [pc, #100]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800381c:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a16      	ldr	r2, [pc, #88]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fd fbe6 	bl	8000ff8 <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003830:	f7fd fbe2 	bl	8000ff8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0d7      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b01      	cmp	r3, #1
 8003852:	f040 80cd 	bne.w	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a08      	ldr	r2, [pc, #32]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003862:	f7fd fbc9 	bl	8000ff8 <HAL_GetTick>
 8003866:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003868:	e00a      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800386a:	f7fd fbc5 	bl	8000ff8 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b64      	cmp	r3, #100	; 0x64
 8003876:	d903      	bls.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e0ba      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800387c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003880:	4b5e      	ldr	r3, [pc, #376]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388c:	d0ed      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02e      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d12a      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038c4:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	0f1b      	lsrs	r3, r3, #28
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	019a      	lsls	r2, r3, #6
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	061b      	lsls	r3, r3, #24
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	071b      	lsls	r3, r3, #28
 80038ea:	4944      	ldr	r1, [pc, #272]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038f2:	4b42      	ldr	r3, [pc, #264]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	493d      	ldr	r1, [pc, #244]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003920:	d11d      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003922:	4b36      	ldr	r3, [pc, #216]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	0e1b      	lsrs	r3, r3, #24
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003930:	4b32      	ldr	r3, [pc, #200]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	0f1b      	lsrs	r3, r3, #28
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	019a      	lsls	r2, r3, #6
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	431a      	orrs	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	061b      	lsls	r3, r3, #24
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	4929      	ldr	r1, [pc, #164]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800396a:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	0e1b      	lsrs	r3, r3, #24
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	019a      	lsls	r2, r3, #6
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	431a      	orrs	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	061b      	lsls	r3, r3, #24
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	071b      	lsls	r3, r3, #28
 800399e:	4917      	ldr	r1, [pc, #92]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	4911      	ldr	r1, [pc, #68]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c8:	f7fd fb16 	bl	8000ff8 <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039d0:	f7fd fb12 	bl	8000ff8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e007      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ee:	d1ef      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800

08003a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e084      	b.n	8003b1c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f004 ff27 	bl	8008880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a52:	d902      	bls.n	8003a5a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e002      	b.n	8003a60 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a68:	d007      	beq.n	8003a7a <HAL_SPI_Init+0x7a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a72:	d002      	beq.n	8003a7a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a8a:	d903      	bls.n	8003a94 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
 8003a92:	e002      	b.n	8003a9a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	f003 0204 	and.w	r2, r3, #4
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	ea42 0103 	orr.w	r1, r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b32:	2301      	movs	r3, #1
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x26>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e1fb      	b.n	8003f42 <HAL_SPI_TransmitReceive+0x41e>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b52:	f7fd fa51 	bl	8000ff8 <HAL_GetTick>
 8003b56:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b5e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b66:	887b      	ldrh	r3, [r7, #2]
 8003b68:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b6a:	887b      	ldrh	r3, [r7, #2]
 8003b6c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b6e:	7efb      	ldrb	r3, [r7, #27]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d00e      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x6e>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7a:	d106      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x66>
 8003b84:	7efb      	ldrb	r3, [r7, #27]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d003      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b90:	e1cd      	b.n	8003f2e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_SPI_TransmitReceive+0x80>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_SPI_TransmitReceive+0x80>
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d103      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003baa:	e1c0      	b.n	8003f2e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d003      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2205      	movs	r2, #5
 8003bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	887a      	ldrh	r2, [r7, #2]
 8003be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c02:	d802      	bhi.n	8003c0a <HAL_SPI_TransmitReceive+0xe6>
 8003c04:	8a3b      	ldrh	r3, [r7, #16]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d908      	bls.n	8003c1c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	e007      	b.n	8003c2c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d007      	beq.n	8003c4a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c52:	d97c      	bls.n	8003d4e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x13e>
 8003c5c:	8a7b      	ldrh	r3, [r7, #18]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d169      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	881a      	ldrh	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	1c9a      	adds	r2, r3, #2
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c86:	e056      	b.n	8003d36 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d11b      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x1aa>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d016      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x1aa>
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d113      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	881a      	ldrh	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	1c9a      	adds	r2, r3, #2
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d11c      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x1f2>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d12:	2301      	movs	r3, #1
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d16:	f7fd f96f 	bl	8000ff8 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d807      	bhi.n	8003d36 <HAL_SPI_TransmitReceive+0x212>
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d003      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d34:	e0fb      	b.n	8003f2e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1a3      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x164>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d19d      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x164>
 8003d4c:	e0df      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_SPI_TransmitReceive+0x23a>
 8003d56:	8a7b      	ldrh	r3, [r7, #18]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	f040 80cb 	bne.w	8003ef4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d912      	bls.n	8003d8e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	1c9a      	adds	r2, r3, #2
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b02      	subs	r3, #2
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d8c:	e0b2      	b.n	8003ef4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db4:	e09e      	b.n	8003ef4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d134      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x30a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02f      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x30a>
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d12c      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d912      	bls.n	8003e04 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	881a      	ldrh	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	1c9a      	adds	r2, r3, #2
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b02      	subs	r3, #2
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e02:	e012      	b.n	8003e2a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d148      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x3aa>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d042      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d923      	bls.n	8003e9c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	1c9a      	adds	r2, r3, #2
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b02      	subs	r3, #2
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d81f      	bhi.n	8003eca <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	e016      	b.n	8003eca <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f103 020c 	add.w	r2, r3, #12
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ece:	f7fd f893 	bl	8000ff8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d803      	bhi.n	8003ee6 <HAL_SPI_TransmitReceive+0x3c2>
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x3c8>
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d103      	bne.n	8003ef4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ef2:	e01c      	b.n	8003f2e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f47f af5b 	bne.w	8003db6 <HAL_SPI_TransmitReceive+0x292>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f af54 	bne.w	8003db6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fcda 	bl	80048cc <SPI_EndRxTxTransaction>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d006      	beq.n	8003f2c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	661a      	str	r2, [r3, #96]	; 0x60
 8003f2a:	e000      	b.n	8003f2e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_SPI_TransmitReceive_DMA+0x20>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e16c      	b.n	8004246 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f7a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003f82:	7dbb      	ldrb	r3, [r7, #22]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d00d      	beq.n	8003fa4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d106      	bne.n	8003f9e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003f98:	7dbb      	ldrb	r3, [r7, #22]
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fa2:	e14b      	b.n	800423c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003fb0:	887b      	ldrh	r3, [r7, #2]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fba:	e13f      	b.n	800423c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d003      	beq.n	8003fd0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2205      	movs	r2, #5
 8003fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	887a      	ldrh	r2, [r7, #2]
 8003fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	887a      	ldrh	r2, [r7, #2]
 8003ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	887a      	ldrh	r2, [r7, #2]
 8003ffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004018:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004022:	d908      	bls.n	8004036 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	e06f      	b.n	8004116 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004044:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004050:	d126      	bne.n	80040a0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800406c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800407c:	e010      	b.n	80040a0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800408c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004092:	b29b      	uxth	r3, r3
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	b29b      	uxth	r3, r3
 8004098:	3301      	adds	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040aa:	d134      	bne.n	8004116 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ba:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d111      	bne.n	80040f0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040ee:	e012      	b.n	8004116 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004106:	b29b      	uxth	r3, r3
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	b29b      	uxth	r3, r3
 800410c:	3301      	adds	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b04      	cmp	r3, #4
 8004120:	d108      	bne.n	8004134 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	4a49      	ldr	r2, [pc, #292]	; (8004254 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c
 8004132:	e007      	b.n	8004144 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	4a47      	ldr	r2, [pc, #284]	; (8004258 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	4a46      	ldr	r2, [pc, #280]	; (800425c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004142:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	4a45      	ldr	r2, [pc, #276]	; (8004260 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800414a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	2200      	movs	r2, #0
 8004152:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	4619      	mov	r1, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	461a      	mov	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800416c:	b29b      	uxth	r3, r3
 800416e:	f7fd fd01 	bl	8001b74 <HAL_DMA_Start_IT>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00c      	beq.n	8004192 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417c:	f043 0210 	orr.w	r2, r3, #16
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004190:	e054      	b.n	800423c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	2200      	movs	r2, #0
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	2200      	movs	r2, #0
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	2200      	movs	r2, #0
 80041b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	2200      	movs	r2, #0
 80041c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	4619      	mov	r1, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	461a      	mov	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f7fd fccb 	bl	8001b74 <HAL_DMA_Start_IT>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e8:	f043 0210 	orr.w	r2, r3, #16
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80041fc:	e01e      	b.n	800423c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d007      	beq.n	800421c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0220 	orr.w	r2, r2, #32
 800422a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0202 	orr.w	r2, r2, #2
 800423a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004244:	7dfb      	ldrb	r3, [r7, #23]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	080045cd 	.word	0x080045cd
 8004254:	080044b5 	.word	0x080044b5
 8004258:	080045e9 	.word	0x080045e9
 800425c:	0800453b 	.word	0x0800453b
 8004260:	08004605 	.word	0x08004605

08004264 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	099b      	lsrs	r3, r3, #6
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d004      	beq.n	80042a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
    return;
 80042a6:	e0d8      	b.n	800445a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_SPI_IRQHandler+0x66>
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	09db      	lsrs	r3, r3, #7
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
    return;
 80042c8:	e0c7      	b.n	800445a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_SPI_IRQHandler+0x8c>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_SPI_IRQHandler+0x8c>
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80b5 	beq.w	800445a <HAL_SPI_IRQHandler+0x1f6>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80ae 	beq.w	800445a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	099b      	lsrs	r3, r3, #6
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d023      	beq.n	8004352 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b03      	cmp	r3, #3
 8004314:	d011      	beq.n	800433a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431a:	f043 0204 	orr.w	r2, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	e00b      	b.n	8004352 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]
        return;
 8004350:	e083      	b.n	800445a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	f043 0208 	orr.w	r2, r3, #8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043a0:	2300      	movs	r3, #0
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d050      	beq.n	8004458 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_SPI_IRQHandler+0x17e>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d034      	beq.n	800444c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0203 	bic.w	r2, r2, #3
 80043f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d011      	beq.n	800441e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_SPI_IRQHandler+0x1fc>)
 8004400:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd fc84 	bl	8001d14 <HAL_DMA_Abort_IT>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <HAL_SPI_IRQHandler+0x1fc>)
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd fc6e 	bl	8001d14 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800444a:	e003      	b.n	8004454 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f827 	bl	80044a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004452:	e000      	b.n	8004456 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004454:	bf00      	nop
    return;
 8004456:	bf00      	nop
 8004458:	bf00      	nop
  }
}
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	08004645 	.word	0x08004645

08004464 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c2:	f7fc fd99 	bl	8000ff8 <HAL_GetTick>
 80044c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d6:	d02a      	beq.n	800452e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0220 	bic.w	r2, r2, #32
 80044e6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0203 	bic.w	r2, r2, #3
 80044f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	2164      	movs	r1, #100	; 0x64
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f98d 	bl	800481c <SPI_EndRxTransaction>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff ffba 	bl	80044a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800452c:	e002      	b.n	8004534 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff ff98 	bl	8004464 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004548:	f7fc fd56 	bl	8000ff8 <HAL_GetTick>
 800454c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455c:	d030      	beq.n	80045c0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0220 	bic.w	r2, r2, #32
 800456c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	2164      	movs	r1, #100	; 0x64
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f9aa 	bl	80048cc <SPI_EndRxTxTransaction>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0203 	bic.w	r2, r2, #3
 8004598:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff ff71 	bl	80044a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045be:	e002      	b.n	80045c6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f004 f825 	bl	8008610 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff ff4c 	bl	8004478 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff ff48 	bl	800448c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0203 	bic.w	r2, r2, #3
 8004620:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004626:	f043 0210 	orr.w	r2, r3, #16
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff ff32 	bl	80044a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff ff1d 	bl	80044a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800467e:	e04c      	b.n	800471a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d048      	beq.n	800471a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004688:	f7fc fcb6 	bl	8000ff8 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d902      	bls.n	800469e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d13d      	bne.n	800471a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b6:	d111      	bne.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c0:	d004      	beq.n	80046cc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ca:	d107      	bne.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e4:	d10f      	bne.n	8004706 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e00f      	b.n	800473a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	429a      	cmp	r2, r3
 8004736:	d1a3      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004750:	e057      	b.n	8004802 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004758:	d106      	bne.n	8004768 <SPI_WaitFifoStateUntilTimeout+0x26>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d048      	beq.n	8004802 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004770:	f7fc fc42 	bl	8000ff8 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d902      	bls.n	8004786 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d13d      	bne.n	8004802 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479e:	d111      	bne.n	80047c4 <SPI_WaitFifoStateUntilTimeout+0x82>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a8:	d004      	beq.n	80047b4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b2:	d107      	bne.n	80047c4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047cc:	d10f      	bne.n	80047ee <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e008      	b.n	8004814 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d19f      	bne.n	8004752 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004830:	d111      	bne.n	8004856 <SPI_EndRxTransaction+0x3a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483a:	d004      	beq.n	8004846 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004844:	d107      	bne.n	8004856 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004854:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff ff04 	bl	800466e <SPI_WaitFlagStateUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e023      	b.n	80048c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004884:	d11d      	bne.n	80048c2 <SPI_EndRxTransaction+0xa6>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488e:	d004      	beq.n	800489a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004898:	d113      	bne.n	80048c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff ff4b 	bl	8004742 <SPI_WaitFifoStateUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e000      	b.n	80048c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2200      	movs	r2, #0
 80048e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff ff2c 	bl	8004742 <SPI_WaitFifoStateUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e027      	b.n	8004950 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	2180      	movs	r1, #128	; 0x80
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff feaf 	bl	800466e <SPI_WaitFlagStateUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e014      	b.n	8004950 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2200      	movs	r2, #0
 800492e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff ff05 	bl	8004742 <SPI_WaitFifoStateUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e000      	b.n	8004950 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e01d      	b.n	80049a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f005 f91a 	bl	8009bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f000 fc16 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_TIM_Base_Start_IT+0x50>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d00b      	beq.n	80049f2 <HAL_TIM_Base_Start_IT+0x42>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e0:	d007      	beq.n	80049f2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	00010007 	.word	0x00010007

08004a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e01d      	b.n	8004a52 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f005 f9a4 	bl	8009d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 fbc0 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 ff42 	bl	80058f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_TIM_PWM_Start+0x7c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_PWM_Start+0x2c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <HAL_TIM_PWM_Start+0x80>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d101      	bne.n	8004a8c <HAL_TIM_PWM_Start+0x30>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <HAL_TIM_PWM_Start+0x32>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <HAL_TIM_PWM_Start+0x84>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d00b      	beq.n	8004acc <HAL_TIM_PWM_Start+0x70>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aba:	d007      	beq.n	8004acc <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	40010400 	.word	0x40010400
 8004ae0:	00010007 	.word	0x00010007

08004ae4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fefe 	bl	80058f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a22      	ldr	r2, [pc, #136]	; (8004b8c <HAL_TIM_PWM_Stop+0xa8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_TIM_PWM_Stop+0x2c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <HAL_TIM_PWM_Stop+0xac>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d101      	bne.n	8004b14 <HAL_TIM_PWM_Stop+0x30>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_TIM_PWM_Stop+0x32>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d017      	beq.n	8004b4a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6a1a      	ldr	r2, [r3, #32]
 8004b20:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_TIM_PWM_Stop+0x66>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6a1a      	ldr	r2, [r3, #32]
 8004b30:	f240 4344 	movw	r3, #1092	; 0x444
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <HAL_TIM_PWM_Stop+0x66>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a1a      	ldr	r2, [r3, #32]
 8004b50:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <HAL_TIM_PWM_Stop+0x96>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	f240 4344 	movw	r3, #1092	; 0x444
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d107      	bne.n	8004b7a <HAL_TIM_PWM_Stop+0x96>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40010400 	.word	0x40010400

08004b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d122      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0202 	mvn.w	r2, #2
 8004bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fad8 	bl	800518c <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 faca 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fadb 	bl	80051a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d122      	bne.n	8004c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d11b      	bne.n	8004c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0204 	mvn.w	r2, #4
 8004c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 faae 	bl	800518c <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 faa0 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fab1 	bl	80051a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0208 	mvn.w	r2, #8
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa84 	bl	800518c <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa76 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fa87 	bl	80051a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d122      	bne.n	8004cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0210 	mvn.w	r2, #16
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa5a 	bl	800518c <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa4c 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fa5d 	bl	80051a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0201 	mvn.w	r2, #1
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f003 fca2 	bl	800865c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fee4 	bl	8005b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d52:	d10e      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b80      	cmp	r3, #128	; 0x80
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fed7 	bl	8005b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d10e      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d107      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa0b 	bl	80051b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d10e      	bne.n	8004dca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d107      	bne.n	8004dca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f06f 0220 	mvn.w	r2, #32
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fe97 	bl	8005af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e105      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x226>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b14      	cmp	r3, #20
 8004e02:	f200 80f0 	bhi.w	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004e06:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e61 	.word	0x08004e61
 8004e10:	08004fe7 	.word	0x08004fe7
 8004e14:	08004fe7 	.word	0x08004fe7
 8004e18:	08004fe7 	.word	0x08004fe7
 8004e1c:	08004ea1 	.word	0x08004ea1
 8004e20:	08004fe7 	.word	0x08004fe7
 8004e24:	08004fe7 	.word	0x08004fe7
 8004e28:	08004fe7 	.word	0x08004fe7
 8004e2c:	08004ee3 	.word	0x08004ee3
 8004e30:	08004fe7 	.word	0x08004fe7
 8004e34:	08004fe7 	.word	0x08004fe7
 8004e38:	08004fe7 	.word	0x08004fe7
 8004e3c:	08004f23 	.word	0x08004f23
 8004e40:	08004fe7 	.word	0x08004fe7
 8004e44:	08004fe7 	.word	0x08004fe7
 8004e48:	08004fe7 	.word	0x08004fe7
 8004e4c:	08004f65 	.word	0x08004f65
 8004e50:	08004fe7 	.word	0x08004fe7
 8004e54:	08004fe7 	.word	0x08004fe7
 8004e58:	08004fe7 	.word	0x08004fe7
 8004e5c:	08004fa5 	.word	0x08004fa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fa4e 	bl	8005308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0208 	orr.w	r2, r2, #8
 8004e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0204 	bic.w	r2, r2, #4
 8004e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6999      	ldr	r1, [r3, #24]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	619a      	str	r2, [r3, #24]
      break;
 8004e9e:	e0a3      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 faa0 	bl	80053ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6999      	ldr	r1, [r3, #24]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	021a      	lsls	r2, r3, #8
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	619a      	str	r2, [r3, #24]
      break;
 8004ee0:	e082      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 faf7 	bl	80054dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0208 	orr.w	r2, r2, #8
 8004efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0204 	bic.w	r2, r2, #4
 8004f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69d9      	ldr	r1, [r3, #28]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	61da      	str	r2, [r3, #28]
      break;
 8004f20:	e062      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fb4d 	bl	80055c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69d9      	ldr	r1, [r3, #28]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	021a      	lsls	r2, r3, #8
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	61da      	str	r2, [r3, #28]
      break;
 8004f62:	e041      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fb84 	bl	8005678 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0208 	orr.w	r2, r2, #8
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fa2:	e021      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fbb6 	bl	800571c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fe4:	e000      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004fe6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop

08005004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIM_ConfigClockSource+0x18>
 8005018:	2302      	movs	r3, #2
 800501a:	e0a6      	b.n	800516a <HAL_TIM_ConfigClockSource+0x166>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4b4f      	ldr	r3, [pc, #316]	; (8005174 <HAL_TIM_ConfigClockSource+0x170>)
 8005038:	4013      	ands	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005042:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d067      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0x120>
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d80b      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x6c>
 8005058:	2b10      	cmp	r3, #16
 800505a:	d073      	beq.n	8005144 <HAL_TIM_ConfigClockSource+0x140>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d802      	bhi.n	8005066 <HAL_TIM_ConfigClockSource+0x62>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d06f      	beq.n	8005144 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005064:	e078      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005066:	2b20      	cmp	r3, #32
 8005068:	d06c      	beq.n	8005144 <HAL_TIM_ConfigClockSource+0x140>
 800506a:	2b30      	cmp	r3, #48	; 0x30
 800506c:	d06a      	beq.n	8005144 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800506e:	e073      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005070:	2b70      	cmp	r3, #112	; 0x70
 8005072:	d00d      	beq.n	8005090 <HAL_TIM_ConfigClockSource+0x8c>
 8005074:	2b70      	cmp	r3, #112	; 0x70
 8005076:	d804      	bhi.n	8005082 <HAL_TIM_ConfigClockSource+0x7e>
 8005078:	2b50      	cmp	r3, #80	; 0x50
 800507a:	d033      	beq.n	80050e4 <HAL_TIM_ConfigClockSource+0xe0>
 800507c:	2b60      	cmp	r3, #96	; 0x60
 800507e:	d041      	beq.n	8005104 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005080:	e06a      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005086:	d066      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x152>
 8005088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508c:	d017      	beq.n	80050be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800508e:	e063      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f000 fc0a 	bl	80058b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	609a      	str	r2, [r3, #8]
      break;
 80050bc:	e04c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6899      	ldr	r1, [r3, #8]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f000 fbf3 	bl	80058b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e0:	609a      	str	r2, [r3, #8]
      break;
 80050e2:	e039      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6859      	ldr	r1, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	461a      	mov	r2, r3
 80050f2:	f000 fb67 	bl	80057c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2150      	movs	r1, #80	; 0x50
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fbc0 	bl	8005882 <TIM_ITRx_SetConfig>
      break;
 8005102:	e029      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	461a      	mov	r2, r3
 8005112:	f000 fb86 	bl	8005822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2160      	movs	r1, #96	; 0x60
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fbb0 	bl	8005882 <TIM_ITRx_SetConfig>
      break;
 8005122:	e019      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	461a      	mov	r2, r3
 8005132:	f000 fb47 	bl	80057c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2140      	movs	r1, #64	; 0x40
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fba0 	bl	8005882 <TIM_ITRx_SetConfig>
      break;
 8005142:	e009      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f000 fb97 	bl	8005882 <TIM_ITRx_SetConfig>
      break;
 8005154:	e000      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	fffeff88 	.word	0xfffeff88

08005178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a40      	ldr	r2, [pc, #256]	; (80052dc <TIM_Base_SetConfig+0x114>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d00f      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3d      	ldr	r2, [pc, #244]	; (80052e0 <TIM_Base_SetConfig+0x118>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3c      	ldr	r2, [pc, #240]	; (80052e4 <TIM_Base_SetConfig+0x11c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3b      	ldr	r2, [pc, #236]	; (80052e8 <TIM_Base_SetConfig+0x120>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3a      	ldr	r2, [pc, #232]	; (80052ec <TIM_Base_SetConfig+0x124>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2f      	ldr	r2, [pc, #188]	; (80052dc <TIM_Base_SetConfig+0x114>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005228:	d027      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <TIM_Base_SetConfig+0x118>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d023      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2b      	ldr	r2, [pc, #172]	; (80052e4 <TIM_Base_SetConfig+0x11c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01f      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <TIM_Base_SetConfig+0x120>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a29      	ldr	r2, [pc, #164]	; (80052ec <TIM_Base_SetConfig+0x124>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d017      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a28      	ldr	r2, [pc, #160]	; (80052f0 <TIM_Base_SetConfig+0x128>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <TIM_Base_SetConfig+0x12c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00f      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a26      	ldr	r2, [pc, #152]	; (80052f8 <TIM_Base_SetConfig+0x130>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a25      	ldr	r2, [pc, #148]	; (80052fc <TIM_Base_SetConfig+0x134>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a24      	ldr	r2, [pc, #144]	; (8005300 <TIM_Base_SetConfig+0x138>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a23      	ldr	r2, [pc, #140]	; (8005304 <TIM_Base_SetConfig+0x13c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <TIM_Base_SetConfig+0x114>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0xf8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <TIM_Base_SetConfig+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800
 80052fc:	40001800 	.word	0x40001800
 8005300:	40001c00 	.word	0x40001c00
 8005304:	40002000 	.word	0x40002000

08005308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <TIM_OC1_SetConfig+0xd8>)
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f023 0302 	bic.w	r3, r3, #2
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <TIM_OC1_SetConfig+0xdc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC1_SetConfig+0x64>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a20      	ldr	r2, [pc, #128]	; (80053e8 <TIM_OC1_SetConfig+0xe0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10c      	bne.n	8005386 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0308 	bic.w	r3, r3, #8
 8005372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <TIM_OC1_SetConfig+0xdc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_OC1_SetConfig+0x8e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <TIM_OC1_SetConfig+0xe0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d111      	bne.n	80053ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	621a      	str	r2, [r3, #32]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	fffeff8f 	.word	0xfffeff8f
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40010400 	.word	0x40010400

080053ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0210 	bic.w	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <TIM_OC2_SetConfig+0xe4>)
 8005418:	4013      	ands	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0320 	bic.w	r3, r3, #32
 8005436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <TIM_OC2_SetConfig+0xe8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_OC2_SetConfig+0x68>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a22      	ldr	r2, [pc, #136]	; (80054d8 <TIM_OC2_SetConfig+0xec>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10d      	bne.n	8005470 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <TIM_OC2_SetConfig+0xe8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC2_SetConfig+0x94>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <TIM_OC2_SetConfig+0xec>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d113      	bne.n	80054a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800548e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	feff8fff 	.word	0xfeff8fff
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40010400 	.word	0x40010400

080054dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <TIM_OC3_SetConfig+0xe0>)
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <TIM_OC3_SetConfig+0xe4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_OC3_SetConfig+0x66>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <TIM_OC3_SetConfig+0xe8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10d      	bne.n	800555e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800555c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <TIM_OC3_SetConfig+0xe4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d003      	beq.n	800556e <TIM_OC3_SetConfig+0x92>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC3_SetConfig+0xe8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d113      	bne.n	8005596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800557c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	621a      	str	r2, [r3, #32]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	fffeff8f 	.word	0xfffeff8f
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010400 	.word	0x40010400

080055c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4b1e      	ldr	r3, [pc, #120]	; (800566c <TIM_OC4_SetConfig+0xa4>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a13      	ldr	r2, [pc, #76]	; (8005670 <TIM_OC4_SetConfig+0xa8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC4_SetConfig+0x68>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a12      	ldr	r2, [pc, #72]	; (8005674 <TIM_OC4_SetConfig+0xac>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d109      	bne.n	8005644 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	feff8fff 	.word	0xfeff8fff
 8005670:	40010000 	.word	0x40010000
 8005674:	40010400 	.word	0x40010400

08005678 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <TIM_OC5_SetConfig+0x98>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	041b      	lsls	r3, r3, #16
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a12      	ldr	r2, [pc, #72]	; (8005714 <TIM_OC5_SetConfig+0x9c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_OC5_SetConfig+0x5e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a11      	ldr	r2, [pc, #68]	; (8005718 <TIM_OC5_SetConfig+0xa0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d109      	bne.n	80056ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	fffeff8f 	.word	0xfffeff8f
 8005714:	40010000 	.word	0x40010000
 8005718:	40010400 	.word	0x40010400

0800571c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <TIM_OC6_SetConfig+0x9c>)
 8005748:	4013      	ands	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800575e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	051b      	lsls	r3, r3, #20
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a13      	ldr	r2, [pc, #76]	; (80057bc <TIM_OC6_SetConfig+0xa0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC6_SetConfig+0x60>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a12      	ldr	r2, [pc, #72]	; (80057c0 <TIM_OC6_SetConfig+0xa4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d109      	bne.n	8005790 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	feff8fff 	.word	0xfeff8fff
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40010400 	.word	0x40010400

080057c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f023 030a 	bic.w	r3, r3, #10
 8005800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005822:	b480      	push	{r7}
 8005824:	b087      	sub	sp, #28
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0210 	bic.w	r2, r3, #16
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800584c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	031b      	lsls	r3, r3, #12
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800585e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	f043 0307 	orr.w	r3, r3, #7
 80058a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	609a      	str	r2, [r3, #8]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	021a      	lsls	r2, r3, #8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	431a      	orrs	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4313      	orrs	r3, r2
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	609a      	str	r2, [r3, #8]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	2201      	movs	r2, #1
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a1a      	ldr	r2, [r3, #32]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	43db      	mvns	r3, r3
 800591a:	401a      	ands	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1a      	ldr	r2, [r3, #32]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	431a      	orrs	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005958:	2302      	movs	r3, #2
 800595a:	e045      	b.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005996:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40010000 	.word	0x40010000
 80059f8:	40010400 	.word	0x40010400

080059fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e065      	b.n	8005ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a14      	ldr	r2, [pc, #80]	; (8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d115      	bne.n	8005ad2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	051b      	lsls	r3, r3, #20
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40010400 	.word	0x40010400

08005af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e040      	b.n	8005bc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f004 fbdc 	bl	800a314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2224      	movs	r2, #36	; 0x24
 8005b60:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fa66 	bl	8006044 <UART_SetConfig>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e022      	b.n	8005bc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fcfe 	bl	800658c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bae:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fd85 	bl	80066d0 <UART_CheckIdleState>
 8005bc6:	4603      	mov	r3, r0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d164      	bne.n	8005cb0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_UART_Transmit_DMA+0x22>
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e05d      	b.n	8005cb2 <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Transmit_DMA+0x34>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e056      	b.n	8005cb2 <HAL_UART_Transmit_DMA+0xe2>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2221      	movs	r2, #33	; 0x21
 8005c2c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d02a      	beq.n	8005c8c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3a:	4a20      	ldr	r2, [pc, #128]	; (8005cbc <HAL_UART_Transmit_DMA+0xec>)
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c42:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <HAL_UART_Transmit_DMA+0xf0>)
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <HAL_UART_Transmit_DMA+0xf4>)
 8005c4c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c52:	2200      	movs	r2, #0
 8005c54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	4619      	mov	r1, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3328      	adds	r3, #40	; 0x28
 8005c66:	461a      	mov	r2, r3
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	f7fb ff83 	bl	8001b74 <HAL_DMA_Start_IT>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2210      	movs	r2, #16
 8005c78:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e012      	b.n	8005cb2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2240      	movs	r2, #64	; 0x40
 8005c92:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005caa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	08006829 	.word	0x08006829
 8005cc0:	08006879 	.word	0x08006879
 8005cc4:	08006915 	.word	0x08006915

08005cc8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d16c      	bne.n	8005db8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_UART_Receive_DMA+0x22>
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e065      	b.n	8005dba <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Receive_DMA+0x34>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e05e      	b.n	8005dba <HAL_UART_Receive_DMA+0xf2>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	88fa      	ldrh	r2, [r7, #6]
 8005d0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2222      	movs	r2, #34	; 0x22
 8005d1c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d02a      	beq.n	8005d7c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d2a:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <HAL_UART_Receive_DMA+0xfc>)
 8005d2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d32:	4a25      	ldr	r2, [pc, #148]	; (8005dc8 <HAL_UART_Receive_DMA+0x100>)
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3a:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <HAL_UART_Receive_DMA+0x104>)
 8005d3c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d42:	2200      	movs	r2, #0
 8005d44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3324      	adds	r3, #36	; 0x24
 8005d50:	4619      	mov	r1, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	461a      	mov	r2, r3
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	f7fb ff0b 	bl	8001b74 <HAL_DMA_Start_IT>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2210      	movs	r2, #16
 8005d68:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e01e      	b.n	8005dba <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d92:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	08006895 	.word	0x08006895
 8005dc8:	080068f9 	.word	0x080068f9
 8005dcc:	08006915 	.word	0x08006915

08005dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d113      	bne.n	8005e26 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00e      	beq.n	8005e26 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80eb 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
      }
      return;
 8005e24:	e0e5      	b.n	8005ff2 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80c0 	beq.w	8005fae <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80b5 	beq.w	8005fae <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00e      	beq.n	8005e6c <HAL_UART_IRQHandler+0x9c>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e64:	f043 0201 	orr.w	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <HAL_UART_IRQHandler+0xc4>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2202      	movs	r2, #2
 8005e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e8c:	f043 0204 	orr.w	r2, r3, #4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00e      	beq.n	8005ebc <HAL_UART_IRQHandler+0xec>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d009      	beq.n	8005ebc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2204      	movs	r2, #4
 8005eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eb4:	f043 0202 	orr.w	r2, r3, #2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d013      	beq.n	8005eee <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2208      	movs	r2, #8
 8005ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee6:	f043 0208 	orr.w	r2, r3, #8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d07f      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00c      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d004      	beq.n	8005f38 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d031      	beq.n	8005f9c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fc55 	bl	80067e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d123      	bne.n	8005f94 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f5a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f68:	4a26      	ldr	r2, [pc, #152]	; (8006004 <HAL_UART_IRQHandler+0x234>)
 8005f6a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fb fecf 	bl	8001d14 <HAL_DMA_Abort_IT>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d016      	beq.n	8005faa <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005f86:	4610      	mov	r0, r2
 8005f88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8a:	e00e      	b.n	8005faa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f84f 	bl	8006030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f92:	e00a      	b.n	8005faa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f84b 	bl	8006030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9a:	e006      	b.n	8005faa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f847 	bl	8006030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005fa8:	e025      	b.n	8005ff6 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	bf00      	nop
    return;
 8005fac:	e023      	b.n	8005ff6 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00d      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d017      	beq.n	8005ffa <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	4798      	blx	r3
    }
    return;
 8005fd2:	e012      	b.n	8005ffa <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00e      	beq.n	8005ffc <HAL_UART_IRQHandler+0x22c>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fce5 	bl	80069b8 <UART_EndTransmit_IT>
    return;
 8005fee:	bf00      	nop
 8005ff0:	e004      	b.n	8005ffc <HAL_UART_IRQHandler+0x22c>
      return;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <HAL_UART_IRQHandler+0x22c>
    return;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <HAL_UART_IRQHandler+0x22c>
    return;
 8005ffa:	bf00      	nop
  }

}
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	0800698d 	.word	0x0800698d

08006008 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4bb1      	ldr	r3, [pc, #708]	; (8006338 <UART_SetConfig+0x2f4>)
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	6939      	ldr	r1, [r7, #16]
 800607c:	430b      	orrs	r3, r1
 800607e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a9f      	ldr	r2, [pc, #636]	; (800633c <UART_SetConfig+0x2f8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d121      	bne.n	8006108 <UART_SetConfig+0xc4>
 80060c4:	4b9e      	ldr	r3, [pc, #632]	; (8006340 <UART_SetConfig+0x2fc>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d816      	bhi.n	8006100 <UART_SetConfig+0xbc>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x94>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	080060f5 	.word	0x080060f5
 80060e0:	080060ef 	.word	0x080060ef
 80060e4:	080060fb 	.word	0x080060fb
 80060e8:	2301      	movs	r3, #1
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	e151      	b.n	8006392 <UART_SetConfig+0x34e>
 80060ee:	2302      	movs	r3, #2
 80060f0:	77fb      	strb	r3, [r7, #31]
 80060f2:	e14e      	b.n	8006392 <UART_SetConfig+0x34e>
 80060f4:	2304      	movs	r3, #4
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e14b      	b.n	8006392 <UART_SetConfig+0x34e>
 80060fa:	2308      	movs	r3, #8
 80060fc:	77fb      	strb	r3, [r7, #31]
 80060fe:	e148      	b.n	8006392 <UART_SetConfig+0x34e>
 8006100:	2310      	movs	r3, #16
 8006102:	77fb      	strb	r3, [r7, #31]
 8006104:	bf00      	nop
 8006106:	e144      	b.n	8006392 <UART_SetConfig+0x34e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a8d      	ldr	r2, [pc, #564]	; (8006344 <UART_SetConfig+0x300>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d134      	bne.n	800617c <UART_SetConfig+0x138>
 8006112:	4b8b      	ldr	r3, [pc, #556]	; (8006340 <UART_SetConfig+0x2fc>)
 8006114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006118:	f003 030c 	and.w	r3, r3, #12
 800611c:	2b0c      	cmp	r3, #12
 800611e:	d829      	bhi.n	8006174 <UART_SetConfig+0x130>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <UART_SetConfig+0xe4>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	0800615d 	.word	0x0800615d
 800612c:	08006175 	.word	0x08006175
 8006130:	08006175 	.word	0x08006175
 8006134:	08006175 	.word	0x08006175
 8006138:	08006169 	.word	0x08006169
 800613c:	08006175 	.word	0x08006175
 8006140:	08006175 	.word	0x08006175
 8006144:	08006175 	.word	0x08006175
 8006148:	08006163 	.word	0x08006163
 800614c:	08006175 	.word	0x08006175
 8006150:	08006175 	.word	0x08006175
 8006154:	08006175 	.word	0x08006175
 8006158:	0800616f 	.word	0x0800616f
 800615c:	2300      	movs	r3, #0
 800615e:	77fb      	strb	r3, [r7, #31]
 8006160:	e117      	b.n	8006392 <UART_SetConfig+0x34e>
 8006162:	2302      	movs	r3, #2
 8006164:	77fb      	strb	r3, [r7, #31]
 8006166:	e114      	b.n	8006392 <UART_SetConfig+0x34e>
 8006168:	2304      	movs	r3, #4
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e111      	b.n	8006392 <UART_SetConfig+0x34e>
 800616e:	2308      	movs	r3, #8
 8006170:	77fb      	strb	r3, [r7, #31]
 8006172:	e10e      	b.n	8006392 <UART_SetConfig+0x34e>
 8006174:	2310      	movs	r3, #16
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	bf00      	nop
 800617a:	e10a      	b.n	8006392 <UART_SetConfig+0x34e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a71      	ldr	r2, [pc, #452]	; (8006348 <UART_SetConfig+0x304>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d120      	bne.n	80061c8 <UART_SetConfig+0x184>
 8006186:	4b6e      	ldr	r3, [pc, #440]	; (8006340 <UART_SetConfig+0x2fc>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006190:	2b10      	cmp	r3, #16
 8006192:	d00f      	beq.n	80061b4 <UART_SetConfig+0x170>
 8006194:	2b10      	cmp	r3, #16
 8006196:	d802      	bhi.n	800619e <UART_SetConfig+0x15a>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <UART_SetConfig+0x164>
 800619c:	e010      	b.n	80061c0 <UART_SetConfig+0x17c>
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d005      	beq.n	80061ae <UART_SetConfig+0x16a>
 80061a2:	2b30      	cmp	r3, #48	; 0x30
 80061a4:	d009      	beq.n	80061ba <UART_SetConfig+0x176>
 80061a6:	e00b      	b.n	80061c0 <UART_SetConfig+0x17c>
 80061a8:	2300      	movs	r3, #0
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e0f1      	b.n	8006392 <UART_SetConfig+0x34e>
 80061ae:	2302      	movs	r3, #2
 80061b0:	77fb      	strb	r3, [r7, #31]
 80061b2:	e0ee      	b.n	8006392 <UART_SetConfig+0x34e>
 80061b4:	2304      	movs	r3, #4
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e0eb      	b.n	8006392 <UART_SetConfig+0x34e>
 80061ba:	2308      	movs	r3, #8
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e0e8      	b.n	8006392 <UART_SetConfig+0x34e>
 80061c0:	2310      	movs	r3, #16
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	bf00      	nop
 80061c6:	e0e4      	b.n	8006392 <UART_SetConfig+0x34e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a5f      	ldr	r2, [pc, #380]	; (800634c <UART_SetConfig+0x308>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d120      	bne.n	8006214 <UART_SetConfig+0x1d0>
 80061d2:	4b5b      	ldr	r3, [pc, #364]	; (8006340 <UART_SetConfig+0x2fc>)
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d00f      	beq.n	8006200 <UART_SetConfig+0x1bc>
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d802      	bhi.n	80061ea <UART_SetConfig+0x1a6>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <UART_SetConfig+0x1b0>
 80061e8:	e010      	b.n	800620c <UART_SetConfig+0x1c8>
 80061ea:	2b80      	cmp	r3, #128	; 0x80
 80061ec:	d005      	beq.n	80061fa <UART_SetConfig+0x1b6>
 80061ee:	2bc0      	cmp	r3, #192	; 0xc0
 80061f0:	d009      	beq.n	8006206 <UART_SetConfig+0x1c2>
 80061f2:	e00b      	b.n	800620c <UART_SetConfig+0x1c8>
 80061f4:	2300      	movs	r3, #0
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	e0cb      	b.n	8006392 <UART_SetConfig+0x34e>
 80061fa:	2302      	movs	r3, #2
 80061fc:	77fb      	strb	r3, [r7, #31]
 80061fe:	e0c8      	b.n	8006392 <UART_SetConfig+0x34e>
 8006200:	2304      	movs	r3, #4
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e0c5      	b.n	8006392 <UART_SetConfig+0x34e>
 8006206:	2308      	movs	r3, #8
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e0c2      	b.n	8006392 <UART_SetConfig+0x34e>
 800620c:	2310      	movs	r3, #16
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	bf00      	nop
 8006212:	e0be      	b.n	8006392 <UART_SetConfig+0x34e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a4d      	ldr	r2, [pc, #308]	; (8006350 <UART_SetConfig+0x30c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d124      	bne.n	8006268 <UART_SetConfig+0x224>
 800621e:	4b48      	ldr	r3, [pc, #288]	; (8006340 <UART_SetConfig+0x2fc>)
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622c:	d012      	beq.n	8006254 <UART_SetConfig+0x210>
 800622e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006232:	d802      	bhi.n	800623a <UART_SetConfig+0x1f6>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <UART_SetConfig+0x204>
 8006238:	e012      	b.n	8006260 <UART_SetConfig+0x21c>
 800623a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623e:	d006      	beq.n	800624e <UART_SetConfig+0x20a>
 8006240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006244:	d009      	beq.n	800625a <UART_SetConfig+0x216>
 8006246:	e00b      	b.n	8006260 <UART_SetConfig+0x21c>
 8006248:	2300      	movs	r3, #0
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e0a1      	b.n	8006392 <UART_SetConfig+0x34e>
 800624e:	2302      	movs	r3, #2
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e09e      	b.n	8006392 <UART_SetConfig+0x34e>
 8006254:	2304      	movs	r3, #4
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e09b      	b.n	8006392 <UART_SetConfig+0x34e>
 800625a:	2308      	movs	r3, #8
 800625c:	77fb      	strb	r3, [r7, #31]
 800625e:	e098      	b.n	8006392 <UART_SetConfig+0x34e>
 8006260:	2310      	movs	r3, #16
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	bf00      	nop
 8006266:	e094      	b.n	8006392 <UART_SetConfig+0x34e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a39      	ldr	r2, [pc, #228]	; (8006354 <UART_SetConfig+0x310>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d124      	bne.n	80062bc <UART_SetConfig+0x278>
 8006272:	4b33      	ldr	r3, [pc, #204]	; (8006340 <UART_SetConfig+0x2fc>)
 8006274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800627c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006280:	d012      	beq.n	80062a8 <UART_SetConfig+0x264>
 8006282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006286:	d802      	bhi.n	800628e <UART_SetConfig+0x24a>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <UART_SetConfig+0x258>
 800628c:	e012      	b.n	80062b4 <UART_SetConfig+0x270>
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006292:	d006      	beq.n	80062a2 <UART_SetConfig+0x25e>
 8006294:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006298:	d009      	beq.n	80062ae <UART_SetConfig+0x26a>
 800629a:	e00b      	b.n	80062b4 <UART_SetConfig+0x270>
 800629c:	2301      	movs	r3, #1
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e077      	b.n	8006392 <UART_SetConfig+0x34e>
 80062a2:	2302      	movs	r3, #2
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e074      	b.n	8006392 <UART_SetConfig+0x34e>
 80062a8:	2304      	movs	r3, #4
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e071      	b.n	8006392 <UART_SetConfig+0x34e>
 80062ae:	2308      	movs	r3, #8
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e06e      	b.n	8006392 <UART_SetConfig+0x34e>
 80062b4:	2310      	movs	r3, #16
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	bf00      	nop
 80062ba:	e06a      	b.n	8006392 <UART_SetConfig+0x34e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a25      	ldr	r2, [pc, #148]	; (8006358 <UART_SetConfig+0x314>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d124      	bne.n	8006310 <UART_SetConfig+0x2cc>
 80062c6:	4b1e      	ldr	r3, [pc, #120]	; (8006340 <UART_SetConfig+0x2fc>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d4:	d012      	beq.n	80062fc <UART_SetConfig+0x2b8>
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062da:	d802      	bhi.n	80062e2 <UART_SetConfig+0x29e>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <UART_SetConfig+0x2ac>
 80062e0:	e012      	b.n	8006308 <UART_SetConfig+0x2c4>
 80062e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e6:	d006      	beq.n	80062f6 <UART_SetConfig+0x2b2>
 80062e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062ec:	d009      	beq.n	8006302 <UART_SetConfig+0x2be>
 80062ee:	e00b      	b.n	8006308 <UART_SetConfig+0x2c4>
 80062f0:	2300      	movs	r3, #0
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e04d      	b.n	8006392 <UART_SetConfig+0x34e>
 80062f6:	2302      	movs	r3, #2
 80062f8:	77fb      	strb	r3, [r7, #31]
 80062fa:	e04a      	b.n	8006392 <UART_SetConfig+0x34e>
 80062fc:	2304      	movs	r3, #4
 80062fe:	77fb      	strb	r3, [r7, #31]
 8006300:	e047      	b.n	8006392 <UART_SetConfig+0x34e>
 8006302:	2308      	movs	r3, #8
 8006304:	77fb      	strb	r3, [r7, #31]
 8006306:	e044      	b.n	8006392 <UART_SetConfig+0x34e>
 8006308:	2310      	movs	r3, #16
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	bf00      	nop
 800630e:	e040      	b.n	8006392 <UART_SetConfig+0x34e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a11      	ldr	r2, [pc, #68]	; (800635c <UART_SetConfig+0x318>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d139      	bne.n	800638e <UART_SetConfig+0x34a>
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <UART_SetConfig+0x2fc>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006328:	d027      	beq.n	800637a <UART_SetConfig+0x336>
 800632a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800632e:	d817      	bhi.n	8006360 <UART_SetConfig+0x31c>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01c      	beq.n	800636e <UART_SetConfig+0x32a>
 8006334:	e027      	b.n	8006386 <UART_SetConfig+0x342>
 8006336:	bf00      	nop
 8006338:	efff69f3 	.word	0xefff69f3
 800633c:	40011000 	.word	0x40011000
 8006340:	40023800 	.word	0x40023800
 8006344:	40004400 	.word	0x40004400
 8006348:	40004800 	.word	0x40004800
 800634c:	40004c00 	.word	0x40004c00
 8006350:	40005000 	.word	0x40005000
 8006354:	40011400 	.word	0x40011400
 8006358:	40007800 	.word	0x40007800
 800635c:	40007c00 	.word	0x40007c00
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	d006      	beq.n	8006374 <UART_SetConfig+0x330>
 8006366:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800636a:	d009      	beq.n	8006380 <UART_SetConfig+0x33c>
 800636c:	e00b      	b.n	8006386 <UART_SetConfig+0x342>
 800636e:	2300      	movs	r3, #0
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e00e      	b.n	8006392 <UART_SetConfig+0x34e>
 8006374:	2302      	movs	r3, #2
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e00b      	b.n	8006392 <UART_SetConfig+0x34e>
 800637a:	2304      	movs	r3, #4
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e008      	b.n	8006392 <UART_SetConfig+0x34e>
 8006380:	2308      	movs	r3, #8
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e005      	b.n	8006392 <UART_SetConfig+0x34e>
 8006386:	2310      	movs	r3, #16
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	bf00      	nop
 800638c:	e001      	b.n	8006392 <UART_SetConfig+0x34e>
 800638e:	2310      	movs	r3, #16
 8006390:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639a:	d17c      	bne.n	8006496 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800639c:	7ffb      	ldrb	r3, [r7, #31]
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d859      	bhi.n	8006456 <UART_SetConfig+0x412>
 80063a2:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <UART_SetConfig+0x364>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063cd 	.word	0x080063cd
 80063ac:	080063eb 	.word	0x080063eb
 80063b0:	08006409 	.word	0x08006409
 80063b4:	08006457 	.word	0x08006457
 80063b8:	08006421 	.word	0x08006421
 80063bc:	08006457 	.word	0x08006457
 80063c0:	08006457 	.word	0x08006457
 80063c4:	08006457 	.word	0x08006457
 80063c8:	0800643f 	.word	0x0800643f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80063cc:	f7fc fe98 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 80063d0:	4603      	mov	r3, r0
 80063d2:	005a      	lsls	r2, r3, #1
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	085b      	lsrs	r3, r3, #1
 80063da:	441a      	add	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	61bb      	str	r3, [r7, #24]
        break;
 80063e8:	e038      	b.n	800645c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80063ea:	f7fc fe9d 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 80063ee:	4603      	mov	r3, r0
 80063f0:	005a      	lsls	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	441a      	add	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006402:	b29b      	uxth	r3, r3
 8006404:	61bb      	str	r3, [r7, #24]
        break;
 8006406:	e029      	b.n	800645c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	085a      	lsrs	r2, r3, #1
 800640e:	4b5d      	ldr	r3, [pc, #372]	; (8006584 <UART_SetConfig+0x540>)
 8006410:	4413      	add	r3, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6852      	ldr	r2, [r2, #4]
 8006416:	fbb3 f3f2 	udiv	r3, r3, r2
 800641a:	b29b      	uxth	r3, r3
 800641c:	61bb      	str	r3, [r7, #24]
        break;
 800641e:	e01d      	b.n	800645c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006420:	f7fc fdb0 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8006424:	4603      	mov	r3, r0
 8006426:	005a      	lsls	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	441a      	add	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	b29b      	uxth	r3, r3
 800643a:	61bb      	str	r3, [r7, #24]
        break;
 800643c:	e00e      	b.n	800645c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	b29b      	uxth	r3, r3
 8006452:	61bb      	str	r3, [r7, #24]
        break;
 8006454:	e002      	b.n	800645c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
        break;
 800645a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	d916      	bls.n	8006490 <UART_SetConfig+0x44c>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006468:	d212      	bcs.n	8006490 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f023 030f 	bic.w	r3, r3, #15
 8006472:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	b29b      	uxth	r3, r3
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	b29a      	uxth	r2, r3
 8006480:	89fb      	ldrh	r3, [r7, #14]
 8006482:	4313      	orrs	r3, r2
 8006484:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	89fa      	ldrh	r2, [r7, #14]
 800648c:	60da      	str	r2, [r3, #12]
 800648e:	e06e      	b.n	800656e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
 8006494:	e06b      	b.n	800656e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8006496:	7ffb      	ldrb	r3, [r7, #31]
 8006498:	2b08      	cmp	r3, #8
 800649a:	d857      	bhi.n	800654c <UART_SetConfig+0x508>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <UART_SetConfig+0x460>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064e5 	.word	0x080064e5
 80064ac:	08006501 	.word	0x08006501
 80064b0:	0800654d 	.word	0x0800654d
 80064b4:	08006519 	.word	0x08006519
 80064b8:	0800654d 	.word	0x0800654d
 80064bc:	0800654d 	.word	0x0800654d
 80064c0:	0800654d 	.word	0x0800654d
 80064c4:	08006535 	.word	0x08006535
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80064c8:	f7fc fe1a 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	441a      	add	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	fbb2 f3f3 	udiv	r3, r2, r3
 80064de:	b29b      	uxth	r3, r3
 80064e0:	61bb      	str	r3, [r7, #24]
        break;
 80064e2:	e036      	b.n	8006552 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80064e4:	f7fc fe20 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 80064e8:	4602      	mov	r2, r0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	441a      	add	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	61bb      	str	r3, [r7, #24]
        break;
 80064fe:	e028      	b.n	8006552 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	085a      	lsrs	r2, r3, #1
 8006506:	4b20      	ldr	r3, [pc, #128]	; (8006588 <UART_SetConfig+0x544>)
 8006508:	4413      	add	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6852      	ldr	r2, [r2, #4]
 800650e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006512:	b29b      	uxth	r3, r3
 8006514:	61bb      	str	r3, [r7, #24]
        break;
 8006516:	e01c      	b.n	8006552 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006518:	f7fc fd34 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 800651c:	4602      	mov	r2, r0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	fbb2 f3f3 	udiv	r3, r2, r3
 800652e:	b29b      	uxth	r3, r3
 8006530:	61bb      	str	r3, [r7, #24]
        break;
 8006532:	e00e      	b.n	8006552 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	fbb2 f3f3 	udiv	r3, r2, r3
 8006546:	b29b      	uxth	r3, r3
 8006548:	61bb      	str	r3, [r7, #24]
        break;
 800654a:	e002      	b.n	8006552 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
        break;
 8006550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b0f      	cmp	r3, #15
 8006556:	d908      	bls.n	800656a <UART_SetConfig+0x526>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655e:	d204      	bcs.n	800656a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	e001      	b.n	800656e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	01e84800 	.word	0x01e84800
 8006588:	00f42400 	.word	0x00f42400

0800658c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01a      	beq.n	80066a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800668a:	d10a      	bne.n	80066a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80066de:	f7fa fc8b 	bl	8000ff8 <HAL_GetTick>
 80066e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d10e      	bne.n	8006710 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f814 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e00a      	b.n	8006726 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673e:	e02a      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d026      	beq.n	8006796 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006748:	f7fa fc56 	bl	8000ff8 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <UART_WaitOnFlagUntilTimeout+0x30>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11b      	bne.n	8006796 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800676c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e00f      	b.n	80067b6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4013      	ands	r3, r2
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d0c5      	beq.n	8006740 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80067d4:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683e:	d014      	beq.n	800686a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006856:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006866:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006868:	e002      	b.n	8006870 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f006 ffbc 	bl	800d7e8 <HAL_UART_TxCpltCallback>
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7ff fbbe 	bl	8006008 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068aa:	d01e      	beq.n	80068ea <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f006 ff72 	bl	800d7d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fb88 	bl	800601c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d109      	bne.n	8006950 <UART_DMAError+0x3c>
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b21      	cmp	r3, #33	; 0x21
 8006940:	d106      	bne.n	8006950 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2200      	movs	r2, #0
 8006946:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800694a:	6978      	ldr	r0, [r7, #20]
 800694c:	f7ff ff37 	bl	80067be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d109      	bne.n	8006972 <UART_DMAError+0x5e>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b22      	cmp	r3, #34	; 0x22
 8006962:	d106      	bne.n	8006972 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2200      	movs	r2, #0
 8006968:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800696c:	6978      	ldr	r0, [r7, #20]
 800696e:	f7ff ff3b 	bl	80067e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006976:	f043 0210 	orr.w	r2, r3, #16
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800697e:	6978      	ldr	r0, [r7, #20]
 8006980:	f7ff fb56 	bl	8006030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006984:	bf00      	nop
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fb40 	bl	8006030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f006 ff03 	bl	800d7e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	4603      	mov	r3, r0
 80069f2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80069f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069fc:	2b84      	cmp	r3, #132	; 0x84
 80069fe:	d005      	beq.n	8006a0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	3303      	adds	r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a1e:	f000 faad 	bl	8006f7c <vTaskStartScheduler>
  
  return osOK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2a:	b089      	sub	sp, #36	; 0x24
 8006a2c:	af04      	add	r7, sp, #16
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685c      	ldr	r4, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691e      	ldr	r6, [r3, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff ffd0 	bl	80069ea <makeFreeRtosPriority>
 8006a4a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a54:	9202      	str	r2, [sp, #8]
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	9100      	str	r1, [sp, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 f8c5 	bl	8006bf0 <xTaskCreateStatic>
 8006a66:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006a68:	68fb      	ldr	r3, [r7, #12]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a72 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006a76:	f000 fd6d 	bl	8007554 <xTaskGetSchedulerState>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d001      	beq.n	8006a84 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8006a80:	f000 ff82 	bl	8007988 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006a84:	bf00      	nop
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f103 0208 	add.w	r2, r3, #8
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f103 0208 	add.w	r2, r3, #8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f103 0208 	add.w	r2, r3, #8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	601a      	str	r2, [r3, #0]
}
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b40:	d103      	bne.n	8006b4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	e00c      	b.n	8006b64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	e002      	b.n	8006b58 <vListInsert+0x2e>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d2f6      	bcs.n	8006b52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	601a      	str	r2, [r3, #0]
}
 8006b90:	bf00      	nop
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6892      	ldr	r2, [r2, #8]
 8006bb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6852      	ldr	r2, [r2, #4]
 8006bbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d103      	bne.n	8006bd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	1e5a      	subs	r2, r3, #1
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08e      	sub	sp, #56	; 0x38
 8006bf4:	af04      	add	r7, sp, #16
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	b672      	cpsid	i
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	b662      	cpsie	i
 8006c18:	623b      	str	r3, [r7, #32]
 8006c1a:	e7fe      	b.n	8006c1a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10b      	bne.n	8006c3a <xTaskCreateStatic+0x4a>
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	b672      	cpsid	i
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	b662      	cpsie	i
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	e7fe      	b.n	8006c38 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c3a:	2354      	movs	r3, #84	; 0x54
 8006c3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b54      	cmp	r3, #84	; 0x54
 8006c42:	d00b      	beq.n	8006c5c <xTaskCreateStatic+0x6c>
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	b672      	cpsid	i
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	b662      	cpsie	i
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e7fe      	b.n	8006c5a <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01a      	beq.n	8006c98 <xTaskCreateStatic+0xa8>
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d017      	beq.n	8006c98 <xTaskCreateStatic+0xa8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c72:	2300      	movs	r3, #0
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	9302      	str	r3, [sp, #8]
 8006c7a:	f107 0314 	add.w	r3, r7, #20
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f80b 	bl	8006ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c92:	f000 f889 	bl	8006da8 <prvAddNewTaskToReadyList>
 8006c96:	e001      	b.n	8006c9c <xTaskCreateStatic+0xac>
		}
		else
		{
			xReturn = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c9c:	697b      	ldr	r3, [r7, #20]
	}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b088      	sub	sp, #32
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006cbe:	440b      	add	r3, r1
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	f023 0307 	bic.w	r3, r3, #7
 8006ccc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <prvInitialiseNewTask+0x4a>
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	b672      	cpsid	i
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	b662      	cpsie	i
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e7fe      	b.n	8006cee <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e012      	b.n	8006d1c <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	7819      	ldrb	r1, [r3, #0]
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	3334      	adds	r3, #52	; 0x34
 8006d06:	460a      	mov	r2, r1
 8006d08:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	2b0f      	cmp	r3, #15
 8006d20:	d9e9      	bls.n	8006cf6 <prvInitialiseNewTask+0x50>
 8006d22:	e000      	b.n	8006d26 <prvInitialiseNewTask+0x80>
		{
			break;
 8006d24:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	2b06      	cmp	r3, #6
 8006d32:	d901      	bls.n	8006d38 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d34:	2306      	movs	r3, #6
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d42:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	2200      	movs	r2, #0
 8006d48:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff feba 	bl	8006ac8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	3318      	adds	r3, #24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff feb5 	bl	8006ac8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f1c3 0207 	rsb	r2, r3, #7
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	2200      	movs	r2, #0
 8006d78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	68f9      	ldr	r1, [r7, #12]
 8006d86:	69b8      	ldr	r0, [r7, #24]
 8006d88:	f000 fc68 	bl	800765c <pxPortInitialiseStack>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d9e:	bf00      	nop
 8006da0:	3720      	adds	r7, #32
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006db0:	f000 fd5a 	bl	8007868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006db4:	4b2a      	ldr	r3, [pc, #168]	; (8006e60 <prvAddNewTaskToReadyList+0xb8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	4a29      	ldr	r2, [pc, #164]	; (8006e60 <prvAddNewTaskToReadyList+0xb8>)
 8006dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dbe:	4b29      	ldr	r3, [pc, #164]	; (8006e64 <prvAddNewTaskToReadyList+0xbc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dc6:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <prvAddNewTaskToReadyList+0xbc>)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dcc:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <prvAddNewTaskToReadyList+0xb8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d110      	bne.n	8006df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dd4:	f000 fb22 	bl	800741c <prvInitialiseTaskLists>
 8006dd8:	e00d      	b.n	8006df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <prvAddNewTaskToReadyList+0xc0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006de2:	4b20      	ldr	r3, [pc, #128]	; (8006e64 <prvAddNewTaskToReadyList+0xbc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d802      	bhi.n	8006df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006df0:	4a1c      	ldr	r2, [pc, #112]	; (8006e64 <prvAddNewTaskToReadyList+0xbc>)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006df6:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <prvAddNewTaskToReadyList+0xc4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	; (8006e6c <prvAddNewTaskToReadyList+0xc4>)
 8006dfe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	2201      	movs	r2, #1
 8006e06:	409a      	lsls	r2, r3
 8006e08:	4b19      	ldr	r3, [pc, #100]	; (8006e70 <prvAddNewTaskToReadyList+0xc8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <prvAddNewTaskToReadyList+0xc8>)
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <prvAddNewTaskToReadyList+0xcc>)
 8006e20:	441a      	add	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4610      	mov	r0, r2
 8006e2a:	f7ff fe5a 	bl	8006ae2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e2e:	f000 fd4d 	bl	80078cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e32:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <prvAddNewTaskToReadyList+0xc0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00e      	beq.n	8006e58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <prvAddNewTaskToReadyList+0xbc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d207      	bcs.n	8006e58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e48:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <prvAddNewTaskToReadyList+0xd0>)
 8006e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000630 	.word	0x20000630
 8006e64:	20000530 	.word	0x20000530
 8006e68:	2000063c 	.word	0x2000063c
 8006e6c:	2000064c 	.word	0x2000064c
 8006e70:	20000638 	.word	0x20000638
 8006e74:	20000534 	.word	0x20000534
 8006e78:	e000ed04 	.word	0xe000ed04

08006e7c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006e86:	2300      	movs	r3, #0
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <vTaskDelayUntil+0x2c>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	b672      	cpsid	i
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	b662      	cpsie	i
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	e7fe      	b.n	8006ea6 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <vTaskDelayUntil+0x4a>
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	b672      	cpsid	i
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	b662      	cpsie	i
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	e7fe      	b.n	8006ec4 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8006ec6:	4b2a      	ldr	r3, [pc, #168]	; (8006f70 <vTaskDelayUntil+0xf4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00b      	beq.n	8006ee6 <vTaskDelayUntil+0x6a>
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	b672      	cpsid	i
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	b662      	cpsie	i
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e7fe      	b.n	8006ee4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8006ee6:	f000 f8ab 	bl	8007040 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006eea:	4b22      	ldr	r3, [pc, #136]	; (8006f74 <vTaskDelayUntil+0xf8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6a3a      	ldr	r2, [r7, #32]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d20b      	bcs.n	8006f1c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d211      	bcs.n	8006f32 <vTaskDelayUntil+0xb6>
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d90d      	bls.n	8006f32 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006f16:	2301      	movs	r3, #1
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1a:	e00a      	b.n	8006f32 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d303      	bcc.n	8006f2e <vTaskDelayUntil+0xb2>
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d901      	bls.n	8006f32 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d006      	beq.n	8006f4c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fb22 	bl	8007590 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006f4c:	f000 f886 	bl	800705c <xTaskResumeAll>
 8006f50:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d107      	bne.n	8006f68 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <vTaskDelayUntil+0xfc>)
 8006f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f68:	bf00      	nop
 8006f6a:	3728      	adds	r7, #40	; 0x28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000658 	.word	0x20000658
 8006f74:	20000634 	.word	0x20000634
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f8a:	463a      	mov	r2, r7
 8006f8c:	1d39      	adds	r1, r7, #4
 8006f8e:	f107 0308 	add.w	r3, r7, #8
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 ff8e 	bl	8007eb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	9202      	str	r2, [sp, #8]
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	460a      	mov	r2, r1
 8006faa:	491f      	ldr	r1, [pc, #124]	; (8007028 <vTaskStartScheduler+0xac>)
 8006fac:	481f      	ldr	r0, [pc, #124]	; (800702c <vTaskStartScheduler+0xb0>)
 8006fae:	f7ff fe1f 	bl	8006bf0 <xTaskCreateStatic>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <vTaskStartScheduler+0xb4>)
 8006fb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fb8:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <vTaskStartScheduler+0xb4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	e001      	b.n	8006fca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d117      	bne.n	8007000 <vTaskStartScheduler+0x84>
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	b672      	cpsid	i
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	b662      	cpsie	i
 8006fe4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fe6:	4b13      	ldr	r3, [pc, #76]	; (8007034 <vTaskStartScheduler+0xb8>)
 8006fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fee:	4b12      	ldr	r3, [pc, #72]	; (8007038 <vTaskStartScheduler+0xbc>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <vTaskStartScheduler+0xc0>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ffa:	f000 fbb9 	bl	8007770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ffe:	e00f      	b.n	8007020 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007006:	d10b      	bne.n	8007020 <vTaskStartScheduler+0xa4>
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	b672      	cpsid	i
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	b662      	cpsie	i
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e7fe      	b.n	800701e <vTaskStartScheduler+0xa2>
}
 8007020:	bf00      	nop
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	08012dd8 	.word	0x08012dd8
 800702c:	080073ed 	.word	0x080073ed
 8007030:	20000654 	.word	0x20000654
 8007034:	20000650 	.word	0x20000650
 8007038:	2000063c 	.word	0x2000063c
 800703c:	20000634 	.word	0x20000634

08007040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <vTaskSuspendAll+0x18>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	4a03      	ldr	r2, [pc, #12]	; (8007058 <vTaskSuspendAll+0x18>)
 800704c:	6013      	str	r3, [r2, #0]
}
 800704e:	bf00      	nop
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20000658 	.word	0x20000658

0800705c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800706a:	4b42      	ldr	r3, [pc, #264]	; (8007174 <xTaskResumeAll+0x118>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <xTaskResumeAll+0x2e>
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	b672      	cpsid	i
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	b662      	cpsie	i
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	e7fe      	b.n	8007088 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800708a:	f000 fbed 	bl	8007868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800708e:	4b39      	ldr	r3, [pc, #228]	; (8007174 <xTaskResumeAll+0x118>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3b01      	subs	r3, #1
 8007094:	4a37      	ldr	r2, [pc, #220]	; (8007174 <xTaskResumeAll+0x118>)
 8007096:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007098:	4b36      	ldr	r3, [pc, #216]	; (8007174 <xTaskResumeAll+0x118>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d161      	bne.n	8007164 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070a0:	4b35      	ldr	r3, [pc, #212]	; (8007178 <xTaskResumeAll+0x11c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d05d      	beq.n	8007164 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070a8:	e02e      	b.n	8007108 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070aa:	4b34      	ldr	r3, [pc, #208]	; (800717c <xTaskResumeAll+0x120>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3318      	adds	r3, #24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fd70 	bl	8006b9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fd6b 	bl	8006b9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	2201      	movs	r2, #1
 80070cc:	409a      	lsls	r2, r3
 80070ce:	4b2c      	ldr	r3, [pc, #176]	; (8007180 <xTaskResumeAll+0x124>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	4a2a      	ldr	r2, [pc, #168]	; (8007180 <xTaskResumeAll+0x124>)
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4a27      	ldr	r2, [pc, #156]	; (8007184 <xTaskResumeAll+0x128>)
 80070e6:	441a      	add	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7ff fcf7 	bl	8006ae2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4b23      	ldr	r3, [pc, #140]	; (8007188 <xTaskResumeAll+0x12c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007102:	4b22      	ldr	r3, [pc, #136]	; (800718c <xTaskResumeAll+0x130>)
 8007104:	2201      	movs	r2, #1
 8007106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007108:	4b1c      	ldr	r3, [pc, #112]	; (800717c <xTaskResumeAll+0x120>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1cc      	bne.n	80070aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007116:	f000 f9f7 	bl	8007508 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800711a:	4b1d      	ldr	r3, [pc, #116]	; (8007190 <xTaskResumeAll+0x134>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d010      	beq.n	8007148 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007126:	f000 f847 	bl	80071b8 <xTaskIncrementTick>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007130:	4b16      	ldr	r3, [pc, #88]	; (800718c <xTaskResumeAll+0x130>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3b01      	subs	r3, #1
 800713a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f1      	bne.n	8007126 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007142:	4b13      	ldr	r3, [pc, #76]	; (8007190 <xTaskResumeAll+0x134>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007148:	4b10      	ldr	r3, [pc, #64]	; (800718c <xTaskResumeAll+0x130>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d009      	beq.n	8007164 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007150:	2301      	movs	r3, #1
 8007152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007154:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <xTaskResumeAll+0x138>)
 8007156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007164:	f000 fbb2 	bl	80078cc <vPortExitCritical>

	return xAlreadyYielded;
 8007168:	68bb      	ldr	r3, [r7, #8]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20000658 	.word	0x20000658
 8007178:	20000630 	.word	0x20000630
 800717c:	200005f0 	.word	0x200005f0
 8007180:	20000638 	.word	0x20000638
 8007184:	20000534 	.word	0x20000534
 8007188:	20000530 	.word	0x20000530
 800718c:	20000644 	.word	0x20000644
 8007190:	20000640 	.word	0x20000640
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <xTaskGetTickCount+0x1c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071a4:	687b      	ldr	r3, [r7, #4]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20000634 	.word	0x20000634

080071b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c2:	4b51      	ldr	r3, [pc, #324]	; (8007308 <xTaskIncrementTick+0x150>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f040 808e 	bne.w	80072e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071cc:	4b4f      	ldr	r3, [pc, #316]	; (800730c <xTaskIncrementTick+0x154>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3301      	adds	r3, #1
 80071d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071d4:	4a4d      	ldr	r2, [pc, #308]	; (800730c <xTaskIncrementTick+0x154>)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d121      	bne.n	8007224 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80071e0:	4b4b      	ldr	r3, [pc, #300]	; (8007310 <xTaskIncrementTick+0x158>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <xTaskIncrementTick+0x4a>
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	b672      	cpsid	i
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	b662      	cpsie	i
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	e7fe      	b.n	8007200 <xTaskIncrementTick+0x48>
 8007202:	4b43      	ldr	r3, [pc, #268]	; (8007310 <xTaskIncrementTick+0x158>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	4b42      	ldr	r3, [pc, #264]	; (8007314 <xTaskIncrementTick+0x15c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a40      	ldr	r2, [pc, #256]	; (8007310 <xTaskIncrementTick+0x158>)
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	4a40      	ldr	r2, [pc, #256]	; (8007314 <xTaskIncrementTick+0x15c>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	4b40      	ldr	r3, [pc, #256]	; (8007318 <xTaskIncrementTick+0x160>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	4a3e      	ldr	r2, [pc, #248]	; (8007318 <xTaskIncrementTick+0x160>)
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	f000 f972 	bl	8007508 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007224:	4b3d      	ldr	r3, [pc, #244]	; (800731c <xTaskIncrementTick+0x164>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d34d      	bcc.n	80072ca <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800722e:	4b38      	ldr	r3, [pc, #224]	; (8007310 <xTaskIncrementTick+0x158>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <xTaskIncrementTick+0x84>
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <xTaskIncrementTick+0x86>
 800723c:	2300      	movs	r3, #0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007242:	4b36      	ldr	r3, [pc, #216]	; (800731c <xTaskIncrementTick+0x164>)
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	601a      	str	r2, [r3, #0]
					break;
 800724a:	e03e      	b.n	80072ca <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800724c:	4b30      	ldr	r3, [pc, #192]	; (8007310 <xTaskIncrementTick+0x158>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d203      	bcs.n	800726c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007264:	4a2d      	ldr	r2, [pc, #180]	; (800731c <xTaskIncrementTick+0x164>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6013      	str	r3, [r2, #0]
						break;
 800726a:	e02e      	b.n	80072ca <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3304      	adds	r3, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff fc93 	bl	8006b9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d004      	beq.n	8007288 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3318      	adds	r3, #24
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fc8a 	bl	8006b9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	2201      	movs	r2, #1
 800728e:	409a      	lsls	r2, r3
 8007290:	4b23      	ldr	r3, [pc, #140]	; (8007320 <xTaskIncrementTick+0x168>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4313      	orrs	r3, r2
 8007296:	4a22      	ldr	r2, [pc, #136]	; (8007320 <xTaskIncrementTick+0x168>)
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <xTaskIncrementTick+0x16c>)
 80072a8:	441a      	add	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f7ff fc16 	bl	8006ae2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ba:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <xTaskIncrementTick+0x170>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d3b4      	bcc.n	800722e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c8:	e7b1      	b.n	800722e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072ca:	4b17      	ldr	r3, [pc, #92]	; (8007328 <xTaskIncrementTick+0x170>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4914      	ldr	r1, [pc, #80]	; (8007324 <xTaskIncrementTick+0x16c>)
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d907      	bls.n	80072f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80072e2:	2301      	movs	r3, #1
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	e004      	b.n	80072f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80072e8:	4b10      	ldr	r3, [pc, #64]	; (800732c <xTaskIncrementTick+0x174>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3301      	adds	r3, #1
 80072ee:	4a0f      	ldr	r2, [pc, #60]	; (800732c <xTaskIncrementTick+0x174>)
 80072f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80072f2:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <xTaskIncrementTick+0x178>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80072fa:	2301      	movs	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80072fe:	697b      	ldr	r3, [r7, #20]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000658 	.word	0x20000658
 800730c:	20000634 	.word	0x20000634
 8007310:	200005e8 	.word	0x200005e8
 8007314:	200005ec 	.word	0x200005ec
 8007318:	20000648 	.word	0x20000648
 800731c:	20000650 	.word	0x20000650
 8007320:	20000638 	.word	0x20000638
 8007324:	20000534 	.word	0x20000534
 8007328:	20000530 	.word	0x20000530
 800732c:	20000640 	.word	0x20000640
 8007330:	20000644 	.word	0x20000644

08007334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800733a:	4b27      	ldr	r3, [pc, #156]	; (80073d8 <vTaskSwitchContext+0xa4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <vTaskSwitchContext+0xa8>)
 8007344:	2201      	movs	r2, #1
 8007346:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007348:	e040      	b.n	80073cc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <vTaskSwitchContext+0xa8>)
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007350:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <vTaskSwitchContext+0xac>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	fab3 f383 	clz	r3, r3
 800735c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	f1c3 031f 	rsb	r3, r3, #31
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	491f      	ldr	r1, [pc, #124]	; (80073e4 <vTaskSwitchContext+0xb0>)
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <vTaskSwitchContext+0x5e>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	b672      	cpsid	i
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	b662      	cpsie	i
 800738e:	607b      	str	r3, [r7, #4]
 8007390:	e7fe      	b.n	8007390 <vTaskSwitchContext+0x5c>
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <vTaskSwitchContext+0xb0>)
 800739e:	4413      	add	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	605a      	str	r2, [r3, #4]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	3308      	adds	r3, #8
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d104      	bne.n	80073c2 <vTaskSwitchContext+0x8e>
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	4a07      	ldr	r2, [pc, #28]	; (80073e8 <vTaskSwitchContext+0xb4>)
 80073ca:	6013      	str	r3, [r2, #0]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20000658 	.word	0x20000658
 80073dc:	20000644 	.word	0x20000644
 80073e0:	20000638 	.word	0x20000638
 80073e4:	20000534 	.word	0x20000534
 80073e8:	20000530 	.word	0x20000530

080073ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073f4:	f000 f852 	bl	800749c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <prvIdleTask+0x28>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d9f9      	bls.n	80073f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <prvIdleTask+0x2c>)
 8007402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007410:	e7f0      	b.n	80073f4 <prvIdleTask+0x8>
 8007412:	bf00      	nop
 8007414:	20000534 	.word	0x20000534
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007422:	2300      	movs	r3, #0
 8007424:	607b      	str	r3, [r7, #4]
 8007426:	e00c      	b.n	8007442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4a12      	ldr	r2, [pc, #72]	; (800747c <prvInitialiseTaskLists+0x60>)
 8007434:	4413      	add	r3, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fb26 	bl	8006a88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3301      	adds	r3, #1
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b06      	cmp	r3, #6
 8007446:	d9ef      	bls.n	8007428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007448:	480d      	ldr	r0, [pc, #52]	; (8007480 <prvInitialiseTaskLists+0x64>)
 800744a:	f7ff fb1d 	bl	8006a88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800744e:	480d      	ldr	r0, [pc, #52]	; (8007484 <prvInitialiseTaskLists+0x68>)
 8007450:	f7ff fb1a 	bl	8006a88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007454:	480c      	ldr	r0, [pc, #48]	; (8007488 <prvInitialiseTaskLists+0x6c>)
 8007456:	f7ff fb17 	bl	8006a88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800745a:	480c      	ldr	r0, [pc, #48]	; (800748c <prvInitialiseTaskLists+0x70>)
 800745c:	f7ff fb14 	bl	8006a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007460:	480b      	ldr	r0, [pc, #44]	; (8007490 <prvInitialiseTaskLists+0x74>)
 8007462:	f7ff fb11 	bl	8006a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007466:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <prvInitialiseTaskLists+0x78>)
 8007468:	4a05      	ldr	r2, [pc, #20]	; (8007480 <prvInitialiseTaskLists+0x64>)
 800746a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <prvInitialiseTaskLists+0x7c>)
 800746e:	4a05      	ldr	r2, [pc, #20]	; (8007484 <prvInitialiseTaskLists+0x68>)
 8007470:	601a      	str	r2, [r3, #0]
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000534 	.word	0x20000534
 8007480:	200005c0 	.word	0x200005c0
 8007484:	200005d4 	.word	0x200005d4
 8007488:	200005f0 	.word	0x200005f0
 800748c:	20000604 	.word	0x20000604
 8007490:	2000061c 	.word	0x2000061c
 8007494:	200005e8 	.word	0x200005e8
 8007498:	200005ec 	.word	0x200005ec

0800749c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074a2:	e019      	b.n	80074d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074a4:	f000 f9e0 	bl	8007868 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80074a8:	4b0f      	ldr	r3, [pc, #60]	; (80074e8 <prvCheckTasksWaitingTermination+0x4c>)
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fb71 	bl	8006b9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ba:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <prvCheckTasksWaitingTermination+0x50>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3b01      	subs	r3, #1
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <prvCheckTasksWaitingTermination+0x50>)
 80074c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <prvCheckTasksWaitingTermination+0x54>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <prvCheckTasksWaitingTermination+0x54>)
 80074cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074ce:	f000 f9fd 	bl	80078cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f80e 	bl	80074f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <prvCheckTasksWaitingTermination+0x54>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e1      	bne.n	80074a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000604 	.word	0x20000604
 80074ec:	20000630 	.word	0x20000630
 80074f0:	20000618 	.word	0x20000618

080074f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <prvResetNextTaskUnblockTime+0x44>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <prvResetNextTaskUnblockTime+0x14>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <prvResetNextTaskUnblockTime+0x16>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d004      	beq.n	800752c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007522:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <prvResetNextTaskUnblockTime+0x48>)
 8007524:	f04f 32ff 	mov.w	r2, #4294967295
 8007528:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800752a:	e008      	b.n	800753e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800752c:	4b07      	ldr	r3, [pc, #28]	; (800754c <prvResetNextTaskUnblockTime+0x44>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4a05      	ldr	r2, [pc, #20]	; (8007550 <prvResetNextTaskUnblockTime+0x48>)
 800753c:	6013      	str	r3, [r2, #0]
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	200005e8 	.word	0x200005e8
 8007550:	20000650 	.word	0x20000650

08007554 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <xTaskGetSchedulerState+0x34>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007562:	2301      	movs	r3, #1
 8007564:	607b      	str	r3, [r7, #4]
 8007566:	e008      	b.n	800757a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007568:	4b08      	ldr	r3, [pc, #32]	; (800758c <xTaskGetSchedulerState+0x38>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d102      	bne.n	8007576 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007570:	2302      	movs	r3, #2
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	e001      	b.n	800757a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007576:	2300      	movs	r3, #0
 8007578:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800757a:	687b      	ldr	r3, [r7, #4]
	}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	2000063c 	.word	0x2000063c
 800758c:	20000658 	.word	0x20000658

08007590 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800759a:	4b29      	ldr	r3, [pc, #164]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb0>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075a0:	4b28      	ldr	r3, [pc, #160]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3304      	adds	r3, #4
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff faf8 	bl	8006b9c <uxListRemove>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80075b2:	4b24      	ldr	r3, [pc, #144]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	2201      	movs	r2, #1
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43da      	mvns	r2, r3
 80075c0:	4b21      	ldr	r3, [pc, #132]	; (8007648 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4013      	ands	r3, r2
 80075c6:	4a20      	ldr	r2, [pc, #128]	; (8007648 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d10a      	bne.n	80075e8 <prvAddCurrentTaskToDelayedList+0x58>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d8:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3304      	adds	r3, #4
 80075de:	4619      	mov	r1, r3
 80075e0:	481a      	ldr	r0, [pc, #104]	; (800764c <prvAddCurrentTaskToDelayedList+0xbc>)
 80075e2:	f7ff fa7e 	bl	8006ae2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075e6:	e026      	b.n	8007636 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075f0:	4b14      	ldr	r3, [pc, #80]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d209      	bcs.n	8007614 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007600:	4b13      	ldr	r3, [pc, #76]	; (8007650 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7ff fa8c 	bl	8006b2a <vListInsert>
}
 8007612:	e010      	b.n	8007636 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3304      	adds	r3, #4
 800761e:	4619      	mov	r1, r3
 8007620:	4610      	mov	r0, r2
 8007622:	f7ff fa82 	bl	8006b2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	429a      	cmp	r2, r3
 800762e:	d202      	bcs.n	8007636 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007630:	4a09      	ldr	r2, [pc, #36]	; (8007658 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6013      	str	r3, [r2, #0]
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000634 	.word	0x20000634
 8007644:	20000530 	.word	0x20000530
 8007648:	20000638 	.word	0x20000638
 800764c:	2000061c 	.word	0x2000061c
 8007650:	200005ec 	.word	0x200005ec
 8007654:	200005e8 	.word	0x200005e8
 8007658:	20000650 	.word	0x20000650

0800765c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3b04      	subs	r3, #4
 800766c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3b04      	subs	r3, #4
 800767a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f023 0201 	bic.w	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3b04      	subs	r3, #4
 800768a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800768c:	4a0c      	ldr	r2, [pc, #48]	; (80076c0 <pxPortInitialiseStack+0x64>)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3b14      	subs	r3, #20
 8007696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3b04      	subs	r3, #4
 80076a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f06f 0202 	mvn.w	r2, #2
 80076aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3b20      	subs	r3, #32
 80076b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	080076c5 	.word	0x080076c5

080076c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <prvTaskExitError+0x58>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d00b      	beq.n	80076f0 <prvTaskExitError+0x2c>
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	b672      	cpsid	i
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	b662      	cpsie	i
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	e7fe      	b.n	80076ee <prvTaskExitError+0x2a>
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	b672      	cpsid	i
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	b662      	cpsie	i
 8007704:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007706:	bf00      	nop
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0fc      	beq.n	8007708 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	20000004 	.word	0x20000004

08007720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <pxCurrentTCBConst2>)
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	6808      	ldr	r0, [r1, #0]
 8007726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	f380 8809 	msr	PSP, r0
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8811 	msr	BASEPRI, r0
 800773a:	4770      	bx	lr
 800773c:	f3af 8000 	nop.w

08007740 <pxCurrentTCBConst2>:
 8007740:	20000530 	.word	0x20000530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007748:	4808      	ldr	r0, [pc, #32]	; (800776c <prvPortStartFirstTask+0x24>)
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f380 8808 	msr	MSP, r0
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8814 	msr	CONTROL, r0
 800775a:	b662      	cpsie	i
 800775c:	b661      	cpsie	f
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	df00      	svc	0
 8007768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800776a:	bf00      	nop
 800776c:	e000ed08 	.word	0xe000ed08

08007770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007776:	4b36      	ldr	r3, [pc, #216]	; (8007850 <xPortStartScheduler+0xe0>)
 8007778:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007798:	b2da      	uxtb	r2, r3
 800779a:	4b2e      	ldr	r3, [pc, #184]	; (8007854 <xPortStartScheduler+0xe4>)
 800779c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800779e:	4b2e      	ldr	r3, [pc, #184]	; (8007858 <xPortStartScheduler+0xe8>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077a4:	e009      	b.n	80077ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077a6:	4b2c      	ldr	r3, [pc, #176]	; (8007858 <xPortStartScheduler+0xe8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	4a2a      	ldr	r2, [pc, #168]	; (8007858 <xPortStartScheduler+0xe8>)
 80077ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d0ef      	beq.n	80077a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077c6:	4b24      	ldr	r3, [pc, #144]	; (8007858 <xPortStartScheduler+0xe8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f1c3 0307 	rsb	r3, r3, #7
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d00b      	beq.n	80077ea <xPortStartScheduler+0x7a>
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	b672      	cpsid	i
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	b662      	cpsie	i
 80077e6:	60bb      	str	r3, [r7, #8]
 80077e8:	e7fe      	b.n	80077e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077ea:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <xPortStartScheduler+0xe8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	4a19      	ldr	r2, [pc, #100]	; (8007858 <xPortStartScheduler+0xe8>)
 80077f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077f4:	4b18      	ldr	r3, [pc, #96]	; (8007858 <xPortStartScheduler+0xe8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077fc:	4a16      	ldr	r2, [pc, #88]	; (8007858 <xPortStartScheduler+0xe8>)
 80077fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	b2da      	uxtb	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007808:	4b14      	ldr	r3, [pc, #80]	; (800785c <xPortStartScheduler+0xec>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a13      	ldr	r2, [pc, #76]	; (800785c <xPortStartScheduler+0xec>)
 800780e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007812:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <xPortStartScheduler+0xec>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a10      	ldr	r2, [pc, #64]	; (800785c <xPortStartScheduler+0xec>)
 800781a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800781e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007820:	f000 f8d4 	bl	80079cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <xPortStartScheduler+0xf0>)
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800782a:	f000 f8f3 	bl	8007a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800782e:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <xPortStartScheduler+0xf4>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <xPortStartScheduler+0xf4>)
 8007834:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007838:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800783a:	f7ff ff85 	bl	8007748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800783e:	f7ff fd79 	bl	8007334 <vTaskSwitchContext>
	prvTaskExitError();
 8007842:	f7ff ff3f 	bl	80076c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	e000e400 	.word	0xe000e400
 8007854:	2000065c 	.word	0x2000065c
 8007858:	20000660 	.word	0x20000660
 800785c:	e000ed20 	.word	0xe000ed20
 8007860:	20000004 	.word	0x20000004
 8007864:	e000ef34 	.word	0xe000ef34

08007868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	b672      	cpsid	i
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	b662      	cpsie	i
 8007882:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007884:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <vPortEnterCritical+0x5c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	4a0e      	ldr	r2, [pc, #56]	; (80078c4 <vPortEnterCritical+0x5c>)
 800788c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800788e:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <vPortEnterCritical+0x5c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d110      	bne.n	80078b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007896:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <vPortEnterCritical+0x60>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <vPortEnterCritical+0x50>
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	b672      	cpsid	i
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	b662      	cpsie	i
 80078b4:	603b      	str	r3, [r7, #0]
 80078b6:	e7fe      	b.n	80078b6 <vPortEnterCritical+0x4e>
	}
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	20000004 	.word	0x20000004
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078d2:	4b12      	ldr	r3, [pc, #72]	; (800791c <vPortExitCritical+0x50>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10b      	bne.n	80078f2 <vPortExitCritical+0x26>
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	b672      	cpsid	i
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	b662      	cpsie	i
 80078ee:	607b      	str	r3, [r7, #4]
 80078f0:	e7fe      	b.n	80078f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <vPortExitCritical+0x50>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	4a08      	ldr	r2, [pc, #32]	; (800791c <vPortExitCritical+0x50>)
 80078fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078fc:	4b07      	ldr	r3, [pc, #28]	; (800791c <vPortExitCritical+0x50>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <vPortExitCritical+0x42>
 8007904:	2300      	movs	r3, #0
 8007906:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000004 	.word	0x20000004

08007920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007920:	f3ef 8009 	mrs	r0, PSP
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	4b15      	ldr	r3, [pc, #84]	; (8007980 <pxCurrentTCBConst>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	f01e 0f10 	tst.w	lr, #16
 8007930:	bf08      	it	eq
 8007932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	6010      	str	r0, [r2, #0]
 800793c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007944:	b672      	cpsid	i
 8007946:	f380 8811 	msr	BASEPRI, r0
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	b662      	cpsie	i
 8007954:	f7ff fcee 	bl	8007334 <vTaskSwitchContext>
 8007958:	f04f 0000 	mov.w	r0, #0
 800795c:	f380 8811 	msr	BASEPRI, r0
 8007960:	bc09      	pop	{r0, r3}
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	6808      	ldr	r0, [r1, #0]
 8007966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	f01e 0f10 	tst.w	lr, #16
 800796e:	bf08      	it	eq
 8007970:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007974:	f380 8809 	msr	PSP, r0
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop

08007980 <pxCurrentTCBConst>:
 8007980:	20000530 	.word	0x20000530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop

08007988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	b672      	cpsid	i
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	b662      	cpsie	i
 80079a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079a4:	f7ff fc08 	bl	80071b8 <xTaskIncrementTick>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079ae:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <xPortSysTickHandler+0x40>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	2300      	movs	r3, #0
 80079b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <vPortSetupTimerInterrupt+0x34>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079d6:	4b0b      	ldr	r3, [pc, #44]	; (8007a04 <vPortSetupTimerInterrupt+0x38>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <vPortSetupTimerInterrupt+0x3c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0a      	ldr	r2, [pc, #40]	; (8007a0c <vPortSetupTimerInterrupt+0x40>)
 80079e2:	fba2 2303 	umull	r2, r3, r2, r3
 80079e6:	099b      	lsrs	r3, r3, #6
 80079e8:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <vPortSetupTimerInterrupt+0x44>)
 80079ea:	3b01      	subs	r3, #1
 80079ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ee:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <vPortSetupTimerInterrupt+0x34>)
 80079f0:	2207      	movs	r2, #7
 80079f2:	601a      	str	r2, [r3, #0]
}
 80079f4:	bf00      	nop
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	e000e010 	.word	0xe000e010
 8007a04:	e000e018 	.word	0xe000e018
 8007a08:	20000008 	.word	0x20000008
 8007a0c:	10624dd3 	.word	0x10624dd3
 8007a10:	e000e014 	.word	0xe000e014

08007a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a24 <vPortEnableVFP+0x10>
 8007a18:	6801      	ldr	r1, [r0, #0]
 8007a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a1e:	6001      	str	r1, [r0, #0]
 8007a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a22:	bf00      	nop
 8007a24:	e000ed88 	.word	0xe000ed88

08007a28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007a2e:	463b      	mov	r3, r7
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	609a      	str	r2, [r3, #8]
 8007a38:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007a3a:	4b8a      	ldr	r3, [pc, #552]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a3c:	4a8a      	ldr	r2, [pc, #552]	; (8007c68 <MX_ADC1_Init+0x240>)
 8007a3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007a40:	4b88      	ldr	r3, [pc, #544]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007a46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007a48:	4b86      	ldr	r3, [pc, #536]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007a4e:	4b85      	ldr	r3, [pc, #532]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007a54:	4b83      	ldr	r3, [pc, #524]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a56:	2201      	movs	r2, #1
 8007a58:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007a5a:	4b82      	ldr	r3, [pc, #520]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007a62:	4b80      	ldr	r3, [pc, #512]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007a68:	4b7e      	ldr	r3, [pc, #504]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a6a:	4a80      	ldr	r2, [pc, #512]	; (8007c6c <MX_ADC1_Init+0x244>)
 8007a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007a6e:	4b7d      	ldr	r3, [pc, #500]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8007a74:	4b7b      	ldr	r3, [pc, #492]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a76:	2210      	movs	r2, #16
 8007a78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007a7a:	4b7a      	ldr	r3, [pc, #488]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007a82:	4b78      	ldr	r3, [pc, #480]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007a88:	4876      	ldr	r0, [pc, #472]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007a8a:	f7f9 fae3 	bl	8001054 <HAL_ADC_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007a94:	f000 fdf4 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8007aa0:	2307      	movs	r3, #7
 8007aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007aa4:	463b      	mov	r3, r7
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	486e      	ldr	r0, [pc, #440]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007aaa:	f7f9 fc23 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007ab4:	f000 fde4 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007abc:	2302      	movs	r3, #2
 8007abe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4867      	ldr	r0, [pc, #412]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007ac6:	f7f9 fc15 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007ad0:	f000 fdd6 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007adc:	463b      	mov	r3, r7
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4860      	ldr	r0, [pc, #384]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007ae2:	f7f9 fc07 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8007aec:	f000 fdc8 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007af0:	2303      	movs	r3, #3
 8007af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007af4:	2304      	movs	r3, #4
 8007af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007af8:	463b      	mov	r3, r7
 8007afa:	4619      	mov	r1, r3
 8007afc:	4859      	ldr	r0, [pc, #356]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007afe:	f7f9 fbf9 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8007b08:	f000 fdba 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007b10:	2305      	movs	r3, #5
 8007b12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b14:	463b      	mov	r3, r7
 8007b16:	4619      	mov	r1, r3
 8007b18:	4852      	ldr	r0, [pc, #328]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007b1a:	f7f9 fbeb 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8007b24:	f000 fdac 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007b28:	2305      	movs	r3, #5
 8007b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007b2c:	2306      	movs	r3, #6
 8007b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b30:	463b      	mov	r3, r7
 8007b32:	4619      	mov	r1, r3
 8007b34:	484b      	ldr	r0, [pc, #300]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007b36:	f7f9 fbdd 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8007b40:	f000 fd9e 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8007b44:	2306      	movs	r3, #6
 8007b46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8007b48:	2307      	movs	r3, #7
 8007b4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4844      	ldr	r0, [pc, #272]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007b52:	f7f9 fbcf 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8007b5c:	f000 fd90 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8007b60:	2307      	movs	r3, #7
 8007b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8007b64:	2308      	movs	r3, #8
 8007b66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b68:	463b      	mov	r3, r7
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	483d      	ldr	r0, [pc, #244]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007b6e:	f7f9 fbc1 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8007b78:	f000 fd82 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8007b80:	2309      	movs	r3, #9
 8007b82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b84:	463b      	mov	r3, r7
 8007b86:	4619      	mov	r1, r3
 8007b88:	4836      	ldr	r0, [pc, #216]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007b8a:	f7f9 fbb3 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8007b94:	f000 fd74 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007b98:	2309      	movs	r3, #9
 8007b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8007b9c:	230a      	movs	r3, #10
 8007b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	482f      	ldr	r0, [pc, #188]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007ba6:	f7f9 fba5 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8007bb0:	f000 fd66 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8007bb4:	230a      	movs	r3, #10
 8007bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8007bb8:	230b      	movs	r3, #11
 8007bba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007bbc:	463b      	mov	r3, r7
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4828      	ldr	r0, [pc, #160]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007bc2:	f7f9 fb97 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8007bcc:	f000 fd58 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8007bd0:	230b      	movs	r3, #11
 8007bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007bd8:	463b      	mov	r3, r7
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4821      	ldr	r0, [pc, #132]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007bde:	f7f9 fb89 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8007be8:	f000 fd4a 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8007bec:	230c      	movs	r3, #12
 8007bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8007bf0:	230d      	movs	r3, #13
 8007bf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	481a      	ldr	r0, [pc, #104]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007bfa:	f7f9 fb7b 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8007c04:	f000 fd3c 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8007c08:	230d      	movs	r3, #13
 8007c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8007c0c:	230e      	movs	r3, #14
 8007c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c10:	463b      	mov	r3, r7
 8007c12:	4619      	mov	r1, r3
 8007c14:	4813      	ldr	r0, [pc, #76]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007c16:	f7f9 fb6d 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8007c20:	f000 fd2e 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007c24:	230e      	movs	r3, #14
 8007c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8007c28:	230f      	movs	r3, #15
 8007c2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	4619      	mov	r1, r3
 8007c30:	480c      	ldr	r0, [pc, #48]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007c32:	f7f9 fb5f 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8007c3c:	f000 fd20 	bl	8008680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007c40:	230f      	movs	r3, #15
 8007c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8007c44:	2310      	movs	r3, #16
 8007c46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c48:	463b      	mov	r3, r7
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4805      	ldr	r0, [pc, #20]	; (8007c64 <MX_ADC1_Init+0x23c>)
 8007c4e:	f7f9 fb51 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8007c58:	f000 fd12 	bl	8008680 <Error_Handler>
  }

}
 8007c5c:	bf00      	nop
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	200010d0 	.word	0x200010d0
 8007c68:	40012000 	.word	0x40012000
 8007c6c:	0f000001 	.word	0x0f000001

08007c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08c      	sub	sp, #48	; 0x30
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c78:	f107 031c 	add.w	r3, r7, #28
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	609a      	str	r2, [r3, #8]
 8007c84:	60da      	str	r2, [r3, #12]
 8007c86:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a45      	ldr	r2, [pc, #276]	; (8007da4 <HAL_ADC_MspInit+0x134>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	f040 8084 	bne.w	8007d9c <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007c94:	4b44      	ldr	r3, [pc, #272]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c98:	4a43      	ldr	r2, [pc, #268]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8007ca0:	4b41      	ldr	r3, [pc, #260]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cac:	4b3e      	ldr	r3, [pc, #248]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	4a3d      	ldr	r2, [pc, #244]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007cb2:	f043 0304 	orr.w	r3, r3, #4
 8007cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8007cb8:	4b3b      	ldr	r3, [pc, #236]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cc4:	4b38      	ldr	r3, [pc, #224]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc8:	4a37      	ldr	r2, [pc, #220]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007cca:	f043 0301 	orr.w	r3, r3, #1
 8007cce:	6313      	str	r3, [r2, #48]	; 0x30
 8007cd0:	4b35      	ldr	r3, [pc, #212]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cdc:	4b32      	ldr	r3, [pc, #200]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce0:	4a31      	ldr	r2, [pc, #196]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007ce2:	f043 0302 	orr.w	r3, r3, #2
 8007ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce8:	4b2f      	ldr	r3, [pc, #188]	; (8007da8 <HAL_ADC_MspInit+0x138>)
 8007cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A10_Pin|A11_Pin|A12_Pin|A13_Pin 
 8007cf4:	233f      	movs	r3, #63	; 0x3f
 8007cf6:	61fb      	str	r3, [r7, #28]
                          |A14_Pin|A15_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d00:	f107 031c 	add.w	r3, r7, #28
 8007d04:	4619      	mov	r1, r3
 8007d06:	4829      	ldr	r0, [pc, #164]	; (8007dac <HAL_ADC_MspInit+0x13c>)
 8007d08:	f7fa fa8e 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8007d0c:	23ff      	movs	r3, #255	; 0xff
 8007d0e:	61fb      	str	r3, [r7, #28]
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d10:	2303      	movs	r3, #3
 8007d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d14:	2300      	movs	r3, #0
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d18:	f107 031c 	add.w	r3, r7, #28
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4824      	ldr	r0, [pc, #144]	; (8007db0 <HAL_ADC_MspInit+0x140>)
 8007d20:	f7fa fa82 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A8_Pin|A9_Pin;
 8007d24:	2303      	movs	r3, #3
 8007d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d30:	f107 031c 	add.w	r3, r7, #28
 8007d34:	4619      	mov	r1, r3
 8007d36:	481f      	ldr	r0, [pc, #124]	; (8007db4 <HAL_ADC_MspInit+0x144>)
 8007d38:	f7fa fa76 	bl	8002228 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8007d3c:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d3e:	4a1f      	ldr	r2, [pc, #124]	; (8007dbc <HAL_ADC_MspInit+0x14c>)
 8007d40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007d42:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d48:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d4e:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007d54:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007d5c:	4b16      	ldr	r3, [pc, #88]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007d64:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d6a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007d6c:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007d74:	4b10      	ldr	r3, [pc, #64]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d7a:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007d80:	480d      	ldr	r0, [pc, #52]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d82:	f7f9 fe49 	bl	8001a18 <HAL_DMA_Init>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8007d8c:	f000 fc78 	bl	8008680 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a09      	ldr	r2, [pc, #36]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38
 8007d96:	4a08      	ldr	r2, [pc, #32]	; (8007db8 <HAL_ADC_MspInit+0x148>)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3730      	adds	r7, #48	; 0x30
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	40012000 	.word	0x40012000
 8007da8:	40023800 	.word	0x40023800
 8007dac:	40020800 	.word	0x40020800
 8007db0:	40020000 	.word	0x40020000
 8007db4:	40020400 	.word	0x40020400
 8007db8:	20001118 	.word	0x20001118
 8007dbc:	40026470 	.word	0x40026470

08007dc0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007dc6:	4b3a      	ldr	r3, [pc, #232]	; (8007eb0 <MX_DMA_Init+0xf0>)
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	4a39      	ldr	r2, [pc, #228]	; (8007eb0 <MX_DMA_Init+0xf0>)
 8007dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8007dd2:	4b37      	ldr	r3, [pc, #220]	; (8007eb0 <MX_DMA_Init+0xf0>)
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dda:	607b      	str	r3, [r7, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007dde:	4b34      	ldr	r3, [pc, #208]	; (8007eb0 <MX_DMA_Init+0xf0>)
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	4a33      	ldr	r2, [pc, #204]	; (8007eb0 <MX_DMA_Init+0xf0>)
 8007de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007de8:	6313      	str	r3, [r2, #48]	; 0x30
 8007dea:	4b31      	ldr	r3, [pc, #196]	; (8007eb0 <MX_DMA_Init+0xf0>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8007df6:	2200      	movs	r2, #0
 8007df8:	2105      	movs	r1, #5
 8007dfa:	200b      	movs	r0, #11
 8007dfc:	f7f9 fde2 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007e00:	200b      	movs	r0, #11
 8007e02:	f7f9 fdfb 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8007e06:	2200      	movs	r2, #0
 8007e08:	2105      	movs	r1, #5
 8007e0a:	200c      	movs	r0, #12
 8007e0c:	f7f9 fdda 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007e10:	200c      	movs	r0, #12
 8007e12:	f7f9 fdf3 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2105      	movs	r1, #5
 8007e1a:	200d      	movs	r0, #13
 8007e1c:	f7f9 fdd2 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8007e20:	200d      	movs	r0, #13
 8007e22:	f7f9 fdeb 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8007e26:	2200      	movs	r2, #0
 8007e28:	2105      	movs	r1, #5
 8007e2a:	200f      	movs	r0, #15
 8007e2c:	f7f9 fdca 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007e30:	200f      	movs	r0, #15
 8007e32:	f7f9 fde3 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8007e36:	2200      	movs	r2, #0
 8007e38:	2105      	movs	r1, #5
 8007e3a:	2010      	movs	r0, #16
 8007e3c:	f7f9 fdc2 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007e40:	2010      	movs	r0, #16
 8007e42:	f7f9 fddb 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8007e46:	2200      	movs	r2, #0
 8007e48:	2105      	movs	r1, #5
 8007e4a:	202f      	movs	r0, #47	; 0x2f
 8007e4c:	f7f9 fdba 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8007e50:	202f      	movs	r0, #47	; 0x2f
 8007e52:	f7f9 fdd3 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8007e56:	2200      	movs	r2, #0
 8007e58:	2105      	movs	r1, #5
 8007e5a:	2038      	movs	r0, #56	; 0x38
 8007e5c:	f7f9 fdb2 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007e60:	2038      	movs	r0, #56	; 0x38
 8007e62:	f7f9 fdcb 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8007e66:	2200      	movs	r2, #0
 8007e68:	2105      	movs	r1, #5
 8007e6a:	2039      	movs	r0, #57	; 0x39
 8007e6c:	f7f9 fdaa 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007e70:	2039      	movs	r0, #57	; 0x39
 8007e72:	f7f9 fdc3 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007e76:	2200      	movs	r2, #0
 8007e78:	2105      	movs	r1, #5
 8007e7a:	203a      	movs	r0, #58	; 0x3a
 8007e7c:	f7f9 fda2 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007e80:	203a      	movs	r0, #58	; 0x3a
 8007e82:	f7f9 fdbb 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8007e86:	2200      	movs	r2, #0
 8007e88:	2105      	movs	r1, #5
 8007e8a:	203b      	movs	r0, #59	; 0x3b
 8007e8c:	f7f9 fd9a 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007e90:	203b      	movs	r0, #59	; 0x3b
 8007e92:	f7f9 fdb3 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8007e96:	2200      	movs	r2, #0
 8007e98:	2105      	movs	r1, #5
 8007e9a:	203c      	movs	r0, #60	; 0x3c
 8007e9c:	f7f9 fd92 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8007ea0:	203c      	movs	r0, #60	; 0x3c
 8007ea2:	f7f9 fdab 	bl	80019fc <HAL_NVIC_EnableIRQ>

}
 8007ea6:	bf00      	nop
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	40023800 	.word	0x40023800

08007eb4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4a07      	ldr	r2, [pc, #28]	; (8007ee0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ec4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	4a06      	ldr	r2, [pc, #24]	; (8007ee4 <vApplicationGetIdleTaskMemory+0x30>)
 8007eca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2280      	movs	r2, #128	; 0x80
 8007ed0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	20000664 	.word	0x20000664
 8007ee4:	200006b8 	.word	0x200006b8

08007ee8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007ee8:	b5b0      	push	{r4, r5, r7, lr}
 8007eea:	b08e      	sub	sp, #56	; 0x38
 8007eec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <MX_FREERTOS_Init+0x58>)
 8007ef0:	f107 041c 	add.w	r4, r7, #28
 8007ef4:	461d      	mov	r5, r3
 8007ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007efa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 8007f02:	f107 031c 	add.w	r3, r7, #28
 8007f06:	2100      	movs	r1, #0
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe fd8d 	bl	8006a28 <osThreadCreate>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <MX_FREERTOS_Init+0x5c>)
 8007f12:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <MX_FREERTOS_Init+0x60>)
 8007f16:	463c      	mov	r4, r7
 8007f18:	461d      	mov	r5, r3
 8007f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8007f26:	463b      	mov	r3, r7
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fd7c 	bl	8006a28 <osThreadCreate>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <MX_FREERTOS_Init+0x64>)
 8007f34:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007f36:	bf00      	nop
 8007f38:	3738      	adds	r7, #56	; 0x38
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	08012dec 	.word	0x08012dec
 8007f44:	20005178 	.word	0x20005178
 8007f48:	08012e14 	.word	0x08012e14
 8007f4c:	200051d0 	.word	0x200051d0

08007f50 <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
    
    
    

  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();;
 8007f58:	f7ff f91e 	bl	8007198 <xTaskGetTickCount>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS((int)(1000.0/DISPLAY_FREQUENCY));
 8007f60:	2301      	movs	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  serialDisplay();
 8007f64:	f005 ff1a 	bl	800dd9c <serialDisplay>
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 8007f68:	f107 0308 	add.w	r3, r7, #8
 8007f6c:	68f9      	ldr	r1, [r7, #12]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe ff84 	bl	8006e7c <vTaskDelayUntil>
	  serialDisplay();
 8007f74:	e7f6      	b.n	8007f64 <sendTaskFunc+0x14>

08007f76 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8007f7e:	f7ff f90b 	bl	8007198 <xTaskGetTickCount>
 8007f82:	4603      	mov	r3, r0
 8007f84:	60bb      	str	r3, [r7, #8]
		TickType_t controlTaskPeriod=pdMS_TO_TICKS((int)(1000.0/CONTROL_FREQUENCY));
 8007f86:	2301      	movs	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	 for(;;)
	  {
			AnaBuiltInStart();
 8007f8a:	f003 ff75 	bl	800be78 <AnaBuiltInStart>
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 8007f8e:	f002 fca7 	bl	800a8e0 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_TerminalHandler();
 8007f92:	f005 fdab 	bl	800daec <Usart_TerminalHandler>

			//User loop function
			loop();
 8007f96:	f005 fec5 	bl	800dd24 <loop>

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
 8007f9a:	f003 fce5 	bl	800b968 <PWMBoardSPI_flushDutyAll>
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 8007f9e:	f107 0308 	add.w	r3, r7, #8
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe ff69 	bl	8006e7c <vTaskDelayUntil>
			AnaBuiltInStart();
 8007faa:	e7ee      	b.n	8007f8a <controlTaskFunc+0x14>

08007fac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	; 0x30
 8007fb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fb2:	f107 031c 	add.w	r3, r7, #28
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	609a      	str	r2, [r3, #8]
 8007fbe:	60da      	str	r2, [r3, #12]
 8007fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007fc2:	4b8f      	ldr	r3, [pc, #572]	; (8008200 <MX_GPIO_Init+0x254>)
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	4a8e      	ldr	r2, [pc, #568]	; (8008200 <MX_GPIO_Init+0x254>)
 8007fc8:	f043 0310 	orr.w	r3, r3, #16
 8007fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8007fce:	4b8c      	ldr	r3, [pc, #560]	; (8008200 <MX_GPIO_Init+0x254>)
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd2:	f003 0310 	and.w	r3, r3, #16
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fda:	4b89      	ldr	r3, [pc, #548]	; (8008200 <MX_GPIO_Init+0x254>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	4a88      	ldr	r2, [pc, #544]	; (8008200 <MX_GPIO_Init+0x254>)
 8007fe0:	f043 0304 	orr.w	r3, r3, #4
 8007fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fe6:	4b86      	ldr	r3, [pc, #536]	; (8008200 <MX_GPIO_Init+0x254>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007ff2:	4b83      	ldr	r3, [pc, #524]	; (8008200 <MX_GPIO_Init+0x254>)
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	4a82      	ldr	r2, [pc, #520]	; (8008200 <MX_GPIO_Init+0x254>)
 8007ff8:	f043 0320 	orr.w	r3, r3, #32
 8007ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ffe:	4b80      	ldr	r3, [pc, #512]	; (8008200 <MX_GPIO_Init+0x254>)
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800800a:	4b7d      	ldr	r3, [pc, #500]	; (8008200 <MX_GPIO_Init+0x254>)
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	4a7c      	ldr	r2, [pc, #496]	; (8008200 <MX_GPIO_Init+0x254>)
 8008010:	f043 0301 	orr.w	r3, r3, #1
 8008014:	6313      	str	r3, [r2, #48]	; 0x30
 8008016:	4b7a      	ldr	r3, [pc, #488]	; (8008200 <MX_GPIO_Init+0x254>)
 8008018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008022:	4b77      	ldr	r3, [pc, #476]	; (8008200 <MX_GPIO_Init+0x254>)
 8008024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008026:	4a76      	ldr	r2, [pc, #472]	; (8008200 <MX_GPIO_Init+0x254>)
 8008028:	f043 0302 	orr.w	r3, r3, #2
 800802c:	6313      	str	r3, [r2, #48]	; 0x30
 800802e:	4b74      	ldr	r3, [pc, #464]	; (8008200 <MX_GPIO_Init+0x254>)
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	60bb      	str	r3, [r7, #8]
 8008038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800803a:	4b71      	ldr	r3, [pc, #452]	; (8008200 <MX_GPIO_Init+0x254>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	4a70      	ldr	r2, [pc, #448]	; (8008200 <MX_GPIO_Init+0x254>)
 8008040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008044:	6313      	str	r3, [r2, #48]	; 0x30
 8008046:	4b6e      	ldr	r3, [pc, #440]	; (8008200 <MX_GPIO_Init+0x254>)
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	607b      	str	r3, [r7, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008052:	4b6b      	ldr	r3, [pc, #428]	; (8008200 <MX_GPIO_Init+0x254>)
 8008054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008056:	4a6a      	ldr	r2, [pc, #424]	; (8008200 <MX_GPIO_Init+0x254>)
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	6313      	str	r3, [r2, #48]	; 0x30
 800805e:	4b68      	ldr	r3, [pc, #416]	; (8008200 <MX_GPIO_Init+0x254>)
 8008060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_6_Pin|DO_1_Pin|DO_13_Pin|DO_14_Pin 
 800806a:	2200      	movs	r2, #0
 800806c:	f249 519b 	movw	r1, #38299	; 0x959b
 8008070:	4864      	ldr	r0, [pc, #400]	; (8008204 <MX_GPIO_Init+0x258>)
 8008072:	f7fa fa83 	bl	800257c <HAL_GPIO_WritePin>
                          |DO_15_Pin|DO_16_Pin|DO_17_Pin|DO_10_Pin 
                          |DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO_2_GPIO_Port, DO_2_Pin, GPIO_PIN_RESET);
 8008076:	2200      	movs	r2, #0
 8008078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800807c:	4862      	ldr	r0, [pc, #392]	; (8008208 <MX_GPIO_Init+0x25c>)
 800807e:	f7fa fa7d 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_5_Pin|DO_0_Pin|DO_7_Pin|DO_8_Pin 
 8008082:	2200      	movs	r2, #0
 8008084:	f244 413c 	movw	r1, #17468	; 0x443c
 8008088:	4860      	ldr	r0, [pc, #384]	; (800820c <MX_GPIO_Init+0x260>)
 800808a:	f7fa fa77 	bl	800257c <HAL_GPIO_WritePin>
                          |DO_9_Pin|DO_12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_18_Pin|DO_19_Pin|DO_4_Pin|DO_3_Pin, GPIO_PIN_RESET);
 800808e:	2200      	movs	r2, #0
 8008090:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8008094:	485e      	ldr	r0, [pc, #376]	; (8008210 <MX_GPIO_Init+0x264>)
 8008096:	f7fa fa71 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI4_CS_Pin|SPI6_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800809a:	2200      	movs	r2, #0
 800809c:	f640 4102 	movw	r1, #3074	; 0xc02
 80080a0:	485c      	ldr	r0, [pc, #368]	; (8008214 <MX_GPIO_Init+0x268>)
 80080a2:	f7fa fa6b 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80080a6:	2200      	movs	r2, #0
 80080a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080ac:	485a      	ldr	r0, [pc, #360]	; (8008218 <MX_GPIO_Init+0x26c>)
 80080ae:	f7fa fa65 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = DO_6_Pin|DO_1_Pin|DO_13_Pin|DO_14_Pin 
 80080b2:	f249 539b 	movw	r3, #38299	; 0x959b
 80080b6:	61fb      	str	r3, [r7, #28]
                          |DO_15_Pin|DO_16_Pin|DO_17_Pin|DO_10_Pin 
                          |DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080b8:	2301      	movs	r3, #1
 80080ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080c0:	2300      	movs	r3, #0
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080c4:	f107 031c 	add.w	r3, r7, #28
 80080c8:	4619      	mov	r1, r3
 80080ca:	484e      	ldr	r0, [pc, #312]	; (8008204 <MX_GPIO_Init+0x258>)
 80080cc:	f7fa f8ac 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DO_2_Pin;
 80080d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080d6:	2301      	movs	r3, #1
 80080d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080de:	2300      	movs	r3, #0
 80080e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DO_2_GPIO_Port, &GPIO_InitStruct);
 80080e2:	f107 031c 	add.w	r3, r7, #28
 80080e6:	4619      	mov	r1, r3
 80080e8:	4847      	ldr	r0, [pc, #284]	; (8008208 <MX_GPIO_Init+0x25c>)
 80080ea:	f7fa f89d 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_5_Pin|DO_0_Pin|DO_7_Pin|DO_8_Pin 
 80080ee:	f244 433c 	movw	r3, #17468	; 0x443c
 80080f2:	61fb      	str	r3, [r7, #28]
                          |DO_9_Pin|DO_12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080f4:	2301      	movs	r3, #1
 80080f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080fc:	2300      	movs	r3, #0
 80080fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008100:	f107 031c 	add.w	r3, r7, #28
 8008104:	4619      	mov	r1, r3
 8008106:	4841      	ldr	r0, [pc, #260]	; (800820c <MX_GPIO_Init+0x260>)
 8008108:	f7fa f88e 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 800810c:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8008110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008112:	2300      	movs	r3, #0
 8008114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008116:	2300      	movs	r3, #0
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800811a:	f107 031c 	add.w	r3, r7, #28
 800811e:	4619      	mov	r1, r3
 8008120:	483a      	ldr	r0, [pc, #232]	; (800820c <MX_GPIO_Init+0x260>)
 8008122:	f7fa f881 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 8008126:	23ff      	movs	r3, #255	; 0xff
 8008128:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin|E6_Pin|E7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800812a:	4b3c      	ldr	r3, [pc, #240]	; (800821c <MX_GPIO_Init+0x270>)
 800812c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800812e:	2300      	movs	r3, #0
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008132:	f107 031c 	add.w	r3, r7, #28
 8008136:	4619      	mov	r1, r3
 8008138:	4839      	ldr	r0, [pc, #228]	; (8008220 <MX_GPIO_Init+0x274>)
 800813a:	f7fa f875 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DO_18_Pin|DO_19_Pin|DO_4_Pin|DO_3_Pin;
 800813e:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8008142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008144:	2301      	movs	r3, #1
 8008146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008148:	2300      	movs	r3, #0
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800814c:	2300      	movs	r3, #0
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008150:	f107 031c 	add.w	r3, r7, #28
 8008154:	4619      	mov	r1, r3
 8008156:	482e      	ldr	r0, [pc, #184]	; (8008210 <MX_GPIO_Init+0x264>)
 8008158:	f7fa f866 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|SPI6_CS_Pin|SPI3_CS_Pin;
 800815c:	f640 4302 	movw	r3, #3074	; 0xc02
 8008160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008162:	2301      	movs	r3, #1
 8008164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008166:	2300      	movs	r3, #0
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800816a:	2300      	movs	r3, #0
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800816e:	f107 031c 	add.w	r3, r7, #28
 8008172:	4619      	mov	r1, r3
 8008174:	4827      	ldr	r0, [pc, #156]	; (8008214 <MX_GPIO_Init+0x268>)
 8008176:	f7fa f857 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800817a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800817e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008180:	2301      	movs	r3, #1
 8008182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008184:	2300      	movs	r3, #0
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008188:	2300      	movs	r3, #0
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800818c:	f107 031c 	add.w	r3, r7, #28
 8008190:	4619      	mov	r1, r3
 8008192:	4821      	ldr	r0, [pc, #132]	; (8008218 <MX_GPIO_Init+0x26c>)
 8008194:	f7fa f848 	bl	8002228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8008198:	2200      	movs	r2, #0
 800819a:	2105      	movs	r1, #5
 800819c:	2006      	movs	r0, #6
 800819e:	f7f9 fc11 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80081a2:	2006      	movs	r0, #6
 80081a4:	f7f9 fc2a 	bl	80019fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80081a8:	2200      	movs	r2, #0
 80081aa:	2105      	movs	r1, #5
 80081ac:	2007      	movs	r0, #7
 80081ae:	f7f9 fc09 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80081b2:	2007      	movs	r0, #7
 80081b4:	f7f9 fc22 	bl	80019fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80081b8:	2200      	movs	r2, #0
 80081ba:	2105      	movs	r1, #5
 80081bc:	2008      	movs	r0, #8
 80081be:	f7f9 fc01 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80081c2:	2008      	movs	r0, #8
 80081c4:	f7f9 fc1a 	bl	80019fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80081c8:	2200      	movs	r2, #0
 80081ca:	2105      	movs	r1, #5
 80081cc:	2009      	movs	r0, #9
 80081ce:	f7f9 fbf9 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80081d2:	2009      	movs	r0, #9
 80081d4:	f7f9 fc12 	bl	80019fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80081d8:	2200      	movs	r2, #0
 80081da:	2105      	movs	r1, #5
 80081dc:	200a      	movs	r0, #10
 80081de:	f7f9 fbf1 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80081e2:	200a      	movs	r0, #10
 80081e4:	f7f9 fc0a 	bl	80019fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80081e8:	2200      	movs	r2, #0
 80081ea:	2105      	movs	r1, #5
 80081ec:	2017      	movs	r0, #23
 80081ee:	f7f9 fbe9 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80081f2:	2017      	movs	r0, #23
 80081f4:	f7f9 fc02 	bl	80019fc <HAL_NVIC_EnableIRQ>

}
 80081f8:	bf00      	nop
 80081fa:	3730      	adds	r7, #48	; 0x30
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40023800 	.word	0x40023800
 8008204:	40021000 	.word	0x40021000
 8008208:	40020800 	.word	0x40020800
 800820c:	40021400 	.word	0x40021400
 8008210:	40020400 	.word	0x40020400
 8008214:	40020c00 	.word	0x40020c00
 8008218:	40020000 	.word	0x40020000
 800821c:	10110000 	.word	0x10110000
 8008220:	40021800 	.word	0x40021800

08008224 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8008228:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <MX_I2C2_Init+0x74>)
 800822a:	4a1c      	ldr	r2, [pc, #112]	; (800829c <MX_I2C2_Init+0x78>)
 800822c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A01B56;
 800822e:	4b1a      	ldr	r3, [pc, #104]	; (8008298 <MX_I2C2_Init+0x74>)
 8008230:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <MX_I2C2_Init+0x7c>)
 8008232:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008234:	4b18      	ldr	r3, [pc, #96]	; (8008298 <MX_I2C2_Init+0x74>)
 8008236:	2200      	movs	r2, #0
 8008238:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800823a:	4b17      	ldr	r3, [pc, #92]	; (8008298 <MX_I2C2_Init+0x74>)
 800823c:	2201      	movs	r2, #1
 800823e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008240:	4b15      	ldr	r3, [pc, #84]	; (8008298 <MX_I2C2_Init+0x74>)
 8008242:	2200      	movs	r2, #0
 8008244:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <MX_I2C2_Init+0x74>)
 8008248:	2200      	movs	r2, #0
 800824a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800824c:	4b12      	ldr	r3, [pc, #72]	; (8008298 <MX_I2C2_Init+0x74>)
 800824e:	2200      	movs	r2, #0
 8008250:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008252:	4b11      	ldr	r3, [pc, #68]	; (8008298 <MX_I2C2_Init+0x74>)
 8008254:	2200      	movs	r2, #0
 8008256:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <MX_I2C2_Init+0x74>)
 800825a:	2200      	movs	r2, #0
 800825c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800825e:	480e      	ldr	r0, [pc, #56]	; (8008298 <MX_I2C2_Init+0x74>)
 8008260:	f7fa f9be 	bl	80025e0 <HAL_I2C_Init>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800826a:	f000 fa09 	bl	8008680 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800826e:	2100      	movs	r1, #0
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <MX_I2C2_Init+0x74>)
 8008272:	f7fa fa45 	bl	8002700 <HAL_I2CEx_ConfigAnalogFilter>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800827c:	f000 fa00 	bl	8008680 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008280:	2100      	movs	r1, #0
 8008282:	4805      	ldr	r0, [pc, #20]	; (8008298 <MX_I2C2_Init+0x74>)
 8008284:	f7fa fa87 	bl	8002796 <HAL_I2CEx_ConfigDigitalFilter>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800828e:	f000 f9f7 	bl	8008680 <Error_Handler>
  }

}
 8008292:	bf00      	nop
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20009228 	.word	0x20009228
 800829c:	40005800 	.word	0x40005800
 80082a0:	00a01b56 	.word	0x00a01b56

080082a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	; 0x28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ac:	f107 0314 	add.w	r3, r7, #20
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	605a      	str	r2, [r3, #4]
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a2e      	ldr	r2, [pc, #184]	; (800837c <HAL_I2C_MspInit+0xd8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d156      	bne.n	8008374 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80082c6:	4b2e      	ldr	r3, [pc, #184]	; (8008380 <HAL_I2C_MspInit+0xdc>)
 80082c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ca:	4a2d      	ldr	r2, [pc, #180]	; (8008380 <HAL_I2C_MspInit+0xdc>)
 80082cc:	f043 0320 	orr.w	r3, r3, #32
 80082d0:	6313      	str	r3, [r2, #48]	; 0x30
 80082d2:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <HAL_I2C_MspInit+0xdc>)
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	613b      	str	r3, [r7, #16]
 80082dc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80082de:	2303      	movs	r3, #3
 80082e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80082e2:	2312      	movs	r3, #18
 80082e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082ea:	2303      	movs	r3, #3
 80082ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80082ee:	2304      	movs	r3, #4
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80082f2:	f107 0314 	add.w	r3, r7, #20
 80082f6:	4619      	mov	r1, r3
 80082f8:	4822      	ldr	r0, [pc, #136]	; (8008384 <HAL_I2C_MspInit+0xe0>)
 80082fa:	f7f9 ff95 	bl	8002228 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80082fe:	4b20      	ldr	r3, [pc, #128]	; (8008380 <HAL_I2C_MspInit+0xdc>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	4a1f      	ldr	r2, [pc, #124]	; (8008380 <HAL_I2C_MspInit+0xdc>)
 8008304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008308:	6413      	str	r3, [r2, #64]	; 0x40
 800830a:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <HAL_I2C_MspInit+0xdc>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8008316:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 8008318:	4a1c      	ldr	r2, [pc, #112]	; (800838c <HAL_I2C_MspInit+0xe8>)
 800831a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800831c:	4b1a      	ldr	r3, [pc, #104]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 800831e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8008322:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008324:	4b18      	ldr	r3, [pc, #96]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 8008326:	2240      	movs	r2, #64	; 0x40
 8008328:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800832a:	4b17      	ldr	r3, [pc, #92]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 800832c:	2200      	movs	r2, #0
 800832e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008330:	4b15      	ldr	r3, [pc, #84]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 8008332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008336:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008338:	4b13      	ldr	r3, [pc, #76]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 800833a:	2200      	movs	r2, #0
 800833c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800833e:	4b12      	ldr	r3, [pc, #72]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 8008340:	2200      	movs	r2, #0
 8008342:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8008344:	4b10      	ldr	r3, [pc, #64]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 8008346:	2200      	movs	r2, #0
 8008348:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800834a:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 800834c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008350:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008352:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 8008354:	2200      	movs	r2, #0
 8008356:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8008358:	480b      	ldr	r0, [pc, #44]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 800835a:	f7f9 fb5d 	bl	8001a18 <HAL_DMA_Init>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8008364:	f000 f98c 	bl	8008680 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a07      	ldr	r2, [pc, #28]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
 800836e:	4a06      	ldr	r2, [pc, #24]	; (8008388 <HAL_I2C_MspInit+0xe4>)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008374:	bf00      	nop
 8008376:	3728      	adds	r7, #40	; 0x28
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40005800 	.word	0x40005800
 8008380:	40023800 	.word	0x40023800
 8008384:	40021400 	.word	0x40021400
 8008388:	20009274 	.word	0x20009274
 800838c:	400260b8 	.word	0x400260b8

08008390 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008390:	b480      	push	{r7}
 8008392:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008398:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <SCB_EnableICache+0x3c>)
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80083a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083a8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80083ac:	4b07      	ldr	r3, [pc, #28]	; (80083cc <SCB_EnableICache+0x3c>)
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	4a06      	ldr	r2, [pc, #24]	; (80083cc <SCB_EnableICache+0x3c>)
 80083b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80083b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80083c0:	bf00      	nop
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	e000ed00 	.word	0xe000ed00

080083d0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80083d6:	4b1d      	ldr	r3, [pc, #116]	; (800844c <SCB_EnableDCache+0x7c>)
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80083de:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80083e2:	4b1a      	ldr	r3, [pc, #104]	; (800844c <SCB_EnableDCache+0x7c>)
 80083e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	0b5b      	lsrs	r3, r3, #13
 80083ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80083f2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	08db      	lsrs	r3, r3, #3
 80083f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083fc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008406:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800840c:	490f      	ldr	r1, [pc, #60]	; (800844c <SCB_EnableDCache+0x7c>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	1e5a      	subs	r2, r3, #1
 8008418:	60ba      	str	r2, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1ef      	bne.n	80083fe <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1e5a      	subs	r2, r3, #1
 8008422:	60fa      	str	r2, [r7, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e5      	bne.n	80083f4 <SCB_EnableDCache+0x24>
 8008428:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800842c:	4b07      	ldr	r3, [pc, #28]	; (800844c <SCB_EnableDCache+0x7c>)
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	4a06      	ldr	r2, [pc, #24]	; (800844c <SCB_EnableDCache+0x7c>)
 8008432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008436:	6153      	str	r3, [r2, #20]
 8008438:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800843c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	e000ed00 	.word	0xe000ed00

08008450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008454:	f7ff ff9c 	bl	8008390 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008458:	f7ff ffba 	bl	80083d0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800845c:	f7f8 fdaa 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008460:	f000 f840 	bl	80084e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008464:	f7ff fda2 	bl	8007fac <MX_GPIO_Init>
  MX_DMA_Init();
 8008468:	f7ff fcaa 	bl	8007dc0 <MX_DMA_Init>
  MX_ADC1_Init();
 800846c:	f7ff fadc 	bl	8007a28 <MX_ADC1_Init>
  MX_TIM1_Init();
 8008470:	f000 fe3c 	bl	80090ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8008474:	f000 ff0c 	bl	8009290 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008478:	f000 ffa2 	bl	80093c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800847c:	f001 f81c 	bl	80094b8 <MX_TIM4_Init>
  MX_TIM7_Init();
 8008480:	f001 f896 	bl	80095b0 <MX_TIM7_Init>
  MX_TIM8_Init();
 8008484:	f001 f8ca 	bl	800961c <MX_TIM8_Init>
  MX_TIM9_Init();
 8008488:	f001 f982 	bl	8009790 <MX_TIM9_Init>
  MX_TIM10_Init();
 800848c:	f001 f9ee 	bl	800986c <MX_TIM10_Init>
  MX_TIM11_Init();
 8008490:	f001 fa3a 	bl	8009908 <MX_TIM11_Init>
  MX_TIM12_Init();
 8008494:	f001 fa86 	bl	80099a4 <MX_TIM12_Init>
  MX_TIM13_Init();
 8008498:	f001 faf2 	bl	8009a80 <MX_TIM13_Init>
  MX_TIM14_Init();
 800849c:	f001 fb3e 	bl	8009b1c <MX_TIM14_Init>
  MX_I2C2_Init();
 80084a0:	f7ff fec0 	bl	8008224 <MX_I2C2_Init>
  MX_SPI1_Init();
 80084a4:	f000 f8f4 	bl	8008690 <MX_SPI1_Init>
  MX_SPI3_Init();
 80084a8:	f000 f930 	bl	800870c <MX_SPI3_Init>
  MX_SPI4_Init();
 80084ac:	f000 f96c 	bl	8008788 <MX_SPI4_Init>
  MX_SPI6_Init();
 80084b0:	f000 f9a8 	bl	8008804 <MX_SPI6_Init>
  MX_UART4_Init();
 80084b4:	f001 fe9e 	bl	800a1f4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80084b8:	f001 fecc 	bl	800a254 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80084bc:	f001 fefa 	bl	800a2b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 80084c0:	f005 f802 	bl	800d4c8 <my_UsartInit>

	/*******************************Analog init***************************/
	AnaBuiltInStart();
 80084c4:	f003 fcd8 	bl	800be78 <AnaBuiltInStart>

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 80084c8:	f002 fa5a 	bl	800a980 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 80084cc:	f004 f856 	bl	800c57c <PWMBuiltIn_init>

#if (PWMBOARDSPI_NUM>0)
	PWMBoardSPI_init();
 80084d0:	f003 fa6c 	bl	800b9ac <PWMBoardSPI_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 80084d4:	f005 fb9e 	bl	800dc14 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80084d8:	f7ff fd06 	bl	8007ee8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80084dc:	f7fe fa9d 	bl	8006a1a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80084e0:	e7fe      	b.n	80084e0 <main+0x90>
	...

080084e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b0b8      	sub	sp, #224	; 0xe0
 80084e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80084ee:	2234      	movs	r2, #52	; 0x34
 80084f0:	2100      	movs	r1, #0
 80084f2:	4618      	mov	r0, r3
 80084f4:	f005 fe35 	bl	800e162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	605a      	str	r2, [r3, #4]
 8008502:	609a      	str	r2, [r3, #8]
 8008504:	60da      	str	r2, [r3, #12]
 8008506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008508:	f107 0308 	add.w	r3, r7, #8
 800850c:	2290      	movs	r2, #144	; 0x90
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f005 fe26 	bl	800e162 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008516:	4b3c      	ldr	r3, [pc, #240]	; (8008608 <SystemClock_Config+0x124>)
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	4a3b      	ldr	r2, [pc, #236]	; (8008608 <SystemClock_Config+0x124>)
 800851c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008520:	6413      	str	r3, [r2, #64]	; 0x40
 8008522:	4b39      	ldr	r3, [pc, #228]	; (8008608 <SystemClock_Config+0x124>)
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800852e:	4b37      	ldr	r3, [pc, #220]	; (800860c <SystemClock_Config+0x128>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a36      	ldr	r2, [pc, #216]	; (800860c <SystemClock_Config+0x128>)
 8008534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	4b34      	ldr	r3, [pc, #208]	; (800860c <SystemClock_Config+0x128>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008546:	2302      	movs	r3, #2
 8008548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800854c:	2301      	movs	r3, #1
 800854e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008552:	2310      	movs	r3, #16
 8008554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008558:	2302      	movs	r3, #2
 800855a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800855e:	2300      	movs	r3, #0
 8008560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008564:	2308      	movs	r3, #8
 8008566:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800856a:	23d8      	movs	r3, #216	; 0xd8
 800856c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008570:	2302      	movs	r3, #2
 8008572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008576:	2302      	movs	r3, #2
 8008578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800857c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008580:	4618      	mov	r0, r3
 8008582:	f7fa f9a5 	bl	80028d0 <HAL_RCC_OscConfig>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800858c:	f000 f878 	bl	8008680 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008590:	f7fa f94e 	bl	8002830 <HAL_PWREx_EnableOverDrive>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800859a:	f000 f871 	bl	8008680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800859e:	230f      	movs	r3, #15
 80085a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085a4:	2302      	movs	r3, #2
 80085a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80085c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80085c4:	2107      	movs	r1, #7
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fa fbf4 	bl	8002db4 <HAL_RCC_ClockConfig>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80085d2:	f000 f855 	bl	8008680 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80085d6:	f248 3340 	movw	r3, #33600	; 0x8340
 80085da:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80085dc:	2300      	movs	r3, #0
 80085de:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80085e0:	2300      	movs	r3, #0
 80085e2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80085e4:	2300      	movs	r3, #0
 80085e6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80085e8:	2300      	movs	r3, #0
 80085ea:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fa fddf 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80085fc:	f000 f840 	bl	8008680 <Error_Handler>
  }
}
 8008600:	bf00      	nop
 8008602:	37e0      	adds	r7, #224	; 0xe0
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	40023800 	.word	0x40023800
 800860c:	40007000 	.word	0x40007000

08008610 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8008618:	2301      	movs	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
#if (ADBOARD_NUM>0)
	ret=ADBoard_SPICallback(hspi);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f002 f8ab 	bl	800a778 <ADBoard_SPICallback>
 8008622:	60f8      	str	r0, [r7, #12]
#endif

}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 8008636:	2301      	movs	r3, #1
 8008638:	60fb      	str	r3, [r7, #12]
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(GPIO_Pin);
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	4618      	mov	r0, r3
 800863e:	f002 f85f 	bl	800a700 <ADBoard_BUSYCallback>
 8008642:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_GPIO_EXTI_Callback+0x26>
		interruptCallback(GPIO_Pin);
 800864a:	88fb      	ldrh	r3, [r7, #6]
 800864c:	4618      	mov	r0, r3
 800864e:	f003 faec 	bl	800bc2a <interruptCallback>
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a04      	ldr	r2, [pc, #16]	; (800867c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d101      	bne.n	8008672 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800866e:	f7f8 fcaf 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	40000c00 	.word	0x40000c00

08008680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008684:	bf00      	nop
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008694:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <MX_SPI1_Init+0x74>)
 8008696:	4a1c      	ldr	r2, [pc, #112]	; (8008708 <MX_SPI1_Init+0x78>)
 8008698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800869a:	4b1a      	ldr	r3, [pc, #104]	; (8008704 <MX_SPI1_Init+0x74>)
 800869c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80086a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80086a2:	4b18      	ldr	r3, [pc, #96]	; (8008704 <MX_SPI1_Init+0x74>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80086a8:	4b16      	ldr	r3, [pc, #88]	; (8008704 <MX_SPI1_Init+0x74>)
 80086aa:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80086ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80086b0:	4b14      	ldr	r3, [pc, #80]	; (8008704 <MX_SPI1_Init+0x74>)
 80086b2:	2202      	movs	r2, #2
 80086b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80086b6:	4b13      	ldr	r3, [pc, #76]	; (8008704 <MX_SPI1_Init+0x74>)
 80086b8:	2201      	movs	r2, #1
 80086ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80086bc:	4b11      	ldr	r3, [pc, #68]	; (8008704 <MX_SPI1_Init+0x74>)
 80086be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80086c4:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <MX_SPI1_Init+0x74>)
 80086c6:	2218      	movs	r2, #24
 80086c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <MX_SPI1_Init+0x74>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80086d0:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <MX_SPI1_Init+0x74>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <MX_SPI1_Init+0x74>)
 80086d8:	2200      	movs	r2, #0
 80086da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <MX_SPI1_Init+0x74>)
 80086de:	2207      	movs	r2, #7
 80086e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80086e2:	4b08      	ldr	r3, [pc, #32]	; (8008704 <MX_SPI1_Init+0x74>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80086e8:	4b06      	ldr	r3, [pc, #24]	; (8008704 <MX_SPI1_Init+0x74>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80086ee:	4805      	ldr	r0, [pc, #20]	; (8008704 <MX_SPI1_Init+0x74>)
 80086f0:	f7fb f986 	bl	8003a00 <HAL_SPI_Init>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80086fa:	f7ff ffc1 	bl	8008680 <Error_Handler>
  }

}
 80086fe:	bf00      	nop
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20009520 	.word	0x20009520
 8008708:	40013000 	.word	0x40013000

0800870c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008710:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <MX_SPI3_Init+0x74>)
 8008712:	4a1c      	ldr	r2, [pc, #112]	; (8008784 <MX_SPI3_Init+0x78>)
 8008714:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008716:	4b1a      	ldr	r3, [pc, #104]	; (8008780 <MX_SPI3_Init+0x74>)
 8008718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800871c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800871e:	4b18      	ldr	r3, [pc, #96]	; (8008780 <MX_SPI3_Init+0x74>)
 8008720:	2200      	movs	r2, #0
 8008722:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8008724:	4b16      	ldr	r3, [pc, #88]	; (8008780 <MX_SPI3_Init+0x74>)
 8008726:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800872a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800872c:	4b14      	ldr	r3, [pc, #80]	; (8008780 <MX_SPI3_Init+0x74>)
 800872e:	2202      	movs	r2, #2
 8008730:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008732:	4b13      	ldr	r3, [pc, #76]	; (8008780 <MX_SPI3_Init+0x74>)
 8008734:	2201      	movs	r2, #1
 8008736:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008738:	4b11      	ldr	r3, [pc, #68]	; (8008780 <MX_SPI3_Init+0x74>)
 800873a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800873e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008740:	4b0f      	ldr	r3, [pc, #60]	; (8008780 <MX_SPI3_Init+0x74>)
 8008742:	2210      	movs	r2, #16
 8008744:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008746:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <MX_SPI3_Init+0x74>)
 8008748:	2200      	movs	r2, #0
 800874a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800874c:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <MX_SPI3_Init+0x74>)
 800874e:	2200      	movs	r2, #0
 8008750:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <MX_SPI3_Init+0x74>)
 8008754:	2200      	movs	r2, #0
 8008756:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008758:	4b09      	ldr	r3, [pc, #36]	; (8008780 <MX_SPI3_Init+0x74>)
 800875a:	2207      	movs	r2, #7
 800875c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <MX_SPI3_Init+0x74>)
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008764:	4b06      	ldr	r3, [pc, #24]	; (8008780 <MX_SPI3_Init+0x74>)
 8008766:	2200      	movs	r2, #0
 8008768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800876a:	4805      	ldr	r0, [pc, #20]	; (8008780 <MX_SPI3_Init+0x74>)
 800876c:	f7fb f948 	bl	8003a00 <HAL_SPI_Init>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008776:	f7ff ff83 	bl	8008680 <Error_Handler>
  }

}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20009398 	.word	0x20009398
 8008784:	40003c00 	.word	0x40003c00

08008788 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 800878c:	4b1b      	ldr	r3, [pc, #108]	; (80087fc <MX_SPI4_Init+0x74>)
 800878e:	4a1c      	ldr	r2, [pc, #112]	; (8008800 <MX_SPI4_Init+0x78>)
 8008790:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008792:	4b1a      	ldr	r3, [pc, #104]	; (80087fc <MX_SPI4_Init+0x74>)
 8008794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008798:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800879a:	4b18      	ldr	r3, [pc, #96]	; (80087fc <MX_SPI4_Init+0x74>)
 800879c:	2200      	movs	r2, #0
 800879e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80087a0:	4b16      	ldr	r3, [pc, #88]	; (80087fc <MX_SPI4_Init+0x74>)
 80087a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80087a6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80087a8:	4b14      	ldr	r3, [pc, #80]	; (80087fc <MX_SPI4_Init+0x74>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <MX_SPI4_Init+0x74>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80087b4:	4b11      	ldr	r3, [pc, #68]	; (80087fc <MX_SPI4_Init+0x74>)
 80087b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ba:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80087bc:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <MX_SPI4_Init+0x74>)
 80087be:	2208      	movs	r2, #8
 80087c0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80087c2:	4b0e      	ldr	r3, [pc, #56]	; (80087fc <MX_SPI4_Init+0x74>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80087c8:	4b0c      	ldr	r3, [pc, #48]	; (80087fc <MX_SPI4_Init+0x74>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087ce:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <MX_SPI4_Init+0x74>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <MX_SPI4_Init+0x74>)
 80087d6:	2207      	movs	r2, #7
 80087d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80087da:	4b08      	ldr	r3, [pc, #32]	; (80087fc <MX_SPI4_Init+0x74>)
 80087dc:	2200      	movs	r2, #0
 80087de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80087e0:	4b06      	ldr	r3, [pc, #24]	; (80087fc <MX_SPI4_Init+0x74>)
 80087e2:	2208      	movs	r2, #8
 80087e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80087e6:	4805      	ldr	r0, [pc, #20]	; (80087fc <MX_SPI4_Init+0x74>)
 80087e8:	f7fb f90a 	bl	8003a00 <HAL_SPI_Init>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80087f2:	f7ff ff45 	bl	8008680 <Error_Handler>
  }

}
 80087f6:	bf00      	nop
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	200094bc 	.word	0x200094bc
 8008800:	40013400 	.word	0x40013400

08008804 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8008808:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <MX_SPI6_Init+0x74>)
 800880a:	4a1c      	ldr	r2, [pc, #112]	; (800887c <MX_SPI6_Init+0x78>)
 800880c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800880e:	4b1a      	ldr	r3, [pc, #104]	; (8008878 <MX_SPI6_Init+0x74>)
 8008810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008814:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8008816:	4b18      	ldr	r3, [pc, #96]	; (8008878 <MX_SPI6_Init+0x74>)
 8008818:	2200      	movs	r2, #0
 800881a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 800881c:	4b16      	ldr	r3, [pc, #88]	; (8008878 <MX_SPI6_Init+0x74>)
 800881e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008822:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008824:	4b14      	ldr	r3, [pc, #80]	; (8008878 <MX_SPI6_Init+0x74>)
 8008826:	2200      	movs	r2, #0
 8008828:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800882a:	4b13      	ldr	r3, [pc, #76]	; (8008878 <MX_SPI6_Init+0x74>)
 800882c:	2200      	movs	r2, #0
 800882e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8008830:	4b11      	ldr	r3, [pc, #68]	; (8008878 <MX_SPI6_Init+0x74>)
 8008832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008836:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8008838:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <MX_SPI6_Init+0x74>)
 800883a:	2230      	movs	r2, #48	; 0x30
 800883c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800883e:	4b0e      	ldr	r3, [pc, #56]	; (8008878 <MX_SPI6_Init+0x74>)
 8008840:	2200      	movs	r2, #0
 8008842:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <MX_SPI6_Init+0x74>)
 8008846:	2200      	movs	r2, #0
 8008848:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800884a:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <MX_SPI6_Init+0x74>)
 800884c:	2200      	movs	r2, #0
 800884e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8008850:	4b09      	ldr	r3, [pc, #36]	; (8008878 <MX_SPI6_Init+0x74>)
 8008852:	2207      	movs	r2, #7
 8008854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008856:	4b08      	ldr	r3, [pc, #32]	; (8008878 <MX_SPI6_Init+0x74>)
 8008858:	2200      	movs	r2, #0
 800885a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <MX_SPI6_Init+0x74>)
 800885e:	2208      	movs	r2, #8
 8008860:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8008862:	4805      	ldr	r0, [pc, #20]	; (8008878 <MX_SPI6_Init+0x74>)
 8008864:	f7fb f8cc 	bl	8003a00 <HAL_SPI_Init>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 800886e:	f7ff ff07 	bl	8008680 <Error_Handler>
  }

}
 8008872:	bf00      	nop
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20009334 	.word	0x20009334
 800887c:	40015400 	.word	0x40015400

08008880 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b092      	sub	sp, #72	; 0x48
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008888:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	609a      	str	r2, [r3, #8]
 8008894:	60da      	str	r2, [r3, #12]
 8008896:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a59      	ldr	r2, [pc, #356]	; (8008a04 <HAL_SPI_MspInit+0x184>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	f040 80c0 	bne.w	8008a24 <HAL_SPI_MspInit+0x1a4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80088a4:	4b58      	ldr	r3, [pc, #352]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a8:	4a57      	ldr	r2, [pc, #348]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088ae:	6453      	str	r3, [r2, #68]	; 0x44
 80088b0:	4b55      	ldr	r3, [pc, #340]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088b8:	633b      	str	r3, [r7, #48]	; 0x30
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80088bc:	4b52      	ldr	r3, [pc, #328]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c0:	4a51      	ldr	r2, [pc, #324]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088c2:	f043 0308 	orr.w	r3, r3, #8
 80088c6:	6313      	str	r3, [r2, #48]	; 0x30
 80088c8:	4b4f      	ldr	r3, [pc, #316]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	f003 0308 	and.w	r3, r3, #8
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80088d4:	4b4c      	ldr	r3, [pc, #304]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d8:	4a4b      	ldr	r2, [pc, #300]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088de:	6313      	str	r3, [r2, #48]	; 0x30
 80088e0:	4b49      	ldr	r3, [pc, #292]	; (8008a08 <HAL_SPI_MspInit+0x188>)
 80088e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration    
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80088ec:	2380      	movs	r3, #128	; 0x80
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088f0:	2302      	movs	r3, #2
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088f8:	2303      	movs	r3, #3
 80088fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80088fc:	2305      	movs	r3, #5
 80088fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008900:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008904:	4619      	mov	r1, r3
 8008906:	4841      	ldr	r0, [pc, #260]	; (8008a0c <HAL_SPI_MspInit+0x18c>)
 8008908:	f7f9 fc8e 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800890c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008912:	2302      	movs	r3, #2
 8008914:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008916:	2300      	movs	r3, #0
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800891a:	2303      	movs	r3, #3
 800891c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800891e:	2305      	movs	r3, #5
 8008920:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008922:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008926:	4619      	mov	r1, r3
 8008928:	4839      	ldr	r0, [pc, #228]	; (8008a10 <HAL_SPI_MspInit+0x190>)
 800892a:	f7f9 fc7d 	bl	8002228 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800892e:	4b39      	ldr	r3, [pc, #228]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008930:	4a39      	ldr	r2, [pc, #228]	; (8008a18 <HAL_SPI_MspInit+0x198>)
 8008932:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8008934:	4b37      	ldr	r3, [pc, #220]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008936:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800893a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800893c:	4b35      	ldr	r3, [pc, #212]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 800893e:	2200      	movs	r2, #0
 8008940:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008942:	4b34      	ldr	r3, [pc, #208]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008944:	2200      	movs	r2, #0
 8008946:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008948:	4b32      	ldr	r3, [pc, #200]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 800894a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800894e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008950:	4b30      	ldr	r3, [pc, #192]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008956:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008958:	4b2e      	ldr	r3, [pc, #184]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 800895a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800895e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8008960:	4b2c      	ldr	r3, [pc, #176]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008962:	2200      	movs	r2, #0
 8008964:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008966:	4b2b      	ldr	r3, [pc, #172]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008968:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800896c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800896e:	4b29      	ldr	r3, [pc, #164]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008970:	2200      	movs	r2, #0
 8008972:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008974:	4827      	ldr	r0, [pc, #156]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008976:	f7f9 f84f 	bl	8001a18 <HAL_DMA_Init>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <HAL_SPI_MspInit+0x104>
    {
      Error_Handler();
 8008980:	f7ff fe7e 	bl	8008680 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a23      	ldr	r2, [pc, #140]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 8008988:	659a      	str	r2, [r3, #88]	; 0x58
 800898a:	4a22      	ldr	r2, [pc, #136]	; (8008a14 <HAL_SPI_MspInit+0x194>)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8008990:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 8008992:	4a23      	ldr	r2, [pc, #140]	; (8008a20 <HAL_SPI_MspInit+0x1a0>)
 8008994:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8008996:	4b21      	ldr	r3, [pc, #132]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 8008998:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800899c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800899e:	4b1f      	ldr	r3, [pc, #124]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089a0:	2240      	movs	r2, #64	; 0x40
 80089a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089a4:	4b1d      	ldr	r3, [pc, #116]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089aa:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80089b2:	4b1a      	ldr	r3, [pc, #104]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80089ba:	4b18      	ldr	r3, [pc, #96]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80089c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80089c2:	4b16      	ldr	r3, [pc, #88]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80089c8:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80089ce:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089d0:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80089d6:	4811      	ldr	r0, [pc, #68]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089d8:	f7f9 f81e 	bl	8001a18 <HAL_DMA_Init>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 80089e2:	f7ff fe4d 	bl	8008680 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a0c      	ldr	r2, [pc, #48]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089ea:	655a      	str	r2, [r3, #84]	; 0x54
 80089ec:	4a0b      	ldr	r2, [pc, #44]	; (8008a1c <HAL_SPI_MspInit+0x19c>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80089f2:	2200      	movs	r2, #0
 80089f4:	2105      	movs	r1, #5
 80089f6:	2023      	movs	r0, #35	; 0x23
 80089f8:	f7f8 ffe4 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80089fc:	2023      	movs	r0, #35	; 0x23
 80089fe:	f7f8 fffd 	bl	80019fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8008a02:	e19b      	b.n	8008d3c <HAL_SPI_MspInit+0x4bc>
 8008a04:	40013000 	.word	0x40013000
 8008a08:	40023800 	.word	0x40023800
 8008a0c:	40020c00 	.word	0x40020c00
 8008a10:	40021800 	.word	0x40021800
 8008a14:	20009584 	.word	0x20009584
 8008a18:	40026440 	.word	0x40026440
 8008a1c:	200095e4 	.word	0x200095e4
 8008a20:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a9b      	ldr	r2, [pc, #620]	; (8008c98 <HAL_SPI_MspInit+0x418>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	f040 80a6 	bne.w	8008b7c <HAL_SPI_MspInit+0x2fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008a30:	4b9a      	ldr	r3, [pc, #616]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	4a99      	ldr	r2, [pc, #612]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8008a3c:	4b97      	ldr	r3, [pc, #604]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a48:	4b94      	ldr	r3, [pc, #592]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	4a93      	ldr	r2, [pc, #588]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a4e:	f043 0302 	orr.w	r3, r3, #2
 8008a52:	6313      	str	r3, [r2, #48]	; 0x30
 8008a54:	4b91      	ldr	r3, [pc, #580]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	623b      	str	r3, [r7, #32]
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a60:	4b8e      	ldr	r3, [pc, #568]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a64:	4a8d      	ldr	r2, [pc, #564]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a66:	f043 0304 	orr.w	r3, r3, #4
 8008a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a6c:	4b8b      	ldr	r3, [pc, #556]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	f003 0304 	and.w	r3, r3, #4
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008a78:	2304      	movs	r3, #4
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a84:	2303      	movs	r3, #3
 8008a86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008a88:	2307      	movs	r3, #7
 8008a8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a90:	4619      	mov	r1, r3
 8008a92:	4883      	ldr	r0, [pc, #524]	; (8008ca0 <HAL_SPI_MspInit+0x420>)
 8008a94:	f7f9 fbc8 	bl	8002228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008a98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008aaa:	2306      	movs	r3, #6
 8008aac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	487b      	ldr	r0, [pc, #492]	; (8008ca4 <HAL_SPI_MspInit+0x424>)
 8008ab6:	f7f9 fbb7 	bl	8002228 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8008aba:	4b7b      	ldr	r3, [pc, #492]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008abc:	4a7b      	ldr	r2, [pc, #492]	; (8008cac <HAL_SPI_MspInit+0x42c>)
 8008abe:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8008ac0:	4b79      	ldr	r3, [pc, #484]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ac6:	4b78      	ldr	r3, [pc, #480]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008acc:	4b76      	ldr	r3, [pc, #472]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008ad2:	4b75      	ldr	r3, [pc, #468]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ad8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008ada:	4b73      	ldr	r3, [pc, #460]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ae0:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008ae2:	4b71      	ldr	r3, [pc, #452]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008ae4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ae8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8008aea:	4b6f      	ldr	r3, [pc, #444]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008af0:	4b6d      	ldr	r3, [pc, #436]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008af6:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008af8:	4b6b      	ldr	r3, [pc, #428]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8008afe:	486a      	ldr	r0, [pc, #424]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008b00:	f7f8 ff8a 	bl	8001a18 <HAL_DMA_Init>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <HAL_SPI_MspInit+0x28e>
      Error_Handler();
 8008b0a:	f7ff fdb9 	bl	8008680 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a65      	ldr	r2, [pc, #404]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008b12:	659a      	str	r2, [r3, #88]	; 0x58
 8008b14:	4a64      	ldr	r2, [pc, #400]	; (8008ca8 <HAL_SPI_MspInit+0x428>)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8008b1a:	4b65      	ldr	r3, [pc, #404]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b1c:	4a65      	ldr	r2, [pc, #404]	; (8008cb4 <HAL_SPI_MspInit+0x434>)
 8008b1e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8008b20:	4b63      	ldr	r3, [pc, #396]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b26:	4b62      	ldr	r3, [pc, #392]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b28:	2240      	movs	r2, #64	; 0x40
 8008b2a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b2c:	4b60      	ldr	r3, [pc, #384]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008b32:	4b5f      	ldr	r3, [pc, #380]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b38:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008b3a:	4b5d      	ldr	r3, [pc, #372]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b40:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008b42:	4b5b      	ldr	r3, [pc, #364]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b48:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8008b4a:	4b59      	ldr	r3, [pc, #356]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008b50:	4b57      	ldr	r3, [pc, #348]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b56:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b58:	4b55      	ldr	r3, [pc, #340]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8008b5e:	4854      	ldr	r0, [pc, #336]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b60:	f7f8 ff5a 	bl	8001a18 <HAL_DMA_Init>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <HAL_SPI_MspInit+0x2ee>
      Error_Handler();
 8008b6a:	f7ff fd89 	bl	8008680 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a4f      	ldr	r2, [pc, #316]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b72:	655a      	str	r2, [r3, #84]	; 0x54
 8008b74:	4a4e      	ldr	r2, [pc, #312]	; (8008cb0 <HAL_SPI_MspInit+0x430>)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008b7a:	e0df      	b.n	8008d3c <HAL_SPI_MspInit+0x4bc>
  else if(spiHandle->Instance==SPI4)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a4d      	ldr	r2, [pc, #308]	; (8008cb8 <HAL_SPI_MspInit+0x438>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	f040 80a4 	bne.w	8008cd0 <HAL_SPI_MspInit+0x450>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008b88:	4b44      	ldr	r3, [pc, #272]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8c:	4a43      	ldr	r2, [pc, #268]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008b8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b92:	6453      	str	r3, [r2, #68]	; 0x44
 8008b94:	4b41      	ldr	r3, [pc, #260]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b9c:	61bb      	str	r3, [r7, #24]
 8008b9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008ba0:	4b3e      	ldr	r3, [pc, #248]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	4a3d      	ldr	r2, [pc, #244]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008ba6:	f043 0310 	orr.w	r3, r3, #16
 8008baa:	6313      	str	r3, [r2, #48]	; 0x30
 8008bac:	4b3b      	ldr	r3, [pc, #236]	; (8008c9c <HAL_SPI_MspInit+0x41c>)
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	f003 0310 	and.w	r3, r3, #16
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 8008bb8:	f246 0304 	movw	r3, #24580	; 0x6004
 8008bbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008bca:	2305      	movs	r3, #5
 8008bcc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008bce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4839      	ldr	r0, [pc, #228]	; (8008cbc <HAL_SPI_MspInit+0x43c>)
 8008bd6:	f7f9 fb27 	bl	8002228 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8008bda:	4b39      	ldr	r3, [pc, #228]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008bdc:	4a39      	ldr	r2, [pc, #228]	; (8008cc4 <HAL_SPI_MspInit+0x444>)
 8008bde:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8008be0:	4b37      	ldr	r3, [pc, #220]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008be2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008be6:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008be8:	4b35      	ldr	r3, [pc, #212]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008bee:	4b34      	ldr	r3, [pc, #208]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008bf4:	4b32      	ldr	r3, [pc, #200]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bfa:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008bfc:	4b30      	ldr	r3, [pc, #192]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c02:	4b2f      	ldr	r3, [pc, #188]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8008c08:	4b2d      	ldr	r3, [pc, #180]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008c0e:	4b2c      	ldr	r3, [pc, #176]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008c10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008c14:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008c16:	4b2a      	ldr	r3, [pc, #168]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8008c1c:	4828      	ldr	r0, [pc, #160]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008c1e:	f7f8 fefb 	bl	8001a18 <HAL_DMA_Init>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <HAL_SPI_MspInit+0x3ac>
      Error_Handler();
 8008c28:	f7ff fd2a 	bl	8008680 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a24      	ldr	r2, [pc, #144]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008c30:	659a      	str	r2, [r3, #88]	; 0x58
 8008c32:	4a23      	ldr	r2, [pc, #140]	; (8008cc0 <HAL_SPI_MspInit+0x440>)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8008c38:	4b23      	ldr	r3, [pc, #140]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c3a:	4a24      	ldr	r2, [pc, #144]	; (8008ccc <HAL_SPI_MspInit+0x44c>)
 8008c3c:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8008c3e:	4b22      	ldr	r3, [pc, #136]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c44:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c46:	4b20      	ldr	r3, [pc, #128]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c48:	2240      	movs	r2, #64	; 0x40
 8008c4a:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c4c:	4b1e      	ldr	r3, [pc, #120]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008c52:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c58:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c60:	4b19      	ldr	r3, [pc, #100]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8008c66:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008c6c:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008c72:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008c74:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8008c7a:	4813      	ldr	r0, [pc, #76]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c7c:	f7f8 fecc 	bl	8001a18 <HAL_DMA_Init>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <HAL_SPI_MspInit+0x40a>
      Error_Handler();
 8008c86:	f7ff fcfb 	bl	8008680 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a0e      	ldr	r2, [pc, #56]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c8e:	655a      	str	r2, [r3, #84]	; 0x54
 8008c90:	4a0d      	ldr	r2, [pc, #52]	; (8008cc8 <HAL_SPI_MspInit+0x448>)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008c96:	e051      	b.n	8008d3c <HAL_SPI_MspInit+0x4bc>
 8008c98:	40003c00 	.word	0x40003c00
 8008c9c:	40023800 	.word	0x40023800
 8008ca0:	40020400 	.word	0x40020400
 8008ca4:	40020800 	.word	0x40020800
 8008ca8:	20009644 	.word	0x20009644
 8008cac:	40026010 	.word	0x40026010
 8008cb0:	200093fc 	.word	0x200093fc
 8008cb4:	40026088 	.word	0x40026088
 8008cb8:	40013400 	.word	0x40013400
 8008cbc:	40021000 	.word	0x40021000
 8008cc0:	200092d4 	.word	0x200092d4
 8008cc4:	40026410 	.word	0x40026410
 8008cc8:	2000945c 	.word	0x2000945c
 8008ccc:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a1b      	ldr	r2, [pc, #108]	; (8008d44 <HAL_SPI_MspInit+0x4c4>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d130      	bne.n	8008d3c <HAL_SPI_MspInit+0x4bc>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8008cda:	4b1b      	ldr	r3, [pc, #108]	; (8008d48 <HAL_SPI_MspInit+0x4c8>)
 8008cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cde:	4a1a      	ldr	r2, [pc, #104]	; (8008d48 <HAL_SPI_MspInit+0x4c8>)
 8008ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ce6:	4b18      	ldr	r3, [pc, #96]	; (8008d48 <HAL_SPI_MspInit+0x4c8>)
 8008ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <HAL_SPI_MspInit+0x4c8>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	4a14      	ldr	r2, [pc, #80]	; (8008d48 <HAL_SPI_MspInit+0x4c8>)
 8008cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <HAL_SPI_MspInit+0x4c8>)
 8008d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8008d0a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008d0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d10:	2302      	movs	r3, #2
 8008d12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8008d1c:	2305      	movs	r3, #5
 8008d1e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008d20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d24:	4619      	mov	r1, r3
 8008d26:	4809      	ldr	r0, [pc, #36]	; (8008d4c <HAL_SPI_MspInit+0x4cc>)
 8008d28:	f7f9 fa7e 	bl	8002228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2105      	movs	r1, #5
 8008d30:	2056      	movs	r0, #86	; 0x56
 8008d32:	f7f8 fe47 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8008d36:	2056      	movs	r0, #86	; 0x56
 8008d38:	f7f8 fe60 	bl	80019fc <HAL_NVIC_EnableIRQ>
}
 8008d3c:	bf00      	nop
 8008d3e:	3748      	adds	r7, #72	; 0x48
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40015400 	.word	0x40015400
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	40021800 	.word	0x40021800

08008d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <HAL_MspInit+0x4c>)
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	4a10      	ldr	r2, [pc, #64]	; (8008d9c <HAL_MspInit+0x4c>)
 8008d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d60:	6413      	str	r3, [r2, #64]	; 0x40
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <HAL_MspInit+0x4c>)
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d6a:	607b      	str	r3, [r7, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d6e:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <HAL_MspInit+0x4c>)
 8008d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d72:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <HAL_MspInit+0x4c>)
 8008d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d78:	6453      	str	r3, [r2, #68]	; 0x44
 8008d7a:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <HAL_MspInit+0x4c>)
 8008d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008d86:	2200      	movs	r2, #0
 8008d88:	210f      	movs	r1, #15
 8008d8a:	f06f 0001 	mvn.w	r0, #1
 8008d8e:	f7f8 fe19 	bl	80019c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	40023800 	.word	0x40023800

08008da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08c      	sub	sp, #48	; 0x30
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8008db0:	2200      	movs	r2, #0
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	2032      	movs	r0, #50	; 0x32
 8008db6:	f7f8 fe05 	bl	80019c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8008dba:	2032      	movs	r0, #50	; 0x32
 8008dbc:	f7f8 fe1e 	bl	80019fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8008dc0:	4b1f      	ldr	r3, [pc, #124]	; (8008e40 <HAL_InitTick+0xa0>)
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc4:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <HAL_InitTick+0xa0>)
 8008dc6:	f043 0308 	orr.w	r3, r3, #8
 8008dca:	6413      	str	r3, [r2, #64]	; 0x40
 8008dcc:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <HAL_InitTick+0xa0>)
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008dd8:	f107 0210 	add.w	r2, r7, #16
 8008ddc:	f107 0314 	add.w	r3, r7, #20
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fa f9b4 	bl	8003150 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008de8:	f7fa f98a 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8008dec:	4603      	mov	r3, r0
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	4a13      	ldr	r2, [pc, #76]	; (8008e44 <HAL_InitTick+0xa4>)
 8008df6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfa:	0c9b      	lsrs	r3, r3, #18
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8008e00:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <HAL_InitTick+0xa8>)
 8008e02:	4a12      	ldr	r2, [pc, #72]	; (8008e4c <HAL_InitTick+0xac>)
 8008e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8008e06:	4b10      	ldr	r3, [pc, #64]	; (8008e48 <HAL_InitTick+0xa8>)
 8008e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008e0c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8008e0e:	4a0e      	ldr	r2, [pc, #56]	; (8008e48 <HAL_InitTick+0xa8>)
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8008e14:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <HAL_InitTick+0xa8>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e1a:	4b0b      	ldr	r3, [pc, #44]	; (8008e48 <HAL_InitTick+0xa8>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8008e20:	4809      	ldr	r0, [pc, #36]	; (8008e48 <HAL_InitTick+0xa8>)
 8008e22:	f7fb fd99 	bl	8004958 <HAL_TIM_Base_Init>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8008e2c:	4806      	ldr	r0, [pc, #24]	; (8008e48 <HAL_InitTick+0xa8>)
 8008e2e:	f7fb fdbf 	bl	80049b0 <HAL_TIM_Base_Start_IT>
 8008e32:	4603      	mov	r3, r0
 8008e34:	e000      	b.n	8008e38 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3730      	adds	r7, #48	; 0x30
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	40023800 	.word	0x40023800
 8008e44:	431bde83 	.word	0x431bde83
 8008e48:	200096a4 	.word	0x200096a4
 8008e4c:	40000c00 	.word	0x40000c00

08008e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008e54:	bf00      	nop
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e62:	e7fe      	b.n	8008e62 <HardFault_Handler+0x4>

08008e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e68:	e7fe      	b.n	8008e68 <MemManage_Handler+0x4>

08008e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008e6e:	e7fe      	b.n	8008e6e <BusFault_Handler+0x4>

08008e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008e74:	e7fe      	b.n	8008e74 <UsageFault_Handler+0x4>

08008e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008e76:	b480      	push	{r7}
 8008e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008e7a:	bf00      	nop
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f7f9 fb91 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008e8e:	bf00      	nop
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8008e96:	2002      	movs	r0, #2
 8008e98:	f7f9 fb8a 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008e9c:	bf00      	nop
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008ea4:	2004      	movs	r0, #4
 8008ea6:	f7f9 fb83 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008eaa:	bf00      	nop
 8008eac:	bd80      	pop	{r7, pc}

08008eae <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8008eb2:	2008      	movs	r0, #8
 8008eb4:	f7f9 fb7c 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008eb8:	bf00      	nop
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008ec0:	2010      	movs	r0, #16
 8008ec2:	f7f9 fb75 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008ec6:	bf00      	nop
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8008ed0:	4802      	ldr	r0, [pc, #8]	; (8008edc <DMA1_Stream0_IRQHandler+0x10>)
 8008ed2:	f7f8 ff41 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008ed6:	bf00      	nop
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20009644 	.word	0x20009644

08008ee0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8008ee4:	4802      	ldr	r0, [pc, #8]	; (8008ef0 <DMA1_Stream1_IRQHandler+0x10>)
 8008ee6:	f7f8 ff37 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20009a44 	.word	0x20009a44

08008ef4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8008ef8:	4802      	ldr	r0, [pc, #8]	; (8008f04 <DMA1_Stream2_IRQHandler+0x10>)
 8008efa:	f7f8 ff2d 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8008efe:	bf00      	nop
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	200099e4 	.word	0x200099e4

08008f08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8008f0c:	4802      	ldr	r0, [pc, #8]	; (8008f18 <DMA1_Stream4_IRQHandler+0x10>)
 8008f0e:	f7f8 ff23 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008f12:	bf00      	nop
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20009b24 	.word	0x20009b24

08008f1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8008f20:	4802      	ldr	r0, [pc, #8]	; (8008f2c <DMA1_Stream5_IRQHandler+0x10>)
 8008f22:	f7f8 ff19 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008f26:	bf00      	nop
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	200093fc 	.word	0x200093fc

08008f30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008f34:	2020      	movs	r0, #32
 8008f36:	f7f9 fb3b 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8008f3a:	2040      	movs	r0, #64	; 0x40
 8008f3c:	f7f9 fb38 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008f40:	2080      	movs	r0, #128	; 0x80
 8008f42:	f7f9 fb35 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008f46:	bf00      	nop
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008f50:	4803      	ldr	r0, [pc, #12]	; (8008f60 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8008f52:	f7fb fe1f 	bl	8004b94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8008f56:	4803      	ldr	r0, [pc, #12]	; (8008f64 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8008f58:	f7fb fe1c 	bl	8004b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008f5c:	bf00      	nop
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20009864 	.word	0x20009864
 8008f64:	20009764 	.word	0x20009764

08008f68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008f6c:	4802      	ldr	r0, [pc, #8]	; (8008f78 <SPI1_IRQHandler+0x10>)
 8008f6e:	f7fb f979 	bl	8004264 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008f72:	bf00      	nop
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20009520 	.word	0x20009520

08008f7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	myUsart1IRQ();
 8008f80:	f004 fcb4 	bl	800d8ec <myUsart1IRQ>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008f84:	4806      	ldr	r0, [pc, #24]	; (8008fa0 <USART1_IRQHandler+0x24>)
 8008f86:	f7fc ff23 	bl	8005dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8008f8a:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <USART1_IRQHandler+0x24>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	4b03      	ldr	r3, [pc, #12]	; (8008fa0 <USART1_IRQHandler+0x24>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0220 	orr.w	r2, r2, #32
 8008f98:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8008f9a:	bf00      	nop
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20009b84 	.word	0x20009b84

08008fa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	HAL_UART_RxIdleCallback(&huart3);
 8008fa8:	4803      	ldr	r0, [pc, #12]	; (8008fb8 <USART3_IRQHandler+0x14>)
 8008faa:	f004 fb3f 	bl	800d62c <HAL_UART_RxIdleCallback>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008fae:	4802      	ldr	r0, [pc, #8]	; (8008fb8 <USART3_IRQHandler+0x14>)
 8008fb0:	f7fc ff0e 	bl	8005dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008fb4:	bf00      	nop
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20009aa4 	.word	0x20009aa4

08008fbc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8008fc0:	4802      	ldr	r0, [pc, #8]	; (8008fcc <DMA1_Stream7_IRQHandler+0x10>)
 8008fc2:	f7f8 fec9 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20009274 	.word	0x20009274

08008fd0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008fd4:	4802      	ldr	r0, [pc, #8]	; (8008fe0 <TIM5_IRQHandler+0x10>)
 8008fd6:	f7fb fddd 	bl	8004b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008fda:	bf00      	nop
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	200096a4 	.word	0x200096a4

08008fe4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	HAL_UART_RxIdleCallback(&huart4);
 8008fe8:	4803      	ldr	r0, [pc, #12]	; (8008ff8 <UART4_IRQHandler+0x14>)
 8008fea:	f004 fb1f 	bl	800d62c <HAL_UART_RxIdleCallback>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008fee:	4802      	ldr	r0, [pc, #8]	; (8008ff8 <UART4_IRQHandler+0x14>)
 8008ff0:	f7fc feee 	bl	8005dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8008ff4:	bf00      	nop
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	20009c04 	.word	0x20009c04

08008ffc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8009000:	4802      	ldr	r0, [pc, #8]	; (800900c <DMA2_Stream0_IRQHandler+0x10>)
 8009002:	f7f8 fea9 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009006:	bf00      	nop
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	200092d4 	.word	0x200092d4

08009010 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8009014:	4802      	ldr	r0, [pc, #8]	; (8009020 <DMA2_Stream1_IRQHandler+0x10>)
 8009016:	f7f8 fe9f 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800901a:	bf00      	nop
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	2000945c 	.word	0x2000945c

08009024 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8009028:	4802      	ldr	r0, [pc, #8]	; (8009034 <DMA2_Stream2_IRQHandler+0x10>)
 800902a:	f7f8 fe95 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800902e:	bf00      	nop
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20009584 	.word	0x20009584

08009038 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800903c:	4802      	ldr	r0, [pc, #8]	; (8009048 <DMA2_Stream3_IRQHandler+0x10>)
 800903e:	f7f8 fe8b 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8009042:	bf00      	nop
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	200095e4 	.word	0x200095e4

0800904c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009050:	4802      	ldr	r0, [pc, #8]	; (800905c <DMA2_Stream4_IRQHandler+0x10>)
 8009052:	f7f8 fe81 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8009056:	bf00      	nop
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20001118 	.word	0x20001118

08009060 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8009064:	4802      	ldr	r0, [pc, #8]	; (8009070 <SPI6_IRQHandler+0x10>)
 8009066:	f7fb f8fd 	bl	8004264 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 800906a:	bf00      	nop
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20009334 	.word	0x20009334

08009074 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8009078:	f7fd fcfb 	bl	8006a72 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800907c:	bf00      	nop
 800907e:	bd80      	pop	{r7, pc}

08009080 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009084:	4b15      	ldr	r3, [pc, #84]	; (80090dc <SystemInit+0x5c>)
 8009086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908a:	4a14      	ldr	r2, [pc, #80]	; (80090dc <SystemInit+0x5c>)
 800908c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009094:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <SystemInit+0x60>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a11      	ldr	r2, [pc, #68]	; (80090e0 <SystemInit+0x60>)
 800909a:	f043 0301 	orr.w	r3, r3, #1
 800909e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80090a0:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <SystemInit+0x60>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80090a6:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <SystemInit+0x60>)
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	490d      	ldr	r1, [pc, #52]	; (80090e0 <SystemInit+0x60>)
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <SystemInit+0x64>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80090b2:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <SystemInit+0x60>)
 80090b4:	4a0c      	ldr	r2, [pc, #48]	; (80090e8 <SystemInit+0x68>)
 80090b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80090b8:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <SystemInit+0x60>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a08      	ldr	r2, [pc, #32]	; (80090e0 <SystemInit+0x60>)
 80090be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80090c4:	4b06      	ldr	r3, [pc, #24]	; (80090e0 <SystemInit+0x60>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80090ca:	4b04      	ldr	r3, [pc, #16]	; (80090dc <SystemInit+0x5c>)
 80090cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80090d0:	609a      	str	r2, [r3, #8]
#endif
}
 80090d2:	bf00      	nop
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	e000ed00 	.word	0xe000ed00
 80090e0:	40023800 	.word	0x40023800
 80090e4:	fef6ffff 	.word	0xfef6ffff
 80090e8:	24003010 	.word	0x24003010

080090ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b09a      	sub	sp, #104	; 0x68
 80090f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80090f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	605a      	str	r2, [r3, #4]
 80090fc:	609a      	str	r2, [r3, #8]
 80090fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	605a      	str	r2, [r3, #4]
 800910a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800910c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	605a      	str	r2, [r3, #4]
 8009116:	609a      	str	r2, [r3, #8]
 8009118:	60da      	str	r2, [r3, #12]
 800911a:	611a      	str	r2, [r3, #16]
 800911c:	615a      	str	r2, [r3, #20]
 800911e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009120:	1d3b      	adds	r3, r7, #4
 8009122:	222c      	movs	r2, #44	; 0x2c
 8009124:	2100      	movs	r1, #0
 8009126:	4618      	mov	r0, r3
 8009128:	f005 f81b 	bl	800e162 <memset>

  htim1.Instance = TIM1;
 800912c:	4b56      	ldr	r3, [pc, #344]	; (8009288 <MX_TIM1_Init+0x19c>)
 800912e:	4a57      	ldr	r2, [pc, #348]	; (800928c <MX_TIM1_Init+0x1a0>)
 8009130:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8009132:	4b55      	ldr	r3, [pc, #340]	; (8009288 <MX_TIM1_Init+0x19c>)
 8009134:	f245 425f 	movw	r2, #21599	; 0x545f
 8009138:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800913a:	4b53      	ldr	r3, [pc, #332]	; (8009288 <MX_TIM1_Init+0x19c>)
 800913c:	2200      	movs	r2, #0
 800913e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8009140:	4b51      	ldr	r3, [pc, #324]	; (8009288 <MX_TIM1_Init+0x19c>)
 8009142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009146:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009148:	4b4f      	ldr	r3, [pc, #316]	; (8009288 <MX_TIM1_Init+0x19c>)
 800914a:	2200      	movs	r2, #0
 800914c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800914e:	4b4e      	ldr	r3, [pc, #312]	; (8009288 <MX_TIM1_Init+0x19c>)
 8009150:	2200      	movs	r2, #0
 8009152:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009154:	4b4c      	ldr	r3, [pc, #304]	; (8009288 <MX_TIM1_Init+0x19c>)
 8009156:	2200      	movs	r2, #0
 8009158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800915a:	484b      	ldr	r0, [pc, #300]	; (8009288 <MX_TIM1_Init+0x19c>)
 800915c:	f7fb fbfc 	bl	8004958 <HAL_TIM_Base_Init>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8009166:	f7ff fa8b 	bl	8008680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800916a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800916e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009170:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009174:	4619      	mov	r1, r3
 8009176:	4844      	ldr	r0, [pc, #272]	; (8009288 <MX_TIM1_Init+0x19c>)
 8009178:	f7fb ff44 	bl	8005004 <HAL_TIM_ConfigClockSource>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8009182:	f7ff fa7d 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009186:	4840      	ldr	r0, [pc, #256]	; (8009288 <MX_TIM1_Init+0x19c>)
 8009188:	f7fb fc3c 	bl	8004a04 <HAL_TIM_PWM_Init>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8009192:	f7ff fa75 	bl	8008680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009196:	2300      	movs	r3, #0
 8009198:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800919a:	2300      	movs	r3, #0
 800919c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800919e:	2300      	movs	r3, #0
 80091a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80091a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80091a6:	4619      	mov	r1, r3
 80091a8:	4837      	ldr	r0, [pc, #220]	; (8009288 <MX_TIM1_Init+0x19c>)
 80091aa:	f7fc fbcb 	bl	8005944 <HAL_TIMEx_MasterConfigSynchronization>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80091b4:	f7ff fa64 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80091b8:	2360      	movs	r3, #96	; 0x60
 80091ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80091c0:	2300      	movs	r3, #0
 80091c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80091cc:	2300      	movs	r3, #0
 80091ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80091d0:	2300      	movs	r3, #0
 80091d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80091d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091d8:	2200      	movs	r2, #0
 80091da:	4619      	mov	r1, r3
 80091dc:	482a      	ldr	r0, [pc, #168]	; (8009288 <MX_TIM1_Init+0x19c>)
 80091de:	f7fb fdf9 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80091e8:	f7ff fa4a 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80091ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091f0:	2204      	movs	r2, #4
 80091f2:	4619      	mov	r1, r3
 80091f4:	4824      	ldr	r0, [pc, #144]	; (8009288 <MX_TIM1_Init+0x19c>)
 80091f6:	f7fb fded 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8009200:	f7ff fa3e 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009208:	2208      	movs	r2, #8
 800920a:	4619      	mov	r1, r3
 800920c:	481e      	ldr	r0, [pc, #120]	; (8009288 <MX_TIM1_Init+0x19c>)
 800920e:	f7fb fde1 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8009218:	f7ff fa32 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800921c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009220:	220c      	movs	r2, #12
 8009222:	4619      	mov	r1, r3
 8009224:	4818      	ldr	r0, [pc, #96]	; (8009288 <MX_TIM1_Init+0x19c>)
 8009226:	f7fb fdd5 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8009230:	f7ff fa26 	bl	8008680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009234:	2300      	movs	r3, #0
 8009236:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009238:	2300      	movs	r3, #0
 800923a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800923c:	2300      	movs	r3, #0
 800923e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800924c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009252:	2300      	movs	r3, #0
 8009254:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009260:	2300      	movs	r3, #0
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009264:	1d3b      	adds	r3, r7, #4
 8009266:	4619      	mov	r1, r3
 8009268:	4807      	ldr	r0, [pc, #28]	; (8009288 <MX_TIM1_Init+0x19c>)
 800926a:	f7fc fbc7 	bl	80059fc <HAL_TIMEx_ConfigBreakDeadTime>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8009274:	f7ff fa04 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8009278:	4803      	ldr	r0, [pc, #12]	; (8009288 <MX_TIM1_Init+0x19c>)
 800927a:	f000 fdb1 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 800927e:	bf00      	nop
 8009280:	3768      	adds	r7, #104	; 0x68
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20009864 	.word	0x20009864
 800928c:	40010000 	.word	0x40010000

08009290 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b08e      	sub	sp, #56	; 0x38
 8009294:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	605a      	str	r2, [r3, #4]
 80092a0:	609a      	str	r2, [r3, #8]
 80092a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092a4:	f107 031c 	add.w	r3, r7, #28
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	605a      	str	r2, [r3, #4]
 80092ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80092b0:	463b      	mov	r3, r7
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	605a      	str	r2, [r3, #4]
 80092b8:	609a      	str	r2, [r3, #8]
 80092ba:	60da      	str	r2, [r3, #12]
 80092bc:	611a      	str	r2, [r3, #16]
 80092be:	615a      	str	r2, [r3, #20]
 80092c0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80092c2:	4b3e      	ldr	r3, [pc, #248]	; (80093bc <MX_TIM2_Init+0x12c>)
 80092c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80092c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80092ca:	4b3c      	ldr	r3, [pc, #240]	; (80093bc <MX_TIM2_Init+0x12c>)
 80092cc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80092d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092d2:	4b3a      	ldr	r3, [pc, #232]	; (80093bc <MX_TIM2_Init+0x12c>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80092d8:	4b38      	ldr	r3, [pc, #224]	; (80093bc <MX_TIM2_Init+0x12c>)
 80092da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80092de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092e0:	4b36      	ldr	r3, [pc, #216]	; (80093bc <MX_TIM2_Init+0x12c>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092e6:	4b35      	ldr	r3, [pc, #212]	; (80093bc <MX_TIM2_Init+0x12c>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80092ec:	4833      	ldr	r0, [pc, #204]	; (80093bc <MX_TIM2_Init+0x12c>)
 80092ee:	f7fb fb33 	bl	8004958 <HAL_TIM_Base_Init>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80092f8:	f7ff f9c2 	bl	8008680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80092fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009300:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009306:	4619      	mov	r1, r3
 8009308:	482c      	ldr	r0, [pc, #176]	; (80093bc <MX_TIM2_Init+0x12c>)
 800930a:	f7fb fe7b 	bl	8005004 <HAL_TIM_ConfigClockSource>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009314:	f7ff f9b4 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009318:	4828      	ldr	r0, [pc, #160]	; (80093bc <MX_TIM2_Init+0x12c>)
 800931a:	f7fb fb73 	bl	8004a04 <HAL_TIM_PWM_Init>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009324:	f7ff f9ac 	bl	8008680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009328:	2300      	movs	r3, #0
 800932a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800932c:	2300      	movs	r3, #0
 800932e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009330:	f107 031c 	add.w	r3, r7, #28
 8009334:	4619      	mov	r1, r3
 8009336:	4821      	ldr	r0, [pc, #132]	; (80093bc <MX_TIM2_Init+0x12c>)
 8009338:	f7fc fb04 	bl	8005944 <HAL_TIMEx_MasterConfigSynchronization>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8009342:	f7ff f99d 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009346:	2360      	movs	r3, #96	; 0x60
 8009348:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009352:	2300      	movs	r3, #0
 8009354:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009356:	463b      	mov	r3, r7
 8009358:	2200      	movs	r2, #0
 800935a:	4619      	mov	r1, r3
 800935c:	4817      	ldr	r0, [pc, #92]	; (80093bc <MX_TIM2_Init+0x12c>)
 800935e:	f7fb fd39 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009368:	f7ff f98a 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800936c:	463b      	mov	r3, r7
 800936e:	2204      	movs	r2, #4
 8009370:	4619      	mov	r1, r3
 8009372:	4812      	ldr	r0, [pc, #72]	; (80093bc <MX_TIM2_Init+0x12c>)
 8009374:	f7fb fd2e 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800937e:	f7ff f97f 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009382:	463b      	mov	r3, r7
 8009384:	2208      	movs	r2, #8
 8009386:	4619      	mov	r1, r3
 8009388:	480c      	ldr	r0, [pc, #48]	; (80093bc <MX_TIM2_Init+0x12c>)
 800938a:	f7fb fd23 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8009394:	f7ff f974 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009398:	463b      	mov	r3, r7
 800939a:	220c      	movs	r2, #12
 800939c:	4619      	mov	r1, r3
 800939e:	4807      	ldr	r0, [pc, #28]	; (80093bc <MX_TIM2_Init+0x12c>)
 80093a0:	f7fb fd18 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80093aa:	f7ff f969 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80093ae:	4803      	ldr	r0, [pc, #12]	; (80093bc <MX_TIM2_Init+0x12c>)
 80093b0:	f000 fd16 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 80093b4:	bf00      	nop
 80093b6:	3738      	adds	r7, #56	; 0x38
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	200098e4 	.word	0x200098e4

080093c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08a      	sub	sp, #40	; 0x28
 80093c4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093c6:	f107 031c 	add.w	r3, r7, #28
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	605a      	str	r2, [r3, #4]
 80093d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80093d2:	463b      	mov	r3, r7
 80093d4:	2200      	movs	r2, #0
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	605a      	str	r2, [r3, #4]
 80093da:	609a      	str	r2, [r3, #8]
 80093dc:	60da      	str	r2, [r3, #12]
 80093de:	611a      	str	r2, [r3, #16]
 80093e0:	615a      	str	r2, [r3, #20]
 80093e2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80093e4:	4b32      	ldr	r3, [pc, #200]	; (80094b0 <MX_TIM3_Init+0xf0>)
 80093e6:	4a33      	ldr	r2, [pc, #204]	; (80094b4 <MX_TIM3_Init+0xf4>)
 80093e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 80093ea:	4b31      	ldr	r3, [pc, #196]	; (80094b0 <MX_TIM3_Init+0xf0>)
 80093ec:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80093f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093f2:	4b2f      	ldr	r3, [pc, #188]	; (80094b0 <MX_TIM3_Init+0xf0>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80093f8:	4b2d      	ldr	r3, [pc, #180]	; (80094b0 <MX_TIM3_Init+0xf0>)
 80093fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80093fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009400:	4b2b      	ldr	r3, [pc, #172]	; (80094b0 <MX_TIM3_Init+0xf0>)
 8009402:	2200      	movs	r2, #0
 8009404:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009406:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <MX_TIM3_Init+0xf0>)
 8009408:	2200      	movs	r2, #0
 800940a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800940c:	4828      	ldr	r0, [pc, #160]	; (80094b0 <MX_TIM3_Init+0xf0>)
 800940e:	f7fb faf9 	bl	8004a04 <HAL_TIM_PWM_Init>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009418:	f7ff f932 	bl	8008680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800941c:	2300      	movs	r3, #0
 800941e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009420:	2300      	movs	r3, #0
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009424:	f107 031c 	add.w	r3, r7, #28
 8009428:	4619      	mov	r1, r3
 800942a:	4821      	ldr	r0, [pc, #132]	; (80094b0 <MX_TIM3_Init+0xf0>)
 800942c:	f7fc fa8a 	bl	8005944 <HAL_TIMEx_MasterConfigSynchronization>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009436:	f7ff f923 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800943a:	2360      	movs	r3, #96	; 0x60
 800943c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009442:	2300      	movs	r3, #0
 8009444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009446:	2300      	movs	r3, #0
 8009448:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800944a:	463b      	mov	r3, r7
 800944c:	2200      	movs	r2, #0
 800944e:	4619      	mov	r1, r3
 8009450:	4817      	ldr	r0, [pc, #92]	; (80094b0 <MX_TIM3_Init+0xf0>)
 8009452:	f7fb fcbf 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800945c:	f7ff f910 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009460:	463b      	mov	r3, r7
 8009462:	2204      	movs	r2, #4
 8009464:	4619      	mov	r1, r3
 8009466:	4812      	ldr	r0, [pc, #72]	; (80094b0 <MX_TIM3_Init+0xf0>)
 8009468:	f7fb fcb4 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8009472:	f7ff f905 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009476:	463b      	mov	r3, r7
 8009478:	2208      	movs	r2, #8
 800947a:	4619      	mov	r1, r3
 800947c:	480c      	ldr	r0, [pc, #48]	; (80094b0 <MX_TIM3_Init+0xf0>)
 800947e:	f7fb fca9 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009488:	f7ff f8fa 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800948c:	463b      	mov	r3, r7
 800948e:	220c      	movs	r2, #12
 8009490:	4619      	mov	r1, r3
 8009492:	4807      	ldr	r0, [pc, #28]	; (80094b0 <MX_TIM3_Init+0xf0>)
 8009494:	f7fb fc9e 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800949e:	f7ff f8ef 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80094a2:	4803      	ldr	r0, [pc, #12]	; (80094b0 <MX_TIM3_Init+0xf0>)
 80094a4:	f000 fc9c 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 80094a8:	bf00      	nop
 80094aa:	3728      	adds	r7, #40	; 0x28
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	200097a4 	.word	0x200097a4
 80094b4:	40000400 	.word	0x40000400

080094b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08a      	sub	sp, #40	; 0x28
 80094bc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094be:	f107 031c 	add.w	r3, r7, #28
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	605a      	str	r2, [r3, #4]
 80094c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094ca:	463b      	mov	r3, r7
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	605a      	str	r2, [r3, #4]
 80094d2:	609a      	str	r2, [r3, #8]
 80094d4:	60da      	str	r2, [r3, #12]
 80094d6:	611a      	str	r2, [r3, #16]
 80094d8:	615a      	str	r2, [r3, #20]
 80094da:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80094dc:	4b32      	ldr	r3, [pc, #200]	; (80095a8 <MX_TIM4_Init+0xf0>)
 80094de:	4a33      	ldr	r2, [pc, #204]	; (80095ac <MX_TIM4_Init+0xf4>)
 80094e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 80094e2:	4b31      	ldr	r3, [pc, #196]	; (80095a8 <MX_TIM4_Init+0xf0>)
 80094e4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80094e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094ea:	4b2f      	ldr	r3, [pc, #188]	; (80095a8 <MX_TIM4_Init+0xf0>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80094f0:	4b2d      	ldr	r3, [pc, #180]	; (80095a8 <MX_TIM4_Init+0xf0>)
 80094f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80094f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094f8:	4b2b      	ldr	r3, [pc, #172]	; (80095a8 <MX_TIM4_Init+0xf0>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094fe:	4b2a      	ldr	r3, [pc, #168]	; (80095a8 <MX_TIM4_Init+0xf0>)
 8009500:	2200      	movs	r2, #0
 8009502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009504:	4828      	ldr	r0, [pc, #160]	; (80095a8 <MX_TIM4_Init+0xf0>)
 8009506:	f7fb fa7d 	bl	8004a04 <HAL_TIM_PWM_Init>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009510:	f7ff f8b6 	bl	8008680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009514:	2300      	movs	r3, #0
 8009516:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009518:	2300      	movs	r3, #0
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800951c:	f107 031c 	add.w	r3, r7, #28
 8009520:	4619      	mov	r1, r3
 8009522:	4821      	ldr	r0, [pc, #132]	; (80095a8 <MX_TIM4_Init+0xf0>)
 8009524:	f7fc fa0e 	bl	8005944 <HAL_TIMEx_MasterConfigSynchronization>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800952e:	f7ff f8a7 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009532:	2360      	movs	r3, #96	; 0x60
 8009534:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800953a:	2300      	movs	r3, #0
 800953c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009542:	463b      	mov	r3, r7
 8009544:	2200      	movs	r2, #0
 8009546:	4619      	mov	r1, r3
 8009548:	4817      	ldr	r0, [pc, #92]	; (80095a8 <MX_TIM4_Init+0xf0>)
 800954a:	f7fb fc43 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8009554:	f7ff f894 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009558:	463b      	mov	r3, r7
 800955a:	2204      	movs	r2, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4812      	ldr	r0, [pc, #72]	; (80095a8 <MX_TIM4_Init+0xf0>)
 8009560:	f7fb fc38 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800956a:	f7ff f889 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800956e:	463b      	mov	r3, r7
 8009570:	2208      	movs	r2, #8
 8009572:	4619      	mov	r1, r3
 8009574:	480c      	ldr	r0, [pc, #48]	; (80095a8 <MX_TIM4_Init+0xf0>)
 8009576:	f7fb fc2d 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8009580:	f7ff f87e 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009584:	463b      	mov	r3, r7
 8009586:	220c      	movs	r2, #12
 8009588:	4619      	mov	r1, r3
 800958a:	4807      	ldr	r0, [pc, #28]	; (80095a8 <MX_TIM4_Init+0xf0>)
 800958c:	f7fb fc22 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009596:	f7ff f873 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800959a:	4803      	ldr	r0, [pc, #12]	; (80095a8 <MX_TIM4_Init+0xf0>)
 800959c:	f000 fc20 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 80095a0:	bf00      	nop
 80095a2:	3728      	adds	r7, #40	; 0x28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20009724 	.word	0x20009724
 80095ac:	40000800 	.word	0x40000800

080095b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095b6:	1d3b      	adds	r3, r7, #4
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	605a      	str	r2, [r3, #4]
 80095be:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 80095c0:	4b14      	ldr	r3, [pc, #80]	; (8009614 <MX_TIM7_Init+0x64>)
 80095c2:	4a15      	ldr	r2, [pc, #84]	; (8009618 <MX_TIM7_Init+0x68>)
 80095c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80095c6:	4b13      	ldr	r3, [pc, #76]	; (8009614 <MX_TIM7_Init+0x64>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095cc:	4b11      	ldr	r3, [pc, #68]	; (8009614 <MX_TIM7_Init+0x64>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80095d2:	4b10      	ldr	r3, [pc, #64]	; (8009614 <MX_TIM7_Init+0x64>)
 80095d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095da:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <MX_TIM7_Init+0x64>)
 80095dc:	2200      	movs	r2, #0
 80095de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80095e0:	480c      	ldr	r0, [pc, #48]	; (8009614 <MX_TIM7_Init+0x64>)
 80095e2:	f7fb f9b9 	bl	8004958 <HAL_TIM_Base_Init>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80095ec:	f7ff f848 	bl	8008680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095f0:	2300      	movs	r3, #0
 80095f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80095f8:	1d3b      	adds	r3, r7, #4
 80095fa:	4619      	mov	r1, r3
 80095fc:	4805      	ldr	r0, [pc, #20]	; (8009614 <MX_TIM7_Init+0x64>)
 80095fe:	f7fc f9a1 	bl	8005944 <HAL_TIMEx_MasterConfigSynchronization>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009608:	f7ff f83a 	bl	8008680 <Error_Handler>
  }

}
 800960c:	bf00      	nop
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	200099a4 	.word	0x200099a4
 8009618:	40001400 	.word	0x40001400

0800961c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b09a      	sub	sp, #104	; 0x68
 8009620:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	605a      	str	r2, [r3, #4]
 800962c:	609a      	str	r2, [r3, #8]
 800962e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	605a      	str	r2, [r3, #4]
 800963a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800963c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	605a      	str	r2, [r3, #4]
 8009646:	609a      	str	r2, [r3, #8]
 8009648:	60da      	str	r2, [r3, #12]
 800964a:	611a      	str	r2, [r3, #16]
 800964c:	615a      	str	r2, [r3, #20]
 800964e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009650:	1d3b      	adds	r3, r7, #4
 8009652:	222c      	movs	r2, #44	; 0x2c
 8009654:	2100      	movs	r1, #0
 8009656:	4618      	mov	r0, r3
 8009658:	f004 fd83 	bl	800e162 <memset>

  htim8.Instance = TIM8;
 800965c:	4b4a      	ldr	r3, [pc, #296]	; (8009788 <MX_TIM8_Init+0x16c>)
 800965e:	4a4b      	ldr	r2, [pc, #300]	; (800978c <MX_TIM8_Init+0x170>)
 8009660:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8009662:	4b49      	ldr	r3, [pc, #292]	; (8009788 <MX_TIM8_Init+0x16c>)
 8009664:	f245 425f 	movw	r2, #21599	; 0x545f
 8009668:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800966a:	4b47      	ldr	r3, [pc, #284]	; (8009788 <MX_TIM8_Init+0x16c>)
 800966c:	2200      	movs	r2, #0
 800966e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8009670:	4b45      	ldr	r3, [pc, #276]	; (8009788 <MX_TIM8_Init+0x16c>)
 8009672:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009676:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009678:	4b43      	ldr	r3, [pc, #268]	; (8009788 <MX_TIM8_Init+0x16c>)
 800967a:	2200      	movs	r2, #0
 800967c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800967e:	4b42      	ldr	r3, [pc, #264]	; (8009788 <MX_TIM8_Init+0x16c>)
 8009680:	2200      	movs	r2, #0
 8009682:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009684:	4b40      	ldr	r3, [pc, #256]	; (8009788 <MX_TIM8_Init+0x16c>)
 8009686:	2200      	movs	r2, #0
 8009688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800968a:	483f      	ldr	r0, [pc, #252]	; (8009788 <MX_TIM8_Init+0x16c>)
 800968c:	f7fb f964 	bl	8004958 <HAL_TIM_Base_Init>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009696:	f7fe fff3 	bl	8008680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800969a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800969e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80096a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096a4:	4619      	mov	r1, r3
 80096a6:	4838      	ldr	r0, [pc, #224]	; (8009788 <MX_TIM8_Init+0x16c>)
 80096a8:	f7fb fcac 	bl	8005004 <HAL_TIM_ConfigClockSource>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80096b2:	f7fe ffe5 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80096b6:	4834      	ldr	r0, [pc, #208]	; (8009788 <MX_TIM8_Init+0x16c>)
 80096b8:	f7fb f9a4 	bl	8004a04 <HAL_TIM_PWM_Init>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80096c2:	f7fe ffdd 	bl	8008680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80096c6:	2300      	movs	r3, #0
 80096c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80096ca:	2300      	movs	r3, #0
 80096cc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80096d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80096d6:	4619      	mov	r1, r3
 80096d8:	482b      	ldr	r0, [pc, #172]	; (8009788 <MX_TIM8_Init+0x16c>)
 80096da:	f7fc f933 	bl	8005944 <HAL_TIMEx_MasterConfigSynchronization>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80096e4:	f7fe ffcc 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80096e8:	2360      	movs	r3, #96	; 0x60
 80096ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80096f0:	2300      	movs	r3, #0
 80096f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80096f4:	2300      	movs	r3, #0
 80096f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80096f8:	2300      	movs	r3, #0
 80096fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80096fc:	2300      	movs	r3, #0
 80096fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009700:	2300      	movs	r3, #0
 8009702:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009708:	2200      	movs	r2, #0
 800970a:	4619      	mov	r1, r3
 800970c:	481e      	ldr	r0, [pc, #120]	; (8009788 <MX_TIM8_Init+0x16c>)
 800970e:	f7fb fb61 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009718:	f7fe ffb2 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800971c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009720:	2204      	movs	r2, #4
 8009722:	4619      	mov	r1, r3
 8009724:	4818      	ldr	r0, [pc, #96]	; (8009788 <MX_TIM8_Init+0x16c>)
 8009726:	f7fb fb55 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009730:	f7fe ffa6 	bl	8008680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009734:	2300      	movs	r3, #0
 8009736:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009738:	2300      	movs	r3, #0
 800973a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800973c:	2300      	movs	r3, #0
 800973e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009744:	2300      	movs	r3, #0
 8009746:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800974c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009752:	2300      	movs	r3, #0
 8009754:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800975a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009760:	2300      	movs	r3, #0
 8009762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009764:	1d3b      	adds	r3, r7, #4
 8009766:	4619      	mov	r1, r3
 8009768:	4807      	ldr	r0, [pc, #28]	; (8009788 <MX_TIM8_Init+0x16c>)
 800976a:	f7fc f947 	bl	80059fc <HAL_TIMEx_ConfigBreakDeadTime>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8009774:	f7fe ff84 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8009778:	4803      	ldr	r0, [pc, #12]	; (8009788 <MX_TIM8_Init+0x16c>)
 800977a:	f000 fb31 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 800977e:	bf00      	nop
 8009780:	3768      	adds	r7, #104	; 0x68
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	200096e4 	.word	0x200096e4
 800978c:	40010400 	.word	0x40010400

08009790 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08c      	sub	sp, #48	; 0x30
 8009794:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009796:	f107 0320 	add.w	r3, r7, #32
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	609a      	str	r2, [r3, #8]
 80097a2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80097a4:	1d3b      	adds	r3, r7, #4
 80097a6:	2200      	movs	r2, #0
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	605a      	str	r2, [r3, #4]
 80097ac:	609a      	str	r2, [r3, #8]
 80097ae:	60da      	str	r2, [r3, #12]
 80097b0:	611a      	str	r2, [r3, #16]
 80097b2:	615a      	str	r2, [r3, #20]
 80097b4:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 80097b6:	4b2b      	ldr	r3, [pc, #172]	; (8009864 <MX_TIM9_Init+0xd4>)
 80097b8:	4a2b      	ldr	r2, [pc, #172]	; (8009868 <MX_TIM9_Init+0xd8>)
 80097ba:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 80097bc:	4b29      	ldr	r3, [pc, #164]	; (8009864 <MX_TIM9_Init+0xd4>)
 80097be:	f245 425f 	movw	r2, #21599	; 0x545f
 80097c2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097c4:	4b27      	ldr	r3, [pc, #156]	; (8009864 <MX_TIM9_Init+0xd4>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 80097ca:	4b26      	ldr	r3, [pc, #152]	; (8009864 <MX_TIM9_Init+0xd4>)
 80097cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80097d0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097d2:	4b24      	ldr	r3, [pc, #144]	; (8009864 <MX_TIM9_Init+0xd4>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097d8:	4b22      	ldr	r3, [pc, #136]	; (8009864 <MX_TIM9_Init+0xd4>)
 80097da:	2200      	movs	r2, #0
 80097dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80097de:	4821      	ldr	r0, [pc, #132]	; (8009864 <MX_TIM9_Init+0xd4>)
 80097e0:	f7fb f8ba 	bl	8004958 <HAL_TIM_Base_Init>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 80097ea:	f7fe ff49 	bl	8008680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80097f4:	f107 0320 	add.w	r3, r7, #32
 80097f8:	4619      	mov	r1, r3
 80097fa:	481a      	ldr	r0, [pc, #104]	; (8009864 <MX_TIM9_Init+0xd4>)
 80097fc:	f7fb fc02 	bl	8005004 <HAL_TIM_ConfigClockSource>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8009806:	f7fe ff3b 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800980a:	4816      	ldr	r0, [pc, #88]	; (8009864 <MX_TIM9_Init+0xd4>)
 800980c:	f7fb f8fa 	bl	8004a04 <HAL_TIM_PWM_Init>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8009816:	f7fe ff33 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800981a:	2360      	movs	r3, #96	; 0x60
 800981c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009826:	2300      	movs	r3, #0
 8009828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	2200      	movs	r2, #0
 800982e:	4619      	mov	r1, r3
 8009830:	480c      	ldr	r0, [pc, #48]	; (8009864 <MX_TIM9_Init+0xd4>)
 8009832:	f7fb facf 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800983c:	f7fe ff20 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009840:	1d3b      	adds	r3, r7, #4
 8009842:	2204      	movs	r2, #4
 8009844:	4619      	mov	r1, r3
 8009846:	4807      	ldr	r0, [pc, #28]	; (8009864 <MX_TIM9_Init+0xd4>)
 8009848:	f7fb fac4 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8009852:	f7fe ff15 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8009856:	4803      	ldr	r0, [pc, #12]	; (8009864 <MX_TIM9_Init+0xd4>)
 8009858:	f000 fac2 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 800985c:	bf00      	nop
 800985e:	3730      	adds	r7, #48	; 0x30
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	200098a4 	.word	0x200098a4
 8009868:	40014000 	.word	0x40014000

0800986c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009872:	1d3b      	adds	r3, r7, #4
 8009874:	2200      	movs	r2, #0
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	605a      	str	r2, [r3, #4]
 800987a:	609a      	str	r2, [r3, #8]
 800987c:	60da      	str	r2, [r3, #12]
 800987e:	611a      	str	r2, [r3, #16]
 8009880:	615a      	str	r2, [r3, #20]
 8009882:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8009884:	4b1e      	ldr	r3, [pc, #120]	; (8009900 <MX_TIM10_Init+0x94>)
 8009886:	4a1f      	ldr	r2, [pc, #124]	; (8009904 <MX_TIM10_Init+0x98>)
 8009888:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <MX_TIM10_Init+0x94>)
 800988c:	f245 425f 	movw	r2, #21599	; 0x545f
 8009890:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009892:	4b1b      	ldr	r3, [pc, #108]	; (8009900 <MX_TIM10_Init+0x94>)
 8009894:	2200      	movs	r2, #0
 8009896:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8009898:	4b19      	ldr	r3, [pc, #100]	; (8009900 <MX_TIM10_Init+0x94>)
 800989a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800989e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098a0:	4b17      	ldr	r3, [pc, #92]	; (8009900 <MX_TIM10_Init+0x94>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098a6:	4b16      	ldr	r3, [pc, #88]	; (8009900 <MX_TIM10_Init+0x94>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80098ac:	4814      	ldr	r0, [pc, #80]	; (8009900 <MX_TIM10_Init+0x94>)
 80098ae:	f7fb f853 	bl	8004958 <HAL_TIM_Base_Init>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80098b8:	f7fe fee2 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80098bc:	4810      	ldr	r0, [pc, #64]	; (8009900 <MX_TIM10_Init+0x94>)
 80098be:	f7fb f8a1 	bl	8004a04 <HAL_TIM_PWM_Init>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80098c8:	f7fe feda 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80098cc:	2360      	movs	r3, #96	; 0x60
 80098ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80098d8:	2300      	movs	r3, #0
 80098da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80098dc:	1d3b      	adds	r3, r7, #4
 80098de:	2200      	movs	r2, #0
 80098e0:	4619      	mov	r1, r3
 80098e2:	4807      	ldr	r0, [pc, #28]	; (8009900 <MX_TIM10_Init+0x94>)
 80098e4:	f7fb fa76 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80098ee:	f7fe fec7 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 80098f2:	4803      	ldr	r0, [pc, #12]	; (8009900 <MX_TIM10_Init+0x94>)
 80098f4:	f000 fa74 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 80098f8:	bf00      	nop
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20009764 	.word	0x20009764
 8009904:	40014400 	.word	0x40014400

08009908 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800990e:	1d3b      	adds	r3, r7, #4
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	605a      	str	r2, [r3, #4]
 8009916:	609a      	str	r2, [r3, #8]
 8009918:	60da      	str	r2, [r3, #12]
 800991a:	611a      	str	r2, [r3, #16]
 800991c:	615a      	str	r2, [r3, #20]
 800991e:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8009920:	4b1e      	ldr	r3, [pc, #120]	; (800999c <MX_TIM11_Init+0x94>)
 8009922:	4a1f      	ldr	r2, [pc, #124]	; (80099a0 <MX_TIM11_Init+0x98>)
 8009924:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 8009926:	4b1d      	ldr	r3, [pc, #116]	; (800999c <MX_TIM11_Init+0x94>)
 8009928:	f245 425f 	movw	r2, #21599	; 0x545f
 800992c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800992e:	4b1b      	ldr	r3, [pc, #108]	; (800999c <MX_TIM11_Init+0x94>)
 8009930:	2200      	movs	r2, #0
 8009932:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8009934:	4b19      	ldr	r3, [pc, #100]	; (800999c <MX_TIM11_Init+0x94>)
 8009936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800993a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800993c:	4b17      	ldr	r3, [pc, #92]	; (800999c <MX_TIM11_Init+0x94>)
 800993e:	2200      	movs	r2, #0
 8009940:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009942:	4b16      	ldr	r3, [pc, #88]	; (800999c <MX_TIM11_Init+0x94>)
 8009944:	2200      	movs	r2, #0
 8009946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009948:	4814      	ldr	r0, [pc, #80]	; (800999c <MX_TIM11_Init+0x94>)
 800994a:	f7fb f805 	bl	8004958 <HAL_TIM_Base_Init>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8009954:	f7fe fe94 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8009958:	4810      	ldr	r0, [pc, #64]	; (800999c <MX_TIM11_Init+0x94>)
 800995a:	f7fb f853 	bl	8004a04 <HAL_TIM_PWM_Init>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8009964:	f7fe fe8c 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009968:	2360      	movs	r3, #96	; 0x60
 800996a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009978:	1d3b      	adds	r3, r7, #4
 800997a:	2200      	movs	r2, #0
 800997c:	4619      	mov	r1, r3
 800997e:	4807      	ldr	r0, [pc, #28]	; (800999c <MX_TIM11_Init+0x94>)
 8009980:	f7fb fa28 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800998a:	f7fe fe79 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800998e:	4803      	ldr	r0, [pc, #12]	; (800999c <MX_TIM11_Init+0x94>)
 8009990:	f000 fa26 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 8009994:	bf00      	nop
 8009996:	3720      	adds	r7, #32
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20009824 	.word	0x20009824
 80099a0:	40014800 	.word	0x40014800

080099a4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08c      	sub	sp, #48	; 0x30
 80099a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099aa:	f107 0320 	add.w	r3, r7, #32
 80099ae:	2200      	movs	r2, #0
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	605a      	str	r2, [r3, #4]
 80099b4:	609a      	str	r2, [r3, #8]
 80099b6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099b8:	1d3b      	adds	r3, r7, #4
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	605a      	str	r2, [r3, #4]
 80099c0:	609a      	str	r2, [r3, #8]
 80099c2:	60da      	str	r2, [r3, #12]
 80099c4:	611a      	str	r2, [r3, #16]
 80099c6:	615a      	str	r2, [r3, #20]
 80099c8:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80099ca:	4b2b      	ldr	r3, [pc, #172]	; (8009a78 <MX_TIM12_Init+0xd4>)
 80099cc:	4a2b      	ldr	r2, [pc, #172]	; (8009a7c <MX_TIM12_Init+0xd8>)
 80099ce:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 10800-1;
 80099d0:	4b29      	ldr	r3, [pc, #164]	; (8009a78 <MX_TIM12_Init+0xd4>)
 80099d2:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80099d6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099d8:	4b27      	ldr	r3, [pc, #156]	; (8009a78 <MX_TIM12_Init+0xd4>)
 80099da:	2200      	movs	r2, #0
 80099dc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80099de:	4b26      	ldr	r3, [pc, #152]	; (8009a78 <MX_TIM12_Init+0xd4>)
 80099e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099e4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099e6:	4b24      	ldr	r3, [pc, #144]	; (8009a78 <MX_TIM12_Init+0xd4>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099ec:	4b22      	ldr	r3, [pc, #136]	; (8009a78 <MX_TIM12_Init+0xd4>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80099f2:	4821      	ldr	r0, [pc, #132]	; (8009a78 <MX_TIM12_Init+0xd4>)
 80099f4:	f7fa ffb0 	bl	8004958 <HAL_TIM_Base_Init>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 80099fe:	f7fe fe3f 	bl	8008680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a06:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8009a08:	f107 0320 	add.w	r3, r7, #32
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	481a      	ldr	r0, [pc, #104]	; (8009a78 <MX_TIM12_Init+0xd4>)
 8009a10:	f7fb faf8 	bl	8005004 <HAL_TIM_ConfigClockSource>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8009a1a:	f7fe fe31 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8009a1e:	4816      	ldr	r0, [pc, #88]	; (8009a78 <MX_TIM12_Init+0xd4>)
 8009a20:	f7fa fff0 	bl	8004a04 <HAL_TIM_PWM_Init>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8009a2a:	f7fe fe29 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a2e:	2360      	movs	r3, #96	; 0x60
 8009a30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a3e:	1d3b      	adds	r3, r7, #4
 8009a40:	2200      	movs	r2, #0
 8009a42:	4619      	mov	r1, r3
 8009a44:	480c      	ldr	r0, [pc, #48]	; (8009a78 <MX_TIM12_Init+0xd4>)
 8009a46:	f7fb f9c5 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8009a50:	f7fe fe16 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a54:	1d3b      	adds	r3, r7, #4
 8009a56:	2204      	movs	r2, #4
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4807      	ldr	r0, [pc, #28]	; (8009a78 <MX_TIM12_Init+0xd4>)
 8009a5c:	f7fb f9ba 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 8009a66:	f7fe fe0b 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8009a6a:	4803      	ldr	r0, [pc, #12]	; (8009a78 <MX_TIM12_Init+0xd4>)
 8009a6c:	f000 f9b8 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 8009a70:	bf00      	nop
 8009a72:	3730      	adds	r7, #48	; 0x30
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20009964 	.word	0x20009964
 8009a7c:	40001800 	.word	0x40001800

08009a80 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a86:	1d3b      	adds	r3, r7, #4
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	605a      	str	r2, [r3, #4]
 8009a8e:	609a      	str	r2, [r3, #8]
 8009a90:	60da      	str	r2, [r3, #12]
 8009a92:	611a      	str	r2, [r3, #16]
 8009a94:	615a      	str	r2, [r3, #20]
 8009a96:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 8009a98:	4b1e      	ldr	r3, [pc, #120]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009a9a:	4a1f      	ldr	r2, [pc, #124]	; (8009b18 <MX_TIM13_Init+0x98>)
 8009a9c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 10800-1;
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009aa0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009aa4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009aa6:	4b1b      	ldr	r3, [pc, #108]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8009aac:	4b19      	ldr	r3, [pc, #100]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ab2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ab4:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009aba:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8009ac0:	4814      	ldr	r0, [pc, #80]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009ac2:	f7fa ff49 	bl	8004958 <HAL_TIM_Base_Init>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8009acc:	f7fe fdd8 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8009ad0:	4810      	ldr	r0, [pc, #64]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009ad2:	f7fa ff97 	bl	8004a04 <HAL_TIM_PWM_Init>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8009adc:	f7fe fdd0 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ae0:	2360      	movs	r3, #96	; 0x60
 8009ae2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009af0:	1d3b      	adds	r3, r7, #4
 8009af2:	2200      	movs	r2, #0
 8009af4:	4619      	mov	r1, r3
 8009af6:	4807      	ldr	r0, [pc, #28]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009af8:	f7fb f96c 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8009b02:	f7fe fdbd 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 8009b06:	4803      	ldr	r0, [pc, #12]	; (8009b14 <MX_TIM13_Init+0x94>)
 8009b08:	f000 f96a 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 8009b0c:	bf00      	nop
 8009b0e:	3720      	adds	r7, #32
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	200097e4 	.word	0x200097e4
 8009b18:	40001c00 	.word	0x40001c00

08009b1c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009b22:	1d3b      	adds	r3, r7, #4
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	605a      	str	r2, [r3, #4]
 8009b2a:	609a      	str	r2, [r3, #8]
 8009b2c:	60da      	str	r2, [r3, #12]
 8009b2e:	611a      	str	r2, [r3, #16]
 8009b30:	615a      	str	r2, [r3, #20]
 8009b32:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8009b34:	4b1e      	ldr	r3, [pc, #120]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b36:	4a1f      	ldr	r2, [pc, #124]	; (8009bb4 <MX_TIM14_Init+0x98>)
 8009b38:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 8009b3a:	4b1d      	ldr	r3, [pc, #116]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b3c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009b40:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b42:	4b1b      	ldr	r3, [pc, #108]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8009b48:	4b19      	ldr	r3, [pc, #100]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b4e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b50:	4b17      	ldr	r3, [pc, #92]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b56:	4b16      	ldr	r3, [pc, #88]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009b5c:	4814      	ldr	r0, [pc, #80]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b5e:	f7fa fefb 	bl	8004958 <HAL_TIM_Base_Init>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8009b68:	f7fe fd8a 	bl	8008680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8009b6c:	4810      	ldr	r0, [pc, #64]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b6e:	f7fa ff49 	bl	8004a04 <HAL_TIM_PWM_Init>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8009b78:	f7fe fd82 	bl	8008680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b7c:	2360      	movs	r3, #96	; 0x60
 8009b7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b8c:	1d3b      	adds	r3, r7, #4
 8009b8e:	2200      	movs	r2, #0
 8009b90:	4619      	mov	r1, r3
 8009b92:	4807      	ldr	r0, [pc, #28]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009b94:	f7fb f91e 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8009b9e:	f7fe fd6f 	bl	8008680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8009ba2:	4803      	ldr	r0, [pc, #12]	; (8009bb0 <MX_TIM14_Init+0x94>)
 8009ba4:	f000 f91c 	bl	8009de0 <HAL_TIM_MspPostInit>

}
 8009ba8:	bf00      	nop
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20009924 	.word	0x20009924
 8009bb4:	40002000 	.word	0x40002000

08009bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08c      	sub	sp, #48	; 0x30
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a62      	ldr	r2, [pc, #392]	; (8009d50 <HAL_TIM_Base_MspInit+0x198>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d114      	bne.n	8009bf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009bca:	4b62      	ldr	r3, [pc, #392]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bce:	4a61      	ldr	r2, [pc, #388]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009bd0:	f043 0301 	orr.w	r3, r3, #1
 8009bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8009bd6:	4b5f      	ldr	r3, [pc, #380]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8009be2:	2200      	movs	r2, #0
 8009be4:	2105      	movs	r1, #5
 8009be6:	2019      	movs	r0, #25
 8009be8:	f7f7 feec 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009bec:	2019      	movs	r0, #25
 8009bee:	f7f7 ff05 	bl	80019fc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8009bf2:	e0a8      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM2)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bfc:	d10c      	bne.n	8009c18 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009bfe:	4b55      	ldr	r3, [pc, #340]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	4a54      	ldr	r2, [pc, #336]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c04:	f043 0301 	orr.w	r3, r3, #1
 8009c08:	6413      	str	r3, [r2, #64]	; 0x40
 8009c0a:	4b52      	ldr	r3, [pc, #328]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009c16:	e096      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM7)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a4e      	ldr	r2, [pc, #312]	; (8009d58 <HAL_TIM_Base_MspInit+0x1a0>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d10c      	bne.n	8009c3c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009c22:	4b4c      	ldr	r3, [pc, #304]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	4a4b      	ldr	r2, [pc, #300]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c28:	f043 0320 	orr.w	r3, r3, #32
 8009c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c2e:	4b49      	ldr	r3, [pc, #292]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c3a:	e084      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM8)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a46      	ldr	r2, [pc, #280]	; (8009d5c <HAL_TIM_Base_MspInit+0x1a4>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d10c      	bne.n	8009c60 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009c46:	4b43      	ldr	r3, [pc, #268]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4a:	4a42      	ldr	r2, [pc, #264]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c4c:	f043 0302 	orr.w	r3, r3, #2
 8009c50:	6453      	str	r3, [r2, #68]	; 0x44
 8009c52:	4b40      	ldr	r3, [pc, #256]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	623b      	str	r3, [r7, #32]
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
}
 8009c5e:	e072      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM9)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a3e      	ldr	r2, [pc, #248]	; (8009d60 <HAL_TIM_Base_MspInit+0x1a8>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d10c      	bne.n	8009c84 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009c6a:	4b3a      	ldr	r3, [pc, #232]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c6e:	4a39      	ldr	r2, [pc, #228]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c74:	6453      	str	r3, [r2, #68]	; 0x44
 8009c76:	4b37      	ldr	r3, [pc, #220]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c7e:	61fb      	str	r3, [r7, #28]
 8009c80:	69fb      	ldr	r3, [r7, #28]
}
 8009c82:	e060      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM10)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a36      	ldr	r2, [pc, #216]	; (8009d64 <HAL_TIM_Base_MspInit+0x1ac>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d114      	bne.n	8009cb8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009c8e:	4b31      	ldr	r3, [pc, #196]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c92:	4a30      	ldr	r2, [pc, #192]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c98:	6453      	str	r3, [r2, #68]	; 0x44
 8009c9a:	4b2e      	ldr	r3, [pc, #184]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ca2:	61bb      	str	r3, [r7, #24]
 8009ca4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2105      	movs	r1, #5
 8009caa:	2019      	movs	r0, #25
 8009cac:	f7f7 fe8a 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009cb0:	2019      	movs	r0, #25
 8009cb2:	f7f7 fea3 	bl	80019fc <HAL_NVIC_EnableIRQ>
}
 8009cb6:	e046      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM11)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a2a      	ldr	r2, [pc, #168]	; (8009d68 <HAL_TIM_Base_MspInit+0x1b0>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d10c      	bne.n	8009cdc <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009cc2:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc6:	4a23      	ldr	r2, [pc, #140]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8009cce:	4b21      	ldr	r3, [pc, #132]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cd6:	617b      	str	r3, [r7, #20]
 8009cd8:	697b      	ldr	r3, [r7, #20]
}
 8009cda:	e034      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM12)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a22      	ldr	r2, [pc, #136]	; (8009d6c <HAL_TIM_Base_MspInit+0x1b4>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d10c      	bne.n	8009d00 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8009ce6:	4b1b      	ldr	r3, [pc, #108]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	4a1a      	ldr	r2, [pc, #104]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8009cf2:	4b18      	ldr	r3, [pc, #96]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfa:	613b      	str	r3, [r7, #16]
 8009cfc:	693b      	ldr	r3, [r7, #16]
}
 8009cfe:	e022      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM13)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1a      	ldr	r2, [pc, #104]	; (8009d70 <HAL_TIM_Base_MspInit+0x1b8>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d10c      	bne.n	8009d24 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009d0a:	4b12      	ldr	r3, [pc, #72]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	4a11      	ldr	r2, [pc, #68]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d14:	6413      	str	r3, [r2, #64]	; 0x40
 8009d16:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	68fb      	ldr	r3, [r7, #12]
}
 8009d22:	e010      	b.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
  else if(tim_baseHandle->Instance==TIM14)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a12      	ldr	r2, [pc, #72]	; (8009d74 <HAL_TIM_Base_MspInit+0x1bc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d10b      	bne.n	8009d46 <HAL_TIM_Base_MspInit+0x18e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009d2e:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	4a08      	ldr	r2, [pc, #32]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d38:	6413      	str	r3, [r2, #64]	; 0x40
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <HAL_TIM_Base_MspInit+0x19c>)
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d42:	60bb      	str	r3, [r7, #8]
 8009d44:	68bb      	ldr	r3, [r7, #8]
}
 8009d46:	bf00      	nop
 8009d48:	3730      	adds	r7, #48	; 0x30
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40023800 	.word	0x40023800
 8009d58:	40001400 	.word	0x40001400
 8009d5c:	40010400 	.word	0x40010400
 8009d60:	40014000 	.word	0x40014000
 8009d64:	40014400 	.word	0x40014400
 8009d68:	40014800 	.word	0x40014800
 8009d6c:	40001800 	.word	0x40001800
 8009d70:	40001c00 	.word	0x40001c00
 8009d74:	40002000 	.word	0x40002000

08009d78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a13      	ldr	r2, [pc, #76]	; (8009dd4 <HAL_TIM_PWM_MspInit+0x5c>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d10c      	bne.n	8009da4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009d8a:	4b13      	ldr	r3, [pc, #76]	; (8009dd8 <HAL_TIM_PWM_MspInit+0x60>)
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	4a12      	ldr	r2, [pc, #72]	; (8009dd8 <HAL_TIM_PWM_MspInit+0x60>)
 8009d90:	f043 0302 	orr.w	r3, r3, #2
 8009d94:	6413      	str	r3, [r2, #64]	; 0x40
 8009d96:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <HAL_TIM_PWM_MspInit+0x60>)
 8009d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8009da2:	e010      	b.n	8009dc6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a0c      	ldr	r2, [pc, #48]	; (8009ddc <HAL_TIM_PWM_MspInit+0x64>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d10b      	bne.n	8009dc6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009dae:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <HAL_TIM_PWM_MspInit+0x60>)
 8009db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db2:	4a09      	ldr	r2, [pc, #36]	; (8009dd8 <HAL_TIM_PWM_MspInit+0x60>)
 8009db4:	f043 0304 	orr.w	r3, r3, #4
 8009db8:	6413      	str	r3, [r2, #64]	; 0x40
 8009dba:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <HAL_TIM_PWM_MspInit+0x60>)
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f003 0304 	and.w	r3, r3, #4
 8009dc2:	60bb      	str	r3, [r7, #8]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	40000400 	.word	0x40000400
 8009dd8:	40023800 	.word	0x40023800
 8009ddc:	40000800 	.word	0x40000800

08009de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b096      	sub	sp, #88	; 0x58
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009de8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	605a      	str	r2, [r3, #4]
 8009df2:	609a      	str	r2, [r3, #8]
 8009df4:	60da      	str	r2, [r3, #12]
 8009df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4aa2      	ldr	r2, [pc, #648]	; (800a088 <HAL_TIM_MspPostInit+0x2a8>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d13a      	bne.n	8009e78 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e02:	4ba2      	ldr	r3, [pc, #648]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e06:	4aa1      	ldr	r2, [pc, #644]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e08:	f043 0310 	orr.w	r3, r3, #16
 8009e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e0e:	4b9f      	ldr	r3, [pc, #636]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e12:	f003 0310 	and.w	r3, r3, #16
 8009e16:	643b      	str	r3, [r7, #64]	; 0x40
 8009e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e1a:	4b9c      	ldr	r3, [pc, #624]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	4a9b      	ldr	r2, [pc, #620]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e20:	f043 0301 	orr.w	r3, r3, #1
 8009e24:	6313      	str	r3, [r2, #48]	; 0x30
 8009e26:	4b99      	ldr	r3, [pc, #612]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 8009e32:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009e36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e38:	2302      	movs	r3, #2
 8009e3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e40:	2300      	movs	r3, #0
 8009e42:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009e44:	2301      	movs	r3, #1
 8009e46:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009e48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4890      	ldr	r0, [pc, #576]	; (800a090 <HAL_TIM_MspPostInit+0x2b0>)
 8009e50:	f7f8 f9ea 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin|PWM_3_Pin;
 8009e54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e62:	2300      	movs	r3, #0
 8009e64:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009e66:	2301      	movs	r3, #1
 8009e68:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4888      	ldr	r0, [pc, #544]	; (800a094 <HAL_TIM_MspPostInit+0x2b4>)
 8009e72:	f7f8 f9d9 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8009e76:	e1ab      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM2)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e80:	d13a      	bne.n	8009ef8 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e82:	4b82      	ldr	r3, [pc, #520]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e86:	4a81      	ldr	r2, [pc, #516]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e88:	f043 0302 	orr.w	r3, r3, #2
 8009e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e8e:	4b7f      	ldr	r3, [pc, #508]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e9a:	4b7c      	ldr	r3, [pc, #496]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9e:	4a7b      	ldr	r2, [pc, #492]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ea6:	4b79      	ldr	r3, [pc, #484]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	637b      	str	r3, [r7, #52]	; 0x34
 8009eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = PWM_6_Pin|PWM_7_Pin|PWM_5_Pin;
 8009eb2:	f640 4308 	movw	r3, #3080	; 0xc08
 8009eb6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ec8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4872      	ldr	r0, [pc, #456]	; (800a098 <HAL_TIM_MspPostInit+0x2b8>)
 8009ed0:	f7f8 f9aa 	bl	8002228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_4_Pin;
 8009ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ed8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eda:	2302      	movs	r3, #2
 8009edc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_4_GPIO_Port, &GPIO_InitStruct);
 8009eea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4868      	ldr	r0, [pc, #416]	; (800a094 <HAL_TIM_MspPostInit+0x2b4>)
 8009ef2:	f7f8 f999 	bl	8002228 <HAL_GPIO_Init>
}
 8009ef6:	e16b      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM3)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a67      	ldr	r2, [pc, #412]	; (800a09c <HAL_TIM_MspPostInit+0x2bc>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d139      	bne.n	8009f76 <HAL_TIM_MspPostInit+0x196>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f02:	4b62      	ldr	r3, [pc, #392]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	4a61      	ldr	r2, [pc, #388]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f08:	f043 0304 	orr.w	r3, r3, #4
 8009f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f0e:	4b5f      	ldr	r3, [pc, #380]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	f003 0304 	and.w	r3, r3, #4
 8009f16:	633b      	str	r3, [r7, #48]	; 0x30
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f1a:	4b5c      	ldr	r3, [pc, #368]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1e:	4a5b      	ldr	r2, [pc, #364]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f20:	f043 0302 	orr.w	r3, r3, #2
 8009f24:	6313      	str	r3, [r2, #48]	; 0x30
 8009f26:	4b59      	ldr	r3, [pc, #356]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = PWM_10_Pin|PWM_11_Pin;
 8009f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009f36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f38:	2302      	movs	r3, #2
 8009f3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f40:	2300      	movs	r3, #0
 8009f42:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009f44:	2302      	movs	r3, #2
 8009f46:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4854      	ldr	r0, [pc, #336]	; (800a0a0 <HAL_TIM_MspPostInit+0x2c0>)
 8009f50:	f7f8 f96a 	bl	8002228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_8_Pin|PWM_9_Pin;
 8009f54:	2330      	movs	r3, #48	; 0x30
 8009f56:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f58:	2302      	movs	r3, #2
 8009f5a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f60:	2300      	movs	r3, #0
 8009f62:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009f64:	2302      	movs	r3, #2
 8009f66:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	484a      	ldr	r0, [pc, #296]	; (800a098 <HAL_TIM_MspPostInit+0x2b8>)
 8009f70:	f7f8 f95a 	bl	8002228 <HAL_GPIO_Init>
}
 8009f74:	e12c      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM4)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a4a      	ldr	r2, [pc, #296]	; (800a0a4 <HAL_TIM_MspPostInit+0x2c4>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d11d      	bne.n	8009fbc <HAL_TIM_MspPostInit+0x1dc>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f80:	4b42      	ldr	r3, [pc, #264]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f84:	4a41      	ldr	r2, [pc, #260]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f86:	f043 0308 	orr.w	r3, r3, #8
 8009f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8009f8c:	4b3f      	ldr	r3, [pc, #252]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_12_Pin|PWM_13_Pin|PWM_14_Pin|PWM_15_Pin;
 8009f98:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009f9c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009faa:	2302      	movs	r3, #2
 8009fac:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	483c      	ldr	r0, [pc, #240]	; (800a0a8 <HAL_TIM_MspPostInit+0x2c8>)
 8009fb6:	f7f8 f937 	bl	8002228 <HAL_GPIO_Init>
}
 8009fba:	e109      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM8)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a3a      	ldr	r2, [pc, #232]	; (800a0ac <HAL_TIM_MspPostInit+0x2cc>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d11c      	bne.n	800a000 <HAL_TIM_MspPostInit+0x220>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fc6:	4b31      	ldr	r3, [pc, #196]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fca:	4a30      	ldr	r2, [pc, #192]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009fcc:	f043 0304 	orr.w	r3, r3, #4
 8009fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8009fd2:	4b2e      	ldr	r3, [pc, #184]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd6:	f003 0304 	and.w	r3, r3, #4
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = PWM_16_Pin|PWM_17_Pin;
 8009fde:	23c0      	movs	r3, #192	; 0xc0
 8009fe0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fea:	2300      	movs	r3, #0
 8009fec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ff2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4829      	ldr	r0, [pc, #164]	; (800a0a0 <HAL_TIM_MspPostInit+0x2c0>)
 8009ffa:	f7f8 f915 	bl	8002228 <HAL_GPIO_Init>
}
 8009ffe:	e0e7      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM9)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a2a      	ldr	r2, [pc, #168]	; (800a0b0 <HAL_TIM_MspPostInit+0x2d0>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d11c      	bne.n	800a044 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a00a:	4b20      	ldr	r3, [pc, #128]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	4a1f      	ldr	r2, [pc, #124]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 800a010:	f043 0310 	orr.w	r3, r3, #16
 800a014:	6313      	str	r3, [r2, #48]	; 0x30
 800a016:	4b1d      	ldr	r3, [pc, #116]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 800a018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01a:	f003 0310 	and.w	r3, r3, #16
 800a01e:	623b      	str	r3, [r7, #32]
 800a020:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_18_Pin|PWM_19_Pin;
 800a022:	2360      	movs	r3, #96	; 0x60
 800a024:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a026:	2302      	movs	r3, #2
 800a028:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a02e:	2300      	movs	r3, #0
 800a030:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a032:	2303      	movs	r3, #3
 800a034:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a036:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a03a:	4619      	mov	r1, r3
 800a03c:	4814      	ldr	r0, [pc, #80]	; (800a090 <HAL_TIM_MspPostInit+0x2b0>)
 800a03e:	f7f8 f8f3 	bl	8002228 <HAL_GPIO_Init>
}
 800a042:	e0c5      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM10)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a1a      	ldr	r2, [pc, #104]	; (800a0b4 <HAL_TIM_MspPostInit+0x2d4>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d136      	bne.n	800a0bc <HAL_TIM_MspPostInit+0x2dc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a04e:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 800a050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a052:	4a0e      	ldr	r2, [pc, #56]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 800a054:	f043 0320 	orr.w	r3, r3, #32
 800a058:	6313      	str	r3, [r2, #48]	; 0x30
 800a05a:	4b0c      	ldr	r3, [pc, #48]	; (800a08c <HAL_TIM_MspPostInit+0x2ac>)
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_20_Pin;
 800a066:	2340      	movs	r3, #64	; 0x40
 800a068:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a06a:	2302      	movs	r3, #2
 800a06c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a072:	2300      	movs	r3, #0
 800a074:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a076:	2303      	movs	r3, #3
 800a078:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_20_GPIO_Port, &GPIO_InitStruct);
 800a07a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a07e:	4619      	mov	r1, r3
 800a080:	480d      	ldr	r0, [pc, #52]	; (800a0b8 <HAL_TIM_MspPostInit+0x2d8>)
 800a082:	f7f8 f8d1 	bl	8002228 <HAL_GPIO_Init>
}
 800a086:	e0a3      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
 800a088:	40010000 	.word	0x40010000
 800a08c:	40023800 	.word	0x40023800
 800a090:	40021000 	.word	0x40021000
 800a094:	40020000 	.word	0x40020000
 800a098:	40020400 	.word	0x40020400
 800a09c:	40000400 	.word	0x40000400
 800a0a0:	40020800 	.word	0x40020800
 800a0a4:	40000800 	.word	0x40000800
 800a0a8:	40020c00 	.word	0x40020c00
 800a0ac:	40010400 	.word	0x40010400
 800a0b0:	40014000 	.word	0x40014000
 800a0b4:	40014400 	.word	0x40014400
 800a0b8:	40021400 	.word	0x40021400
  else if(timHandle->Instance==TIM11)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a45      	ldr	r2, [pc, #276]	; (800a1d8 <HAL_TIM_MspPostInit+0x3f8>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d11c      	bne.n	800a100 <HAL_TIM_MspPostInit+0x320>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a0c6:	4b45      	ldr	r3, [pc, #276]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	4a44      	ldr	r2, [pc, #272]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a0cc:	f043 0320 	orr.w	r3, r3, #32
 800a0d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a0d2:	4b42      	ldr	r3, [pc, #264]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d6:	f003 0320 	and.w	r3, r3, #32
 800a0da:	61bb      	str	r3, [r7, #24]
 800a0dc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_21_Pin;
 800a0de:	2380      	movs	r3, #128	; 0x80
 800a0e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_21_GPIO_Port, &GPIO_InitStruct);
 800a0f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4839      	ldr	r0, [pc, #228]	; (800a1e0 <HAL_TIM_MspPostInit+0x400>)
 800a0fa:	f7f8 f895 	bl	8002228 <HAL_GPIO_Init>
}
 800a0fe:	e067      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM12)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a37      	ldr	r2, [pc, #220]	; (800a1e4 <HAL_TIM_MspPostInit+0x404>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d11d      	bne.n	800a146 <HAL_TIM_MspPostInit+0x366>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a10a:	4b34      	ldr	r3, [pc, #208]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	4a33      	ldr	r2, [pc, #204]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a110:	f043 0302 	orr.w	r3, r3, #2
 800a114:	6313      	str	r3, [r2, #48]	; 0x30
 800a116:	4b31      	ldr	r3, [pc, #196]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_22_Pin|PWM_23_Pin;
 800a122:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a126:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a128:	2302      	movs	r3, #2
 800a12a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a12c:	2300      	movs	r3, #0
 800a12e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a130:	2300      	movs	r3, #0
 800a132:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800a134:	2309      	movs	r3, #9
 800a136:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a138:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a13c:	4619      	mov	r1, r3
 800a13e:	482a      	ldr	r0, [pc, #168]	; (800a1e8 <HAL_TIM_MspPostInit+0x408>)
 800a140:	f7f8 f872 	bl	8002228 <HAL_GPIO_Init>
}
 800a144:	e044      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM13)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a28      	ldr	r2, [pc, #160]	; (800a1ec <HAL_TIM_MspPostInit+0x40c>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d11d      	bne.n	800a18c <HAL_TIM_MspPostInit+0x3ac>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a150:	4b22      	ldr	r3, [pc, #136]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a154:	4a21      	ldr	r2, [pc, #132]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a156:	f043 0320 	orr.w	r3, r3, #32
 800a15a:	6313      	str	r3, [r2, #48]	; 0x30
 800a15c:	4b1f      	ldr	r3, [pc, #124]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a160:	f003 0320 	and.w	r3, r3, #32
 800a164:	613b      	str	r3, [r7, #16]
 800a166:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_24_Pin;
 800a168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a16c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a16e:	2302      	movs	r3, #2
 800a170:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a172:	2300      	movs	r3, #0
 800a174:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a176:	2300      	movs	r3, #0
 800a178:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800a17a:	2309      	movs	r3, #9
 800a17c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM_24_GPIO_Port, &GPIO_InitStruct);
 800a17e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a182:	4619      	mov	r1, r3
 800a184:	4816      	ldr	r0, [pc, #88]	; (800a1e0 <HAL_TIM_MspPostInit+0x400>)
 800a186:	f7f8 f84f 	bl	8002228 <HAL_GPIO_Init>
}
 800a18a:	e021      	b.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
  else if(timHandle->Instance==TIM14)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a17      	ldr	r2, [pc, #92]	; (800a1f0 <HAL_TIM_MspPostInit+0x410>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d11c      	bne.n	800a1d0 <HAL_TIM_MspPostInit+0x3f0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a196:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19a:	4a10      	ldr	r2, [pc, #64]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a19c:	f043 0320 	orr.w	r3, r3, #32
 800a1a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a1a2:	4b0e      	ldr	r3, [pc, #56]	; (800a1dc <HAL_TIM_MspPostInit+0x3fc>)
 800a1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a6:	f003 0320 	and.w	r3, r3, #32
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM25_Pin;
 800a1ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800a1c0:	2309      	movs	r3, #9
 800a1c2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(PWM25_GPIO_Port, &GPIO_InitStruct);
 800a1c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <HAL_TIM_MspPostInit+0x400>)
 800a1cc:	f7f8 f82c 	bl	8002228 <HAL_GPIO_Init>
}
 800a1d0:	bf00      	nop
 800a1d2:	3758      	adds	r7, #88	; 0x58
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	40014800 	.word	0x40014800
 800a1dc:	40023800 	.word	0x40023800
 800a1e0:	40021400 	.word	0x40021400
 800a1e4:	40001800 	.word	0x40001800
 800a1e8:	40020400 	.word	0x40020400
 800a1ec:	40001c00 	.word	0x40001c00
 800a1f0:	40002000 	.word	0x40002000

0800a1f4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800a1f8:	4b14      	ldr	r3, [pc, #80]	; (800a24c <MX_UART4_Init+0x58>)
 800a1fa:	4a15      	ldr	r2, [pc, #84]	; (800a250 <MX_UART4_Init+0x5c>)
 800a1fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <MX_UART4_Init+0x58>)
 800a200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a204:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a206:	4b11      	ldr	r3, [pc, #68]	; (800a24c <MX_UART4_Init+0x58>)
 800a208:	2200      	movs	r2, #0
 800a20a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a20c:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <MX_UART4_Init+0x58>)
 800a20e:	2200      	movs	r2, #0
 800a210:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a212:	4b0e      	ldr	r3, [pc, #56]	; (800a24c <MX_UART4_Init+0x58>)
 800a214:	2200      	movs	r2, #0
 800a216:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a218:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <MX_UART4_Init+0x58>)
 800a21a:	220c      	movs	r2, #12
 800a21c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a21e:	4b0b      	ldr	r3, [pc, #44]	; (800a24c <MX_UART4_Init+0x58>)
 800a220:	2200      	movs	r2, #0
 800a222:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a224:	4b09      	ldr	r3, [pc, #36]	; (800a24c <MX_UART4_Init+0x58>)
 800a226:	2200      	movs	r2, #0
 800a228:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a22a:	4b08      	ldr	r3, [pc, #32]	; (800a24c <MX_UART4_Init+0x58>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a230:	4b06      	ldr	r3, [pc, #24]	; (800a24c <MX_UART4_Init+0x58>)
 800a232:	2200      	movs	r2, #0
 800a234:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a236:	4805      	ldr	r0, [pc, #20]	; (800a24c <MX_UART4_Init+0x58>)
 800a238:	f7fb fc7c 	bl	8005b34 <HAL_UART_Init>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800a242:	f7fe fa1d 	bl	8008680 <Error_Handler>
  }

}
 800a246:	bf00      	nop
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20009c04 	.word	0x20009c04
 800a250:	40004c00 	.word	0x40004c00

0800a254 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a258:	4b14      	ldr	r3, [pc, #80]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a25a:	4a15      	ldr	r2, [pc, #84]	; (800a2b0 <MX_USART1_UART_Init+0x5c>)
 800a25c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a25e:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a266:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a268:	2200      	movs	r2, #0
 800a26a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a26e:	2200      	movs	r2, #0
 800a270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a272:	4b0e      	ldr	r3, [pc, #56]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a274:	2200      	movs	r2, #0
 800a276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a278:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a27a:	220c      	movs	r2, #12
 800a27c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a27e:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a280:	2200      	movs	r2, #0
 800a282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a284:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a286:	2200      	movs	r2, #0
 800a288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a28a:	4b08      	ldr	r3, [pc, #32]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a290:	4b06      	ldr	r3, [pc, #24]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a292:	2200      	movs	r2, #0
 800a294:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a296:	4805      	ldr	r0, [pc, #20]	; (800a2ac <MX_USART1_UART_Init+0x58>)
 800a298:	f7fb fc4c 	bl	8005b34 <HAL_UART_Init>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a2a2:	f7fe f9ed 	bl	8008680 <Error_Handler>
  }

}
 800a2a6:	bf00      	nop
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20009b84 	.word	0x20009b84
 800a2b0:	40011000 	.word	0x40011000

0800a2b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a2b8:	4b14      	ldr	r3, [pc, #80]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2ba:	4a15      	ldr	r2, [pc, #84]	; (800a310 <MX_USART3_UART_Init+0x5c>)
 800a2bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a2be:	4b13      	ldr	r3, [pc, #76]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2c0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a2c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a2c6:	4b11      	ldr	r3, [pc, #68]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a2cc:	4b0f      	ldr	r3, [pc, #60]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a2d2:	4b0e      	ldr	r3, [pc, #56]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a2d8:	4b0c      	ldr	r3, [pc, #48]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2da:	220c      	movs	r2, #12
 800a2dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2de:	4b0b      	ldr	r3, [pc, #44]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2e4:	4b09      	ldr	r3, [pc, #36]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a2ea:	4b08      	ldr	r3, [pc, #32]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a2f0:	4b06      	ldr	r3, [pc, #24]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a2f6:	4805      	ldr	r0, [pc, #20]	; (800a30c <MX_USART3_UART_Init+0x58>)
 800a2f8:	f7fb fc1c 	bl	8005b34 <HAL_UART_Init>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a302:	f7fe f9bd 	bl	8008680 <Error_Handler>
  }

}
 800a306:	bf00      	nop
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	20009aa4 	.word	0x20009aa4
 800a310:	40004800 	.word	0x40004800

0800a314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b090      	sub	sp, #64	; 0x40
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a31c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a320:	2200      	movs	r2, #0
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	605a      	str	r2, [r3, #4]
 800a326:	609a      	str	r2, [r3, #8]
 800a328:	60da      	str	r2, [r3, #12]
 800a32a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a68      	ldr	r2, [pc, #416]	; (800a4d4 <HAL_UART_MspInit+0x1c0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d17b      	bne.n	800a42e <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a336:	4b68      	ldr	r3, [pc, #416]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	4a67      	ldr	r2, [pc, #412]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a33c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a340:	6413      	str	r3, [r2, #64]	; 0x40
 800a342:	4b65      	ldr	r3, [pc, #404]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a34a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a34e:	4b62      	ldr	r3, [pc, #392]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a352:	4a61      	ldr	r2, [pc, #388]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a354:	f043 0301 	orr.w	r3, r3, #1
 800a358:	6313      	str	r3, [r2, #48]	; 0x30
 800a35a:	4b5f      	ldr	r3, [pc, #380]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	627b      	str	r3, [r7, #36]	; 0x24
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a366:	4b5c      	ldr	r3, [pc, #368]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	4a5b      	ldr	r2, [pc, #364]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a36c:	f043 0308 	orr.w	r3, r3, #8
 800a370:	6313      	str	r3, [r2, #48]	; 0x30
 800a372:	4b59      	ldr	r3, [pc, #356]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	f003 0308 	and.w	r3, r3, #8
 800a37a:	623b      	str	r3, [r7, #32]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration    
    PA12     ------> UART4_TX
    PD0     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a37e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a382:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a384:	2302      	movs	r3, #2
 800a386:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a38c:	2303      	movs	r3, #3
 800a38e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800a390:	2306      	movs	r3, #6
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a398:	4619      	mov	r1, r3
 800a39a:	4850      	ldr	r0, [pc, #320]	; (800a4dc <HAL_UART_MspInit+0x1c8>)
 800a39c:	f7f7 ff44 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a3b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4849      	ldr	r0, [pc, #292]	; (800a4e0 <HAL_UART_MspInit+0x1cc>)
 800a3bc:	f7f7 ff34 	bl	8002228 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800a3c0:	4b48      	ldr	r3, [pc, #288]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3c2:	4a49      	ldr	r2, [pc, #292]	; (800a4e8 <HAL_UART_MspInit+0x1d4>)
 800a3c4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800a3c6:	4b47      	ldr	r3, [pc, #284]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a3cc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a3ce:	4b45      	ldr	r3, [pc, #276]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a3d4:	4b43      	ldr	r3, [pc, #268]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a3da:	4b42      	ldr	r3, [pc, #264]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3e2:	4b40      	ldr	r3, [pc, #256]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3e8:	4b3e      	ldr	r3, [pc, #248]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800a3ee:	4b3d      	ldr	r3, [pc, #244]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a3f4:	4b3b      	ldr	r3, [pc, #236]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a3fa:	4b3a      	ldr	r3, [pc, #232]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800a400:	4838      	ldr	r0, [pc, #224]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a402:	f7f7 fb09 	bl	8001a18 <HAL_DMA_Init>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 800a40c:	f7fe f938 	bl	8008680 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a34      	ldr	r2, [pc, #208]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a414:	66da      	str	r2, [r3, #108]	; 0x6c
 800a416:	4a33      	ldr	r2, [pc, #204]	; (800a4e4 <HAL_UART_MspInit+0x1d0>)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a41c:	2200      	movs	r2, #0
 800a41e:	2105      	movs	r1, #5
 800a420:	2034      	movs	r0, #52	; 0x34
 800a422:	f7f7 facf 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a426:	2034      	movs	r0, #52	; 0x34
 800a428:	f7f7 fae8 	bl	80019fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a42c:	e0f7      	b.n	800a61e <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART1)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a2e      	ldr	r2, [pc, #184]	; (800a4ec <HAL_UART_MspInit+0x1d8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d15d      	bne.n	800a4f4 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a438:	4b27      	ldr	r3, [pc, #156]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43c:	4a26      	ldr	r2, [pc, #152]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a43e:	f043 0310 	orr.w	r3, r3, #16
 800a442:	6453      	str	r3, [r2, #68]	; 0x44
 800a444:	4b24      	ldr	r3, [pc, #144]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	61fb      	str	r3, [r7, #28]
 800a44e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a450:	4b21      	ldr	r3, [pc, #132]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a454:	4a20      	ldr	r2, [pc, #128]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a456:	f043 0301 	orr.w	r3, r3, #1
 800a45a:	6313      	str	r3, [r2, #48]	; 0x30
 800a45c:	4b1e      	ldr	r3, [pc, #120]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	61bb      	str	r3, [r7, #24]
 800a466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a468:	4b1b      	ldr	r3, [pc, #108]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	4a1a      	ldr	r2, [pc, #104]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a46e:	f043 0302 	orr.w	r3, r3, #2
 800a472:	6313      	str	r3, [r2, #48]	; 0x30
 800a474:	4b18      	ldr	r3, [pc, #96]	; (800a4d8 <HAL_UART_MspInit+0x1c4>)
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a480:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a486:	2302      	movs	r3, #2
 800a488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a48a:	2300      	movs	r3, #0
 800a48c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a48e:	2303      	movs	r3, #3
 800a490:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a492:	2307      	movs	r3, #7
 800a494:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a49a:	4619      	mov	r1, r3
 800a49c:	480f      	ldr	r0, [pc, #60]	; (800a4dc <HAL_UART_MspInit+0x1c8>)
 800a49e:	f7f7 fec3 	bl	8002228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a4a2:	2380      	movs	r3, #128	; 0x80
 800a4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a4b2:	2307      	movs	r3, #7
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	480c      	ldr	r0, [pc, #48]	; (800a4f0 <HAL_UART_MspInit+0x1dc>)
 800a4be:	f7f7 feb3 	bl	8002228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2105      	movs	r1, #5
 800a4c6:	2025      	movs	r0, #37	; 0x25
 800a4c8:	f7f7 fa7c 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a4cc:	2025      	movs	r0, #37	; 0x25
 800a4ce:	f7f7 fa95 	bl	80019fc <HAL_NVIC_EnableIRQ>
}
 800a4d2:	e0a4      	b.n	800a61e <HAL_UART_MspInit+0x30a>
 800a4d4:	40004c00 	.word	0x40004c00
 800a4d8:	40023800 	.word	0x40023800
 800a4dc:	40020000 	.word	0x40020000
 800a4e0:	40020c00 	.word	0x40020c00
 800a4e4:	200099e4 	.word	0x200099e4
 800a4e8:	40026040 	.word	0x40026040
 800a4ec:	40011000 	.word	0x40011000
 800a4f0:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART3)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a4b      	ldr	r2, [pc, #300]	; (800a628 <HAL_UART_MspInit+0x314>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	f040 808f 	bne.w	800a61e <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a500:	4b4a      	ldr	r3, [pc, #296]	; (800a62c <HAL_UART_MspInit+0x318>)
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	4a49      	ldr	r2, [pc, #292]	; (800a62c <HAL_UART_MspInit+0x318>)
 800a506:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a50a:	6413      	str	r3, [r2, #64]	; 0x40
 800a50c:	4b47      	ldr	r3, [pc, #284]	; (800a62c <HAL_UART_MspInit+0x318>)
 800a50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a514:	613b      	str	r3, [r7, #16]
 800a516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a518:	4b44      	ldr	r3, [pc, #272]	; (800a62c <HAL_UART_MspInit+0x318>)
 800a51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51c:	4a43      	ldr	r2, [pc, #268]	; (800a62c <HAL_UART_MspInit+0x318>)
 800a51e:	f043 0308 	orr.w	r3, r3, #8
 800a522:	6313      	str	r3, [r2, #48]	; 0x30
 800a524:	4b41      	ldr	r3, [pc, #260]	; (800a62c <HAL_UART_MspInit+0x318>)
 800a526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a528:	f003 0308 	and.w	r3, r3, #8
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a530:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a536:	2302      	movs	r3, #2
 800a538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a53e:	2303      	movs	r3, #3
 800a540:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a542:	2307      	movs	r3, #7
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a54a:	4619      	mov	r1, r3
 800a54c:	4838      	ldr	r0, [pc, #224]	; (800a630 <HAL_UART_MspInit+0x31c>)
 800a54e:	f7f7 fe6b 	bl	8002228 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a552:	4b38      	ldr	r3, [pc, #224]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a554:	4a38      	ldr	r2, [pc, #224]	; (800a638 <HAL_UART_MspInit+0x324>)
 800a556:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800a558:	4b36      	ldr	r3, [pc, #216]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a55a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a55e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a560:	4b34      	ldr	r3, [pc, #208]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a562:	2200      	movs	r2, #0
 800a564:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a566:	4b33      	ldr	r3, [pc, #204]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a568:	2200      	movs	r2, #0
 800a56a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a56c:	4b31      	ldr	r3, [pc, #196]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a56e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a572:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a574:	4b2f      	ldr	r3, [pc, #188]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a576:	2200      	movs	r2, #0
 800a578:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a57a:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800a580:	4b2c      	ldr	r3, [pc, #176]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a582:	2200      	movs	r2, #0
 800a584:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a586:	4b2b      	ldr	r3, [pc, #172]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a588:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a58c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a58e:	4b29      	ldr	r3, [pc, #164]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a590:	2200      	movs	r2, #0
 800a592:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a594:	4827      	ldr	r0, [pc, #156]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a596:	f7f7 fa3f 	bl	8001a18 <HAL_DMA_Init>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <HAL_UART_MspInit+0x290>
      Error_Handler();
 800a5a0:	f7fe f86e 	bl	8008680 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a23      	ldr	r2, [pc, #140]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a5a8:	66da      	str	r2, [r3, #108]	; 0x6c
 800a5aa:	4a22      	ldr	r2, [pc, #136]	; (800a634 <HAL_UART_MspInit+0x320>)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800a5b0:	4b22      	ldr	r3, [pc, #136]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5b2:	4a23      	ldr	r2, [pc, #140]	; (800a640 <HAL_UART_MspInit+0x32c>)
 800a5b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800a5b6:	4b21      	ldr	r3, [pc, #132]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5b8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800a5bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a5be:	4b1f      	ldr	r3, [pc, #124]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5c0:	2240      	movs	r2, #64	; 0x40
 800a5c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a5c4:	4b1d      	ldr	r3, [pc, #116]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a5ca:	4b1c      	ldr	r3, [pc, #112]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a5d2:	4b1a      	ldr	r3, [pc, #104]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a5d8:	4b18      	ldr	r3, [pc, #96]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800a5de:	4b17      	ldr	r3, [pc, #92]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a5e4:	4b15      	ldr	r3, [pc, #84]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a5ea:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a5ec:	4b13      	ldr	r3, [pc, #76]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800a5f2:	4812      	ldr	r0, [pc, #72]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a5f4:	f7f7 fa10 	bl	8001a18 <HAL_DMA_Init>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 800a5fe:	f7fe f83f 	bl	8008680 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a0d      	ldr	r2, [pc, #52]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a606:	669a      	str	r2, [r3, #104]	; 0x68
 800a608:	4a0c      	ldr	r2, [pc, #48]	; (800a63c <HAL_UART_MspInit+0x328>)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800a60e:	2200      	movs	r2, #0
 800a610:	2105      	movs	r1, #5
 800a612:	2027      	movs	r0, #39	; 0x27
 800a614:	f7f7 f9d6 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a618:	2027      	movs	r0, #39	; 0x27
 800a61a:	f7f7 f9ef 	bl	80019fc <HAL_NVIC_EnableIRQ>
}
 800a61e:	bf00      	nop
 800a620:	3740      	adds	r7, #64	; 0x40
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	40004800 	.word	0x40004800
 800a62c:	40023800 	.word	0x40023800
 800a630:	40020c00 	.word	0x40020c00
 800a634:	20009a44 	.word	0x20009a44
 800a638:	40026028 	.word	0x40026028
 800a63c:	20009b24 	.word	0x20009b24
 800a640:	40026070 	.word	0x40026070

0800a644 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
	ptADDevice->CS_Port->BSRR=(uint32_t)ptADDevice->CS_Pin<<16U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a652:	461a      	mov	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a658:	0412      	lsls	r2, r2, #16
 800a65a:	619a      	str	r2, [r3, #24]
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
	ptADDevice->CS_Port->BSRR=(uint32_t)ptADDevice->CS_Pin;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a67a:	619a      	str	r2, [r3, #24]
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
	ptADDevice->CONV_Port->BSRR=(uint32_t)ptADDevice->CONV_Pin<<16U;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800a696:	461a      	mov	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a69c:	0412      	lsls	r2, r2, #16
 800a69e:	619a      	str	r2, [r3, #24]
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	ptADDevice->CONV_Port->BSRR=(uint32_t)ptADDevice->CONV_Pin;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6be:	619a      	str	r2, [r3, #24]
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <AD7616_getVoltage>:

static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	AD_CONV_HIGH(ptADDev);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff ffe5 	bl	800a6ac <AD_CONV_HIGH>
	delay_ns(200);
 800a6e2:	20c8      	movs	r0, #200	; 0xc8
 800a6e4:	f001 fafc 	bl	800bce0 <delay_ns>
	AD_CONV_LOW(ptADDev);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff ffcd 	bl	800a688 <AD_CONV_LOW>
	ptADDev->ucDataFlag = 0;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t GPIO_Pin)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800a70a:	2301      	movs	r3, #1
 800a70c:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800a70e:	2300      	movs	r3, #0
 800a710:	613b      	str	r3, [r7, #16]
 800a712:	e024      	b.n	800a75e <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a714:	4b16      	ldr	r3, [pc, #88]	; (800a770 <ADBoard_BUSYCallback+0x70>)
 800a716:	6819      	ldr	r1, [r3, #0]
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	4613      	mov	r3, r2
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	4413      	add	r3, r2
 800a720:	011b      	lsls	r3, r3, #4
 800a722:	440b      	add	r3, r1
 800a724:	60fb      	str	r3, [r7, #12]
		if (GPIO_Pin == ptADDev->BUSY_Pin)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800a72c:	88fa      	ldrh	r2, [r7, #6]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d112      	bne.n	800a758 <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800a732:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <ADBoard_BUSYCallback+0x70>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	b292      	uxth	r2, r2
 800a73a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				AD_CS_LOW(ptADDev);
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f7ff ff80 	bl	800a644 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD7616_CHANNELNUM);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	2310      	movs	r3, #16
 800a74c:	4909      	ldr	r1, [pc, #36]	; (800a774 <ADBoard_BUSYCallback+0x74>)
 800a74e:	f7f9 fbfd 	bl	8003f4c <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800a752:	2300      	movs	r3, #0
 800a754:	617b      	str	r3, [r7, #20]
				break;
 800a756:	e005      	b.n	800a764 <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	3301      	adds	r3, #1
 800a75c:	613b      	str	r3, [r7, #16]
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	ddd7      	ble.n	800a714 <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800a764:	697b      	ldr	r3, [r7, #20]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	2000000c 	.word	0x2000000c
 800a774:	20000010 	.word	0x20000010

0800a778 <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
	int ret=1;
 800a780:	2301      	movs	r3, #1
 800a782:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800a784:	2300      	movs	r3, #0
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	e085      	b.n	800a896 <ADBoard_SPICallback+0x11e>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800a78a:	4b47      	ldr	r3, [pc, #284]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a78c:	6819      	ldr	r1, [r3, #0]
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	4613      	mov	r3, r2
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	4413      	add	r3, r2
 800a796:	011b      	lsls	r3, r3, #4
 800a798:	440b      	add	r3, r1
 800a79a:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d174      	bne.n	800a890 <ADBoard_SPICallback+0x118>
				{
					ptADBoardDevices->curADBoardNum=i;
 800a7a6:	4b40      	ldr	r3, [pc, #256]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	b292      	uxth	r2, r2
 800a7ae:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
					AD_CS_HIGH(ptADDev);
 800a7b2:	68b8      	ldr	r0, [r7, #8]
 800a7b4:	f7ff ff58 	bl	800a668 <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
					ptADDev->chosen = 0;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
					for(int j=0;j<AD7616_CHANNELNUM;j++)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	e01a      	b.n	800a804 <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7de:	eddf 6a33 	vldr	s13, [pc, #204]	; 800a8ac <ADBoard_SPICallback+0x134>
 800a7e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800a7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3308      	adds	r3, #8
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD7616_CHANNELNUM;j++)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3301      	adds	r3, #1
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b0f      	cmp	r3, #15
 800a808:	dde1      	ble.n	800a7ce <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800a80a:	4b27      	ldr	r3, [pc, #156]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a812:	3301      	adds	r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	dc19      	bgt.n	800a84c <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800a818:	4b23      	ldr	r3, [pc, #140]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 800a820:	4b21      	ldr	r3, [pc, #132]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3201      	adds	r2, #1
 800a826:	b292      	uxth	r2, r2
 800a828:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a82c:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	4b1d      	ldr	r3, [pc, #116]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a838:	4619      	mov	r1, r3
 800a83a:	460b      	mov	r3, r1
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	440b      	add	r3, r1
 800a840:	011b      	lsls	r3, r3, #4
 800a842:	4413      	add	r3, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff ff41 	bl	800a6cc <AD7616_getVoltage>
 800a84a:	e01e      	b.n	800a88a <ADBoard_SPICallback+0x112>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800a84c:	4b16      	ldr	r3, [pc, #88]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a854:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
						ptADBoardDevices->ucDataFlag = 1;
 800a858:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
						ptADBoardDevices->ADTimeEnd=micros();
 800a862:	f001 fa0d 	bl	800bc80 <micros>
 800a866:	4602      	mov	r2, r0
 800a868:	4b0f      	ldr	r3, [pc, #60]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800a870:	4b0d      	ldr	r3, [pc, #52]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800a878:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a880:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <ADBoard_SPICallback+0x130>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	1a8a      	subs	r2, r1, r2
 800a886:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
					}
					ret=0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	617b      	str	r3, [r7, #20]
					break;
 800a88e:	e006      	b.n	800a89e <ADBoard_SPICallback+0x126>
		for(int i=0;i<ADBOARD_NUM;i++)
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	3301      	adds	r3, #1
 800a894:	613b      	str	r3, [r7, #16]
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f77f af76 	ble.w	800a78a <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800a89e:	697b      	ldr	r3, [r7, #20]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	2000000c 	.word	0x2000000c
 800a8ac:	47800000 	.word	0x47800000

0800a8b0 <ADBoard_Reset>:

void ADBoard_Reset()
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
	AD_RESET_HIGH();
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <ADBoard_Reset+0x2c>)
 800a8b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a8ba:	619a      	str	r2, [r3, #24]
	delay_us(5);
 800a8bc:	2005      	movs	r0, #5
 800a8be:	f001 f9f5 	bl	800bcac <delay_us>
	AD_RESET_LOW();
 800a8c2:	4b06      	ldr	r3, [pc, #24]	; (800a8dc <ADBoard_Reset+0x2c>)
 800a8c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a8c8:	619a      	str	r2, [r3, #24]
	delay_us(5);
 800a8ca:	2005      	movs	r0, #5
 800a8cc:	f001 f9ee 	bl	800bcac <delay_us>
	AD_RESET_HIGH();
 800a8d0:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <ADBoard_Reset+0x2c>)
 800a8d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a8d6:	619a      	str	r2, [r3, #24]
}
 800a8d8:	bf00      	nop
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	40020400 	.word	0x40020400

0800a8e0 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800a8e4:	4b10      	ldr	r3, [pc, #64]	; (800a928 <ADBoard_updateVoltage+0x48>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	ptADBoardDevices->curADBoardNum = 0;
 800a8ee:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <ADBoard_updateVoltage+0x48>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	ptADBoardDevices->ADTimeStart=micros();
 800a8f8:	f001 f9c2 	bl	800bc80 <micros>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <ADBoard_updateVoltage+0x48>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800a906:	4b08      	ldr	r3, [pc, #32]	; (800a928 <ADBoard_updateVoltage+0x48>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	4b07      	ldr	r3, [pc, #28]	; (800a928 <ADBoard_updateVoltage+0x48>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a912:	4619      	mov	r1, r3
 800a914:	460b      	mov	r3, r1
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	440b      	add	r3, r1
 800a91a:	011b      	lsls	r3, r3, #4
 800a91c:	4413      	add	r3, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fed4 	bl	800a6cc <AD7616_getVoltage>
}
 800a924:	bf00      	nop
 800a926:	bd80      	pop	{r7, pc}
 800a928:	2000000c 	.word	0x2000000c

0800a92c <AnalogRead_External>:

float AnalogRead_External(uint16_t num) {
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	80fb      	strh	r3, [r7, #6]
	if (0<=num && num<EXTERNAL_ANA_IN_NUM)
 800a936:	88fb      	ldrh	r3, [r7, #6]
 800a938:	2b0f      	cmp	r3, #15
 800a93a:	d814      	bhi.n	800a966 <AnalogRead_External+0x3a>
	{
		uint16_t boardnum=num/AD7616_CHANNELNUM;
 800a93c:	88fb      	ldrh	r3, [r7, #6]
 800a93e:	091b      	lsrs	r3, r3, #4
 800a940:	81fb      	strh	r3, [r7, #14]
		uint16_t channelnum=num%AD7616_CHANNELNUM;
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	f003 030f 	and.w	r3, r3, #15
 800a948:	81bb      	strh	r3, [r7, #12]
		return ptADBoardDevices->ADBoards[boardnum].fChannel[channelnum];
 800a94a:	4b0c      	ldr	r3, [pc, #48]	; (800a97c <AnalogRead_External+0x50>)
 800a94c:	6819      	ldr	r1, [r3, #0]
 800a94e:	89fa      	ldrh	r2, [r7, #14]
 800a950:	89b8      	ldrh	r0, [r7, #12]
 800a952:	4613      	mov	r3, r2
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4403      	add	r3, r0
 800a95c:	3308      	adds	r3, #8
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	440b      	add	r3, r1
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	e001      	b.n	800a96a <AnalogRead_External+0x3e>
	}
	else
		return 0;
 800a966:	f04f 0300 	mov.w	r3, #0
 800a96a:	ee07 3a90 	vmov	s15, r3
}
 800a96e:	eeb0 0a67 	vmov.f32	s0, s15
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	2000000c 	.word	0x2000000c

0800a980 <ADBoard_Init>:

void ADBoard_Init()
{
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0

	ptADBoardDevices->curADBoardNum=-1;
 800a984:	4b26      	ldr	r3, [pc, #152]	; (800aa20 <ADBoard_Init+0xa0>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a98c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	ptADBoardDevices->ucDataFlag = 0;
 800a990:	4b23      	ldr	r3, [pc, #140]	; (800aa20 <ADBoard_Init+0xa0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2200      	movs	r2, #0
 800a996:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	ptADBoardDevices->ADTime=0;
 800a99a:	4b21      	ldr	r3, [pc, #132]	; (800aa20 <ADBoard_Init+0xa0>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	ptADBoardDevices->ADTimeStart=0;
 800a9a4:	4b1e      	ldr	r3, [pc, #120]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ptADBoardDevices->ADTimeEnd=0;
 800a9ae:	4b1c      	ldr	r3, [pc, #112]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -5;
 800a9b8:	4b19      	ldr	r3, [pc, #100]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a19      	ldr	r2, [pc, #100]	; (800aa24 <ADBoard_Init+0xa4>)
 800a9be:	661a      	str	r2, [r3, #96]	; 0x60
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 5;
 800a9c0:	4b17      	ldr	r3, [pc, #92]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a18      	ldr	r2, [pc, #96]	; (800aa28 <ADBoard_Init+0xa8>)
 800a9c6:	665a      	str	r2, [r3, #100]	; 0x64
	ptADBoardDevices->ADBoards[0].fRange = 10;
 800a9c8:	4b15      	ldr	r3, [pc, #84]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a17      	ldr	r2, [pc, #92]	; (800aa2c <ADBoard_Init+0xac>)
 800a9ce:	669a      	str	r2, [r3, #104]	; 0x68
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi3;
 800a9d0:	4b13      	ldr	r3, [pc, #76]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a16      	ldr	r2, [pc, #88]	; (800aa30 <ADBoard_Init+0xb0>)
 800a9d6:	671a      	str	r2, [r3, #112]	; 0x70
	ptADBoardDevices->ADBoards[0].CONV_Port = DO_18_GPIO_Port;
 800a9d8:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a15      	ldr	r2, [pc, #84]	; (800aa34 <ADBoard_Init+0xb4>)
 800a9de:	675a      	str	r2, [r3, #116]	; 0x74
	ptADBoardDevices->ADBoards[0].CONV_Pin = DO_18_Pin;
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9e8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	ptADBoardDevices->ADBoards[0].CS_Port = SPI3_CS_GPIO_Port;
 800a9ec:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a11      	ldr	r2, [pc, #68]	; (800aa38 <ADBoard_Init+0xb8>)
 800a9f2:	67da      	str	r2, [r3, #124]	; 0x7c
	ptADBoardDevices->ADBoards[0].CS_Pin = SPI3_CS_Pin;
 800a9f4:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <ADBoard_Init+0xa0>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	ptADBoardDevices->ADBoards[0].BUSY_Port = E7_GPIO_Port;
 800a9fe:	4b08      	ldr	r3, [pc, #32]	; (800aa20 <ADBoard_Init+0xa0>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a0e      	ldr	r2, [pc, #56]	; (800aa3c <ADBoard_Init+0xbc>)
 800aa04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ptADBoardDevices->ADBoards[0].BUSY_Pin = E7_Pin;
 800aa08:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <ADBoard_Init+0xa0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2280      	movs	r2, #128	; 0x80
 800aa0e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
//




	ADBoard_Reset();
 800aa12:	f7ff ff4d 	bl	800a8b0 <ADBoard_Reset>

	ADBoard_updateVoltage();
 800aa16:	f7ff ff63 	bl	800a8e0 <ADBoard_updateVoltage>
}
 800aa1a:	bf00      	nop
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	2000000c 	.word	0x2000000c
 800aa24:	c0a00000 	.word	0xc0a00000
 800aa28:	40a00000 	.word	0x40a00000
 800aa2c:	41200000 	.word	0x41200000
 800aa30:	20009398 	.word	0x20009398
 800aa34:	40020400 	.word	0x40020400
 800aa38:	40020c00 	.word	0x40020c00
 800aa3c:	40021800 	.word	0x40021800

0800aa40 <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800aa40:	b5b0      	push	{r4, r5, r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3304      	adds	r3, #4
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f001 f98b 	bl	800bd70 <_ZN14SOLENOID_VALVEC1Ei>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	331c      	adds	r3, #28
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 f985 	bl	800bd70 <_ZN14SOLENOID_VALVEC1Ei>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3334      	adds	r3, #52	; 0x34
 800aa6a:	6839      	ldr	r1, [r7, #0]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fbe7 	bl	800b240 <_ZN15PRESSURE_SENSORC1Ei>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3350      	adds	r3, #80	; 0x50
 800aa76:	4618      	mov	r0, r3
 800aa78:	f003 f866 	bl	800db48 <_ZN18PRESSURE_SENSORSPIC1Ev>
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	f241 0364 	movw	r3, #4196	; 0x1064
 800aa82:	4413      	add	r3, r2
 800aa84:	4a65      	ldr	r2, [pc, #404]	; (800ac1c <_ZN7CHAMBERC1Eiii+0x1dc>)
 800aa86:	461c      	mov	r4, r3
 800aa88:	4615      	mov	r5, r2
 800aa8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa96:	682b      	ldr	r3, [r5, #0]
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	f241 0398 	movw	r3, #4248	; 0x1098
 800aaa0:	4413      	add	r3, r2
 800aaa2:	4a5f      	ldr	r2, [pc, #380]	; (800ac20 <_ZN7CHAMBERC1Eiii+0x1e0>)
 800aaa4:	461c      	mov	r4, r3
 800aaa6:	4615      	mov	r5, r2
 800aaa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800aabe:	4413      	add	r3, r2
 800aac0:	4a58      	ldr	r2, [pc, #352]	; (800ac24 <_ZN7CHAMBERC1Eiii+0x1e4>)
 800aac2:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800aaca:	4413      	add	r3, r2
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68f9      	ldr	r1, [r7, #12]
 800aad0:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800aad4:	440b      	add	r3, r1
 800aad6:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4a53      	ldr	r2, [pc, #332]	; (800ac28 <_ZN7CHAMBERC1Eiii+0x1e8>)
 800aadc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressure=0;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f04f 0200 	mov.w	r2, #0
 800aafa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pressureDeadZone = 2000;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4a47      	ldr	r2, [pc, #284]	; (800ac2c <_ZN7CHAMBERC1Eiii+0x1ec>)
 800ab0e:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4a47      	ldr	r2, [pc, #284]	; (800ac30 <_ZN7CHAMBERC1Eiii+0x1f0>)
 800ab14:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	4a46      	ldr	r2, [pc, #280]	; (800ac34 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800ab1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	f241 0354 	movw	r3, #4180	; 0x1054
 800ab24:	4413      	add	r3, r2
 800ab26:	2201      	movs	r2, #1
 800ab28:	601a      	str	r2, [r3, #0]
	opening = 0;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f04f 0200 	mov.w	r2, #0
 800ab30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	da00      	bge.n	800ab44 <_ZN7CHAMBERC1Eiii+0x104>
 800ab42:	3301      	adds	r3, #1
 800ab44:	105b      	asrs	r3, r3, #1
 800ab46:	4a3c      	ldr	r2, [pc, #240]	; (800ac38 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800ab48:	011b      	lsls	r3, r3, #4
 800ab4a:	4413      	add	r3, r2
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	da00      	bge.n	800ab5c <_ZN7CHAMBERC1Eiii+0x11c>
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	105b      	asrs	r3, r3, #1
 800ab5e:	4a36      	ldr	r2, [pc, #216]	; (800ac38 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800ab60:	011b      	lsls	r3, r3, #4
 800ab62:	4413      	add	r3, r2
 800ab64:	3304      	adds	r3, #4
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	da00      	bge.n	800ab76 <_ZN7CHAMBERC1Eiii+0x136>
 800ab74:	3301      	adds	r3, #1
 800ab76:	105b      	asrs	r3, r3, #1
 800ab78:	4a2f      	ldr	r2, [pc, #188]	; (800ac38 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800ab7a:	011b      	lsls	r3, r3, #4
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3308      	adds	r3, #8
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	da00      	bge.n	800ab90 <_ZN7CHAMBERC1Eiii+0x150>
 800ab8e:	3301      	adds	r3, #1
 800ab90:	105b      	asrs	r3, r3, #1
 800ab92:	4a29      	ldr	r2, [pc, #164]	; (800ac38 <_ZN7CHAMBERC1Eiii+0x1f8>)
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	4413      	add	r3, r2
 800ab98:	330c      	adds	r3, #12
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800aba8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,CONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800abac:	eddf 4a23 	vldr	s9, [pc, #140]	; 800ac3c <_ZN7CHAMBERC1Eiii+0x1fc>
 800abb0:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800ac40 <_ZN7CHAMBERC1Eiii+0x200>
 800abb4:	eddf 3a23 	vldr	s7, [pc, #140]	; 800ac44 <_ZN7CHAMBERC1Eiii+0x204>
 800abb8:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800ac44 <_ZN7CHAMBERC1Eiii+0x204>
 800abbc:	eddf 2a22 	vldr	s5, [pc, #136]	; 800ac48 <_ZN7CHAMBERC1Eiii+0x208>
 800abc0:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800ac4c <_ZN7CHAMBERC1Eiii+0x20c>
 800abc4:	eddf 1a22 	vldr	s3, [pc, #136]	; 800ac50 <_ZN7CHAMBERC1Eiii+0x210>
 800abc8:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800ac54 <_ZN7CHAMBERC1Eiii+0x214>
 800abcc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ac44 <_ZN7CHAMBERC1Eiii+0x204>
 800abd0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800ac58 <_ZN7CHAMBERC1Eiii+0x218>
 800abd4:	f000 fad2 	bl	800b17c <NewPressureController>
 800abd8:	4602      	mov	r2, r0
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	f241 035c 	movw	r3, #4188	; 0x105c
 800abe4:	4413      	add	r3, r2
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	f241 0358 	movw	r3, #4184	; 0x1058
 800abf0:	4413      	add	r3, r2
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	33b4      	adds	r3, #180	; 0xb4
 800ac04:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ac08:	2100      	movs	r1, #0
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f003 faa9 	bl	800e162 <memset>

}
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bdb0      	pop	{r4, r5, r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	08012e30 	.word	0x08012e30
 800ac20:	08012e64 	.word	0x08012e64
 800ac24:	3e99999a 	.word	0x3e99999a
 800ac28:	3c23d70a 	.word	0x3c23d70a
 800ac2c:	44fa0000 	.word	0x44fa0000
 800ac30:	46ea6000 	.word	0x46ea6000
 800ac34:	c6ea6000 	.word	0xc6ea6000
 800ac38:	20000030 	.word	0x20000030
 800ac3c:	3e99999a 	.word	0x3e99999a
 800ac40:	387ba882 	.word	0x387ba882
 800ac44:	00000000 	.word	0x00000000
 800ac48:	37a7c5ac 	.word	0x37a7c5ac
 800ac4c:	471c4000 	.word	0x471c4000
 800ac50:	501502f9 	.word	0x501502f9
 800ac54:	3a83126f 	.word	0x3a83126f
 800ac58:	48435000 	.word	0x48435000

0800ac5c <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	68b9      	ldr	r1, [r7, #8]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f001 f8a1 	bl	800bdb8 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	331c      	adds	r3, #28
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f001 f89b 	bl	800bdb8 <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3334      	adds	r3, #52	; 0x34
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 fb3b 	bl	800b304 <_ZN15PRESSURE_SENSOR6attachEi>
}
 800ac8e:	bf00      	nop
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <_ZN7CHAMBER12readPressureEv>:
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}

float CHAMBER::readPressure(){
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
	pressure = pressureSensor.read();
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	3334      	adds	r3, #52	; 0x34
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 faf2 	bl	800b28c <_ZN15PRESSURE_SENSOR4readEv>
 800aca8:	eef0 7a40 	vmov.f32	s15, s0
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	//pressure = pressureSensorspi.read();
	return pressure;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800acb8:	ee07 3a90 	vmov	s15, r3
}
 800acbc:	eeb0 0a67 	vmov.f32	s0, s15
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <_ZN7CHAMBER14filterPressureEv>:

float CHAMBER::filterPressure(){
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
	pressureFil = stepKF(pressureController->pKalmanFilter,pressure);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69da      	ldr	r2, [r3, #28]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800acda:	eeb0 0a67 	vmov.f32	s0, s15
 800acde:	4610      	mov	r0, r2
 800ace0:	f002 fa66 	bl	800d1b0 <stepKF>
 800ace4:	eef0 7a40 	vmov.f32	s15, s0
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	return pressureFil;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800acf4:	ee07 3a90 	vmov	s15, r3
}
 800acf8:	eeb0 0a67 	vmov.f32	s0, s15
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
	...

0800ad04 <_ZN7CHAMBER13writePressureEf>:


void CHAMBER::writePressure(float pNom)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800ad10:	edd7 7a00 	vldr	s15, [r7]
 800ad14:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800aef8 <_ZN7CHAMBER13writePressureEf+0x1f4>
 800ad18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad20:	d501      	bpl.n	800ad26 <_ZN7CHAMBER13writePressureEf+0x22>
 800ad22:	4b76      	ldr	r3, [pc, #472]	; (800aefc <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800ad24:	e00b      	b.n	800ad3e <_ZN7CHAMBER13writePressureEf+0x3a>
 800ad26:	edd7 7a00 	vldr	s15, [r7]
 800ad2a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800af00 <_ZN7CHAMBER13writePressureEf+0x1fc>
 800ad2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad36:	dd01      	ble.n	800ad3c <_ZN7CHAMBER13writePressureEf+0x38>
 800ad38:	4b72      	ldr	r3, [pc, #456]	; (800af04 <_ZN7CHAMBER13writePressureEf+0x200>)
 800ad3a:	e000      	b.n	800ad3e <_ZN7CHAMBER13writePressureEf+0x3a>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

	float pErr = pressureCommand-pressure;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ad50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad54:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800ad5e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6a:	d54e      	bpl.n	800ae0a <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800ad78:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad7c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ad80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad84:	dd03      	ble.n	800ad8e <_ZN7CHAMBER13writePressureEf+0x8a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ad8c:	e019      	b.n	800adc2 <_ZN7CHAMBER13writePressureEf+0xbe>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ad9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ad9e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ada2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ada6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adaa:	d508      	bpl.n	800adbe <_ZN7CHAMBER13writePressureEf+0xba>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800adb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adbc:	e001      	b.n	800adc2 <_ZN7CHAMBER13writePressureEf+0xbe>
 800adbe:	edd7 7a03 	vldr	s15, [r7, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800adc8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800add8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800addc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800adec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800adf6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800adfa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800adfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800ae08:	e06a      	b.n	800aee0 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ae10:	eeb1 7a67 	vneg.f32	s14, s15
 800ae14:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae20:	dd59      	ble.n	800aed6 <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ae34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ae38:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae3c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ae40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae44:	dd08      	ble.n	800ae58 <_ZN7CHAMBER13writePressureEf+0x154>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ae52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae56:	e013      	b.n	800ae80 <_ZN7CHAMBER13writePressureEf+0x17c>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ae5e:	eef1 6a67 	vneg.f32	s13, s15
 800ae62:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae66:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ae6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6e:	d505      	bpl.n	800ae7c <_ZN7CHAMBER13writePressureEf+0x178>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ae76:	eef1 7a67 	vneg.f32	s15, s15
 800ae7a:	e001      	b.n	800ae80 <_ZN7CHAMBER13writePressureEf+0x17c>
 800ae7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800ae8c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ae90:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800aea0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aea4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800aeae:	eef1 6a67 	vneg.f32	s13, s15
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800aebe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800aec2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800aec6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800aeca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800aed4:	e004      	b.n	800aee0 <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f04f 0200 	mov.w	r2, #0
 800aedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800aee6:	eeb0 0a67 	vmov.f32	s0, s15
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f80c 	bl	800af08 <_ZN7CHAMBER12writeOpeningEf>
}
 800aef0:	bf00      	nop
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	c7c35000 	.word	0xc7c35000
 800aefc:	c7c35000 	.word	0xc7c35000
 800af00:	482fc800 	.word	0x482fc800
 800af04:	482fc800 	.word	0x482fc800

0800af08 <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800af14:	edd7 7a00 	vldr	s15, [r7]
 800af18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af20:	dd2b      	ble.n	800af7a <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800af22:	edd7 7a00 	vldr	s15, [r7]
 800af26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af2e:	d502      	bpl.n	800af36 <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800af30:	f04f 0300 	mov.w	r3, #0
 800af34:	e00c      	b.n	800af50 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800af36:	edd7 7a00 	vldr	s15, [r7]
 800af3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af46:	dd02      	ble.n	800af4e <_ZN7CHAMBER12writeOpeningEf+0x46>
 800af48:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800af4c:	e000      	b.n	800af50 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	1d1a      	adds	r2, r3, #4
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800af60:	eeb0 0a67 	vmov.f32	s0, s15
 800af64:	4610      	mov	r0, r2
 800af66:	f000 ff37 	bl	800bdd8 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	331c      	adds	r3, #28
 800af6e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800afdc <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800af72:	4618      	mov	r0, r3
 800af74:	f000 ff30 	bl	800bdd8 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800af78:	e02c      	b.n	800afd4 <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800af7a:	edd7 7a00 	vldr	s15, [r7]
 800af7e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800af82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af8a:	d501      	bpl.n	800af90 <_ZN7CHAMBER12writeOpeningEf+0x88>
 800af8c:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800af8e:	e00a      	b.n	800afa6 <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800af90:	edd7 7a00 	vldr	s15, [r7]
 800af94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af9c:	dd02      	ble.n	800afa4 <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800af9e:	f04f 0300 	mov.w	r3, #0
 800afa2:	e000      	b.n	800afa6 <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3304      	adds	r3, #4
 800afb0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800afdc <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 ff0f 	bl	800bdd8 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f103 021c 	add.w	r2, r3, #28
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800afc6:	eef1 7a67 	vneg.f32	s15, s15
 800afca:	eeb0 0a67 	vmov.f32	s0, s15
 800afce:	4610      	mov	r0, r2
 800afd0:	f000 ff02 	bl	800bdd8 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800afd4:	bf00      	nop
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	00000000 	.word	0x00000000
 800afe0:	bf800000 	.word	0xbf800000

0800afe4 <_ZN7CHAMBER20setValveOpeningLimitEffff>:
{
	pressureSensor.setSensorRange_GaugePa(vmin,vmax,pmin,pmax);
}

void CHAMBER::setValveOpeningLimit(float ominN,float omaxN,float ominP,float omaxP)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6178      	str	r0, [r7, #20]
 800afec:	ed87 0a04 	vstr	s0, [r7, #16]
 800aff0:	edc7 0a03 	vstr	s1, [r7, #12]
 800aff4:	ed87 1a02 	vstr	s2, [r7, #8]
 800aff8:	edc7 1a01 	vstr	s3, [r7, #4]
	openingMinN = ominN;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = omaxN;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = ominP;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = omaxP;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800b01c:	bf00      	nop
 800b01e:	371c      	adds	r7, #28
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800b032:	edd7 7a01 	vldr	s15, [r7, #4]
 800b036:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b03a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b03e:	eef0 7ae7 	vabs.f32	s15, s15
 800b042:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b046:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b068 <mySAT+0x40>
 800b04a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b04e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b052:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800b056:	eeb0 0a67 	vmov.f32	s0, s15
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	f3af 8000 	nop.w
 800b068:	47ae147b 	.word	0x47ae147b
 800b06c:	3f847ae1 	.word	0x3f847ae1

0800b070 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08a      	sub	sp, #40	; 0x28
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	ed87 0a02 	vstr	s0, [r7, #8]
 800b07c:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	ed93 7a08 	vldr	s14, [r3, #32]
 800b092:	edd7 7a01 	vldr	s15, [r7, #4]
 800b096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	edd3 6a07 	vldr	s13, [r3, #28]
 800b0a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b0a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b144 <superTwisting2rdSMCUpdate+0xd4>
 800b0b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	edd3 7a02 	vldr	s15, [r3, #8]
 800b0c0:	eeb0 0a67 	vmov.f32	s0, s15
 800b0c4:	f7ff ffb0 	bl	800b028 <mySAT>
 800b0c8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	edd3 7a02 	vldr	s15, [r3, #8]
 800b0d2:	eeb0 7ae7 	vabs.f32	s14, s15
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	edd3 7a04 	vldr	s15, [r3, #16]
 800b0dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e0:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800b0e4:	f04f 0300 	mov.w	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	61fb      	str	r3, [r7, #28]
 800b0ee:	f107 0314 	add.w	r3, r7, #20
 800b0f2:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b0f4:	edd7 7a07 	vldr	s15, [r7, #28]
 800b0f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b100:	db09      	blt.n	800b116 <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800b102:	ed97 0a07 	vldr	s0, [r7, #28]
 800b106:	f002 ff8b 	bl	800e020 <sqrtf>
 800b10a:	eef0 7a40 	vmov.f32	s15, s0
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	edc3 7a00 	vstr	s15, [r3]
 800b114:	e003      	b.n	800b11e <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	f04f 0200 	mov.w	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800b11e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b122:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	ee07 3a90 	vmov	s15, r3
}
 800b138:	eeb0 0a67 	vmov.f32	s0, s15
 800b13c:	3728      	adds	r7, #40	; 0x28
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	447a0000 	.word	0x447a0000

0800b148 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	ed87 0a02 	vstr	s0, [r7, #8]
 800b154:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3324      	adds	r3, #36	; 0x24
 800b15c:	edd7 0a01 	vldr	s1, [r7, #4]
 800b160:	ed97 0a02 	vldr	s0, [r7, #8]
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff ff83 	bl	800b070 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	ee07 3a90 	vmov	s15, r3
}
 800b172:	eeb0 0a67 	vmov.f32	s0, s15
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08c      	sub	sp, #48	; 0x30
 800b180:	af00      	add	r7, sp, #0
 800b182:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800b186:	edc7 0a08 	vstr	s1, [r7, #32]
 800b18a:	ed87 1a07 	vstr	s2, [r7, #28]
 800b18e:	edc7 1a06 	vstr	s3, [r7, #24]
 800b192:	ed87 2a05 	vstr	s4, [r7, #20]
 800b196:	edc7 2a04 	vstr	s5, [r7, #16]
 800b19a:	ed87 3a03 	vstr	s6, [r7, #12]
 800b19e:	edc7 3a02 	vstr	s7, [r7, #8]
 800b1a2:	ed87 4a01 	vstr	s8, [r7, #4]
 800b1a6:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800b1aa:	204c      	movs	r0, #76	; 0x4c
 800b1ac:	f002 ffc6 	bl	800e13c <malloc>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800b1b4:	224c      	movs	r2, #76	; 0x4c
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1ba:	f002 ffd2 	bl	800e162 <memset>
	pController->psource = psource;
 800b1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c2:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c6:	6a3a      	ldr	r2, [r7, #32]
 800b1c8:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800b1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1cc:	69fa      	ldr	r2, [r7, #28]
 800b1ce:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800b1d0:	ed97 1a07 	vldr	s2, [r7, #28]
 800b1d4:	edd7 0a05 	vldr	s1, [r7, #20]
 800b1d8:	ed97 0a06 	vldr	s0, [r7, #24]
 800b1dc:	f001 fc36 	bl	800ca4c <newSimpleKalmanFilter>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800b1e6:	edd7 2a00 	vldr	s5, [r7]
 800b1ea:	ed97 2a01 	vldr	s4, [r7, #4]
 800b1ee:	edd7 1a07 	vldr	s3, [r7, #28]
 800b1f2:	ed97 1a02 	vldr	s2, [r7, #8]
 800b1f6:	edd7 0a03 	vldr	s1, [r7, #12]
 800b1fa:	ed97 0a04 	vldr	s0, [r7, #16]
 800b1fe:	f002 f883 	bl	800d308 <newPID>
 800b202:	4602      	mov	r2, r0
 800b204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b206:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800b208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	4a08      	ldr	r2, [pc, #32]	; (800b234 <NewPressureController+0xb8>)
 800b212:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800b214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b216:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b21a:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800b21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21e:	4a06      	ldr	r2, [pc, #24]	; (800b238 <NewPressureController+0xbc>)
 800b220:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800b222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b224:	4a05      	ldr	r2, [pc, #20]	; (800b23c <NewPressureController+0xc0>)
 800b226:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800b228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3730      	adds	r7, #48	; 0x30
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	3627c5ac 	.word	0x3627c5ac
 800b238:	41a00000 	.word	0x41a00000
 800b23c:	0800b149 	.word	0x0800b149

0800b240 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f04f 0200 	mov.w	r2, #0
 800b250:	605a      	str	r2, [r3, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f04f 0200 	mov.w	r2, #0
 800b258:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800b25a:	6839      	ldr	r1, [r7, #0]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f851 	bl	800b304 <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800b262:	eddf 1a08 	vldr	s3, [pc, #32]	; 800b284 <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800b266:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800b288 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800b26a:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800b26e:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f854 	bl	800b320 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	48927c00 	.word	0x48927c00
 800b288:	00000000 	.word	0x00000000

0800b28c <_ZN15PRESSURE_SENSOR4readEv>:

float PRESSURE_SENSOR::read()
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
	voltage = AnalogRead(AnalogPort);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fc7f 	bl	800bb9e <AnalogRead>
 800b2a0:	eef0 7a40 	vmov.f32	s15, s0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	ed93 7a05 	vldr	s14, [r3, #20]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	edd3 6a01 	vldr	s13, [r3, #4]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	edd3 7a03 	vldr	s15, [r3, #12]
 800b2bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	ed93 6a06 	vldr	s12, [r3, #24]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	edd3 7a05 	vldr	s15, [r3, #20]
 800b2cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b2d0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	edd3 6a04 	vldr	s13, [r3, #16]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	edd3 7a03 	vldr	s15, [r3, #12]
 800b2e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b2e4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b2e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	edc3 7a02 	vstr	s15, [r3, #8]
	return pressure;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	ee07 3a90 	vmov	s15, r3
}
 800b2fa:	eeb0 0a67 	vmov.f32	s0, s15
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <_ZN15PRESSURE_SENSOR6attachEi>:

void PRESSURE_SENSOR::attach(int num)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	601a      	str	r2, [r3, #0]

}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800b320:	b480      	push	{r7}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
 800b326:	6178      	str	r0, [r7, #20]
 800b328:	ed87 0a04 	vstr	s0, [r7, #16]
 800b32c:	edc7 0a03 	vstr	s1, [r7, #12]
 800b330:	ed87 1a02 	vstr	s2, [r7, #8]
 800b334:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	619a      	str	r2, [r3, #24]
}
 800b350:	bf00      	nop
 800b352:	371c      	adds	r7, #28
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3304      	adds	r3, #4
 800b36c:	2100      	movs	r1, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f852 	bl	800b418 <_ZN4PUMPC1Ei>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	330c      	adds	r3, #12
 800b378:	2100      	movs	r1, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff ff60 	bl	800b240 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 f817 	bl	800b3b8 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	601a      	str	r2, [r3, #0]
	direction=0;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f04f 0200 	mov.w	r2, #0
 800b39c:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f04f 0200 	mov.w	r2, #0
 800b3a4:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f04f 0200 	mov.w	r2, #0
 800b3ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800b3c4:	68b9      	ldr	r1, [r7, #8]
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f000 f808 	bl	800b3dc <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 f813 	bl	800b3fa <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800b3d4:	bf00      	nop
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 f824 	bl	800b43a <_ZN4PUMP6attachEi>
}
 800b3f2:	bf00      	nop
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	330c      	adds	r3, #12
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7ff ff7a 	bl	800b304 <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b410:	bf00      	nop
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
	status=0;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	605a      	str	r2, [r3, #4]
	attach(num);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f805 	bl	800b43a <_ZN4PUMP6attachEi>
}
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	601a      	str	r2, [r3, #0]
}
 800b44a:	bf00      	nop
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
	...

0800b458 <PWM_CS_LOW>:
static void PWMBoardSPI_setCorrectionEnable(uint8_t flag);
static void PWMBoardSPI_startPWMCK(float fre);


static void PWM_CS_LOW()
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin<<16U;
 800b45c:	4b07      	ldr	r3, [pc, #28]	; (800b47c <PWM_CS_LOW+0x24>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800b464:	461a      	mov	r2, r3
 800b466:	4b05      	ldr	r3, [pc, #20]	; (800b47c <PWM_CS_LOW+0x24>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b46e:	0412      	lsls	r2, r2, #16
 800b470:	619a      	str	r2, [r3, #24]
}
 800b472:	bf00      	nop
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	20000210 	.word	0x20000210

0800b480 <PWM_CS_HIGH>:

static void PWM_CS_HIGH()
{
 800b480:	b480      	push	{r7}
 800b482:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin;
 800b484:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <PWM_CS_HIGH+0x20>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800b48c:	4b04      	ldr	r3, [pc, #16]	; (800b4a0 <PWM_CS_HIGH+0x20>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b494:	619a      	str	r2, [r3, #24]
}
 800b496:	bf00      	nop
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	20000210 	.word	0x20000210

0800b4a4 <PWMBoardSPI_Callback>:

static void PWMBoardSPI_Callback()
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	af00      	add	r7, sp, #0
	//the high pulse duration should be less than 5us to maintain the LDI functionality
	PWM_CS_HIGH();
 800b4a8:	f7ff ffea 	bl	800b480 <PWM_CS_HIGH>
	delay_us(2);
 800b4ac:	2002      	movs	r0, #2
 800b4ae:	f000 fbfd 	bl	800bcac <delay_us>
	PWM_CS_LOW();
 800b4b2:	f7ff ffd1 	bl	800b458 <PWM_CS_LOW>
}
 800b4b6:	bf00      	nop
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <PWMBoardSPI_sendFrame>:

static void PWMBoardSPI_sendFrame()
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af02      	add	r7, sp, #8
	HAL_SPI_TransmitReceive(ptPWMBoardSPI->PWM_spi,(uint8_t *)(ptPWMBoardSPI->CMDBuffer),(uint8_t *)(ptPWMBoardSPI->StatusBuffer),PWMBoardSPI_FrameLength,1);
 800b4c2:	4b0a      	ldr	r3, [pc, #40]	; (800b4ec <PWMBoardSPI_sendFrame+0x30>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800b4ca:	4b08      	ldr	r3, [pc, #32]	; (800b4ec <PWMBoardSPI_sendFrame+0x30>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <PWMBoardSPI_sendFrame+0x30>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f103 0249 	add.w	r2, r3, #73	; 0x49
 800b4d8:	2301      	movs	r3, #1
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	2349      	movs	r3, #73	; 0x49
 800b4de:	f7f8 fb21 	bl	8003b24 <HAL_SPI_TransmitReceive>
	PWMBoardSPI_Callback();
 800b4e2:	f7ff ffdf 	bl	800b4a4 <PWMBoardSPI_Callback>
}
 800b4e6:	bf00      	nop
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20000210 	.word	0x20000210

0800b4f0 <PWMBoardSPI_bufferCMD>:

static void PWMBoardSPI_bufferCMD(uint8_t cmd)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60fb      	str	r3, [r7, #12]
 800b4fe:	e00e      	b.n	800b51e <PWMBoardSPI_bufferCMD+0x2e>
		ptPWMBoardSPI->CMDBuffer[i][LT8500_FrameLength-1]=cmd;
 800b500:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <PWMBoardSPI_bufferCMD+0x40>)
 800b502:	6819      	ldr	r1, [r3, #0]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	4613      	mov	r3, r2
 800b508:	00db      	lsls	r3, r3, #3
 800b50a:	4413      	add	r3, r2
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	4413      	add	r3, r2
 800b510:	440b      	add	r3, r1
 800b512:	3348      	adds	r3, #72	; 0x48
 800b514:	79fa      	ldrb	r2, [r7, #7]
 800b516:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3301      	adds	r3, #1
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	dded      	ble.n	800b500 <PWMBoardSPI_bufferCMD+0x10>
}
 800b524:	bf00      	nop
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	20000210 	.word	0x20000210

0800b534 <PWMBoardSPI_bufferDutyChannel>:

static void PWMBoardSPI_bufferDutyChannel(uint16_t num, float fduty)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4603      	mov	r3, r0
 800b53c:	ed87 0a00 	vstr	s0, [r7]
 800b540:	80fb      	strh	r3, [r7, #6]

	uint16_t on;
	on = round(4096 * fduty);
 800b542:	edd7 7a00 	vldr	s15, [r7]
 800b546:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b670 <PWMBoardSPI_bufferDutyChannel+0x13c>
 800b54a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b54e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b552:	eeb0 0b47 	vmov.f64	d0, d7
 800b556:	f002 fd1d 	bl	800df94 <round>
 800b55a:	eeb0 7b40 	vmov.f64	d7, d0
 800b55e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b562:	ee17 3a90 	vmov	r3, s15
 800b566:	83fb      	strh	r3, [r7, #30]
	on=CONSTRAIN(on,0,4095);
 800b568:	8bfb      	ldrh	r3, [r7, #30]
 800b56a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b56e:	4293      	cmp	r3, r2
 800b570:	bf28      	it	cs
 800b572:	4613      	movcs	r3, r2
 800b574:	83fb      	strh	r3, [r7, #30]
	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	2b2f      	cmp	r3, #47	; 0x2f
 800b57a:	bf28      	it	cs
 800b57c:	232f      	movcs	r3, #47	; 0x2f
 800b57e:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	4a3c      	ldr	r2, [pc, #240]	; (800b674 <PWMBoardSPI_bufferDutyChannel+0x140>)
 800b584:	fba2 2303 	umull	r2, r3, r2, r3
 800b588:	095b      	lsrs	r3, r3, #5
 800b58a:	83bb      	strh	r3, [r7, #28]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800b58c:	88fa      	ldrh	r2, [r7, #6]
 800b58e:	4b39      	ldr	r3, [pc, #228]	; (800b674 <PWMBoardSPI_bufferDutyChannel+0x140>)
 800b590:	fba3 1302 	umull	r1, r3, r3, r2
 800b594:	0959      	lsrs	r1, r3, #5
 800b596:	460b      	mov	r3, r1
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	440b      	add	r3, r1
 800b59c:	011b      	lsls	r3, r3, #4
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	837b      	strh	r3, [r7, #26]
	uint16_t quo=(boardNum/2);
 800b5a2:	8b7b      	ldrh	r3, [r7, #26]
 800b5a4:	085b      	lsrs	r3, r3, #1
 800b5a6:	833b      	strh	r3, [r7, #24]
	uint16_t rem=(boardNum%2);
 800b5a8:	8b7b      	ldrh	r3, [r7, #26]
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	82fb      	strh	r3, [r7, #22]
	uint16_t startingBytesNum=quo*3;
 800b5b0:	8b3b      	ldrh	r3, [r7, #24]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	0052      	lsls	r2, r2, #1
 800b5b6:	4413      	add	r3, r2
 800b5b8:	82bb      	strh	r3, [r7, #20]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800b5ba:	4b2f      	ldr	r3, [pc, #188]	; (800b678 <PWMBoardSPI_bufferDutyChannel+0x144>)
 800b5bc:	6819      	ldr	r1, [r3, #0]
 800b5be:	8bba      	ldrh	r2, [r7, #28]
 800b5c0:	8ab8      	ldrh	r0, [r7, #20]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	00db      	lsls	r3, r3, #3
 800b5ca:	4413      	add	r3, r2
 800b5cc:	4403      	add	r3, r0
 800b5ce:	440b      	add	r3, r1
 800b5d0:	613b      	str	r3, [r7, #16]

	if(rem==0){
 800b5d2:	8afb      	ldrh	r3, [r7, #22]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d11c      	bne.n	800b612 <PWMBoardSPI_bufferDutyChannel+0xde>
			*pt++=(uint8_t)(on>>4);
 800b5d8:	8bfb      	ldrh	r3, [r7, #30]
 800b5da:	091b      	lsrs	r3, r3, #4
 800b5dc:	b299      	uxth	r1, r3
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	613a      	str	r2, [r7, #16]
 800b5e4:	b2ca      	uxtb	r2, r1
 800b5e6:	701a      	strb	r2, [r3, #0]
			uint8_t ori=*pt;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	73bb      	strb	r3, [r7, #14]
			ori&=0x0F;
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	f003 030f 	and.w	r3, r3, #15
 800b5f4:	73bb      	strb	r3, [r7, #14]
			ori|= ((uint8_t)(on<<4) & 0xF0);
 800b5f6:	8bfb      	ldrh	r3, [r7, #30]
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	011b      	lsls	r3, r3, #4
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	b25a      	sxtb	r2, r3
 800b600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b604:	4313      	orrs	r3, r2
 800b606:	b25b      	sxtb	r3, r3
 800b608:	73bb      	strb	r3, [r7, #14]
			*pt=ori;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	7bba      	ldrb	r2, [r7, #14]
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e01e      	b.n	800b650 <PWMBoardSPI_bufferDutyChannel+0x11c>
	}
	else
	{
		pt++;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	3301      	adds	r3, #1
 800b616:	613b      	str	r3, [r7, #16]
		uint8_t ori=*pt;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	73fb      	strb	r3, [r7, #15]
		ori&=0xF0;
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	f023 030f 	bic.w	r3, r3, #15
 800b624:	73fb      	strb	r3, [r7, #15]
		ori|= ((uint8_t)(on>>8) & 0x0F);
 800b626:	8bfb      	ldrh	r3, [r7, #30]
 800b628:	0a1b      	lsrs	r3, r3, #8
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	b25b      	sxtb	r3, r3
 800b62e:	f003 030f 	and.w	r3, r3, #15
 800b632:	b25a      	sxtb	r2, r3
 800b634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b638:	4313      	orrs	r3, r2
 800b63a:	b25b      	sxtb	r3, r3
 800b63c:	73fb      	strb	r3, [r7, #15]
		*pt++=ori;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	613a      	str	r2, [r7, #16]
 800b644:	7bfa      	ldrb	r2, [r7, #15]
 800b646:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(on);
 800b648:	8bfb      	ldrh	r3, [r7, #30]
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyDuty=1;
 800b650:	4b09      	ldr	r3, [pc, #36]	; (800b678 <PWMBoardSPI_bufferDutyChannel+0x144>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	PWMBoardSPI_bufferCMD(ptPWMBoardSPI->syncMode);
 800b65a:	4b07      	ldr	r3, [pc, #28]	; (800b678 <PWMBoardSPI_bufferDutyChannel+0x144>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff ff44 	bl	800b4f0 <PWMBoardSPI_bufferCMD>
}
 800b668:	bf00      	nop
 800b66a:	3720      	adds	r7, #32
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	45800000 	.word	0x45800000
 800b674:	aaaaaaab 	.word	0xaaaaaaab
 800b678:	20000210 	.word	0x20000210

0800b67c <PWMBoardSPI_bufferCorrection>:

static void PWMBoardSPI_bufferCorrection(uint16_t num,uint8_t value)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	460a      	mov	r2, r1
 800b686:	80fb      	strh	r3, [r7, #6]
 800b688:	4613      	mov	r3, r2
 800b68a:	717b      	strb	r3, [r7, #5]

	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800b68c:	88fb      	ldrh	r3, [r7, #6]
 800b68e:	2b2f      	cmp	r3, #47	; 0x2f
 800b690:	bf28      	it	cs
 800b692:	232f      	movcs	r3, #47	; 0x2f
 800b694:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800b696:	88fb      	ldrh	r3, [r7, #6]
 800b698:	4a25      	ldr	r2, [pc, #148]	; (800b730 <PWMBoardSPI_bufferCorrection+0xb4>)
 800b69a:	fba2 2303 	umull	r2, r3, r2, r3
 800b69e:	095b      	lsrs	r3, r3, #5
 800b6a0:	82fb      	strh	r3, [r7, #22]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800b6a2:	88fa      	ldrh	r2, [r7, #6]
 800b6a4:	4b22      	ldr	r3, [pc, #136]	; (800b730 <PWMBoardSPI_bufferCorrection+0xb4>)
 800b6a6:	fba3 1302 	umull	r1, r3, r3, r2
 800b6aa:	0959      	lsrs	r1, r3, #5
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	440b      	add	r3, r1
 800b6b2:	011b      	lsls	r3, r3, #4
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	82bb      	strh	r3, [r7, #20]
	uint16_t quo=(boardNum/2);
 800b6b8:	8abb      	ldrh	r3, [r7, #20]
 800b6ba:	085b      	lsrs	r3, r3, #1
 800b6bc:	827b      	strh	r3, [r7, #18]
	uint16_t rem=(boardNum%2);
 800b6be:	8abb      	ldrh	r3, [r7, #20]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	823b      	strh	r3, [r7, #16]
	uint16_t startingBytesNum=quo*3;
 800b6c6:	8a7b      	ldrh	r3, [r7, #18]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	0052      	lsls	r2, r2, #1
 800b6cc:	4413      	add	r3, r2
 800b6ce:	81fb      	strh	r3, [r7, #14]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800b6d0:	4b18      	ldr	r3, [pc, #96]	; (800b734 <PWMBoardSPI_bufferCorrection+0xb8>)
 800b6d2:	6819      	ldr	r1, [r3, #0]
 800b6d4:	8afa      	ldrh	r2, [r7, #22]
 800b6d6:	89f8      	ldrh	r0, [r7, #14]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	00db      	lsls	r3, r3, #3
 800b6dc:	4413      	add	r3, r2
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	4413      	add	r3, r2
 800b6e2:	4403      	add	r3, r0
 800b6e4:	440b      	add	r3, r1
 800b6e6:	60bb      	str	r3, [r7, #8]
	if(rem==0){
 800b6e8:	8a3b      	ldrh	r3, [r7, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d105      	bne.n	800b6fa <PWMBoardSPI_bufferCorrection+0x7e>
		*pt=(uint8_t)(value<<2);
 800b6ee:	797b      	ldrb	r3, [r7, #5]
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	e00e      	b.n	800b718 <PWMBoardSPI_bufferCorrection+0x9c>
	}
	else
	{
		pt++;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	60bb      	str	r3, [r7, #8]
		*pt++=(uint8_t)(value>>2);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	60ba      	str	r2, [r7, #8]
 800b706:	797a      	ldrb	r2, [r7, #5]
 800b708:	0892      	lsrs	r2, r2, #2
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(value<<6);
 800b70e:	797b      	ldrb	r3, [r7, #5]
 800b710:	019b      	lsls	r3, r3, #6
 800b712:	b2da      	uxtb	r2, r3
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyCOR=1;
 800b718:	4b06      	ldr	r3, [pc, #24]	; (800b734 <PWMBoardSPI_bufferCorrection+0xb8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	PWMBoardSPI_bufferCMD(LT8500_CMD_Correction);
 800b722:	2020      	movs	r0, #32
 800b724:	f7ff fee4 	bl	800b4f0 <PWMBoardSPI_bufferCMD>
}
 800b728:	bf00      	nop
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	aaaaaaab 	.word	0xaaaaaaab
 800b734:	20000210 	.word	0x20000210

0800b738 <PWMBoardSPI_setOutputEnable>:



static void PWMBoardSPI_setOutputEnable(uint8_t flag)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	4603      	mov	r3, r0
 800b740:	71fb      	strb	r3, [r7, #7]
	PWMBoardSPI_bufferCMD((flag?LT8500_CMD_OutputEnable:LT8500_CMD_OutputDisable));
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <PWMBoardSPI_setOutputEnable+0x14>
 800b748:	2330      	movs	r3, #48	; 0x30
 800b74a:	e000      	b.n	800b74e <PWMBoardSPI_setOutputEnable+0x16>
 800b74c:	2340      	movs	r3, #64	; 0x40
 800b74e:	4618      	mov	r0, r3
 800b750:	f7ff fece 	bl	800b4f0 <PWMBoardSPI_bufferCMD>
	PWMBoardSPI_sendFrame();
 800b754:	f7ff feb2 	bl	800b4bc <PWMBoardSPI_sendFrame>
	HAL_Delay(500);//THis delay is important, otherwise the enabling funciton may not take effective. I don't know why...
 800b758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b75c:	f7f5 fc58 	bl	8001010 <HAL_Delay>
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <PWMBoardSPI_setCorrectionEnable>:

static void PWMBoardSPI_setCorrectionEnable(uint8_t flag)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	71fb      	strb	r3, [r7, #7]
	if((ptPWMBoardSPI->StatusBuffer[0][LT8500_FrameLength-1]&0x01)!=(1-flag))
 800b772:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <PWMBoardSPI_setCorrectionEnable+0x34>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b77a:	f003 0201 	and.w	r2, r3, #1
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	f1c3 0301 	rsb	r3, r3, #1
 800b784:	429a      	cmp	r2, r3
 800b786:	d004      	beq.n	800b792 <PWMBoardSPI_setCorrectionEnable+0x2a>
		{
		PWMBoardSPI_bufferCMD(LT8500_CMD_CorrentionToggle);
 800b788:	2070      	movs	r0, #112	; 0x70
 800b78a:	f7ff feb1 	bl	800b4f0 <PWMBoardSPI_bufferCMD>
		PWMBoardSPI_sendFrame();
 800b78e:	f7ff fe95 	bl	800b4bc <PWMBoardSPI_sendFrame>
		}
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	20000210 	.word	0x20000210

0800b7a0 <PWMBoardSPI_startPWMCK>:

static void PWMBoardSPI_startPWMCK(float fre)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	ed87 0a01 	vstr	s0, [r7, #4]
	PWMBuiltIn_writeDuty(ptPWMBoardSPI->Frequency_PWMPortNum,0.5);
 800b7aa:	4b0c      	ldr	r3, [pc, #48]	; (800b7dc <PWMBoardSPI_startPWMCK+0x3c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 800b7b2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 fc20 	bl	800bffc <PWMBuiltIn_writeDuty>
	PWMBoardSPI_writeFrequency(fre);
 800b7bc:	ed97 0a01 	vldr	s0, [r7, #4]
 800b7c0:	f000 f80e 	bl	800b7e0 <PWMBoardSPI_writeFrequency>
	PWMBuiltInStartChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800b7c4:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <PWMBoardSPI_startPWMCK+0x3c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 fe91 	bl	800c4f4 <PWMBuiltInStartChannel>
}
 800b7d2:	bf00      	nop
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	20000210 	.word	0x20000210

0800b7e0 <PWMBoardSPI_writeFrequency>:


void PWMBoardSPI_writeFrequency(float fre)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	ed87 0a01 	vstr	s0, [r7, #4]
	fre = CONSTRAIN(fre,EXTERNAL_PWMBOARDSPI_FREMIN,EXTERNAL_PWMBOARDSPI_FREMAX);
 800b7ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800b7ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b7f2:	ed9f 6b39 	vldr	d6, [pc, #228]	; 800b8d8 <PWMBoardSPI_writeFrequency+0xf8>
 800b7f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fe:	d501      	bpl.n	800b804 <PWMBoardSPI_writeFrequency+0x24>
 800b800:	4b3b      	ldr	r3, [pc, #236]	; (800b8f0 <PWMBoardSPI_writeFrequency+0x110>)
 800b802:	e00b      	b.n	800b81c <PWMBoardSPI_writeFrequency+0x3c>
 800b804:	edd7 7a01 	vldr	s15, [r7, #4]
 800b808:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b8f4 <PWMBoardSPI_writeFrequency+0x114>
 800b80c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b814:	dd01      	ble.n	800b81a <PWMBoardSPI_writeFrequency+0x3a>
 800b816:	4b38      	ldr	r3, [pc, #224]	; (800b8f8 <PWMBoardSPI_writeFrequency+0x118>)
 800b818:	e000      	b.n	800b81c <PWMBoardSPI_writeFrequency+0x3c>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	607b      	str	r3, [r7, #4]
	float newClkFrequency=fre*4096;
 800b81e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b822:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b8fc <PWMBoardSPI_writeFrequency+0x11c>
 800b826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b82a:	edc7 7a03 	vstr	s15, [r7, #12]
	if(fabs(newClkFrequency-ptPWMBoardSPI->clkFrequency)>1e-6)
 800b82e:	4b34      	ldr	r3, [pc, #208]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800b836:	ed97 7a03 	vldr	s14, [r7, #12]
 800b83a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b83e:	eef0 7ae7 	vabs.f32	s15, s15
 800b842:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b846:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800b8e0 <PWMBoardSPI_writeFrequency+0x100>
 800b84a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b852:	dc00      	bgt.n	800b856 <PWMBoardSPI_writeFrequency+0x76>
		ptPWMBoardSPI->frequency=fre;
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
	}
}
 800b854:	e03a      	b.n	800b8cc <PWMBoardSPI_writeFrequency+0xec>
		ptPWMBoardSPI->frequency=fre;
 800b856:	4b2a      	ldr	r3, [pc, #168]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
 800b860:	4b27      	ldr	r3, [pc, #156]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800b86a:	4b25      	ldr	r3, [pc, #148]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800b872:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b876:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800b8e8 <PWMBoardSPI_writeFrequency+0x108>
 800b87a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b882:	d501      	bpl.n	800b888 <PWMBoardSPI_writeFrequency+0xa8>
 800b884:	4b1f      	ldr	r3, [pc, #124]	; (800b904 <PWMBoardSPI_writeFrequency+0x124>)
 800b886:	e010      	b.n	800b8aa <PWMBoardSPI_writeFrequency+0xca>
 800b888:	4b1d      	ldr	r3, [pc, #116]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800b890:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b908 <PWMBoardSPI_writeFrequency+0x128>
 800b894:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89c:	dd01      	ble.n	800b8a2 <PWMBoardSPI_writeFrequency+0xc2>
 800b89e:	4b1b      	ldr	r3, [pc, #108]	; (800b90c <PWMBoardSPI_writeFrequency+0x12c>)
 800b8a0:	e003      	b.n	800b8aa <PWMBoardSPI_writeFrequency+0xca>
 800b8a2:	4b17      	ldr	r3, [pc, #92]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b8aa:	4a15      	ldr	r2, [pc, #84]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b8ac:	6812      	ldr	r2, [r2, #0]
 800b8ae:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
 800b8b2:	4b13      	ldr	r3, [pc, #76]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 800b8ba:	4b11      	ldr	r3, [pc, #68]	; (800b900 <PWMBoardSPI_writeFrequency+0x120>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800b8c2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	f000 fc36 	bl	800c138 <PWMBuiltIn_writeFrequency>
}
 800b8cc:	bf00      	nop
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	f3af 8000 	nop.w
 800b8d8:	88e368f1 	.word	0x88e368f1
 800b8dc:	3ee4f8b5 	.word	0x3ee4f8b5
 800b8e0:	a0b5ed8d 	.word	0xa0b5ed8d
 800b8e4:	3eb0c6f7 	.word	0x3eb0c6f7
 800b8e8:	eb851eb8 	.word	0xeb851eb8
 800b8ec:	3f9eb851 	.word	0x3f9eb851
 800b8f0:	3727c5ac 	.word	0x3727c5ac
 800b8f4:	459c4000 	.word	0x459c4000
 800b8f8:	459c4000 	.word	0x459c4000
 800b8fc:	45800000 	.word	0x45800000
 800b900:	20000210 	.word	0x20000210
 800b904:	3cf5c28f 	.word	0x3cf5c28f
 800b908:	4bcdfe60 	.word	0x4bcdfe60
 800b90c:	4bcdfe60 	.word	0x4bcdfe60

0800b910 <PWMBoardSPI_writeDuty>:
void PWMBoardSPI_writeDuty(uint16_t num, float fduty)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	4603      	mov	r3, r0
 800b918:	ed87 0a00 	vstr	s0, [r7]
 800b91c:	80fb      	strh	r3, [r7, #6]
	PWMBoardSPI_bufferDutyChannel(num,fduty);
 800b91e:	88fb      	ldrh	r3, [r7, #6]
 800b920:	ed97 0a00 	vldr	s0, [r7]
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff fe05 	bl	800b534 <PWMBoardSPI_bufferDutyChannel>
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <PWMBoardSPI_writeCorrectionAll>:
void PWMBoardSPI_writeCorrectionAll(uint8_t value)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	4603      	mov	r3, r0
 800b93a:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800b93c:	2300      	movs	r3, #0
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e009      	b.n	800b956 <PWMBoardSPI_writeCorrectionAll+0x24>
		{
			PWMBoardSPI_bufferCorrection(i,value);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	b29b      	uxth	r3, r3
 800b946:	79fa      	ldrb	r2, [r7, #7]
 800b948:	4611      	mov	r1, r2
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7ff fe96 	bl	800b67c <PWMBoardSPI_bufferCorrection>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3301      	adds	r3, #1
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2b2f      	cmp	r3, #47	; 0x2f
 800b95a:	ddf2      	ble.n	800b942 <PWMBoardSPI_writeCorrectionAll+0x10>
		}
	PWMBoardSPI_sendFrame();
 800b95c:	f7ff fdae 	bl	800b4bc <PWMBoardSPI_sendFrame>
}
 800b960:	bf00      	nop
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <PWMBoardSPI_flushDutyAll>:

void PWMBoardSPI_flushDutyAll()
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
	uint32_t c1=micros();
 800b96e:	f000 f987 	bl	800bc80 <micros>
 800b972:	6078      	str	r0, [r7, #4]
	if(ptPWMBoardSPI->dirtyDuty==1)
 800b974:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <PWMBoardSPI_flushDutyAll+0x40>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d106      	bne.n	800b98e <PWMBoardSPI_flushDutyAll+0x26>
	{
		ptPWMBoardSPI->dirtyDuty=0;
 800b980:	4b09      	ldr	r3, [pc, #36]	; (800b9a8 <PWMBoardSPI_flushDutyAll+0x40>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		PWMBoardSPI_sendFrame();
 800b98a:	f7ff fd97 	bl	800b4bc <PWMBoardSPI_sendFrame>
	}
	ptPWMBoardSPI->lastUpdateTime=micros()-c1;
 800b98e:	f000 f977 	bl	800bc80 <micros>
 800b992:	4601      	mov	r1, r0
 800b994:	4b04      	ldr	r3, [pc, #16]	; (800b9a8 <PWMBoardSPI_flushDutyAll+0x40>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	1a8a      	subs	r2, r1, r2
 800b99c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20000210 	.word	0x20000210

0800b9ac <PWMBoardSPI_init>:

void PWMBoardSPI_init()
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
	memset(ptPWMBoardSPI,0,sizeof(PWM_BOARDSPI));
 800b9b2:	4b35      	ldr	r3, [pc, #212]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	22bc      	movs	r2, #188	; 0xbc
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f002 fbd1 	bl	800e162 <memset>

	ptPWMBoardSPI->PWM_spi=&hspi_PWM;
 800b9c0:	4b31      	ldr	r3, [pc, #196]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a31      	ldr	r2, [pc, #196]	; (800ba8c <PWMBoardSPI_init+0xe0>)
 800b9c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	ptPWMBoardSPI->CS_Port=SPI4_CS_GPIO_Port;
 800b9ca:	4b2f      	ldr	r3, [pc, #188]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a30      	ldr	r2, [pc, #192]	; (800ba90 <PWMBoardSPI_init+0xe4>)
 800b9d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ptPWMBoardSPI->CS_Pin=SPI4_CS_Pin;
 800b9d4:	4b2c      	ldr	r3, [pc, #176]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b9dc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	ptPWMBoardSPI->Frequency_PWMPortNum=BUILTIN_PWM_NUM-1;
 800b9e0:	4b29      	ldr	r3, [pc, #164]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2219      	movs	r2, #25
 800b9e6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	ptPWMBoardSPI->syncMode=LT8500_CMD_AsyUpdate;
 800b9ea:	4b27      	ldr	r3, [pc, #156]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2210      	movs	r2, #16
 800b9f0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	ptPWMBoardSPI->dirtyCOR=0;
 800b9f4:	4b24      	ldr	r3, [pc, #144]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ptPWMBoardSPI->dirtyDuty=0;
 800b9fe:	4b22      	ldr	r3, [pc, #136]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ptPWMBoardSPI->lastUpdateTime=0;
 800ba08:	4b1f      	ldr	r3, [pc, #124]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	ptPWMBoardSPI->PWMTime=0;
 800ba12:	4b1d      	ldr	r3, [pc, #116]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptPWMBoardSPI->PWMTimeEnd=0;
 800ba1c:	4b1a      	ldr	r3, [pc, #104]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptPWMBoardSPI->PWMTimeStart=0;
 800ba26:	4b18      	ldr	r3, [pc, #96]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	PWMBuiltInStopChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800ba30:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <PWMBoardSPI_init+0xdc>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f000 fd73 	bl	800c524 <PWMBuiltInStopChannel>

	//initialization
	//1. Apply power and drive LDIBLANK low. SDO will go low when the on-chip power-on-reset (POR) de-asserts.
	PWM_CS_LOW();
 800ba3e:	f7ff fd0b 	bl	800b458 <PWM_CS_LOW>

	//2.Send a correction register frame (CMD = 0x20) on the serial interface. This sets the correction factor on each channel.
	PWMBoardSPI_writeCorrectionAll(63);
 800ba42:	203f      	movs	r0, #63	; 0x3f
 800ba44:	f7ff ff75 	bl	800b932 <PWMBoardSPI_writeCorrectionAll>

	//3. Send an update frame (CMD = 0x00 or CMD = 0x10) on the serial interface. This sets the pulse width of each channel.
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800ba48:	2300      	movs	r3, #0
 800ba4a:	607b      	str	r3, [r7, #4]
 800ba4c:	e009      	b.n	800ba62 <PWMBoardSPI_init+0xb6>
	{
		PWMBoardSPI_bufferDutyChannel(i,0);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ba94 <PWMBoardSPI_init+0xe8>
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7ff fd6c 	bl	800b534 <PWMBoardSPI_bufferDutyChannel>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	607b      	str	r3, [r7, #4]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b2f      	cmp	r3, #47	; 0x2f
 800ba66:	ddf2      	ble.n	800ba4e <PWMBoardSPI_init+0xa2>
	}
	PWMBoardSPI_sendFrame();
 800ba68:	f7ff fd28 	bl	800b4bc <PWMBoardSPI_sendFrame>

	//4. start PWM clock (PWMCK)
	PWMBoardSPI_startPWMCK(1);
 800ba6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba70:	f7ff fe96 	bl	800b7a0 <PWMBoardSPI_startPWMCK>

	PWMBoardSPI_setCorrectionEnable(0);
 800ba74:	2000      	movs	r0, #0
 800ba76:	f7ff fe77 	bl	800b768 <PWMBoardSPI_setCorrectionEnable>

	//5. Send an output enable frame (CMD = 0x30) on the serial interface. This enables the modulated pulses on the PWM[48:1] outputs
	PWMBoardSPI_setOutputEnable(1);
 800ba7a:	2001      	movs	r0, #1
 800ba7c:	f7ff fe5c 	bl	800b738 <PWMBoardSPI_setOutputEnable>

}
 800ba80:	bf00      	nop
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	20000210 	.word	0x20000210
 800ba8c:	200094bc 	.word	0x200094bc
 800ba90:	40020c00 	.word	0x40020c00
 800ba94:	00000000 	.word	0x00000000

0800ba98 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800ba98:	b590      	push	{r4, r7, lr}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	330c      	adds	r3, #12
 800baa6:	2200      	movs	r2, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fc56 	bl	800b35c <_ZN15PRESSURE_SOURCEC1Eii>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	3344      	adds	r3, #68	; 0x44
 800bab4:	2200      	movs	r2, #0
 800bab6:	2100      	movs	r1, #0
 800bab8:	4618      	mov	r0, r3
 800baba:	f7ff fc4f 	bl	800b35c <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2104      	movs	r1, #4
 800baca:	4618      	mov	r0, r3
 800bacc:	f002 fb04 	bl	800e0d8 <calloc>
 800bad0:	4603      	mov	r3, r0
 800bad2:	461a      	mov	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2104      	movs	r1, #4
 800badc:	4618      	mov	r0, r3
 800bade:	f002 fafb 	bl	800e0d8 <calloc>
 800bae2:	4603      	mov	r3, r0
 800bae4:	461a      	mov	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	889b      	ldrh	r3, [r3, #4]
 800baf2:	461a      	mov	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	4293      	cmp	r3, r2
 800baf8:	da18      	bge.n	800bb2c <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800bafa:	f241 00d4 	movw	r0, #4308	; 0x10d4
 800bafe:	f002 fa2f 	bl	800df60 <_Znwj>
 800bb02:	4603      	mov	r3, r0
 800bb04:	461c      	mov	r4, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	0059      	lsls	r1, r3, #1
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	1c5a      	adds	r2, r3, #1
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4620      	mov	r0, r4
 800bb14:	f7fe ff94 	bl	800aa40 <_ZN7CHAMBERC1Eiii>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689a      	ldr	r2, [r3, #8]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4413      	add	r3, r2
 800bb22:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3301      	adds	r3, #1
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	e7e0      	b.n	800baee <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a05      	ldr	r2, [pc, #20]	; (800bb44 <_ZN9PNEUDRIVEC1Ei+0xac>)
 800bb30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 10;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a04      	ldr	r2, [pc, #16]	; (800bb48 <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800bb38:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd90      	pop	{r4, r7, pc}
 800bb44:	44fa0000 	.word	0x44fa0000
 800bb48:	41200000 	.word	0x41200000

0800bb4c <_ZN9PNEUDRIVE12readPressureEi>:
	}
}


float PNEUDRIVE::readPressure(int num)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	return (chambers[num]->readPressure());
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff f897 	bl	800ac96 <_ZN7CHAMBER12readPressureEv>
 800bb68:	eef0 7a40 	vmov.f32	s15, s0
}
 800bb6c:	eeb0 0a67 	vmov.f32	s0, s15
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <_ZN9PNEUDRIVE14bufferPressureEif>:
	bufferPressure(num,preCommand);
	writeBufferedPressure(num);
}

void PNEUDRIVE::bufferPressure(int num,float preCommand)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b085      	sub	sp, #20
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	60b9      	str	r1, [r7, #8]
 800bb80:	ed87 0a01 	vstr	s0, [r7, #4]
	pressureCommands[num]=preCommand;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	601a      	str	r2, [r3, #0]
}
 800bb92:	bf00      	nop
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <AnalogRead>:
#include "PWMBoardI2C.h"
#include "tim.h"
extern TIM_HandleTypeDef htim5;

float AnalogRead(uint16_t num)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b084      	sub	sp, #16
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	4603      	mov	r3, r0
 800bba6:	80fb      	strh	r3, [r7, #6]
	float value=0;
 800bba8:	f04f 0300 	mov.w	r3, #0
 800bbac:	60fb      	str	r3, [r7, #12]
	if(0<=num && num<BUILTIN_ANA_IN_NUM)
 800bbae:	88fb      	ldrh	r3, [r7, #6]
 800bbb0:	2b0f      	cmp	r3, #15
 800bbb2:	d806      	bhi.n	800bbc2 <AnalogRead+0x24>
		value=AnalogRead_BuiltIn(num);
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 f96c 	bl	800be94 <AnalogRead_BuiltIn>
 800bbbc:	ed87 0a03 	vstr	s0, [r7, #12]
 800bbc0:	e008      	b.n	800bbd4 <AnalogRead+0x36>
	else
	{
#if (ADBOARD_NUM>0)
		num-=BUILTIN_ANA_IN_NUM;
 800bbc2:	88fb      	ldrh	r3, [r7, #6]
 800bbc4:	3b10      	subs	r3, #16
 800bbc6:	80fb      	strh	r3, [r7, #6]
		value=AnalogRead_External(num);
 800bbc8:	88fb      	ldrh	r3, [r7, #6]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fe feae 	bl	800a92c <AnalogRead_External>
 800bbd0:	ed87 0a03 	vstr	s0, [r7, #12]
#endif
	}
	return value;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	ee07 3a90 	vmov	s15, r3

}
 800bbda:	eeb0 0a67 	vmov.f32	s0, s15
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	ed87 0a00 	vstr	s0, [r7]
 800bbf0:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800bbf2:	88fb      	ldrh	r3, [r7, #6]
 800bbf4:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800bbf6:	88fb      	ldrh	r3, [r7, #6]
 800bbf8:	2b19      	cmp	r3, #25
 800bbfa:	d806      	bhi.n	800bc0a <PWMWriteDuty+0x26>
		PWMBuiltIn_writeDuty(num,fduty);
 800bbfc:	88fb      	ldrh	r3, [r7, #6]
 800bbfe:	ed97 0a00 	vldr	s0, [r7]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 f9fa 	bl	800bffc <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800bc08:	e00b      	b.n	800bc22 <PWMWriteDuty+0x3e>
		num= numori - BUILTIN_PWM_NUM;
 800bc0a:	89fb      	ldrh	r3, [r7, #14]
 800bc0c:	3b1a      	subs	r3, #26
 800bc0e:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDSPI_CHANNELNUM){
 800bc10:	88fb      	ldrh	r3, [r7, #6]
 800bc12:	2b2f      	cmp	r3, #47	; 0x2f
 800bc14:	d805      	bhi.n	800bc22 <PWMWriteDuty+0x3e>
			PWMBoardSPI_writeDuty(num,fduty);
 800bc16:	88fb      	ldrh	r3, [r7, #6]
 800bc18:	ed97 0a00 	vldr	s0, [r7]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fe77 	bl	800b910 <PWMBoardSPI_writeDuty>
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
};
 800bc32:	bf00      	nop
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
	...

0800bc40 <serialPort1Callback>:

__weak void serialPort1Callback(char *pWirelessReceiveBuffer) {
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
	printf("Running default WirelessCommandCallbackFunction()\r\n");
 800bc48:	4803      	ldr	r0, [pc, #12]	; (800bc58 <serialPort1Callback+0x18>)
 800bc4a:	f003 f9d1 	bl	800eff0 <puts>
}
 800bc4e:	bf00      	nop
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	08012f1c 	.word	0x08012f1c

0800bc5c <serialPort4Callback>:
;

__weak  void serialPort4Callback(char *pSerialPort4Buffer)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]

};
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800bc74:	f7f5 f9c0 	bl	8000ff8 <HAL_GetTick>
 800bc78:	4603      	mov	r3, r0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <micros>:

uint32_t micros()
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800bc86:	f7ff fff3 	bl	800bc70 <millis>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc90:	fb03 f202 	mul.w	r2, r3, r2
 800bc94:	4b04      	ldr	r3, [pc, #16]	; (800bca8 <micros+0x28>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9a:	4413      	add	r3, r2
 800bc9c:	607b      	str	r3, [r7, #4]
	return t;
 800bc9e:	687b      	ldr	r3, [r7, #4]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	200096a4 	.word	0x200096a4

0800bcac <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800bcb4:	f7ff ffe4 	bl	800bc80 <micros>
 800bcb8:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800bcba:	f7ff ffe1 	bl	800bc80 <micros>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	1ad3      	subs	r3, r2, r3
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	bfcc      	ite	gt
 800bccc:	2301      	movgt	r3, #1
 800bcce:	2300      	movle	r3, #0
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d000      	beq.n	800bcd8 <delay_us+0x2c>
 800bcd6:	e7f0      	b.n	800bcba <delay_us+0xe>
}
 800bcd8:	bf00      	nop
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800bce8:	4b20      	ldr	r3, [pc, #128]	; (800bd6c <delay_ns+0x8c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	4b1f      	ldr	r3, [pc, #124]	; (800bd6c <delay_ns+0x8c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f042 0201 	orr.w	r2, r2, #1
 800bcf6:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800bcf8:	4b1c      	ldr	r3, [pc, #112]	; (800bd6c <delay_ns+0x8c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	461a      	mov	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4293      	cmp	r3, r2
 800bd04:	bfcc      	ite	gt
 800bd06:	2301      	movgt	r3, #1
 800bd08:	2300      	movle	r3, #0
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d000      	beq.n	800bd12 <delay_ns+0x32>
 800bd10:	e7f2      	b.n	800bcf8 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800bd12:	4b16      	ldr	r3, [pc, #88]	; (800bd6c <delay_ns+0x8c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	6a1a      	ldr	r2, [r3, #32]
 800bd18:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	bf0c      	ite	eq
 800bd22:	2301      	moveq	r3, #1
 800bd24:	2300      	movne	r3, #0
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d014      	beq.n	800bd56 <delay_ns+0x76>
 800bd2c:	4b0f      	ldr	r3, [pc, #60]	; (800bd6c <delay_ns+0x8c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6a1a      	ldr	r2, [r3, #32]
 800bd32:	f240 4344 	movw	r3, #1092	; 0x444
 800bd36:	4013      	ands	r3, r2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	bf0c      	ite	eq
 800bd3c:	2301      	moveq	r3, #1
 800bd3e:	2300      	movne	r3, #0
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d007      	beq.n	800bd56 <delay_ns+0x76>
 800bd46:	4b09      	ldr	r3, [pc, #36]	; (800bd6c <delay_ns+0x8c>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	4b07      	ldr	r3, [pc, #28]	; (800bd6c <delay_ns+0x8c>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f022 0201 	bic.w	r2, r2, #1
 800bd54:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800bd56:	4b05      	ldr	r3, [pc, #20]	; (800bd6c <delay_ns+0x8c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800bd5e:	bf00      	nop
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	200099a4 	.word	0x200099a4

0800bd70 <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]

	_duty=0;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689a      	ldr	r2, [r3, #8]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	605a      	str	r2, [r3, #4]
	frequency = 10;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a09      	ldr	r2, [pc, #36]	; (800bdb4 <_ZN14SOLENOID_VALVEC1Ei+0x44>)
 800bd8e:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f04f 0200 	mov.w	r2, #0
 800bd96:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bd9e:	615a      	str	r2, [r3, #20]
	attach(num);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f808 	bl	800bdb8 <_ZN14SOLENOID_VALVE6attachEi>
}
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	41200000 	.word	0x41200000

0800bdb8 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	601a      	str	r2, [r3, #0]
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	0000      	movs	r0, r0
	...

0800bdd8 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	ed93 7a04 	vldr	s14, [r3, #16]
 800bdea:	edd7 7a00 	vldr	s15, [r7]
 800bdee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf6:	dd02      	ble.n	800bdfe <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	e00d      	b.n	800be1a <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	ed93 7a05 	vldr	s14, [r3, #20]
 800be04:	edd7 7a00 	vldr	s15, [r7]
 800be08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be10:	d502      	bpl.n	800be18 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	e000      	b.n	800be1a <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800be1c:	ed97 7a00 	vldr	s14, [r7]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	edd3 7a01 	vldr	s15, [r3, #4]
 800be26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be2a:	eef0 7ae7 	vabs.f32	s15, s15
 800be2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800be32:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 800be70 <_ZN14SOLENOID_VALVE9writeDutyEf+0x98>
 800be36:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3e:	dc00      	bgt.n	800be42 <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800be40:	e011      	b.n	800be66 <_ZN14SOLENOID_VALVE9writeDutyEf+0x8e>
		 duty = dut;
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	609a      	str	r2, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	b29a      	uxth	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	edd3 7a02 	vldr	s15, [r3, #8]
 800be5c:	eeb0 0a67 	vmov.f32	s0, s15
 800be60:	4610      	mov	r0, r2
 800be62:	f7ff febf 	bl	800bbe4 <PWMWriteDuty>
}
 800be66:	bf00      	nop
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	a0b5ed8d 	.word	0xa0b5ed8d
 800be74:	3eb0c6f7 	.word	0x3eb0c6f7

0800be78 <AnaBuiltInStart>:

uint16_t ADDataBuiltIn[BUILTIN_ANA_IN_NUM];
float fADDataBuiltIn[BUILTIN_ANA_IN_NUM];

void AnaBuiltInStart()
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)(&ADDataBuiltIn[0]),BUILTIN_ANA_IN_NUM);
 800be7c:	2210      	movs	r2, #16
 800be7e:	4903      	ldr	r1, [pc, #12]	; (800be8c <AnaBuiltInStart+0x14>)
 800be80:	4803      	ldr	r0, [pc, #12]	; (800be90 <AnaBuiltInStart+0x18>)
 800be82:	f7f5 f92b 	bl	80010dc <HAL_ADC_Start_DMA>
}
 800be86:	bf00      	nop
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20009e20 	.word	0x20009e20
 800be90:	200010d0 	.word	0x200010d0

0800be94 <AnalogRead_BuiltIn>:
		fADDataBuiltIn[i]=ADDataBuiltIn[i]/4096.0f*3.3f;

}*/

float AnalogRead_BuiltIn(int num)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
	if(num>=0 && num<BUILTIN_ANA_IN_NUM)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	db1e      	blt.n	800bee0 <AnalogRead_BuiltIn+0x4c>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b0f      	cmp	r3, #15
 800bea6:	dc1b      	bgt.n	800bee0 <AnalogRead_BuiltIn+0x4c>
	{
		fADDataBuiltIn[num]=ADDataBuiltIn[num]/4096.0f*3.3f;
 800bea8:	4a13      	ldr	r2, [pc, #76]	; (800bef8 <AnalogRead_BuiltIn+0x64>)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beb0:	ee07 3a90 	vmov	s15, r3
 800beb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800beb8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800befc <AnalogRead_BuiltIn+0x68>
 800bebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bec0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800bf00 <AnalogRead_BuiltIn+0x6c>
 800bec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bec8:	4a0e      	ldr	r2, [pc, #56]	; (800bf04 <AnalogRead_BuiltIn+0x70>)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	edc3 7a00 	vstr	s15, [r3]
		return fADDataBuiltIn[num];
 800bed4:	4a0b      	ldr	r2, [pc, #44]	; (800bf04 <AnalogRead_BuiltIn+0x70>)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	e001      	b.n	800bee4 <AnalogRead_BuiltIn+0x50>
	}
	else
		return 0;
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	ee07 3a90 	vmov	s15, r3
}
 800bee8:	eeb0 0a67 	vmov.f32	s0, s15
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	20009e20 	.word	0x20009e20
 800befc:	45800000 	.word	0x45800000
 800bf00:	40533333 	.word	0x40533333
 800bf04:	20009de0 	.word	0x20009de0

0800bf08 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3301      	adds	r3, #1
 800bf18:	ee07 3a90 	vmov	s15, r3
 800bf1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf20:	edd7 7a00 	vldr	s15, [r7]
 800bf24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bf2c:	eeb0 0b47 	vmov.f64	d0, d7
 800bf30:	f002 f830 	bl	800df94 <round>
 800bf34:	eeb0 7b40 	vmov.f64	d7, d0
 800bf38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bf3c:	ee17 3a90 	vmov	r3, s15
 800bf40:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	bf28      	it	cs
 800bf4c:	4613      	movcs	r3, r2
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800bf56:	b480      	push	{r7}
 800bf58:	b085      	sub	sp, #20
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6a:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	3301      	adds	r3, #1
 800bf72:	ee07 3a90 	vmov	s15, r3
 800bf76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf7a:	ed97 7a03 	vldr	s14, [r7, #12]
 800bf7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bf82:	eef0 7a66 	vmov.f32	s15, s13
}
 800bf86:	eeb0 0a67 	vmov.f32	s0, s15
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a0f      	ldr	r2, [pc, #60]	; (800bfe0 <getTIM_SOURCECLK+0x4c>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d013      	beq.n	800bfce <getTIM_SOURCECLK+0x3a>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a0e      	ldr	r2, [pc, #56]	; (800bfe4 <getTIM_SOURCECLK+0x50>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d00e      	beq.n	800bfce <getTIM_SOURCECLK+0x3a>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a0c      	ldr	r2, [pc, #48]	; (800bfe8 <getTIM_SOURCECLK+0x54>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d009      	beq.n	800bfce <getTIM_SOURCECLK+0x3a>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a0b      	ldr	r2, [pc, #44]	; (800bfec <getTIM_SOURCECLK+0x58>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d004      	beq.n	800bfce <getTIM_SOURCECLK+0x3a>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a09      	ldr	r2, [pc, #36]	; (800bff0 <getTIM_SOURCECLK+0x5c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d101      	bne.n	800bfd2 <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800bfce:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <getTIM_SOURCECLK+0x60>)
 800bfd0:	e000      	b.n	800bfd4 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800bfd2:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <getTIM_SOURCECLK+0x64>)
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	40010000 	.word	0x40010000
 800bfe4:	40010400 	.word	0x40010400
 800bfe8:	40014000 	.word	0x40014000
 800bfec:	40014400 	.word	0x40014400
 800bff0:	40014800 	.word	0x40014800
 800bff4:	0cdfe600 	.word	0x0cdfe600
 800bff8:	066ff300 	.word	0x066ff300

0800bffc <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800bffc:	b590      	push	{r4, r7, lr}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	ed87 0a00 	vstr	s0, [r7]
 800c008:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c00a:	88fb      	ldrh	r3, [r7, #6]
 800c00c:	4a48      	ldr	r2, [pc, #288]	; (800c130 <PWMBuiltIn_writeDuty+0x134>)
 800c00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d112      	bne.n	800c03c <PWMBuiltIn_writeDuty+0x40>
 800c016:	88fb      	ldrh	r3, [r7, #6]
 800c018:	4a46      	ldr	r2, [pc, #280]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c022:	88fb      	ldrh	r3, [r7, #6]
 800c024:	4a43      	ldr	r2, [pc, #268]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c02a:	681c      	ldr	r4, [r3, #0]
 800c02c:	ed97 0a00 	vldr	s0, [r7]
 800c030:	4608      	mov	r0, r1
 800c032:	f7ff ff69 	bl	800bf08 <duty2CCR>
 800c036:	4603      	mov	r3, r0
 800c038:	6363      	str	r3, [r4, #52]	; 0x34

}
 800c03a:	e075      	b.n	800c128 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c03c:	88fb      	ldrh	r3, [r7, #6]
 800c03e:	4a3c      	ldr	r2, [pc, #240]	; (800c130 <PWMBuiltIn_writeDuty+0x134>)
 800c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c044:	2b04      	cmp	r3, #4
 800c046:	d112      	bne.n	800c06e <PWMBuiltIn_writeDuty+0x72>
 800c048:	88fb      	ldrh	r3, [r7, #6]
 800c04a:	4a3a      	ldr	r2, [pc, #232]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c054:	88fb      	ldrh	r3, [r7, #6]
 800c056:	4a37      	ldr	r2, [pc, #220]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c05c:	681c      	ldr	r4, [r3, #0]
 800c05e:	ed97 0a00 	vldr	s0, [r7]
 800c062:	4608      	mov	r0, r1
 800c064:	f7ff ff50 	bl	800bf08 <duty2CCR>
 800c068:	4603      	mov	r3, r0
 800c06a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c06c:	e05c      	b.n	800c128 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c06e:	88fb      	ldrh	r3, [r7, #6]
 800c070:	4a2f      	ldr	r2, [pc, #188]	; (800c130 <PWMBuiltIn_writeDuty+0x134>)
 800c072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c076:	2b08      	cmp	r3, #8
 800c078:	d112      	bne.n	800c0a0 <PWMBuiltIn_writeDuty+0xa4>
 800c07a:	88fb      	ldrh	r3, [r7, #6]
 800c07c:	4a2d      	ldr	r2, [pc, #180]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c086:	88fb      	ldrh	r3, [r7, #6]
 800c088:	4a2a      	ldr	r2, [pc, #168]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c08e:	681c      	ldr	r4, [r3, #0]
 800c090:	ed97 0a00 	vldr	s0, [r7]
 800c094:	4608      	mov	r0, r1
 800c096:	f7ff ff37 	bl	800bf08 <duty2CCR>
 800c09a:	4603      	mov	r3, r0
 800c09c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800c09e:	e043      	b.n	800c128 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c0a0:	88fb      	ldrh	r3, [r7, #6]
 800c0a2:	4a23      	ldr	r2, [pc, #140]	; (800c130 <PWMBuiltIn_writeDuty+0x134>)
 800c0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0a8:	2b0c      	cmp	r3, #12
 800c0aa:	d112      	bne.n	800c0d2 <PWMBuiltIn_writeDuty+0xd6>
 800c0ac:	88fb      	ldrh	r3, [r7, #6]
 800c0ae:	4a21      	ldr	r2, [pc, #132]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c0b8:	88fb      	ldrh	r3, [r7, #6]
 800c0ba:	4a1e      	ldr	r2, [pc, #120]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c0:	681c      	ldr	r4, [r3, #0]
 800c0c2:	ed97 0a00 	vldr	s0, [r7]
 800c0c6:	4608      	mov	r0, r1
 800c0c8:	f7ff ff1e 	bl	800bf08 <duty2CCR>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	6423      	str	r3, [r4, #64]	; 0x40
}
 800c0d0:	e02a      	b.n	800c128 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c0d2:	88fb      	ldrh	r3, [r7, #6]
 800c0d4:	4a16      	ldr	r2, [pc, #88]	; (800c130 <PWMBuiltIn_writeDuty+0x134>)
 800c0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0da:	2b10      	cmp	r3, #16
 800c0dc:	d112      	bne.n	800c104 <PWMBuiltIn_writeDuty+0x108>
 800c0de:	88fb      	ldrh	r3, [r7, #6]
 800c0e0:	4a14      	ldr	r2, [pc, #80]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c0ea:	88fb      	ldrh	r3, [r7, #6]
 800c0ec:	4a11      	ldr	r2, [pc, #68]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f2:	681c      	ldr	r4, [r3, #0]
 800c0f4:	ed97 0a00 	vldr	s0, [r7]
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	f7ff ff05 	bl	800bf08 <duty2CCR>
 800c0fe:	4603      	mov	r3, r0
 800c100:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800c102:	e011      	b.n	800c128 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c104:	88fb      	ldrh	r3, [r7, #6]
 800c106:	4a0b      	ldr	r2, [pc, #44]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c110:	88fb      	ldrh	r3, [r7, #6]
 800c112:	4a08      	ldr	r2, [pc, #32]	; (800c134 <PWMBuiltIn_writeDuty+0x138>)
 800c114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c118:	681c      	ldr	r4, [r3, #0]
 800c11a:	ed97 0a00 	vldr	s0, [r7]
 800c11e:	4608      	mov	r0, r1
 800c120:	f7ff fef2 	bl	800bf08 <duty2CCR>
 800c124:	4603      	mov	r3, r0
 800c126:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd90      	pop	{r4, r7, pc}
 800c130:	2000027c 	.word	0x2000027c
 800c134:	20000214 	.word	0x20000214

0800c138 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800c138:	b590      	push	{r4, r7, lr}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	4603      	mov	r3, r0
 800c140:	ed87 0a00 	vstr	s0, [r7]
 800c144:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800c146:	edd7 7a00 	vldr	s15, [r7]
 800c14a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c14e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800c408 <PWMBuiltIn_writeFrequency+0x2d0>
 800c152:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c15a:	d501      	bpl.n	800c160 <PWMBuiltIn_writeFrequency+0x28>
 800c15c:	4bac      	ldr	r3, [pc, #688]	; (800c410 <PWMBuiltIn_writeFrequency+0x2d8>)
 800c15e:	e00b      	b.n	800c178 <PWMBuiltIn_writeFrequency+0x40>
 800c160:	edd7 7a00 	vldr	s15, [r7]
 800c164:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c414 <PWMBuiltIn_writeFrequency+0x2dc>
 800c168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c170:	dd01      	ble.n	800c176 <PWMBuiltIn_writeFrequency+0x3e>
 800c172:	4ba9      	ldr	r3, [pc, #676]	; (800c418 <PWMBuiltIn_writeFrequency+0x2e0>)
 800c174:	e000      	b.n	800c178 <PWMBuiltIn_writeFrequency+0x40>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c17e:	2301      	movs	r3, #1
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	e06f      	b.n	800c264 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800c184:	88fa      	ldrh	r2, [r7, #6]
 800c186:	49a5      	ldr	r1, [pc, #660]	; (800c41c <PWMBuiltIn_writeFrequency+0x2e4>)
 800c188:	4613      	mov	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	440b      	add	r3, r1
 800c198:	edd3 7a00 	vldr	s15, [r3]
 800c19c:	ed97 7a00 	vldr	s14, [r7]
 800c1a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a8:	d859      	bhi.n	800c25e <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800c1aa:	4a9d      	ldr	r2, [pc, #628]	; (800c420 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	499a      	ldr	r1, [pc, #616]	; (800c420 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c1b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d124      	bne.n	800c20a <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800c1c0:	4a97      	ldr	r2, [pc, #604]	; (800c420 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1c8:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800c1ca:	88fb      	ldrh	r3, [r7, #6]
 800c1cc:	4a95      	ldr	r2, [pc, #596]	; (800c424 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1d2:	ee07 3a90 	vmov	s15, r3
 800c1d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c1da:	edd7 7a00 	vldr	s15, [r7]
 800c1de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	ee07 3a90 	vmov	s15, r3
 800c1ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1f6:	ee17 1a90 	vmov	r1, s15
 800c1fa:	88fb      	ldrh	r3, [r7, #6]
 800c1fc:	4a8a      	ldr	r2, [pc, #552]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	1e4a      	subs	r2, r1, #1
 800c206:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800c208:	e02f      	b.n	800c26a <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800c20a:	88fb      	ldrh	r3, [r7, #6]
 800c20c:	4a86      	ldr	r2, [pc, #536]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4985      	ldr	r1, [pc, #532]	; (800c42c <PWMBuiltIn_writeFrequency+0x2f4>)
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c21c:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800c21e:	88fb      	ldrh	r3, [r7, #6]
 800c220:	4a80      	ldr	r2, [pc, #512]	; (800c424 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c226:	ee07 3a90 	vmov	s15, r3
 800c22a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c22e:	edd7 7a00 	vldr	s15, [r7]
 800c232:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c236:	88fb      	ldrh	r3, [r7, #6]
 800c238:	4a7b      	ldr	r2, [pc, #492]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c242:	3301      	adds	r3, #1
 800c244:	ee07 3a90 	vmov	s15, r3
 800c248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c24c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c254:	ee17 3a90 	vmov	r3, s15
 800c258:	3b01      	subs	r3, #1
 800c25a:	617b      	str	r3, [r7, #20]
			break;
 800c25c:	e005      	b.n	800c26a <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	3301      	adds	r3, #1
 800c262:	613b      	str	r3, [r7, #16]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	2b09      	cmp	r3, #9
 800c268:	dd8c      	ble.n	800c184 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800c26a:	88fb      	ldrh	r3, [r7, #6]
 800c26c:	4a6e      	ldr	r2, [pc, #440]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	429a      	cmp	r2, r3
 800c27a:	f000 80be 	beq.w	800c3fa <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c27e:	2300      	movs	r3, #0
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	e0a9      	b.n	800c3d8 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800c284:	4a68      	ldr	r2, [pc, #416]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c28c:	88fb      	ldrh	r3, [r7, #6]
 800c28e:	4966      	ldr	r1, [pc, #408]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c294:	429a      	cmp	r2, r3
 800c296:	f040 809c 	bne.w	800c3d2 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800c29a:	4a65      	ldr	r2, [pc, #404]	; (800c430 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d113      	bne.n	800c2ce <PWMBuiltIn_writeFrequency+0x196>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f8c2 	bl	800c434 <PWMBuiltIn_readDuty>
 800c2b0:	eef0 7a40 	vmov.f32	s15, s0
 800c2b4:	4a5c      	ldr	r2, [pc, #368]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2bc:	681c      	ldr	r4, [r3, #0]
 800c2be:	eeb0 0a67 	vmov.f32	s0, s15
 800c2c2:	6978      	ldr	r0, [r7, #20]
 800c2c4:	f7ff fe20 	bl	800bf08 <duty2CCR>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	6363      	str	r3, [r4, #52]	; 0x34
 800c2cc:	e07a      	b.n	800c3c4 <PWMBuiltIn_writeFrequency+0x28c>
 800c2ce:	4a58      	ldr	r2, [pc, #352]	; (800c430 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2d6:	2b04      	cmp	r3, #4
 800c2d8:	d113      	bne.n	800c302 <PWMBuiltIn_writeFrequency+0x1ca>
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 f8a8 	bl	800c434 <PWMBuiltIn_readDuty>
 800c2e4:	eef0 7a40 	vmov.f32	s15, s0
 800c2e8:	4a4f      	ldr	r2, [pc, #316]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2f0:	681c      	ldr	r4, [r3, #0]
 800c2f2:	eeb0 0a67 	vmov.f32	s0, s15
 800c2f6:	6978      	ldr	r0, [r7, #20]
 800c2f8:	f7ff fe06 	bl	800bf08 <duty2CCR>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	63a3      	str	r3, [r4, #56]	; 0x38
 800c300:	e060      	b.n	800c3c4 <PWMBuiltIn_writeFrequency+0x28c>
 800c302:	4a4b      	ldr	r2, [pc, #300]	; (800c430 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c30a:	2b08      	cmp	r3, #8
 800c30c:	d113      	bne.n	800c336 <PWMBuiltIn_writeFrequency+0x1fe>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	b29b      	uxth	r3, r3
 800c312:	4618      	mov	r0, r3
 800c314:	f000 f88e 	bl	800c434 <PWMBuiltIn_readDuty>
 800c318:	eef0 7a40 	vmov.f32	s15, s0
 800c31c:	4a42      	ldr	r2, [pc, #264]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c324:	681c      	ldr	r4, [r3, #0]
 800c326:	eeb0 0a67 	vmov.f32	s0, s15
 800c32a:	6978      	ldr	r0, [r7, #20]
 800c32c:	f7ff fdec 	bl	800bf08 <duty2CCR>
 800c330:	4603      	mov	r3, r0
 800c332:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c334:	e046      	b.n	800c3c4 <PWMBuiltIn_writeFrequency+0x28c>
 800c336:	4a3e      	ldr	r2, [pc, #248]	; (800c430 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c33e:	2b0c      	cmp	r3, #12
 800c340:	d113      	bne.n	800c36a <PWMBuiltIn_writeFrequency+0x232>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	b29b      	uxth	r3, r3
 800c346:	4618      	mov	r0, r3
 800c348:	f000 f874 	bl	800c434 <PWMBuiltIn_readDuty>
 800c34c:	eef0 7a40 	vmov.f32	s15, s0
 800c350:	4a35      	ldr	r2, [pc, #212]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c358:	681c      	ldr	r4, [r3, #0]
 800c35a:	eeb0 0a67 	vmov.f32	s0, s15
 800c35e:	6978      	ldr	r0, [r7, #20]
 800c360:	f7ff fdd2 	bl	800bf08 <duty2CCR>
 800c364:	4603      	mov	r3, r0
 800c366:	6423      	str	r3, [r4, #64]	; 0x40
 800c368:	e02c      	b.n	800c3c4 <PWMBuiltIn_writeFrequency+0x28c>
 800c36a:	4a31      	ldr	r2, [pc, #196]	; (800c430 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c372:	2b10      	cmp	r3, #16
 800c374:	d113      	bne.n	800c39e <PWMBuiltIn_writeFrequency+0x266>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 f85a 	bl	800c434 <PWMBuiltIn_readDuty>
 800c380:	eef0 7a40 	vmov.f32	s15, s0
 800c384:	4a28      	ldr	r2, [pc, #160]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c38c:	681c      	ldr	r4, [r3, #0]
 800c38e:	eeb0 0a67 	vmov.f32	s0, s15
 800c392:	6978      	ldr	r0, [r7, #20]
 800c394:	f7ff fdb8 	bl	800bf08 <duty2CCR>
 800c398:	4603      	mov	r3, r0
 800c39a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c39c:	e012      	b.n	800c3c4 <PWMBuiltIn_writeFrequency+0x28c>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f846 	bl	800c434 <PWMBuiltIn_readDuty>
 800c3a8:	eef0 7a40 	vmov.f32	s15, s0
 800c3ac:	4a1e      	ldr	r2, [pc, #120]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b4:	681c      	ldr	r4, [r3, #0]
 800c3b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ba:	6978      	ldr	r0, [r7, #20]
 800c3bc:	f7ff fda4 	bl	800bf08 <duty2CCR>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800c3c4:	4a18      	ldr	r2, [pc, #96]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b19      	cmp	r3, #25
 800c3dc:	f77f af52 	ble.w	800c284 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800c3e0:	88fb      	ldrh	r3, [r7, #6]
 800c3e2:	4a11      	ldr	r2, [pc, #68]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	62da      	str	r2, [r3, #44]	; 0x2c
 800c3ee:	88fb      	ldrh	r3, [r7, #6]
 800c3f0:	4a0d      	ldr	r2, [pc, #52]	; (800c428 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	60da      	str	r2, [r3, #12]
	}
}
 800c3fa:	bf00      	nop
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd90      	pop	{r4, r7, pc}
 800c402:	bf00      	nop
 800c404:	f3af 8000 	nop.w
 800c408:	eb851eb8 	.word	0xeb851eb8
 800c40c:	3f9eb851 	.word	0x3f9eb851
 800c410:	3cf5c28f 	.word	0x3cf5c28f
 800c414:	4bcdfe60 	.word	0x4bcdfe60
 800c418:	4bcdfe60 	.word	0x4bcdfe60
 800c41c:	20000970 	.word	0x20000970
 800c420:	20000920 	.word	0x20000920
 800c424:	200008b8 	.word	0x200008b8
 800c428:	20000214 	.word	0x20000214
 800c42c:	20000948 	.word	0x20000948
 800c430:	2000027c 	.word	0x2000027c

0800c434 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800c43e:	88fb      	ldrh	r3, [r7, #6]
 800c440:	4a2a      	ldr	r2, [pc, #168]	; (800c4ec <PWMBuiltIn_readDuty+0xb8>)
 800c442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c44a:	88fb      	ldrh	r3, [r7, #6]
 800c44c:	4a28      	ldr	r2, [pc, #160]	; (800c4f0 <PWMBuiltIn_readDuty+0xbc>)
 800c44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d106      	bne.n	800c464 <PWMBuiltIn_readDuty+0x30>
 800c456:	88fb      	ldrh	r3, [r7, #6]
 800c458:	4a24      	ldr	r2, [pc, #144]	; (800c4ec <PWMBuiltIn_readDuty+0xb8>)
 800c45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c462:	e039      	b.n	800c4d8 <PWMBuiltIn_readDuty+0xa4>
 800c464:	88fb      	ldrh	r3, [r7, #6]
 800c466:	4a22      	ldr	r2, [pc, #136]	; (800c4f0 <PWMBuiltIn_readDuty+0xbc>)
 800c468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c46c:	2b04      	cmp	r3, #4
 800c46e:	d106      	bne.n	800c47e <PWMBuiltIn_readDuty+0x4a>
 800c470:	88fb      	ldrh	r3, [r7, #6]
 800c472:	4a1e      	ldr	r2, [pc, #120]	; (800c4ec <PWMBuiltIn_readDuty+0xb8>)
 800c474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47c:	e02c      	b.n	800c4d8 <PWMBuiltIn_readDuty+0xa4>
 800c47e:	88fb      	ldrh	r3, [r7, #6]
 800c480:	4a1b      	ldr	r2, [pc, #108]	; (800c4f0 <PWMBuiltIn_readDuty+0xbc>)
 800c482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c486:	2b08      	cmp	r3, #8
 800c488:	d106      	bne.n	800c498 <PWMBuiltIn_readDuty+0x64>
 800c48a:	88fb      	ldrh	r3, [r7, #6]
 800c48c:	4a17      	ldr	r2, [pc, #92]	; (800c4ec <PWMBuiltIn_readDuty+0xb8>)
 800c48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c496:	e01f      	b.n	800c4d8 <PWMBuiltIn_readDuty+0xa4>
 800c498:	88fb      	ldrh	r3, [r7, #6]
 800c49a:	4a15      	ldr	r2, [pc, #84]	; (800c4f0 <PWMBuiltIn_readDuty+0xbc>)
 800c49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a0:	2b0c      	cmp	r3, #12
 800c4a2:	d106      	bne.n	800c4b2 <PWMBuiltIn_readDuty+0x7e>
 800c4a4:	88fb      	ldrh	r3, [r7, #6]
 800c4a6:	4a11      	ldr	r2, [pc, #68]	; (800c4ec <PWMBuiltIn_readDuty+0xb8>)
 800c4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b0:	e012      	b.n	800c4d8 <PWMBuiltIn_readDuty+0xa4>
 800c4b2:	88fb      	ldrh	r3, [r7, #6]
 800c4b4:	4a0e      	ldr	r2, [pc, #56]	; (800c4f0 <PWMBuiltIn_readDuty+0xbc>)
 800c4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ba:	2b10      	cmp	r3, #16
 800c4bc:	d106      	bne.n	800c4cc <PWMBuiltIn_readDuty+0x98>
 800c4be:	88fb      	ldrh	r3, [r7, #6]
 800c4c0:	4a0a      	ldr	r2, [pc, #40]	; (800c4ec <PWMBuiltIn_readDuty+0xb8>)
 800c4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ca:	e005      	b.n	800c4d8 <PWMBuiltIn_readDuty+0xa4>
 800c4cc:	88fb      	ldrh	r3, [r7, #6]
 800c4ce:	4a07      	ldr	r2, [pc, #28]	; (800c4ec <PWMBuiltIn_readDuty+0xb8>)
 800c4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4d8:	4619      	mov	r1, r3
 800c4da:	f7ff fd3c 	bl	800bf56 <CCR2duty>
 800c4de:	eef0 7a40 	vmov.f32	s15, s0
}
 800c4e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	20000214 	.word	0x20000214
 800c4f0:	2000027c 	.word	0x2000027c

0800c4f4 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c4fc:	4a07      	ldr	r2, [pc, #28]	; (800c51c <PWMBuiltInStartChannel+0x28>)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c504:	4a06      	ldr	r2, [pc, #24]	; (800c520 <PWMBuiltInStartChannel+0x2c>)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c50c:	4619      	mov	r1, r3
 800c50e:	f7f8 faa5 	bl	8004a5c <HAL_TIM_PWM_Start>
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	20000214 	.word	0x20000214
 800c520:	2000027c 	.word	0x2000027c

0800c524 <PWMBuiltInStopChannel>:

void PWMBuiltInStopChannel(int i)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c52c:	4a07      	ldr	r2, [pc, #28]	; (800c54c <PWMBuiltInStopChannel+0x28>)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c534:	4a06      	ldr	r2, [pc, #24]	; (800c550 <PWMBuiltInStopChannel+0x2c>)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c53c:	4619      	mov	r1, r3
 800c53e:	f7f8 fad1 	bl	8004ae4 <HAL_TIM_PWM_Stop>
}
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20000214 	.word	0x20000214
 800c550:	2000027c 	.word	0x2000027c

0800c554 <PWMBuiltInStart>:

void PWMBuiltInStart()
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c55a:	2300      	movs	r3, #0
 800c55c:	607b      	str	r3, [r7, #4]
 800c55e:	e005      	b.n	800c56c <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff ffc7 	bl	800c4f4 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	3301      	adds	r3, #1
 800c56a:	607b      	str	r3, [r7, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b19      	cmp	r3, #25
 800c570:	ddf6      	ble.n	800c560 <PWMBuiltInStart+0xc>
}
 800c572:	bf00      	nop
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c582:	2300      	movs	r3, #0
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	e06f      	b.n	800c668 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800c588:	4a3c      	ldr	r2, [pc, #240]	; (800c67c <PWMBuiltIn_init+0x100>)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c590:	4618      	mov	r0, r3
 800c592:	f7ff fcff 	bl	800bf94 <getTIM_SOURCECLK>
 800c596:	4601      	mov	r1, r0
 800c598:	4a39      	ldr	r2, [pc, #228]	; (800c680 <PWMBuiltIn_init+0x104>)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60bb      	str	r3, [r7, #8]
 800c5a4:	e04c      	b.n	800c640 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800c5a6:	4a37      	ldr	r2, [pc, #220]	; (800c684 <PWMBuiltIn_init+0x108>)
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b4:	1e5a      	subs	r2, r3, #1
 800c5b6:	4934      	ldr	r1, [pc, #208]	; (800c688 <PWMBuiltIn_init+0x10c>)
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800c5be:	4a33      	ldr	r2, [pc, #204]	; (800c68c <PWMBuiltIn_init+0x110>)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5cc:	1e5a      	subs	r2, r3, #1
 800c5ce:	4930      	ldr	r1, [pc, #192]	; (800c690 <PWMBuiltIn_init+0x114>)
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800c5d6:	4a2c      	ldr	r2, [pc, #176]	; (800c688 <PWMBuiltIn_init+0x10c>)
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	ee07 3a90 	vmov	s15, r3
 800c5e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e8:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800c5ec:	4a28      	ldr	r2, [pc, #160]	; (800c690 <PWMBuiltIn_init+0x114>)
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	ee07 3a90 	vmov	s15, r3
 800c5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fe:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800c602:	4a1f      	ldr	r2, [pc, #124]	; (800c680 <PWMBuiltIn_init+0x104>)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c612:	edd7 7a01 	vldr	s15, [r7, #4]
 800c616:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c61a:	ed97 7a00 	vldr	s14, [r7]
 800c61e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c622:	491c      	ldr	r1, [pc, #112]	; (800c694 <PWMBuiltIn_init+0x118>)
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4613      	mov	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	005b      	lsls	r3, r3, #1
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	440b      	add	r3, r1
 800c636:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	3301      	adds	r3, #1
 800c63e:	60bb      	str	r3, [r7, #8]
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2b09      	cmp	r3, #9
 800c644:	ddaf      	ble.n	800c5a6 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	b29b      	uxth	r3, r3
 800c64a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800c698 <PWMBuiltIn_init+0x11c>
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff fcd4 	bl	800bffc <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	b29b      	uxth	r3, r3
 800c658:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c69c <PWMBuiltIn_init+0x120>
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff fd6b 	bl	800c138 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3301      	adds	r3, #1
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b19      	cmp	r3, #25
 800c66c:	dd8c      	ble.n	800c588 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800c66e:	f7ff ff71 	bl	800c554 <PWMBuiltInStart>
}
 800c672:	bf00      	nop
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	20000214 	.word	0x20000214
 800c680:	200008b8 	.word	0x200008b8
 800c684:	200002e4 	.word	0x200002e4
 800c688:	20000920 	.word	0x20000920
 800c68c:	2000030c 	.word	0x2000030c
 800c690:	20000948 	.word	0x20000948
 800c694:	20000970 	.word	0x20000970
 800c698:	00000000 	.word	0x00000000
 800c69c:	42200000 	.word	0x42200000

0800c6a0 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800c6ae:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b4:	7afb      	ldrb	r3, [r7, #11]
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	601a      	str	r2, [r3, #0]
}
 800c6be:	bf00      	nop
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
	...

0800c6cc <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c6dc:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d15b      	bne.n	800c7a0 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	ed93 7a00 	vldr	s14, [r3]
 800c6ee:	edd7 7a03 	vldr	s15, [r7, #12]
 800c6f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c6fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800c702:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c706:	edd7 7a03 	vldr	s15, [r7, #12]
 800c70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c712:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c716:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c71a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	ed93 7a00 	vldr	s14, [r3]
 800c724:	edd7 7a03 	vldr	s15, [r7, #12]
 800c728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c72c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c730:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c734:	edd7 7a03 	vldr	s15, [r7, #12]
 800c738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c740:	3304      	adds	r3, #4
 800c742:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c74a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	ed93 7a00 	vldr	s14, [r3]
 800c754:	edd7 7a03 	vldr	s15, [r7, #12]
 800c758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c75c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c760:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c764:	edd7 7a03 	vldr	s15, [r7, #12]
 800c768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c770:	3308      	adds	r3, #8
 800c772:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c77a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	ed93 7a00 	vldr	s14, [r3]
 800c784:	edd7 7a03 	vldr	s15, [r7, #12]
 800c788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c790:	330c      	adds	r3, #12
 800c792:	edd7 7a03 	vldr	s15, [r7, #12]
 800c796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c79a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800c79e:	e0fc      	b.n	800c99a <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	f040 80f7 	bne.w	800c99a <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	ed93 7a00 	vldr	s14, [r3]
 800c7b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7c2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7da:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e6:	eddf 6a70 	vldr	s13, [pc, #448]	; 800c9a8 <kalman_setQ+0x2dc>
 800c7ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7ee:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	ed93 7a00 	vldr	s14, [r3]
 800c7f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c800:	edd7 7a03 	vldr	s15, [r7, #12]
 800c804:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c808:	edd7 7a03 	vldr	s15, [r7, #12]
 800c80c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c810:	edd7 7a03 	vldr	s15, [r7, #12]
 800c814:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c818:	edd7 7a03 	vldr	s15, [r7, #12]
 800c81c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c824:	3304      	adds	r3, #4
 800c826:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800c82a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c82e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	ed93 7a00 	vldr	s14, [r3]
 800c838:	edd7 7a03 	vldr	s15, [r7, #12]
 800c83c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c840:	edd7 7a03 	vldr	s15, [r7, #12]
 800c844:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c848:	edd7 7a03 	vldr	s15, [r7, #12]
 800c84c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c850:	edd7 7a03 	vldr	s15, [r7, #12]
 800c854:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c85c:	3308      	adds	r3, #8
 800c85e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c866:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	ed93 7a00 	vldr	s14, [r3]
 800c870:	edd7 7a03 	vldr	s15, [r7, #12]
 800c874:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c878:	edd7 7a03 	vldr	s15, [r7, #12]
 800c87c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c880:	edd7 7a03 	vldr	s15, [r7, #12]
 800c884:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c888:	edd7 7a03 	vldr	s15, [r7, #12]
 800c88c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c890:	edd7 7a03 	vldr	s15, [r7, #12]
 800c894:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89c:	330c      	adds	r3, #12
 800c89e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800c8a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c8a6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	ed93 7a00 	vldr	s14, [r3]
 800c8b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8c8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d4:	3310      	adds	r3, #16
 800c8d6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c8da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c8de:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	ed93 7a00 	vldr	s14, [r3]
 800c8e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c904:	3314      	adds	r3, #20
 800c906:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c90a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c90e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	ed93 7a00 	vldr	s14, [r3]
 800c918:	edd7 7a03 	vldr	s15, [r7, #12]
 800c91c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c920:	edd7 7a03 	vldr	s15, [r7, #12]
 800c924:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c928:	edd7 7a03 	vldr	s15, [r7, #12]
 800c92c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c930:	edd7 7a03 	vldr	s15, [r7, #12]
 800c934:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c93c:	3318      	adds	r3, #24
 800c93e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c946:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	ed93 7a00 	vldr	s14, [r3]
 800c950:	edd7 7a03 	vldr	s15, [r7, #12]
 800c954:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c958:	edd7 7a03 	vldr	s15, [r7, #12]
 800c95c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c960:	edd7 7a03 	vldr	s15, [r7, #12]
 800c964:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96c:	331c      	adds	r3, #28
 800c96e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c976:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	ed93 7a00 	vldr	s14, [r3]
 800c980:	edd7 7a03 	vldr	s15, [r7, #12]
 800c984:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c98c:	3320      	adds	r3, #32
 800c98e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c996:	edc3 7a00 	vstr	s15, [r3]
}
 800c99a:	bf00      	nop
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	42100000 	.word	0x42100000

0800c9ac <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d105      	bne.n	800c9cc <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	6812      	ldr	r2, [r2, #0]
 800c9c8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800c9ca:	e039      	b.n	800ca40 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d134      	bne.n	800ca40 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9da:	683a      	ldr	r2, [r7, #0]
 800c9dc:	6812      	ldr	r2, [r2, #0]
 800c9de:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	f04f 0200 	mov.w	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	f04f 0200 	mov.w	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9fc:	330c      	adds	r3, #12
 800c9fe:	f04f 0200 	mov.w	r2, #0
 800ca02:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca08:	3310      	adds	r3, #16
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	6852      	ldr	r2, [r2, #4]
 800ca0e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca14:	3314      	adds	r3, #20
 800ca16:	f04f 0200 	mov.w	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca20:	3318      	adds	r3, #24
 800ca22:	f04f 0200 	mov.w	r2, #0
 800ca26:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca2c:	331c      	adds	r3, #28
 800ca2e:	f04f 0200 	mov.w	r2, #0
 800ca32:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca38:	3320      	adds	r3, #32
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	6892      	ldr	r2, [r2, #8]
 800ca3e:	601a      	str	r2, [r3, #0]
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	ed87 0a03 	vstr	s0, [r7, #12]
 800ca56:	edc7 0a02 	vstr	s1, [r7, #8]
 800ca5a:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800ca5e:	f107 0108 	add.w	r1, r7, #8
 800ca62:	f107 030c 	add.w	r3, r7, #12
 800ca66:	2200      	movs	r2, #0
 800ca68:	ed97 0a01 	vldr	s0, [r7, #4]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f000 f807 	bl	800ca80 <KALMANFILTER>
 800ca72:	6178      	str	r0, [r7, #20]
	return pk;
 800ca74:	697b      	ldr	r3, [r7, #20]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3718      	adds	r7, #24
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	ed87 0a01 	vstr	s0, [r7, #4]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800ca92:	20c4      	movs	r0, #196	; 0xc4
 800ca94:	f001 fb52 	bl	800e13c <malloc>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <KALMANFILTER+0x26>
		return NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	e10e      	b.n	800ccc4 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800caa6:	22c4      	movs	r2, #196	; 0xc4
 800caa8:	2100      	movs	r1, #0
 800caaa:	6978      	ldr	r0, [r7, #20]
 800caac:	f001 fb59 	bl	800e162 <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	887a      	ldrh	r2, [r7, #2]
 800cab4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800cab8:	6978      	ldr	r0, [r7, #20]
 800caba:	f000 f90f 	bl	800ccdc <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	4a82      	ldr	r2, [pc, #520]	; (800cccc <KALMANFILTER+0x24c>)
 800cac2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	4a81      	ldr	r2, [pc, #516]	; (800ccd0 <KALMANFILTER+0x250>)
 800caca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	4a80      	ldr	r2, [pc, #512]	; (800ccd4 <KALMANFILTER+0x254>)
 800cad2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	4a7f      	ldr	r2, [pc, #508]	; (800ccd8 <KALMANFILTER+0x258>)
 800cada:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800cae6:	887b      	ldrh	r3, [r7, #2]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	f040 8095 	bne.w	800cc18 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	695b      	ldr	r3, [r3, #20]
 800caf2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800caf6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	3304      	adds	r3, #4
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800cb02:	ed97 7a01 	vldr	s14, [r7, #4]
 800cb06:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	695b      	ldr	r3, [r3, #20]
 800cb12:	3308      	adds	r3, #8
 800cb14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cb18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb1c:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	695b      	ldr	r3, [r3, #20]
 800cb24:	330c      	adds	r3, #12
 800cb26:	f04f 0200 	mov.w	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	3310      	adds	r3, #16
 800cb32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cb36:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	695b      	ldr	r3, [r3, #20]
 800cb3c:	3314      	adds	r3, #20
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	3318      	adds	r3, #24
 800cb48:	f04f 0200 	mov.w	r2, #0
 800cb4c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	331c      	adds	r3, #28
 800cb54:	f04f 0200 	mov.w	r2, #0
 800cb58:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	695b      	ldr	r3, [r3, #20]
 800cb5e:	3320      	adds	r3, #32
 800cb60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cb64:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	f04f 0200 	mov.w	r2, #0
 800cb6e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	69db      	ldr	r3, [r3, #28]
 800cb74:	3304      	adds	r3, #4
 800cb76:	f04f 0200 	mov.w	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	69db      	ldr	r3, [r3, #28]
 800cb80:	3308      	adds	r3, #8
 800cb82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cb86:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cb90:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb96:	3304      	adds	r3, #4
 800cb98:	f04f 0200 	mov.w	r2, #0
 800cb9c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba2:	3308      	adds	r3, #8
 800cba4:	f04f 0200 	mov.w	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbae:	330c      	adds	r3, #12
 800cbb0:	f04f 0200 	mov.w	r2, #0
 800cbb4:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbba:	3310      	adds	r3, #16
 800cbbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cbc0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc6:	3314      	adds	r3, #20
 800cbc8:	f04f 0200 	mov.w	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd2:	3318      	adds	r3, #24
 800cbd4:	f04f 0200 	mov.w	r2, #0
 800cbd8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbde:	331c      	adds	r3, #28
 800cbe0:	f04f 0200 	mov.w	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	3320      	adds	r3, #32
 800cbec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cbf0:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f103 0210 	add.w	r2, r3, #16
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	3350      	adds	r3, #80	; 0x50
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f7f4 f95f 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	f103 0220 	add.w	r2, r3, #32
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	3358      	adds	r3, #88	; 0x58
 800cc0e:	4619      	mov	r1, r3
 800cc10:	4610      	mov	r0, r2
 800cc12:	f7f4 f956 	bl	8000ec2 <arm_mat_trans_f32>
 800cc16:	e048      	b.n	800ccaa <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800cc18:	887b      	ldrh	r3, [r7, #2]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d145      	bne.n	800ccaa <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc26:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	3308      	adds	r3, #8
 800cc38:	f04f 0200 	mov.w	r2, #0
 800cc3c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	330c      	adds	r3, #12
 800cc44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc48:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800cc4a:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc4e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	69db      	ldr	r3, [r3, #28]
 800cc5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc62:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	69db      	ldr	r3, [r3, #28]
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc78:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7e:	3304      	adds	r3, #4
 800cc80:	f04f 0200 	mov.w	r2, #0
 800cc84:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f103 0210 	add.w	r2, r3, #16
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	3350      	adds	r3, #80	; 0x50
 800cc90:	4619      	mov	r1, r3
 800cc92:	4610      	mov	r0, r2
 800cc94:	f7f4 f915 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	f103 0220 	add.w	r2, r3, #32
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	3358      	adds	r3, #88	; 0x58
 800cca2:	4619      	mov	r1, r3
 800cca4:	4610      	mov	r0, r2
 800cca6:	f7f4 f90c 	bl	8000ec2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ccb0:	68f9      	ldr	r1, [r7, #12]
 800ccb2:	6978      	ldr	r0, [r7, #20]
 800ccb4:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ccbc:	68b9      	ldr	r1, [r7, #8]
 800ccbe:	6978      	ldr	r0, [r7, #20]
 800ccc0:	4798      	blx	r3

	return ptKalmanFilter;
 800ccc2:	697b      	ldr	r3, [r7, #20]
	
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	0800d04d 	.word	0x0800d04d
 800ccd0:	0800c6cd 	.word	0x0800c6cd
 800ccd4:	0800c9ad 	.word	0x0800c9ad
 800ccd8:	0800c6a1 	.word	0x0800c6a1

0800ccdc <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	f040 80d9 	bne.w	800cea2 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800ccf0:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800ccf4:	f001 fa22 	bl	800e13c <malloc>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd08:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800cd0a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800cd0e:	2100      	movs	r1, #0
 800cd10:	68b8      	ldr	r0, [r7, #8]
 800cd12:	f001 fa26 	bl	800e162 <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	2103      	movs	r1, #3
 800cd1e:	f7f3 fcff 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f103 0010 	add.w	r0, r3, #16
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	330c      	adds	r3, #12
 800cd2c:	2203      	movs	r2, #3
 800cd2e:	2103      	movs	r1, #3
 800cd30:	f7f3 fcf6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f103 0018 	add.w	r0, r3, #24
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	3330      	adds	r3, #48	; 0x30
 800cd3e:	2201      	movs	r2, #1
 800cd40:	2103      	movs	r1, #3
 800cd42:	f7f3 fced 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f103 0008 	add.w	r0, r3, #8
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	333c      	adds	r3, #60	; 0x3c
 800cd50:	2201      	movs	r2, #1
 800cd52:	2101      	movs	r1, #1
 800cd54:	f7f3 fce4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f103 0020 	add.w	r0, r3, #32
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	3340      	adds	r3, #64	; 0x40
 800cd62:	2203      	movs	r2, #3
 800cd64:	2103      	movs	r1, #3
 800cd66:	f7f3 fcdb 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	33f4      	adds	r3, #244	; 0xf4
 800cd74:	2201      	movs	r2, #1
 800cd76:	2103      	movs	r1, #3
 800cd78:	f7f3 fcd2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	3364      	adds	r3, #100	; 0x64
 800cd86:	2203      	movs	r2, #3
 800cd88:	2103      	movs	r1, #3
 800cd8a:	f7f3 fcc9 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	3388      	adds	r3, #136	; 0x88
 800cd98:	2203      	movs	r2, #3
 800cd9a:	2103      	movs	r1, #3
 800cd9c:	f7f3 fcc0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	33ac      	adds	r3, #172	; 0xac
 800cdaa:	2203      	movs	r2, #3
 800cdac:	2103      	movs	r1, #3
 800cdae:	f7f3 fcb7 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	33d0      	adds	r3, #208	; 0xd0
 800cdbc:	2203      	movs	r2, #3
 800cdbe:	2103      	movs	r1, #3
 800cdc0:	f7f3 fcae 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	2103      	movs	r1, #3
 800cdd4:	f7f3 fca4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cde4:	2203      	movs	r2, #3
 800cde6:	2103      	movs	r1, #3
 800cde8:	f7f3 fc9a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800cdf8:	2203      	movs	r2, #3
 800cdfa:	2103      	movs	r1, #3
 800cdfc:	f7f3 fc90 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800ce0c:	2203      	movs	r2, #3
 800ce0e:	2103      	movs	r1, #3
 800ce10:	f7f3 fc86 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ce20:	2203      	movs	r2, #3
 800ce22:	2103      	movs	r1, #3
 800ce24:	f7f3 fc7c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ce34:	2203      	movs	r2, #3
 800ce36:	2103      	movs	r1, #3
 800ce38:	f7f3 fc72 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800ce48:	2203      	movs	r2, #3
 800ce4a:	2103      	movs	r1, #3
 800ce4c:	f7f3 fc68 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	2103      	movs	r1, #3
 800ce60:	f7f3 fc5e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ce70:	2201      	movs	r2, #1
 800ce72:	2103      	movs	r1, #3
 800ce74:	f7f3 fc54 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ce84:	2201      	movs	r2, #1
 800ce86:	2103      	movs	r1, #3
 800ce88:	f7f3 fc4a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800ce98:	2201      	movs	r2, #1
 800ce9a:	2103      	movs	r1, #3
 800ce9c:	f7f3 fc40 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800cea0:	e0d0      	b.n	800d044 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f040 80cb 	bne.w	800d044 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800ceae:	20bc      	movs	r0, #188	; 0xbc
 800ceb0:	f001 f944 	bl	800e13c <malloc>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cec4:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800cec6:	22bc      	movs	r2, #188	; 0xbc
 800cec8:	2100      	movs	r1, #0
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f001 f949 	bl	800e162 <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2201      	movs	r2, #1
 800ced6:	2102      	movs	r1, #2
 800ced8:	f7f3 fc22 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f103 0010 	add.w	r0, r3, #16
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	3308      	adds	r3, #8
 800cee6:	2202      	movs	r2, #2
 800cee8:	2102      	movs	r1, #2
 800ceea:	f7f3 fc19 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f103 0018 	add.w	r0, r3, #24
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	3318      	adds	r3, #24
 800cef8:	2201      	movs	r2, #1
 800cefa:	2102      	movs	r1, #2
 800cefc:	f7f3 fc10 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f103 0008 	add.w	r0, r3, #8
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3320      	adds	r3, #32
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	f7f3 fc07 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f103 0020 	add.w	r0, r3, #32
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3324      	adds	r3, #36	; 0x24
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	2101      	movs	r1, #1
 800cf20:	f7f3 fbfe 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3358      	adds	r3, #88	; 0x58
 800cf2e:	2201      	movs	r2, #1
 800cf30:	2101      	movs	r1, #1
 800cf32:	f7f3 fbf5 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	332c      	adds	r3, #44	; 0x2c
 800cf40:	2202      	movs	r2, #2
 800cf42:	2102      	movs	r1, #2
 800cf44:	f7f3 fbec 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	333c      	adds	r3, #60	; 0x3c
 800cf52:	2202      	movs	r2, #2
 800cf54:	2102      	movs	r1, #2
 800cf56:	f7f3 fbe3 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	334c      	adds	r3, #76	; 0x4c
 800cf64:	2201      	movs	r2, #1
 800cf66:	2101      	movs	r1, #1
 800cf68:	f7f3 fbda 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3350      	adds	r3, #80	; 0x50
 800cf76:	2201      	movs	r2, #1
 800cf78:	2102      	movs	r1, #2
 800cf7a:	f7f3 fbd1 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	335c      	adds	r3, #92	; 0x5c
 800cf88:	2202      	movs	r2, #2
 800cf8a:	2102      	movs	r1, #2
 800cf8c:	f7f3 fbc8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	336c      	adds	r3, #108	; 0x6c
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	2102      	movs	r1, #2
 800cf9e:	f7f3 fbbf 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	3374      	adds	r3, #116	; 0x74
 800cfac:	2201      	movs	r2, #1
 800cfae:	2102      	movs	r1, #2
 800cfb0:	f7f3 fbb6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	337c      	adds	r3, #124	; 0x7c
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	2102      	movs	r1, #2
 800cfc2:	f7f3 fbad 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	338c      	adds	r3, #140	; 0x8c
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	2102      	movs	r1, #2
 800cfd4:	f7f3 fba4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	339c      	adds	r3, #156	; 0x9c
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	f7f3 fb9b 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	33a0      	adds	r3, #160	; 0xa0
 800cff4:	2201      	movs	r2, #1
 800cff6:	2101      	movs	r1, #1
 800cff8:	f7f3 fb92 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	33a4      	adds	r3, #164	; 0xa4
 800d006:	2201      	movs	r2, #1
 800d008:	2101      	movs	r1, #1
 800d00a:	f7f3 fb89 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	33a8      	adds	r3, #168	; 0xa8
 800d018:	2201      	movs	r2, #1
 800d01a:	2101      	movs	r1, #1
 800d01c:	f7f3 fb80 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	33ac      	adds	r3, #172	; 0xac
 800d02a:	2201      	movs	r2, #1
 800d02c:	2102      	movs	r1, #2
 800d02e:	f7f3 fb77 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	33b4      	adds	r3, #180	; 0xb4
 800d03c:	2201      	movs	r2, #1
 800d03e:	2102      	movs	r1, #2
 800d040:	f7f3 fb6e 	bl	8000720 <arm_mat_init_f32>
}
 800d044:	bf00      	nop
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f103 0010 	add.w	r0, r3, #16
 800d05a:	6879      	ldr	r1, [r7, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	3398      	adds	r3, #152	; 0x98
 800d060:	461a      	mov	r2, r3
 800d062:	f7f3 fdad 	bl	8000bc0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f103 0010 	add.w	r0, r3, #16
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3368      	adds	r3, #104	; 0x68
 800d076:	461a      	mov	r2, r3
 800d078:	f7f3 fda2 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	3370      	adds	r3, #112	; 0x70
 800d08c:	461a      	mov	r2, r3
 800d08e:	f7f3 fd97 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	3368      	adds	r3, #104	; 0x68
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	f7f3 faa4 	bl	80005f0 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	3360      	adds	r3, #96	; 0x60
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	f7f3 fd81 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f103 0020 	add.w	r0, r3, #32
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	3378      	adds	r3, #120	; 0x78
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	f7f3 fd76 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3380      	adds	r3, #128	; 0x80
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	f7f3 fa83 	bl	80005f0 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3378      	adds	r3, #120	; 0x78
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f7f3 fb2a 	bl	8000750 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	3348      	adds	r3, #72	; 0x48
 800d10c:	461a      	mov	r2, r3
 800d10e:	f7f3 fd57 	bl	8000bc0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f103 0020 	add.w	r0, r3, #32
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3388      	adds	r3, #136	; 0x88
 800d122:	461a      	mov	r2, r3
 800d124:	f7f3 fd4c 	bl	8000bc0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	3390      	adds	r3, #144	; 0x90
 800d138:	461a      	mov	r2, r3
 800d13a:	f7f3 fe2a 	bl	8000d92 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	33a0      	adds	r3, #160	; 0xa0
 800d14e:	461a      	mov	r2, r3
 800d150:	f7f3 fd36 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	33a0      	adds	r3, #160	; 0xa0
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	4619      	mov	r1, r3
 800d162:	f7f3 fa45 	bl	80005f0 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f103 0120 	add.w	r1, r3, #32
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	3330      	adds	r3, #48	; 0x30
 800d176:	461a      	mov	r2, r3
 800d178:	f7f3 fd22 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3370      	adds	r3, #112	; 0x70
 800d18c:	461a      	mov	r2, r3
 800d18e:	f7f3 fd17 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	3330      	adds	r3, #48	; 0x30
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f7f3 fdf5 	bl	8000d92 <arm_mat_sub_f32>

}
 800d1a8:	bf00      	nop
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <stepKF>:


float stepKF(KALMAN_FILTER *ptKalmanFilter,float x)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	ed87 0a00 	vstr	s0, [r7]
ptKalmanFilter->store(ptKalmanFilter, 0 ,x);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d1c2:	ed97 0a00 	vldr	s0, [r7]
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	4798      	blx	r3
	ptKalmanFilter->step(ptKalmanFilter);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	4798      	blx	r3
	return ptKalmanFilter->X.pData[0];
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	ee07 3a90 	vmov	s15, r3
}
 800d1e0:	eeb0 0a67 	vmov.f32	s0, s15
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
	...

0800d1ec <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b089      	sub	sp, #36	; 0x24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	61f8      	str	r0, [r7, #28]
 800d1f4:	ed87 0a06 	vstr	s0, [r7, #24]
 800d1f8:	edc7 0a05 	vstr	s1, [r7, #20]
 800d1fc:	ed87 1a04 	vstr	s2, [r7, #16]
 800d200:	edc7 1a03 	vstr	s3, [r7, #12]
 800d204:	ed87 2a02 	vstr	s4, [r7, #8]
 800d208:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	69ba      	ldr	r2, [r7, #24]
 800d210:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	693a      	ldr	r2, [r7, #16]
 800d21c:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d224:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	f04f 0200 	mov.w	r2, #0
 800d22c:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d23a:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	f04f 0200 	mov.w	r2, #0
 800d242:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	4a2f      	ldr	r2, [pc, #188]	; (800d304 <initPID+0x118>)
 800d248:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	edd3 6a02 	vldr	s13, [r3, #8]
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	ed93 7a00 	vldr	s14, [r3]
 800d256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	edd3 6a08 	vldr	s13, [r3, #32]
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	ed93 7a08 	vldr	s14, [r3, #32]
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	ed93 6a07 	vldr	s12, [r3, #28]
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	edd3 7a05 	vldr	s15, [r3, #20]
 800d278:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d27c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	edd3 7a00 	vldr	s15, [r3]
 800d290:	eeb1 7a67 	vneg.f32	s14, s15
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	edd3 7a07 	vldr	s15, [r3, #28]
 800d29a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d2a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	f04f 0200 	mov.w	r2, #0
 800d2b4:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	f04f 0200 	mov.w	r2, #0
 800d2bc:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	f04f 0200 	mov.w	r2, #0
 800d2c4:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	f04f 0200 	mov.w	r2, #0
 800d2cc:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800d2d4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d2d8:	eef1 7a67 	vneg.f32	s15, s15
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800d2e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2ec:	eef1 7a67 	vneg.f32	s15, s15
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800d2f6:	bf00      	nop
 800d2f8:	3724      	adds	r7, #36	; 0x24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	41700000 	.word	0x41700000

0800d308 <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b088      	sub	sp, #32
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	ed87 0a05 	vstr	s0, [r7, #20]
 800d312:	edc7 0a04 	vstr	s1, [r7, #16]
 800d316:	ed87 1a03 	vstr	s2, [r7, #12]
 800d31a:	edc7 1a02 	vstr	s3, [r7, #8]
 800d31e:	ed87 2a01 	vstr	s4, [r7, #4]
 800d322:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800d326:	2054      	movs	r0, #84	; 0x54
 800d328:	f000 ff08 	bl	800e13c <malloc>
 800d32c:	4603      	mov	r3, r0
 800d32e:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d101      	bne.n	800d33a <newPID+0x32>
		return NULL;
 800d336:	2300      	movs	r3, #0
 800d338:	e014      	b.n	800d364 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800d33a:	2254      	movs	r2, #84	; 0x54
 800d33c:	2100      	movs	r1, #0
 800d33e:	69f8      	ldr	r0, [r7, #28]
 800d340:	f000 ff0f 	bl	800e162 <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800d344:	edd7 2a00 	vldr	s5, [r7]
 800d348:	ed97 2a01 	vldr	s4, [r7, #4]
 800d34c:	edd7 1a02 	vldr	s3, [r7, #8]
 800d350:	ed97 1a03 	vldr	s2, [r7, #12]
 800d354:	edd7 0a04 	vldr	s1, [r7, #16]
 800d358:	ed97 0a05 	vldr	s0, [r7, #20]
 800d35c:	69f8      	ldr	r0, [r7, #28]
 800d35e:	f7ff ff45 	bl	800d1ec <initPID>
	return pp;
 800d362:	69fb      	ldr	r3, [r7, #28]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3720      	adds	r7, #32
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <usart1CommandHandler>:




void usart1CommandHandler()
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	af00      	add	r7, sp, #0
	serialPort1Callback((char *)Usart1Device.RxBuf);
 800d370:	4802      	ldr	r0, [pc, #8]	; (800d37c <usart1CommandHandler+0x10>)
 800d372:	f7fe fc65 	bl	800bc40 <serialPort1Callback>

}
 800d376:	bf00      	nop
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	2000c882 	.word	0x2000c882

0800d380 <usart3CommandHandler>:
void usart3CommandHandler()
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
	int len=Usart3Device.countRxLineBuf+Usart3Device.countRxBuf;
 800d386:	4a3b      	ldr	r2, [pc, #236]	; (800d474 <usart3CommandHandler+0xf4>)
 800d388:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d38c:	4413      	add	r3, r2
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	4619      	mov	r1, r3
 800d392:	4a38      	ldr	r2, [pc, #224]	; (800d474 <usart3CommandHandler+0xf4>)
 800d394:	f241 7350 	movw	r3, #5968	; 0x1750
 800d398:	4413      	add	r3, r2
 800d39a:	881b      	ldrh	r3, [r3, #0]
 800d39c:	440b      	add	r3, r1
 800d39e:	607b      	str	r3, [r7, #4]

	//If overflow Clear
	if(len>UART_RX_BUF_SIZE)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d3a6:	dd12      	ble.n	800d3ce <usart3CommandHandler+0x4e>
	{
		memset(Usart3Device.RxLineBuf,0,UART_RX_BUF_SIZE);
 800d3a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	4832      	ldr	r0, [pc, #200]	; (800d478 <usart3CommandHandler+0xf8>)
 800d3b0:	f000 fed7 	bl	800e162 <memset>
		Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800d3b4:	4a2f      	ldr	r2, [pc, #188]	; (800d474 <usart3CommandHandler+0xf4>)
 800d3b6:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d3ba:	4413      	add	r3, r2
 800d3bc:	4a2e      	ldr	r2, [pc, #184]	; (800d478 <usart3CommandHandler+0xf8>)
 800d3be:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=0;
 800d3c0:	4a2c      	ldr	r2, [pc, #176]	; (800d474 <usart3CommandHandler+0xf4>)
 800d3c2:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d3c6:	4413      	add	r3, r2
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	801a      	strh	r2, [r3, #0]
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
			Usart3Device.countRxLineBuf=0;
		}
	}

}
 800d3cc:	e04e      	b.n	800d46c <usart3CommandHandler+0xec>
		memcpy(&(Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf]),Usart3Device.RxBuf,Usart3Device.countRxBuf);
 800d3ce:	4a29      	ldr	r2, [pc, #164]	; (800d474 <usart3CommandHandler+0xf4>)
 800d3d0:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d3d4:	4413      	add	r3, r2
 800d3d6:	881b      	ldrh	r3, [r3, #0]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800d3de:	4413      	add	r3, r2
 800d3e0:	4a24      	ldr	r2, [pc, #144]	; (800d474 <usart3CommandHandler+0xf4>)
 800d3e2:	1898      	adds	r0, r3, r2
 800d3e4:	4a23      	ldr	r2, [pc, #140]	; (800d474 <usart3CommandHandler+0xf4>)
 800d3e6:	f241 7350 	movw	r3, #5968	; 0x1750
 800d3ea:	4413      	add	r3, r2
 800d3ec:	881b      	ldrh	r3, [r3, #0]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	4922      	ldr	r1, [pc, #136]	; (800d47c <usart3CommandHandler+0xfc>)
 800d3f2:	f000 feab 	bl	800e14c <memcpy>
		Usart3Device.pRxLineBuf+=Usart3Device.countRxBuf;
 800d3f6:	4a1f      	ldr	r2, [pc, #124]	; (800d474 <usart3CommandHandler+0xf4>)
 800d3f8:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d3fc:	4413      	add	r3, r2
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	491c      	ldr	r1, [pc, #112]	; (800d474 <usart3CommandHandler+0xf4>)
 800d402:	f241 7350 	movw	r3, #5968	; 0x1750
 800d406:	440b      	add	r3, r1
 800d408:	881b      	ldrh	r3, [r3, #0]
 800d40a:	441a      	add	r2, r3
 800d40c:	4919      	ldr	r1, [pc, #100]	; (800d474 <usart3CommandHandler+0xf4>)
 800d40e:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d412:	440b      	add	r3, r1
 800d414:	601a      	str	r2, [r3, #0]
		Usart3Device.countRxLineBuf=len;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	b299      	uxth	r1, r3
 800d41a:	4a16      	ldr	r2, [pc, #88]	; (800d474 <usart3CommandHandler+0xf4>)
 800d41c:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d420:	4413      	add	r3, r2
 800d422:	460a      	mov	r2, r1
 800d424:	801a      	strh	r2, [r3, #0]
		if (Usart3Device.RxLineBuf[Usart3Device.countRxLineBuf-1]=='\n')
 800d426:	4a13      	ldr	r2, [pc, #76]	; (800d474 <usart3CommandHandler+0xf4>)
 800d428:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d42c:	4413      	add	r3, r2
 800d42e:	881b      	ldrh	r3, [r3, #0]
 800d430:	3b01      	subs	r3, #1
 800d432:	4a10      	ldr	r2, [pc, #64]	; (800d474 <usart3CommandHandler+0xf4>)
 800d434:	441a      	add	r2, r3
 800d436:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800d43a:	4413      	add	r3, r2
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2b0a      	cmp	r3, #10
 800d440:	d114      	bne.n	800d46c <usart3CommandHandler+0xec>
			serialReceiveCallback((char *)Usart3Device.RxLineBuf);
 800d442:	480d      	ldr	r0, [pc, #52]	; (800d478 <usart3CommandHandler+0xf8>)
 800d444:	f000 fcca 	bl	800dddc <serialReceiveCallback>
			memset(Usart3Device.RxLineBuf,0,len);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	461a      	mov	r2, r3
 800d44c:	2100      	movs	r1, #0
 800d44e:	480a      	ldr	r0, [pc, #40]	; (800d478 <usart3CommandHandler+0xf8>)
 800d450:	f000 fe87 	bl	800e162 <memset>
			Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800d454:	4a07      	ldr	r2, [pc, #28]	; (800d474 <usart3CommandHandler+0xf4>)
 800d456:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d45a:	4413      	add	r3, r2
 800d45c:	4a06      	ldr	r2, [pc, #24]	; (800d478 <usart3CommandHandler+0xf8>)
 800d45e:	601a      	str	r2, [r3, #0]
			Usart3Device.countRxLineBuf=0;
 800d460:	4a04      	ldr	r2, [pc, #16]	; (800d474 <usart3CommandHandler+0xf4>)
 800d462:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800d466:	4413      	add	r3, r2
 800d468:	2200      	movs	r2, #0
 800d46a:	801a      	strh	r2, [r3, #0]
}
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	2000cd18 	.word	0x2000cd18
 800d478:	2000e1e8 	.word	0x2000e1e8
 800d47c:	2000dfee 	.word	0x2000dfee

0800d480 <usart4CommandHandler>:

void usart4CommandHandler()
{
 800d480:	b580      	push	{r7, lr}
 800d482:	af00      	add	r7, sp, #0
	//since this termination is triggered by IDLE LINE, we want to make sure it has the right number of bytes
		serialPort4Callback((char *)Usart4Device.RxBuf);
 800d484:	4802      	ldr	r0, [pc, #8]	; (800d490 <usart4CommandHandler+0x10>)
 800d486:	f7fe fbe9 	bl	800bc5c <serialPort4Callback>
}
 800d48a:	bf00      	nop
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	2000b116 	.word	0x2000b116

0800d494 <UartCommandHandler>:
void UartCommandHandler(UART_DEVICE *UsartDevice)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	if(UsartDevice == &Usart3Device)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a08      	ldr	r2, [pc, #32]	; (800d4c0 <UartCommandHandler+0x2c>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d102      	bne.n	800d4aa <UartCommandHandler+0x16>
		usart3CommandHandler();
 800d4a4:	f7ff ff6c 	bl	800d380 <usart3CommandHandler>
	else if(UsartDevice == &Usart4Device)
		usart4CommandHandler();
}
 800d4a8:	e005      	b.n	800d4b6 <UartCommandHandler+0x22>
	else if(UsartDevice == &Usart4Device)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a05      	ldr	r2, [pc, #20]	; (800d4c4 <UartCommandHandler+0x30>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d101      	bne.n	800d4b6 <UartCommandHandler+0x22>
		usart4CommandHandler();
 800d4b2:	f7ff ffe5 	bl	800d480 <usart4CommandHandler>
}
 800d4b6:	bf00      	nop
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	2000cd18 	.word	0x2000cd18
 800d4c4:	20009e40 	.word	0x20009e40

0800d4c8 <my_UsartInit>:


/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	af00      	add	r7, sp, #0

	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800d4cc:	f44f 7218 	mov.w	r2, #608	; 0x260
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	4849      	ldr	r0, [pc, #292]	; (800d5f8 <my_UsartInit+0x130>)
 800d4d4:	f000 fe45 	bl	800e162 <memset>
	printfBinStruct.header[0]=0x5a;
 800d4d8:	4b47      	ldr	r3, [pc, #284]	; (800d5f8 <my_UsartInit+0x130>)
 800d4da:	225a      	movs	r2, #90	; 0x5a
 800d4dc:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800d4de:	4b46      	ldr	r3, [pc, #280]	; (800d5f8 <my_UsartInit+0x130>)
 800d4e0:	225a      	movs	r2, #90	; 0x5a
 800d4e2:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800d4e4:	4b44      	ldr	r3, [pc, #272]	; (800d5f8 <my_UsartInit+0x130>)
 800d4e6:	22a5      	movs	r2, #165	; 0xa5
 800d4e8:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800d4ea:	4b43      	ldr	r3, [pc, #268]	; (800d5f8 <my_UsartInit+0x130>)
 800d4ec:	22a5      	movs	r2, #165	; 0xa5
 800d4ee:	70da      	strb	r2, [r3, #3]

	printfBinStruct.pData=printfBinStruct.data;
 800d4f0:	4b41      	ldr	r3, [pc, #260]	; (800d5f8 <my_UsartInit+0x130>)
 800d4f2:	4a42      	ldr	r2, [pc, #264]	; (800d5fc <my_UsartInit+0x134>)
 800d4f4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c

	 memset(&Usart3Device,0,sizeof(Usart3Device));
 800d4f8:	f241 726c 	movw	r2, #5996	; 0x176c
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	4840      	ldr	r0, [pc, #256]	; (800d600 <my_UsartInit+0x138>)
 800d500:	f000 fe2f 	bl	800e162 <memset>
	 Usart3Device.huart = &huart3;
 800d504:	4b3e      	ldr	r3, [pc, #248]	; (800d600 <my_UsartInit+0x138>)
 800d506:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d50a:	4a3e      	ldr	r2, [pc, #248]	; (800d604 <my_UsartInit+0x13c>)
 800d50c:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxBuf = Usart3Device.RxBuf;
 800d50e:	4a3c      	ldr	r2, [pc, #240]	; (800d600 <my_UsartInit+0x138>)
 800d510:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d514:	4413      	add	r3, r2
 800d516:	4a3c      	ldr	r2, [pc, #240]	; (800d608 <my_UsartInit+0x140>)
 800d518:	601a      	str	r2, [r3, #0]
	 Usart3Device.pRxLineBuf=Usart3Device.RxLineBuf;
 800d51a:	4a39      	ldr	r2, [pc, #228]	; (800d600 <my_UsartInit+0x138>)
 800d51c:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d520:	4413      	add	r3, r2
 800d522:	4a3a      	ldr	r2, [pc, #232]	; (800d60c <my_UsartInit+0x144>)
 800d524:	601a      	str	r2, [r3, #0]
	 Usart3Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart3Device.RxBuf;
 800d526:	4a36      	ldr	r2, [pc, #216]	; (800d600 <my_UsartInit+0x138>)
 800d528:	f241 7354 	movw	r3, #5972	; 0x1754
 800d52c:	4413      	add	r3, r2
 800d52e:	4a36      	ldr	r2, [pc, #216]	; (800d608 <my_UsartInit+0x140>)
 800d530:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart3Device.huart, Usart3Device.RxBuf, UART_RX_BUF_SIZE-1);
 800d532:	4b33      	ldr	r3, [pc, #204]	; (800d600 <my_UsartInit+0x138>)
 800d534:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d53e:	4932      	ldr	r1, [pc, #200]	; (800d608 <my_UsartInit+0x140>)
 800d540:	4618      	mov	r0, r3
 800d542:	f7f8 fbc1 	bl	8005cc8 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart3Device.huart, UART_IT_IDLE);
 800d546:	4b2e      	ldr	r3, [pc, #184]	; (800d600 <my_UsartInit+0x138>)
 800d548:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	4b2b      	ldr	r3, [pc, #172]	; (800d600 <my_UsartInit+0x138>)
 800d554:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f042 0210 	orr.w	r2, r2, #16
 800d560:	601a      	str	r2, [r3, #0]

	// memset(&Usart4Device,0,sizeof(Usart4Device));
	 Usart4Device.huart = &huart4;
 800d562:	4b2b      	ldr	r3, [pc, #172]	; (800d610 <my_UsartInit+0x148>)
 800d564:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d568:	4a2a      	ldr	r2, [pc, #168]	; (800d614 <my_UsartInit+0x14c>)
 800d56a:	601a      	str	r2, [r3, #0]
	 Usart4Device.pRxBuf = Usart4Device.RxBuf;
 800d56c:	4a28      	ldr	r2, [pc, #160]	; (800d610 <my_UsartInit+0x148>)
 800d56e:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d572:	4413      	add	r3, r2
 800d574:	4a28      	ldr	r2, [pc, #160]	; (800d618 <my_UsartInit+0x150>)
 800d576:	601a      	str	r2, [r3, #0]
	 Usart4Device.pRxLineBuf=Usart4Device.RxLineBuf;
 800d578:	4a25      	ldr	r2, [pc, #148]	; (800d610 <my_UsartInit+0x148>)
 800d57a:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800d57e:	4413      	add	r3, r2
 800d580:	4a26      	ldr	r2, [pc, #152]	; (800d61c <my_UsartInit+0x154>)
 800d582:	601a      	str	r2, [r3, #0]
	 Usart4Device.receveBinPtr = (RECEIVEBINSTRUCT *)Usart4Device.RxBuf;
 800d584:	4a22      	ldr	r2, [pc, #136]	; (800d610 <my_UsartInit+0x148>)
 800d586:	f241 7354 	movw	r3, #5972	; 0x1754
 800d58a:	4413      	add	r3, r2
 800d58c:	4a22      	ldr	r2, [pc, #136]	; (800d618 <my_UsartInit+0x150>)
 800d58e:	601a      	str	r2, [r3, #0]
	 /*get ready for receive*/
	 HAL_UART_Receive_DMA(Usart4Device.huart, Usart4Device.RxBuf, UART_RX_BUF_SIZE-1);
 800d590:	4b1f      	ldr	r3, [pc, #124]	; (800d610 <my_UsartInit+0x148>)
 800d592:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d59c:	491e      	ldr	r1, [pc, #120]	; (800d618 <my_UsartInit+0x150>)
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7f8 fb92 	bl	8005cc8 <HAL_UART_Receive_DMA>

	 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
	 __HAL_UART_ENABLE_IT(Usart4Device.huart, UART_IT_IDLE);
 800d5a4:	4b1a      	ldr	r3, [pc, #104]	; (800d610 <my_UsartInit+0x148>)
 800d5a6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	4b17      	ldr	r3, [pc, #92]	; (800d610 <my_UsartInit+0x148>)
 800d5b2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f042 0210 	orr.w	r2, r2, #16
 800d5be:	601a      	str	r2, [r3, #0]

	 memset(&Usart1Device,0,sizeof(Usart1Device));
 800d5c0:	f241 726c 	movw	r2, #5996	; 0x176c
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	4816      	ldr	r0, [pc, #88]	; (800d620 <my_UsartInit+0x158>)
 800d5c8:	f000 fdcb 	bl	800e162 <memset>
	 Usart1Device.huart = &huart1;
 800d5cc:	4b14      	ldr	r3, [pc, #80]	; (800d620 <my_UsartInit+0x158>)
 800d5ce:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d5d2:	4a14      	ldr	r2, [pc, #80]	; (800d624 <my_UsartInit+0x15c>)
 800d5d4:	601a      	str	r2, [r3, #0]
	 Usart1Device.pRxBuf = Usart1Device.RxBuf;
 800d5d6:	4a12      	ldr	r2, [pc, #72]	; (800d620 <my_UsartInit+0x158>)
 800d5d8:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d5dc:	4413      	add	r3, r2
 800d5de:	4a12      	ldr	r2, [pc, #72]	; (800d628 <my_UsartInit+0x160>)
 800d5e0:	601a      	str	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800d5e2:	4b10      	ldr	r3, [pc, #64]	; (800d624 <my_UsartInit+0x15c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <my_UsartInit+0x15c>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f042 0220 	orr.w	r2, r2, #32
 800d5f0:	601a      	str	r2, [r3, #0]

}
 800d5f2:	bf00      	nop
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20000d80 	.word	0x20000d80
 800d5fc:	20000d84 	.word	0x20000d84
 800d600:	2000cd18 	.word	0x2000cd18
 800d604:	20009aa4 	.word	0x20009aa4
 800d608:	2000dfee 	.word	0x2000dfee
 800d60c:	2000e1e8 	.word	0x2000e1e8
 800d610:	20009e40 	.word	0x20009e40
 800d614:	20009c04 	.word	0x20009c04
 800d618:	2000b116 	.word	0x2000b116
 800d61c:	2000b310 	.word	0x2000b310
 800d620:	2000b5ac 	.word	0x2000b5ac
 800d624:	20009b84 	.word	0x20009b84
 800d628:	2000c882 	.word	0x2000c882

0800d62c <HAL_UART_RxIdleCallback>:
  HAL_UART_IRQHandler(&huart3);
}
*/

void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	f003 0310 	and.w	r3, r3, #16
 800d63e:	2b10      	cmp	r3, #16
 800d640:	bf0c      	ite	eq
 800d642:	2301      	moveq	r3, #1
 800d644:	2300      	movne	r3, #0
 800d646:	b2db      	uxtb	r3, r3
 800d648:	60fb      	str	r3, [r7, #12]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 0310 	and.w	r3, r3, #16
 800d654:	2b00      	cmp	r3, #0
 800d656:	bf14      	ite	ne
 800d658:	2301      	movne	r3, #1
 800d65a:	2300      	moveq	r3, #0
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	60bb      	str	r3, [r7, #8]

	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d01b      	beq.n	800d69e <HAL_UART_RxIdleCallback+0x72>
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d018      	beq.n	800d69e <HAL_UART_RxIdleCallback+0x72>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2210      	movs	r2, #16
 800d672:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		if(huart == &huart3)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4a0d      	ldr	r2, [pc, #52]	; (800d6ac <HAL_UART_RxIdleCallback+0x80>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d106      	bne.n	800d68a <HAL_UART_RxIdleCallback+0x5e>
			Usart3Device.Received = 1;
 800d67c:	4a0c      	ldr	r2, [pc, #48]	; (800d6b0 <HAL_UART_RxIdleCallback+0x84>)
 800d67e:	f241 7352 	movw	r3, #5970	; 0x1752
 800d682:	4413      	add	r3, r2
 800d684:	2201      	movs	r2, #1
 800d686:	801a      	strh	r2, [r3, #0]

		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/

	}

}
 800d688:	e009      	b.n	800d69e <HAL_UART_RxIdleCallback+0x72>
		else if(huart == &huart4)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a09      	ldr	r2, [pc, #36]	; (800d6b4 <HAL_UART_RxIdleCallback+0x88>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d105      	bne.n	800d69e <HAL_UART_RxIdleCallback+0x72>
			Usart4Device.Received = 1;
 800d692:	4a09      	ldr	r2, [pc, #36]	; (800d6b8 <HAL_UART_RxIdleCallback+0x8c>)
 800d694:	f241 7352 	movw	r3, #5970	; 0x1752
 800d698:	4413      	add	r3, r2
 800d69a:	2201      	movs	r2, #1
 800d69c:	801a      	strh	r2, [r3, #0]
}
 800d69e:	bf00      	nop
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	20009aa4 	.word	0x20009aa4
 800d6b0:	2000cd18 	.word	0x2000cd18
 800d6b4:	20009c04 	.word	0x20009c04
 800d6b8:	20009e40 	.word	0x20009e40

0800d6bc <_write>:

/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
	uint8_t *pDes=Usart3Device.TxBuf[Usart3Device.producerTxBufNum];
 800d6c8:	4a41      	ldr	r2, [pc, #260]	; (800d7d0 <_write+0x114>)
 800d6ca:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d6d8:	fb03 f302 	mul.w	r3, r3, r2
 800d6dc:	4a3c      	ldr	r2, [pc, #240]	; (800d7d0 <_write+0x114>)
 800d6de:	4413      	add	r3, r2
 800d6e0:	617b      	str	r3, [r7, #20]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	6978      	ldr	r0, [r7, #20]
 800d6ea:	f000 fd2f 	bl	800e14c <memcpy>
	*(pDes+len)='\0';
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	701a      	strb	r2, [r3, #0]
	Usart3Device.countTxBuf[Usart3Device.producerTxBufNum] = len;
 800d6f8:	4a35      	ldr	r2, [pc, #212]	; (800d7d0 <_write+0x114>)
 800d6fa:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d6fe:	4413      	add	r3, r2
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	b291      	uxth	r1, r2
 800d706:	4a32      	ldr	r2, [pc, #200]	; (800d7d0 <_write+0x114>)
 800d708:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d70c:	005b      	lsls	r3, r3, #1
 800d70e:	4413      	add	r3, r2
 800d710:	460a      	mov	r2, r1
 800d712:	80da      	strh	r2, [r3, #6]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	Usart3Device.bufferedTxNum++;
 800d714:	4a2e      	ldr	r2, [pc, #184]	; (800d7d0 <_write+0x114>)
 800d716:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d71a:	4413      	add	r3, r2
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	3301      	adds	r3, #1
 800d720:	b299      	uxth	r1, r3
 800d722:	4a2b      	ldr	r2, [pc, #172]	; (800d7d0 <_write+0x114>)
 800d724:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d728:	4413      	add	r3, r2
 800d72a:	460a      	mov	r2, r1
 800d72c:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(Usart3Device.bufferedTxNum == 1){
 800d72e:	4a28      	ldr	r2, [pc, #160]	; (800d7d0 <_write+0x114>)
 800d730:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d734:	4413      	add	r3, r2
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d11b      	bne.n	800d774 <_write+0xb8>
		HAL_UART_Transmit_DMA(Usart3Device.huart,pDes,Usart3Device.countTxBuf[Usart3Device.producerTxBufNum]);
 800d73c:	4b24      	ldr	r3, [pc, #144]	; (800d7d0 <_write+0x114>)
 800d73e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d742:	6818      	ldr	r0, [r3, #0]
 800d744:	4a22      	ldr	r2, [pc, #136]	; (800d7d0 <_write+0x114>)
 800d746:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d74a:	4413      	add	r3, r2
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	4a20      	ldr	r2, [pc, #128]	; (800d7d0 <_write+0x114>)
 800d750:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	4413      	add	r3, r2
 800d758:	88db      	ldrh	r3, [r3, #6]
 800d75a:	461a      	mov	r2, r3
 800d75c:	6979      	ldr	r1, [r7, #20]
 800d75e:	f7f8 fa37 	bl	8005bd0 <HAL_UART_Transmit_DMA>
		Usart3Device.TxStart = micros();
 800d762:	f7fe fa8d 	bl	800bc80 <micros>
 800d766:	4601      	mov	r1, r0
 800d768:	4a19      	ldr	r2, [pc, #100]	; (800d7d0 <_write+0x114>)
 800d76a:	f241 7358 	movw	r3, #5976	; 0x1758
 800d76e:	4413      	add	r3, r2
 800d770:	6019      	str	r1, [r3, #0]
 800d772:	e005      	b.n	800d780 <_write+0xc4>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the Usart3Devices would somehow suddenly lost the configurations
		Usart3Device.bufferedTxNum=1;
 800d774:	4a16      	ldr	r2, [pc, #88]	; (800d7d0 <_write+0x114>)
 800d776:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d77a:	4413      	add	r3, r2
 800d77c:	2201      	movs	r2, #1
 800d77e:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	Usart3Device.producerTxBufNum++;
 800d780:	4a13      	ldr	r2, [pc, #76]	; (800d7d0 <_write+0x114>)
 800d782:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d786:	4413      	add	r3, r2
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	3301      	adds	r3, #1
 800d78c:	b299      	uxth	r1, r3
 800d78e:	4a10      	ldr	r2, [pc, #64]	; (800d7d0 <_write+0x114>)
 800d790:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d794:	4413      	add	r3, r2
 800d796:	460a      	mov	r2, r1
 800d798:	801a      	strh	r2, [r3, #0]
	Usart3Device.producerTxBufNum%=UART_TX_BUF_NUM;
 800d79a:	4a0d      	ldr	r2, [pc, #52]	; (800d7d0 <_write+0x114>)
 800d79c:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d7a0:	4413      	add	r3, r2
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	f003 0307 	and.w	r3, r3, #7
 800d7a8:	b299      	uxth	r1, r3
 800d7aa:	4a09      	ldr	r2, [pc, #36]	; (800d7d0 <_write+0x114>)
 800d7ac:	f241 23c2 	movw	r3, #4802	; 0x12c2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	460a      	mov	r2, r1
 800d7b4:	801a      	strh	r2, [r3, #0]

	//Buffered term full, wait for consumer to reduce producerTxBufNum
	while(Usart3Device.bufferedTxNum > (UART_TX_BUF_NUM-2)){
 800d7b6:	bf00      	nop
 800d7b8:	4a05      	ldr	r2, [pc, #20]	; (800d7d0 <_write+0x114>)
 800d7ba:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d7be:	4413      	add	r3, r2
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	2b06      	cmp	r3, #6
 800d7c4:	d8f8      	bhi.n	800d7b8 <_write+0xfc>
		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
	};
	return len;
 800d7c6:	687b      	ldr	r3, [r7, #4]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3718      	adds	r7, #24
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	2000cd18 	.word	0x2000cd18

0800d7d4 <HAL_UART_RxCpltCallback>:
void printfBinPush(int16_t dat)
{
*(printfBinStruct.pData)++=dat;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
	//printf("RxCplCall_Test\r\n");
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_UART_TxCpltCallback>:

/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
	 /*update information*/
	 Usart3Device.TxEnd = micros();
 800d7f0:	f7fe fa46 	bl	800bc80 <micros>
 800d7f4:	4601      	mov	r1, r0
 800d7f6:	4a3c      	ldr	r2, [pc, #240]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d7f8:	f241 735c 	movw	r3, #5980	; 0x175c
 800d7fc:	4413      	add	r3, r2
 800d7fe:	6019      	str	r1, [r3, #0]
	 Usart3Device.lastTxTime = Usart3Device.TxEnd - Usart3Device.TxStart;
 800d800:	4a39      	ldr	r2, [pc, #228]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d802:	f241 735c 	movw	r3, #5980	; 0x175c
 800d806:	4413      	add	r3, r2
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	4937      	ldr	r1, [pc, #220]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d80c:	f241 7358 	movw	r3, #5976	; 0x1758
 800d810:	440b      	add	r3, r1
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	1ad2      	subs	r2, r2, r3
 800d816:	4934      	ldr	r1, [pc, #208]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d818:	f241 7364 	movw	r3, #5988	; 0x1764
 800d81c:	440b      	add	r3, r1
 800d81e:	601a      	str	r2, [r3, #0]
	 Usart3Device.lastTxCount = Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum];
 800d820:	4b31      	ldr	r3, [pc, #196]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d822:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	4a2f      	ldr	r2, [pc, #188]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d82a:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	4413      	add	r3, r2
 800d832:	88db      	ldrh	r3, [r3, #6]
 800d834:	4619      	mov	r1, r3
 800d836:	4a2c      	ldr	r2, [pc, #176]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d838:	f241 7368 	movw	r3, #5992	; 0x1768
 800d83c:	4413      	add	r3, r2
 800d83e:	6019      	str	r1, [r3, #0]

	/*One consumption done. move consumer forward*/
	Usart3Device.consumerTxBufNum++;
 800d840:	4b29      	ldr	r3, [pc, #164]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d842:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d846:	881b      	ldrh	r3, [r3, #0]
 800d848:	3301      	adds	r3, #1
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	4b26      	ldr	r3, [pc, #152]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d84e:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d852:	801a      	strh	r2, [r3, #0]
	Usart3Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 800d854:	4b24      	ldr	r3, [pc, #144]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d856:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	f003 0307 	and.w	r3, r3, #7
 800d860:	b29a      	uxth	r2, r3
 800d862:	4b21      	ldr	r3, [pc, #132]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d864:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d868:	801a      	strh	r2, [r3, #0]

	/*reduce one bufferedTxNum*/
	 Usart3Device.bufferedTxNum--;
 800d86a:	4a1f      	ldr	r2, [pc, #124]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d86c:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d870:	4413      	add	r3, r2
 800d872:	881b      	ldrh	r3, [r3, #0]
 800d874:	3b01      	subs	r3, #1
 800d876:	b299      	uxth	r1, r3
 800d878:	4a1b      	ldr	r2, [pc, #108]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d87a:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d87e:	4413      	add	r3, r2
 800d880:	460a      	mov	r2, r1
 800d882:	801a      	strh	r2, [r3, #0]

	/*If it is still positive, go on consume next*/
	if(Usart3Device.bufferedTxNum>0){
 800d884:	4a18      	ldr	r2, [pc, #96]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d886:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800d88a:	4413      	add	r3, r2
 800d88c:	881b      	ldrh	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d025      	beq.n	800d8de <HAL_UART_TxCpltCallback+0xf6>
		Usart3Device.TxStart = micros();
 800d892:	f7fe f9f5 	bl	800bc80 <micros>
 800d896:	4601      	mov	r1, r0
 800d898:	4a13      	ldr	r2, [pc, #76]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d89a:	f241 7358 	movw	r3, #5976	; 0x1758
 800d89e:	4413      	add	r3, r2
 800d8a0:	6019      	str	r1, [r3, #0]
		uint8_t *px = &Usart3Device.TxBuf[Usart3Device.consumerTxBufNum][0];
 800d8a2:	4b11      	ldr	r3, [pc, #68]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d8a4:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d8a8:	881b      	ldrh	r3, [r3, #0]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d8b0:	fb03 f302 	mul.w	r3, r3, r2
 800d8b4:	4a0c      	ldr	r2, [pc, #48]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d8b6:	4413      	add	r3, r2
 800d8b8:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit_DMA(Usart3Device.huart,px,Usart3Device.countTxBuf[Usart3Device.consumerTxBufNum]);
 800d8ba:	4b0b      	ldr	r3, [pc, #44]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d8bc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d8c0:	6818      	ldr	r0, [r3, #0]
 800d8c2:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d8c4:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800d8c8:	881b      	ldrh	r3, [r3, #0]
 800d8ca:	4a07      	ldr	r2, [pc, #28]	; (800d8e8 <HAL_UART_TxCpltCallback+0x100>)
 800d8cc:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	4413      	add	r3, r2
 800d8d4:	88db      	ldrh	r3, [r3, #6]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	68f9      	ldr	r1, [r7, #12]
 800d8da:	f7f8 f979 	bl	8005bd0 <HAL_UART_Transmit_DMA>
	}
}
 800d8de:	bf00      	nop
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	2000cd18 	.word	0x2000cd18

0800d8ec <myUsart1IRQ>:


void myUsart1IRQ()
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	af00      	add	r7, sp, #0

 	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800d8f0:	4b25      	ldr	r3, [pc, #148]	; (800d988 <myUsart1IRQ+0x9c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	69db      	ldr	r3, [r3, #28]
 800d8f6:	f003 0320 	and.w	r3, r3, #32
 800d8fa:	2b20      	cmp	r3, #32
 800d8fc:	d141      	bne.n	800d982 <myUsart1IRQ+0x96>
	{
		*(Usart1Device.pRxBuf)=(uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800d8fe:	4b22      	ldr	r3, [pc, #136]	; (800d988 <myUsart1IRQ+0x9c>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d904:	4a21      	ldr	r2, [pc, #132]	; (800d98c <myUsart1IRQ+0xa0>)
 800d906:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d90a:	4413      	add	r3, r2
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	b2ca      	uxtb	r2, r1
 800d910:	701a      	strb	r2, [r3, #0]
		if(*(Usart1Device.pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800d912:	4a1e      	ldr	r2, [pc, #120]	; (800d98c <myUsart1IRQ+0xa0>)
 800d914:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d918:	4413      	add	r3, r2
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	2b0a      	cmp	r3, #10
 800d920:	d124      	bne.n	800d96c <myUsart1IRQ+0x80>
		{
			if((Usart1Device.pRxBuf)!=(Usart1Device.RxBuf)) // if '0x0a' is not in the beginning
 800d922:	4a1a      	ldr	r2, [pc, #104]	; (800d98c <myUsart1IRQ+0xa0>)
 800d924:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d928:	4413      	add	r3, r2
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a18      	ldr	r2, [pc, #96]	; (800d990 <myUsart1IRQ+0xa4>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d027      	beq.n	800d982 <myUsart1IRQ+0x96>
			{
				if(*(Usart1Device.pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800d932:	4a16      	ldr	r2, [pc, #88]	; (800d98c <myUsart1IRQ+0xa0>)
 800d934:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d938:	4413      	add	r3, r2
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	3b01      	subs	r3, #1
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	2b0d      	cmp	r3, #13
 800d942:	d106      	bne.n	800d952 <myUsart1IRQ+0x66>
			    {
					Usart1Device.Received = 1;
 800d944:	4a11      	ldr	r2, [pc, #68]	; (800d98c <myUsart1IRQ+0xa0>)
 800d946:	f241 7352 	movw	r3, #5970	; 0x1752
 800d94a:	4413      	add	r3, r2
 800d94c:	2201      	movs	r2, #1
 800d94e:	801a      	strh	r2, [r3, #0]
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else Usart1Device.pRxBuf++;
	}

}
 800d950:	e017      	b.n	800d982 <myUsart1IRQ+0x96>
					memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800d952:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d956:	2100      	movs	r1, #0
 800d958:	480d      	ldr	r0, [pc, #52]	; (800d990 <myUsart1IRQ+0xa4>)
 800d95a:	f000 fc02 	bl	800e162 <memset>
					Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800d95e:	4a0b      	ldr	r2, [pc, #44]	; (800d98c <myUsart1IRQ+0xa0>)
 800d960:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d964:	4413      	add	r3, r2
 800d966:	4a0a      	ldr	r2, [pc, #40]	; (800d990 <myUsart1IRQ+0xa4>)
 800d968:	601a      	str	r2, [r3, #0]
}
 800d96a:	e00a      	b.n	800d982 <myUsart1IRQ+0x96>
		else Usart1Device.pRxBuf++;
 800d96c:	4a07      	ldr	r2, [pc, #28]	; (800d98c <myUsart1IRQ+0xa0>)
 800d96e:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d972:	4413      	add	r3, r2
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	1c5a      	adds	r2, r3, #1
 800d978:	4904      	ldr	r1, [pc, #16]	; (800d98c <myUsart1IRQ+0xa0>)
 800d97a:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800d97e:	440b      	add	r3, r1
 800d980:	601a      	str	r2, [r3, #0]
}
 800d982:	bf00      	nop
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	20009b84 	.word	0x20009b84
 800d98c:	2000b5ac 	.word	0x2000b5ac
 800d990:	2000c882 	.word	0x2000c882

0800d994 <UsartDMAIdleHandler>:


void UsartDMAIdleHandler(UART_DEVICE *UsartDevice)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	f241 7352 	movw	r3, #5970	; 0x1752
 800d9a2:	4413      	add	r3, r2
 800d9a4:	881b      	ldrh	r3, [r3, #0]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	f040 808f 	bne.w	800daca <UsartDMAIdleHandler+0x136>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9b6:	2b22      	cmp	r3, #34	; 0x22
 800d9b8:	d165      	bne.n	800da86 <UsartDMAIdleHandler+0xf2>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ca:	2b40      	cmp	r3, #64	; 0x40
 800d9cc:	d15b      	bne.n	800da86 <UsartDMAIdleHandler+0xf2>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	689a      	ldr	r2, [r3, #8]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9e8:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d024      	beq.n	800da42 <UsartDMAIdleHandler+0xae>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	b29b      	uxth	r3, r3
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	b299      	uxth	r1, r3
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	f241 7350 	movw	r3, #5968	; 0x1750
 800da1e:	4413      	add	r3, r2
 800da20:	460a      	mov	r2, r1
 800da22:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7f4 f8f9 	bl	8001c34 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800da5c:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	689a      	ldr	r2, [r3, #8]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f022 0201 	bic.w	r2, r2, #1
 800da78:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2220      	movs	r2, #32
 800da84:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands*/
			UartCommandHandler(UsartDevice);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff fd04 	bl	800d494 <UartCommandHandler>

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	f241 7352 	movw	r3, #5970	; 0x1752
 800da92:	4413      	add	r3, r2
 800da94:	2200      	movs	r2, #0
 800da96:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	f241 63cc 	movw	r3, #5836	; 0x16cc
 800da9e:	4413      	add	r3, r2
 800daa0:	2264      	movs	r2, #100	; 0x64
 800daa2:	2100      	movs	r1, #0
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 fb5c 	bl	800e162 <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	f241 23d6 	movw	r3, #4822	; 0x12d6
 800dab0:	4413      	add	r3, r2
 800dab2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dab6:	2100      	movs	r1, #0
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 fb52 	bl	800e162 <memset>
			UsartDevice->countRxBuf = 0;
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	f241 7350 	movw	r3, #5968	; 0x1750
 800dac4:	4413      	add	r3, r2
 800dac6:	2200      	movs	r2, #0
 800dac8:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	f241 23d6 	movw	r3, #4822	; 0x12d6
 800dad8:	4413      	add	r3, r2
 800dada:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dade:	4619      	mov	r1, r3
 800dae0:	f7f8 f8f2 	bl	8005cc8 <HAL_UART_Receive_DMA>
}
 800dae4:	bf00      	nop
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <Usart_TerminalHandler>:

/*Put this function in a loop for polling*/
void Usart_TerminalHandler()
{
 800daec:	b580      	push	{r7, lr}
 800daee:	af00      	add	r7, sp, #0
	UsartDMAIdleHandler(&Usart3Device);
 800daf0:	4811      	ldr	r0, [pc, #68]	; (800db38 <Usart_TerminalHandler+0x4c>)
 800daf2:	f7ff ff4f 	bl	800d994 <UsartDMAIdleHandler>
	UsartDMAIdleHandler(&Usart4Device);
 800daf6:	4811      	ldr	r0, [pc, #68]	; (800db3c <Usart_TerminalHandler+0x50>)
 800daf8:	f7ff ff4c 	bl	800d994 <UsartDMAIdleHandler>

	/********************************Usart 1 Int reception****************************/
	if(Usart1Device.Received == 1)
 800dafc:	4a10      	ldr	r2, [pc, #64]	; (800db40 <Usart_TerminalHandler+0x54>)
 800dafe:	f241 7352 	movw	r3, #5970	; 0x1752
 800db02:	4413      	add	r3, r2
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d113      	bne.n	800db32 <Usart_TerminalHandler+0x46>
	{
		usart1CommandHandler();
 800db0a:	f7ff fc2f 	bl	800d36c <usart1CommandHandler>
		memset(Usart1Device.RxBuf,0,UART_RX_BUF_SIZE);
 800db0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800db12:	2100      	movs	r1, #0
 800db14:	480b      	ldr	r0, [pc, #44]	; (800db44 <Usart_TerminalHandler+0x58>)
 800db16:	f000 fb24 	bl	800e162 <memset>
		Usart1Device.pRxBuf=Usart1Device.RxBuf;
 800db1a:	4a09      	ldr	r2, [pc, #36]	; (800db40 <Usart_TerminalHandler+0x54>)
 800db1c:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800db20:	4413      	add	r3, r2
 800db22:	4a08      	ldr	r2, [pc, #32]	; (800db44 <Usart_TerminalHandler+0x58>)
 800db24:	601a      	str	r2, [r3, #0]
		Usart1Device.Received = 0;
 800db26:	4a06      	ldr	r2, [pc, #24]	; (800db40 <Usart_TerminalHandler+0x54>)
 800db28:	f241 7352 	movw	r3, #5970	; 0x1752
 800db2c:	4413      	add	r3, r2
 800db2e:	2200      	movs	r2, #0
 800db30:	801a      	strh	r2, [r3, #0]

	}

}
 800db32:	bf00      	nop
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	2000cd18 	.word	0x2000cd18
 800db3c:	20009e40 	.word	0x20009e40
 800db40:	2000b5ac 	.word	0x2000b5ac
 800db44:	2000c882 	.word	0x2000c882

0800db48 <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f04f 0200 	mov.w	r2, #0
 800db68:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f04f 0200 	mov.w	r2, #0
 800db70:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a0f      	ldr	r2, [pc, #60]	; (800dbb4 <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800db76:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f04f 0200 	mov.w	r2, #0
 800db7e:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f240 6266 	movw	r2, #1638	; 0x666
 800db86:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f643 1299 	movw	r2, #14745	; 0x3999
 800db8e:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	4a09      	ldr	r2, [pc, #36]	; (800dbb8 <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800db94:	61da      	str	r2, [r3, #28]
	CS_Port =SPI6_CS_GPIO_Port;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	4a08      	ldr	r2, [pc, #32]	; (800dbbc <_ZN18PRESSURE_SENSORSPIC1Ev+0x74>)
 800db9a:	621a      	str	r2, [r3, #32]
	CS_Pin = SPI6_CS_Pin;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dba2:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4618      	mov	r0, r3
 800dba8:	370c      	adds	r7, #12
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	48ca0080 	.word	0x48ca0080
 800dbb8:	20009334 	.word	0x20009334
 800dbbc:	40020c00 	.word	0x40020c00

0800dbc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dbc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dbf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dbc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dbc6:	e003      	b.n	800dbd0 <LoopCopyDataInit>

0800dbc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dbc8:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dbca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dbcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800dbce:	3104      	adds	r1, #4

0800dbd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800dbd0:	480b      	ldr	r0, [pc, #44]	; (800dc00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800dbd2:	4b0c      	ldr	r3, [pc, #48]	; (800dc04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dbd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dbd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dbd8:	d3f6      	bcc.n	800dbc8 <CopyDataInit>
  ldr  r2, =_sbss
 800dbda:	4a0b      	ldr	r2, [pc, #44]	; (800dc08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dbdc:	e002      	b.n	800dbe4 <LoopFillZerobss>

0800dbde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dbde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dbe0:	f842 3b04 	str.w	r3, [r2], #4

0800dbe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dbe4:	4b09      	ldr	r3, [pc, #36]	; (800dc0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dbe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dbe8:	d3f9      	bcc.n	800dbde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800dbea:	f7fb fa49 	bl	8009080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dbee:	f000 fa81 	bl	800e0f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dbf2:	f7fa fc2d 	bl	8008450 <main>
  bx  lr    
 800dbf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dbf8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800dbfc:	080132f0 	.word	0x080132f0
  ldr  r0, =_sdata
 800dc00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800dc04:	20000514 	.word	0x20000514
  ldr  r2, =_sbss
 800dc08:	20000514 	.word	0x20000514
  ldr  r3, = _ebss
 800dc0c:	2000e488 	.word	0x2000e488

0800dc10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dc10:	e7fe      	b.n	800dc10 <ADC_IRQHandler>
	...

0800dc14 <setup>:
float loopT=0;

int wp=0;

/*Called once in the beginning*/
void setup() {
 800dc14:	b580      	push	{r7, lr}
 800dc16:	af00      	add	r7, sp, #0

	/*Configure the pump port and sensor paramter of the source*/
	pneudrive.pSource.attach(0,5);
 800dc18:	2205      	movs	r2, #5
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	4834      	ldr	r0, [pc, #208]	; (800dcf0 <setup+0xdc>)
 800dc1e:	f7fd fbcb 	bl	800b3b8 <_ZN15PRESSURE_SOURCE6attachEii>
	pneudrive.pSource.pressureSensor.setSensorRange_GaugePa(sensorVmin, sensorVmax, sensorPmin, sensorPmax);
 800dc22:	4b34      	ldr	r3, [pc, #208]	; (800dcf4 <setup+0xe0>)
 800dc24:	edd3 7a00 	vldr	s15, [r3]
 800dc28:	4b33      	ldr	r3, [pc, #204]	; (800dcf8 <setup+0xe4>)
 800dc2a:	ed93 7a00 	vldr	s14, [r3]
 800dc2e:	4b33      	ldr	r3, [pc, #204]	; (800dcfc <setup+0xe8>)
 800dc30:	edd3 6a00 	vldr	s13, [r3]
 800dc34:	4b32      	ldr	r3, [pc, #200]	; (800dd00 <setup+0xec>)
 800dc36:	ed93 6a00 	vldr	s12, [r3]
 800dc3a:	eef0 1a46 	vmov.f32	s3, s12
 800dc3e:	eeb0 1a66 	vmov.f32	s2, s13
 800dc42:	eef0 0a47 	vmov.f32	s1, s14
 800dc46:	eeb0 0a67 	vmov.f32	s0, s15
 800dc4a:	482e      	ldr	r0, [pc, #184]	; (800dd04 <setup+0xf0>)
 800dc4c:	f7fd fb68 	bl	800b320 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>

	/*Configure the pump port and sensor parameter of the sink*/
	pneudrive.pSink.attach(1,6);
 800dc50:	2206      	movs	r2, #6
 800dc52:	2101      	movs	r1, #1
 800dc54:	482c      	ldr	r0, [pc, #176]	; (800dd08 <setup+0xf4>)
 800dc56:	f7fd fbaf 	bl	800b3b8 <_ZN15PRESSURE_SOURCE6attachEii>
	pneudrive.pSink.pressureSensor.setSensorRange_GaugePa(sensorVmin, sensorVmax, sensorPmin, sensorPmax);
 800dc5a:	4b26      	ldr	r3, [pc, #152]	; (800dcf4 <setup+0xe0>)
 800dc5c:	edd3 7a00 	vldr	s15, [r3]
 800dc60:	4b25      	ldr	r3, [pc, #148]	; (800dcf8 <setup+0xe4>)
 800dc62:	ed93 7a00 	vldr	s14, [r3]
 800dc66:	4b25      	ldr	r3, [pc, #148]	; (800dcfc <setup+0xe8>)
 800dc68:	edd3 6a00 	vldr	s13, [r3]
 800dc6c:	4b24      	ldr	r3, [pc, #144]	; (800dd00 <setup+0xec>)
 800dc6e:	ed93 6a00 	vldr	s12, [r3]
 800dc72:	eef0 1a46 	vmov.f32	s3, s12
 800dc76:	eeb0 1a66 	vmov.f32	s2, s13
 800dc7a:	eef0 0a47 	vmov.f32	s1, s14
 800dc7e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc82:	4822      	ldr	r0, [pc, #136]	; (800dd0c <setup+0xf8>)
 800dc84:	f7fd fb4c 	bl	800b320 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>

	/*Attach the valves and pressure sensors of chamber 0 to corresponding ports.
	 *Set the pressure sensor range. The parameter list are (vMin, vMax, pMin, pMax).
	 * vMin vMax have the unit of voltage. pMin pMax use the gauge pressure, has the unit of Pa. For example, atmosphere is 0, and vacuum is -101325.*/
	pneudrive.chambers[0]->attach(0, 1,4);
 800dc88:	4b21      	ldr	r3, [pc, #132]	; (800dd10 <setup+0xfc>)
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	6818      	ldr	r0, [r3, #0]
 800dc8e:	2304      	movs	r3, #4
 800dc90:	2201      	movs	r2, #1
 800dc92:	2100      	movs	r1, #0
 800dc94:	f7fc ffe2 	bl	800ac5c <_ZN7CHAMBER6attachEiii>
	pneudrive.chambers[0]->pressureSensor.setSensorRange_GaugePa(sensorVmin, sensorVmax, sensorPmin, sensorPmax);
 800dc98:	4b1d      	ldr	r3, [pc, #116]	; (800dd10 <setup+0xfc>)
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dca2:	4b14      	ldr	r3, [pc, #80]	; (800dcf4 <setup+0xe0>)
 800dca4:	edd3 7a00 	vldr	s15, [r3]
 800dca8:	4b13      	ldr	r3, [pc, #76]	; (800dcf8 <setup+0xe4>)
 800dcaa:	ed93 7a00 	vldr	s14, [r3]
 800dcae:	4b13      	ldr	r3, [pc, #76]	; (800dcfc <setup+0xe8>)
 800dcb0:	edd3 6a00 	vldr	s13, [r3]
 800dcb4:	4b12      	ldr	r3, [pc, #72]	; (800dd00 <setup+0xec>)
 800dcb6:	ed93 6a00 	vldr	s12, [r3]
 800dcba:	eef0 1a46 	vmov.f32	s3, s12
 800dcbe:	eeb0 1a66 	vmov.f32	s2, s13
 800dcc2:	eef0 0a47 	vmov.f32	s1, s14
 800dcc6:	eeb0 0a67 	vmov.f32	s0, s15
 800dcca:	4610      	mov	r0, r2
 800dccc:	f7fd fb28 	bl	800b320 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>

	pneudrive.chambers[0]->setValveOpeningLimit(-0.3,-0.1,0.1,0.12);
 800dcd0:	4b0f      	ldr	r3, [pc, #60]	; (800dd10 <setup+0xfc>)
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	eddf 1a0f 	vldr	s3, [pc, #60]	; 800dd14 <setup+0x100>
 800dcda:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 800dd18 <setup+0x104>
 800dcde:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800dd1c <setup+0x108>
 800dce2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800dd20 <setup+0x10c>
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fd f97c 	bl	800afe4 <_ZN7CHAMBER20setValveOpeningLimitEffff>

}
 800dcec:	bf00      	nop
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	20000fec 	.word	0x20000fec
 800dcf4:	20000334 	.word	0x20000334
 800dcf8:	20000338 	.word	0x20000338
 800dcfc:	20001068 	.word	0x20001068
 800dd00:	2000033c 	.word	0x2000033c
 800dd04:	20000ff8 	.word	0x20000ff8
 800dd08:	20001024 	.word	0x20001024
 800dd0c:	20001030 	.word	0x20001030
 800dd10:	20000fe0 	.word	0x20000fe0
 800dd14:	3df5c28f 	.word	0x3df5c28f
 800dd18:	3dcccccd 	.word	0x3dcccccd
 800dd1c:	bdcccccd 	.word	0xbdcccccd
 800dd20:	be99999a 	.word	0xbe99999a

0800dd24 <loop>:

/*Running at a default frequency of 1KHz, altered by changing CONTROL_FREQUENCY in the file UserConfig.h*/
void loop() {
 800dd24:	b580      	push	{r7, lr}
 800dd26:	af00      	add	r7, sp, #0
//
//		/*Actual control of chamber 0. The pressureCommand could be buffered elsewhere. Here we just control the pressure according to buffered pressure command*/
//		pneudrive.writeBufferedPressure(0);
//	}

	timings[0]=micros();
 800dd28:	f7fd ffaa 	bl	800bc80 <micros>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	461a      	mov	r2, r3
 800dd30:	4b17      	ldr	r3, [pc, #92]	; (800dd90 <loop+0x6c>)
 800dd32:	601a      	str	r2, [r3, #0]
	pneudrive.readPressure(0);
 800dd34:	2100      	movs	r1, #0
 800dd36:	4817      	ldr	r0, [pc, #92]	; (800dd94 <loop+0x70>)
 800dd38:	f7fd ff08 	bl	800bb4c <_ZN9PNEUDRIVE12readPressureEi>
	pneudrive.chambers[0]->filterPressure();
 800dd3c:	4b15      	ldr	r3, [pc, #84]	; (800dd94 <loop+0x70>)
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fc ffbf 	bl	800acc6 <_ZN7CHAMBER14filterPressureEv>
	timings[1]=micros();
 800dd48:	f7fd ff9a 	bl	800bc80 <micros>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	461a      	mov	r2, r3
 800dd50:	4b0f      	ldr	r3, [pc, #60]	; (800dd90 <loop+0x6c>)
 800dd52:	605a      	str	r2, [r3, #4]
	pneudrive.chambers[0]->writePressure(120025);
 800dd54:	4b0f      	ldr	r3, [pc, #60]	; (800dd94 <loop+0x70>)
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800dd98 <loop+0x74>
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fc ffd0 	bl	800ad04 <_ZN7CHAMBER13writePressureEf>
	timings[2]=micros();
 800dd64:	f7fd ff8c 	bl	800bc80 <micros>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	4b08      	ldr	r3, [pc, #32]	; (800dd90 <loop+0x6c>)
 800dd6e:	609a      	str	r2, [r3, #8]

	timings[5]=timings[1]-timings[0];
 800dd70:	4b07      	ldr	r3, [pc, #28]	; (800dd90 <loop+0x6c>)
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	4b06      	ldr	r3, [pc, #24]	; (800dd90 <loop+0x6c>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	4a05      	ldr	r2, [pc, #20]	; (800dd90 <loop+0x6c>)
 800dd7c:	6153      	str	r3, [r2, #20]

	timings[3]=timings[2]-timings[1];
 800dd7e:	4b04      	ldr	r3, [pc, #16]	; (800dd90 <loop+0x6c>)
 800dd80:	689a      	ldr	r2, [r3, #8]
 800dd82:	4b03      	ldr	r3, [pc, #12]	; (800dd90 <loop+0x6c>)
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	4a01      	ldr	r2, [pc, #4]	; (800dd90 <loop+0x6c>)
 800dd8a:	60d3      	str	r3, [r2, #12]
}
 800dd8c:	bf00      	nop
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	2000106c 	.word	0x2000106c
 800dd94:	20000fe0 	.word	0x20000fe0
 800dd98:	47ea6c80 	.word	0x47ea6c80

0800dd9c <serialDisplay>:

/*Running at a default frequency of 20KHz, altered by changing DISPLAY_FREQUENCY in the file UserConfig.h*/
void serialDisplay() {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
//	printf("%4.3f	%d	%d\r\n",
//			millis() / 1000.0f,
//			(int)(pneudrive.pressureCommands[0]/1000),
//			(int)(pneudrive.readPressure(0)/1000));
	int32_t ttt=micros();
 800dda2:	f7fd ff6d 	bl	800bc80 <micros>
 800dda6:	4603      	mov	r3, r0
 800dda8:	607b      	str	r3, [r7, #4]
	printf("%d %d %d\r\n",
 800ddaa:	4b0a      	ldr	r3, [pc, #40]	; (800ddd4 <serialDisplay+0x38>)
 800ddac:	6919      	ldr	r1, [r3, #16]
 800ddae:	4b09      	ldr	r3, [pc, #36]	; (800ddd4 <serialDisplay+0x38>)
 800ddb0:	68da      	ldr	r2, [r3, #12]
 800ddb2:	4b08      	ldr	r3, [pc, #32]	; (800ddd4 <serialDisplay+0x38>)
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	4808      	ldr	r0, [pc, #32]	; (800ddd8 <serialDisplay+0x3c>)
 800ddb8:	f001 f8a6 	bl	800ef08 <iprintf>
			timings[4],
			timings[3],
			timings[5]);
	timings[4]=micros()-ttt;
 800ddbc:	f7fd ff60 	bl	800bc80 <micros>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	4b02      	ldr	r3, [pc, #8]	; (800ddd4 <serialDisplay+0x38>)
 800ddca:	611a      	str	r2, [r3, #16]
}
 800ddcc:	bf00      	nop
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	2000106c 	.word	0x2000106c
 800ddd8:	08012f50 	.word	0x08012f50

0800dddc <serialReceiveCallback>:

/*Callback function when serial port 3 receives commands with ending of "\r\n", the parameter is the pointer to the received string buffer*/
void serialReceiveCallback(char *pSerialCommandBuffer) {
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af02      	add	r7, sp, #8
 800dde2:	6078      	str	r0, [r7, #4]
	static char commandChar;
	static float pCommand = 0;
	static float ulims[4];
	//Read the received buffer with customized message. The first char means command type. The second number represents the interested chamber number. The third float number is the pressure command.
	sscanf(pSerialCommandBuffer, "%c %f", &commandChar, &pCommand);
 800dde4:	4b3e      	ldr	r3, [pc, #248]	; (800dee0 <serialReceiveCallback+0x104>)
 800dde6:	4a3f      	ldr	r2, [pc, #252]	; (800dee4 <serialReceiveCallback+0x108>)
 800dde8:	493f      	ldr	r1, [pc, #252]	; (800dee8 <serialReceiveCallback+0x10c>)
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f001 f982 	bl	800f0f4 <siscanf>

	//customized message
	if (commandChar == 'p') {
 800ddf0:	4b3c      	ldr	r3, [pc, #240]	; (800dee4 <serialReceiveCallback+0x108>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	2b70      	cmp	r3, #112	; 0x70
 800ddf6:	d110      	bne.n	800de1a <serialReceiveCallback+0x3e>
		//Only change the value of command, leaving the control part to the loop().
		wp=0;
 800ddf8:	4b3c      	ldr	r3, [pc, #240]	; (800deec <serialReceiveCallback+0x110>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
		pneudrive.bufferPressure(0, (pCommand*1000));
 800ddfe:	4b38      	ldr	r3, [pc, #224]	; (800dee0 <serialReceiveCallback+0x104>)
 800de00:	edd3 7a00 	vldr	s15, [r3]
 800de04:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800def0 <serialReceiveCallback+0x114>
 800de08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de0c:	eeb0 0a67 	vmov.f32	s0, s15
 800de10:	2100      	movs	r1, #0
 800de12:	4838      	ldr	r0, [pc, #224]	; (800def4 <serialReceiveCallback+0x118>)
 800de14:	f7fd feaf 	bl	800bb76 <_ZN9PNEUDRIVE14bufferPressureEif>
	else if(commandChar == 'u')
	{
		sscanf(&(pSerialCommandBuffer[2]), "%f %f %f %f" , &(ulims[0]),&(ulims[1]),&(ulims[2]),&(ulims[3]));
		pneudrive.chambers[0]->setValveOpeningLimit(ulims[0],ulims[1],ulims[2],ulims[3]);
	}
}
 800de18:	e05e      	b.n	800ded8 <serialReceiveCallback+0xfc>
	} else if (commandChar == 'g') {
 800de1a:	4b32      	ldr	r3, [pc, #200]	; (800dee4 <serialReceiveCallback+0x108>)
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	2b67      	cmp	r3, #103	; 0x67
 800de20:	d109      	bne.n	800de36 <serialReceiveCallback+0x5a>
		loop_gogogo = 1;
 800de22:	4b35      	ldr	r3, [pc, #212]	; (800def8 <serialReceiveCallback+0x11c>)
 800de24:	2201      	movs	r2, #1
 800de26:	801a      	strh	r2, [r3, #0]
		curT=millis();
 800de28:	f7fd ff22 	bl	800bc70 <millis>
 800de2c:	4603      	mov	r3, r0
 800de2e:	461a      	mov	r2, r3
 800de30:	4b32      	ldr	r3, [pc, #200]	; (800defc <serialReceiveCallback+0x120>)
 800de32:	601a      	str	r2, [r3, #0]
}
 800de34:	e050      	b.n	800ded8 <serialReceiveCallback+0xfc>
	} else if (commandChar == 's') {
 800de36:	4b2b      	ldr	r3, [pc, #172]	; (800dee4 <serialReceiveCallback+0x108>)
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	2b73      	cmp	r3, #115	; 0x73
 800de3c:	d10b      	bne.n	800de56 <serialReceiveCallback+0x7a>
		loop_gogogo = 0;
 800de3e:	4b2e      	ldr	r3, [pc, #184]	; (800def8 <serialReceiveCallback+0x11c>)
 800de40:	2200      	movs	r2, #0
 800de42:	801a      	strh	r2, [r3, #0]
		pneudrive.chambers[0]->writeOpening(0);
 800de44:	4b2b      	ldr	r3, [pc, #172]	; (800def4 <serialReceiveCallback+0x118>)
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800df00 <serialReceiveCallback+0x124>
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fd f85a 	bl	800af08 <_ZN7CHAMBER12writeOpeningEf>
}
 800de54:	e040      	b.n	800ded8 <serialReceiveCallback+0xfc>
	}else if (commandChar == 'a') {
 800de56:	4b23      	ldr	r3, [pc, #140]	; (800dee4 <serialReceiveCallback+0x108>)
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	2b61      	cmp	r3, #97	; 0x61
 800de5c:	d107      	bne.n	800de6e <serialReceiveCallback+0x92>
		wp=1;
 800de5e:	4b23      	ldr	r3, [pc, #140]	; (800deec <serialReceiveCallback+0x110>)
 800de60:	2201      	movs	r2, #1
 800de62:	601a      	str	r2, [r3, #0]
		ampli=pCommand;
 800de64:	4b1e      	ldr	r3, [pc, #120]	; (800dee0 <serialReceiveCallback+0x104>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a26      	ldr	r2, [pc, #152]	; (800df04 <serialReceiveCallback+0x128>)
 800de6a:	6013      	str	r3, [r2, #0]
}
 800de6c:	e034      	b.n	800ded8 <serialReceiveCallback+0xfc>
	else if (commandChar == 'f') {
 800de6e:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <serialReceiveCallback+0x108>)
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	2b66      	cmp	r3, #102	; 0x66
 800de74:	d107      	bne.n	800de86 <serialReceiveCallback+0xaa>
		wp=1;
 800de76:	4b1d      	ldr	r3, [pc, #116]	; (800deec <serialReceiveCallback+0x110>)
 800de78:	2201      	movs	r2, #1
 800de7a:	601a      	str	r2, [r3, #0]
		fres=pCommand;
 800de7c:	4b18      	ldr	r3, [pc, #96]	; (800dee0 <serialReceiveCallback+0x104>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a21      	ldr	r2, [pc, #132]	; (800df08 <serialReceiveCallback+0x12c>)
 800de82:	6013      	str	r3, [r2, #0]
}
 800de84:	e028      	b.n	800ded8 <serialReceiveCallback+0xfc>
	else if(commandChar == 'u')
 800de86:	4b17      	ldr	r3, [pc, #92]	; (800dee4 <serialReceiveCallback+0x108>)
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	2b75      	cmp	r3, #117	; 0x75
 800de8c:	d124      	bne.n	800ded8 <serialReceiveCallback+0xfc>
		sscanf(&(pSerialCommandBuffer[2]), "%f %f %f %f" , &(ulims[0]),&(ulims[1]),&(ulims[2]),&(ulims[3]));
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	1c98      	adds	r0, r3, #2
 800de92:	4b1e      	ldr	r3, [pc, #120]	; (800df0c <serialReceiveCallback+0x130>)
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	4b1e      	ldr	r3, [pc, #120]	; (800df10 <serialReceiveCallback+0x134>)
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	4b1e      	ldr	r3, [pc, #120]	; (800df14 <serialReceiveCallback+0x138>)
 800de9c:	4a1e      	ldr	r2, [pc, #120]	; (800df18 <serialReceiveCallback+0x13c>)
 800de9e:	491f      	ldr	r1, [pc, #124]	; (800df1c <serialReceiveCallback+0x140>)
 800dea0:	f001 f928 	bl	800f0f4 <siscanf>
		pneudrive.chambers[0]->setValveOpeningLimit(ulims[0],ulims[1],ulims[2],ulims[3]);
 800dea4:	4b13      	ldr	r3, [pc, #76]	; (800def4 <serialReceiveCallback+0x118>)
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	4b1b      	ldr	r3, [pc, #108]	; (800df18 <serialReceiveCallback+0x13c>)
 800deac:	edd3 7a00 	vldr	s15, [r3]
 800deb0:	4b19      	ldr	r3, [pc, #100]	; (800df18 <serialReceiveCallback+0x13c>)
 800deb2:	ed93 7a01 	vldr	s14, [r3, #4]
 800deb6:	4b18      	ldr	r3, [pc, #96]	; (800df18 <serialReceiveCallback+0x13c>)
 800deb8:	edd3 6a02 	vldr	s13, [r3, #8]
 800debc:	4b16      	ldr	r3, [pc, #88]	; (800df18 <serialReceiveCallback+0x13c>)
 800debe:	ed93 6a03 	vldr	s12, [r3, #12]
 800dec2:	eef0 1a46 	vmov.f32	s3, s12
 800dec6:	eeb0 1a66 	vmov.f32	s2, s13
 800deca:	eef0 0a47 	vmov.f32	s1, s14
 800dece:	eeb0 0a67 	vmov.f32	s0, s15
 800ded2:	4610      	mov	r0, r2
 800ded4:	f7fd f886 	bl	800afe4 <_ZN7CHAMBER20setValveOpeningLimitEffff>
}
 800ded8:	bf00      	nop
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	200010a8 	.word	0x200010a8
 800dee4:	200010a4 	.word	0x200010a4
 800dee8:	08012f5c 	.word	0x08012f5c
 800deec:	200010a0 	.word	0x200010a0
 800def0:	447a0000 	.word	0x447a0000
 800def4:	20000fe0 	.word	0x20000fe0
 800def8:	20001064 	.word	0x20001064
 800defc:	2000109c 	.word	0x2000109c
 800df00:	00000000 	.word	0x00000000
 800df04:	20001094 	.word	0x20001094
 800df08:	20001098 	.word	0x20001098
 800df0c:	200010b8 	.word	0x200010b8
 800df10:	200010b4 	.word	0x200010b4
 800df14:	200010b0 	.word	0x200010b0
 800df18:	200010ac 	.word	0x200010ac
 800df1c:	08012f64 	.word	0x08012f64

0800df20 <_Z41__static_initialization_and_destruction_0ii>:
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d108      	bne.n	800df42 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df36:	4293      	cmp	r3, r2
 800df38:	d103      	bne.n	800df42 <_Z41__static_initialization_and_destruction_0ii+0x22>
PNEUDRIVE pneudrive(1);
 800df3a:	2101      	movs	r1, #1
 800df3c:	4803      	ldr	r0, [pc, #12]	; (800df4c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800df3e:	f7fd fdab 	bl	800ba98 <_ZN9PNEUDRIVEC1Ei>
}
 800df42:	bf00      	nop
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	20000fe0 	.word	0x20000fe0

0800df50 <_GLOBAL__sub_I_pneudrive>:
 800df50:	b580      	push	{r7, lr}
 800df52:	af00      	add	r7, sp, #0
 800df54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df58:	2001      	movs	r0, #1
 800df5a:	f7ff ffe1 	bl	800df20 <_Z41__static_initialization_and_destruction_0ii>
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <_Znwj>:
 800df60:	b510      	push	{r4, lr}
 800df62:	2800      	cmp	r0, #0
 800df64:	bf14      	ite	ne
 800df66:	4604      	movne	r4, r0
 800df68:	2401      	moveq	r4, #1
 800df6a:	4620      	mov	r0, r4
 800df6c:	f000 f8e6 	bl	800e13c <malloc>
 800df70:	b930      	cbnz	r0, 800df80 <_Znwj+0x20>
 800df72:	f000 f807 	bl	800df84 <_ZSt15get_new_handlerv>
 800df76:	b908      	cbnz	r0, 800df7c <_Znwj+0x1c>
 800df78:	f000 f8a7 	bl	800e0ca <abort>
 800df7c:	4780      	blx	r0
 800df7e:	e7f4      	b.n	800df6a <_Znwj+0xa>
 800df80:	bd10      	pop	{r4, pc}
	...

0800df84 <_ZSt15get_new_handlerv>:
 800df84:	4b02      	ldr	r3, [pc, #8]	; (800df90 <_ZSt15get_new_handlerv+0xc>)
 800df86:	6818      	ldr	r0, [r3, #0]
 800df88:	f3bf 8f5b 	dmb	ish
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	200010bc 	.word	0x200010bc

0800df94 <round>:
 800df94:	ee10 3a90 	vmov	r3, s1
 800df98:	b530      	push	{r4, r5, lr}
 800df9a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800df9e:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800dfa2:	2913      	cmp	r1, #19
 800dfa4:	ee10 5a90 	vmov	r5, s1
 800dfa8:	ee10 2a10 	vmov	r2, s0
 800dfac:	dc17      	bgt.n	800dfde <round+0x4a>
 800dfae:	2900      	cmp	r1, #0
 800dfb0:	da09      	bge.n	800dfc6 <round+0x32>
 800dfb2:	3101      	adds	r1, #1
 800dfb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfb8:	d103      	bne.n	800dfc2 <round+0x2e>
 800dfba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dfbe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	e024      	b.n	800e010 <round+0x7c>
 800dfc6:	4815      	ldr	r0, [pc, #84]	; (800e01c <round+0x88>)
 800dfc8:	4108      	asrs	r0, r1
 800dfca:	4203      	tst	r3, r0
 800dfcc:	d100      	bne.n	800dfd0 <round+0x3c>
 800dfce:	b16a      	cbz	r2, 800dfec <round+0x58>
 800dfd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dfd4:	410b      	asrs	r3, r1
 800dfd6:	442b      	add	r3, r5
 800dfd8:	ea23 0300 	bic.w	r3, r3, r0
 800dfdc:	e7f1      	b.n	800dfc2 <round+0x2e>
 800dfde:	2933      	cmp	r1, #51	; 0x33
 800dfe0:	dd05      	ble.n	800dfee <round+0x5a>
 800dfe2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dfe6:	d101      	bne.n	800dfec <round+0x58>
 800dfe8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dfec:	bd30      	pop	{r4, r5, pc}
 800dfee:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800dff2:	f04f 34ff 	mov.w	r4, #4294967295
 800dff6:	40c4      	lsrs	r4, r0
 800dff8:	4222      	tst	r2, r4
 800dffa:	d0f7      	beq.n	800dfec <round+0x58>
 800dffc:	2001      	movs	r0, #1
 800dffe:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800e002:	fa00 f101 	lsl.w	r1, r0, r1
 800e006:	1852      	adds	r2, r2, r1
 800e008:	bf28      	it	cs
 800e00a:	181b      	addcs	r3, r3, r0
 800e00c:	ea22 0204 	bic.w	r2, r2, r4
 800e010:	4619      	mov	r1, r3
 800e012:	4610      	mov	r0, r2
 800e014:	ec41 0b10 	vmov	d0, r0, r1
 800e018:	e7e8      	b.n	800dfec <round+0x58>
 800e01a:	bf00      	nop
 800e01c:	000fffff 	.word	0x000fffff

0800e020 <sqrtf>:
 800e020:	b500      	push	{lr}
 800e022:	ed2d 8b02 	vpush	{d8}
 800e026:	b08b      	sub	sp, #44	; 0x2c
 800e028:	eeb0 8a40 	vmov.f32	s16, s0
 800e02c:	f000 f848 	bl	800e0c0 <__ieee754_sqrtf>
 800e030:	4b21      	ldr	r3, [pc, #132]	; (800e0b8 <sqrtf+0x98>)
 800e032:	f993 3000 	ldrsb.w	r3, [r3]
 800e036:	1c5a      	adds	r2, r3, #1
 800e038:	d028      	beq.n	800e08c <sqrtf+0x6c>
 800e03a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e042:	d623      	bvs.n	800e08c <sqrtf+0x6c>
 800e044:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e04c:	d51e      	bpl.n	800e08c <sqrtf+0x6c>
 800e04e:	2201      	movs	r2, #1
 800e050:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800e054:	9200      	str	r2, [sp, #0]
 800e056:	4a19      	ldr	r2, [pc, #100]	; (800e0bc <sqrtf+0x9c>)
 800e058:	9201      	str	r2, [sp, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	9208      	str	r2, [sp, #32]
 800e05e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e062:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e066:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800e0b0 <sqrtf+0x90>
 800e06a:	b9a3      	cbnz	r3, 800e096 <sqrtf+0x76>
 800e06c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e070:	4668      	mov	r0, sp
 800e072:	f000 f828 	bl	800e0c6 <matherr>
 800e076:	b1a0      	cbz	r0, 800e0a2 <sqrtf+0x82>
 800e078:	9b08      	ldr	r3, [sp, #32]
 800e07a:	b11b      	cbz	r3, 800e084 <sqrtf+0x64>
 800e07c:	f000 f834 	bl	800e0e8 <__errno>
 800e080:	9b08      	ldr	r3, [sp, #32]
 800e082:	6003      	str	r3, [r0, #0]
 800e084:	ed9d 0b06 	vldr	d0, [sp, #24]
 800e088:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e08c:	b00b      	add	sp, #44	; 0x2c
 800e08e:	ecbd 8b02 	vpop	{d8}
 800e092:	f85d fb04 	ldr.w	pc, [sp], #4
 800e096:	2b02      	cmp	r3, #2
 800e098:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800e09c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800e0a0:	d1e6      	bne.n	800e070 <sqrtf+0x50>
 800e0a2:	f000 f821 	bl	800e0e8 <__errno>
 800e0a6:	2321      	movs	r3, #33	; 0x21
 800e0a8:	6003      	str	r3, [r0, #0]
 800e0aa:	e7e5      	b.n	800e078 <sqrtf+0x58>
 800e0ac:	f3af 8000 	nop.w
	...
 800e0b8:	20000340 	.word	0x20000340
 800e0bc:	08012f9c 	.word	0x08012f9c

0800e0c0 <__ieee754_sqrtf>:
 800e0c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e0c4:	4770      	bx	lr

0800e0c6 <matherr>:
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	4770      	bx	lr

0800e0ca <abort>:
 800e0ca:	b508      	push	{r3, lr}
 800e0cc:	2006      	movs	r0, #6
 800e0ce:	f000 ffd5 	bl	800f07c <raise>
 800e0d2:	2001      	movs	r0, #1
 800e0d4:	f004 fe72 	bl	8012dbc <_exit>

0800e0d8 <calloc>:
 800e0d8:	4b02      	ldr	r3, [pc, #8]	; (800e0e4 <calloc+0xc>)
 800e0da:	460a      	mov	r2, r1
 800e0dc:	4601      	mov	r1, r0
 800e0de:	6818      	ldr	r0, [r3, #0]
 800e0e0:	f000 b847 	b.w	800e172 <_calloc_r>
 800e0e4:	20000344 	.word	0x20000344

0800e0e8 <__errno>:
 800e0e8:	4b01      	ldr	r3, [pc, #4]	; (800e0f0 <__errno+0x8>)
 800e0ea:	6818      	ldr	r0, [r3, #0]
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	20000344 	.word	0x20000344

0800e0f4 <__libc_init_array>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	4e0d      	ldr	r6, [pc, #52]	; (800e12c <__libc_init_array+0x38>)
 800e0f8:	4c0d      	ldr	r4, [pc, #52]	; (800e130 <__libc_init_array+0x3c>)
 800e0fa:	1ba4      	subs	r4, r4, r6
 800e0fc:	10a4      	asrs	r4, r4, #2
 800e0fe:	2500      	movs	r5, #0
 800e100:	42a5      	cmp	r5, r4
 800e102:	d109      	bne.n	800e118 <__libc_init_array+0x24>
 800e104:	4e0b      	ldr	r6, [pc, #44]	; (800e134 <__libc_init_array+0x40>)
 800e106:	4c0c      	ldr	r4, [pc, #48]	; (800e138 <__libc_init_array+0x44>)
 800e108:	f004 fe5a 	bl	8012dc0 <_init>
 800e10c:	1ba4      	subs	r4, r4, r6
 800e10e:	10a4      	asrs	r4, r4, #2
 800e110:	2500      	movs	r5, #0
 800e112:	42a5      	cmp	r5, r4
 800e114:	d105      	bne.n	800e122 <__libc_init_array+0x2e>
 800e116:	bd70      	pop	{r4, r5, r6, pc}
 800e118:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e11c:	4798      	blx	r3
 800e11e:	3501      	adds	r5, #1
 800e120:	e7ee      	b.n	800e100 <__libc_init_array+0xc>
 800e122:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e126:	4798      	blx	r3
 800e128:	3501      	adds	r5, #1
 800e12a:	e7f2      	b.n	800e112 <__libc_init_array+0x1e>
 800e12c:	080132e4 	.word	0x080132e4
 800e130:	080132e4 	.word	0x080132e4
 800e134:	080132e4 	.word	0x080132e4
 800e138:	080132ec 	.word	0x080132ec

0800e13c <malloc>:
 800e13c:	4b02      	ldr	r3, [pc, #8]	; (800e148 <malloc+0xc>)
 800e13e:	4601      	mov	r1, r0
 800e140:	6818      	ldr	r0, [r3, #0]
 800e142:	f000 b873 	b.w	800e22c <_malloc_r>
 800e146:	bf00      	nop
 800e148:	20000344 	.word	0x20000344

0800e14c <memcpy>:
 800e14c:	b510      	push	{r4, lr}
 800e14e:	1e43      	subs	r3, r0, #1
 800e150:	440a      	add	r2, r1
 800e152:	4291      	cmp	r1, r2
 800e154:	d100      	bne.n	800e158 <memcpy+0xc>
 800e156:	bd10      	pop	{r4, pc}
 800e158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e15c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e160:	e7f7      	b.n	800e152 <memcpy+0x6>

0800e162 <memset>:
 800e162:	4402      	add	r2, r0
 800e164:	4603      	mov	r3, r0
 800e166:	4293      	cmp	r3, r2
 800e168:	d100      	bne.n	800e16c <memset+0xa>
 800e16a:	4770      	bx	lr
 800e16c:	f803 1b01 	strb.w	r1, [r3], #1
 800e170:	e7f9      	b.n	800e166 <memset+0x4>

0800e172 <_calloc_r>:
 800e172:	b538      	push	{r3, r4, r5, lr}
 800e174:	fb02 f401 	mul.w	r4, r2, r1
 800e178:	4621      	mov	r1, r4
 800e17a:	f000 f857 	bl	800e22c <_malloc_r>
 800e17e:	4605      	mov	r5, r0
 800e180:	b118      	cbz	r0, 800e18a <_calloc_r+0x18>
 800e182:	4622      	mov	r2, r4
 800e184:	2100      	movs	r1, #0
 800e186:	f7ff ffec 	bl	800e162 <memset>
 800e18a:	4628      	mov	r0, r5
 800e18c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e190 <_free_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	4605      	mov	r5, r0
 800e194:	2900      	cmp	r1, #0
 800e196:	d045      	beq.n	800e224 <_free_r+0x94>
 800e198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e19c:	1f0c      	subs	r4, r1, #4
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bfb8      	it	lt
 800e1a2:	18e4      	addlt	r4, r4, r3
 800e1a4:	f003 fa9a 	bl	80116dc <__malloc_lock>
 800e1a8:	4a1f      	ldr	r2, [pc, #124]	; (800e228 <_free_r+0x98>)
 800e1aa:	6813      	ldr	r3, [r2, #0]
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	b933      	cbnz	r3, 800e1be <_free_r+0x2e>
 800e1b0:	6063      	str	r3, [r4, #4]
 800e1b2:	6014      	str	r4, [r2, #0]
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1ba:	f003 ba90 	b.w	80116de <__malloc_unlock>
 800e1be:	42a3      	cmp	r3, r4
 800e1c0:	d90c      	bls.n	800e1dc <_free_r+0x4c>
 800e1c2:	6821      	ldr	r1, [r4, #0]
 800e1c4:	1862      	adds	r2, r4, r1
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	bf04      	itt	eq
 800e1ca:	681a      	ldreq	r2, [r3, #0]
 800e1cc:	685b      	ldreq	r3, [r3, #4]
 800e1ce:	6063      	str	r3, [r4, #4]
 800e1d0:	bf04      	itt	eq
 800e1d2:	1852      	addeq	r2, r2, r1
 800e1d4:	6022      	streq	r2, [r4, #0]
 800e1d6:	6004      	str	r4, [r0, #0]
 800e1d8:	e7ec      	b.n	800e1b4 <_free_r+0x24>
 800e1da:	4613      	mov	r3, r2
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	b10a      	cbz	r2, 800e1e4 <_free_r+0x54>
 800e1e0:	42a2      	cmp	r2, r4
 800e1e2:	d9fa      	bls.n	800e1da <_free_r+0x4a>
 800e1e4:	6819      	ldr	r1, [r3, #0]
 800e1e6:	1858      	adds	r0, r3, r1
 800e1e8:	42a0      	cmp	r0, r4
 800e1ea:	d10b      	bne.n	800e204 <_free_r+0x74>
 800e1ec:	6820      	ldr	r0, [r4, #0]
 800e1ee:	4401      	add	r1, r0
 800e1f0:	1858      	adds	r0, r3, r1
 800e1f2:	4282      	cmp	r2, r0
 800e1f4:	6019      	str	r1, [r3, #0]
 800e1f6:	d1dd      	bne.n	800e1b4 <_free_r+0x24>
 800e1f8:	6810      	ldr	r0, [r2, #0]
 800e1fa:	6852      	ldr	r2, [r2, #4]
 800e1fc:	605a      	str	r2, [r3, #4]
 800e1fe:	4401      	add	r1, r0
 800e200:	6019      	str	r1, [r3, #0]
 800e202:	e7d7      	b.n	800e1b4 <_free_r+0x24>
 800e204:	d902      	bls.n	800e20c <_free_r+0x7c>
 800e206:	230c      	movs	r3, #12
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	e7d3      	b.n	800e1b4 <_free_r+0x24>
 800e20c:	6820      	ldr	r0, [r4, #0]
 800e20e:	1821      	adds	r1, r4, r0
 800e210:	428a      	cmp	r2, r1
 800e212:	bf04      	itt	eq
 800e214:	6811      	ldreq	r1, [r2, #0]
 800e216:	6852      	ldreq	r2, [r2, #4]
 800e218:	6062      	str	r2, [r4, #4]
 800e21a:	bf04      	itt	eq
 800e21c:	1809      	addeq	r1, r1, r0
 800e21e:	6021      	streq	r1, [r4, #0]
 800e220:	605c      	str	r4, [r3, #4]
 800e222:	e7c7      	b.n	800e1b4 <_free_r+0x24>
 800e224:	bd38      	pop	{r3, r4, r5, pc}
 800e226:	bf00      	nop
 800e228:	200010c0 	.word	0x200010c0

0800e22c <_malloc_r>:
 800e22c:	b570      	push	{r4, r5, r6, lr}
 800e22e:	1ccd      	adds	r5, r1, #3
 800e230:	f025 0503 	bic.w	r5, r5, #3
 800e234:	3508      	adds	r5, #8
 800e236:	2d0c      	cmp	r5, #12
 800e238:	bf38      	it	cc
 800e23a:	250c      	movcc	r5, #12
 800e23c:	2d00      	cmp	r5, #0
 800e23e:	4606      	mov	r6, r0
 800e240:	db01      	blt.n	800e246 <_malloc_r+0x1a>
 800e242:	42a9      	cmp	r1, r5
 800e244:	d903      	bls.n	800e24e <_malloc_r+0x22>
 800e246:	230c      	movs	r3, #12
 800e248:	6033      	str	r3, [r6, #0]
 800e24a:	2000      	movs	r0, #0
 800e24c:	bd70      	pop	{r4, r5, r6, pc}
 800e24e:	f003 fa45 	bl	80116dc <__malloc_lock>
 800e252:	4a21      	ldr	r2, [pc, #132]	; (800e2d8 <_malloc_r+0xac>)
 800e254:	6814      	ldr	r4, [r2, #0]
 800e256:	4621      	mov	r1, r4
 800e258:	b991      	cbnz	r1, 800e280 <_malloc_r+0x54>
 800e25a:	4c20      	ldr	r4, [pc, #128]	; (800e2dc <_malloc_r+0xb0>)
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	b91b      	cbnz	r3, 800e268 <_malloc_r+0x3c>
 800e260:	4630      	mov	r0, r6
 800e262:	f000 fecd 	bl	800f000 <_sbrk_r>
 800e266:	6020      	str	r0, [r4, #0]
 800e268:	4629      	mov	r1, r5
 800e26a:	4630      	mov	r0, r6
 800e26c:	f000 fec8 	bl	800f000 <_sbrk_r>
 800e270:	1c43      	adds	r3, r0, #1
 800e272:	d124      	bne.n	800e2be <_malloc_r+0x92>
 800e274:	230c      	movs	r3, #12
 800e276:	6033      	str	r3, [r6, #0]
 800e278:	4630      	mov	r0, r6
 800e27a:	f003 fa30 	bl	80116de <__malloc_unlock>
 800e27e:	e7e4      	b.n	800e24a <_malloc_r+0x1e>
 800e280:	680b      	ldr	r3, [r1, #0]
 800e282:	1b5b      	subs	r3, r3, r5
 800e284:	d418      	bmi.n	800e2b8 <_malloc_r+0x8c>
 800e286:	2b0b      	cmp	r3, #11
 800e288:	d90f      	bls.n	800e2aa <_malloc_r+0x7e>
 800e28a:	600b      	str	r3, [r1, #0]
 800e28c:	50cd      	str	r5, [r1, r3]
 800e28e:	18cc      	adds	r4, r1, r3
 800e290:	4630      	mov	r0, r6
 800e292:	f003 fa24 	bl	80116de <__malloc_unlock>
 800e296:	f104 000b 	add.w	r0, r4, #11
 800e29a:	1d23      	adds	r3, r4, #4
 800e29c:	f020 0007 	bic.w	r0, r0, #7
 800e2a0:	1ac3      	subs	r3, r0, r3
 800e2a2:	d0d3      	beq.n	800e24c <_malloc_r+0x20>
 800e2a4:	425a      	negs	r2, r3
 800e2a6:	50e2      	str	r2, [r4, r3]
 800e2a8:	e7d0      	b.n	800e24c <_malloc_r+0x20>
 800e2aa:	428c      	cmp	r4, r1
 800e2ac:	684b      	ldr	r3, [r1, #4]
 800e2ae:	bf16      	itet	ne
 800e2b0:	6063      	strne	r3, [r4, #4]
 800e2b2:	6013      	streq	r3, [r2, #0]
 800e2b4:	460c      	movne	r4, r1
 800e2b6:	e7eb      	b.n	800e290 <_malloc_r+0x64>
 800e2b8:	460c      	mov	r4, r1
 800e2ba:	6849      	ldr	r1, [r1, #4]
 800e2bc:	e7cc      	b.n	800e258 <_malloc_r+0x2c>
 800e2be:	1cc4      	adds	r4, r0, #3
 800e2c0:	f024 0403 	bic.w	r4, r4, #3
 800e2c4:	42a0      	cmp	r0, r4
 800e2c6:	d005      	beq.n	800e2d4 <_malloc_r+0xa8>
 800e2c8:	1a21      	subs	r1, r4, r0
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	f000 fe98 	bl	800f000 <_sbrk_r>
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	d0cf      	beq.n	800e274 <_malloc_r+0x48>
 800e2d4:	6025      	str	r5, [r4, #0]
 800e2d6:	e7db      	b.n	800e290 <_malloc_r+0x64>
 800e2d8:	200010c0 	.word	0x200010c0
 800e2dc:	200010c4 	.word	0x200010c4

0800e2e0 <__cvt>:
 800e2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e2:	ed2d 8b02 	vpush	{d8}
 800e2e6:	eeb0 8b40 	vmov.f64	d8, d0
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	4617      	mov	r7, r2
 800e2ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e2f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e2f2:	ee18 2a90 	vmov	r2, s17
 800e2f6:	f025 0520 	bic.w	r5, r5, #32
 800e2fa:	2a00      	cmp	r2, #0
 800e2fc:	bfb6      	itet	lt
 800e2fe:	222d      	movlt	r2, #45	; 0x2d
 800e300:	2200      	movge	r2, #0
 800e302:	eeb1 8b40 	vneglt.f64	d8, d0
 800e306:	2d46      	cmp	r5, #70	; 0x46
 800e308:	460c      	mov	r4, r1
 800e30a:	701a      	strb	r2, [r3, #0]
 800e30c:	d004      	beq.n	800e318 <__cvt+0x38>
 800e30e:	2d45      	cmp	r5, #69	; 0x45
 800e310:	d100      	bne.n	800e314 <__cvt+0x34>
 800e312:	3401      	adds	r4, #1
 800e314:	2102      	movs	r1, #2
 800e316:	e000      	b.n	800e31a <__cvt+0x3a>
 800e318:	2103      	movs	r1, #3
 800e31a:	ab03      	add	r3, sp, #12
 800e31c:	9301      	str	r3, [sp, #4]
 800e31e:	ab02      	add	r3, sp, #8
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	4622      	mov	r2, r4
 800e324:	4633      	mov	r3, r6
 800e326:	eeb0 0b48 	vmov.f64	d0, d8
 800e32a:	f001 ff41 	bl	80101b0 <_dtoa_r>
 800e32e:	2d47      	cmp	r5, #71	; 0x47
 800e330:	d101      	bne.n	800e336 <__cvt+0x56>
 800e332:	07fb      	lsls	r3, r7, #31
 800e334:	d51e      	bpl.n	800e374 <__cvt+0x94>
 800e336:	2d46      	cmp	r5, #70	; 0x46
 800e338:	eb00 0304 	add.w	r3, r0, r4
 800e33c:	d10c      	bne.n	800e358 <__cvt+0x78>
 800e33e:	7802      	ldrb	r2, [r0, #0]
 800e340:	2a30      	cmp	r2, #48	; 0x30
 800e342:	d107      	bne.n	800e354 <__cvt+0x74>
 800e344:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34c:	bf1c      	itt	ne
 800e34e:	f1c4 0401 	rsbne	r4, r4, #1
 800e352:	6034      	strne	r4, [r6, #0]
 800e354:	6832      	ldr	r2, [r6, #0]
 800e356:	4413      	add	r3, r2
 800e358:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e360:	d007      	beq.n	800e372 <__cvt+0x92>
 800e362:	2130      	movs	r1, #48	; 0x30
 800e364:	9a03      	ldr	r2, [sp, #12]
 800e366:	429a      	cmp	r2, r3
 800e368:	d204      	bcs.n	800e374 <__cvt+0x94>
 800e36a:	1c54      	adds	r4, r2, #1
 800e36c:	9403      	str	r4, [sp, #12]
 800e36e:	7011      	strb	r1, [r2, #0]
 800e370:	e7f8      	b.n	800e364 <__cvt+0x84>
 800e372:	9303      	str	r3, [sp, #12]
 800e374:	9b03      	ldr	r3, [sp, #12]
 800e376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e378:	1a1b      	subs	r3, r3, r0
 800e37a:	6013      	str	r3, [r2, #0]
 800e37c:	b005      	add	sp, #20
 800e37e:	ecbd 8b02 	vpop	{d8}
 800e382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e384 <__exponent>:
 800e384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e386:	2900      	cmp	r1, #0
 800e388:	4604      	mov	r4, r0
 800e38a:	bfba      	itte	lt
 800e38c:	4249      	neglt	r1, r1
 800e38e:	232d      	movlt	r3, #45	; 0x2d
 800e390:	232b      	movge	r3, #43	; 0x2b
 800e392:	2909      	cmp	r1, #9
 800e394:	f804 2b02 	strb.w	r2, [r4], #2
 800e398:	7043      	strb	r3, [r0, #1]
 800e39a:	dd20      	ble.n	800e3de <__exponent+0x5a>
 800e39c:	f10d 0307 	add.w	r3, sp, #7
 800e3a0:	461f      	mov	r7, r3
 800e3a2:	260a      	movs	r6, #10
 800e3a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800e3a8:	fb06 1115 	mls	r1, r6, r5, r1
 800e3ac:	3130      	adds	r1, #48	; 0x30
 800e3ae:	2d09      	cmp	r5, #9
 800e3b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e3b4:	f103 32ff 	add.w	r2, r3, #4294967295
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	dc09      	bgt.n	800e3d0 <__exponent+0x4c>
 800e3bc:	3130      	adds	r1, #48	; 0x30
 800e3be:	3b02      	subs	r3, #2
 800e3c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e3c4:	42bb      	cmp	r3, r7
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	d304      	bcc.n	800e3d4 <__exponent+0x50>
 800e3ca:	1a10      	subs	r0, r2, r0
 800e3cc:	b003      	add	sp, #12
 800e3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	e7e7      	b.n	800e3a4 <__exponent+0x20>
 800e3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d8:	f804 2b01 	strb.w	r2, [r4], #1
 800e3dc:	e7f2      	b.n	800e3c4 <__exponent+0x40>
 800e3de:	2330      	movs	r3, #48	; 0x30
 800e3e0:	4419      	add	r1, r3
 800e3e2:	7083      	strb	r3, [r0, #2]
 800e3e4:	1d02      	adds	r2, r0, #4
 800e3e6:	70c1      	strb	r1, [r0, #3]
 800e3e8:	e7ef      	b.n	800e3ca <__exponent+0x46>
 800e3ea:	0000      	movs	r0, r0
 800e3ec:	0000      	movs	r0, r0
	...

0800e3f0 <_printf_float>:
 800e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f4:	b08d      	sub	sp, #52	; 0x34
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	4616      	mov	r6, r2
 800e3fa:	461f      	mov	r7, r3
 800e3fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e400:	4605      	mov	r5, r0
 800e402:	f003 f8d5 	bl	80115b0 <_localeconv_r>
 800e406:	f8d0 b000 	ldr.w	fp, [r0]
 800e40a:	4658      	mov	r0, fp
 800e40c:	f7f1 ff18 	bl	8000240 <strlen>
 800e410:	2300      	movs	r3, #0
 800e412:	930a      	str	r3, [sp, #40]	; 0x28
 800e414:	f8d8 3000 	ldr.w	r3, [r8]
 800e418:	9005      	str	r0, [sp, #20]
 800e41a:	3307      	adds	r3, #7
 800e41c:	f023 0307 	bic.w	r3, r3, #7
 800e420:	f103 0108 	add.w	r1, r3, #8
 800e424:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e428:	6822      	ldr	r2, [r4, #0]
 800e42a:	f8c8 1000 	str.w	r1, [r8]
 800e42e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e432:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e436:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800e6c0 <_printf_float+0x2d0>
 800e43a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e43e:	eeb0 6bc0 	vabs.f64	d6, d0
 800e442:	eeb4 6b47 	vcmp.f64	d6, d7
 800e446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44a:	dd24      	ble.n	800e496 <_printf_float+0xa6>
 800e44c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	d502      	bpl.n	800e45c <_printf_float+0x6c>
 800e456:	232d      	movs	r3, #45	; 0x2d
 800e458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e45c:	499a      	ldr	r1, [pc, #616]	; (800e6c8 <_printf_float+0x2d8>)
 800e45e:	4b9b      	ldr	r3, [pc, #620]	; (800e6cc <_printf_float+0x2dc>)
 800e460:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e464:	bf8c      	ite	hi
 800e466:	4688      	movhi	r8, r1
 800e468:	4698      	movls	r8, r3
 800e46a:	f022 0204 	bic.w	r2, r2, #4
 800e46e:	2303      	movs	r3, #3
 800e470:	6123      	str	r3, [r4, #16]
 800e472:	6022      	str	r2, [r4, #0]
 800e474:	f04f 0a00 	mov.w	sl, #0
 800e478:	9700      	str	r7, [sp, #0]
 800e47a:	4633      	mov	r3, r6
 800e47c:	aa0b      	add	r2, sp, #44	; 0x2c
 800e47e:	4621      	mov	r1, r4
 800e480:	4628      	mov	r0, r5
 800e482:	f000 f9e1 	bl	800e848 <_printf_common>
 800e486:	3001      	adds	r0, #1
 800e488:	f040 8089 	bne.w	800e59e <_printf_float+0x1ae>
 800e48c:	f04f 30ff 	mov.w	r0, #4294967295
 800e490:	b00d      	add	sp, #52	; 0x34
 800e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e496:	eeb4 0b40 	vcmp.f64	d0, d0
 800e49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49e:	d702      	bvc.n	800e4a6 <_printf_float+0xb6>
 800e4a0:	498b      	ldr	r1, [pc, #556]	; (800e6d0 <_printf_float+0x2e0>)
 800e4a2:	4b8c      	ldr	r3, [pc, #560]	; (800e6d4 <_printf_float+0x2e4>)
 800e4a4:	e7dc      	b.n	800e460 <_printf_float+0x70>
 800e4a6:	6861      	ldr	r1, [r4, #4]
 800e4a8:	1c4b      	adds	r3, r1, #1
 800e4aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4ae:	ab0a      	add	r3, sp, #40	; 0x28
 800e4b0:	a809      	add	r0, sp, #36	; 0x24
 800e4b2:	d13b      	bne.n	800e52c <_printf_float+0x13c>
 800e4b4:	2106      	movs	r1, #6
 800e4b6:	6061      	str	r1, [r4, #4]
 800e4b8:	f04f 0c00 	mov.w	ip, #0
 800e4bc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800e4c0:	e9cd 0900 	strd	r0, r9, [sp]
 800e4c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e4c8:	6022      	str	r2, [r4, #0]
 800e4ca:	6861      	ldr	r1, [r4, #4]
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	f7ff ff07 	bl	800e2e0 <__cvt>
 800e4d2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800e4d6:	2b47      	cmp	r3, #71	; 0x47
 800e4d8:	4680      	mov	r8, r0
 800e4da:	d109      	bne.n	800e4f0 <_printf_float+0x100>
 800e4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4de:	1cd8      	adds	r0, r3, #3
 800e4e0:	db02      	blt.n	800e4e8 <_printf_float+0xf8>
 800e4e2:	6862      	ldr	r2, [r4, #4]
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	dd47      	ble.n	800e578 <_printf_float+0x188>
 800e4e8:	f1a9 0902 	sub.w	r9, r9, #2
 800e4ec:	fa5f f989 	uxtb.w	r9, r9
 800e4f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e4f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4f6:	d824      	bhi.n	800e542 <_printf_float+0x152>
 800e4f8:	3901      	subs	r1, #1
 800e4fa:	464a      	mov	r2, r9
 800e4fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e500:	9109      	str	r1, [sp, #36]	; 0x24
 800e502:	f7ff ff3f 	bl	800e384 <__exponent>
 800e506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e508:	1813      	adds	r3, r2, r0
 800e50a:	2a01      	cmp	r2, #1
 800e50c:	4682      	mov	sl, r0
 800e50e:	6123      	str	r3, [r4, #16]
 800e510:	dc02      	bgt.n	800e518 <_printf_float+0x128>
 800e512:	6822      	ldr	r2, [r4, #0]
 800e514:	07d1      	lsls	r1, r2, #31
 800e516:	d501      	bpl.n	800e51c <_printf_float+0x12c>
 800e518:	3301      	adds	r3, #1
 800e51a:	6123      	str	r3, [r4, #16]
 800e51c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e520:	2b00      	cmp	r3, #0
 800e522:	d0a9      	beq.n	800e478 <_printf_float+0x88>
 800e524:	232d      	movs	r3, #45	; 0x2d
 800e526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e52a:	e7a5      	b.n	800e478 <_printf_float+0x88>
 800e52c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800e530:	f000 8178 	beq.w	800e824 <_printf_float+0x434>
 800e534:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e538:	d1be      	bne.n	800e4b8 <_printf_float+0xc8>
 800e53a:	2900      	cmp	r1, #0
 800e53c:	d1bc      	bne.n	800e4b8 <_printf_float+0xc8>
 800e53e:	2101      	movs	r1, #1
 800e540:	e7b9      	b.n	800e4b6 <_printf_float+0xc6>
 800e542:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e546:	d119      	bne.n	800e57c <_printf_float+0x18c>
 800e548:	2900      	cmp	r1, #0
 800e54a:	6863      	ldr	r3, [r4, #4]
 800e54c:	dd0c      	ble.n	800e568 <_printf_float+0x178>
 800e54e:	6121      	str	r1, [r4, #16]
 800e550:	b913      	cbnz	r3, 800e558 <_printf_float+0x168>
 800e552:	6822      	ldr	r2, [r4, #0]
 800e554:	07d2      	lsls	r2, r2, #31
 800e556:	d502      	bpl.n	800e55e <_printf_float+0x16e>
 800e558:	3301      	adds	r3, #1
 800e55a:	440b      	add	r3, r1
 800e55c:	6123      	str	r3, [r4, #16]
 800e55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e560:	65a3      	str	r3, [r4, #88]	; 0x58
 800e562:	f04f 0a00 	mov.w	sl, #0
 800e566:	e7d9      	b.n	800e51c <_printf_float+0x12c>
 800e568:	b913      	cbnz	r3, 800e570 <_printf_float+0x180>
 800e56a:	6822      	ldr	r2, [r4, #0]
 800e56c:	07d0      	lsls	r0, r2, #31
 800e56e:	d501      	bpl.n	800e574 <_printf_float+0x184>
 800e570:	3302      	adds	r3, #2
 800e572:	e7f3      	b.n	800e55c <_printf_float+0x16c>
 800e574:	2301      	movs	r3, #1
 800e576:	e7f1      	b.n	800e55c <_printf_float+0x16c>
 800e578:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e57c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e580:	4293      	cmp	r3, r2
 800e582:	db05      	blt.n	800e590 <_printf_float+0x1a0>
 800e584:	6822      	ldr	r2, [r4, #0]
 800e586:	6123      	str	r3, [r4, #16]
 800e588:	07d1      	lsls	r1, r2, #31
 800e58a:	d5e8      	bpl.n	800e55e <_printf_float+0x16e>
 800e58c:	3301      	adds	r3, #1
 800e58e:	e7e5      	b.n	800e55c <_printf_float+0x16c>
 800e590:	2b00      	cmp	r3, #0
 800e592:	bfd4      	ite	le
 800e594:	f1c3 0302 	rsble	r3, r3, #2
 800e598:	2301      	movgt	r3, #1
 800e59a:	4413      	add	r3, r2
 800e59c:	e7de      	b.n	800e55c <_printf_float+0x16c>
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	055a      	lsls	r2, r3, #21
 800e5a2:	d407      	bmi.n	800e5b4 <_printf_float+0x1c4>
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	4642      	mov	r2, r8
 800e5a8:	4631      	mov	r1, r6
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	47b8      	blx	r7
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	d12a      	bne.n	800e608 <_printf_float+0x218>
 800e5b2:	e76b      	b.n	800e48c <_printf_float+0x9c>
 800e5b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e5b8:	f240 80de 	bls.w	800e778 <_printf_float+0x388>
 800e5bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e5c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c8:	d133      	bne.n	800e632 <_printf_float+0x242>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	4a42      	ldr	r2, [pc, #264]	; (800e6d8 <_printf_float+0x2e8>)
 800e5ce:	4631      	mov	r1, r6
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	47b8      	blx	r7
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	f43f af59 	beq.w	800e48c <_printf_float+0x9c>
 800e5da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	db02      	blt.n	800e5e8 <_printf_float+0x1f8>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	07d8      	lsls	r0, r3, #31
 800e5e6:	d50f      	bpl.n	800e608 <_printf_float+0x218>
 800e5e8:	9b05      	ldr	r3, [sp, #20]
 800e5ea:	465a      	mov	r2, fp
 800e5ec:	4631      	mov	r1, r6
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	47b8      	blx	r7
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	f43f af4a 	beq.w	800e48c <_printf_float+0x9c>
 800e5f8:	f04f 0800 	mov.w	r8, #0
 800e5fc:	f104 091a 	add.w	r9, r4, #26
 800e600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e602:	3b01      	subs	r3, #1
 800e604:	4543      	cmp	r3, r8
 800e606:	dc09      	bgt.n	800e61c <_printf_float+0x22c>
 800e608:	6823      	ldr	r3, [r4, #0]
 800e60a:	079b      	lsls	r3, r3, #30
 800e60c:	f100 8105 	bmi.w	800e81a <_printf_float+0x42a>
 800e610:	68e0      	ldr	r0, [r4, #12]
 800e612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e614:	4298      	cmp	r0, r3
 800e616:	bfb8      	it	lt
 800e618:	4618      	movlt	r0, r3
 800e61a:	e739      	b.n	800e490 <_printf_float+0xa0>
 800e61c:	2301      	movs	r3, #1
 800e61e:	464a      	mov	r2, r9
 800e620:	4631      	mov	r1, r6
 800e622:	4628      	mov	r0, r5
 800e624:	47b8      	blx	r7
 800e626:	3001      	adds	r0, #1
 800e628:	f43f af30 	beq.w	800e48c <_printf_float+0x9c>
 800e62c:	f108 0801 	add.w	r8, r8, #1
 800e630:	e7e6      	b.n	800e600 <_printf_float+0x210>
 800e632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e634:	2b00      	cmp	r3, #0
 800e636:	dc2b      	bgt.n	800e690 <_printf_float+0x2a0>
 800e638:	2301      	movs	r3, #1
 800e63a:	4a27      	ldr	r2, [pc, #156]	; (800e6d8 <_printf_float+0x2e8>)
 800e63c:	4631      	mov	r1, r6
 800e63e:	4628      	mov	r0, r5
 800e640:	47b8      	blx	r7
 800e642:	3001      	adds	r0, #1
 800e644:	f43f af22 	beq.w	800e48c <_printf_float+0x9c>
 800e648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e64a:	b923      	cbnz	r3, 800e656 <_printf_float+0x266>
 800e64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64e:	b913      	cbnz	r3, 800e656 <_printf_float+0x266>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	07d9      	lsls	r1, r3, #31
 800e654:	d5d8      	bpl.n	800e608 <_printf_float+0x218>
 800e656:	9b05      	ldr	r3, [sp, #20]
 800e658:	465a      	mov	r2, fp
 800e65a:	4631      	mov	r1, r6
 800e65c:	4628      	mov	r0, r5
 800e65e:	47b8      	blx	r7
 800e660:	3001      	adds	r0, #1
 800e662:	f43f af13 	beq.w	800e48c <_printf_float+0x9c>
 800e666:	f04f 0900 	mov.w	r9, #0
 800e66a:	f104 0a1a 	add.w	sl, r4, #26
 800e66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e670:	425b      	negs	r3, r3
 800e672:	454b      	cmp	r3, r9
 800e674:	dc01      	bgt.n	800e67a <_printf_float+0x28a>
 800e676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e678:	e795      	b.n	800e5a6 <_printf_float+0x1b6>
 800e67a:	2301      	movs	r3, #1
 800e67c:	4652      	mov	r2, sl
 800e67e:	4631      	mov	r1, r6
 800e680:	4628      	mov	r0, r5
 800e682:	47b8      	blx	r7
 800e684:	3001      	adds	r0, #1
 800e686:	f43f af01 	beq.w	800e48c <_printf_float+0x9c>
 800e68a:	f109 0901 	add.w	r9, r9, #1
 800e68e:	e7ee      	b.n	800e66e <_printf_float+0x27e>
 800e690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e694:	429a      	cmp	r2, r3
 800e696:	bfa8      	it	ge
 800e698:	461a      	movge	r2, r3
 800e69a:	2a00      	cmp	r2, #0
 800e69c:	4691      	mov	r9, r2
 800e69e:	dd07      	ble.n	800e6b0 <_printf_float+0x2c0>
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	4631      	mov	r1, r6
 800e6a4:	4642      	mov	r2, r8
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	47b8      	blx	r7
 800e6aa:	3001      	adds	r0, #1
 800e6ac:	f43f aeee 	beq.w	800e48c <_printf_float+0x9c>
 800e6b0:	f104 031a 	add.w	r3, r4, #26
 800e6b4:	f04f 0a00 	mov.w	sl, #0
 800e6b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6bc:	9307      	str	r3, [sp, #28]
 800e6be:	e017      	b.n	800e6f0 <_printf_float+0x300>
 800e6c0:	ffffffff 	.word	0xffffffff
 800e6c4:	7fefffff 	.word	0x7fefffff
 800e6c8:	08012fac 	.word	0x08012fac
 800e6cc:	08012fa8 	.word	0x08012fa8
 800e6d0:	08012fb4 	.word	0x08012fb4
 800e6d4:	08012fb0 	.word	0x08012fb0
 800e6d8:	080131d3 	.word	0x080131d3
 800e6dc:	2301      	movs	r3, #1
 800e6de:	9a07      	ldr	r2, [sp, #28]
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b8      	blx	r7
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	f43f aed0 	beq.w	800e48c <_printf_float+0x9c>
 800e6ec:	f10a 0a01 	add.w	sl, sl, #1
 800e6f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6f2:	9306      	str	r3, [sp, #24]
 800e6f4:	eba3 0309 	sub.w	r3, r3, r9
 800e6f8:	4553      	cmp	r3, sl
 800e6fa:	dcef      	bgt.n	800e6dc <_printf_float+0x2ec>
 800e6fc:	9b06      	ldr	r3, [sp, #24]
 800e6fe:	4498      	add	r8, r3
 800e700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e704:	429a      	cmp	r2, r3
 800e706:	db15      	blt.n	800e734 <_printf_float+0x344>
 800e708:	6823      	ldr	r3, [r4, #0]
 800e70a:	07da      	lsls	r2, r3, #31
 800e70c:	d412      	bmi.n	800e734 <_printf_float+0x344>
 800e70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e710:	9a06      	ldr	r2, [sp, #24]
 800e712:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e714:	1a9a      	subs	r2, r3, r2
 800e716:	eba3 0a01 	sub.w	sl, r3, r1
 800e71a:	4592      	cmp	sl, r2
 800e71c:	bfa8      	it	ge
 800e71e:	4692      	movge	sl, r2
 800e720:	f1ba 0f00 	cmp.w	sl, #0
 800e724:	dc0e      	bgt.n	800e744 <_printf_float+0x354>
 800e726:	f04f 0800 	mov.w	r8, #0
 800e72a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e72e:	f104 091a 	add.w	r9, r4, #26
 800e732:	e019      	b.n	800e768 <_printf_float+0x378>
 800e734:	9b05      	ldr	r3, [sp, #20]
 800e736:	465a      	mov	r2, fp
 800e738:	4631      	mov	r1, r6
 800e73a:	4628      	mov	r0, r5
 800e73c:	47b8      	blx	r7
 800e73e:	3001      	adds	r0, #1
 800e740:	d1e5      	bne.n	800e70e <_printf_float+0x31e>
 800e742:	e6a3      	b.n	800e48c <_printf_float+0x9c>
 800e744:	4653      	mov	r3, sl
 800e746:	4642      	mov	r2, r8
 800e748:	4631      	mov	r1, r6
 800e74a:	4628      	mov	r0, r5
 800e74c:	47b8      	blx	r7
 800e74e:	3001      	adds	r0, #1
 800e750:	d1e9      	bne.n	800e726 <_printf_float+0x336>
 800e752:	e69b      	b.n	800e48c <_printf_float+0x9c>
 800e754:	2301      	movs	r3, #1
 800e756:	464a      	mov	r2, r9
 800e758:	4631      	mov	r1, r6
 800e75a:	4628      	mov	r0, r5
 800e75c:	47b8      	blx	r7
 800e75e:	3001      	adds	r0, #1
 800e760:	f43f ae94 	beq.w	800e48c <_printf_float+0x9c>
 800e764:	f108 0801 	add.w	r8, r8, #1
 800e768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e76c:	1a9b      	subs	r3, r3, r2
 800e76e:	eba3 030a 	sub.w	r3, r3, sl
 800e772:	4543      	cmp	r3, r8
 800e774:	dcee      	bgt.n	800e754 <_printf_float+0x364>
 800e776:	e747      	b.n	800e608 <_printf_float+0x218>
 800e778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e77a:	2a01      	cmp	r2, #1
 800e77c:	dc01      	bgt.n	800e782 <_printf_float+0x392>
 800e77e:	07db      	lsls	r3, r3, #31
 800e780:	d539      	bpl.n	800e7f6 <_printf_float+0x406>
 800e782:	2301      	movs	r3, #1
 800e784:	4642      	mov	r2, r8
 800e786:	4631      	mov	r1, r6
 800e788:	4628      	mov	r0, r5
 800e78a:	47b8      	blx	r7
 800e78c:	3001      	adds	r0, #1
 800e78e:	f43f ae7d 	beq.w	800e48c <_printf_float+0x9c>
 800e792:	9b05      	ldr	r3, [sp, #20]
 800e794:	465a      	mov	r2, fp
 800e796:	4631      	mov	r1, r6
 800e798:	4628      	mov	r0, r5
 800e79a:	47b8      	blx	r7
 800e79c:	3001      	adds	r0, #1
 800e79e:	f108 0801 	add.w	r8, r8, #1
 800e7a2:	f43f ae73 	beq.w	800e48c <_printf_float+0x9c>
 800e7a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b4:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7b8:	d018      	beq.n	800e7ec <_printf_float+0x3fc>
 800e7ba:	4642      	mov	r2, r8
 800e7bc:	4631      	mov	r1, r6
 800e7be:	4628      	mov	r0, r5
 800e7c0:	47b8      	blx	r7
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	d10e      	bne.n	800e7e4 <_printf_float+0x3f4>
 800e7c6:	e661      	b.n	800e48c <_printf_float+0x9c>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	464a      	mov	r2, r9
 800e7cc:	4631      	mov	r1, r6
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	47b8      	blx	r7
 800e7d2:	3001      	adds	r0, #1
 800e7d4:	f43f ae5a 	beq.w	800e48c <_printf_float+0x9c>
 800e7d8:	f108 0801 	add.w	r8, r8, #1
 800e7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	4543      	cmp	r3, r8
 800e7e2:	dcf1      	bgt.n	800e7c8 <_printf_float+0x3d8>
 800e7e4:	4653      	mov	r3, sl
 800e7e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e7ea:	e6dd      	b.n	800e5a8 <_printf_float+0x1b8>
 800e7ec:	f04f 0800 	mov.w	r8, #0
 800e7f0:	f104 091a 	add.w	r9, r4, #26
 800e7f4:	e7f2      	b.n	800e7dc <_printf_float+0x3ec>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e7df      	b.n	800e7ba <_printf_float+0x3ca>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	464a      	mov	r2, r9
 800e7fe:	4631      	mov	r1, r6
 800e800:	4628      	mov	r0, r5
 800e802:	47b8      	blx	r7
 800e804:	3001      	adds	r0, #1
 800e806:	f43f ae41 	beq.w	800e48c <_printf_float+0x9c>
 800e80a:	f108 0801 	add.w	r8, r8, #1
 800e80e:	68e3      	ldr	r3, [r4, #12]
 800e810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e812:	1a9b      	subs	r3, r3, r2
 800e814:	4543      	cmp	r3, r8
 800e816:	dcf0      	bgt.n	800e7fa <_printf_float+0x40a>
 800e818:	e6fa      	b.n	800e610 <_printf_float+0x220>
 800e81a:	f04f 0800 	mov.w	r8, #0
 800e81e:	f104 0919 	add.w	r9, r4, #25
 800e822:	e7f4      	b.n	800e80e <_printf_float+0x41e>
 800e824:	2900      	cmp	r1, #0
 800e826:	f43f ae8a 	beq.w	800e53e <_printf_float+0x14e>
 800e82a:	f04f 0c00 	mov.w	ip, #0
 800e82e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800e832:	e9cd 0900 	strd	r0, r9, [sp]
 800e836:	6022      	str	r2, [r4, #0]
 800e838:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e83c:	4628      	mov	r0, r5
 800e83e:	f7ff fd4f 	bl	800e2e0 <__cvt>
 800e842:	4680      	mov	r8, r0
 800e844:	e64a      	b.n	800e4dc <_printf_float+0xec>
 800e846:	bf00      	nop

0800e848 <_printf_common>:
 800e848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e84c:	4691      	mov	r9, r2
 800e84e:	461f      	mov	r7, r3
 800e850:	688a      	ldr	r2, [r1, #8]
 800e852:	690b      	ldr	r3, [r1, #16]
 800e854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e858:	4293      	cmp	r3, r2
 800e85a:	bfb8      	it	lt
 800e85c:	4613      	movlt	r3, r2
 800e85e:	f8c9 3000 	str.w	r3, [r9]
 800e862:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e866:	4606      	mov	r6, r0
 800e868:	460c      	mov	r4, r1
 800e86a:	b112      	cbz	r2, 800e872 <_printf_common+0x2a>
 800e86c:	3301      	adds	r3, #1
 800e86e:	f8c9 3000 	str.w	r3, [r9]
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	0699      	lsls	r1, r3, #26
 800e876:	bf42      	ittt	mi
 800e878:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e87c:	3302      	addmi	r3, #2
 800e87e:	f8c9 3000 	strmi.w	r3, [r9]
 800e882:	6825      	ldr	r5, [r4, #0]
 800e884:	f015 0506 	ands.w	r5, r5, #6
 800e888:	d107      	bne.n	800e89a <_printf_common+0x52>
 800e88a:	f104 0a19 	add.w	sl, r4, #25
 800e88e:	68e3      	ldr	r3, [r4, #12]
 800e890:	f8d9 2000 	ldr.w	r2, [r9]
 800e894:	1a9b      	subs	r3, r3, r2
 800e896:	42ab      	cmp	r3, r5
 800e898:	dc28      	bgt.n	800e8ec <_printf_common+0xa4>
 800e89a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e89e:	6822      	ldr	r2, [r4, #0]
 800e8a0:	3300      	adds	r3, #0
 800e8a2:	bf18      	it	ne
 800e8a4:	2301      	movne	r3, #1
 800e8a6:	0692      	lsls	r2, r2, #26
 800e8a8:	d42d      	bmi.n	800e906 <_printf_common+0xbe>
 800e8aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8ae:	4639      	mov	r1, r7
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	47c0      	blx	r8
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	d020      	beq.n	800e8fa <_printf_common+0xb2>
 800e8b8:	6823      	ldr	r3, [r4, #0]
 800e8ba:	68e5      	ldr	r5, [r4, #12]
 800e8bc:	f8d9 2000 	ldr.w	r2, [r9]
 800e8c0:	f003 0306 	and.w	r3, r3, #6
 800e8c4:	2b04      	cmp	r3, #4
 800e8c6:	bf08      	it	eq
 800e8c8:	1aad      	subeq	r5, r5, r2
 800e8ca:	68a3      	ldr	r3, [r4, #8]
 800e8cc:	6922      	ldr	r2, [r4, #16]
 800e8ce:	bf0c      	ite	eq
 800e8d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8d4:	2500      	movne	r5, #0
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	bfc4      	itt	gt
 800e8da:	1a9b      	subgt	r3, r3, r2
 800e8dc:	18ed      	addgt	r5, r5, r3
 800e8de:	f04f 0900 	mov.w	r9, #0
 800e8e2:	341a      	adds	r4, #26
 800e8e4:	454d      	cmp	r5, r9
 800e8e6:	d11a      	bne.n	800e91e <_printf_common+0xd6>
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	e008      	b.n	800e8fe <_printf_common+0xb6>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	4652      	mov	r2, sl
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	47c0      	blx	r8
 800e8f6:	3001      	adds	r0, #1
 800e8f8:	d103      	bne.n	800e902 <_printf_common+0xba>
 800e8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	3501      	adds	r5, #1
 800e904:	e7c3      	b.n	800e88e <_printf_common+0x46>
 800e906:	18e1      	adds	r1, r4, r3
 800e908:	1c5a      	adds	r2, r3, #1
 800e90a:	2030      	movs	r0, #48	; 0x30
 800e90c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e910:	4422      	add	r2, r4
 800e912:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e916:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e91a:	3302      	adds	r3, #2
 800e91c:	e7c5      	b.n	800e8aa <_printf_common+0x62>
 800e91e:	2301      	movs	r3, #1
 800e920:	4622      	mov	r2, r4
 800e922:	4639      	mov	r1, r7
 800e924:	4630      	mov	r0, r6
 800e926:	47c0      	blx	r8
 800e928:	3001      	adds	r0, #1
 800e92a:	d0e6      	beq.n	800e8fa <_printf_common+0xb2>
 800e92c:	f109 0901 	add.w	r9, r9, #1
 800e930:	e7d8      	b.n	800e8e4 <_printf_common+0x9c>
	...

0800e934 <_printf_i>:
 800e934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e938:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e93c:	460c      	mov	r4, r1
 800e93e:	7e09      	ldrb	r1, [r1, #24]
 800e940:	b085      	sub	sp, #20
 800e942:	296e      	cmp	r1, #110	; 0x6e
 800e944:	4617      	mov	r7, r2
 800e946:	4606      	mov	r6, r0
 800e948:	4698      	mov	r8, r3
 800e94a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e94c:	f000 80b3 	beq.w	800eab6 <_printf_i+0x182>
 800e950:	d822      	bhi.n	800e998 <_printf_i+0x64>
 800e952:	2963      	cmp	r1, #99	; 0x63
 800e954:	d036      	beq.n	800e9c4 <_printf_i+0x90>
 800e956:	d80a      	bhi.n	800e96e <_printf_i+0x3a>
 800e958:	2900      	cmp	r1, #0
 800e95a:	f000 80b9 	beq.w	800ead0 <_printf_i+0x19c>
 800e95e:	2958      	cmp	r1, #88	; 0x58
 800e960:	f000 8083 	beq.w	800ea6a <_printf_i+0x136>
 800e964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e968:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e96c:	e032      	b.n	800e9d4 <_printf_i+0xa0>
 800e96e:	2964      	cmp	r1, #100	; 0x64
 800e970:	d001      	beq.n	800e976 <_printf_i+0x42>
 800e972:	2969      	cmp	r1, #105	; 0x69
 800e974:	d1f6      	bne.n	800e964 <_printf_i+0x30>
 800e976:	6820      	ldr	r0, [r4, #0]
 800e978:	6813      	ldr	r3, [r2, #0]
 800e97a:	0605      	lsls	r5, r0, #24
 800e97c:	f103 0104 	add.w	r1, r3, #4
 800e980:	d52a      	bpl.n	800e9d8 <_printf_i+0xa4>
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	6011      	str	r1, [r2, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	da03      	bge.n	800e992 <_printf_i+0x5e>
 800e98a:	222d      	movs	r2, #45	; 0x2d
 800e98c:	425b      	negs	r3, r3
 800e98e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e992:	486f      	ldr	r0, [pc, #444]	; (800eb50 <_printf_i+0x21c>)
 800e994:	220a      	movs	r2, #10
 800e996:	e039      	b.n	800ea0c <_printf_i+0xd8>
 800e998:	2973      	cmp	r1, #115	; 0x73
 800e99a:	f000 809d 	beq.w	800ead8 <_printf_i+0x1a4>
 800e99e:	d808      	bhi.n	800e9b2 <_printf_i+0x7e>
 800e9a0:	296f      	cmp	r1, #111	; 0x6f
 800e9a2:	d020      	beq.n	800e9e6 <_printf_i+0xb2>
 800e9a4:	2970      	cmp	r1, #112	; 0x70
 800e9a6:	d1dd      	bne.n	800e964 <_printf_i+0x30>
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	f043 0320 	orr.w	r3, r3, #32
 800e9ae:	6023      	str	r3, [r4, #0]
 800e9b0:	e003      	b.n	800e9ba <_printf_i+0x86>
 800e9b2:	2975      	cmp	r1, #117	; 0x75
 800e9b4:	d017      	beq.n	800e9e6 <_printf_i+0xb2>
 800e9b6:	2978      	cmp	r1, #120	; 0x78
 800e9b8:	d1d4      	bne.n	800e964 <_printf_i+0x30>
 800e9ba:	2378      	movs	r3, #120	; 0x78
 800e9bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9c0:	4864      	ldr	r0, [pc, #400]	; (800eb54 <_printf_i+0x220>)
 800e9c2:	e055      	b.n	800ea70 <_printf_i+0x13c>
 800e9c4:	6813      	ldr	r3, [r2, #0]
 800e9c6:	1d19      	adds	r1, r3, #4
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	6011      	str	r1, [r2, #0]
 800e9cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	e08c      	b.n	800eaf2 <_printf_i+0x1be>
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	6011      	str	r1, [r2, #0]
 800e9dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e9e0:	bf18      	it	ne
 800e9e2:	b21b      	sxthne	r3, r3
 800e9e4:	e7cf      	b.n	800e986 <_printf_i+0x52>
 800e9e6:	6813      	ldr	r3, [r2, #0]
 800e9e8:	6825      	ldr	r5, [r4, #0]
 800e9ea:	1d18      	adds	r0, r3, #4
 800e9ec:	6010      	str	r0, [r2, #0]
 800e9ee:	0628      	lsls	r0, r5, #24
 800e9f0:	d501      	bpl.n	800e9f6 <_printf_i+0xc2>
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	e002      	b.n	800e9fc <_printf_i+0xc8>
 800e9f6:	0668      	lsls	r0, r5, #25
 800e9f8:	d5fb      	bpl.n	800e9f2 <_printf_i+0xbe>
 800e9fa:	881b      	ldrh	r3, [r3, #0]
 800e9fc:	4854      	ldr	r0, [pc, #336]	; (800eb50 <_printf_i+0x21c>)
 800e9fe:	296f      	cmp	r1, #111	; 0x6f
 800ea00:	bf14      	ite	ne
 800ea02:	220a      	movne	r2, #10
 800ea04:	2208      	moveq	r2, #8
 800ea06:	2100      	movs	r1, #0
 800ea08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea0c:	6865      	ldr	r5, [r4, #4]
 800ea0e:	60a5      	str	r5, [r4, #8]
 800ea10:	2d00      	cmp	r5, #0
 800ea12:	f2c0 8095 	blt.w	800eb40 <_printf_i+0x20c>
 800ea16:	6821      	ldr	r1, [r4, #0]
 800ea18:	f021 0104 	bic.w	r1, r1, #4
 800ea1c:	6021      	str	r1, [r4, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d13d      	bne.n	800ea9e <_printf_i+0x16a>
 800ea22:	2d00      	cmp	r5, #0
 800ea24:	f040 808e 	bne.w	800eb44 <_printf_i+0x210>
 800ea28:	4665      	mov	r5, ip
 800ea2a:	2a08      	cmp	r2, #8
 800ea2c:	d10b      	bne.n	800ea46 <_printf_i+0x112>
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	07db      	lsls	r3, r3, #31
 800ea32:	d508      	bpl.n	800ea46 <_printf_i+0x112>
 800ea34:	6923      	ldr	r3, [r4, #16]
 800ea36:	6862      	ldr	r2, [r4, #4]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	bfde      	ittt	le
 800ea3c:	2330      	movle	r3, #48	; 0x30
 800ea3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea42:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea46:	ebac 0305 	sub.w	r3, ip, r5
 800ea4a:	6123      	str	r3, [r4, #16]
 800ea4c:	f8cd 8000 	str.w	r8, [sp]
 800ea50:	463b      	mov	r3, r7
 800ea52:	aa03      	add	r2, sp, #12
 800ea54:	4621      	mov	r1, r4
 800ea56:	4630      	mov	r0, r6
 800ea58:	f7ff fef6 	bl	800e848 <_printf_common>
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	d14d      	bne.n	800eafc <_printf_i+0x1c8>
 800ea60:	f04f 30ff 	mov.w	r0, #4294967295
 800ea64:	b005      	add	sp, #20
 800ea66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea6a:	4839      	ldr	r0, [pc, #228]	; (800eb50 <_printf_i+0x21c>)
 800ea6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ea70:	6813      	ldr	r3, [r2, #0]
 800ea72:	6821      	ldr	r1, [r4, #0]
 800ea74:	1d1d      	adds	r5, r3, #4
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	6015      	str	r5, [r2, #0]
 800ea7a:	060a      	lsls	r2, r1, #24
 800ea7c:	d50b      	bpl.n	800ea96 <_printf_i+0x162>
 800ea7e:	07ca      	lsls	r2, r1, #31
 800ea80:	bf44      	itt	mi
 800ea82:	f041 0120 	orrmi.w	r1, r1, #32
 800ea86:	6021      	strmi	r1, [r4, #0]
 800ea88:	b91b      	cbnz	r3, 800ea92 <_printf_i+0x15e>
 800ea8a:	6822      	ldr	r2, [r4, #0]
 800ea8c:	f022 0220 	bic.w	r2, r2, #32
 800ea90:	6022      	str	r2, [r4, #0]
 800ea92:	2210      	movs	r2, #16
 800ea94:	e7b7      	b.n	800ea06 <_printf_i+0xd2>
 800ea96:	064d      	lsls	r5, r1, #25
 800ea98:	bf48      	it	mi
 800ea9a:	b29b      	uxthmi	r3, r3
 800ea9c:	e7ef      	b.n	800ea7e <_printf_i+0x14a>
 800ea9e:	4665      	mov	r5, ip
 800eaa0:	fbb3 f1f2 	udiv	r1, r3, r2
 800eaa4:	fb02 3311 	mls	r3, r2, r1, r3
 800eaa8:	5cc3      	ldrb	r3, [r0, r3]
 800eaaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eaae:	460b      	mov	r3, r1
 800eab0:	2900      	cmp	r1, #0
 800eab2:	d1f5      	bne.n	800eaa0 <_printf_i+0x16c>
 800eab4:	e7b9      	b.n	800ea2a <_printf_i+0xf6>
 800eab6:	6813      	ldr	r3, [r2, #0]
 800eab8:	6825      	ldr	r5, [r4, #0]
 800eaba:	6961      	ldr	r1, [r4, #20]
 800eabc:	1d18      	adds	r0, r3, #4
 800eabe:	6010      	str	r0, [r2, #0]
 800eac0:	0628      	lsls	r0, r5, #24
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	d501      	bpl.n	800eaca <_printf_i+0x196>
 800eac6:	6019      	str	r1, [r3, #0]
 800eac8:	e002      	b.n	800ead0 <_printf_i+0x19c>
 800eaca:	066a      	lsls	r2, r5, #25
 800eacc:	d5fb      	bpl.n	800eac6 <_printf_i+0x192>
 800eace:	8019      	strh	r1, [r3, #0]
 800ead0:	2300      	movs	r3, #0
 800ead2:	6123      	str	r3, [r4, #16]
 800ead4:	4665      	mov	r5, ip
 800ead6:	e7b9      	b.n	800ea4c <_printf_i+0x118>
 800ead8:	6813      	ldr	r3, [r2, #0]
 800eada:	1d19      	adds	r1, r3, #4
 800eadc:	6011      	str	r1, [r2, #0]
 800eade:	681d      	ldr	r5, [r3, #0]
 800eae0:	6862      	ldr	r2, [r4, #4]
 800eae2:	2100      	movs	r1, #0
 800eae4:	4628      	mov	r0, r5
 800eae6:	f7f1 fbb3 	bl	8000250 <memchr>
 800eaea:	b108      	cbz	r0, 800eaf0 <_printf_i+0x1bc>
 800eaec:	1b40      	subs	r0, r0, r5
 800eaee:	6060      	str	r0, [r4, #4]
 800eaf0:	6863      	ldr	r3, [r4, #4]
 800eaf2:	6123      	str	r3, [r4, #16]
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eafa:	e7a7      	b.n	800ea4c <_printf_i+0x118>
 800eafc:	6923      	ldr	r3, [r4, #16]
 800eafe:	462a      	mov	r2, r5
 800eb00:	4639      	mov	r1, r7
 800eb02:	4630      	mov	r0, r6
 800eb04:	47c0      	blx	r8
 800eb06:	3001      	adds	r0, #1
 800eb08:	d0aa      	beq.n	800ea60 <_printf_i+0x12c>
 800eb0a:	6823      	ldr	r3, [r4, #0]
 800eb0c:	079b      	lsls	r3, r3, #30
 800eb0e:	d413      	bmi.n	800eb38 <_printf_i+0x204>
 800eb10:	68e0      	ldr	r0, [r4, #12]
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	4298      	cmp	r0, r3
 800eb16:	bfb8      	it	lt
 800eb18:	4618      	movlt	r0, r3
 800eb1a:	e7a3      	b.n	800ea64 <_printf_i+0x130>
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	464a      	mov	r2, r9
 800eb20:	4639      	mov	r1, r7
 800eb22:	4630      	mov	r0, r6
 800eb24:	47c0      	blx	r8
 800eb26:	3001      	adds	r0, #1
 800eb28:	d09a      	beq.n	800ea60 <_printf_i+0x12c>
 800eb2a:	3501      	adds	r5, #1
 800eb2c:	68e3      	ldr	r3, [r4, #12]
 800eb2e:	9a03      	ldr	r2, [sp, #12]
 800eb30:	1a9b      	subs	r3, r3, r2
 800eb32:	42ab      	cmp	r3, r5
 800eb34:	dcf2      	bgt.n	800eb1c <_printf_i+0x1e8>
 800eb36:	e7eb      	b.n	800eb10 <_printf_i+0x1dc>
 800eb38:	2500      	movs	r5, #0
 800eb3a:	f104 0919 	add.w	r9, r4, #25
 800eb3e:	e7f5      	b.n	800eb2c <_printf_i+0x1f8>
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1ac      	bne.n	800ea9e <_printf_i+0x16a>
 800eb44:	7803      	ldrb	r3, [r0, #0]
 800eb46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb4e:	e76c      	b.n	800ea2a <_printf_i+0xf6>
 800eb50:	08012fb8 	.word	0x08012fb8
 800eb54:	08012fc9 	.word	0x08012fc9

0800eb58 <_scanf_float>:
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5c:	469a      	mov	sl, r3
 800eb5e:	688b      	ldr	r3, [r1, #8]
 800eb60:	4616      	mov	r6, r2
 800eb62:	1e5a      	subs	r2, r3, #1
 800eb64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eb68:	b087      	sub	sp, #28
 800eb6a:	bf83      	ittte	hi
 800eb6c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800eb70:	189b      	addhi	r3, r3, r2
 800eb72:	9301      	strhi	r3, [sp, #4]
 800eb74:	2300      	movls	r3, #0
 800eb76:	bf86      	itte	hi
 800eb78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eb7c:	608b      	strhi	r3, [r1, #8]
 800eb7e:	9301      	strls	r3, [sp, #4]
 800eb80:	680b      	ldr	r3, [r1, #0]
 800eb82:	4688      	mov	r8, r1
 800eb84:	f04f 0b00 	mov.w	fp, #0
 800eb88:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800eb8c:	f848 3b1c 	str.w	r3, [r8], #28
 800eb90:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800eb94:	4607      	mov	r7, r0
 800eb96:	460c      	mov	r4, r1
 800eb98:	4645      	mov	r5, r8
 800eb9a:	465a      	mov	r2, fp
 800eb9c:	46d9      	mov	r9, fp
 800eb9e:	f8cd b008 	str.w	fp, [sp, #8]
 800eba2:	68a1      	ldr	r1, [r4, #8]
 800eba4:	b181      	cbz	r1, 800ebc8 <_scanf_float+0x70>
 800eba6:	6833      	ldr	r3, [r6, #0]
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	2b49      	cmp	r3, #73	; 0x49
 800ebac:	d071      	beq.n	800ec92 <_scanf_float+0x13a>
 800ebae:	d84d      	bhi.n	800ec4c <_scanf_float+0xf4>
 800ebb0:	2b39      	cmp	r3, #57	; 0x39
 800ebb2:	d840      	bhi.n	800ec36 <_scanf_float+0xde>
 800ebb4:	2b31      	cmp	r3, #49	; 0x31
 800ebb6:	f080 8088 	bcs.w	800ecca <_scanf_float+0x172>
 800ebba:	2b2d      	cmp	r3, #45	; 0x2d
 800ebbc:	f000 8090 	beq.w	800ece0 <_scanf_float+0x188>
 800ebc0:	d815      	bhi.n	800ebee <_scanf_float+0x96>
 800ebc2:	2b2b      	cmp	r3, #43	; 0x2b
 800ebc4:	f000 808c 	beq.w	800ece0 <_scanf_float+0x188>
 800ebc8:	f1b9 0f00 	cmp.w	r9, #0
 800ebcc:	d003      	beq.n	800ebd6 <_scanf_float+0x7e>
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebd4:	6023      	str	r3, [r4, #0]
 800ebd6:	3a01      	subs	r2, #1
 800ebd8:	2a01      	cmp	r2, #1
 800ebda:	f200 80ea 	bhi.w	800edb2 <_scanf_float+0x25a>
 800ebde:	4545      	cmp	r5, r8
 800ebe0:	f200 80dc 	bhi.w	800ed9c <_scanf_float+0x244>
 800ebe4:	2601      	movs	r6, #1
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	b007      	add	sp, #28
 800ebea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebee:	2b2e      	cmp	r3, #46	; 0x2e
 800ebf0:	f000 809f 	beq.w	800ed32 <_scanf_float+0x1da>
 800ebf4:	2b30      	cmp	r3, #48	; 0x30
 800ebf6:	d1e7      	bne.n	800ebc8 <_scanf_float+0x70>
 800ebf8:	6820      	ldr	r0, [r4, #0]
 800ebfa:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ebfe:	d064      	beq.n	800ecca <_scanf_float+0x172>
 800ec00:	9b01      	ldr	r3, [sp, #4]
 800ec02:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ec06:	6020      	str	r0, [r4, #0]
 800ec08:	f109 0901 	add.w	r9, r9, #1
 800ec0c:	b11b      	cbz	r3, 800ec16 <_scanf_float+0xbe>
 800ec0e:	3b01      	subs	r3, #1
 800ec10:	3101      	adds	r1, #1
 800ec12:	9301      	str	r3, [sp, #4]
 800ec14:	60a1      	str	r1, [r4, #8]
 800ec16:	68a3      	ldr	r3, [r4, #8]
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	60a3      	str	r3, [r4, #8]
 800ec1c:	6923      	ldr	r3, [r4, #16]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	6123      	str	r3, [r4, #16]
 800ec22:	6873      	ldr	r3, [r6, #4]
 800ec24:	3b01      	subs	r3, #1
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	6073      	str	r3, [r6, #4]
 800ec2a:	f340 80ac 	ble.w	800ed86 <_scanf_float+0x22e>
 800ec2e:	6833      	ldr	r3, [r6, #0]
 800ec30:	3301      	adds	r3, #1
 800ec32:	6033      	str	r3, [r6, #0]
 800ec34:	e7b5      	b.n	800eba2 <_scanf_float+0x4a>
 800ec36:	2b45      	cmp	r3, #69	; 0x45
 800ec38:	f000 8085 	beq.w	800ed46 <_scanf_float+0x1ee>
 800ec3c:	2b46      	cmp	r3, #70	; 0x46
 800ec3e:	d06a      	beq.n	800ed16 <_scanf_float+0x1be>
 800ec40:	2b41      	cmp	r3, #65	; 0x41
 800ec42:	d1c1      	bne.n	800ebc8 <_scanf_float+0x70>
 800ec44:	2a01      	cmp	r2, #1
 800ec46:	d1bf      	bne.n	800ebc8 <_scanf_float+0x70>
 800ec48:	2202      	movs	r2, #2
 800ec4a:	e046      	b.n	800ecda <_scanf_float+0x182>
 800ec4c:	2b65      	cmp	r3, #101	; 0x65
 800ec4e:	d07a      	beq.n	800ed46 <_scanf_float+0x1ee>
 800ec50:	d818      	bhi.n	800ec84 <_scanf_float+0x12c>
 800ec52:	2b54      	cmp	r3, #84	; 0x54
 800ec54:	d066      	beq.n	800ed24 <_scanf_float+0x1cc>
 800ec56:	d811      	bhi.n	800ec7c <_scanf_float+0x124>
 800ec58:	2b4e      	cmp	r3, #78	; 0x4e
 800ec5a:	d1b5      	bne.n	800ebc8 <_scanf_float+0x70>
 800ec5c:	2a00      	cmp	r2, #0
 800ec5e:	d146      	bne.n	800ecee <_scanf_float+0x196>
 800ec60:	f1b9 0f00 	cmp.w	r9, #0
 800ec64:	d145      	bne.n	800ecf2 <_scanf_float+0x19a>
 800ec66:	6821      	ldr	r1, [r4, #0]
 800ec68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ec6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ec70:	d13f      	bne.n	800ecf2 <_scanf_float+0x19a>
 800ec72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ec76:	6021      	str	r1, [r4, #0]
 800ec78:	2201      	movs	r2, #1
 800ec7a:	e02e      	b.n	800ecda <_scanf_float+0x182>
 800ec7c:	2b59      	cmp	r3, #89	; 0x59
 800ec7e:	d01e      	beq.n	800ecbe <_scanf_float+0x166>
 800ec80:	2b61      	cmp	r3, #97	; 0x61
 800ec82:	e7de      	b.n	800ec42 <_scanf_float+0xea>
 800ec84:	2b6e      	cmp	r3, #110	; 0x6e
 800ec86:	d0e9      	beq.n	800ec5c <_scanf_float+0x104>
 800ec88:	d815      	bhi.n	800ecb6 <_scanf_float+0x15e>
 800ec8a:	2b66      	cmp	r3, #102	; 0x66
 800ec8c:	d043      	beq.n	800ed16 <_scanf_float+0x1be>
 800ec8e:	2b69      	cmp	r3, #105	; 0x69
 800ec90:	d19a      	bne.n	800ebc8 <_scanf_float+0x70>
 800ec92:	f1bb 0f00 	cmp.w	fp, #0
 800ec96:	d138      	bne.n	800ed0a <_scanf_float+0x1b2>
 800ec98:	f1b9 0f00 	cmp.w	r9, #0
 800ec9c:	d197      	bne.n	800ebce <_scanf_float+0x76>
 800ec9e:	6821      	ldr	r1, [r4, #0]
 800eca0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800eca4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800eca8:	d195      	bne.n	800ebd6 <_scanf_float+0x7e>
 800ecaa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ecae:	6021      	str	r1, [r4, #0]
 800ecb0:	f04f 0b01 	mov.w	fp, #1
 800ecb4:	e011      	b.n	800ecda <_scanf_float+0x182>
 800ecb6:	2b74      	cmp	r3, #116	; 0x74
 800ecb8:	d034      	beq.n	800ed24 <_scanf_float+0x1cc>
 800ecba:	2b79      	cmp	r3, #121	; 0x79
 800ecbc:	d184      	bne.n	800ebc8 <_scanf_float+0x70>
 800ecbe:	f1bb 0f07 	cmp.w	fp, #7
 800ecc2:	d181      	bne.n	800ebc8 <_scanf_float+0x70>
 800ecc4:	f04f 0b08 	mov.w	fp, #8
 800ecc8:	e007      	b.n	800ecda <_scanf_float+0x182>
 800ecca:	eb12 0f0b 	cmn.w	r2, fp
 800ecce:	f47f af7b 	bne.w	800ebc8 <_scanf_float+0x70>
 800ecd2:	6821      	ldr	r1, [r4, #0]
 800ecd4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ecd8:	6021      	str	r1, [r4, #0]
 800ecda:	702b      	strb	r3, [r5, #0]
 800ecdc:	3501      	adds	r5, #1
 800ecde:	e79a      	b.n	800ec16 <_scanf_float+0xbe>
 800ece0:	6821      	ldr	r1, [r4, #0]
 800ece2:	0608      	lsls	r0, r1, #24
 800ece4:	f57f af70 	bpl.w	800ebc8 <_scanf_float+0x70>
 800ece8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ecec:	e7f4      	b.n	800ecd8 <_scanf_float+0x180>
 800ecee:	2a02      	cmp	r2, #2
 800ecf0:	d047      	beq.n	800ed82 <_scanf_float+0x22a>
 800ecf2:	f1bb 0f01 	cmp.w	fp, #1
 800ecf6:	d003      	beq.n	800ed00 <_scanf_float+0x1a8>
 800ecf8:	f1bb 0f04 	cmp.w	fp, #4
 800ecfc:	f47f af64 	bne.w	800ebc8 <_scanf_float+0x70>
 800ed00:	f10b 0b01 	add.w	fp, fp, #1
 800ed04:	fa5f fb8b 	uxtb.w	fp, fp
 800ed08:	e7e7      	b.n	800ecda <_scanf_float+0x182>
 800ed0a:	f1bb 0f03 	cmp.w	fp, #3
 800ed0e:	d0f7      	beq.n	800ed00 <_scanf_float+0x1a8>
 800ed10:	f1bb 0f05 	cmp.w	fp, #5
 800ed14:	e7f2      	b.n	800ecfc <_scanf_float+0x1a4>
 800ed16:	f1bb 0f02 	cmp.w	fp, #2
 800ed1a:	f47f af55 	bne.w	800ebc8 <_scanf_float+0x70>
 800ed1e:	f04f 0b03 	mov.w	fp, #3
 800ed22:	e7da      	b.n	800ecda <_scanf_float+0x182>
 800ed24:	f1bb 0f06 	cmp.w	fp, #6
 800ed28:	f47f af4e 	bne.w	800ebc8 <_scanf_float+0x70>
 800ed2c:	f04f 0b07 	mov.w	fp, #7
 800ed30:	e7d3      	b.n	800ecda <_scanf_float+0x182>
 800ed32:	6821      	ldr	r1, [r4, #0]
 800ed34:	0588      	lsls	r0, r1, #22
 800ed36:	f57f af47 	bpl.w	800ebc8 <_scanf_float+0x70>
 800ed3a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ed3e:	6021      	str	r1, [r4, #0]
 800ed40:	f8cd 9008 	str.w	r9, [sp, #8]
 800ed44:	e7c9      	b.n	800ecda <_scanf_float+0x182>
 800ed46:	6821      	ldr	r1, [r4, #0]
 800ed48:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ed4c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ed50:	d006      	beq.n	800ed60 <_scanf_float+0x208>
 800ed52:	0548      	lsls	r0, r1, #21
 800ed54:	f57f af38 	bpl.w	800ebc8 <_scanf_float+0x70>
 800ed58:	f1b9 0f00 	cmp.w	r9, #0
 800ed5c:	f43f af3b 	beq.w	800ebd6 <_scanf_float+0x7e>
 800ed60:	0588      	lsls	r0, r1, #22
 800ed62:	bf58      	it	pl
 800ed64:	9802      	ldrpl	r0, [sp, #8]
 800ed66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ed6a:	bf58      	it	pl
 800ed6c:	eba9 0000 	subpl.w	r0, r9, r0
 800ed70:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ed74:	bf58      	it	pl
 800ed76:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ed7a:	6021      	str	r1, [r4, #0]
 800ed7c:	f04f 0900 	mov.w	r9, #0
 800ed80:	e7ab      	b.n	800ecda <_scanf_float+0x182>
 800ed82:	2203      	movs	r2, #3
 800ed84:	e7a9      	b.n	800ecda <_scanf_float+0x182>
 800ed86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ed8a:	9205      	str	r2, [sp, #20]
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4638      	mov	r0, r7
 800ed90:	4798      	blx	r3
 800ed92:	9a05      	ldr	r2, [sp, #20]
 800ed94:	2800      	cmp	r0, #0
 800ed96:	f43f af04 	beq.w	800eba2 <_scanf_float+0x4a>
 800ed9a:	e715      	b.n	800ebc8 <_scanf_float+0x70>
 800ed9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eda0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800eda4:	4632      	mov	r2, r6
 800eda6:	4638      	mov	r0, r7
 800eda8:	4798      	blx	r3
 800edaa:	6923      	ldr	r3, [r4, #16]
 800edac:	3b01      	subs	r3, #1
 800edae:	6123      	str	r3, [r4, #16]
 800edb0:	e715      	b.n	800ebde <_scanf_float+0x86>
 800edb2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800edb6:	2b06      	cmp	r3, #6
 800edb8:	d80a      	bhi.n	800edd0 <_scanf_float+0x278>
 800edba:	f1bb 0f02 	cmp.w	fp, #2
 800edbe:	d966      	bls.n	800ee8e <_scanf_float+0x336>
 800edc0:	f1ab 0b03 	sub.w	fp, fp, #3
 800edc4:	fa5f fb8b 	uxtb.w	fp, fp
 800edc8:	eba5 0b0b 	sub.w	fp, r5, fp
 800edcc:	455d      	cmp	r5, fp
 800edce:	d149      	bne.n	800ee64 <_scanf_float+0x30c>
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	05da      	lsls	r2, r3, #23
 800edd4:	d51f      	bpl.n	800ee16 <_scanf_float+0x2be>
 800edd6:	055b      	lsls	r3, r3, #21
 800edd8:	d466      	bmi.n	800eea8 <_scanf_float+0x350>
 800edda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800edde:	6923      	ldr	r3, [r4, #16]
 800ede0:	2965      	cmp	r1, #101	; 0x65
 800ede2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ede6:	f105 3bff 	add.w	fp, r5, #4294967295
 800edea:	6123      	str	r3, [r4, #16]
 800edec:	d00d      	beq.n	800ee0a <_scanf_float+0x2b2>
 800edee:	2945      	cmp	r1, #69	; 0x45
 800edf0:	d00b      	beq.n	800ee0a <_scanf_float+0x2b2>
 800edf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800edf6:	4632      	mov	r2, r6
 800edf8:	4638      	mov	r0, r7
 800edfa:	4798      	blx	r3
 800edfc:	6923      	ldr	r3, [r4, #16]
 800edfe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ee02:	3b01      	subs	r3, #1
 800ee04:	f1a5 0b02 	sub.w	fp, r5, #2
 800ee08:	6123      	str	r3, [r4, #16]
 800ee0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee0e:	4632      	mov	r2, r6
 800ee10:	4638      	mov	r0, r7
 800ee12:	4798      	blx	r3
 800ee14:	465d      	mov	r5, fp
 800ee16:	6826      	ldr	r6, [r4, #0]
 800ee18:	f016 0610 	ands.w	r6, r6, #16
 800ee1c:	d170      	bne.n	800ef00 <_scanf_float+0x3a8>
 800ee1e:	702e      	strb	r6, [r5, #0]
 800ee20:	6823      	ldr	r3, [r4, #0]
 800ee22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ee26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee2a:	d140      	bne.n	800eeae <_scanf_float+0x356>
 800ee2c:	9b02      	ldr	r3, [sp, #8]
 800ee2e:	eba9 0303 	sub.w	r3, r9, r3
 800ee32:	425a      	negs	r2, r3
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d147      	bne.n	800eec8 <_scanf_float+0x370>
 800ee38:	2200      	movs	r2, #0
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	4641      	mov	r1, r8
 800ee3e:	f000 ffab 	bl	800fd98 <_strtod_r>
 800ee42:	6820      	ldr	r0, [r4, #0]
 800ee44:	f8da 3000 	ldr.w	r3, [sl]
 800ee48:	f010 0f02 	tst.w	r0, #2
 800ee4c:	f103 0204 	add.w	r2, r3, #4
 800ee50:	f8ca 2000 	str.w	r2, [sl]
 800ee54:	d043      	beq.n	800eede <_scanf_float+0x386>
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	ed83 0b00 	vstr	d0, [r3]
 800ee5c:	68e3      	ldr	r3, [r4, #12]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	60e3      	str	r3, [r4, #12]
 800ee62:	e6c0      	b.n	800ebe6 <_scanf_float+0x8e>
 800ee64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ee6c:	4632      	mov	r2, r6
 800ee6e:	4638      	mov	r0, r7
 800ee70:	4798      	blx	r3
 800ee72:	6923      	ldr	r3, [r4, #16]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	6123      	str	r3, [r4, #16]
 800ee78:	e7a8      	b.n	800edcc <_scanf_float+0x274>
 800ee7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee7e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ee82:	4632      	mov	r2, r6
 800ee84:	4638      	mov	r0, r7
 800ee86:	4798      	blx	r3
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	6123      	str	r3, [r4, #16]
 800ee8e:	4545      	cmp	r5, r8
 800ee90:	d8f3      	bhi.n	800ee7a <_scanf_float+0x322>
 800ee92:	e6a7      	b.n	800ebe4 <_scanf_float+0x8c>
 800ee94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ee9c:	4632      	mov	r2, r6
 800ee9e:	4638      	mov	r0, r7
 800eea0:	4798      	blx	r3
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	3b01      	subs	r3, #1
 800eea6:	6123      	str	r3, [r4, #16]
 800eea8:	4545      	cmp	r5, r8
 800eeaa:	d8f3      	bhi.n	800ee94 <_scanf_float+0x33c>
 800eeac:	e69a      	b.n	800ebe4 <_scanf_float+0x8c>
 800eeae:	9b03      	ldr	r3, [sp, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d0c1      	beq.n	800ee38 <_scanf_float+0x2e0>
 800eeb4:	9904      	ldr	r1, [sp, #16]
 800eeb6:	230a      	movs	r3, #10
 800eeb8:	4632      	mov	r2, r6
 800eeba:	3101      	adds	r1, #1
 800eebc:	4638      	mov	r0, r7
 800eebe:	f000 fff7 	bl	800feb0 <_strtol_r>
 800eec2:	9b03      	ldr	r3, [sp, #12]
 800eec4:	9d04      	ldr	r5, [sp, #16]
 800eec6:	1ac2      	subs	r2, r0, r3
 800eec8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eecc:	429d      	cmp	r5, r3
 800eece:	bf28      	it	cs
 800eed0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800eed4:	490b      	ldr	r1, [pc, #44]	; (800ef04 <_scanf_float+0x3ac>)
 800eed6:	4628      	mov	r0, r5
 800eed8:	f000 f8ec 	bl	800f0b4 <siprintf>
 800eedc:	e7ac      	b.n	800ee38 <_scanf_float+0x2e0>
 800eede:	f010 0004 	ands.w	r0, r0, #4
 800eee2:	d1b8      	bne.n	800ee56 <_scanf_float+0x2fe>
 800eee4:	eeb4 0b40 	vcmp.f64	d0, d0
 800eee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeec:	681d      	ldr	r5, [r3, #0]
 800eeee:	d704      	bvc.n	800eefa <_scanf_float+0x3a2>
 800eef0:	f000 f896 	bl	800f020 <nanf>
 800eef4:	ed85 0a00 	vstr	s0, [r5]
 800eef8:	e7b0      	b.n	800ee5c <_scanf_float+0x304>
 800eefa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eefe:	e7f9      	b.n	800eef4 <_scanf_float+0x39c>
 800ef00:	2600      	movs	r6, #0
 800ef02:	e670      	b.n	800ebe6 <_scanf_float+0x8e>
 800ef04:	08012fda 	.word	0x08012fda

0800ef08 <iprintf>:
 800ef08:	b40f      	push	{r0, r1, r2, r3}
 800ef0a:	4b0a      	ldr	r3, [pc, #40]	; (800ef34 <iprintf+0x2c>)
 800ef0c:	b513      	push	{r0, r1, r4, lr}
 800ef0e:	681c      	ldr	r4, [r3, #0]
 800ef10:	b124      	cbz	r4, 800ef1c <iprintf+0x14>
 800ef12:	69a3      	ldr	r3, [r4, #24]
 800ef14:	b913      	cbnz	r3, 800ef1c <iprintf+0x14>
 800ef16:	4620      	mov	r0, r4
 800ef18:	f001 ff86 	bl	8010e28 <__sinit>
 800ef1c:	ab05      	add	r3, sp, #20
 800ef1e:	9a04      	ldr	r2, [sp, #16]
 800ef20:	68a1      	ldr	r1, [r4, #8]
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	4620      	mov	r0, r4
 800ef26:	f003 fb01 	bl	801252c <_vfiprintf_r>
 800ef2a:	b002      	add	sp, #8
 800ef2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef30:	b004      	add	sp, #16
 800ef32:	4770      	bx	lr
 800ef34:	20000344 	.word	0x20000344

0800ef38 <_puts_r>:
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	460e      	mov	r6, r1
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	b118      	cbz	r0, 800ef48 <_puts_r+0x10>
 800ef40:	6983      	ldr	r3, [r0, #24]
 800ef42:	b90b      	cbnz	r3, 800ef48 <_puts_r+0x10>
 800ef44:	f001 ff70 	bl	8010e28 <__sinit>
 800ef48:	69ab      	ldr	r3, [r5, #24]
 800ef4a:	68ac      	ldr	r4, [r5, #8]
 800ef4c:	b913      	cbnz	r3, 800ef54 <_puts_r+0x1c>
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f001 ff6a 	bl	8010e28 <__sinit>
 800ef54:	4b23      	ldr	r3, [pc, #140]	; (800efe4 <_puts_r+0xac>)
 800ef56:	429c      	cmp	r4, r3
 800ef58:	d117      	bne.n	800ef8a <_puts_r+0x52>
 800ef5a:	686c      	ldr	r4, [r5, #4]
 800ef5c:	89a3      	ldrh	r3, [r4, #12]
 800ef5e:	071b      	lsls	r3, r3, #28
 800ef60:	d51d      	bpl.n	800ef9e <_puts_r+0x66>
 800ef62:	6923      	ldr	r3, [r4, #16]
 800ef64:	b1db      	cbz	r3, 800ef9e <_puts_r+0x66>
 800ef66:	3e01      	subs	r6, #1
 800ef68:	68a3      	ldr	r3, [r4, #8]
 800ef6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	60a3      	str	r3, [r4, #8]
 800ef72:	b9e9      	cbnz	r1, 800efb0 <_puts_r+0x78>
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	da2e      	bge.n	800efd6 <_puts_r+0x9e>
 800ef78:	4622      	mov	r2, r4
 800ef7a:	210a      	movs	r1, #10
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f000 ffa9 	bl	800fed4 <__swbuf_r>
 800ef82:	3001      	adds	r0, #1
 800ef84:	d011      	beq.n	800efaa <_puts_r+0x72>
 800ef86:	200a      	movs	r0, #10
 800ef88:	e011      	b.n	800efae <_puts_r+0x76>
 800ef8a:	4b17      	ldr	r3, [pc, #92]	; (800efe8 <_puts_r+0xb0>)
 800ef8c:	429c      	cmp	r4, r3
 800ef8e:	d101      	bne.n	800ef94 <_puts_r+0x5c>
 800ef90:	68ac      	ldr	r4, [r5, #8]
 800ef92:	e7e3      	b.n	800ef5c <_puts_r+0x24>
 800ef94:	4b15      	ldr	r3, [pc, #84]	; (800efec <_puts_r+0xb4>)
 800ef96:	429c      	cmp	r4, r3
 800ef98:	bf08      	it	eq
 800ef9a:	68ec      	ldreq	r4, [r5, #12]
 800ef9c:	e7de      	b.n	800ef5c <_puts_r+0x24>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4628      	mov	r0, r5
 800efa2:	f000 fffb 	bl	800ff9c <__swsetup_r>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d0dd      	beq.n	800ef66 <_puts_r+0x2e>
 800efaa:	f04f 30ff 	mov.w	r0, #4294967295
 800efae:	bd70      	pop	{r4, r5, r6, pc}
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	da04      	bge.n	800efbe <_puts_r+0x86>
 800efb4:	69a2      	ldr	r2, [r4, #24]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	dc06      	bgt.n	800efc8 <_puts_r+0x90>
 800efba:	290a      	cmp	r1, #10
 800efbc:	d004      	beq.n	800efc8 <_puts_r+0x90>
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	1c5a      	adds	r2, r3, #1
 800efc2:	6022      	str	r2, [r4, #0]
 800efc4:	7019      	strb	r1, [r3, #0]
 800efc6:	e7cf      	b.n	800ef68 <_puts_r+0x30>
 800efc8:	4622      	mov	r2, r4
 800efca:	4628      	mov	r0, r5
 800efcc:	f000 ff82 	bl	800fed4 <__swbuf_r>
 800efd0:	3001      	adds	r0, #1
 800efd2:	d1c9      	bne.n	800ef68 <_puts_r+0x30>
 800efd4:	e7e9      	b.n	800efaa <_puts_r+0x72>
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	200a      	movs	r0, #10
 800efda:	1c5a      	adds	r2, r3, #1
 800efdc:	6022      	str	r2, [r4, #0]
 800efde:	7018      	strb	r0, [r3, #0]
 800efe0:	e7e5      	b.n	800efae <_puts_r+0x76>
 800efe2:	bf00      	nop
 800efe4:	08013060 	.word	0x08013060
 800efe8:	08013080 	.word	0x08013080
 800efec:	08013040 	.word	0x08013040

0800eff0 <puts>:
 800eff0:	4b02      	ldr	r3, [pc, #8]	; (800effc <puts+0xc>)
 800eff2:	4601      	mov	r1, r0
 800eff4:	6818      	ldr	r0, [r3, #0]
 800eff6:	f7ff bf9f 	b.w	800ef38 <_puts_r>
 800effa:	bf00      	nop
 800effc:	20000344 	.word	0x20000344

0800f000 <_sbrk_r>:
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	4c06      	ldr	r4, [pc, #24]	; (800f01c <_sbrk_r+0x1c>)
 800f004:	2300      	movs	r3, #0
 800f006:	4605      	mov	r5, r0
 800f008:	4608      	mov	r0, r1
 800f00a:	6023      	str	r3, [r4, #0]
 800f00c:	f003 fec8 	bl	8012da0 <_sbrk>
 800f010:	1c43      	adds	r3, r0, #1
 800f012:	d102      	bne.n	800f01a <_sbrk_r+0x1a>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	b103      	cbz	r3, 800f01a <_sbrk_r+0x1a>
 800f018:	602b      	str	r3, [r5, #0]
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	2000e484 	.word	0x2000e484

0800f020 <nanf>:
 800f020:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f028 <nanf+0x8>
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop
 800f028:	7fc00000 	.word	0x7fc00000

0800f02c <_raise_r>:
 800f02c:	291f      	cmp	r1, #31
 800f02e:	b538      	push	{r3, r4, r5, lr}
 800f030:	4604      	mov	r4, r0
 800f032:	460d      	mov	r5, r1
 800f034:	d904      	bls.n	800f040 <_raise_r+0x14>
 800f036:	2316      	movs	r3, #22
 800f038:	6003      	str	r3, [r0, #0]
 800f03a:	f04f 30ff 	mov.w	r0, #4294967295
 800f03e:	bd38      	pop	{r3, r4, r5, pc}
 800f040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f042:	b112      	cbz	r2, 800f04a <_raise_r+0x1e>
 800f044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f048:	b94b      	cbnz	r3, 800f05e <_raise_r+0x32>
 800f04a:	4620      	mov	r0, r4
 800f04c:	f000 f830 	bl	800f0b0 <_getpid_r>
 800f050:	462a      	mov	r2, r5
 800f052:	4601      	mov	r1, r0
 800f054:	4620      	mov	r0, r4
 800f056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f05a:	f000 b817 	b.w	800f08c <_kill_r>
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d00a      	beq.n	800f078 <_raise_r+0x4c>
 800f062:	1c59      	adds	r1, r3, #1
 800f064:	d103      	bne.n	800f06e <_raise_r+0x42>
 800f066:	2316      	movs	r3, #22
 800f068:	6003      	str	r3, [r0, #0]
 800f06a:	2001      	movs	r0, #1
 800f06c:	e7e7      	b.n	800f03e <_raise_r+0x12>
 800f06e:	2400      	movs	r4, #0
 800f070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f074:	4628      	mov	r0, r5
 800f076:	4798      	blx	r3
 800f078:	2000      	movs	r0, #0
 800f07a:	e7e0      	b.n	800f03e <_raise_r+0x12>

0800f07c <raise>:
 800f07c:	4b02      	ldr	r3, [pc, #8]	; (800f088 <raise+0xc>)
 800f07e:	4601      	mov	r1, r0
 800f080:	6818      	ldr	r0, [r3, #0]
 800f082:	f7ff bfd3 	b.w	800f02c <_raise_r>
 800f086:	bf00      	nop
 800f088:	20000344 	.word	0x20000344

0800f08c <_kill_r>:
 800f08c:	b538      	push	{r3, r4, r5, lr}
 800f08e:	4c07      	ldr	r4, [pc, #28]	; (800f0ac <_kill_r+0x20>)
 800f090:	2300      	movs	r3, #0
 800f092:	4605      	mov	r5, r0
 800f094:	4608      	mov	r0, r1
 800f096:	4611      	mov	r1, r2
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	f003 fe69 	bl	8012d70 <_kill>
 800f09e:	1c43      	adds	r3, r0, #1
 800f0a0:	d102      	bne.n	800f0a8 <_kill_r+0x1c>
 800f0a2:	6823      	ldr	r3, [r4, #0]
 800f0a4:	b103      	cbz	r3, 800f0a8 <_kill_r+0x1c>
 800f0a6:	602b      	str	r3, [r5, #0]
 800f0a8:	bd38      	pop	{r3, r4, r5, pc}
 800f0aa:	bf00      	nop
 800f0ac:	2000e484 	.word	0x2000e484

0800f0b0 <_getpid_r>:
 800f0b0:	f003 be4e 	b.w	8012d50 <_getpid>

0800f0b4 <siprintf>:
 800f0b4:	b40e      	push	{r1, r2, r3}
 800f0b6:	b500      	push	{lr}
 800f0b8:	b09c      	sub	sp, #112	; 0x70
 800f0ba:	ab1d      	add	r3, sp, #116	; 0x74
 800f0bc:	9002      	str	r0, [sp, #8]
 800f0be:	9006      	str	r0, [sp, #24]
 800f0c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f0c4:	4809      	ldr	r0, [pc, #36]	; (800f0ec <siprintf+0x38>)
 800f0c6:	9107      	str	r1, [sp, #28]
 800f0c8:	9104      	str	r1, [sp, #16]
 800f0ca:	4909      	ldr	r1, [pc, #36]	; (800f0f0 <siprintf+0x3c>)
 800f0cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0d0:	9105      	str	r1, [sp, #20]
 800f0d2:	6800      	ldr	r0, [r0, #0]
 800f0d4:	9301      	str	r3, [sp, #4]
 800f0d6:	a902      	add	r1, sp, #8
 800f0d8:	f002 ff5c 	bl	8011f94 <_svfiprintf_r>
 800f0dc:	9b02      	ldr	r3, [sp, #8]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	701a      	strb	r2, [r3, #0]
 800f0e2:	b01c      	add	sp, #112	; 0x70
 800f0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0e8:	b003      	add	sp, #12
 800f0ea:	4770      	bx	lr
 800f0ec:	20000344 	.word	0x20000344
 800f0f0:	ffff0208 	.word	0xffff0208

0800f0f4 <siscanf>:
 800f0f4:	b40e      	push	{r1, r2, r3}
 800f0f6:	b530      	push	{r4, r5, lr}
 800f0f8:	b09c      	sub	sp, #112	; 0x70
 800f0fa:	ac1f      	add	r4, sp, #124	; 0x7c
 800f0fc:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f100:	f854 5b04 	ldr.w	r5, [r4], #4
 800f104:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f108:	9002      	str	r0, [sp, #8]
 800f10a:	9006      	str	r0, [sp, #24]
 800f10c:	f7f1 f898 	bl	8000240 <strlen>
 800f110:	4b0b      	ldr	r3, [pc, #44]	; (800f140 <siscanf+0x4c>)
 800f112:	9003      	str	r0, [sp, #12]
 800f114:	9007      	str	r0, [sp, #28]
 800f116:	930b      	str	r3, [sp, #44]	; 0x2c
 800f118:	480a      	ldr	r0, [pc, #40]	; (800f144 <siscanf+0x50>)
 800f11a:	9401      	str	r4, [sp, #4]
 800f11c:	2300      	movs	r3, #0
 800f11e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f120:	9314      	str	r3, [sp, #80]	; 0x50
 800f122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f126:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f12a:	462a      	mov	r2, r5
 800f12c:	4623      	mov	r3, r4
 800f12e:	a902      	add	r1, sp, #8
 800f130:	6800      	ldr	r0, [r0, #0]
 800f132:	f003 f881 	bl	8012238 <__ssvfiscanf_r>
 800f136:	b01c      	add	sp, #112	; 0x70
 800f138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f13c:	b003      	add	sp, #12
 800f13e:	4770      	bx	lr
 800f140:	0800f16b 	.word	0x0800f16b
 800f144:	20000344 	.word	0x20000344

0800f148 <__sread>:
 800f148:	b510      	push	{r4, lr}
 800f14a:	460c      	mov	r4, r1
 800f14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f150:	f003 fc5a 	bl	8012a08 <_read_r>
 800f154:	2800      	cmp	r0, #0
 800f156:	bfab      	itete	ge
 800f158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f15a:	89a3      	ldrhlt	r3, [r4, #12]
 800f15c:	181b      	addge	r3, r3, r0
 800f15e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f162:	bfac      	ite	ge
 800f164:	6563      	strge	r3, [r4, #84]	; 0x54
 800f166:	81a3      	strhlt	r3, [r4, #12]
 800f168:	bd10      	pop	{r4, pc}

0800f16a <__seofread>:
 800f16a:	2000      	movs	r0, #0
 800f16c:	4770      	bx	lr

0800f16e <__swrite>:
 800f16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f172:	461f      	mov	r7, r3
 800f174:	898b      	ldrh	r3, [r1, #12]
 800f176:	05db      	lsls	r3, r3, #23
 800f178:	4605      	mov	r5, r0
 800f17a:	460c      	mov	r4, r1
 800f17c:	4616      	mov	r6, r2
 800f17e:	d505      	bpl.n	800f18c <__swrite+0x1e>
 800f180:	2302      	movs	r3, #2
 800f182:	2200      	movs	r2, #0
 800f184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f188:	f002 fa20 	bl	80115cc <_lseek_r>
 800f18c:	89a3      	ldrh	r3, [r4, #12]
 800f18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f196:	81a3      	strh	r3, [r4, #12]
 800f198:	4632      	mov	r2, r6
 800f19a:	463b      	mov	r3, r7
 800f19c:	4628      	mov	r0, r5
 800f19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a2:	f000 bee9 	b.w	800ff78 <_write_r>

0800f1a6 <__sseek>:
 800f1a6:	b510      	push	{r4, lr}
 800f1a8:	460c      	mov	r4, r1
 800f1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ae:	f002 fa0d 	bl	80115cc <_lseek_r>
 800f1b2:	1c43      	adds	r3, r0, #1
 800f1b4:	89a3      	ldrh	r3, [r4, #12]
 800f1b6:	bf15      	itete	ne
 800f1b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1c2:	81a3      	strheq	r3, [r4, #12]
 800f1c4:	bf18      	it	ne
 800f1c6:	81a3      	strhne	r3, [r4, #12]
 800f1c8:	bd10      	pop	{r4, pc}

0800f1ca <__sclose>:
 800f1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ce:	f000 bf53 	b.w	8010078 <_close_r>

0800f1d2 <sulp>:
 800f1d2:	b570      	push	{r4, r5, r6, lr}
 800f1d4:	4604      	mov	r4, r0
 800f1d6:	460d      	mov	r5, r1
 800f1d8:	4616      	mov	r6, r2
 800f1da:	ec45 4b10 	vmov	d0, r4, r5
 800f1de:	f002 fd4b 	bl	8011c78 <__ulp>
 800f1e2:	b17e      	cbz	r6, 800f204 <sulp+0x32>
 800f1e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f1e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	dd09      	ble.n	800f204 <sulp+0x32>
 800f1f0:	051b      	lsls	r3, r3, #20
 800f1f2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f1fc:	ec41 0b17 	vmov	d7, r0, r1
 800f200:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f204:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f208 <_strtod_l>:
 800f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20c:	ed2d 8b0c 	vpush	{d8-d13}
 800f210:	4698      	mov	r8, r3
 800f212:	b09d      	sub	sp, #116	; 0x74
 800f214:	2300      	movs	r3, #0
 800f216:	4604      	mov	r4, r0
 800f218:	4640      	mov	r0, r8
 800f21a:	460e      	mov	r6, r1
 800f21c:	9214      	str	r2, [sp, #80]	; 0x50
 800f21e:	9318      	str	r3, [sp, #96]	; 0x60
 800f220:	f002 f9c4 	bl	80115ac <__localeconv_l>
 800f224:	4681      	mov	r9, r0
 800f226:	6800      	ldr	r0, [r0, #0]
 800f228:	f7f1 f80a 	bl	8000240 <strlen>
 800f22c:	f04f 0a00 	mov.w	sl, #0
 800f230:	4607      	mov	r7, r0
 800f232:	f04f 0b00 	mov.w	fp, #0
 800f236:	9617      	str	r6, [sp, #92]	; 0x5c
 800f238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f23a:	781a      	ldrb	r2, [r3, #0]
 800f23c:	2a0d      	cmp	r2, #13
 800f23e:	d834      	bhi.n	800f2aa <_strtod_l+0xa2>
 800f240:	2a09      	cmp	r2, #9
 800f242:	d238      	bcs.n	800f2b6 <_strtod_l+0xae>
 800f244:	2a00      	cmp	r2, #0
 800f246:	d040      	beq.n	800f2ca <_strtod_l+0xc2>
 800f248:	2300      	movs	r3, #0
 800f24a:	930d      	str	r3, [sp, #52]	; 0x34
 800f24c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800f24e:	782b      	ldrb	r3, [r5, #0]
 800f250:	2b30      	cmp	r3, #48	; 0x30
 800f252:	f040 80b3 	bne.w	800f3bc <_strtod_l+0x1b4>
 800f256:	786b      	ldrb	r3, [r5, #1]
 800f258:	2b58      	cmp	r3, #88	; 0x58
 800f25a:	d001      	beq.n	800f260 <_strtod_l+0x58>
 800f25c:	2b78      	cmp	r3, #120	; 0x78
 800f25e:	d169      	bne.n	800f334 <_strtod_l+0x12c>
 800f260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f262:	9301      	str	r3, [sp, #4]
 800f264:	ab18      	add	r3, sp, #96	; 0x60
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	f8cd 8008 	str.w	r8, [sp, #8]
 800f26c:	ab19      	add	r3, sp, #100	; 0x64
 800f26e:	4a8f      	ldr	r2, [pc, #572]	; (800f4ac <_strtod_l+0x2a4>)
 800f270:	a917      	add	r1, sp, #92	; 0x5c
 800f272:	4620      	mov	r0, r4
 800f274:	f001 feb1 	bl	8010fda <__gethex>
 800f278:	f010 0607 	ands.w	r6, r0, #7
 800f27c:	4607      	mov	r7, r0
 800f27e:	d005      	beq.n	800f28c <_strtod_l+0x84>
 800f280:	2e06      	cmp	r6, #6
 800f282:	d12c      	bne.n	800f2de <_strtod_l+0xd6>
 800f284:	3501      	adds	r5, #1
 800f286:	2300      	movs	r3, #0
 800f288:	9517      	str	r5, [sp, #92]	; 0x5c
 800f28a:	930d      	str	r3, [sp, #52]	; 0x34
 800f28c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f040 855e 	bne.w	800fd50 <_strtod_l+0xb48>
 800f294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f296:	b1eb      	cbz	r3, 800f2d4 <_strtod_l+0xcc>
 800f298:	ec4b ab17 	vmov	d7, sl, fp
 800f29c:	eeb1 0b47 	vneg.f64	d0, d7
 800f2a0:	b01d      	add	sp, #116	; 0x74
 800f2a2:	ecbd 8b0c 	vpop	{d8-d13}
 800f2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2aa:	2a2b      	cmp	r2, #43	; 0x2b
 800f2ac:	d015      	beq.n	800f2da <_strtod_l+0xd2>
 800f2ae:	2a2d      	cmp	r2, #45	; 0x2d
 800f2b0:	d004      	beq.n	800f2bc <_strtod_l+0xb4>
 800f2b2:	2a20      	cmp	r2, #32
 800f2b4:	d1c8      	bne.n	800f248 <_strtod_l+0x40>
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f2ba:	e7bd      	b.n	800f238 <_strtod_l+0x30>
 800f2bc:	2201      	movs	r2, #1
 800f2be:	920d      	str	r2, [sp, #52]	; 0x34
 800f2c0:	1c5a      	adds	r2, r3, #1
 800f2c2:	9217      	str	r2, [sp, #92]	; 0x5c
 800f2c4:	785b      	ldrb	r3, [r3, #1]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d1c0      	bne.n	800f24c <_strtod_l+0x44>
 800f2ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f040 853c 	bne.w	800fd4c <_strtod_l+0xb44>
 800f2d4:	ec4b ab10 	vmov	d0, sl, fp
 800f2d8:	e7e2      	b.n	800f2a0 <_strtod_l+0x98>
 800f2da:	2200      	movs	r2, #0
 800f2dc:	e7ef      	b.n	800f2be <_strtod_l+0xb6>
 800f2de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f2e0:	b13a      	cbz	r2, 800f2f2 <_strtod_l+0xea>
 800f2e2:	2135      	movs	r1, #53	; 0x35
 800f2e4:	a81a      	add	r0, sp, #104	; 0x68
 800f2e6:	f002 fdc0 	bl	8011e6a <__copybits>
 800f2ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f002 fa2b 	bl	8011748 <_Bfree>
 800f2f2:	3e01      	subs	r6, #1
 800f2f4:	2e04      	cmp	r6, #4
 800f2f6:	d806      	bhi.n	800f306 <_strtod_l+0xfe>
 800f2f8:	e8df f006 	tbb	[pc, r6]
 800f2fc:	1714030a 	.word	0x1714030a
 800f300:	0a          	.byte	0x0a
 800f301:	00          	.byte	0x00
 800f302:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f306:	073b      	lsls	r3, r7, #28
 800f308:	d5c0      	bpl.n	800f28c <_strtod_l+0x84>
 800f30a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f30e:	e7bd      	b.n	800f28c <_strtod_l+0x84>
 800f310:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f314:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f316:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f31a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f31e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f322:	e7f0      	b.n	800f306 <_strtod_l+0xfe>
 800f324:	f8df b188 	ldr.w	fp, [pc, #392]	; 800f4b0 <_strtod_l+0x2a8>
 800f328:	e7ed      	b.n	800f306 <_strtod_l+0xfe>
 800f32a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f32e:	f04f 3aff 	mov.w	sl, #4294967295
 800f332:	e7e8      	b.n	800f306 <_strtod_l+0xfe>
 800f334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f336:	1c5a      	adds	r2, r3, #1
 800f338:	9217      	str	r2, [sp, #92]	; 0x5c
 800f33a:	785b      	ldrb	r3, [r3, #1]
 800f33c:	2b30      	cmp	r3, #48	; 0x30
 800f33e:	d0f9      	beq.n	800f334 <_strtod_l+0x12c>
 800f340:	2b00      	cmp	r3, #0
 800f342:	d0a3      	beq.n	800f28c <_strtod_l+0x84>
 800f344:	2301      	movs	r3, #1
 800f346:	930a      	str	r3, [sp, #40]	; 0x28
 800f348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f34a:	930c      	str	r3, [sp, #48]	; 0x30
 800f34c:	2300      	movs	r3, #0
 800f34e:	9306      	str	r3, [sp, #24]
 800f350:	9308      	str	r3, [sp, #32]
 800f352:	461d      	mov	r5, r3
 800f354:	220a      	movs	r2, #10
 800f356:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f358:	f890 8000 	ldrb.w	r8, [r0]
 800f35c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800f360:	b2d9      	uxtb	r1, r3
 800f362:	2909      	cmp	r1, #9
 800f364:	d92c      	bls.n	800f3c0 <_strtod_l+0x1b8>
 800f366:	463a      	mov	r2, r7
 800f368:	f8d9 1000 	ldr.w	r1, [r9]
 800f36c:	f003 fb90 	bl	8012a90 <strncmp>
 800f370:	2800      	cmp	r0, #0
 800f372:	d035      	beq.n	800f3e0 <_strtod_l+0x1d8>
 800f374:	2000      	movs	r0, #0
 800f376:	4642      	mov	r2, r8
 800f378:	462b      	mov	r3, r5
 800f37a:	4601      	mov	r1, r0
 800f37c:	9004      	str	r0, [sp, #16]
 800f37e:	2a65      	cmp	r2, #101	; 0x65
 800f380:	d001      	beq.n	800f386 <_strtod_l+0x17e>
 800f382:	2a45      	cmp	r2, #69	; 0x45
 800f384:	d117      	bne.n	800f3b6 <_strtod_l+0x1ae>
 800f386:	b923      	cbnz	r3, 800f392 <_strtod_l+0x18a>
 800f388:	b910      	cbnz	r0, 800f390 <_strtod_l+0x188>
 800f38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d09c      	beq.n	800f2ca <_strtod_l+0xc2>
 800f390:	2300      	movs	r3, #0
 800f392:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f394:	1c72      	adds	r2, r6, #1
 800f396:	9217      	str	r2, [sp, #92]	; 0x5c
 800f398:	7872      	ldrb	r2, [r6, #1]
 800f39a:	2a2b      	cmp	r2, #43	; 0x2b
 800f39c:	f000 8082 	beq.w	800f4a4 <_strtod_l+0x29c>
 800f3a0:	2a2d      	cmp	r2, #45	; 0x2d
 800f3a2:	d079      	beq.n	800f498 <_strtod_l+0x290>
 800f3a4:	f04f 0e00 	mov.w	lr, #0
 800f3a8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f3ac:	f1bc 0f09 	cmp.w	ip, #9
 800f3b0:	f240 8086 	bls.w	800f4c0 <_strtod_l+0x2b8>
 800f3b4:	9617      	str	r6, [sp, #92]	; 0x5c
 800f3b6:	f04f 0800 	mov.w	r8, #0
 800f3ba:	e0a8      	b.n	800f50e <_strtod_l+0x306>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	e7c2      	b.n	800f346 <_strtod_l+0x13e>
 800f3c0:	2d08      	cmp	r5, #8
 800f3c2:	bfd5      	itete	le
 800f3c4:	9908      	ldrle	r1, [sp, #32]
 800f3c6:	9906      	ldrgt	r1, [sp, #24]
 800f3c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f3cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f3d0:	f100 0001 	add.w	r0, r0, #1
 800f3d4:	bfd4      	ite	le
 800f3d6:	9308      	strle	r3, [sp, #32]
 800f3d8:	9306      	strgt	r3, [sp, #24]
 800f3da:	3501      	adds	r5, #1
 800f3dc:	9017      	str	r0, [sp, #92]	; 0x5c
 800f3de:	e7ba      	b.n	800f356 <_strtod_l+0x14e>
 800f3e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3e2:	19da      	adds	r2, r3, r7
 800f3e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f3e6:	5dda      	ldrb	r2, [r3, r7]
 800f3e8:	2d00      	cmp	r5, #0
 800f3ea:	d038      	beq.n	800f45e <_strtod_l+0x256>
 800f3ec:	4601      	mov	r1, r0
 800f3ee:	462b      	mov	r3, r5
 800f3f0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800f3f4:	2f09      	cmp	r7, #9
 800f3f6:	d913      	bls.n	800f420 <_strtod_l+0x218>
 800f3f8:	2701      	movs	r7, #1
 800f3fa:	9704      	str	r7, [sp, #16]
 800f3fc:	e7bf      	b.n	800f37e <_strtod_l+0x176>
 800f3fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	9217      	str	r2, [sp, #92]	; 0x5c
 800f404:	785a      	ldrb	r2, [r3, #1]
 800f406:	3001      	adds	r0, #1
 800f408:	2a30      	cmp	r2, #48	; 0x30
 800f40a:	d0f8      	beq.n	800f3fe <_strtod_l+0x1f6>
 800f40c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f410:	2b08      	cmp	r3, #8
 800f412:	f200 84a2 	bhi.w	800fd5a <_strtod_l+0xb52>
 800f416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f418:	930c      	str	r3, [sp, #48]	; 0x30
 800f41a:	4601      	mov	r1, r0
 800f41c:	2000      	movs	r0, #0
 800f41e:	4603      	mov	r3, r0
 800f420:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800f424:	f100 0701 	add.w	r7, r0, #1
 800f428:	d013      	beq.n	800f452 <_strtod_l+0x24a>
 800f42a:	4439      	add	r1, r7
 800f42c:	eb00 0e03 	add.w	lr, r0, r3
 800f430:	461f      	mov	r7, r3
 800f432:	f04f 0c0a 	mov.w	ip, #10
 800f436:	45be      	cmp	lr, r7
 800f438:	d113      	bne.n	800f462 <_strtod_l+0x25a>
 800f43a:	181f      	adds	r7, r3, r0
 800f43c:	2f08      	cmp	r7, #8
 800f43e:	f103 0301 	add.w	r3, r3, #1
 800f442:	4403      	add	r3, r0
 800f444:	dc1d      	bgt.n	800f482 <_strtod_l+0x27a>
 800f446:	9a08      	ldr	r2, [sp, #32]
 800f448:	200a      	movs	r0, #10
 800f44a:	fb00 8202 	mla	r2, r0, r2, r8
 800f44e:	9208      	str	r2, [sp, #32]
 800f450:	2700      	movs	r7, #0
 800f452:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f454:	1c50      	adds	r0, r2, #1
 800f456:	9017      	str	r0, [sp, #92]	; 0x5c
 800f458:	7852      	ldrb	r2, [r2, #1]
 800f45a:	4638      	mov	r0, r7
 800f45c:	e7c8      	b.n	800f3f0 <_strtod_l+0x1e8>
 800f45e:	4628      	mov	r0, r5
 800f460:	e7d2      	b.n	800f408 <_strtod_l+0x200>
 800f462:	2f08      	cmp	r7, #8
 800f464:	f107 0701 	add.w	r7, r7, #1
 800f468:	dc04      	bgt.n	800f474 <_strtod_l+0x26c>
 800f46a:	9a08      	ldr	r2, [sp, #32]
 800f46c:	fb0c f202 	mul.w	r2, ip, r2
 800f470:	9208      	str	r2, [sp, #32]
 800f472:	e7e0      	b.n	800f436 <_strtod_l+0x22e>
 800f474:	2f10      	cmp	r7, #16
 800f476:	bfde      	ittt	le
 800f478:	9a06      	ldrle	r2, [sp, #24]
 800f47a:	fb0c f202 	mulle.w	r2, ip, r2
 800f47e:	9206      	strle	r2, [sp, #24]
 800f480:	e7d9      	b.n	800f436 <_strtod_l+0x22e>
 800f482:	2b10      	cmp	r3, #16
 800f484:	bfdf      	itttt	le
 800f486:	9a06      	ldrle	r2, [sp, #24]
 800f488:	200a      	movle	r0, #10
 800f48a:	fb00 8202 	mlale	r2, r0, r2, r8
 800f48e:	9206      	strle	r2, [sp, #24]
 800f490:	e7de      	b.n	800f450 <_strtod_l+0x248>
 800f492:	2301      	movs	r3, #1
 800f494:	9304      	str	r3, [sp, #16]
 800f496:	e777      	b.n	800f388 <_strtod_l+0x180>
 800f498:	f04f 0e01 	mov.w	lr, #1
 800f49c:	1cb2      	adds	r2, r6, #2
 800f49e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f4a0:	78b2      	ldrb	r2, [r6, #2]
 800f4a2:	e781      	b.n	800f3a8 <_strtod_l+0x1a0>
 800f4a4:	f04f 0e00 	mov.w	lr, #0
 800f4a8:	e7f8      	b.n	800f49c <_strtod_l+0x294>
 800f4aa:	bf00      	nop
 800f4ac:	08012fe0 	.word	0x08012fe0
 800f4b0:	7ff00000 	.word	0x7ff00000
 800f4b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4b6:	f102 0c01 	add.w	ip, r2, #1
 800f4ba:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800f4be:	7852      	ldrb	r2, [r2, #1]
 800f4c0:	2a30      	cmp	r2, #48	; 0x30
 800f4c2:	d0f7      	beq.n	800f4b4 <_strtod_l+0x2ac>
 800f4c4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800f4c8:	f1bc 0f08 	cmp.w	ip, #8
 800f4cc:	f63f af73 	bhi.w	800f3b6 <_strtod_l+0x1ae>
 800f4d0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800f4d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4d6:	920e      	str	r2, [sp, #56]	; 0x38
 800f4d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4da:	f102 0c01 	add.w	ip, r2, #1
 800f4de:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800f4e2:	7852      	ldrb	r2, [r2, #1]
 800f4e4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800f4e8:	f1b9 0f09 	cmp.w	r9, #9
 800f4ec:	d939      	bls.n	800f562 <_strtod_l+0x35a>
 800f4ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f4f0:	ebac 0c07 	sub.w	ip, ip, r7
 800f4f4:	f1bc 0f08 	cmp.w	ip, #8
 800f4f8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800f4fc:	dc37      	bgt.n	800f56e <_strtod_l+0x366>
 800f4fe:	45e0      	cmp	r8, ip
 800f500:	bfa8      	it	ge
 800f502:	46e0      	movge	r8, ip
 800f504:	f1be 0f00 	cmp.w	lr, #0
 800f508:	d001      	beq.n	800f50e <_strtod_l+0x306>
 800f50a:	f1c8 0800 	rsb	r8, r8, #0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d151      	bne.n	800f5b6 <_strtod_l+0x3ae>
 800f512:	2800      	cmp	r0, #0
 800f514:	f47f aeba 	bne.w	800f28c <_strtod_l+0x84>
 800f518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f47f aeb6 	bne.w	800f28c <_strtod_l+0x84>
 800f520:	9b04      	ldr	r3, [sp, #16]
 800f522:	2b00      	cmp	r3, #0
 800f524:	f47f aed1 	bne.w	800f2ca <_strtod_l+0xc2>
 800f528:	2a4e      	cmp	r2, #78	; 0x4e
 800f52a:	d027      	beq.n	800f57c <_strtod_l+0x374>
 800f52c:	dc21      	bgt.n	800f572 <_strtod_l+0x36a>
 800f52e:	2a49      	cmp	r2, #73	; 0x49
 800f530:	f47f aecb 	bne.w	800f2ca <_strtod_l+0xc2>
 800f534:	499a      	ldr	r1, [pc, #616]	; (800f7a0 <_strtod_l+0x598>)
 800f536:	a817      	add	r0, sp, #92	; 0x5c
 800f538:	f001 ff82 	bl	8011440 <__match>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	f43f aec4 	beq.w	800f2ca <_strtod_l+0xc2>
 800f542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f544:	4997      	ldr	r1, [pc, #604]	; (800f7a4 <_strtod_l+0x59c>)
 800f546:	3b01      	subs	r3, #1
 800f548:	a817      	add	r0, sp, #92	; 0x5c
 800f54a:	9317      	str	r3, [sp, #92]	; 0x5c
 800f54c:	f001 ff78 	bl	8011440 <__match>
 800f550:	b910      	cbnz	r0, 800f558 <_strtod_l+0x350>
 800f552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f554:	3301      	adds	r3, #1
 800f556:	9317      	str	r3, [sp, #92]	; 0x5c
 800f558:	f8df b260 	ldr.w	fp, [pc, #608]	; 800f7bc <_strtod_l+0x5b4>
 800f55c:	f04f 0a00 	mov.w	sl, #0
 800f560:	e694      	b.n	800f28c <_strtod_l+0x84>
 800f562:	270a      	movs	r7, #10
 800f564:	fb07 2808 	mla	r8, r7, r8, r2
 800f568:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800f56c:	e7b4      	b.n	800f4d8 <_strtod_l+0x2d0>
 800f56e:	46e0      	mov	r8, ip
 800f570:	e7c8      	b.n	800f504 <_strtod_l+0x2fc>
 800f572:	2a69      	cmp	r2, #105	; 0x69
 800f574:	d0de      	beq.n	800f534 <_strtod_l+0x32c>
 800f576:	2a6e      	cmp	r2, #110	; 0x6e
 800f578:	f47f aea7 	bne.w	800f2ca <_strtod_l+0xc2>
 800f57c:	498a      	ldr	r1, [pc, #552]	; (800f7a8 <_strtod_l+0x5a0>)
 800f57e:	a817      	add	r0, sp, #92	; 0x5c
 800f580:	f001 ff5e 	bl	8011440 <__match>
 800f584:	2800      	cmp	r0, #0
 800f586:	f43f aea0 	beq.w	800f2ca <_strtod_l+0xc2>
 800f58a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	2b28      	cmp	r3, #40	; 0x28
 800f590:	d10e      	bne.n	800f5b0 <_strtod_l+0x3a8>
 800f592:	aa1a      	add	r2, sp, #104	; 0x68
 800f594:	4985      	ldr	r1, [pc, #532]	; (800f7ac <_strtod_l+0x5a4>)
 800f596:	a817      	add	r0, sp, #92	; 0x5c
 800f598:	f001 ff66 	bl	8011468 <__hexnan>
 800f59c:	2805      	cmp	r0, #5
 800f59e:	d107      	bne.n	800f5b0 <_strtod_l+0x3a8>
 800f5a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5a2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f5a6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f5aa:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f5ae:	e66d      	b.n	800f28c <_strtod_l+0x84>
 800f5b0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800f7c0 <_strtod_l+0x5b8>
 800f5b4:	e7d2      	b.n	800f55c <_strtod_l+0x354>
 800f5b6:	eddd 7a08 	vldr	s15, [sp, #32]
 800f5ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f5be:	eba8 0201 	sub.w	r2, r8, r1
 800f5c2:	2d00      	cmp	r5, #0
 800f5c4:	bf08      	it	eq
 800f5c6:	461d      	moveq	r5, r3
 800f5c8:	2b10      	cmp	r3, #16
 800f5ca:	9204      	str	r2, [sp, #16]
 800f5cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	bfa8      	it	ge
 800f5d4:	2210      	movge	r2, #16
 800f5d6:	2b09      	cmp	r3, #9
 800f5d8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f5dc:	dc14      	bgt.n	800f608 <_strtod_l+0x400>
 800f5de:	9904      	ldr	r1, [sp, #16]
 800f5e0:	2900      	cmp	r1, #0
 800f5e2:	f43f ae53 	beq.w	800f28c <_strtod_l+0x84>
 800f5e6:	9904      	ldr	r1, [sp, #16]
 800f5e8:	dd72      	ble.n	800f6d0 <_strtod_l+0x4c8>
 800f5ea:	2916      	cmp	r1, #22
 800f5ec:	dc5a      	bgt.n	800f6a4 <_strtod_l+0x49c>
 800f5ee:	4970      	ldr	r1, [pc, #448]	; (800f7b0 <_strtod_l+0x5a8>)
 800f5f0:	9b04      	ldr	r3, [sp, #16]
 800f5f2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f5f6:	ed91 7b00 	vldr	d7, [r1]
 800f5fa:	ec4b ab16 	vmov	d6, sl, fp
 800f5fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f602:	ec5b ab17 	vmov	sl, fp, d7
 800f606:	e641      	b.n	800f28c <_strtod_l+0x84>
 800f608:	4969      	ldr	r1, [pc, #420]	; (800f7b0 <_strtod_l+0x5a8>)
 800f60a:	eddd 7a06 	vldr	s15, [sp, #24]
 800f60e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f612:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800f616:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f61a:	2b0f      	cmp	r3, #15
 800f61c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f620:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f624:	ec5b ab17 	vmov	sl, fp, d7
 800f628:	ddd9      	ble.n	800f5de <_strtod_l+0x3d6>
 800f62a:	9904      	ldr	r1, [sp, #16]
 800f62c:	1a9a      	subs	r2, r3, r2
 800f62e:	440a      	add	r2, r1
 800f630:	2a00      	cmp	r2, #0
 800f632:	f340 8096 	ble.w	800f762 <_strtod_l+0x55a>
 800f636:	f012 000f 	ands.w	r0, r2, #15
 800f63a:	d00a      	beq.n	800f652 <_strtod_l+0x44a>
 800f63c:	495c      	ldr	r1, [pc, #368]	; (800f7b0 <_strtod_l+0x5a8>)
 800f63e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f642:	ed91 7b00 	vldr	d7, [r1]
 800f646:	ec4b ab16 	vmov	d6, sl, fp
 800f64a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f64e:	ec5b ab17 	vmov	sl, fp, d7
 800f652:	f032 020f 	bics.w	r2, r2, #15
 800f656:	d072      	beq.n	800f73e <_strtod_l+0x536>
 800f658:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f65c:	dd45      	ble.n	800f6ea <_strtod_l+0x4e2>
 800f65e:	2500      	movs	r5, #0
 800f660:	46a8      	mov	r8, r5
 800f662:	9506      	str	r5, [sp, #24]
 800f664:	46a9      	mov	r9, r5
 800f666:	2322      	movs	r3, #34	; 0x22
 800f668:	f8df b150 	ldr.w	fp, [pc, #336]	; 800f7bc <_strtod_l+0x5b4>
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	f04f 0a00 	mov.w	sl, #0
 800f672:	9b06      	ldr	r3, [sp, #24]
 800f674:	2b00      	cmp	r3, #0
 800f676:	f43f ae09 	beq.w	800f28c <_strtod_l+0x84>
 800f67a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f67c:	4620      	mov	r0, r4
 800f67e:	f002 f863 	bl	8011748 <_Bfree>
 800f682:	4649      	mov	r1, r9
 800f684:	4620      	mov	r0, r4
 800f686:	f002 f85f 	bl	8011748 <_Bfree>
 800f68a:	4641      	mov	r1, r8
 800f68c:	4620      	mov	r0, r4
 800f68e:	f002 f85b 	bl	8011748 <_Bfree>
 800f692:	9906      	ldr	r1, [sp, #24]
 800f694:	4620      	mov	r0, r4
 800f696:	f002 f857 	bl	8011748 <_Bfree>
 800f69a:	4629      	mov	r1, r5
 800f69c:	4620      	mov	r0, r4
 800f69e:	f002 f853 	bl	8011748 <_Bfree>
 800f6a2:	e5f3      	b.n	800f28c <_strtod_l+0x84>
 800f6a4:	9804      	ldr	r0, [sp, #16]
 800f6a6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f6aa:	4281      	cmp	r1, r0
 800f6ac:	dbbd      	blt.n	800f62a <_strtod_l+0x422>
 800f6ae:	4a40      	ldr	r2, [pc, #256]	; (800f7b0 <_strtod_l+0x5a8>)
 800f6b0:	f1c3 030f 	rsb	r3, r3, #15
 800f6b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f6b8:	ed91 7b00 	vldr	d7, [r1]
 800f6bc:	ec4b ab16 	vmov	d6, sl, fp
 800f6c0:	1ac3      	subs	r3, r0, r3
 800f6c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f6c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6ca:	ed92 6b00 	vldr	d6, [r2]
 800f6ce:	e796      	b.n	800f5fe <_strtod_l+0x3f6>
 800f6d0:	3116      	adds	r1, #22
 800f6d2:	dbaa      	blt.n	800f62a <_strtod_l+0x422>
 800f6d4:	4936      	ldr	r1, [pc, #216]	; (800f7b0 <_strtod_l+0x5a8>)
 800f6d6:	9b04      	ldr	r3, [sp, #16]
 800f6d8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800f6dc:	ed91 7b00 	vldr	d7, [r1]
 800f6e0:	ec4b ab16 	vmov	d6, sl, fp
 800f6e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f6e8:	e78b      	b.n	800f602 <_strtod_l+0x3fa>
 800f6ea:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	4e30      	ldr	r6, [pc, #192]	; (800f7b4 <_strtod_l+0x5ac>)
 800f6f2:	1112      	asrs	r2, r2, #4
 800f6f4:	4601      	mov	r1, r0
 800f6f6:	2a01      	cmp	r2, #1
 800f6f8:	dc23      	bgt.n	800f742 <_strtod_l+0x53a>
 800f6fa:	b108      	cbz	r0, 800f700 <_strtod_l+0x4f8>
 800f6fc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800f700:	4a2c      	ldr	r2, [pc, #176]	; (800f7b4 <_strtod_l+0x5ac>)
 800f702:	482d      	ldr	r0, [pc, #180]	; (800f7b8 <_strtod_l+0x5b0>)
 800f704:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800f708:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f70c:	ed91 7b00 	vldr	d7, [r1]
 800f710:	ec4b ab16 	vmov	d6, sl, fp
 800f714:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f718:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f71c:	9907      	ldr	r1, [sp, #28]
 800f71e:	4a27      	ldr	r2, [pc, #156]	; (800f7bc <_strtod_l+0x5b4>)
 800f720:	400a      	ands	r2, r1
 800f722:	4282      	cmp	r2, r0
 800f724:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800f728:	d899      	bhi.n	800f65e <_strtod_l+0x456>
 800f72a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f72e:	4282      	cmp	r2, r0
 800f730:	bf86      	itte	hi
 800f732:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800f7c4 <_strtod_l+0x5bc>
 800f736:	f04f 3aff 	movhi.w	sl, #4294967295
 800f73a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800f73e:	2700      	movs	r7, #0
 800f740:	e070      	b.n	800f824 <_strtod_l+0x61c>
 800f742:	07d7      	lsls	r7, r2, #31
 800f744:	d50a      	bpl.n	800f75c <_strtod_l+0x554>
 800f746:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800f74a:	ed90 7b00 	vldr	d7, [r0]
 800f74e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800f752:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f756:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f75a:	2001      	movs	r0, #1
 800f75c:	3101      	adds	r1, #1
 800f75e:	1052      	asrs	r2, r2, #1
 800f760:	e7c9      	b.n	800f6f6 <_strtod_l+0x4ee>
 800f762:	d0ec      	beq.n	800f73e <_strtod_l+0x536>
 800f764:	4252      	negs	r2, r2
 800f766:	f012 000f 	ands.w	r0, r2, #15
 800f76a:	d00a      	beq.n	800f782 <_strtod_l+0x57a>
 800f76c:	4910      	ldr	r1, [pc, #64]	; (800f7b0 <_strtod_l+0x5a8>)
 800f76e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f772:	ed91 7b00 	vldr	d7, [r1]
 800f776:	ec4b ab16 	vmov	d6, sl, fp
 800f77a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f77e:	ec5b ab17 	vmov	sl, fp, d7
 800f782:	1112      	asrs	r2, r2, #4
 800f784:	d0db      	beq.n	800f73e <_strtod_l+0x536>
 800f786:	2a1f      	cmp	r2, #31
 800f788:	dd1e      	ble.n	800f7c8 <_strtod_l+0x5c0>
 800f78a:	2500      	movs	r5, #0
 800f78c:	46a8      	mov	r8, r5
 800f78e:	9506      	str	r5, [sp, #24]
 800f790:	46a9      	mov	r9, r5
 800f792:	2322      	movs	r3, #34	; 0x22
 800f794:	f04f 0a00 	mov.w	sl, #0
 800f798:	f04f 0b00 	mov.w	fp, #0
 800f79c:	6023      	str	r3, [r4, #0]
 800f79e:	e768      	b.n	800f672 <_strtod_l+0x46a>
 800f7a0:	08012fad 	.word	0x08012fad
 800f7a4:	08013033 	.word	0x08013033
 800f7a8:	08012fb5 	.word	0x08012fb5
 800f7ac:	08012ff4 	.word	0x08012ff4
 800f7b0:	080130d8 	.word	0x080130d8
 800f7b4:	080130b0 	.word	0x080130b0
 800f7b8:	7ca00000 	.word	0x7ca00000
 800f7bc:	7ff00000 	.word	0x7ff00000
 800f7c0:	fff80000 	.word	0xfff80000
 800f7c4:	7fefffff 	.word	0x7fefffff
 800f7c8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800f7cc:	f012 0710 	ands.w	r7, r2, #16
 800f7d0:	49ab      	ldr	r1, [pc, #684]	; (800fa80 <_strtod_l+0x878>)
 800f7d2:	bf18      	it	ne
 800f7d4:	276a      	movne	r7, #106	; 0x6a
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	2a00      	cmp	r2, #0
 800f7da:	f300 8113 	bgt.w	800fa04 <_strtod_l+0x7fc>
 800f7de:	b108      	cbz	r0, 800f7e4 <_strtod_l+0x5dc>
 800f7e0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800f7e4:	b1bf      	cbz	r7, 800f816 <_strtod_l+0x60e>
 800f7e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f7ea:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800f7ee:	2a00      	cmp	r2, #0
 800f7f0:	4659      	mov	r1, fp
 800f7f2:	dd10      	ble.n	800f816 <_strtod_l+0x60e>
 800f7f4:	2a1f      	cmp	r2, #31
 800f7f6:	f340 8113 	ble.w	800fa20 <_strtod_l+0x818>
 800f7fa:	2a34      	cmp	r2, #52	; 0x34
 800f7fc:	bfde      	ittt	le
 800f7fe:	3a20      	suble	r2, #32
 800f800:	f04f 30ff 	movle.w	r0, #4294967295
 800f804:	fa00 f202 	lslle.w	r2, r0, r2
 800f808:	f04f 0a00 	mov.w	sl, #0
 800f80c:	bfcc      	ite	gt
 800f80e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f812:	ea02 0b01 	andle.w	fp, r2, r1
 800f816:	ec4b ab17 	vmov	d7, sl, fp
 800f81a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f822:	d0b2      	beq.n	800f78a <_strtod_l+0x582>
 800f824:	9a08      	ldr	r2, [sp, #32]
 800f826:	9200      	str	r2, [sp, #0]
 800f828:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f82a:	462a      	mov	r2, r5
 800f82c:	4620      	mov	r0, r4
 800f82e:	f001 ffdd 	bl	80117ec <__s2b>
 800f832:	9006      	str	r0, [sp, #24]
 800f834:	2800      	cmp	r0, #0
 800f836:	f43f af12 	beq.w	800f65e <_strtod_l+0x456>
 800f83a:	9a04      	ldr	r2, [sp, #16]
 800f83c:	9b04      	ldr	r3, [sp, #16]
 800f83e:	2a00      	cmp	r2, #0
 800f840:	f1c3 0300 	rsb	r3, r3, #0
 800f844:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800fa68 <_strtod_l+0x860>
 800f848:	bfa8      	it	ge
 800f84a:	2300      	movge	r3, #0
 800f84c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800fa70 <_strtod_l+0x868>
 800f850:	ed9f bb89 	vldr	d11, [pc, #548]	; 800fa78 <_strtod_l+0x870>
 800f854:	930e      	str	r3, [sp, #56]	; 0x38
 800f856:	2500      	movs	r5, #0
 800f858:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f85c:	9310      	str	r3, [sp, #64]	; 0x40
 800f85e:	46a8      	mov	r8, r5
 800f860:	9b06      	ldr	r3, [sp, #24]
 800f862:	4620      	mov	r0, r4
 800f864:	6859      	ldr	r1, [r3, #4]
 800f866:	f001 ff3b 	bl	80116e0 <_Balloc>
 800f86a:	4681      	mov	r9, r0
 800f86c:	2800      	cmp	r0, #0
 800f86e:	f43f aefa 	beq.w	800f666 <_strtod_l+0x45e>
 800f872:	9b06      	ldr	r3, [sp, #24]
 800f874:	691a      	ldr	r2, [r3, #16]
 800f876:	3202      	adds	r2, #2
 800f878:	f103 010c 	add.w	r1, r3, #12
 800f87c:	0092      	lsls	r2, r2, #2
 800f87e:	300c      	adds	r0, #12
 800f880:	f7fe fc64 	bl	800e14c <memcpy>
 800f884:	aa1a      	add	r2, sp, #104	; 0x68
 800f886:	a919      	add	r1, sp, #100	; 0x64
 800f888:	ec4b ab10 	vmov	d0, sl, fp
 800f88c:	4620      	mov	r0, r4
 800f88e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f892:	f002 fa67 	bl	8011d64 <__d2b>
 800f896:	9018      	str	r0, [sp, #96]	; 0x60
 800f898:	2800      	cmp	r0, #0
 800f89a:	f43f aee4 	beq.w	800f666 <_strtod_l+0x45e>
 800f89e:	2101      	movs	r1, #1
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f002 f82f 	bl	8011904 <__i2b>
 800f8a6:	4680      	mov	r8, r0
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	f43f aedc 	beq.w	800f666 <_strtod_l+0x45e>
 800f8ae:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800f8b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f8b2:	2e00      	cmp	r6, #0
 800f8b4:	bfb1      	iteee	lt
 800f8b6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800f8b8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f8ba:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800f8bc:	18f3      	addge	r3, r6, r3
 800f8be:	bfba      	itte	lt
 800f8c0:	1b98      	sublt	r0, r3, r6
 800f8c2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f8c4:	9308      	strge	r3, [sp, #32]
 800f8c6:	eba6 0607 	sub.w	r6, r6, r7
 800f8ca:	bfb8      	it	lt
 800f8cc:	9308      	strlt	r3, [sp, #32]
 800f8ce:	4416      	add	r6, r2
 800f8d0:	4b6c      	ldr	r3, [pc, #432]	; (800fa84 <_strtod_l+0x87c>)
 800f8d2:	3e01      	subs	r6, #1
 800f8d4:	429e      	cmp	r6, r3
 800f8d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f8da:	f280 80b4 	bge.w	800fa46 <_strtod_l+0x83e>
 800f8de:	1b9b      	subs	r3, r3, r6
 800f8e0:	2b1f      	cmp	r3, #31
 800f8e2:	eba2 0203 	sub.w	r2, r2, r3
 800f8e6:	f04f 0101 	mov.w	r1, #1
 800f8ea:	f300 80a0 	bgt.w	800fa2e <_strtod_l+0x826>
 800f8ee:	fa01 f303 	lsl.w	r3, r1, r3
 800f8f2:	9311      	str	r3, [sp, #68]	; 0x44
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8f8:	9b08      	ldr	r3, [sp, #32]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	4402      	add	r2, r0
 800f8fe:	18be      	adds	r6, r7, r2
 800f900:	9a08      	ldr	r2, [sp, #32]
 800f902:	429a      	cmp	r2, r3
 800f904:	bfa8      	it	ge
 800f906:	461a      	movge	r2, r3
 800f908:	42b2      	cmp	r2, r6
 800f90a:	bfa8      	it	ge
 800f90c:	4632      	movge	r2, r6
 800f90e:	2a00      	cmp	r2, #0
 800f910:	dd04      	ble.n	800f91c <_strtod_l+0x714>
 800f912:	9908      	ldr	r1, [sp, #32]
 800f914:	1a9b      	subs	r3, r3, r2
 800f916:	1ab6      	subs	r6, r6, r2
 800f918:	1a8a      	subs	r2, r1, r2
 800f91a:	9208      	str	r2, [sp, #32]
 800f91c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f91e:	b1c2      	cbz	r2, 800f952 <_strtod_l+0x74a>
 800f920:	4641      	mov	r1, r8
 800f922:	4620      	mov	r0, r4
 800f924:	9315      	str	r3, [sp, #84]	; 0x54
 800f926:	f002 f88d 	bl	8011a44 <__pow5mult>
 800f92a:	4680      	mov	r8, r0
 800f92c:	2800      	cmp	r0, #0
 800f92e:	f43f ae9a 	beq.w	800f666 <_strtod_l+0x45e>
 800f932:	4601      	mov	r1, r0
 800f934:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f936:	4620      	mov	r0, r4
 800f938:	f001 ffed 	bl	8011916 <__multiply>
 800f93c:	900c      	str	r0, [sp, #48]	; 0x30
 800f93e:	2800      	cmp	r0, #0
 800f940:	f43f ae91 	beq.w	800f666 <_strtod_l+0x45e>
 800f944:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f946:	4620      	mov	r0, r4
 800f948:	f001 fefe 	bl	8011748 <_Bfree>
 800f94c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f94e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f950:	9218      	str	r2, [sp, #96]	; 0x60
 800f952:	2b00      	cmp	r3, #0
 800f954:	dc7c      	bgt.n	800fa50 <_strtod_l+0x848>
 800f956:	9b04      	ldr	r3, [sp, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	dd08      	ble.n	800f96e <_strtod_l+0x766>
 800f95c:	4649      	mov	r1, r9
 800f95e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f960:	4620      	mov	r0, r4
 800f962:	f002 f86f 	bl	8011a44 <__pow5mult>
 800f966:	4681      	mov	r9, r0
 800f968:	2800      	cmp	r0, #0
 800f96a:	f43f ae7c 	beq.w	800f666 <_strtod_l+0x45e>
 800f96e:	2e00      	cmp	r6, #0
 800f970:	dd08      	ble.n	800f984 <_strtod_l+0x77c>
 800f972:	4649      	mov	r1, r9
 800f974:	4632      	mov	r2, r6
 800f976:	4620      	mov	r0, r4
 800f978:	f002 f8b2 	bl	8011ae0 <__lshift>
 800f97c:	4681      	mov	r9, r0
 800f97e:	2800      	cmp	r0, #0
 800f980:	f43f ae71 	beq.w	800f666 <_strtod_l+0x45e>
 800f984:	9b08      	ldr	r3, [sp, #32]
 800f986:	2b00      	cmp	r3, #0
 800f988:	dd08      	ble.n	800f99c <_strtod_l+0x794>
 800f98a:	4641      	mov	r1, r8
 800f98c:	461a      	mov	r2, r3
 800f98e:	4620      	mov	r0, r4
 800f990:	f002 f8a6 	bl	8011ae0 <__lshift>
 800f994:	4680      	mov	r8, r0
 800f996:	2800      	cmp	r0, #0
 800f998:	f43f ae65 	beq.w	800f666 <_strtod_l+0x45e>
 800f99c:	464a      	mov	r2, r9
 800f99e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f002 f90b 	bl	8011bbc <__mdiff>
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	f43f ae5c 	beq.w	800f666 <_strtod_l+0x45e>
 800f9ae:	68c3      	ldr	r3, [r0, #12]
 800f9b0:	930c      	str	r3, [sp, #48]	; 0x30
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60c3      	str	r3, [r0, #12]
 800f9b6:	4641      	mov	r1, r8
 800f9b8:	f002 f8e6 	bl	8011b88 <__mcmp>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	da63      	bge.n	800fa88 <_strtod_l+0x880>
 800f9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9c2:	b9e3      	cbnz	r3, 800f9fe <_strtod_l+0x7f6>
 800f9c4:	f1ba 0f00 	cmp.w	sl, #0
 800f9c8:	d119      	bne.n	800f9fe <_strtod_l+0x7f6>
 800f9ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9ce:	b9b3      	cbnz	r3, 800f9fe <_strtod_l+0x7f6>
 800f9d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f9d4:	0d1b      	lsrs	r3, r3, #20
 800f9d6:	051b      	lsls	r3, r3, #20
 800f9d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f9dc:	d90f      	bls.n	800f9fe <_strtod_l+0x7f6>
 800f9de:	696b      	ldr	r3, [r5, #20]
 800f9e0:	b913      	cbnz	r3, 800f9e8 <_strtod_l+0x7e0>
 800f9e2:	692b      	ldr	r3, [r5, #16]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	dd0a      	ble.n	800f9fe <_strtod_l+0x7f6>
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f002 f877 	bl	8011ae0 <__lshift>
 800f9f2:	4641      	mov	r1, r8
 800f9f4:	4605      	mov	r5, r0
 800f9f6:	f002 f8c7 	bl	8011b88 <__mcmp>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	dc75      	bgt.n	800faea <_strtod_l+0x8e2>
 800f9fe:	2f00      	cmp	r7, #0
 800fa00:	d17f      	bne.n	800fb02 <_strtod_l+0x8fa>
 800fa02:	e63a      	b.n	800f67a <_strtod_l+0x472>
 800fa04:	07d6      	lsls	r6, r2, #31
 800fa06:	d508      	bpl.n	800fa1a <_strtod_l+0x812>
 800fa08:	ed9d 6b06 	vldr	d6, [sp, #24]
 800fa0c:	ed91 7b00 	vldr	d7, [r1]
 800fa10:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fa14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa18:	2001      	movs	r0, #1
 800fa1a:	1052      	asrs	r2, r2, #1
 800fa1c:	3108      	adds	r1, #8
 800fa1e:	e6db      	b.n	800f7d8 <_strtod_l+0x5d0>
 800fa20:	f04f 31ff 	mov.w	r1, #4294967295
 800fa24:	fa01 f202 	lsl.w	r2, r1, r2
 800fa28:	ea02 0a0a 	and.w	sl, r2, sl
 800fa2c:	e6f3      	b.n	800f816 <_strtod_l+0x60e>
 800fa2e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800fa32:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800fa36:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800fa3a:	36e2      	adds	r6, #226	; 0xe2
 800fa3c:	fa01 f306 	lsl.w	r3, r1, r6
 800fa40:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa42:	9111      	str	r1, [sp, #68]	; 0x44
 800fa44:	e758      	b.n	800f8f8 <_strtod_l+0x6f0>
 800fa46:	2300      	movs	r3, #0
 800fa48:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	9311      	str	r3, [sp, #68]	; 0x44
 800fa4e:	e753      	b.n	800f8f8 <_strtod_l+0x6f0>
 800fa50:	461a      	mov	r2, r3
 800fa52:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa54:	4620      	mov	r0, r4
 800fa56:	f002 f843 	bl	8011ae0 <__lshift>
 800fa5a:	9018      	str	r0, [sp, #96]	; 0x60
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	f47f af7a 	bne.w	800f956 <_strtod_l+0x74e>
 800fa62:	e600      	b.n	800f666 <_strtod_l+0x45e>
 800fa64:	f3af 8000 	nop.w
 800fa68:	94a03595 	.word	0x94a03595
 800fa6c:	3fdfffff 	.word	0x3fdfffff
 800fa70:	35afe535 	.word	0x35afe535
 800fa74:	3fe00000 	.word	0x3fe00000
 800fa78:	94a03595 	.word	0x94a03595
 800fa7c:	3fcfffff 	.word	0x3fcfffff
 800fa80:	08013008 	.word	0x08013008
 800fa84:	fffffc02 	.word	0xfffffc02
 800fa88:	f8cd b020 	str.w	fp, [sp, #32]
 800fa8c:	f040 8085 	bne.w	800fb9a <_strtod_l+0x992>
 800fa90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa96:	b322      	cbz	r2, 800fae2 <_strtod_l+0x8da>
 800fa98:	4ab7      	ldr	r2, [pc, #732]	; (800fd78 <_strtod_l+0xb70>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d154      	bne.n	800fb48 <_strtod_l+0x940>
 800fa9e:	4651      	mov	r1, sl
 800faa0:	b1e7      	cbz	r7, 800fadc <_strtod_l+0x8d4>
 800faa2:	4bb6      	ldr	r3, [pc, #728]	; (800fd7c <_strtod_l+0xb74>)
 800faa4:	465a      	mov	r2, fp
 800faa6:	4013      	ands	r3, r2
 800faa8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800faac:	f04f 32ff 	mov.w	r2, #4294967295
 800fab0:	d803      	bhi.n	800faba <_strtod_l+0x8b2>
 800fab2:	0d1b      	lsrs	r3, r3, #20
 800fab4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fab8:	409a      	lsls	r2, r3
 800faba:	4291      	cmp	r1, r2
 800fabc:	d144      	bne.n	800fb48 <_strtod_l+0x940>
 800fabe:	4bb0      	ldr	r3, [pc, #704]	; (800fd80 <_strtod_l+0xb78>)
 800fac0:	9a08      	ldr	r2, [sp, #32]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d102      	bne.n	800facc <_strtod_l+0x8c4>
 800fac6:	3101      	adds	r1, #1
 800fac8:	f43f adcd 	beq.w	800f666 <_strtod_l+0x45e>
 800facc:	4bab      	ldr	r3, [pc, #684]	; (800fd7c <_strtod_l+0xb74>)
 800face:	9a08      	ldr	r2, [sp, #32]
 800fad0:	401a      	ands	r2, r3
 800fad2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800fad6:	f04f 0a00 	mov.w	sl, #0
 800fada:	e790      	b.n	800f9fe <_strtod_l+0x7f6>
 800fadc:	f04f 32ff 	mov.w	r2, #4294967295
 800fae0:	e7eb      	b.n	800faba <_strtod_l+0x8b2>
 800fae2:	bb8b      	cbnz	r3, 800fb48 <_strtod_l+0x940>
 800fae4:	f1ba 0f00 	cmp.w	sl, #0
 800fae8:	d12e      	bne.n	800fb48 <_strtod_l+0x940>
 800faea:	465b      	mov	r3, fp
 800faec:	4aa3      	ldr	r2, [pc, #652]	; (800fd7c <_strtod_l+0xb74>)
 800faee:	b30f      	cbz	r7, 800fb34 <_strtod_l+0x92c>
 800faf0:	ea02 010b 	and.w	r1, r2, fp
 800faf4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800faf8:	dc1c      	bgt.n	800fb34 <_strtod_l+0x92c>
 800fafa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fafe:	f77f ae48 	ble.w	800f792 <_strtod_l+0x58a>
 800fb02:	4aa0      	ldr	r2, [pc, #640]	; (800fd84 <_strtod_l+0xb7c>)
 800fb04:	2300      	movs	r3, #0
 800fb06:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800fb0a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800fb0e:	ec4b ab17 	vmov	d7, sl, fp
 800fb12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fb16:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fb1a:	9b05      	ldr	r3, [sp, #20]
 800fb1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f47f adaa 	bne.w	800f67a <_strtod_l+0x472>
 800fb26:	9b04      	ldr	r3, [sp, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	f47f ada6 	bne.w	800f67a <_strtod_l+0x472>
 800fb2e:	2322      	movs	r3, #34	; 0x22
 800fb30:	6023      	str	r3, [r4, #0]
 800fb32:	e5a2      	b.n	800f67a <_strtod_l+0x472>
 800fb34:	4013      	ands	r3, r2
 800fb36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fb3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fb3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fb42:	f04f 3aff 	mov.w	sl, #4294967295
 800fb46:	e75a      	b.n	800f9fe <_strtod_l+0x7f6>
 800fb48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb4a:	b18b      	cbz	r3, 800fb70 <_strtod_l+0x968>
 800fb4c:	9a08      	ldr	r2, [sp, #32]
 800fb4e:	4213      	tst	r3, r2
 800fb50:	f43f af55 	beq.w	800f9fe <_strtod_l+0x7f6>
 800fb54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb56:	463a      	mov	r2, r7
 800fb58:	4650      	mov	r0, sl
 800fb5a:	4659      	mov	r1, fp
 800fb5c:	b163      	cbz	r3, 800fb78 <_strtod_l+0x970>
 800fb5e:	f7ff fb38 	bl	800f1d2 <sulp>
 800fb62:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800fb66:	ee37 7b00 	vadd.f64	d7, d7, d0
 800fb6a:	ec5b ab17 	vmov	sl, fp, d7
 800fb6e:	e746      	b.n	800f9fe <_strtod_l+0x7f6>
 800fb70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb72:	ea13 0f0a 	tst.w	r3, sl
 800fb76:	e7eb      	b.n	800fb50 <_strtod_l+0x948>
 800fb78:	f7ff fb2b 	bl	800f1d2 <sulp>
 800fb7c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800fb80:	ee37 7b40 	vsub.f64	d7, d7, d0
 800fb84:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fb88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb90:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fb94:	f43f adfd 	beq.w	800f792 <_strtod_l+0x58a>
 800fb98:	e731      	b.n	800f9fe <_strtod_l+0x7f6>
 800fb9a:	4641      	mov	r1, r8
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	f002 f930 	bl	8011e02 <__ratio>
 800fba2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800fba6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbae:	d869      	bhi.n	800fc84 <_strtod_l+0xa7c>
 800fbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d045      	beq.n	800fc42 <_strtod_l+0xa3a>
 800fbb6:	4b74      	ldr	r3, [pc, #464]	; (800fd88 <_strtod_l+0xb80>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800fbbe:	9808      	ldr	r0, [sp, #32]
 800fbc0:	496e      	ldr	r1, [pc, #440]	; (800fd7c <_strtod_l+0xb74>)
 800fbc2:	ea00 0601 	and.w	r6, r0, r1
 800fbc6:	4871      	ldr	r0, [pc, #452]	; (800fd8c <_strtod_l+0xb84>)
 800fbc8:	4286      	cmp	r6, r0
 800fbca:	f040 8089 	bne.w	800fce0 <_strtod_l+0xad8>
 800fbce:	910f      	str	r1, [sp, #60]	; 0x3c
 800fbd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fbd4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800fbd8:	9908      	ldr	r1, [sp, #32]
 800fbda:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800fbde:	ec4b ab10 	vmov	d0, sl, fp
 800fbe2:	ec43 2b1c 	vmov	d12, r2, r3
 800fbe6:	f002 f847 	bl	8011c78 <__ulp>
 800fbea:	ec4b ab1d 	vmov	d13, sl, fp
 800fbee:	eeac db00 	vfma.f64	d13, d12, d0
 800fbf2:	ed8d db08 	vstr	d13, [sp, #32]
 800fbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fbfa:	4a65      	ldr	r2, [pc, #404]	; (800fd90 <_strtod_l+0xb88>)
 800fbfc:	4019      	ands	r1, r3
 800fbfe:	4291      	cmp	r1, r2
 800fc00:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800fc04:	d948      	bls.n	800fc98 <_strtod_l+0xa90>
 800fc06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc08:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d103      	bne.n	800fc18 <_strtod_l+0xa10>
 800fc10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc12:	3301      	adds	r3, #1
 800fc14:	f43f ad27 	beq.w	800f666 <_strtod_l+0x45e>
 800fc18:	f8df b164 	ldr.w	fp, [pc, #356]	; 800fd80 <_strtod_l+0xb78>
 800fc1c:	f04f 3aff 	mov.w	sl, #4294967295
 800fc20:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fc22:	4620      	mov	r0, r4
 800fc24:	f001 fd90 	bl	8011748 <_Bfree>
 800fc28:	4649      	mov	r1, r9
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f001 fd8c 	bl	8011748 <_Bfree>
 800fc30:	4641      	mov	r1, r8
 800fc32:	4620      	mov	r0, r4
 800fc34:	f001 fd88 	bl	8011748 <_Bfree>
 800fc38:	4629      	mov	r1, r5
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f001 fd84 	bl	8011748 <_Bfree>
 800fc40:	e60e      	b.n	800f860 <_strtod_l+0x658>
 800fc42:	f1ba 0f00 	cmp.w	sl, #0
 800fc46:	d113      	bne.n	800fc70 <_strtod_l+0xa68>
 800fc48:	9b08      	ldr	r3, [sp, #32]
 800fc4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc4e:	b9b3      	cbnz	r3, 800fc7e <_strtod_l+0xa76>
 800fc50:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fc54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800fc60:	d401      	bmi.n	800fc66 <_strtod_l+0xa5e>
 800fc62:	ee20 8b08 	vmul.f64	d8, d0, d8
 800fc66:	eeb1 7b48 	vneg.f64	d7, d8
 800fc6a:	ec53 2b17 	vmov	r2, r3, d7
 800fc6e:	e7a6      	b.n	800fbbe <_strtod_l+0x9b6>
 800fc70:	f1ba 0f01 	cmp.w	sl, #1
 800fc74:	d103      	bne.n	800fc7e <_strtod_l+0xa76>
 800fc76:	9b08      	ldr	r3, [sp, #32]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f43f ad8a 	beq.w	800f792 <_strtod_l+0x58a>
 800fc7e:	2200      	movs	r2, #0
 800fc80:	4b44      	ldr	r3, [pc, #272]	; (800fd94 <_strtod_l+0xb8c>)
 800fc82:	e79a      	b.n	800fbba <_strtod_l+0x9b2>
 800fc84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc86:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800fc8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d0e9      	beq.n	800fc66 <_strtod_l+0xa5e>
 800fc92:	ec53 2b18 	vmov	r2, r3, d8
 800fc96:	e792      	b.n	800fbbe <_strtod_l+0x9b6>
 800fc98:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fc9c:	2f00      	cmp	r7, #0
 800fc9e:	d1bf      	bne.n	800fc20 <_strtod_l+0xa18>
 800fca0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fca4:	0d1b      	lsrs	r3, r3, #20
 800fca6:	051b      	lsls	r3, r3, #20
 800fca8:	429e      	cmp	r6, r3
 800fcaa:	d1b9      	bne.n	800fc20 <_strtod_l+0xa18>
 800fcac:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800fcb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcb2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800fcb6:	ee38 8b40 	vsub.f64	d8, d8, d0
 800fcba:	b92b      	cbnz	r3, 800fcc8 <_strtod_l+0xac0>
 800fcbc:	f1ba 0f00 	cmp.w	sl, #0
 800fcc0:	d102      	bne.n	800fcc8 <_strtod_l+0xac0>
 800fcc2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800fcc6:	b3d2      	cbz	r2, 800fd3e <_strtod_l+0xb36>
 800fcc8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800fccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd0:	f53f acd3 	bmi.w	800f67a <_strtod_l+0x472>
 800fcd4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800fcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcdc:	dda0      	ble.n	800fc20 <_strtod_l+0xa18>
 800fcde:	e4cc      	b.n	800f67a <_strtod_l+0x472>
 800fce0:	b1ef      	cbz	r7, 800fd1e <_strtod_l+0xb16>
 800fce2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800fce6:	d81a      	bhi.n	800fd1e <_strtod_l+0xb16>
 800fce8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fd70 <_strtod_l+0xb68>
 800fcec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf4:	d810      	bhi.n	800fd18 <_strtod_l+0xb10>
 800fcf6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800fcfa:	ee17 3a90 	vmov	r3, s15
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	bf08      	it	eq
 800fd02:	2301      	moveq	r3, #1
 800fd04:	ee07 3a90 	vmov	s15, r3
 800fd08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd0a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800fd0e:	b99b      	cbnz	r3, 800fd38 <_strtod_l+0xb30>
 800fd10:	eeb1 7b48 	vneg.f64	d7, d8
 800fd14:	ec53 2b17 	vmov	r2, r3, d7
 800fd18:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800fd1c:	1b8b      	subs	r3, r1, r6
 800fd1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fd22:	ec43 2b1c 	vmov	d12, r2, r3
 800fd26:	f001 ffa7 	bl	8011c78 <__ulp>
 800fd2a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800fd2e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800fd32:	ec5b ab17 	vmov	sl, fp, d7
 800fd36:	e7b1      	b.n	800fc9c <_strtod_l+0xa94>
 800fd38:	ec53 2b18 	vmov	r2, r3, d8
 800fd3c:	e7ec      	b.n	800fd18 <_strtod_l+0xb10>
 800fd3e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800fd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd46:	f57f af6b 	bpl.w	800fc20 <_strtod_l+0xa18>
 800fd4a:	e496      	b.n	800f67a <_strtod_l+0x472>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	930d      	str	r3, [sp, #52]	; 0x34
 800fd50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd54:	6013      	str	r3, [r2, #0]
 800fd56:	f7ff ba9d 	b.w	800f294 <_strtod_l+0x8c>
 800fd5a:	2a65      	cmp	r2, #101	; 0x65
 800fd5c:	f04f 0100 	mov.w	r1, #0
 800fd60:	f43f ab97 	beq.w	800f492 <_strtod_l+0x28a>
 800fd64:	2701      	movs	r7, #1
 800fd66:	460b      	mov	r3, r1
 800fd68:	9704      	str	r7, [sp, #16]
 800fd6a:	f7ff bb0a 	b.w	800f382 <_strtod_l+0x17a>
 800fd6e:	bf00      	nop
 800fd70:	ffc00000 	.word	0xffc00000
 800fd74:	41dfffff 	.word	0x41dfffff
 800fd78:	000fffff 	.word	0x000fffff
 800fd7c:	7ff00000 	.word	0x7ff00000
 800fd80:	7fefffff 	.word	0x7fefffff
 800fd84:	39500000 	.word	0x39500000
 800fd88:	3ff00000 	.word	0x3ff00000
 800fd8c:	7fe00000 	.word	0x7fe00000
 800fd90:	7c9fffff 	.word	0x7c9fffff
 800fd94:	bff00000 	.word	0xbff00000

0800fd98 <_strtod_r>:
 800fd98:	4b05      	ldr	r3, [pc, #20]	; (800fdb0 <_strtod_r+0x18>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	b410      	push	{r4}
 800fd9e:	6a1b      	ldr	r3, [r3, #32]
 800fda0:	4c04      	ldr	r4, [pc, #16]	; (800fdb4 <_strtod_r+0x1c>)
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	bf08      	it	eq
 800fda6:	4623      	moveq	r3, r4
 800fda8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdac:	f7ff ba2c 	b.w	800f208 <_strtod_l>
 800fdb0:	20000344 	.word	0x20000344
 800fdb4:	200003a8 	.word	0x200003a8

0800fdb8 <_strtol_l.isra.0>:
 800fdb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdbc:	4680      	mov	r8, r0
 800fdbe:	4689      	mov	r9, r1
 800fdc0:	4692      	mov	sl, r2
 800fdc2:	461e      	mov	r6, r3
 800fdc4:	460f      	mov	r7, r1
 800fdc6:	463d      	mov	r5, r7
 800fdc8:	9808      	ldr	r0, [sp, #32]
 800fdca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdce:	f001 fbdb 	bl	8011588 <__locale_ctype_ptr_l>
 800fdd2:	4420      	add	r0, r4
 800fdd4:	7843      	ldrb	r3, [r0, #1]
 800fdd6:	f013 0308 	ands.w	r3, r3, #8
 800fdda:	d132      	bne.n	800fe42 <_strtol_l.isra.0+0x8a>
 800fddc:	2c2d      	cmp	r4, #45	; 0x2d
 800fdde:	d132      	bne.n	800fe46 <_strtol_l.isra.0+0x8e>
 800fde0:	787c      	ldrb	r4, [r7, #1]
 800fde2:	1cbd      	adds	r5, r7, #2
 800fde4:	2201      	movs	r2, #1
 800fde6:	2e00      	cmp	r6, #0
 800fde8:	d05d      	beq.n	800fea6 <_strtol_l.isra.0+0xee>
 800fdea:	2e10      	cmp	r6, #16
 800fdec:	d109      	bne.n	800fe02 <_strtol_l.isra.0+0x4a>
 800fdee:	2c30      	cmp	r4, #48	; 0x30
 800fdf0:	d107      	bne.n	800fe02 <_strtol_l.isra.0+0x4a>
 800fdf2:	782b      	ldrb	r3, [r5, #0]
 800fdf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fdf8:	2b58      	cmp	r3, #88	; 0x58
 800fdfa:	d14f      	bne.n	800fe9c <_strtol_l.isra.0+0xe4>
 800fdfc:	786c      	ldrb	r4, [r5, #1]
 800fdfe:	2610      	movs	r6, #16
 800fe00:	3502      	adds	r5, #2
 800fe02:	2a00      	cmp	r2, #0
 800fe04:	bf14      	ite	ne
 800fe06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800fe0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800fe0e:	2700      	movs	r7, #0
 800fe10:	fbb1 fcf6 	udiv	ip, r1, r6
 800fe14:	4638      	mov	r0, r7
 800fe16:	fb06 1e1c 	mls	lr, r6, ip, r1
 800fe1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800fe1e:	2b09      	cmp	r3, #9
 800fe20:	d817      	bhi.n	800fe52 <_strtol_l.isra.0+0x9a>
 800fe22:	461c      	mov	r4, r3
 800fe24:	42a6      	cmp	r6, r4
 800fe26:	dd23      	ble.n	800fe70 <_strtol_l.isra.0+0xb8>
 800fe28:	1c7b      	adds	r3, r7, #1
 800fe2a:	d007      	beq.n	800fe3c <_strtol_l.isra.0+0x84>
 800fe2c:	4584      	cmp	ip, r0
 800fe2e:	d31c      	bcc.n	800fe6a <_strtol_l.isra.0+0xb2>
 800fe30:	d101      	bne.n	800fe36 <_strtol_l.isra.0+0x7e>
 800fe32:	45a6      	cmp	lr, r4
 800fe34:	db19      	blt.n	800fe6a <_strtol_l.isra.0+0xb2>
 800fe36:	fb00 4006 	mla	r0, r0, r6, r4
 800fe3a:	2701      	movs	r7, #1
 800fe3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe40:	e7eb      	b.n	800fe1a <_strtol_l.isra.0+0x62>
 800fe42:	462f      	mov	r7, r5
 800fe44:	e7bf      	b.n	800fdc6 <_strtol_l.isra.0+0xe>
 800fe46:	2c2b      	cmp	r4, #43	; 0x2b
 800fe48:	bf04      	itt	eq
 800fe4a:	1cbd      	addeq	r5, r7, #2
 800fe4c:	787c      	ldrbeq	r4, [r7, #1]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	e7c9      	b.n	800fde6 <_strtol_l.isra.0+0x2e>
 800fe52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800fe56:	2b19      	cmp	r3, #25
 800fe58:	d801      	bhi.n	800fe5e <_strtol_l.isra.0+0xa6>
 800fe5a:	3c37      	subs	r4, #55	; 0x37
 800fe5c:	e7e2      	b.n	800fe24 <_strtol_l.isra.0+0x6c>
 800fe5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800fe62:	2b19      	cmp	r3, #25
 800fe64:	d804      	bhi.n	800fe70 <_strtol_l.isra.0+0xb8>
 800fe66:	3c57      	subs	r4, #87	; 0x57
 800fe68:	e7dc      	b.n	800fe24 <_strtol_l.isra.0+0x6c>
 800fe6a:	f04f 37ff 	mov.w	r7, #4294967295
 800fe6e:	e7e5      	b.n	800fe3c <_strtol_l.isra.0+0x84>
 800fe70:	1c7b      	adds	r3, r7, #1
 800fe72:	d108      	bne.n	800fe86 <_strtol_l.isra.0+0xce>
 800fe74:	2322      	movs	r3, #34	; 0x22
 800fe76:	f8c8 3000 	str.w	r3, [r8]
 800fe7a:	4608      	mov	r0, r1
 800fe7c:	f1ba 0f00 	cmp.w	sl, #0
 800fe80:	d107      	bne.n	800fe92 <_strtol_l.isra.0+0xda>
 800fe82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe86:	b102      	cbz	r2, 800fe8a <_strtol_l.isra.0+0xd2>
 800fe88:	4240      	negs	r0, r0
 800fe8a:	f1ba 0f00 	cmp.w	sl, #0
 800fe8e:	d0f8      	beq.n	800fe82 <_strtol_l.isra.0+0xca>
 800fe90:	b10f      	cbz	r7, 800fe96 <_strtol_l.isra.0+0xde>
 800fe92:	f105 39ff 	add.w	r9, r5, #4294967295
 800fe96:	f8ca 9000 	str.w	r9, [sl]
 800fe9a:	e7f2      	b.n	800fe82 <_strtol_l.isra.0+0xca>
 800fe9c:	2430      	movs	r4, #48	; 0x30
 800fe9e:	2e00      	cmp	r6, #0
 800fea0:	d1af      	bne.n	800fe02 <_strtol_l.isra.0+0x4a>
 800fea2:	2608      	movs	r6, #8
 800fea4:	e7ad      	b.n	800fe02 <_strtol_l.isra.0+0x4a>
 800fea6:	2c30      	cmp	r4, #48	; 0x30
 800fea8:	d0a3      	beq.n	800fdf2 <_strtol_l.isra.0+0x3a>
 800feaa:	260a      	movs	r6, #10
 800feac:	e7a9      	b.n	800fe02 <_strtol_l.isra.0+0x4a>
	...

0800feb0 <_strtol_r>:
 800feb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800feb2:	4c06      	ldr	r4, [pc, #24]	; (800fecc <_strtol_r+0x1c>)
 800feb4:	4d06      	ldr	r5, [pc, #24]	; (800fed0 <_strtol_r+0x20>)
 800feb6:	6824      	ldr	r4, [r4, #0]
 800feb8:	6a24      	ldr	r4, [r4, #32]
 800feba:	2c00      	cmp	r4, #0
 800febc:	bf08      	it	eq
 800febe:	462c      	moveq	r4, r5
 800fec0:	9400      	str	r4, [sp, #0]
 800fec2:	f7ff ff79 	bl	800fdb8 <_strtol_l.isra.0>
 800fec6:	b003      	add	sp, #12
 800fec8:	bd30      	pop	{r4, r5, pc}
 800feca:	bf00      	nop
 800fecc:	20000344 	.word	0x20000344
 800fed0:	200003a8 	.word	0x200003a8

0800fed4 <__swbuf_r>:
 800fed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed6:	460e      	mov	r6, r1
 800fed8:	4614      	mov	r4, r2
 800feda:	4605      	mov	r5, r0
 800fedc:	b118      	cbz	r0, 800fee6 <__swbuf_r+0x12>
 800fede:	6983      	ldr	r3, [r0, #24]
 800fee0:	b90b      	cbnz	r3, 800fee6 <__swbuf_r+0x12>
 800fee2:	f000 ffa1 	bl	8010e28 <__sinit>
 800fee6:	4b21      	ldr	r3, [pc, #132]	; (800ff6c <__swbuf_r+0x98>)
 800fee8:	429c      	cmp	r4, r3
 800feea:	d12a      	bne.n	800ff42 <__swbuf_r+0x6e>
 800feec:	686c      	ldr	r4, [r5, #4]
 800feee:	69a3      	ldr	r3, [r4, #24]
 800fef0:	60a3      	str	r3, [r4, #8]
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	071a      	lsls	r2, r3, #28
 800fef6:	d52e      	bpl.n	800ff56 <__swbuf_r+0x82>
 800fef8:	6923      	ldr	r3, [r4, #16]
 800fefa:	b363      	cbz	r3, 800ff56 <__swbuf_r+0x82>
 800fefc:	6923      	ldr	r3, [r4, #16]
 800fefe:	6820      	ldr	r0, [r4, #0]
 800ff00:	1ac0      	subs	r0, r0, r3
 800ff02:	6963      	ldr	r3, [r4, #20]
 800ff04:	b2f6      	uxtb	r6, r6
 800ff06:	4283      	cmp	r3, r0
 800ff08:	4637      	mov	r7, r6
 800ff0a:	dc04      	bgt.n	800ff16 <__swbuf_r+0x42>
 800ff0c:	4621      	mov	r1, r4
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f000 ff20 	bl	8010d54 <_fflush_r>
 800ff14:	bb28      	cbnz	r0, 800ff62 <__swbuf_r+0x8e>
 800ff16:	68a3      	ldr	r3, [r4, #8]
 800ff18:	3b01      	subs	r3, #1
 800ff1a:	60a3      	str	r3, [r4, #8]
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	1c5a      	adds	r2, r3, #1
 800ff20:	6022      	str	r2, [r4, #0]
 800ff22:	701e      	strb	r6, [r3, #0]
 800ff24:	6963      	ldr	r3, [r4, #20]
 800ff26:	3001      	adds	r0, #1
 800ff28:	4283      	cmp	r3, r0
 800ff2a:	d004      	beq.n	800ff36 <__swbuf_r+0x62>
 800ff2c:	89a3      	ldrh	r3, [r4, #12]
 800ff2e:	07db      	lsls	r3, r3, #31
 800ff30:	d519      	bpl.n	800ff66 <__swbuf_r+0x92>
 800ff32:	2e0a      	cmp	r6, #10
 800ff34:	d117      	bne.n	800ff66 <__swbuf_r+0x92>
 800ff36:	4621      	mov	r1, r4
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f000 ff0b 	bl	8010d54 <_fflush_r>
 800ff3e:	b190      	cbz	r0, 800ff66 <__swbuf_r+0x92>
 800ff40:	e00f      	b.n	800ff62 <__swbuf_r+0x8e>
 800ff42:	4b0b      	ldr	r3, [pc, #44]	; (800ff70 <__swbuf_r+0x9c>)
 800ff44:	429c      	cmp	r4, r3
 800ff46:	d101      	bne.n	800ff4c <__swbuf_r+0x78>
 800ff48:	68ac      	ldr	r4, [r5, #8]
 800ff4a:	e7d0      	b.n	800feee <__swbuf_r+0x1a>
 800ff4c:	4b09      	ldr	r3, [pc, #36]	; (800ff74 <__swbuf_r+0xa0>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	bf08      	it	eq
 800ff52:	68ec      	ldreq	r4, [r5, #12]
 800ff54:	e7cb      	b.n	800feee <__swbuf_r+0x1a>
 800ff56:	4621      	mov	r1, r4
 800ff58:	4628      	mov	r0, r5
 800ff5a:	f000 f81f 	bl	800ff9c <__swsetup_r>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d0cc      	beq.n	800fefc <__swbuf_r+0x28>
 800ff62:	f04f 37ff 	mov.w	r7, #4294967295
 800ff66:	4638      	mov	r0, r7
 800ff68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	08013060 	.word	0x08013060
 800ff70:	08013080 	.word	0x08013080
 800ff74:	08013040 	.word	0x08013040

0800ff78 <_write_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4c07      	ldr	r4, [pc, #28]	; (800ff98 <_write_r+0x20>)
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	4608      	mov	r0, r1
 800ff80:	4611      	mov	r1, r2
 800ff82:	2200      	movs	r2, #0
 800ff84:	6022      	str	r2, [r4, #0]
 800ff86:	461a      	mov	r2, r3
 800ff88:	f7fd fb98 	bl	800d6bc <_write>
 800ff8c:	1c43      	adds	r3, r0, #1
 800ff8e:	d102      	bne.n	800ff96 <_write_r+0x1e>
 800ff90:	6823      	ldr	r3, [r4, #0]
 800ff92:	b103      	cbz	r3, 800ff96 <_write_r+0x1e>
 800ff94:	602b      	str	r3, [r5, #0]
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	2000e484 	.word	0x2000e484

0800ff9c <__swsetup_r>:
 800ff9c:	4b32      	ldr	r3, [pc, #200]	; (8010068 <__swsetup_r+0xcc>)
 800ff9e:	b570      	push	{r4, r5, r6, lr}
 800ffa0:	681d      	ldr	r5, [r3, #0]
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	b125      	cbz	r5, 800ffb2 <__swsetup_r+0x16>
 800ffa8:	69ab      	ldr	r3, [r5, #24]
 800ffaa:	b913      	cbnz	r3, 800ffb2 <__swsetup_r+0x16>
 800ffac:	4628      	mov	r0, r5
 800ffae:	f000 ff3b 	bl	8010e28 <__sinit>
 800ffb2:	4b2e      	ldr	r3, [pc, #184]	; (801006c <__swsetup_r+0xd0>)
 800ffb4:	429c      	cmp	r4, r3
 800ffb6:	d10f      	bne.n	800ffd8 <__swsetup_r+0x3c>
 800ffb8:	686c      	ldr	r4, [r5, #4]
 800ffba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffbe:	b29a      	uxth	r2, r3
 800ffc0:	0715      	lsls	r5, r2, #28
 800ffc2:	d42c      	bmi.n	801001e <__swsetup_r+0x82>
 800ffc4:	06d0      	lsls	r0, r2, #27
 800ffc6:	d411      	bmi.n	800ffec <__swsetup_r+0x50>
 800ffc8:	2209      	movs	r2, #9
 800ffca:	6032      	str	r2, [r6, #0]
 800ffcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffd0:	81a3      	strh	r3, [r4, #12]
 800ffd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd6:	e03e      	b.n	8010056 <__swsetup_r+0xba>
 800ffd8:	4b25      	ldr	r3, [pc, #148]	; (8010070 <__swsetup_r+0xd4>)
 800ffda:	429c      	cmp	r4, r3
 800ffdc:	d101      	bne.n	800ffe2 <__swsetup_r+0x46>
 800ffde:	68ac      	ldr	r4, [r5, #8]
 800ffe0:	e7eb      	b.n	800ffba <__swsetup_r+0x1e>
 800ffe2:	4b24      	ldr	r3, [pc, #144]	; (8010074 <__swsetup_r+0xd8>)
 800ffe4:	429c      	cmp	r4, r3
 800ffe6:	bf08      	it	eq
 800ffe8:	68ec      	ldreq	r4, [r5, #12]
 800ffea:	e7e6      	b.n	800ffba <__swsetup_r+0x1e>
 800ffec:	0751      	lsls	r1, r2, #29
 800ffee:	d512      	bpl.n	8010016 <__swsetup_r+0x7a>
 800fff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fff2:	b141      	cbz	r1, 8010006 <__swsetup_r+0x6a>
 800fff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fff8:	4299      	cmp	r1, r3
 800fffa:	d002      	beq.n	8010002 <__swsetup_r+0x66>
 800fffc:	4630      	mov	r0, r6
 800fffe:	f7fe f8c7 	bl	800e190 <_free_r>
 8010002:	2300      	movs	r3, #0
 8010004:	6363      	str	r3, [r4, #52]	; 0x34
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801000c:	81a3      	strh	r3, [r4, #12]
 801000e:	2300      	movs	r3, #0
 8010010:	6063      	str	r3, [r4, #4]
 8010012:	6923      	ldr	r3, [r4, #16]
 8010014:	6023      	str	r3, [r4, #0]
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	f043 0308 	orr.w	r3, r3, #8
 801001c:	81a3      	strh	r3, [r4, #12]
 801001e:	6923      	ldr	r3, [r4, #16]
 8010020:	b94b      	cbnz	r3, 8010036 <__swsetup_r+0x9a>
 8010022:	89a3      	ldrh	r3, [r4, #12]
 8010024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801002c:	d003      	beq.n	8010036 <__swsetup_r+0x9a>
 801002e:	4621      	mov	r1, r4
 8010030:	4630      	mov	r0, r6
 8010032:	f001 fb01 	bl	8011638 <__smakebuf_r>
 8010036:	89a2      	ldrh	r2, [r4, #12]
 8010038:	f012 0301 	ands.w	r3, r2, #1
 801003c:	d00c      	beq.n	8010058 <__swsetup_r+0xbc>
 801003e:	2300      	movs	r3, #0
 8010040:	60a3      	str	r3, [r4, #8]
 8010042:	6963      	ldr	r3, [r4, #20]
 8010044:	425b      	negs	r3, r3
 8010046:	61a3      	str	r3, [r4, #24]
 8010048:	6923      	ldr	r3, [r4, #16]
 801004a:	b953      	cbnz	r3, 8010062 <__swsetup_r+0xc6>
 801004c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010050:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010054:	d1ba      	bne.n	800ffcc <__swsetup_r+0x30>
 8010056:	bd70      	pop	{r4, r5, r6, pc}
 8010058:	0792      	lsls	r2, r2, #30
 801005a:	bf58      	it	pl
 801005c:	6963      	ldrpl	r3, [r4, #20]
 801005e:	60a3      	str	r3, [r4, #8]
 8010060:	e7f2      	b.n	8010048 <__swsetup_r+0xac>
 8010062:	2000      	movs	r0, #0
 8010064:	e7f7      	b.n	8010056 <__swsetup_r+0xba>
 8010066:	bf00      	nop
 8010068:	20000344 	.word	0x20000344
 801006c:	08013060 	.word	0x08013060
 8010070:	08013080 	.word	0x08013080
 8010074:	08013040 	.word	0x08013040

08010078 <_close_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4c06      	ldr	r4, [pc, #24]	; (8010094 <_close_r+0x1c>)
 801007c:	2300      	movs	r3, #0
 801007e:	4605      	mov	r5, r0
 8010080:	4608      	mov	r0, r1
 8010082:	6023      	str	r3, [r4, #0]
 8010084:	f002 fe54 	bl	8012d30 <_close>
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	d102      	bne.n	8010092 <_close_r+0x1a>
 801008c:	6823      	ldr	r3, [r4, #0]
 801008e:	b103      	cbz	r3, 8010092 <_close_r+0x1a>
 8010090:	602b      	str	r3, [r5, #0]
 8010092:	bd38      	pop	{r3, r4, r5, pc}
 8010094:	2000e484 	.word	0x2000e484

08010098 <quorem>:
 8010098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009c:	6903      	ldr	r3, [r0, #16]
 801009e:	690c      	ldr	r4, [r1, #16]
 80100a0:	42a3      	cmp	r3, r4
 80100a2:	4680      	mov	r8, r0
 80100a4:	f2c0 8082 	blt.w	80101ac <quorem+0x114>
 80100a8:	3c01      	subs	r4, #1
 80100aa:	f101 0714 	add.w	r7, r1, #20
 80100ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80100b2:	f100 0614 	add.w	r6, r0, #20
 80100b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80100ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80100be:	eb06 030c 	add.w	r3, r6, ip
 80100c2:	3501      	adds	r5, #1
 80100c4:	eb07 090c 	add.w	r9, r7, ip
 80100c8:	9301      	str	r3, [sp, #4]
 80100ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80100ce:	b395      	cbz	r5, 8010136 <quorem+0x9e>
 80100d0:	f04f 0a00 	mov.w	sl, #0
 80100d4:	4638      	mov	r0, r7
 80100d6:	46b6      	mov	lr, r6
 80100d8:	46d3      	mov	fp, sl
 80100da:	f850 2b04 	ldr.w	r2, [r0], #4
 80100de:	b293      	uxth	r3, r2
 80100e0:	fb05 a303 	mla	r3, r5, r3, sl
 80100e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	ebab 0303 	sub.w	r3, fp, r3
 80100ee:	0c12      	lsrs	r2, r2, #16
 80100f0:	f8de b000 	ldr.w	fp, [lr]
 80100f4:	fb05 a202 	mla	r2, r5, r2, sl
 80100f8:	fa13 f38b 	uxtah	r3, r3, fp
 80100fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010100:	fa1f fb82 	uxth.w	fp, r2
 8010104:	f8de 2000 	ldr.w	r2, [lr]
 8010108:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801010c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010110:	b29b      	uxth	r3, r3
 8010112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010116:	4581      	cmp	r9, r0
 8010118:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801011c:	f84e 3b04 	str.w	r3, [lr], #4
 8010120:	d2db      	bcs.n	80100da <quorem+0x42>
 8010122:	f856 300c 	ldr.w	r3, [r6, ip]
 8010126:	b933      	cbnz	r3, 8010136 <quorem+0x9e>
 8010128:	9b01      	ldr	r3, [sp, #4]
 801012a:	3b04      	subs	r3, #4
 801012c:	429e      	cmp	r6, r3
 801012e:	461a      	mov	r2, r3
 8010130:	d330      	bcc.n	8010194 <quorem+0xfc>
 8010132:	f8c8 4010 	str.w	r4, [r8, #16]
 8010136:	4640      	mov	r0, r8
 8010138:	f001 fd26 	bl	8011b88 <__mcmp>
 801013c:	2800      	cmp	r0, #0
 801013e:	db25      	blt.n	801018c <quorem+0xf4>
 8010140:	3501      	adds	r5, #1
 8010142:	4630      	mov	r0, r6
 8010144:	f04f 0c00 	mov.w	ip, #0
 8010148:	f857 2b04 	ldr.w	r2, [r7], #4
 801014c:	f8d0 e000 	ldr.w	lr, [r0]
 8010150:	b293      	uxth	r3, r2
 8010152:	ebac 0303 	sub.w	r3, ip, r3
 8010156:	0c12      	lsrs	r2, r2, #16
 8010158:	fa13 f38e 	uxtah	r3, r3, lr
 801015c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010164:	b29b      	uxth	r3, r3
 8010166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801016a:	45b9      	cmp	r9, r7
 801016c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010170:	f840 3b04 	str.w	r3, [r0], #4
 8010174:	d2e8      	bcs.n	8010148 <quorem+0xb0>
 8010176:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801017a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801017e:	b92a      	cbnz	r2, 801018c <quorem+0xf4>
 8010180:	3b04      	subs	r3, #4
 8010182:	429e      	cmp	r6, r3
 8010184:	461a      	mov	r2, r3
 8010186:	d30b      	bcc.n	80101a0 <quorem+0x108>
 8010188:	f8c8 4010 	str.w	r4, [r8, #16]
 801018c:	4628      	mov	r0, r5
 801018e:	b003      	add	sp, #12
 8010190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010194:	6812      	ldr	r2, [r2, #0]
 8010196:	3b04      	subs	r3, #4
 8010198:	2a00      	cmp	r2, #0
 801019a:	d1ca      	bne.n	8010132 <quorem+0x9a>
 801019c:	3c01      	subs	r4, #1
 801019e:	e7c5      	b.n	801012c <quorem+0x94>
 80101a0:	6812      	ldr	r2, [r2, #0]
 80101a2:	3b04      	subs	r3, #4
 80101a4:	2a00      	cmp	r2, #0
 80101a6:	d1ef      	bne.n	8010188 <quorem+0xf0>
 80101a8:	3c01      	subs	r4, #1
 80101aa:	e7ea      	b.n	8010182 <quorem+0xea>
 80101ac:	2000      	movs	r0, #0
 80101ae:	e7ee      	b.n	801018e <quorem+0xf6>

080101b0 <_dtoa_r>:
 80101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b4:	ec57 6b10 	vmov	r6, r7, d0
 80101b8:	b095      	sub	sp, #84	; 0x54
 80101ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80101bc:	9108      	str	r1, [sp, #32]
 80101be:	4604      	mov	r4, r0
 80101c0:	920a      	str	r2, [sp, #40]	; 0x28
 80101c2:	9311      	str	r3, [sp, #68]	; 0x44
 80101c4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80101c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80101cc:	b93d      	cbnz	r5, 80101de <_dtoa_r+0x2e>
 80101ce:	2010      	movs	r0, #16
 80101d0:	f7fd ffb4 	bl	800e13c <malloc>
 80101d4:	6260      	str	r0, [r4, #36]	; 0x24
 80101d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101da:	6005      	str	r5, [r0, #0]
 80101dc:	60c5      	str	r5, [r0, #12]
 80101de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101e0:	6819      	ldr	r1, [r3, #0]
 80101e2:	b151      	cbz	r1, 80101fa <_dtoa_r+0x4a>
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	604a      	str	r2, [r1, #4]
 80101e8:	2301      	movs	r3, #1
 80101ea:	4093      	lsls	r3, r2
 80101ec:	608b      	str	r3, [r1, #8]
 80101ee:	4620      	mov	r0, r4
 80101f0:	f001 faaa 	bl	8011748 <_Bfree>
 80101f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101f6:	2200      	movs	r2, #0
 80101f8:	601a      	str	r2, [r3, #0]
 80101fa:	1e3b      	subs	r3, r7, #0
 80101fc:	bfb9      	ittee	lt
 80101fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010202:	9303      	strlt	r3, [sp, #12]
 8010204:	2300      	movge	r3, #0
 8010206:	f8c8 3000 	strge.w	r3, [r8]
 801020a:	9d03      	ldr	r5, [sp, #12]
 801020c:	4bac      	ldr	r3, [pc, #688]	; (80104c0 <_dtoa_r+0x310>)
 801020e:	bfbc      	itt	lt
 8010210:	2201      	movlt	r2, #1
 8010212:	f8c8 2000 	strlt.w	r2, [r8]
 8010216:	43ab      	bics	r3, r5
 8010218:	d11b      	bne.n	8010252 <_dtoa_r+0xa2>
 801021a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801021c:	f242 730f 	movw	r3, #9999	; 0x270f
 8010220:	6013      	str	r3, [r2, #0]
 8010222:	9b02      	ldr	r3, [sp, #8]
 8010224:	b923      	cbnz	r3, 8010230 <_dtoa_r+0x80>
 8010226:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801022a:	2d00      	cmp	r5, #0
 801022c:	f000 84dd 	beq.w	8010bea <_dtoa_r+0xa3a>
 8010230:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010232:	b953      	cbnz	r3, 801024a <_dtoa_r+0x9a>
 8010234:	4ba3      	ldr	r3, [pc, #652]	; (80104c4 <_dtoa_r+0x314>)
 8010236:	e020      	b.n	801027a <_dtoa_r+0xca>
 8010238:	4ba3      	ldr	r3, [pc, #652]	; (80104c8 <_dtoa_r+0x318>)
 801023a:	9304      	str	r3, [sp, #16]
 801023c:	3308      	adds	r3, #8
 801023e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010240:	6013      	str	r3, [r2, #0]
 8010242:	9804      	ldr	r0, [sp, #16]
 8010244:	b015      	add	sp, #84	; 0x54
 8010246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024a:	4b9e      	ldr	r3, [pc, #632]	; (80104c4 <_dtoa_r+0x314>)
 801024c:	9304      	str	r3, [sp, #16]
 801024e:	3303      	adds	r3, #3
 8010250:	e7f5      	b.n	801023e <_dtoa_r+0x8e>
 8010252:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010256:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010262:	d10c      	bne.n	801027e <_dtoa_r+0xce>
 8010264:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010266:	2301      	movs	r3, #1
 8010268:	6013      	str	r3, [r2, #0]
 801026a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801026c:	2b00      	cmp	r3, #0
 801026e:	f000 84b9 	beq.w	8010be4 <_dtoa_r+0xa34>
 8010272:	4b96      	ldr	r3, [pc, #600]	; (80104cc <_dtoa_r+0x31c>)
 8010274:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010276:	6013      	str	r3, [r2, #0]
 8010278:	3b01      	subs	r3, #1
 801027a:	9304      	str	r3, [sp, #16]
 801027c:	e7e1      	b.n	8010242 <_dtoa_r+0x92>
 801027e:	a913      	add	r1, sp, #76	; 0x4c
 8010280:	aa12      	add	r2, sp, #72	; 0x48
 8010282:	ed9d 0b04 	vldr	d0, [sp, #16]
 8010286:	4620      	mov	r0, r4
 8010288:	f001 fd6c 	bl	8011d64 <__d2b>
 801028c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8010290:	9001      	str	r0, [sp, #4]
 8010292:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010294:	2e00      	cmp	r6, #0
 8010296:	d046      	beq.n	8010326 <_dtoa_r+0x176>
 8010298:	9805      	ldr	r0, [sp, #20]
 801029a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801029e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102a2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80102a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80102aa:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80102ae:	2700      	movs	r7, #0
 80102b0:	ee07 aa90 	vmov	s15, sl
 80102b4:	ec43 2b16 	vmov	d6, r2, r3
 80102b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80102bc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80104a8 <_dtoa_r+0x2f8>
 80102c0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80102c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80102c8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80104b0 <_dtoa_r+0x300>
 80102cc:	eea7 6b04 	vfma.f64	d6, d7, d4
 80102d0:	eeb0 7b46 	vmov.f64	d7, d6
 80102d4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80104b8 <_dtoa_r+0x308>
 80102d8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80102dc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80102e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80102e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e8:	ee16 ba90 	vmov	fp, s13
 80102ec:	d508      	bpl.n	8010300 <_dtoa_r+0x150>
 80102ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80102f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80102f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102fa:	bf18      	it	ne
 80102fc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010300:	f1bb 0f16 	cmp.w	fp, #22
 8010304:	d834      	bhi.n	8010370 <_dtoa_r+0x1c0>
 8010306:	4b72      	ldr	r3, [pc, #456]	; (80104d0 <_dtoa_r+0x320>)
 8010308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801030c:	ed93 7b00 	vldr	d7, [r3]
 8010310:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010314:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031c:	dd01      	ble.n	8010322 <_dtoa_r+0x172>
 801031e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010322:	2300      	movs	r3, #0
 8010324:	e025      	b.n	8010372 <_dtoa_r+0x1c2>
 8010326:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010328:	eb01 0a03 	add.w	sl, r1, r3
 801032c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8010330:	2b20      	cmp	r3, #32
 8010332:	dd17      	ble.n	8010364 <_dtoa_r+0x1b4>
 8010334:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8010338:	9a02      	ldr	r2, [sp, #8]
 801033a:	409d      	lsls	r5, r3
 801033c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8010340:	fa22 f303 	lsr.w	r3, r2, r3
 8010344:	432b      	orrs	r3, r5
 8010346:	ee07 3a90 	vmov	s15, r3
 801034a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801034e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010352:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010356:	9805      	ldr	r0, [sp, #20]
 8010358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801035c:	2701      	movs	r7, #1
 801035e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8010362:	e7a5      	b.n	80102b0 <_dtoa_r+0x100>
 8010364:	9a02      	ldr	r2, [sp, #8]
 8010366:	f1c3 0320 	rsb	r3, r3, #32
 801036a:	fa02 f303 	lsl.w	r3, r2, r3
 801036e:	e7ea      	b.n	8010346 <_dtoa_r+0x196>
 8010370:	2301      	movs	r3, #1
 8010372:	eba1 0a0a 	sub.w	sl, r1, sl
 8010376:	9310      	str	r3, [sp, #64]	; 0x40
 8010378:	f1ba 0301 	subs.w	r3, sl, #1
 801037c:	9307      	str	r3, [sp, #28]
 801037e:	bf43      	ittte	mi
 8010380:	2300      	movmi	r3, #0
 8010382:	f1ca 0a01 	rsbmi	sl, sl, #1
 8010386:	9307      	strmi	r3, [sp, #28]
 8010388:	f04f 0a00 	movpl.w	sl, #0
 801038c:	f1bb 0f00 	cmp.w	fp, #0
 8010390:	db19      	blt.n	80103c6 <_dtoa_r+0x216>
 8010392:	9b07      	ldr	r3, [sp, #28]
 8010394:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010398:	445b      	add	r3, fp
 801039a:	9307      	str	r3, [sp, #28]
 801039c:	f04f 0800 	mov.w	r8, #0
 80103a0:	9b08      	ldr	r3, [sp, #32]
 80103a2:	2b09      	cmp	r3, #9
 80103a4:	d866      	bhi.n	8010474 <_dtoa_r+0x2c4>
 80103a6:	2b05      	cmp	r3, #5
 80103a8:	bfc4      	itt	gt
 80103aa:	3b04      	subgt	r3, #4
 80103ac:	9308      	strgt	r3, [sp, #32]
 80103ae:	9b08      	ldr	r3, [sp, #32]
 80103b0:	f1a3 0302 	sub.w	r3, r3, #2
 80103b4:	bfcc      	ite	gt
 80103b6:	2500      	movgt	r5, #0
 80103b8:	2501      	movle	r5, #1
 80103ba:	2b03      	cmp	r3, #3
 80103bc:	d866      	bhi.n	801048c <_dtoa_r+0x2dc>
 80103be:	e8df f003 	tbb	[pc, r3]
 80103c2:	5755      	.short	0x5755
 80103c4:	4909      	.short	0x4909
 80103c6:	2300      	movs	r3, #0
 80103c8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80103cc:	f1cb 0800 	rsb	r8, fp, #0
 80103d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80103d2:	e7e5      	b.n	80103a0 <_dtoa_r+0x1f0>
 80103d4:	2301      	movs	r3, #1
 80103d6:	9309      	str	r3, [sp, #36]	; 0x24
 80103d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103da:	2b00      	cmp	r3, #0
 80103dc:	dd59      	ble.n	8010492 <_dtoa_r+0x2e2>
 80103de:	9306      	str	r3, [sp, #24]
 80103e0:	4699      	mov	r9, r3
 80103e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80103e4:	2200      	movs	r2, #0
 80103e6:	6072      	str	r2, [r6, #4]
 80103e8:	2204      	movs	r2, #4
 80103ea:	f102 0014 	add.w	r0, r2, #20
 80103ee:	4298      	cmp	r0, r3
 80103f0:	6871      	ldr	r1, [r6, #4]
 80103f2:	d953      	bls.n	801049c <_dtoa_r+0x2ec>
 80103f4:	4620      	mov	r0, r4
 80103f6:	f001 f973 	bl	80116e0 <_Balloc>
 80103fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103fc:	6030      	str	r0, [r6, #0]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	9304      	str	r3, [sp, #16]
 8010402:	f1b9 0f0e 	cmp.w	r9, #14
 8010406:	f200 80c2 	bhi.w	801058e <_dtoa_r+0x3de>
 801040a:	2d00      	cmp	r5, #0
 801040c:	f000 80bf 	beq.w	801058e <_dtoa_r+0x3de>
 8010410:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010414:	f1bb 0f00 	cmp.w	fp, #0
 8010418:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801041c:	f340 80e6 	ble.w	80105ec <_dtoa_r+0x43c>
 8010420:	4a2b      	ldr	r2, [pc, #172]	; (80104d0 <_dtoa_r+0x320>)
 8010422:	f00b 030f 	and.w	r3, fp, #15
 8010426:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801042a:	ed93 7b00 	vldr	d7, [r3]
 801042e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8010432:	06da      	lsls	r2, r3, #27
 8010434:	f140 80d8 	bpl.w	80105e8 <_dtoa_r+0x438>
 8010438:	4a26      	ldr	r2, [pc, #152]	; (80104d4 <_dtoa_r+0x324>)
 801043a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801043e:	ed92 6b08 	vldr	d6, [r2, #32]
 8010442:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010446:	ed8d 6b02 	vstr	d6, [sp, #8]
 801044a:	f003 030f 	and.w	r3, r3, #15
 801044e:	2203      	movs	r2, #3
 8010450:	4920      	ldr	r1, [pc, #128]	; (80104d4 <_dtoa_r+0x324>)
 8010452:	e04a      	b.n	80104ea <_dtoa_r+0x33a>
 8010454:	2301      	movs	r3, #1
 8010456:	9309      	str	r3, [sp, #36]	; 0x24
 8010458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801045a:	445b      	add	r3, fp
 801045c:	f103 0901 	add.w	r9, r3, #1
 8010460:	9306      	str	r3, [sp, #24]
 8010462:	464b      	mov	r3, r9
 8010464:	2b01      	cmp	r3, #1
 8010466:	bfb8      	it	lt
 8010468:	2301      	movlt	r3, #1
 801046a:	e7ba      	b.n	80103e2 <_dtoa_r+0x232>
 801046c:	2300      	movs	r3, #0
 801046e:	e7b2      	b.n	80103d6 <_dtoa_r+0x226>
 8010470:	2300      	movs	r3, #0
 8010472:	e7f0      	b.n	8010456 <_dtoa_r+0x2a6>
 8010474:	2501      	movs	r5, #1
 8010476:	2300      	movs	r3, #0
 8010478:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	9306      	str	r3, [sp, #24]
 8010482:	4699      	mov	r9, r3
 8010484:	2200      	movs	r2, #0
 8010486:	2312      	movs	r3, #18
 8010488:	920a      	str	r2, [sp, #40]	; 0x28
 801048a:	e7aa      	b.n	80103e2 <_dtoa_r+0x232>
 801048c:	2301      	movs	r3, #1
 801048e:	9309      	str	r3, [sp, #36]	; 0x24
 8010490:	e7f4      	b.n	801047c <_dtoa_r+0x2cc>
 8010492:	2301      	movs	r3, #1
 8010494:	9306      	str	r3, [sp, #24]
 8010496:	4699      	mov	r9, r3
 8010498:	461a      	mov	r2, r3
 801049a:	e7f5      	b.n	8010488 <_dtoa_r+0x2d8>
 801049c:	3101      	adds	r1, #1
 801049e:	6071      	str	r1, [r6, #4]
 80104a0:	0052      	lsls	r2, r2, #1
 80104a2:	e7a2      	b.n	80103ea <_dtoa_r+0x23a>
 80104a4:	f3af 8000 	nop.w
 80104a8:	636f4361 	.word	0x636f4361
 80104ac:	3fd287a7 	.word	0x3fd287a7
 80104b0:	8b60c8b3 	.word	0x8b60c8b3
 80104b4:	3fc68a28 	.word	0x3fc68a28
 80104b8:	509f79fb 	.word	0x509f79fb
 80104bc:	3fd34413 	.word	0x3fd34413
 80104c0:	7ff00000 	.word	0x7ff00000
 80104c4:	08013039 	.word	0x08013039
 80104c8:	08013030 	.word	0x08013030
 80104cc:	080131d4 	.word	0x080131d4
 80104d0:	080130d8 	.word	0x080130d8
 80104d4:	080130b0 	.word	0x080130b0
 80104d8:	07de      	lsls	r6, r3, #31
 80104da:	d504      	bpl.n	80104e6 <_dtoa_r+0x336>
 80104dc:	ed91 6b00 	vldr	d6, [r1]
 80104e0:	3201      	adds	r2, #1
 80104e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104e6:	105b      	asrs	r3, r3, #1
 80104e8:	3108      	adds	r1, #8
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d1f4      	bne.n	80104d8 <_dtoa_r+0x328>
 80104ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80104f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80104f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f000 80a7 	beq.w	8010650 <_dtoa_r+0x4a0>
 8010502:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010506:	ed9d 7b02 	vldr	d7, [sp, #8]
 801050a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801050e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010512:	f140 809d 	bpl.w	8010650 <_dtoa_r+0x4a0>
 8010516:	f1b9 0f00 	cmp.w	r9, #0
 801051a:	f000 8099 	beq.w	8010650 <_dtoa_r+0x4a0>
 801051e:	9b06      	ldr	r3, [sp, #24]
 8010520:	2b00      	cmp	r3, #0
 8010522:	dd30      	ble.n	8010586 <_dtoa_r+0x3d6>
 8010524:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010528:	ee27 7b06 	vmul.f64	d7, d7, d6
 801052c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010530:	9d06      	ldr	r5, [sp, #24]
 8010532:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010536:	3201      	adds	r2, #1
 8010538:	ed9d 6b02 	vldr	d6, [sp, #8]
 801053c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010540:	ee07 2a90 	vmov	s15, r2
 8010544:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010548:	eea7 5b06 	vfma.f64	d5, d7, d6
 801054c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010550:	9a03      	ldr	r2, [sp, #12]
 8010552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010556:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801055a:	2d00      	cmp	r5, #0
 801055c:	d17b      	bne.n	8010656 <_dtoa_r+0x4a6>
 801055e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010562:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010566:	ec41 0b17 	vmov	d7, r0, r1
 801056a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010572:	f300 8253 	bgt.w	8010a1c <_dtoa_r+0x86c>
 8010576:	eeb1 7b47 	vneg.f64	d7, d7
 801057a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010582:	f100 8249 	bmi.w	8010a18 <_dtoa_r+0x868>
 8010586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801058a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801058e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010590:	2b00      	cmp	r3, #0
 8010592:	f2c0 8119 	blt.w	80107c8 <_dtoa_r+0x618>
 8010596:	f1bb 0f0e 	cmp.w	fp, #14
 801059a:	f300 8115 	bgt.w	80107c8 <_dtoa_r+0x618>
 801059e:	4bc3      	ldr	r3, [pc, #780]	; (80108ac <_dtoa_r+0x6fc>)
 80105a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80105a4:	ed93 6b00 	vldr	d6, [r3]
 80105a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	f280 80ba 	bge.w	8010724 <_dtoa_r+0x574>
 80105b0:	f1b9 0f00 	cmp.w	r9, #0
 80105b4:	f300 80b6 	bgt.w	8010724 <_dtoa_r+0x574>
 80105b8:	f040 822d 	bne.w	8010a16 <_dtoa_r+0x866>
 80105bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80105c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80105c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105d0:	464d      	mov	r5, r9
 80105d2:	464f      	mov	r7, r9
 80105d4:	f280 8204 	bge.w	80109e0 <_dtoa_r+0x830>
 80105d8:	9b04      	ldr	r3, [sp, #16]
 80105da:	9a04      	ldr	r2, [sp, #16]
 80105dc:	1c5e      	adds	r6, r3, #1
 80105de:	2331      	movs	r3, #49	; 0x31
 80105e0:	7013      	strb	r3, [r2, #0]
 80105e2:	f10b 0b01 	add.w	fp, fp, #1
 80105e6:	e1ff      	b.n	80109e8 <_dtoa_r+0x838>
 80105e8:	2202      	movs	r2, #2
 80105ea:	e731      	b.n	8010450 <_dtoa_r+0x2a0>
 80105ec:	d02e      	beq.n	801064c <_dtoa_r+0x49c>
 80105ee:	f1cb 0300 	rsb	r3, fp, #0
 80105f2:	4aae      	ldr	r2, [pc, #696]	; (80108ac <_dtoa_r+0x6fc>)
 80105f4:	f003 010f 	and.w	r1, r3, #15
 80105f8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80105fc:	ed92 7b00 	vldr	d7, [r2]
 8010600:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8010604:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010608:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801060c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8010610:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010614:	49a6      	ldr	r1, [pc, #664]	; (80108b0 <_dtoa_r+0x700>)
 8010616:	111b      	asrs	r3, r3, #4
 8010618:	2000      	movs	r0, #0
 801061a:	2202      	movs	r2, #2
 801061c:	b93b      	cbnz	r3, 801062e <_dtoa_r+0x47e>
 801061e:	2800      	cmp	r0, #0
 8010620:	f43f af6b 	beq.w	80104fa <_dtoa_r+0x34a>
 8010624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801062c:	e765      	b.n	80104fa <_dtoa_r+0x34a>
 801062e:	07dd      	lsls	r5, r3, #31
 8010630:	d509      	bpl.n	8010646 <_dtoa_r+0x496>
 8010632:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010636:	ed91 7b00 	vldr	d7, [r1]
 801063a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801063e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010642:	3201      	adds	r2, #1
 8010644:	2001      	movs	r0, #1
 8010646:	105b      	asrs	r3, r3, #1
 8010648:	3108      	adds	r1, #8
 801064a:	e7e7      	b.n	801061c <_dtoa_r+0x46c>
 801064c:	2202      	movs	r2, #2
 801064e:	e754      	b.n	80104fa <_dtoa_r+0x34a>
 8010650:	465b      	mov	r3, fp
 8010652:	464d      	mov	r5, r9
 8010654:	e770      	b.n	8010538 <_dtoa_r+0x388>
 8010656:	4a95      	ldr	r2, [pc, #596]	; (80108ac <_dtoa_r+0x6fc>)
 8010658:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801065c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010662:	ec41 0b17 	vmov	d7, r0, r1
 8010666:	b35a      	cbz	r2, 80106c0 <_dtoa_r+0x510>
 8010668:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801066c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010670:	9e04      	ldr	r6, [sp, #16]
 8010672:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010676:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801067a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801067e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010682:	ee14 2a90 	vmov	r2, s9
 8010686:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801068a:	3230      	adds	r2, #48	; 0x30
 801068c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010690:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010698:	f806 2b01 	strb.w	r2, [r6], #1
 801069c:	d43b      	bmi.n	8010716 <_dtoa_r+0x566>
 801069e:	ee32 5b46 	vsub.f64	d5, d2, d6
 80106a2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80106a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106aa:	d472      	bmi.n	8010792 <_dtoa_r+0x5e2>
 80106ac:	9a04      	ldr	r2, [sp, #16]
 80106ae:	1ab2      	subs	r2, r6, r2
 80106b0:	4295      	cmp	r5, r2
 80106b2:	f77f af68 	ble.w	8010586 <_dtoa_r+0x3d6>
 80106b6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80106ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80106be:	e7de      	b.n	801067e <_dtoa_r+0x4ce>
 80106c0:	9a04      	ldr	r2, [sp, #16]
 80106c2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80106c6:	1956      	adds	r6, r2, r5
 80106c8:	4611      	mov	r1, r2
 80106ca:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80106ce:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80106d2:	ee14 2a90 	vmov	r2, s9
 80106d6:	3230      	adds	r2, #48	; 0x30
 80106d8:	f801 2b01 	strb.w	r2, [r1], #1
 80106dc:	42b1      	cmp	r1, r6
 80106de:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80106e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80106e6:	d11a      	bne.n	801071e <_dtoa_r+0x56e>
 80106e8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80106ec:	ee37 4b05 	vadd.f64	d4, d7, d5
 80106f0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80106f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f8:	dc4b      	bgt.n	8010792 <_dtoa_r+0x5e2>
 80106fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80106fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010706:	f57f af3e 	bpl.w	8010586 <_dtoa_r+0x3d6>
 801070a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801070e:	2a30      	cmp	r2, #48	; 0x30
 8010710:	f106 31ff 	add.w	r1, r6, #4294967295
 8010714:	d001      	beq.n	801071a <_dtoa_r+0x56a>
 8010716:	469b      	mov	fp, r3
 8010718:	e02a      	b.n	8010770 <_dtoa_r+0x5c0>
 801071a:	460e      	mov	r6, r1
 801071c:	e7f5      	b.n	801070a <_dtoa_r+0x55a>
 801071e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010722:	e7d4      	b.n	80106ce <_dtoa_r+0x51e>
 8010724:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010728:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801072c:	9e04      	ldr	r6, [sp, #16]
 801072e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010732:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010736:	ee15 3a10 	vmov	r3, s10
 801073a:	3330      	adds	r3, #48	; 0x30
 801073c:	f806 3b01 	strb.w	r3, [r6], #1
 8010740:	9b04      	ldr	r3, [sp, #16]
 8010742:	1af3      	subs	r3, r6, r3
 8010744:	4599      	cmp	r9, r3
 8010746:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801074a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801074e:	d133      	bne.n	80107b8 <_dtoa_r+0x608>
 8010750:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010754:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801075c:	dc18      	bgt.n	8010790 <_dtoa_r+0x5e0>
 801075e:	eeb4 7b46 	vcmp.f64	d7, d6
 8010762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010766:	d103      	bne.n	8010770 <_dtoa_r+0x5c0>
 8010768:	ee15 3a10 	vmov	r3, s10
 801076c:	07db      	lsls	r3, r3, #31
 801076e:	d40f      	bmi.n	8010790 <_dtoa_r+0x5e0>
 8010770:	9901      	ldr	r1, [sp, #4]
 8010772:	4620      	mov	r0, r4
 8010774:	f000 ffe8 	bl	8011748 <_Bfree>
 8010778:	2300      	movs	r3, #0
 801077a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801077c:	7033      	strb	r3, [r6, #0]
 801077e:	f10b 0301 	add.w	r3, fp, #1
 8010782:	6013      	str	r3, [r2, #0]
 8010784:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010786:	2b00      	cmp	r3, #0
 8010788:	f43f ad5b 	beq.w	8010242 <_dtoa_r+0x92>
 801078c:	601e      	str	r6, [r3, #0]
 801078e:	e558      	b.n	8010242 <_dtoa_r+0x92>
 8010790:	465b      	mov	r3, fp
 8010792:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010796:	2939      	cmp	r1, #57	; 0x39
 8010798:	f106 32ff 	add.w	r2, r6, #4294967295
 801079c:	d106      	bne.n	80107ac <_dtoa_r+0x5fc>
 801079e:	9904      	ldr	r1, [sp, #16]
 80107a0:	4291      	cmp	r1, r2
 80107a2:	d107      	bne.n	80107b4 <_dtoa_r+0x604>
 80107a4:	2230      	movs	r2, #48	; 0x30
 80107a6:	700a      	strb	r2, [r1, #0]
 80107a8:	3301      	adds	r3, #1
 80107aa:	460a      	mov	r2, r1
 80107ac:	7811      	ldrb	r1, [r2, #0]
 80107ae:	3101      	adds	r1, #1
 80107b0:	7011      	strb	r1, [r2, #0]
 80107b2:	e7b0      	b.n	8010716 <_dtoa_r+0x566>
 80107b4:	4616      	mov	r6, r2
 80107b6:	e7ec      	b.n	8010792 <_dtoa_r+0x5e2>
 80107b8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80107bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c4:	d1b3      	bne.n	801072e <_dtoa_r+0x57e>
 80107c6:	e7d3      	b.n	8010770 <_dtoa_r+0x5c0>
 80107c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107ca:	2a00      	cmp	r2, #0
 80107cc:	f000 808d 	beq.w	80108ea <_dtoa_r+0x73a>
 80107d0:	9a08      	ldr	r2, [sp, #32]
 80107d2:	2a01      	cmp	r2, #1
 80107d4:	dc72      	bgt.n	80108bc <_dtoa_r+0x70c>
 80107d6:	2f00      	cmp	r7, #0
 80107d8:	d06c      	beq.n	80108b4 <_dtoa_r+0x704>
 80107da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80107de:	4645      	mov	r5, r8
 80107e0:	4656      	mov	r6, sl
 80107e2:	9a07      	ldr	r2, [sp, #28]
 80107e4:	2101      	movs	r1, #1
 80107e6:	441a      	add	r2, r3
 80107e8:	4620      	mov	r0, r4
 80107ea:	449a      	add	sl, r3
 80107ec:	9207      	str	r2, [sp, #28]
 80107ee:	f001 f889 	bl	8011904 <__i2b>
 80107f2:	4607      	mov	r7, r0
 80107f4:	2e00      	cmp	r6, #0
 80107f6:	dd0b      	ble.n	8010810 <_dtoa_r+0x660>
 80107f8:	9b07      	ldr	r3, [sp, #28]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	dd08      	ble.n	8010810 <_dtoa_r+0x660>
 80107fe:	42b3      	cmp	r3, r6
 8010800:	9a07      	ldr	r2, [sp, #28]
 8010802:	bfa8      	it	ge
 8010804:	4633      	movge	r3, r6
 8010806:	ebaa 0a03 	sub.w	sl, sl, r3
 801080a:	1af6      	subs	r6, r6, r3
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	9307      	str	r3, [sp, #28]
 8010810:	f1b8 0f00 	cmp.w	r8, #0
 8010814:	d01d      	beq.n	8010852 <_dtoa_r+0x6a2>
 8010816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010818:	2b00      	cmp	r3, #0
 801081a:	d06a      	beq.n	80108f2 <_dtoa_r+0x742>
 801081c:	b18d      	cbz	r5, 8010842 <_dtoa_r+0x692>
 801081e:	4639      	mov	r1, r7
 8010820:	462a      	mov	r2, r5
 8010822:	4620      	mov	r0, r4
 8010824:	f001 f90e 	bl	8011a44 <__pow5mult>
 8010828:	9a01      	ldr	r2, [sp, #4]
 801082a:	4601      	mov	r1, r0
 801082c:	4607      	mov	r7, r0
 801082e:	4620      	mov	r0, r4
 8010830:	f001 f871 	bl	8011916 <__multiply>
 8010834:	9901      	ldr	r1, [sp, #4]
 8010836:	900c      	str	r0, [sp, #48]	; 0x30
 8010838:	4620      	mov	r0, r4
 801083a:	f000 ff85 	bl	8011748 <_Bfree>
 801083e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010840:	9301      	str	r3, [sp, #4]
 8010842:	ebb8 0205 	subs.w	r2, r8, r5
 8010846:	d004      	beq.n	8010852 <_dtoa_r+0x6a2>
 8010848:	9901      	ldr	r1, [sp, #4]
 801084a:	4620      	mov	r0, r4
 801084c:	f001 f8fa 	bl	8011a44 <__pow5mult>
 8010850:	9001      	str	r0, [sp, #4]
 8010852:	2101      	movs	r1, #1
 8010854:	4620      	mov	r0, r4
 8010856:	f001 f855 	bl	8011904 <__i2b>
 801085a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801085c:	4605      	mov	r5, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	f000 81ca 	beq.w	8010bf8 <_dtoa_r+0xa48>
 8010864:	461a      	mov	r2, r3
 8010866:	4601      	mov	r1, r0
 8010868:	4620      	mov	r0, r4
 801086a:	f001 f8eb 	bl	8011a44 <__pow5mult>
 801086e:	9b08      	ldr	r3, [sp, #32]
 8010870:	2b01      	cmp	r3, #1
 8010872:	4605      	mov	r5, r0
 8010874:	dc44      	bgt.n	8010900 <_dtoa_r+0x750>
 8010876:	9b02      	ldr	r3, [sp, #8]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d13c      	bne.n	80108f6 <_dtoa_r+0x746>
 801087c:	9b03      	ldr	r3, [sp, #12]
 801087e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010882:	2b00      	cmp	r3, #0
 8010884:	d137      	bne.n	80108f6 <_dtoa_r+0x746>
 8010886:	9b03      	ldr	r3, [sp, #12]
 8010888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801088c:	0d1b      	lsrs	r3, r3, #20
 801088e:	051b      	lsls	r3, r3, #20
 8010890:	2b00      	cmp	r3, #0
 8010892:	d033      	beq.n	80108fc <_dtoa_r+0x74c>
 8010894:	9b07      	ldr	r3, [sp, #28]
 8010896:	3301      	adds	r3, #1
 8010898:	f10a 0a01 	add.w	sl, sl, #1
 801089c:	9307      	str	r3, [sp, #28]
 801089e:	f04f 0801 	mov.w	r8, #1
 80108a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108a4:	bb73      	cbnz	r3, 8010904 <_dtoa_r+0x754>
 80108a6:	2001      	movs	r0, #1
 80108a8:	e034      	b.n	8010914 <_dtoa_r+0x764>
 80108aa:	bf00      	nop
 80108ac:	080130d8 	.word	0x080130d8
 80108b0:	080130b0 	.word	0x080130b0
 80108b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80108ba:	e790      	b.n	80107de <_dtoa_r+0x62e>
 80108bc:	f109 35ff 	add.w	r5, r9, #4294967295
 80108c0:	45a8      	cmp	r8, r5
 80108c2:	bfbf      	itttt	lt
 80108c4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80108c6:	eba5 0808 	sublt.w	r8, r5, r8
 80108ca:	4443      	addlt	r3, r8
 80108cc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80108ce:	bfb6      	itet	lt
 80108d0:	46a8      	movlt	r8, r5
 80108d2:	eba8 0505 	subge.w	r5, r8, r5
 80108d6:	2500      	movlt	r5, #0
 80108d8:	f1b9 0f00 	cmp.w	r9, #0
 80108dc:	bfb9      	ittee	lt
 80108de:	ebaa 0609 	sublt.w	r6, sl, r9
 80108e2:	2300      	movlt	r3, #0
 80108e4:	4656      	movge	r6, sl
 80108e6:	464b      	movge	r3, r9
 80108e8:	e77b      	b.n	80107e2 <_dtoa_r+0x632>
 80108ea:	4645      	mov	r5, r8
 80108ec:	4656      	mov	r6, sl
 80108ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80108f0:	e780      	b.n	80107f4 <_dtoa_r+0x644>
 80108f2:	4642      	mov	r2, r8
 80108f4:	e7a8      	b.n	8010848 <_dtoa_r+0x698>
 80108f6:	f04f 0800 	mov.w	r8, #0
 80108fa:	e7d2      	b.n	80108a2 <_dtoa_r+0x6f2>
 80108fc:	4698      	mov	r8, r3
 80108fe:	e7d0      	b.n	80108a2 <_dtoa_r+0x6f2>
 8010900:	f04f 0800 	mov.w	r8, #0
 8010904:	692b      	ldr	r3, [r5, #16]
 8010906:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801090a:	6918      	ldr	r0, [r3, #16]
 801090c:	f000 ffac 	bl	8011868 <__hi0bits>
 8010910:	f1c0 0020 	rsb	r0, r0, #32
 8010914:	9b07      	ldr	r3, [sp, #28]
 8010916:	4418      	add	r0, r3
 8010918:	f010 001f 	ands.w	r0, r0, #31
 801091c:	d047      	beq.n	80109ae <_dtoa_r+0x7fe>
 801091e:	f1c0 0320 	rsb	r3, r0, #32
 8010922:	2b04      	cmp	r3, #4
 8010924:	dd3b      	ble.n	801099e <_dtoa_r+0x7ee>
 8010926:	9b07      	ldr	r3, [sp, #28]
 8010928:	f1c0 001c 	rsb	r0, r0, #28
 801092c:	4482      	add	sl, r0
 801092e:	4406      	add	r6, r0
 8010930:	4403      	add	r3, r0
 8010932:	9307      	str	r3, [sp, #28]
 8010934:	f1ba 0f00 	cmp.w	sl, #0
 8010938:	dd05      	ble.n	8010946 <_dtoa_r+0x796>
 801093a:	4652      	mov	r2, sl
 801093c:	9901      	ldr	r1, [sp, #4]
 801093e:	4620      	mov	r0, r4
 8010940:	f001 f8ce 	bl	8011ae0 <__lshift>
 8010944:	9001      	str	r0, [sp, #4]
 8010946:	9b07      	ldr	r3, [sp, #28]
 8010948:	2b00      	cmp	r3, #0
 801094a:	dd05      	ble.n	8010958 <_dtoa_r+0x7a8>
 801094c:	4629      	mov	r1, r5
 801094e:	461a      	mov	r2, r3
 8010950:	4620      	mov	r0, r4
 8010952:	f001 f8c5 	bl	8011ae0 <__lshift>
 8010956:	4605      	mov	r5, r0
 8010958:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801095a:	b353      	cbz	r3, 80109b2 <_dtoa_r+0x802>
 801095c:	4629      	mov	r1, r5
 801095e:	9801      	ldr	r0, [sp, #4]
 8010960:	f001 f912 	bl	8011b88 <__mcmp>
 8010964:	2800      	cmp	r0, #0
 8010966:	da24      	bge.n	80109b2 <_dtoa_r+0x802>
 8010968:	2300      	movs	r3, #0
 801096a:	220a      	movs	r2, #10
 801096c:	9901      	ldr	r1, [sp, #4]
 801096e:	4620      	mov	r0, r4
 8010970:	f000 ff01 	bl	8011776 <__multadd>
 8010974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010976:	9001      	str	r0, [sp, #4]
 8010978:	f10b 3bff 	add.w	fp, fp, #4294967295
 801097c:	2b00      	cmp	r3, #0
 801097e:	f000 8142 	beq.w	8010c06 <_dtoa_r+0xa56>
 8010982:	2300      	movs	r3, #0
 8010984:	4639      	mov	r1, r7
 8010986:	220a      	movs	r2, #10
 8010988:	4620      	mov	r0, r4
 801098a:	f000 fef4 	bl	8011776 <__multadd>
 801098e:	9b06      	ldr	r3, [sp, #24]
 8010990:	2b00      	cmp	r3, #0
 8010992:	4607      	mov	r7, r0
 8010994:	dc4b      	bgt.n	8010a2e <_dtoa_r+0x87e>
 8010996:	9b08      	ldr	r3, [sp, #32]
 8010998:	2b02      	cmp	r3, #2
 801099a:	dd48      	ble.n	8010a2e <_dtoa_r+0x87e>
 801099c:	e011      	b.n	80109c2 <_dtoa_r+0x812>
 801099e:	d0c9      	beq.n	8010934 <_dtoa_r+0x784>
 80109a0:	9a07      	ldr	r2, [sp, #28]
 80109a2:	331c      	adds	r3, #28
 80109a4:	441a      	add	r2, r3
 80109a6:	449a      	add	sl, r3
 80109a8:	441e      	add	r6, r3
 80109aa:	4613      	mov	r3, r2
 80109ac:	e7c1      	b.n	8010932 <_dtoa_r+0x782>
 80109ae:	4603      	mov	r3, r0
 80109b0:	e7f6      	b.n	80109a0 <_dtoa_r+0x7f0>
 80109b2:	f1b9 0f00 	cmp.w	r9, #0
 80109b6:	dc34      	bgt.n	8010a22 <_dtoa_r+0x872>
 80109b8:	9b08      	ldr	r3, [sp, #32]
 80109ba:	2b02      	cmp	r3, #2
 80109bc:	dd31      	ble.n	8010a22 <_dtoa_r+0x872>
 80109be:	f8cd 9018 	str.w	r9, [sp, #24]
 80109c2:	9b06      	ldr	r3, [sp, #24]
 80109c4:	b963      	cbnz	r3, 80109e0 <_dtoa_r+0x830>
 80109c6:	4629      	mov	r1, r5
 80109c8:	2205      	movs	r2, #5
 80109ca:	4620      	mov	r0, r4
 80109cc:	f000 fed3 	bl	8011776 <__multadd>
 80109d0:	4601      	mov	r1, r0
 80109d2:	4605      	mov	r5, r0
 80109d4:	9801      	ldr	r0, [sp, #4]
 80109d6:	f001 f8d7 	bl	8011b88 <__mcmp>
 80109da:	2800      	cmp	r0, #0
 80109dc:	f73f adfc 	bgt.w	80105d8 <_dtoa_r+0x428>
 80109e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109e2:	9e04      	ldr	r6, [sp, #16]
 80109e4:	ea6f 0b03 	mvn.w	fp, r3
 80109e8:	f04f 0900 	mov.w	r9, #0
 80109ec:	4629      	mov	r1, r5
 80109ee:	4620      	mov	r0, r4
 80109f0:	f000 feaa 	bl	8011748 <_Bfree>
 80109f4:	2f00      	cmp	r7, #0
 80109f6:	f43f aebb 	beq.w	8010770 <_dtoa_r+0x5c0>
 80109fa:	f1b9 0f00 	cmp.w	r9, #0
 80109fe:	d005      	beq.n	8010a0c <_dtoa_r+0x85c>
 8010a00:	45b9      	cmp	r9, r7
 8010a02:	d003      	beq.n	8010a0c <_dtoa_r+0x85c>
 8010a04:	4649      	mov	r1, r9
 8010a06:	4620      	mov	r0, r4
 8010a08:	f000 fe9e 	bl	8011748 <_Bfree>
 8010a0c:	4639      	mov	r1, r7
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f000 fe9a 	bl	8011748 <_Bfree>
 8010a14:	e6ac      	b.n	8010770 <_dtoa_r+0x5c0>
 8010a16:	2500      	movs	r5, #0
 8010a18:	462f      	mov	r7, r5
 8010a1a:	e7e1      	b.n	80109e0 <_dtoa_r+0x830>
 8010a1c:	469b      	mov	fp, r3
 8010a1e:	462f      	mov	r7, r5
 8010a20:	e5da      	b.n	80105d8 <_dtoa_r+0x428>
 8010a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a24:	f8cd 9018 	str.w	r9, [sp, #24]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f000 80f3 	beq.w	8010c14 <_dtoa_r+0xa64>
 8010a2e:	2e00      	cmp	r6, #0
 8010a30:	dd05      	ble.n	8010a3e <_dtoa_r+0x88e>
 8010a32:	4639      	mov	r1, r7
 8010a34:	4632      	mov	r2, r6
 8010a36:	4620      	mov	r0, r4
 8010a38:	f001 f852 	bl	8011ae0 <__lshift>
 8010a3c:	4607      	mov	r7, r0
 8010a3e:	f1b8 0f00 	cmp.w	r8, #0
 8010a42:	d04c      	beq.n	8010ade <_dtoa_r+0x92e>
 8010a44:	6879      	ldr	r1, [r7, #4]
 8010a46:	4620      	mov	r0, r4
 8010a48:	f000 fe4a 	bl	80116e0 <_Balloc>
 8010a4c:	693a      	ldr	r2, [r7, #16]
 8010a4e:	3202      	adds	r2, #2
 8010a50:	4606      	mov	r6, r0
 8010a52:	0092      	lsls	r2, r2, #2
 8010a54:	f107 010c 	add.w	r1, r7, #12
 8010a58:	300c      	adds	r0, #12
 8010a5a:	f7fd fb77 	bl	800e14c <memcpy>
 8010a5e:	2201      	movs	r2, #1
 8010a60:	4631      	mov	r1, r6
 8010a62:	4620      	mov	r0, r4
 8010a64:	f001 f83c 	bl	8011ae0 <__lshift>
 8010a68:	9b02      	ldr	r3, [sp, #8]
 8010a6a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010a6e:	f003 0301 	and.w	r3, r3, #1
 8010a72:	46b9      	mov	r9, r7
 8010a74:	9307      	str	r3, [sp, #28]
 8010a76:	4607      	mov	r7, r0
 8010a78:	4629      	mov	r1, r5
 8010a7a:	9801      	ldr	r0, [sp, #4]
 8010a7c:	f7ff fb0c 	bl	8010098 <quorem>
 8010a80:	4649      	mov	r1, r9
 8010a82:	4606      	mov	r6, r0
 8010a84:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010a88:	9801      	ldr	r0, [sp, #4]
 8010a8a:	f001 f87d 	bl	8011b88 <__mcmp>
 8010a8e:	463a      	mov	r2, r7
 8010a90:	9002      	str	r0, [sp, #8]
 8010a92:	4629      	mov	r1, r5
 8010a94:	4620      	mov	r0, r4
 8010a96:	f001 f891 	bl	8011bbc <__mdiff>
 8010a9a:	68c3      	ldr	r3, [r0, #12]
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	bb03      	cbnz	r3, 8010ae2 <_dtoa_r+0x932>
 8010aa0:	4601      	mov	r1, r0
 8010aa2:	9009      	str	r0, [sp, #36]	; 0x24
 8010aa4:	9801      	ldr	r0, [sp, #4]
 8010aa6:	f001 f86f 	bl	8011b88 <__mcmp>
 8010aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010aac:	4603      	mov	r3, r0
 8010aae:	4611      	mov	r1, r2
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab4:	f000 fe48 	bl	8011748 <_Bfree>
 8010ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aba:	b9a3      	cbnz	r3, 8010ae6 <_dtoa_r+0x936>
 8010abc:	9a08      	ldr	r2, [sp, #32]
 8010abe:	b992      	cbnz	r2, 8010ae6 <_dtoa_r+0x936>
 8010ac0:	9a07      	ldr	r2, [sp, #28]
 8010ac2:	b982      	cbnz	r2, 8010ae6 <_dtoa_r+0x936>
 8010ac4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010ac8:	d029      	beq.n	8010b1e <_dtoa_r+0x96e>
 8010aca:	9b02      	ldr	r3, [sp, #8]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	dd01      	ble.n	8010ad4 <_dtoa_r+0x924>
 8010ad0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8010ad4:	f10a 0601 	add.w	r6, sl, #1
 8010ad8:	f88a 8000 	strb.w	r8, [sl]
 8010adc:	e786      	b.n	80109ec <_dtoa_r+0x83c>
 8010ade:	4638      	mov	r0, r7
 8010ae0:	e7c2      	b.n	8010a68 <_dtoa_r+0x8b8>
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	e7e3      	b.n	8010aae <_dtoa_r+0x8fe>
 8010ae6:	9a02      	ldr	r2, [sp, #8]
 8010ae8:	2a00      	cmp	r2, #0
 8010aea:	db04      	blt.n	8010af6 <_dtoa_r+0x946>
 8010aec:	d124      	bne.n	8010b38 <_dtoa_r+0x988>
 8010aee:	9a08      	ldr	r2, [sp, #32]
 8010af0:	bb12      	cbnz	r2, 8010b38 <_dtoa_r+0x988>
 8010af2:	9a07      	ldr	r2, [sp, #28]
 8010af4:	bb02      	cbnz	r2, 8010b38 <_dtoa_r+0x988>
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	ddec      	ble.n	8010ad4 <_dtoa_r+0x924>
 8010afa:	2201      	movs	r2, #1
 8010afc:	9901      	ldr	r1, [sp, #4]
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 ffee 	bl	8011ae0 <__lshift>
 8010b04:	4629      	mov	r1, r5
 8010b06:	9001      	str	r0, [sp, #4]
 8010b08:	f001 f83e 	bl	8011b88 <__mcmp>
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	dc03      	bgt.n	8010b18 <_dtoa_r+0x968>
 8010b10:	d1e0      	bne.n	8010ad4 <_dtoa_r+0x924>
 8010b12:	f018 0f01 	tst.w	r8, #1
 8010b16:	d0dd      	beq.n	8010ad4 <_dtoa_r+0x924>
 8010b18:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010b1c:	d1d8      	bne.n	8010ad0 <_dtoa_r+0x920>
 8010b1e:	2339      	movs	r3, #57	; 0x39
 8010b20:	f10a 0601 	add.w	r6, sl, #1
 8010b24:	f88a 3000 	strb.w	r3, [sl]
 8010b28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010b2c:	2b39      	cmp	r3, #57	; 0x39
 8010b2e:	f106 32ff 	add.w	r2, r6, #4294967295
 8010b32:	d04c      	beq.n	8010bce <_dtoa_r+0xa1e>
 8010b34:	3301      	adds	r3, #1
 8010b36:	e051      	b.n	8010bdc <_dtoa_r+0xa2c>
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f10a 0601 	add.w	r6, sl, #1
 8010b3e:	dd05      	ble.n	8010b4c <_dtoa_r+0x99c>
 8010b40:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010b44:	d0eb      	beq.n	8010b1e <_dtoa_r+0x96e>
 8010b46:	f108 0801 	add.w	r8, r8, #1
 8010b4a:	e7c5      	b.n	8010ad8 <_dtoa_r+0x928>
 8010b4c:	9b04      	ldr	r3, [sp, #16]
 8010b4e:	9a06      	ldr	r2, [sp, #24]
 8010b50:	f806 8c01 	strb.w	r8, [r6, #-1]
 8010b54:	1af3      	subs	r3, r6, r3
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d021      	beq.n	8010b9e <_dtoa_r+0x9ee>
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	220a      	movs	r2, #10
 8010b5e:	9901      	ldr	r1, [sp, #4]
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fe08 	bl	8011776 <__multadd>
 8010b66:	45b9      	cmp	r9, r7
 8010b68:	9001      	str	r0, [sp, #4]
 8010b6a:	f04f 0300 	mov.w	r3, #0
 8010b6e:	f04f 020a 	mov.w	r2, #10
 8010b72:	4649      	mov	r1, r9
 8010b74:	4620      	mov	r0, r4
 8010b76:	d105      	bne.n	8010b84 <_dtoa_r+0x9d4>
 8010b78:	f000 fdfd 	bl	8011776 <__multadd>
 8010b7c:	4681      	mov	r9, r0
 8010b7e:	4607      	mov	r7, r0
 8010b80:	46b2      	mov	sl, r6
 8010b82:	e779      	b.n	8010a78 <_dtoa_r+0x8c8>
 8010b84:	f000 fdf7 	bl	8011776 <__multadd>
 8010b88:	4639      	mov	r1, r7
 8010b8a:	4681      	mov	r9, r0
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	220a      	movs	r2, #10
 8010b90:	4620      	mov	r0, r4
 8010b92:	f000 fdf0 	bl	8011776 <__multadd>
 8010b96:	4607      	mov	r7, r0
 8010b98:	e7f2      	b.n	8010b80 <_dtoa_r+0x9d0>
 8010b9a:	f04f 0900 	mov.w	r9, #0
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	9901      	ldr	r1, [sp, #4]
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f000 ff9c 	bl	8011ae0 <__lshift>
 8010ba8:	4629      	mov	r1, r5
 8010baa:	9001      	str	r0, [sp, #4]
 8010bac:	f000 ffec 	bl	8011b88 <__mcmp>
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	dcb9      	bgt.n	8010b28 <_dtoa_r+0x978>
 8010bb4:	d102      	bne.n	8010bbc <_dtoa_r+0xa0c>
 8010bb6:	f018 0f01 	tst.w	r8, #1
 8010bba:	d1b5      	bne.n	8010b28 <_dtoa_r+0x978>
 8010bbc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010bc0:	2b30      	cmp	r3, #48	; 0x30
 8010bc2:	f106 32ff 	add.w	r2, r6, #4294967295
 8010bc6:	f47f af11 	bne.w	80109ec <_dtoa_r+0x83c>
 8010bca:	4616      	mov	r6, r2
 8010bcc:	e7f6      	b.n	8010bbc <_dtoa_r+0xa0c>
 8010bce:	9b04      	ldr	r3, [sp, #16]
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d105      	bne.n	8010be0 <_dtoa_r+0xa30>
 8010bd4:	9a04      	ldr	r2, [sp, #16]
 8010bd6:	f10b 0b01 	add.w	fp, fp, #1
 8010bda:	2331      	movs	r3, #49	; 0x31
 8010bdc:	7013      	strb	r3, [r2, #0]
 8010bde:	e705      	b.n	80109ec <_dtoa_r+0x83c>
 8010be0:	4616      	mov	r6, r2
 8010be2:	e7a1      	b.n	8010b28 <_dtoa_r+0x978>
 8010be4:	4b16      	ldr	r3, [pc, #88]	; (8010c40 <_dtoa_r+0xa90>)
 8010be6:	f7ff bb48 	b.w	801027a <_dtoa_r+0xca>
 8010bea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f47f ab23 	bne.w	8010238 <_dtoa_r+0x88>
 8010bf2:	4b14      	ldr	r3, [pc, #80]	; (8010c44 <_dtoa_r+0xa94>)
 8010bf4:	f7ff bb41 	b.w	801027a <_dtoa_r+0xca>
 8010bf8:	9b08      	ldr	r3, [sp, #32]
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	f77f ae3b 	ble.w	8010876 <_dtoa_r+0x6c6>
 8010c00:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8010c04:	e64f      	b.n	80108a6 <_dtoa_r+0x6f6>
 8010c06:	9b06      	ldr	r3, [sp, #24]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	dc03      	bgt.n	8010c14 <_dtoa_r+0xa64>
 8010c0c:	9b08      	ldr	r3, [sp, #32]
 8010c0e:	2b02      	cmp	r3, #2
 8010c10:	f73f aed7 	bgt.w	80109c2 <_dtoa_r+0x812>
 8010c14:	9e04      	ldr	r6, [sp, #16]
 8010c16:	9801      	ldr	r0, [sp, #4]
 8010c18:	4629      	mov	r1, r5
 8010c1a:	f7ff fa3d 	bl	8010098 <quorem>
 8010c1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010c22:	f806 8b01 	strb.w	r8, [r6], #1
 8010c26:	9b04      	ldr	r3, [sp, #16]
 8010c28:	9a06      	ldr	r2, [sp, #24]
 8010c2a:	1af3      	subs	r3, r6, r3
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	ddb4      	ble.n	8010b9a <_dtoa_r+0x9ea>
 8010c30:	2300      	movs	r3, #0
 8010c32:	220a      	movs	r2, #10
 8010c34:	9901      	ldr	r1, [sp, #4]
 8010c36:	4620      	mov	r0, r4
 8010c38:	f000 fd9d 	bl	8011776 <__multadd>
 8010c3c:	9001      	str	r0, [sp, #4]
 8010c3e:	e7ea      	b.n	8010c16 <_dtoa_r+0xa66>
 8010c40:	080131d3 	.word	0x080131d3
 8010c44:	08013030 	.word	0x08013030

08010c48 <__sflush_r>:
 8010c48:	898a      	ldrh	r2, [r1, #12]
 8010c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c4e:	4605      	mov	r5, r0
 8010c50:	0710      	lsls	r0, r2, #28
 8010c52:	460c      	mov	r4, r1
 8010c54:	d458      	bmi.n	8010d08 <__sflush_r+0xc0>
 8010c56:	684b      	ldr	r3, [r1, #4]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	dc05      	bgt.n	8010c68 <__sflush_r+0x20>
 8010c5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	dc02      	bgt.n	8010c68 <__sflush_r+0x20>
 8010c62:	2000      	movs	r0, #0
 8010c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c6a:	2e00      	cmp	r6, #0
 8010c6c:	d0f9      	beq.n	8010c62 <__sflush_r+0x1a>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c74:	682f      	ldr	r7, [r5, #0]
 8010c76:	6a21      	ldr	r1, [r4, #32]
 8010c78:	602b      	str	r3, [r5, #0]
 8010c7a:	d032      	beq.n	8010ce2 <__sflush_r+0x9a>
 8010c7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c7e:	89a3      	ldrh	r3, [r4, #12]
 8010c80:	075a      	lsls	r2, r3, #29
 8010c82:	d505      	bpl.n	8010c90 <__sflush_r+0x48>
 8010c84:	6863      	ldr	r3, [r4, #4]
 8010c86:	1ac0      	subs	r0, r0, r3
 8010c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c8a:	b10b      	cbz	r3, 8010c90 <__sflush_r+0x48>
 8010c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c8e:	1ac0      	subs	r0, r0, r3
 8010c90:	2300      	movs	r3, #0
 8010c92:	4602      	mov	r2, r0
 8010c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c96:	6a21      	ldr	r1, [r4, #32]
 8010c98:	4628      	mov	r0, r5
 8010c9a:	47b0      	blx	r6
 8010c9c:	1c43      	adds	r3, r0, #1
 8010c9e:	89a3      	ldrh	r3, [r4, #12]
 8010ca0:	d106      	bne.n	8010cb0 <__sflush_r+0x68>
 8010ca2:	6829      	ldr	r1, [r5, #0]
 8010ca4:	291d      	cmp	r1, #29
 8010ca6:	d848      	bhi.n	8010d3a <__sflush_r+0xf2>
 8010ca8:	4a29      	ldr	r2, [pc, #164]	; (8010d50 <__sflush_r+0x108>)
 8010caa:	40ca      	lsrs	r2, r1
 8010cac:	07d6      	lsls	r6, r2, #31
 8010cae:	d544      	bpl.n	8010d3a <__sflush_r+0xf2>
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	6062      	str	r2, [r4, #4]
 8010cb4:	04d9      	lsls	r1, r3, #19
 8010cb6:	6922      	ldr	r2, [r4, #16]
 8010cb8:	6022      	str	r2, [r4, #0]
 8010cba:	d504      	bpl.n	8010cc6 <__sflush_r+0x7e>
 8010cbc:	1c42      	adds	r2, r0, #1
 8010cbe:	d101      	bne.n	8010cc4 <__sflush_r+0x7c>
 8010cc0:	682b      	ldr	r3, [r5, #0]
 8010cc2:	b903      	cbnz	r3, 8010cc6 <__sflush_r+0x7e>
 8010cc4:	6560      	str	r0, [r4, #84]	; 0x54
 8010cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cc8:	602f      	str	r7, [r5, #0]
 8010cca:	2900      	cmp	r1, #0
 8010ccc:	d0c9      	beq.n	8010c62 <__sflush_r+0x1a>
 8010cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cd2:	4299      	cmp	r1, r3
 8010cd4:	d002      	beq.n	8010cdc <__sflush_r+0x94>
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f7fd fa5a 	bl	800e190 <_free_r>
 8010cdc:	2000      	movs	r0, #0
 8010cde:	6360      	str	r0, [r4, #52]	; 0x34
 8010ce0:	e7c0      	b.n	8010c64 <__sflush_r+0x1c>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	47b0      	blx	r6
 8010ce8:	1c41      	adds	r1, r0, #1
 8010cea:	d1c8      	bne.n	8010c7e <__sflush_r+0x36>
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d0c5      	beq.n	8010c7e <__sflush_r+0x36>
 8010cf2:	2b1d      	cmp	r3, #29
 8010cf4:	d001      	beq.n	8010cfa <__sflush_r+0xb2>
 8010cf6:	2b16      	cmp	r3, #22
 8010cf8:	d101      	bne.n	8010cfe <__sflush_r+0xb6>
 8010cfa:	602f      	str	r7, [r5, #0]
 8010cfc:	e7b1      	b.n	8010c62 <__sflush_r+0x1a>
 8010cfe:	89a3      	ldrh	r3, [r4, #12]
 8010d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d04:	81a3      	strh	r3, [r4, #12]
 8010d06:	e7ad      	b.n	8010c64 <__sflush_r+0x1c>
 8010d08:	690f      	ldr	r7, [r1, #16]
 8010d0a:	2f00      	cmp	r7, #0
 8010d0c:	d0a9      	beq.n	8010c62 <__sflush_r+0x1a>
 8010d0e:	0793      	lsls	r3, r2, #30
 8010d10:	680e      	ldr	r6, [r1, #0]
 8010d12:	bf08      	it	eq
 8010d14:	694b      	ldreq	r3, [r1, #20]
 8010d16:	600f      	str	r7, [r1, #0]
 8010d18:	bf18      	it	ne
 8010d1a:	2300      	movne	r3, #0
 8010d1c:	eba6 0807 	sub.w	r8, r6, r7
 8010d20:	608b      	str	r3, [r1, #8]
 8010d22:	f1b8 0f00 	cmp.w	r8, #0
 8010d26:	dd9c      	ble.n	8010c62 <__sflush_r+0x1a>
 8010d28:	4643      	mov	r3, r8
 8010d2a:	463a      	mov	r2, r7
 8010d2c:	6a21      	ldr	r1, [r4, #32]
 8010d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d30:	4628      	mov	r0, r5
 8010d32:	47b0      	blx	r6
 8010d34:	2800      	cmp	r0, #0
 8010d36:	dc06      	bgt.n	8010d46 <__sflush_r+0xfe>
 8010d38:	89a3      	ldrh	r3, [r4, #12]
 8010d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d3e:	81a3      	strh	r3, [r4, #12]
 8010d40:	f04f 30ff 	mov.w	r0, #4294967295
 8010d44:	e78e      	b.n	8010c64 <__sflush_r+0x1c>
 8010d46:	4407      	add	r7, r0
 8010d48:	eba8 0800 	sub.w	r8, r8, r0
 8010d4c:	e7e9      	b.n	8010d22 <__sflush_r+0xda>
 8010d4e:	bf00      	nop
 8010d50:	20400001 	.word	0x20400001

08010d54 <_fflush_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	690b      	ldr	r3, [r1, #16]
 8010d58:	4605      	mov	r5, r0
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	b1db      	cbz	r3, 8010d96 <_fflush_r+0x42>
 8010d5e:	b118      	cbz	r0, 8010d68 <_fflush_r+0x14>
 8010d60:	6983      	ldr	r3, [r0, #24]
 8010d62:	b90b      	cbnz	r3, 8010d68 <_fflush_r+0x14>
 8010d64:	f000 f860 	bl	8010e28 <__sinit>
 8010d68:	4b0c      	ldr	r3, [pc, #48]	; (8010d9c <_fflush_r+0x48>)
 8010d6a:	429c      	cmp	r4, r3
 8010d6c:	d109      	bne.n	8010d82 <_fflush_r+0x2e>
 8010d6e:	686c      	ldr	r4, [r5, #4]
 8010d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d74:	b17b      	cbz	r3, 8010d96 <_fflush_r+0x42>
 8010d76:	4621      	mov	r1, r4
 8010d78:	4628      	mov	r0, r5
 8010d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d7e:	f7ff bf63 	b.w	8010c48 <__sflush_r>
 8010d82:	4b07      	ldr	r3, [pc, #28]	; (8010da0 <_fflush_r+0x4c>)
 8010d84:	429c      	cmp	r4, r3
 8010d86:	d101      	bne.n	8010d8c <_fflush_r+0x38>
 8010d88:	68ac      	ldr	r4, [r5, #8]
 8010d8a:	e7f1      	b.n	8010d70 <_fflush_r+0x1c>
 8010d8c:	4b05      	ldr	r3, [pc, #20]	; (8010da4 <_fflush_r+0x50>)
 8010d8e:	429c      	cmp	r4, r3
 8010d90:	bf08      	it	eq
 8010d92:	68ec      	ldreq	r4, [r5, #12]
 8010d94:	e7ec      	b.n	8010d70 <_fflush_r+0x1c>
 8010d96:	2000      	movs	r0, #0
 8010d98:	bd38      	pop	{r3, r4, r5, pc}
 8010d9a:	bf00      	nop
 8010d9c:	08013060 	.word	0x08013060
 8010da0:	08013080 	.word	0x08013080
 8010da4:	08013040 	.word	0x08013040

08010da8 <std>:
 8010da8:	2300      	movs	r3, #0
 8010daa:	b510      	push	{r4, lr}
 8010dac:	4604      	mov	r4, r0
 8010dae:	e9c0 3300 	strd	r3, r3, [r0]
 8010db2:	6083      	str	r3, [r0, #8]
 8010db4:	8181      	strh	r1, [r0, #12]
 8010db6:	6643      	str	r3, [r0, #100]	; 0x64
 8010db8:	81c2      	strh	r2, [r0, #14]
 8010dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010dbe:	6183      	str	r3, [r0, #24]
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	2208      	movs	r2, #8
 8010dc4:	305c      	adds	r0, #92	; 0x5c
 8010dc6:	f7fd f9cc 	bl	800e162 <memset>
 8010dca:	4b05      	ldr	r3, [pc, #20]	; (8010de0 <std+0x38>)
 8010dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8010dce:	4b05      	ldr	r3, [pc, #20]	; (8010de4 <std+0x3c>)
 8010dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010dd2:	4b05      	ldr	r3, [pc, #20]	; (8010de8 <std+0x40>)
 8010dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010dd6:	4b05      	ldr	r3, [pc, #20]	; (8010dec <std+0x44>)
 8010dd8:	6224      	str	r4, [r4, #32]
 8010dda:	6323      	str	r3, [r4, #48]	; 0x30
 8010ddc:	bd10      	pop	{r4, pc}
 8010dde:	bf00      	nop
 8010de0:	0800f149 	.word	0x0800f149
 8010de4:	0800f16f 	.word	0x0800f16f
 8010de8:	0800f1a7 	.word	0x0800f1a7
 8010dec:	0800f1cb 	.word	0x0800f1cb

08010df0 <_cleanup_r>:
 8010df0:	4901      	ldr	r1, [pc, #4]	; (8010df8 <_cleanup_r+0x8>)
 8010df2:	f000 b885 	b.w	8010f00 <_fwalk_reent>
 8010df6:	bf00      	nop
 8010df8:	08010d55 	.word	0x08010d55

08010dfc <__sfmoreglue>:
 8010dfc:	b570      	push	{r4, r5, r6, lr}
 8010dfe:	1e4a      	subs	r2, r1, #1
 8010e00:	2568      	movs	r5, #104	; 0x68
 8010e02:	4355      	muls	r5, r2
 8010e04:	460e      	mov	r6, r1
 8010e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e0a:	f7fd fa0f 	bl	800e22c <_malloc_r>
 8010e0e:	4604      	mov	r4, r0
 8010e10:	b140      	cbz	r0, 8010e24 <__sfmoreglue+0x28>
 8010e12:	2100      	movs	r1, #0
 8010e14:	e9c0 1600 	strd	r1, r6, [r0]
 8010e18:	300c      	adds	r0, #12
 8010e1a:	60a0      	str	r0, [r4, #8]
 8010e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e20:	f7fd f99f 	bl	800e162 <memset>
 8010e24:	4620      	mov	r0, r4
 8010e26:	bd70      	pop	{r4, r5, r6, pc}

08010e28 <__sinit>:
 8010e28:	6983      	ldr	r3, [r0, #24]
 8010e2a:	b510      	push	{r4, lr}
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	bb33      	cbnz	r3, 8010e7e <__sinit+0x56>
 8010e30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010e34:	6503      	str	r3, [r0, #80]	; 0x50
 8010e36:	4b12      	ldr	r3, [pc, #72]	; (8010e80 <__sinit+0x58>)
 8010e38:	4a12      	ldr	r2, [pc, #72]	; (8010e84 <__sinit+0x5c>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	6282      	str	r2, [r0, #40]	; 0x28
 8010e3e:	4298      	cmp	r0, r3
 8010e40:	bf04      	itt	eq
 8010e42:	2301      	moveq	r3, #1
 8010e44:	6183      	streq	r3, [r0, #24]
 8010e46:	f000 f81f 	bl	8010e88 <__sfp>
 8010e4a:	6060      	str	r0, [r4, #4]
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f000 f81b 	bl	8010e88 <__sfp>
 8010e52:	60a0      	str	r0, [r4, #8]
 8010e54:	4620      	mov	r0, r4
 8010e56:	f000 f817 	bl	8010e88 <__sfp>
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	60e0      	str	r0, [r4, #12]
 8010e5e:	2104      	movs	r1, #4
 8010e60:	6860      	ldr	r0, [r4, #4]
 8010e62:	f7ff ffa1 	bl	8010da8 <std>
 8010e66:	2201      	movs	r2, #1
 8010e68:	2109      	movs	r1, #9
 8010e6a:	68a0      	ldr	r0, [r4, #8]
 8010e6c:	f7ff ff9c 	bl	8010da8 <std>
 8010e70:	2202      	movs	r2, #2
 8010e72:	2112      	movs	r1, #18
 8010e74:	68e0      	ldr	r0, [r4, #12]
 8010e76:	f7ff ff97 	bl	8010da8 <std>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	61a3      	str	r3, [r4, #24]
 8010e7e:	bd10      	pop	{r4, pc}
 8010e80:	08012fa4 	.word	0x08012fa4
 8010e84:	08010df1 	.word	0x08010df1

08010e88 <__sfp>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	4b1b      	ldr	r3, [pc, #108]	; (8010ef8 <__sfp+0x70>)
 8010e8c:	681e      	ldr	r6, [r3, #0]
 8010e8e:	69b3      	ldr	r3, [r6, #24]
 8010e90:	4607      	mov	r7, r0
 8010e92:	b913      	cbnz	r3, 8010e9a <__sfp+0x12>
 8010e94:	4630      	mov	r0, r6
 8010e96:	f7ff ffc7 	bl	8010e28 <__sinit>
 8010e9a:	3648      	adds	r6, #72	; 0x48
 8010e9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	d503      	bpl.n	8010eac <__sfp+0x24>
 8010ea4:	6833      	ldr	r3, [r6, #0]
 8010ea6:	b133      	cbz	r3, 8010eb6 <__sfp+0x2e>
 8010ea8:	6836      	ldr	r6, [r6, #0]
 8010eaa:	e7f7      	b.n	8010e9c <__sfp+0x14>
 8010eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010eb0:	b16d      	cbz	r5, 8010ece <__sfp+0x46>
 8010eb2:	3468      	adds	r4, #104	; 0x68
 8010eb4:	e7f4      	b.n	8010ea0 <__sfp+0x18>
 8010eb6:	2104      	movs	r1, #4
 8010eb8:	4638      	mov	r0, r7
 8010eba:	f7ff ff9f 	bl	8010dfc <__sfmoreglue>
 8010ebe:	6030      	str	r0, [r6, #0]
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	d1f1      	bne.n	8010ea8 <__sfp+0x20>
 8010ec4:	230c      	movs	r3, #12
 8010ec6:	603b      	str	r3, [r7, #0]
 8010ec8:	4604      	mov	r4, r0
 8010eca:	4620      	mov	r0, r4
 8010ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ece:	4b0b      	ldr	r3, [pc, #44]	; (8010efc <__sfp+0x74>)
 8010ed0:	6665      	str	r5, [r4, #100]	; 0x64
 8010ed2:	e9c4 5500 	strd	r5, r5, [r4]
 8010ed6:	60a5      	str	r5, [r4, #8]
 8010ed8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010edc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010ee0:	2208      	movs	r2, #8
 8010ee2:	4629      	mov	r1, r5
 8010ee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ee8:	f7fd f93b 	bl	800e162 <memset>
 8010eec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ef4:	e7e9      	b.n	8010eca <__sfp+0x42>
 8010ef6:	bf00      	nop
 8010ef8:	08012fa4 	.word	0x08012fa4
 8010efc:	ffff0001 	.word	0xffff0001

08010f00 <_fwalk_reent>:
 8010f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f04:	4680      	mov	r8, r0
 8010f06:	4689      	mov	r9, r1
 8010f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f0c:	2600      	movs	r6, #0
 8010f0e:	b914      	cbnz	r4, 8010f16 <_fwalk_reent+0x16>
 8010f10:	4630      	mov	r0, r6
 8010f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f16:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010f1a:	3f01      	subs	r7, #1
 8010f1c:	d501      	bpl.n	8010f22 <_fwalk_reent+0x22>
 8010f1e:	6824      	ldr	r4, [r4, #0]
 8010f20:	e7f5      	b.n	8010f0e <_fwalk_reent+0xe>
 8010f22:	89ab      	ldrh	r3, [r5, #12]
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d907      	bls.n	8010f38 <_fwalk_reent+0x38>
 8010f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	d003      	beq.n	8010f38 <_fwalk_reent+0x38>
 8010f30:	4629      	mov	r1, r5
 8010f32:	4640      	mov	r0, r8
 8010f34:	47c8      	blx	r9
 8010f36:	4306      	orrs	r6, r0
 8010f38:	3568      	adds	r5, #104	; 0x68
 8010f3a:	e7ee      	b.n	8010f1a <_fwalk_reent+0x1a>

08010f3c <rshift>:
 8010f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f3e:	6906      	ldr	r6, [r0, #16]
 8010f40:	114b      	asrs	r3, r1, #5
 8010f42:	429e      	cmp	r6, r3
 8010f44:	f100 0414 	add.w	r4, r0, #20
 8010f48:	dd30      	ble.n	8010fac <rshift+0x70>
 8010f4a:	f011 011f 	ands.w	r1, r1, #31
 8010f4e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010f52:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010f56:	d108      	bne.n	8010f6a <rshift+0x2e>
 8010f58:	4621      	mov	r1, r4
 8010f5a:	42b2      	cmp	r2, r6
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	d211      	bcs.n	8010f84 <rshift+0x48>
 8010f60:	f852 3b04 	ldr.w	r3, [r2], #4
 8010f64:	f841 3b04 	str.w	r3, [r1], #4
 8010f68:	e7f7      	b.n	8010f5a <rshift+0x1e>
 8010f6a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010f6e:	f1c1 0c20 	rsb	ip, r1, #32
 8010f72:	40cd      	lsrs	r5, r1
 8010f74:	3204      	adds	r2, #4
 8010f76:	4623      	mov	r3, r4
 8010f78:	42b2      	cmp	r2, r6
 8010f7a:	4617      	mov	r7, r2
 8010f7c:	d30c      	bcc.n	8010f98 <rshift+0x5c>
 8010f7e:	601d      	str	r5, [r3, #0]
 8010f80:	b105      	cbz	r5, 8010f84 <rshift+0x48>
 8010f82:	3304      	adds	r3, #4
 8010f84:	1b1a      	subs	r2, r3, r4
 8010f86:	42a3      	cmp	r3, r4
 8010f88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010f8c:	bf08      	it	eq
 8010f8e:	2300      	moveq	r3, #0
 8010f90:	6102      	str	r2, [r0, #16]
 8010f92:	bf08      	it	eq
 8010f94:	6143      	streq	r3, [r0, #20]
 8010f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f98:	683f      	ldr	r7, [r7, #0]
 8010f9a:	fa07 f70c 	lsl.w	r7, r7, ip
 8010f9e:	433d      	orrs	r5, r7
 8010fa0:	f843 5b04 	str.w	r5, [r3], #4
 8010fa4:	f852 5b04 	ldr.w	r5, [r2], #4
 8010fa8:	40cd      	lsrs	r5, r1
 8010faa:	e7e5      	b.n	8010f78 <rshift+0x3c>
 8010fac:	4623      	mov	r3, r4
 8010fae:	e7e9      	b.n	8010f84 <rshift+0x48>

08010fb0 <__hexdig_fun>:
 8010fb0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010fb4:	2b09      	cmp	r3, #9
 8010fb6:	d802      	bhi.n	8010fbe <__hexdig_fun+0xe>
 8010fb8:	3820      	subs	r0, #32
 8010fba:	b2c0      	uxtb	r0, r0
 8010fbc:	4770      	bx	lr
 8010fbe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010fc2:	2b05      	cmp	r3, #5
 8010fc4:	d801      	bhi.n	8010fca <__hexdig_fun+0x1a>
 8010fc6:	3847      	subs	r0, #71	; 0x47
 8010fc8:	e7f7      	b.n	8010fba <__hexdig_fun+0xa>
 8010fca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010fce:	2b05      	cmp	r3, #5
 8010fd0:	d801      	bhi.n	8010fd6 <__hexdig_fun+0x26>
 8010fd2:	3827      	subs	r0, #39	; 0x27
 8010fd4:	e7f1      	b.n	8010fba <__hexdig_fun+0xa>
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	4770      	bx	lr

08010fda <__gethex>:
 8010fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fde:	b08b      	sub	sp, #44	; 0x2c
 8010fe0:	468a      	mov	sl, r1
 8010fe2:	9002      	str	r0, [sp, #8]
 8010fe4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010fe6:	9306      	str	r3, [sp, #24]
 8010fe8:	4690      	mov	r8, r2
 8010fea:	f000 fadf 	bl	80115ac <__localeconv_l>
 8010fee:	6803      	ldr	r3, [r0, #0]
 8010ff0:	9303      	str	r3, [sp, #12]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7ef f924 	bl	8000240 <strlen>
 8010ff8:	9b03      	ldr	r3, [sp, #12]
 8010ffa:	9001      	str	r0, [sp, #4]
 8010ffc:	4403      	add	r3, r0
 8010ffe:	f04f 0b00 	mov.w	fp, #0
 8011002:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011006:	9307      	str	r3, [sp, #28]
 8011008:	f8da 3000 	ldr.w	r3, [sl]
 801100c:	3302      	adds	r3, #2
 801100e:	461f      	mov	r7, r3
 8011010:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011014:	2830      	cmp	r0, #48	; 0x30
 8011016:	d06c      	beq.n	80110f2 <__gethex+0x118>
 8011018:	f7ff ffca 	bl	8010fb0 <__hexdig_fun>
 801101c:	4604      	mov	r4, r0
 801101e:	2800      	cmp	r0, #0
 8011020:	d16a      	bne.n	80110f8 <__gethex+0x11e>
 8011022:	9a01      	ldr	r2, [sp, #4]
 8011024:	9903      	ldr	r1, [sp, #12]
 8011026:	4638      	mov	r0, r7
 8011028:	f001 fd32 	bl	8012a90 <strncmp>
 801102c:	2800      	cmp	r0, #0
 801102e:	d166      	bne.n	80110fe <__gethex+0x124>
 8011030:	9b01      	ldr	r3, [sp, #4]
 8011032:	5cf8      	ldrb	r0, [r7, r3]
 8011034:	18fe      	adds	r6, r7, r3
 8011036:	f7ff ffbb 	bl	8010fb0 <__hexdig_fun>
 801103a:	2800      	cmp	r0, #0
 801103c:	d062      	beq.n	8011104 <__gethex+0x12a>
 801103e:	4633      	mov	r3, r6
 8011040:	7818      	ldrb	r0, [r3, #0]
 8011042:	2830      	cmp	r0, #48	; 0x30
 8011044:	461f      	mov	r7, r3
 8011046:	f103 0301 	add.w	r3, r3, #1
 801104a:	d0f9      	beq.n	8011040 <__gethex+0x66>
 801104c:	f7ff ffb0 	bl	8010fb0 <__hexdig_fun>
 8011050:	fab0 f580 	clz	r5, r0
 8011054:	096d      	lsrs	r5, r5, #5
 8011056:	4634      	mov	r4, r6
 8011058:	f04f 0b01 	mov.w	fp, #1
 801105c:	463a      	mov	r2, r7
 801105e:	4616      	mov	r6, r2
 8011060:	3201      	adds	r2, #1
 8011062:	7830      	ldrb	r0, [r6, #0]
 8011064:	f7ff ffa4 	bl	8010fb0 <__hexdig_fun>
 8011068:	2800      	cmp	r0, #0
 801106a:	d1f8      	bne.n	801105e <__gethex+0x84>
 801106c:	9a01      	ldr	r2, [sp, #4]
 801106e:	9903      	ldr	r1, [sp, #12]
 8011070:	4630      	mov	r0, r6
 8011072:	f001 fd0d 	bl	8012a90 <strncmp>
 8011076:	b950      	cbnz	r0, 801108e <__gethex+0xb4>
 8011078:	b954      	cbnz	r4, 8011090 <__gethex+0xb6>
 801107a:	9b01      	ldr	r3, [sp, #4]
 801107c:	18f4      	adds	r4, r6, r3
 801107e:	4622      	mov	r2, r4
 8011080:	4616      	mov	r6, r2
 8011082:	3201      	adds	r2, #1
 8011084:	7830      	ldrb	r0, [r6, #0]
 8011086:	f7ff ff93 	bl	8010fb0 <__hexdig_fun>
 801108a:	2800      	cmp	r0, #0
 801108c:	d1f8      	bne.n	8011080 <__gethex+0xa6>
 801108e:	b10c      	cbz	r4, 8011094 <__gethex+0xba>
 8011090:	1ba4      	subs	r4, r4, r6
 8011092:	00a4      	lsls	r4, r4, #2
 8011094:	7833      	ldrb	r3, [r6, #0]
 8011096:	2b50      	cmp	r3, #80	; 0x50
 8011098:	d001      	beq.n	801109e <__gethex+0xc4>
 801109a:	2b70      	cmp	r3, #112	; 0x70
 801109c:	d140      	bne.n	8011120 <__gethex+0x146>
 801109e:	7873      	ldrb	r3, [r6, #1]
 80110a0:	2b2b      	cmp	r3, #43	; 0x2b
 80110a2:	d031      	beq.n	8011108 <__gethex+0x12e>
 80110a4:	2b2d      	cmp	r3, #45	; 0x2d
 80110a6:	d033      	beq.n	8011110 <__gethex+0x136>
 80110a8:	1c71      	adds	r1, r6, #1
 80110aa:	f04f 0900 	mov.w	r9, #0
 80110ae:	7808      	ldrb	r0, [r1, #0]
 80110b0:	f7ff ff7e 	bl	8010fb0 <__hexdig_fun>
 80110b4:	1e43      	subs	r3, r0, #1
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	2b18      	cmp	r3, #24
 80110ba:	d831      	bhi.n	8011120 <__gethex+0x146>
 80110bc:	f1a0 0210 	sub.w	r2, r0, #16
 80110c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80110c4:	f7ff ff74 	bl	8010fb0 <__hexdig_fun>
 80110c8:	1e43      	subs	r3, r0, #1
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	2b18      	cmp	r3, #24
 80110ce:	d922      	bls.n	8011116 <__gethex+0x13c>
 80110d0:	f1b9 0f00 	cmp.w	r9, #0
 80110d4:	d000      	beq.n	80110d8 <__gethex+0xfe>
 80110d6:	4252      	negs	r2, r2
 80110d8:	4414      	add	r4, r2
 80110da:	f8ca 1000 	str.w	r1, [sl]
 80110de:	b30d      	cbz	r5, 8011124 <__gethex+0x14a>
 80110e0:	f1bb 0f00 	cmp.w	fp, #0
 80110e4:	bf0c      	ite	eq
 80110e6:	2706      	moveq	r7, #6
 80110e8:	2700      	movne	r7, #0
 80110ea:	4638      	mov	r0, r7
 80110ec:	b00b      	add	sp, #44	; 0x2c
 80110ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f2:	f10b 0b01 	add.w	fp, fp, #1
 80110f6:	e78a      	b.n	801100e <__gethex+0x34>
 80110f8:	2500      	movs	r5, #0
 80110fa:	462c      	mov	r4, r5
 80110fc:	e7ae      	b.n	801105c <__gethex+0x82>
 80110fe:	463e      	mov	r6, r7
 8011100:	2501      	movs	r5, #1
 8011102:	e7c7      	b.n	8011094 <__gethex+0xba>
 8011104:	4604      	mov	r4, r0
 8011106:	e7fb      	b.n	8011100 <__gethex+0x126>
 8011108:	f04f 0900 	mov.w	r9, #0
 801110c:	1cb1      	adds	r1, r6, #2
 801110e:	e7ce      	b.n	80110ae <__gethex+0xd4>
 8011110:	f04f 0901 	mov.w	r9, #1
 8011114:	e7fa      	b.n	801110c <__gethex+0x132>
 8011116:	230a      	movs	r3, #10
 8011118:	fb03 0202 	mla	r2, r3, r2, r0
 801111c:	3a10      	subs	r2, #16
 801111e:	e7cf      	b.n	80110c0 <__gethex+0xe6>
 8011120:	4631      	mov	r1, r6
 8011122:	e7da      	b.n	80110da <__gethex+0x100>
 8011124:	1bf3      	subs	r3, r6, r7
 8011126:	3b01      	subs	r3, #1
 8011128:	4629      	mov	r1, r5
 801112a:	2b07      	cmp	r3, #7
 801112c:	dc49      	bgt.n	80111c2 <__gethex+0x1e8>
 801112e:	9802      	ldr	r0, [sp, #8]
 8011130:	f000 fad6 	bl	80116e0 <_Balloc>
 8011134:	9b01      	ldr	r3, [sp, #4]
 8011136:	f100 0914 	add.w	r9, r0, #20
 801113a:	f04f 0b00 	mov.w	fp, #0
 801113e:	f1c3 0301 	rsb	r3, r3, #1
 8011142:	4605      	mov	r5, r0
 8011144:	f8cd 9010 	str.w	r9, [sp, #16]
 8011148:	46da      	mov	sl, fp
 801114a:	9308      	str	r3, [sp, #32]
 801114c:	42b7      	cmp	r7, r6
 801114e:	d33b      	bcc.n	80111c8 <__gethex+0x1ee>
 8011150:	9804      	ldr	r0, [sp, #16]
 8011152:	f840 ab04 	str.w	sl, [r0], #4
 8011156:	eba0 0009 	sub.w	r0, r0, r9
 801115a:	1080      	asrs	r0, r0, #2
 801115c:	6128      	str	r0, [r5, #16]
 801115e:	0147      	lsls	r7, r0, #5
 8011160:	4650      	mov	r0, sl
 8011162:	f000 fb81 	bl	8011868 <__hi0bits>
 8011166:	f8d8 6000 	ldr.w	r6, [r8]
 801116a:	1a3f      	subs	r7, r7, r0
 801116c:	42b7      	cmp	r7, r6
 801116e:	dd64      	ble.n	801123a <__gethex+0x260>
 8011170:	1bbf      	subs	r7, r7, r6
 8011172:	4639      	mov	r1, r7
 8011174:	4628      	mov	r0, r5
 8011176:	f000 fe92 	bl	8011e9e <__any_on>
 801117a:	4682      	mov	sl, r0
 801117c:	b178      	cbz	r0, 801119e <__gethex+0x1c4>
 801117e:	1e7b      	subs	r3, r7, #1
 8011180:	1159      	asrs	r1, r3, #5
 8011182:	f003 021f 	and.w	r2, r3, #31
 8011186:	f04f 0a01 	mov.w	sl, #1
 801118a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801118e:	fa0a f202 	lsl.w	r2, sl, r2
 8011192:	420a      	tst	r2, r1
 8011194:	d003      	beq.n	801119e <__gethex+0x1c4>
 8011196:	4553      	cmp	r3, sl
 8011198:	dc46      	bgt.n	8011228 <__gethex+0x24e>
 801119a:	f04f 0a02 	mov.w	sl, #2
 801119e:	4639      	mov	r1, r7
 80111a0:	4628      	mov	r0, r5
 80111a2:	f7ff fecb 	bl	8010f3c <rshift>
 80111a6:	443c      	add	r4, r7
 80111a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80111ac:	42a3      	cmp	r3, r4
 80111ae:	da52      	bge.n	8011256 <__gethex+0x27c>
 80111b0:	4629      	mov	r1, r5
 80111b2:	9802      	ldr	r0, [sp, #8]
 80111b4:	f000 fac8 	bl	8011748 <_Bfree>
 80111b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80111ba:	2300      	movs	r3, #0
 80111bc:	6013      	str	r3, [r2, #0]
 80111be:	27a3      	movs	r7, #163	; 0xa3
 80111c0:	e793      	b.n	80110ea <__gethex+0x110>
 80111c2:	3101      	adds	r1, #1
 80111c4:	105b      	asrs	r3, r3, #1
 80111c6:	e7b0      	b.n	801112a <__gethex+0x150>
 80111c8:	1e73      	subs	r3, r6, #1
 80111ca:	9305      	str	r3, [sp, #20]
 80111cc:	9a07      	ldr	r2, [sp, #28]
 80111ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80111d2:	4293      	cmp	r3, r2
 80111d4:	d018      	beq.n	8011208 <__gethex+0x22e>
 80111d6:	f1bb 0f20 	cmp.w	fp, #32
 80111da:	d107      	bne.n	80111ec <__gethex+0x212>
 80111dc:	9b04      	ldr	r3, [sp, #16]
 80111de:	f8c3 a000 	str.w	sl, [r3]
 80111e2:	3304      	adds	r3, #4
 80111e4:	f04f 0a00 	mov.w	sl, #0
 80111e8:	9304      	str	r3, [sp, #16]
 80111ea:	46d3      	mov	fp, sl
 80111ec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80111f0:	f7ff fede 	bl	8010fb0 <__hexdig_fun>
 80111f4:	f000 000f 	and.w	r0, r0, #15
 80111f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80111fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8011200:	f10b 0b04 	add.w	fp, fp, #4
 8011204:	9b05      	ldr	r3, [sp, #20]
 8011206:	e00d      	b.n	8011224 <__gethex+0x24a>
 8011208:	9b05      	ldr	r3, [sp, #20]
 801120a:	9a08      	ldr	r2, [sp, #32]
 801120c:	4413      	add	r3, r2
 801120e:	42bb      	cmp	r3, r7
 8011210:	d3e1      	bcc.n	80111d6 <__gethex+0x1fc>
 8011212:	4618      	mov	r0, r3
 8011214:	9a01      	ldr	r2, [sp, #4]
 8011216:	9903      	ldr	r1, [sp, #12]
 8011218:	9309      	str	r3, [sp, #36]	; 0x24
 801121a:	f001 fc39 	bl	8012a90 <strncmp>
 801121e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011220:	2800      	cmp	r0, #0
 8011222:	d1d8      	bne.n	80111d6 <__gethex+0x1fc>
 8011224:	461e      	mov	r6, r3
 8011226:	e791      	b.n	801114c <__gethex+0x172>
 8011228:	1eb9      	subs	r1, r7, #2
 801122a:	4628      	mov	r0, r5
 801122c:	f000 fe37 	bl	8011e9e <__any_on>
 8011230:	2800      	cmp	r0, #0
 8011232:	d0b2      	beq.n	801119a <__gethex+0x1c0>
 8011234:	f04f 0a03 	mov.w	sl, #3
 8011238:	e7b1      	b.n	801119e <__gethex+0x1c4>
 801123a:	da09      	bge.n	8011250 <__gethex+0x276>
 801123c:	1bf7      	subs	r7, r6, r7
 801123e:	4629      	mov	r1, r5
 8011240:	463a      	mov	r2, r7
 8011242:	9802      	ldr	r0, [sp, #8]
 8011244:	f000 fc4c 	bl	8011ae0 <__lshift>
 8011248:	1be4      	subs	r4, r4, r7
 801124a:	4605      	mov	r5, r0
 801124c:	f100 0914 	add.w	r9, r0, #20
 8011250:	f04f 0a00 	mov.w	sl, #0
 8011254:	e7a8      	b.n	80111a8 <__gethex+0x1ce>
 8011256:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801125a:	42a0      	cmp	r0, r4
 801125c:	dd6a      	ble.n	8011334 <__gethex+0x35a>
 801125e:	1b04      	subs	r4, r0, r4
 8011260:	42a6      	cmp	r6, r4
 8011262:	dc2e      	bgt.n	80112c2 <__gethex+0x2e8>
 8011264:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011268:	2b02      	cmp	r3, #2
 801126a:	d022      	beq.n	80112b2 <__gethex+0x2d8>
 801126c:	2b03      	cmp	r3, #3
 801126e:	d024      	beq.n	80112ba <__gethex+0x2e0>
 8011270:	2b01      	cmp	r3, #1
 8011272:	d115      	bne.n	80112a0 <__gethex+0x2c6>
 8011274:	42a6      	cmp	r6, r4
 8011276:	d113      	bne.n	80112a0 <__gethex+0x2c6>
 8011278:	2e01      	cmp	r6, #1
 801127a:	dc0b      	bgt.n	8011294 <__gethex+0x2ba>
 801127c:	9a06      	ldr	r2, [sp, #24]
 801127e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011282:	6013      	str	r3, [r2, #0]
 8011284:	2301      	movs	r3, #1
 8011286:	612b      	str	r3, [r5, #16]
 8011288:	f8c9 3000 	str.w	r3, [r9]
 801128c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801128e:	2762      	movs	r7, #98	; 0x62
 8011290:	601d      	str	r5, [r3, #0]
 8011292:	e72a      	b.n	80110ea <__gethex+0x110>
 8011294:	1e71      	subs	r1, r6, #1
 8011296:	4628      	mov	r0, r5
 8011298:	f000 fe01 	bl	8011e9e <__any_on>
 801129c:	2800      	cmp	r0, #0
 801129e:	d1ed      	bne.n	801127c <__gethex+0x2a2>
 80112a0:	4629      	mov	r1, r5
 80112a2:	9802      	ldr	r0, [sp, #8]
 80112a4:	f000 fa50 	bl	8011748 <_Bfree>
 80112a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80112aa:	2300      	movs	r3, #0
 80112ac:	6013      	str	r3, [r2, #0]
 80112ae:	2750      	movs	r7, #80	; 0x50
 80112b0:	e71b      	b.n	80110ea <__gethex+0x110>
 80112b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d0e1      	beq.n	801127c <__gethex+0x2a2>
 80112b8:	e7f2      	b.n	80112a0 <__gethex+0x2c6>
 80112ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1dd      	bne.n	801127c <__gethex+0x2a2>
 80112c0:	e7ee      	b.n	80112a0 <__gethex+0x2c6>
 80112c2:	1e67      	subs	r7, r4, #1
 80112c4:	f1ba 0f00 	cmp.w	sl, #0
 80112c8:	d131      	bne.n	801132e <__gethex+0x354>
 80112ca:	b127      	cbz	r7, 80112d6 <__gethex+0x2fc>
 80112cc:	4639      	mov	r1, r7
 80112ce:	4628      	mov	r0, r5
 80112d0:	f000 fde5 	bl	8011e9e <__any_on>
 80112d4:	4682      	mov	sl, r0
 80112d6:	117a      	asrs	r2, r7, #5
 80112d8:	2301      	movs	r3, #1
 80112da:	f007 071f 	and.w	r7, r7, #31
 80112de:	fa03 f707 	lsl.w	r7, r3, r7
 80112e2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80112e6:	4621      	mov	r1, r4
 80112e8:	421f      	tst	r7, r3
 80112ea:	4628      	mov	r0, r5
 80112ec:	bf18      	it	ne
 80112ee:	f04a 0a02 	orrne.w	sl, sl, #2
 80112f2:	1b36      	subs	r6, r6, r4
 80112f4:	f7ff fe22 	bl	8010f3c <rshift>
 80112f8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80112fc:	2702      	movs	r7, #2
 80112fe:	f1ba 0f00 	cmp.w	sl, #0
 8011302:	d048      	beq.n	8011396 <__gethex+0x3bc>
 8011304:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011308:	2b02      	cmp	r3, #2
 801130a:	d015      	beq.n	8011338 <__gethex+0x35e>
 801130c:	2b03      	cmp	r3, #3
 801130e:	d017      	beq.n	8011340 <__gethex+0x366>
 8011310:	2b01      	cmp	r3, #1
 8011312:	d109      	bne.n	8011328 <__gethex+0x34e>
 8011314:	f01a 0f02 	tst.w	sl, #2
 8011318:	d006      	beq.n	8011328 <__gethex+0x34e>
 801131a:	f8d9 3000 	ldr.w	r3, [r9]
 801131e:	ea4a 0a03 	orr.w	sl, sl, r3
 8011322:	f01a 0f01 	tst.w	sl, #1
 8011326:	d10e      	bne.n	8011346 <__gethex+0x36c>
 8011328:	f047 0710 	orr.w	r7, r7, #16
 801132c:	e033      	b.n	8011396 <__gethex+0x3bc>
 801132e:	f04f 0a01 	mov.w	sl, #1
 8011332:	e7d0      	b.n	80112d6 <__gethex+0x2fc>
 8011334:	2701      	movs	r7, #1
 8011336:	e7e2      	b.n	80112fe <__gethex+0x324>
 8011338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801133a:	f1c3 0301 	rsb	r3, r3, #1
 801133e:	9315      	str	r3, [sp, #84]	; 0x54
 8011340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011342:	2b00      	cmp	r3, #0
 8011344:	d0f0      	beq.n	8011328 <__gethex+0x34e>
 8011346:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801134a:	f105 0314 	add.w	r3, r5, #20
 801134e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8011352:	eb03 010a 	add.w	r1, r3, sl
 8011356:	f04f 0c00 	mov.w	ip, #0
 801135a:	4618      	mov	r0, r3
 801135c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011360:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011364:	d01c      	beq.n	80113a0 <__gethex+0x3c6>
 8011366:	3201      	adds	r2, #1
 8011368:	6002      	str	r2, [r0, #0]
 801136a:	2f02      	cmp	r7, #2
 801136c:	f105 0314 	add.w	r3, r5, #20
 8011370:	d138      	bne.n	80113e4 <__gethex+0x40a>
 8011372:	f8d8 2000 	ldr.w	r2, [r8]
 8011376:	3a01      	subs	r2, #1
 8011378:	42b2      	cmp	r2, r6
 801137a:	d10a      	bne.n	8011392 <__gethex+0x3b8>
 801137c:	1171      	asrs	r1, r6, #5
 801137e:	2201      	movs	r2, #1
 8011380:	f006 061f 	and.w	r6, r6, #31
 8011384:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011388:	fa02 f606 	lsl.w	r6, r2, r6
 801138c:	421e      	tst	r6, r3
 801138e:	bf18      	it	ne
 8011390:	4617      	movne	r7, r2
 8011392:	f047 0720 	orr.w	r7, r7, #32
 8011396:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011398:	601d      	str	r5, [r3, #0]
 801139a:	9b06      	ldr	r3, [sp, #24]
 801139c:	601c      	str	r4, [r3, #0]
 801139e:	e6a4      	b.n	80110ea <__gethex+0x110>
 80113a0:	4299      	cmp	r1, r3
 80113a2:	f843 cc04 	str.w	ip, [r3, #-4]
 80113a6:	d8d8      	bhi.n	801135a <__gethex+0x380>
 80113a8:	68ab      	ldr	r3, [r5, #8]
 80113aa:	4599      	cmp	r9, r3
 80113ac:	db12      	blt.n	80113d4 <__gethex+0x3fa>
 80113ae:	6869      	ldr	r1, [r5, #4]
 80113b0:	9802      	ldr	r0, [sp, #8]
 80113b2:	3101      	adds	r1, #1
 80113b4:	f000 f994 	bl	80116e0 <_Balloc>
 80113b8:	692a      	ldr	r2, [r5, #16]
 80113ba:	3202      	adds	r2, #2
 80113bc:	f105 010c 	add.w	r1, r5, #12
 80113c0:	4683      	mov	fp, r0
 80113c2:	0092      	lsls	r2, r2, #2
 80113c4:	300c      	adds	r0, #12
 80113c6:	f7fc fec1 	bl	800e14c <memcpy>
 80113ca:	4629      	mov	r1, r5
 80113cc:	9802      	ldr	r0, [sp, #8]
 80113ce:	f000 f9bb 	bl	8011748 <_Bfree>
 80113d2:	465d      	mov	r5, fp
 80113d4:	692b      	ldr	r3, [r5, #16]
 80113d6:	1c5a      	adds	r2, r3, #1
 80113d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80113dc:	612a      	str	r2, [r5, #16]
 80113de:	2201      	movs	r2, #1
 80113e0:	615a      	str	r2, [r3, #20]
 80113e2:	e7c2      	b.n	801136a <__gethex+0x390>
 80113e4:	692a      	ldr	r2, [r5, #16]
 80113e6:	454a      	cmp	r2, r9
 80113e8:	dd0b      	ble.n	8011402 <__gethex+0x428>
 80113ea:	2101      	movs	r1, #1
 80113ec:	4628      	mov	r0, r5
 80113ee:	f7ff fda5 	bl	8010f3c <rshift>
 80113f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80113f6:	3401      	adds	r4, #1
 80113f8:	42a3      	cmp	r3, r4
 80113fa:	f6ff aed9 	blt.w	80111b0 <__gethex+0x1d6>
 80113fe:	2701      	movs	r7, #1
 8011400:	e7c7      	b.n	8011392 <__gethex+0x3b8>
 8011402:	f016 061f 	ands.w	r6, r6, #31
 8011406:	d0fa      	beq.n	80113fe <__gethex+0x424>
 8011408:	449a      	add	sl, r3
 801140a:	f1c6 0620 	rsb	r6, r6, #32
 801140e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011412:	f000 fa29 	bl	8011868 <__hi0bits>
 8011416:	42b0      	cmp	r0, r6
 8011418:	dbe7      	blt.n	80113ea <__gethex+0x410>
 801141a:	e7f0      	b.n	80113fe <__gethex+0x424>

0801141c <L_shift>:
 801141c:	f1c2 0208 	rsb	r2, r2, #8
 8011420:	0092      	lsls	r2, r2, #2
 8011422:	b570      	push	{r4, r5, r6, lr}
 8011424:	f1c2 0620 	rsb	r6, r2, #32
 8011428:	6843      	ldr	r3, [r0, #4]
 801142a:	6804      	ldr	r4, [r0, #0]
 801142c:	fa03 f506 	lsl.w	r5, r3, r6
 8011430:	432c      	orrs	r4, r5
 8011432:	40d3      	lsrs	r3, r2
 8011434:	6004      	str	r4, [r0, #0]
 8011436:	f840 3f04 	str.w	r3, [r0, #4]!
 801143a:	4288      	cmp	r0, r1
 801143c:	d3f4      	bcc.n	8011428 <L_shift+0xc>
 801143e:	bd70      	pop	{r4, r5, r6, pc}

08011440 <__match>:
 8011440:	b530      	push	{r4, r5, lr}
 8011442:	6803      	ldr	r3, [r0, #0]
 8011444:	3301      	adds	r3, #1
 8011446:	f811 4b01 	ldrb.w	r4, [r1], #1
 801144a:	b914      	cbnz	r4, 8011452 <__match+0x12>
 801144c:	6003      	str	r3, [r0, #0]
 801144e:	2001      	movs	r0, #1
 8011450:	bd30      	pop	{r4, r5, pc}
 8011452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011456:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801145a:	2d19      	cmp	r5, #25
 801145c:	bf98      	it	ls
 801145e:	3220      	addls	r2, #32
 8011460:	42a2      	cmp	r2, r4
 8011462:	d0f0      	beq.n	8011446 <__match+0x6>
 8011464:	2000      	movs	r0, #0
 8011466:	e7f3      	b.n	8011450 <__match+0x10>

08011468 <__hexnan>:
 8011468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146c:	680b      	ldr	r3, [r1, #0]
 801146e:	6801      	ldr	r1, [r0, #0]
 8011470:	115f      	asrs	r7, r3, #5
 8011472:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011476:	f013 031f 	ands.w	r3, r3, #31
 801147a:	b087      	sub	sp, #28
 801147c:	bf18      	it	ne
 801147e:	3704      	addne	r7, #4
 8011480:	2500      	movs	r5, #0
 8011482:	1f3e      	subs	r6, r7, #4
 8011484:	4682      	mov	sl, r0
 8011486:	4690      	mov	r8, r2
 8011488:	9301      	str	r3, [sp, #4]
 801148a:	f847 5c04 	str.w	r5, [r7, #-4]
 801148e:	46b1      	mov	r9, r6
 8011490:	4634      	mov	r4, r6
 8011492:	9502      	str	r5, [sp, #8]
 8011494:	46ab      	mov	fp, r5
 8011496:	784a      	ldrb	r2, [r1, #1]
 8011498:	1c4b      	adds	r3, r1, #1
 801149a:	9303      	str	r3, [sp, #12]
 801149c:	b342      	cbz	r2, 80114f0 <__hexnan+0x88>
 801149e:	4610      	mov	r0, r2
 80114a0:	9105      	str	r1, [sp, #20]
 80114a2:	9204      	str	r2, [sp, #16]
 80114a4:	f7ff fd84 	bl	8010fb0 <__hexdig_fun>
 80114a8:	2800      	cmp	r0, #0
 80114aa:	d143      	bne.n	8011534 <__hexnan+0xcc>
 80114ac:	9a04      	ldr	r2, [sp, #16]
 80114ae:	9905      	ldr	r1, [sp, #20]
 80114b0:	2a20      	cmp	r2, #32
 80114b2:	d818      	bhi.n	80114e6 <__hexnan+0x7e>
 80114b4:	9b02      	ldr	r3, [sp, #8]
 80114b6:	459b      	cmp	fp, r3
 80114b8:	dd13      	ble.n	80114e2 <__hexnan+0x7a>
 80114ba:	454c      	cmp	r4, r9
 80114bc:	d206      	bcs.n	80114cc <__hexnan+0x64>
 80114be:	2d07      	cmp	r5, #7
 80114c0:	dc04      	bgt.n	80114cc <__hexnan+0x64>
 80114c2:	462a      	mov	r2, r5
 80114c4:	4649      	mov	r1, r9
 80114c6:	4620      	mov	r0, r4
 80114c8:	f7ff ffa8 	bl	801141c <L_shift>
 80114cc:	4544      	cmp	r4, r8
 80114ce:	d944      	bls.n	801155a <__hexnan+0xf2>
 80114d0:	2300      	movs	r3, #0
 80114d2:	f1a4 0904 	sub.w	r9, r4, #4
 80114d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80114da:	f8cd b008 	str.w	fp, [sp, #8]
 80114de:	464c      	mov	r4, r9
 80114e0:	461d      	mov	r5, r3
 80114e2:	9903      	ldr	r1, [sp, #12]
 80114e4:	e7d7      	b.n	8011496 <__hexnan+0x2e>
 80114e6:	2a29      	cmp	r2, #41	; 0x29
 80114e8:	d14a      	bne.n	8011580 <__hexnan+0x118>
 80114ea:	3102      	adds	r1, #2
 80114ec:	f8ca 1000 	str.w	r1, [sl]
 80114f0:	f1bb 0f00 	cmp.w	fp, #0
 80114f4:	d044      	beq.n	8011580 <__hexnan+0x118>
 80114f6:	454c      	cmp	r4, r9
 80114f8:	d206      	bcs.n	8011508 <__hexnan+0xa0>
 80114fa:	2d07      	cmp	r5, #7
 80114fc:	dc04      	bgt.n	8011508 <__hexnan+0xa0>
 80114fe:	462a      	mov	r2, r5
 8011500:	4649      	mov	r1, r9
 8011502:	4620      	mov	r0, r4
 8011504:	f7ff ff8a 	bl	801141c <L_shift>
 8011508:	4544      	cmp	r4, r8
 801150a:	d928      	bls.n	801155e <__hexnan+0xf6>
 801150c:	4643      	mov	r3, r8
 801150e:	f854 2b04 	ldr.w	r2, [r4], #4
 8011512:	f843 2b04 	str.w	r2, [r3], #4
 8011516:	42a6      	cmp	r6, r4
 8011518:	d2f9      	bcs.n	801150e <__hexnan+0xa6>
 801151a:	2200      	movs	r2, #0
 801151c:	f843 2b04 	str.w	r2, [r3], #4
 8011520:	429e      	cmp	r6, r3
 8011522:	d2fb      	bcs.n	801151c <__hexnan+0xb4>
 8011524:	6833      	ldr	r3, [r6, #0]
 8011526:	b91b      	cbnz	r3, 8011530 <__hexnan+0xc8>
 8011528:	4546      	cmp	r6, r8
 801152a:	d127      	bne.n	801157c <__hexnan+0x114>
 801152c:	2301      	movs	r3, #1
 801152e:	6033      	str	r3, [r6, #0]
 8011530:	2005      	movs	r0, #5
 8011532:	e026      	b.n	8011582 <__hexnan+0x11a>
 8011534:	3501      	adds	r5, #1
 8011536:	2d08      	cmp	r5, #8
 8011538:	f10b 0b01 	add.w	fp, fp, #1
 801153c:	dd06      	ble.n	801154c <__hexnan+0xe4>
 801153e:	4544      	cmp	r4, r8
 8011540:	d9cf      	bls.n	80114e2 <__hexnan+0x7a>
 8011542:	2300      	movs	r3, #0
 8011544:	f844 3c04 	str.w	r3, [r4, #-4]
 8011548:	2501      	movs	r5, #1
 801154a:	3c04      	subs	r4, #4
 801154c:	6822      	ldr	r2, [r4, #0]
 801154e:	f000 000f 	and.w	r0, r0, #15
 8011552:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011556:	6020      	str	r0, [r4, #0]
 8011558:	e7c3      	b.n	80114e2 <__hexnan+0x7a>
 801155a:	2508      	movs	r5, #8
 801155c:	e7c1      	b.n	80114e2 <__hexnan+0x7a>
 801155e:	9b01      	ldr	r3, [sp, #4]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d0df      	beq.n	8011524 <__hexnan+0xbc>
 8011564:	f04f 32ff 	mov.w	r2, #4294967295
 8011568:	f1c3 0320 	rsb	r3, r3, #32
 801156c:	fa22 f303 	lsr.w	r3, r2, r3
 8011570:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011574:	401a      	ands	r2, r3
 8011576:	f847 2c04 	str.w	r2, [r7, #-4]
 801157a:	e7d3      	b.n	8011524 <__hexnan+0xbc>
 801157c:	3e04      	subs	r6, #4
 801157e:	e7d1      	b.n	8011524 <__hexnan+0xbc>
 8011580:	2004      	movs	r0, #4
 8011582:	b007      	add	sp, #28
 8011584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011588 <__locale_ctype_ptr_l>:
 8011588:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801158c:	4770      	bx	lr
	...

08011590 <__locale_ctype_ptr>:
 8011590:	4b04      	ldr	r3, [pc, #16]	; (80115a4 <__locale_ctype_ptr+0x14>)
 8011592:	4a05      	ldr	r2, [pc, #20]	; (80115a8 <__locale_ctype_ptr+0x18>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	6a1b      	ldr	r3, [r3, #32]
 8011598:	2b00      	cmp	r3, #0
 801159a:	bf08      	it	eq
 801159c:	4613      	moveq	r3, r2
 801159e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80115a2:	4770      	bx	lr
 80115a4:	20000344 	.word	0x20000344
 80115a8:	200003a8 	.word	0x200003a8

080115ac <__localeconv_l>:
 80115ac:	30f0      	adds	r0, #240	; 0xf0
 80115ae:	4770      	bx	lr

080115b0 <_localeconv_r>:
 80115b0:	4b04      	ldr	r3, [pc, #16]	; (80115c4 <_localeconv_r+0x14>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	6a18      	ldr	r0, [r3, #32]
 80115b6:	4b04      	ldr	r3, [pc, #16]	; (80115c8 <_localeconv_r+0x18>)
 80115b8:	2800      	cmp	r0, #0
 80115ba:	bf08      	it	eq
 80115bc:	4618      	moveq	r0, r3
 80115be:	30f0      	adds	r0, #240	; 0xf0
 80115c0:	4770      	bx	lr
 80115c2:	bf00      	nop
 80115c4:	20000344 	.word	0x20000344
 80115c8:	200003a8 	.word	0x200003a8

080115cc <_lseek_r>:
 80115cc:	b538      	push	{r3, r4, r5, lr}
 80115ce:	4c07      	ldr	r4, [pc, #28]	; (80115ec <_lseek_r+0x20>)
 80115d0:	4605      	mov	r5, r0
 80115d2:	4608      	mov	r0, r1
 80115d4:	4611      	mov	r1, r2
 80115d6:	2200      	movs	r2, #0
 80115d8:	6022      	str	r2, [r4, #0]
 80115da:	461a      	mov	r2, r3
 80115dc:	f001 fbd0 	bl	8012d80 <_lseek>
 80115e0:	1c43      	adds	r3, r0, #1
 80115e2:	d102      	bne.n	80115ea <_lseek_r+0x1e>
 80115e4:	6823      	ldr	r3, [r4, #0]
 80115e6:	b103      	cbz	r3, 80115ea <_lseek_r+0x1e>
 80115e8:	602b      	str	r3, [r5, #0]
 80115ea:	bd38      	pop	{r3, r4, r5, pc}
 80115ec:	2000e484 	.word	0x2000e484

080115f0 <__swhatbuf_r>:
 80115f0:	b570      	push	{r4, r5, r6, lr}
 80115f2:	460e      	mov	r6, r1
 80115f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115f8:	2900      	cmp	r1, #0
 80115fa:	b096      	sub	sp, #88	; 0x58
 80115fc:	4614      	mov	r4, r2
 80115fe:	461d      	mov	r5, r3
 8011600:	da07      	bge.n	8011612 <__swhatbuf_r+0x22>
 8011602:	2300      	movs	r3, #0
 8011604:	602b      	str	r3, [r5, #0]
 8011606:	89b3      	ldrh	r3, [r6, #12]
 8011608:	061a      	lsls	r2, r3, #24
 801160a:	d410      	bmi.n	801162e <__swhatbuf_r+0x3e>
 801160c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011610:	e00e      	b.n	8011630 <__swhatbuf_r+0x40>
 8011612:	466a      	mov	r2, sp
 8011614:	f001 fb22 	bl	8012c5c <_fstat_r>
 8011618:	2800      	cmp	r0, #0
 801161a:	dbf2      	blt.n	8011602 <__swhatbuf_r+0x12>
 801161c:	9a01      	ldr	r2, [sp, #4]
 801161e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011622:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011626:	425a      	negs	r2, r3
 8011628:	415a      	adcs	r2, r3
 801162a:	602a      	str	r2, [r5, #0]
 801162c:	e7ee      	b.n	801160c <__swhatbuf_r+0x1c>
 801162e:	2340      	movs	r3, #64	; 0x40
 8011630:	2000      	movs	r0, #0
 8011632:	6023      	str	r3, [r4, #0]
 8011634:	b016      	add	sp, #88	; 0x58
 8011636:	bd70      	pop	{r4, r5, r6, pc}

08011638 <__smakebuf_r>:
 8011638:	898b      	ldrh	r3, [r1, #12]
 801163a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801163c:	079d      	lsls	r5, r3, #30
 801163e:	4606      	mov	r6, r0
 8011640:	460c      	mov	r4, r1
 8011642:	d507      	bpl.n	8011654 <__smakebuf_r+0x1c>
 8011644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	6123      	str	r3, [r4, #16]
 801164c:	2301      	movs	r3, #1
 801164e:	6163      	str	r3, [r4, #20]
 8011650:	b002      	add	sp, #8
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	ab01      	add	r3, sp, #4
 8011656:	466a      	mov	r2, sp
 8011658:	f7ff ffca 	bl	80115f0 <__swhatbuf_r>
 801165c:	9900      	ldr	r1, [sp, #0]
 801165e:	4605      	mov	r5, r0
 8011660:	4630      	mov	r0, r6
 8011662:	f7fc fde3 	bl	800e22c <_malloc_r>
 8011666:	b948      	cbnz	r0, 801167c <__smakebuf_r+0x44>
 8011668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801166c:	059a      	lsls	r2, r3, #22
 801166e:	d4ef      	bmi.n	8011650 <__smakebuf_r+0x18>
 8011670:	f023 0303 	bic.w	r3, r3, #3
 8011674:	f043 0302 	orr.w	r3, r3, #2
 8011678:	81a3      	strh	r3, [r4, #12]
 801167a:	e7e3      	b.n	8011644 <__smakebuf_r+0xc>
 801167c:	4b0d      	ldr	r3, [pc, #52]	; (80116b4 <__smakebuf_r+0x7c>)
 801167e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011680:	89a3      	ldrh	r3, [r4, #12]
 8011682:	6020      	str	r0, [r4, #0]
 8011684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011688:	81a3      	strh	r3, [r4, #12]
 801168a:	9b00      	ldr	r3, [sp, #0]
 801168c:	6163      	str	r3, [r4, #20]
 801168e:	9b01      	ldr	r3, [sp, #4]
 8011690:	6120      	str	r0, [r4, #16]
 8011692:	b15b      	cbz	r3, 80116ac <__smakebuf_r+0x74>
 8011694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011698:	4630      	mov	r0, r6
 801169a:	f001 faf1 	bl	8012c80 <_isatty_r>
 801169e:	b128      	cbz	r0, 80116ac <__smakebuf_r+0x74>
 80116a0:	89a3      	ldrh	r3, [r4, #12]
 80116a2:	f023 0303 	bic.w	r3, r3, #3
 80116a6:	f043 0301 	orr.w	r3, r3, #1
 80116aa:	81a3      	strh	r3, [r4, #12]
 80116ac:	89a3      	ldrh	r3, [r4, #12]
 80116ae:	431d      	orrs	r5, r3
 80116b0:	81a5      	strh	r5, [r4, #12]
 80116b2:	e7cd      	b.n	8011650 <__smakebuf_r+0x18>
 80116b4:	08010df1 	.word	0x08010df1

080116b8 <__ascii_mbtowc>:
 80116b8:	b082      	sub	sp, #8
 80116ba:	b901      	cbnz	r1, 80116be <__ascii_mbtowc+0x6>
 80116bc:	a901      	add	r1, sp, #4
 80116be:	b142      	cbz	r2, 80116d2 <__ascii_mbtowc+0x1a>
 80116c0:	b14b      	cbz	r3, 80116d6 <__ascii_mbtowc+0x1e>
 80116c2:	7813      	ldrb	r3, [r2, #0]
 80116c4:	600b      	str	r3, [r1, #0]
 80116c6:	7812      	ldrb	r2, [r2, #0]
 80116c8:	1c10      	adds	r0, r2, #0
 80116ca:	bf18      	it	ne
 80116cc:	2001      	movne	r0, #1
 80116ce:	b002      	add	sp, #8
 80116d0:	4770      	bx	lr
 80116d2:	4610      	mov	r0, r2
 80116d4:	e7fb      	b.n	80116ce <__ascii_mbtowc+0x16>
 80116d6:	f06f 0001 	mvn.w	r0, #1
 80116da:	e7f8      	b.n	80116ce <__ascii_mbtowc+0x16>

080116dc <__malloc_lock>:
 80116dc:	4770      	bx	lr

080116de <__malloc_unlock>:
 80116de:	4770      	bx	lr

080116e0 <_Balloc>:
 80116e0:	b570      	push	{r4, r5, r6, lr}
 80116e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80116e4:	4604      	mov	r4, r0
 80116e6:	460e      	mov	r6, r1
 80116e8:	b93d      	cbnz	r5, 80116fa <_Balloc+0x1a>
 80116ea:	2010      	movs	r0, #16
 80116ec:	f7fc fd26 	bl	800e13c <malloc>
 80116f0:	6260      	str	r0, [r4, #36]	; 0x24
 80116f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80116f6:	6005      	str	r5, [r0, #0]
 80116f8:	60c5      	str	r5, [r0, #12]
 80116fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80116fc:	68eb      	ldr	r3, [r5, #12]
 80116fe:	b183      	cbz	r3, 8011722 <_Balloc+0x42>
 8011700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011708:	b9b8      	cbnz	r0, 801173a <_Balloc+0x5a>
 801170a:	2101      	movs	r1, #1
 801170c:	fa01 f506 	lsl.w	r5, r1, r6
 8011710:	1d6a      	adds	r2, r5, #5
 8011712:	0092      	lsls	r2, r2, #2
 8011714:	4620      	mov	r0, r4
 8011716:	f7fc fd2c 	bl	800e172 <_calloc_r>
 801171a:	b160      	cbz	r0, 8011736 <_Balloc+0x56>
 801171c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011720:	e00e      	b.n	8011740 <_Balloc+0x60>
 8011722:	2221      	movs	r2, #33	; 0x21
 8011724:	2104      	movs	r1, #4
 8011726:	4620      	mov	r0, r4
 8011728:	f7fc fd23 	bl	800e172 <_calloc_r>
 801172c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801172e:	60e8      	str	r0, [r5, #12]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d1e4      	bne.n	8011700 <_Balloc+0x20>
 8011736:	2000      	movs	r0, #0
 8011738:	bd70      	pop	{r4, r5, r6, pc}
 801173a:	6802      	ldr	r2, [r0, #0]
 801173c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011740:	2300      	movs	r3, #0
 8011742:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011746:	e7f7      	b.n	8011738 <_Balloc+0x58>

08011748 <_Bfree>:
 8011748:	b570      	push	{r4, r5, r6, lr}
 801174a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801174c:	4606      	mov	r6, r0
 801174e:	460d      	mov	r5, r1
 8011750:	b93c      	cbnz	r4, 8011762 <_Bfree+0x1a>
 8011752:	2010      	movs	r0, #16
 8011754:	f7fc fcf2 	bl	800e13c <malloc>
 8011758:	6270      	str	r0, [r6, #36]	; 0x24
 801175a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801175e:	6004      	str	r4, [r0, #0]
 8011760:	60c4      	str	r4, [r0, #12]
 8011762:	b13d      	cbz	r5, 8011774 <_Bfree+0x2c>
 8011764:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011766:	686a      	ldr	r2, [r5, #4]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801176e:	6029      	str	r1, [r5, #0]
 8011770:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011774:	bd70      	pop	{r4, r5, r6, pc}

08011776 <__multadd>:
 8011776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801177a:	690d      	ldr	r5, [r1, #16]
 801177c:	461f      	mov	r7, r3
 801177e:	4606      	mov	r6, r0
 8011780:	460c      	mov	r4, r1
 8011782:	f101 0c14 	add.w	ip, r1, #20
 8011786:	2300      	movs	r3, #0
 8011788:	f8dc 0000 	ldr.w	r0, [ip]
 801178c:	b281      	uxth	r1, r0
 801178e:	fb02 7101 	mla	r1, r2, r1, r7
 8011792:	0c0f      	lsrs	r7, r1, #16
 8011794:	0c00      	lsrs	r0, r0, #16
 8011796:	fb02 7000 	mla	r0, r2, r0, r7
 801179a:	b289      	uxth	r1, r1
 801179c:	3301      	adds	r3, #1
 801179e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80117a2:	429d      	cmp	r5, r3
 80117a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80117a8:	f84c 1b04 	str.w	r1, [ip], #4
 80117ac:	dcec      	bgt.n	8011788 <__multadd+0x12>
 80117ae:	b1d7      	cbz	r7, 80117e6 <__multadd+0x70>
 80117b0:	68a3      	ldr	r3, [r4, #8]
 80117b2:	42ab      	cmp	r3, r5
 80117b4:	dc12      	bgt.n	80117dc <__multadd+0x66>
 80117b6:	6861      	ldr	r1, [r4, #4]
 80117b8:	4630      	mov	r0, r6
 80117ba:	3101      	adds	r1, #1
 80117bc:	f7ff ff90 	bl	80116e0 <_Balloc>
 80117c0:	6922      	ldr	r2, [r4, #16]
 80117c2:	3202      	adds	r2, #2
 80117c4:	f104 010c 	add.w	r1, r4, #12
 80117c8:	4680      	mov	r8, r0
 80117ca:	0092      	lsls	r2, r2, #2
 80117cc:	300c      	adds	r0, #12
 80117ce:	f7fc fcbd 	bl	800e14c <memcpy>
 80117d2:	4621      	mov	r1, r4
 80117d4:	4630      	mov	r0, r6
 80117d6:	f7ff ffb7 	bl	8011748 <_Bfree>
 80117da:	4644      	mov	r4, r8
 80117dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117e0:	3501      	adds	r5, #1
 80117e2:	615f      	str	r7, [r3, #20]
 80117e4:	6125      	str	r5, [r4, #16]
 80117e6:	4620      	mov	r0, r4
 80117e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117ec <__s2b>:
 80117ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117f0:	460c      	mov	r4, r1
 80117f2:	4615      	mov	r5, r2
 80117f4:	461f      	mov	r7, r3
 80117f6:	2209      	movs	r2, #9
 80117f8:	3308      	adds	r3, #8
 80117fa:	4606      	mov	r6, r0
 80117fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011800:	2100      	movs	r1, #0
 8011802:	2201      	movs	r2, #1
 8011804:	429a      	cmp	r2, r3
 8011806:	db20      	blt.n	801184a <__s2b+0x5e>
 8011808:	4630      	mov	r0, r6
 801180a:	f7ff ff69 	bl	80116e0 <_Balloc>
 801180e:	9b08      	ldr	r3, [sp, #32]
 8011810:	6143      	str	r3, [r0, #20]
 8011812:	2d09      	cmp	r5, #9
 8011814:	f04f 0301 	mov.w	r3, #1
 8011818:	6103      	str	r3, [r0, #16]
 801181a:	dd19      	ble.n	8011850 <__s2b+0x64>
 801181c:	f104 0809 	add.w	r8, r4, #9
 8011820:	46c1      	mov	r9, r8
 8011822:	442c      	add	r4, r5
 8011824:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011828:	4601      	mov	r1, r0
 801182a:	3b30      	subs	r3, #48	; 0x30
 801182c:	220a      	movs	r2, #10
 801182e:	4630      	mov	r0, r6
 8011830:	f7ff ffa1 	bl	8011776 <__multadd>
 8011834:	45a1      	cmp	r9, r4
 8011836:	d1f5      	bne.n	8011824 <__s2b+0x38>
 8011838:	eb08 0405 	add.w	r4, r8, r5
 801183c:	3c08      	subs	r4, #8
 801183e:	1b2d      	subs	r5, r5, r4
 8011840:	1963      	adds	r3, r4, r5
 8011842:	42bb      	cmp	r3, r7
 8011844:	db07      	blt.n	8011856 <__s2b+0x6a>
 8011846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801184a:	0052      	lsls	r2, r2, #1
 801184c:	3101      	adds	r1, #1
 801184e:	e7d9      	b.n	8011804 <__s2b+0x18>
 8011850:	340a      	adds	r4, #10
 8011852:	2509      	movs	r5, #9
 8011854:	e7f3      	b.n	801183e <__s2b+0x52>
 8011856:	f814 3b01 	ldrb.w	r3, [r4], #1
 801185a:	4601      	mov	r1, r0
 801185c:	3b30      	subs	r3, #48	; 0x30
 801185e:	220a      	movs	r2, #10
 8011860:	4630      	mov	r0, r6
 8011862:	f7ff ff88 	bl	8011776 <__multadd>
 8011866:	e7eb      	b.n	8011840 <__s2b+0x54>

08011868 <__hi0bits>:
 8011868:	0c02      	lsrs	r2, r0, #16
 801186a:	0412      	lsls	r2, r2, #16
 801186c:	4603      	mov	r3, r0
 801186e:	b9b2      	cbnz	r2, 801189e <__hi0bits+0x36>
 8011870:	0403      	lsls	r3, r0, #16
 8011872:	2010      	movs	r0, #16
 8011874:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011878:	bf04      	itt	eq
 801187a:	021b      	lsleq	r3, r3, #8
 801187c:	3008      	addeq	r0, #8
 801187e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011882:	bf04      	itt	eq
 8011884:	011b      	lsleq	r3, r3, #4
 8011886:	3004      	addeq	r0, #4
 8011888:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801188c:	bf04      	itt	eq
 801188e:	009b      	lsleq	r3, r3, #2
 8011890:	3002      	addeq	r0, #2
 8011892:	2b00      	cmp	r3, #0
 8011894:	db06      	blt.n	80118a4 <__hi0bits+0x3c>
 8011896:	005b      	lsls	r3, r3, #1
 8011898:	d503      	bpl.n	80118a2 <__hi0bits+0x3a>
 801189a:	3001      	adds	r0, #1
 801189c:	4770      	bx	lr
 801189e:	2000      	movs	r0, #0
 80118a0:	e7e8      	b.n	8011874 <__hi0bits+0xc>
 80118a2:	2020      	movs	r0, #32
 80118a4:	4770      	bx	lr

080118a6 <__lo0bits>:
 80118a6:	6803      	ldr	r3, [r0, #0]
 80118a8:	f013 0207 	ands.w	r2, r3, #7
 80118ac:	4601      	mov	r1, r0
 80118ae:	d00b      	beq.n	80118c8 <__lo0bits+0x22>
 80118b0:	07da      	lsls	r2, r3, #31
 80118b2:	d423      	bmi.n	80118fc <__lo0bits+0x56>
 80118b4:	0798      	lsls	r0, r3, #30
 80118b6:	bf49      	itett	mi
 80118b8:	085b      	lsrmi	r3, r3, #1
 80118ba:	089b      	lsrpl	r3, r3, #2
 80118bc:	2001      	movmi	r0, #1
 80118be:	600b      	strmi	r3, [r1, #0]
 80118c0:	bf5c      	itt	pl
 80118c2:	600b      	strpl	r3, [r1, #0]
 80118c4:	2002      	movpl	r0, #2
 80118c6:	4770      	bx	lr
 80118c8:	b298      	uxth	r0, r3
 80118ca:	b9a8      	cbnz	r0, 80118f8 <__lo0bits+0x52>
 80118cc:	0c1b      	lsrs	r3, r3, #16
 80118ce:	2010      	movs	r0, #16
 80118d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80118d4:	bf04      	itt	eq
 80118d6:	0a1b      	lsreq	r3, r3, #8
 80118d8:	3008      	addeq	r0, #8
 80118da:	071a      	lsls	r2, r3, #28
 80118dc:	bf04      	itt	eq
 80118de:	091b      	lsreq	r3, r3, #4
 80118e0:	3004      	addeq	r0, #4
 80118e2:	079a      	lsls	r2, r3, #30
 80118e4:	bf04      	itt	eq
 80118e6:	089b      	lsreq	r3, r3, #2
 80118e8:	3002      	addeq	r0, #2
 80118ea:	07da      	lsls	r2, r3, #31
 80118ec:	d402      	bmi.n	80118f4 <__lo0bits+0x4e>
 80118ee:	085b      	lsrs	r3, r3, #1
 80118f0:	d006      	beq.n	8011900 <__lo0bits+0x5a>
 80118f2:	3001      	adds	r0, #1
 80118f4:	600b      	str	r3, [r1, #0]
 80118f6:	4770      	bx	lr
 80118f8:	4610      	mov	r0, r2
 80118fa:	e7e9      	b.n	80118d0 <__lo0bits+0x2a>
 80118fc:	2000      	movs	r0, #0
 80118fe:	4770      	bx	lr
 8011900:	2020      	movs	r0, #32
 8011902:	4770      	bx	lr

08011904 <__i2b>:
 8011904:	b510      	push	{r4, lr}
 8011906:	460c      	mov	r4, r1
 8011908:	2101      	movs	r1, #1
 801190a:	f7ff fee9 	bl	80116e0 <_Balloc>
 801190e:	2201      	movs	r2, #1
 8011910:	6144      	str	r4, [r0, #20]
 8011912:	6102      	str	r2, [r0, #16]
 8011914:	bd10      	pop	{r4, pc}

08011916 <__multiply>:
 8011916:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801191a:	4614      	mov	r4, r2
 801191c:	690a      	ldr	r2, [r1, #16]
 801191e:	6923      	ldr	r3, [r4, #16]
 8011920:	429a      	cmp	r2, r3
 8011922:	bfb8      	it	lt
 8011924:	460b      	movlt	r3, r1
 8011926:	4688      	mov	r8, r1
 8011928:	bfbc      	itt	lt
 801192a:	46a0      	movlt	r8, r4
 801192c:	461c      	movlt	r4, r3
 801192e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011932:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011936:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801193a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801193e:	eb07 0609 	add.w	r6, r7, r9
 8011942:	42b3      	cmp	r3, r6
 8011944:	bfb8      	it	lt
 8011946:	3101      	addlt	r1, #1
 8011948:	f7ff feca 	bl	80116e0 <_Balloc>
 801194c:	f100 0514 	add.w	r5, r0, #20
 8011950:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011954:	462b      	mov	r3, r5
 8011956:	2200      	movs	r2, #0
 8011958:	4573      	cmp	r3, lr
 801195a:	d316      	bcc.n	801198a <__multiply+0x74>
 801195c:	f104 0214 	add.w	r2, r4, #20
 8011960:	f108 0114 	add.w	r1, r8, #20
 8011964:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011968:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801196c:	9300      	str	r3, [sp, #0]
 801196e:	9b00      	ldr	r3, [sp, #0]
 8011970:	9201      	str	r2, [sp, #4]
 8011972:	4293      	cmp	r3, r2
 8011974:	d80c      	bhi.n	8011990 <__multiply+0x7a>
 8011976:	2e00      	cmp	r6, #0
 8011978:	dd03      	ble.n	8011982 <__multiply+0x6c>
 801197a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801197e:	2b00      	cmp	r3, #0
 8011980:	d05d      	beq.n	8011a3e <__multiply+0x128>
 8011982:	6106      	str	r6, [r0, #16]
 8011984:	b003      	add	sp, #12
 8011986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801198a:	f843 2b04 	str.w	r2, [r3], #4
 801198e:	e7e3      	b.n	8011958 <__multiply+0x42>
 8011990:	f8b2 b000 	ldrh.w	fp, [r2]
 8011994:	f1bb 0f00 	cmp.w	fp, #0
 8011998:	d023      	beq.n	80119e2 <__multiply+0xcc>
 801199a:	4689      	mov	r9, r1
 801199c:	46ac      	mov	ip, r5
 801199e:	f04f 0800 	mov.w	r8, #0
 80119a2:	f859 4b04 	ldr.w	r4, [r9], #4
 80119a6:	f8dc a000 	ldr.w	sl, [ip]
 80119aa:	b2a3      	uxth	r3, r4
 80119ac:	fa1f fa8a 	uxth.w	sl, sl
 80119b0:	fb0b a303 	mla	r3, fp, r3, sl
 80119b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80119b8:	f8dc 4000 	ldr.w	r4, [ip]
 80119bc:	4443      	add	r3, r8
 80119be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80119c2:	fb0b 840a 	mla	r4, fp, sl, r8
 80119c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80119ca:	46e2      	mov	sl, ip
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80119d2:	454f      	cmp	r7, r9
 80119d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80119d8:	f84a 3b04 	str.w	r3, [sl], #4
 80119dc:	d82b      	bhi.n	8011a36 <__multiply+0x120>
 80119de:	f8cc 8004 	str.w	r8, [ip, #4]
 80119e2:	9b01      	ldr	r3, [sp, #4]
 80119e4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80119e8:	3204      	adds	r2, #4
 80119ea:	f1ba 0f00 	cmp.w	sl, #0
 80119ee:	d020      	beq.n	8011a32 <__multiply+0x11c>
 80119f0:	682b      	ldr	r3, [r5, #0]
 80119f2:	4689      	mov	r9, r1
 80119f4:	46a8      	mov	r8, r5
 80119f6:	f04f 0b00 	mov.w	fp, #0
 80119fa:	f8b9 c000 	ldrh.w	ip, [r9]
 80119fe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011a02:	fb0a 440c 	mla	r4, sl, ip, r4
 8011a06:	445c      	add	r4, fp
 8011a08:	46c4      	mov	ip, r8
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011a10:	f84c 3b04 	str.w	r3, [ip], #4
 8011a14:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a18:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011a1c:	0c1b      	lsrs	r3, r3, #16
 8011a1e:	fb0a b303 	mla	r3, sl, r3, fp
 8011a22:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011a26:	454f      	cmp	r7, r9
 8011a28:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011a2c:	d805      	bhi.n	8011a3a <__multiply+0x124>
 8011a2e:	f8c8 3004 	str.w	r3, [r8, #4]
 8011a32:	3504      	adds	r5, #4
 8011a34:	e79b      	b.n	801196e <__multiply+0x58>
 8011a36:	46d4      	mov	ip, sl
 8011a38:	e7b3      	b.n	80119a2 <__multiply+0x8c>
 8011a3a:	46e0      	mov	r8, ip
 8011a3c:	e7dd      	b.n	80119fa <__multiply+0xe4>
 8011a3e:	3e01      	subs	r6, #1
 8011a40:	e799      	b.n	8011976 <__multiply+0x60>
	...

08011a44 <__pow5mult>:
 8011a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a48:	4615      	mov	r5, r2
 8011a4a:	f012 0203 	ands.w	r2, r2, #3
 8011a4e:	4606      	mov	r6, r0
 8011a50:	460f      	mov	r7, r1
 8011a52:	d007      	beq.n	8011a64 <__pow5mult+0x20>
 8011a54:	3a01      	subs	r2, #1
 8011a56:	4c21      	ldr	r4, [pc, #132]	; (8011adc <__pow5mult+0x98>)
 8011a58:	2300      	movs	r3, #0
 8011a5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a5e:	f7ff fe8a 	bl	8011776 <__multadd>
 8011a62:	4607      	mov	r7, r0
 8011a64:	10ad      	asrs	r5, r5, #2
 8011a66:	d035      	beq.n	8011ad4 <__pow5mult+0x90>
 8011a68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011a6a:	b93c      	cbnz	r4, 8011a7c <__pow5mult+0x38>
 8011a6c:	2010      	movs	r0, #16
 8011a6e:	f7fc fb65 	bl	800e13c <malloc>
 8011a72:	6270      	str	r0, [r6, #36]	; 0x24
 8011a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a78:	6004      	str	r4, [r0, #0]
 8011a7a:	60c4      	str	r4, [r0, #12]
 8011a7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a84:	b94c      	cbnz	r4, 8011a9a <__pow5mult+0x56>
 8011a86:	f240 2171 	movw	r1, #625	; 0x271
 8011a8a:	4630      	mov	r0, r6
 8011a8c:	f7ff ff3a 	bl	8011904 <__i2b>
 8011a90:	2300      	movs	r3, #0
 8011a92:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a96:	4604      	mov	r4, r0
 8011a98:	6003      	str	r3, [r0, #0]
 8011a9a:	f04f 0800 	mov.w	r8, #0
 8011a9e:	07eb      	lsls	r3, r5, #31
 8011aa0:	d50a      	bpl.n	8011ab8 <__pow5mult+0x74>
 8011aa2:	4639      	mov	r1, r7
 8011aa4:	4622      	mov	r2, r4
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	f7ff ff35 	bl	8011916 <__multiply>
 8011aac:	4639      	mov	r1, r7
 8011aae:	4681      	mov	r9, r0
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	f7ff fe49 	bl	8011748 <_Bfree>
 8011ab6:	464f      	mov	r7, r9
 8011ab8:	106d      	asrs	r5, r5, #1
 8011aba:	d00b      	beq.n	8011ad4 <__pow5mult+0x90>
 8011abc:	6820      	ldr	r0, [r4, #0]
 8011abe:	b938      	cbnz	r0, 8011ad0 <__pow5mult+0x8c>
 8011ac0:	4622      	mov	r2, r4
 8011ac2:	4621      	mov	r1, r4
 8011ac4:	4630      	mov	r0, r6
 8011ac6:	f7ff ff26 	bl	8011916 <__multiply>
 8011aca:	6020      	str	r0, [r4, #0]
 8011acc:	f8c0 8000 	str.w	r8, [r0]
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	e7e4      	b.n	8011a9e <__pow5mult+0x5a>
 8011ad4:	4638      	mov	r0, r7
 8011ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ada:	bf00      	nop
 8011adc:	080131a0 	.word	0x080131a0

08011ae0 <__lshift>:
 8011ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ae4:	460c      	mov	r4, r1
 8011ae6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011aea:	6923      	ldr	r3, [r4, #16]
 8011aec:	6849      	ldr	r1, [r1, #4]
 8011aee:	eb0a 0903 	add.w	r9, sl, r3
 8011af2:	68a3      	ldr	r3, [r4, #8]
 8011af4:	4607      	mov	r7, r0
 8011af6:	4616      	mov	r6, r2
 8011af8:	f109 0501 	add.w	r5, r9, #1
 8011afc:	42ab      	cmp	r3, r5
 8011afe:	db32      	blt.n	8011b66 <__lshift+0x86>
 8011b00:	4638      	mov	r0, r7
 8011b02:	f7ff fded 	bl	80116e0 <_Balloc>
 8011b06:	2300      	movs	r3, #0
 8011b08:	4680      	mov	r8, r0
 8011b0a:	f100 0114 	add.w	r1, r0, #20
 8011b0e:	461a      	mov	r2, r3
 8011b10:	4553      	cmp	r3, sl
 8011b12:	db2b      	blt.n	8011b6c <__lshift+0x8c>
 8011b14:	6920      	ldr	r0, [r4, #16]
 8011b16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b1a:	f104 0314 	add.w	r3, r4, #20
 8011b1e:	f016 021f 	ands.w	r2, r6, #31
 8011b22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b2a:	d025      	beq.n	8011b78 <__lshift+0x98>
 8011b2c:	f1c2 0e20 	rsb	lr, r2, #32
 8011b30:	2000      	movs	r0, #0
 8011b32:	681e      	ldr	r6, [r3, #0]
 8011b34:	468a      	mov	sl, r1
 8011b36:	4096      	lsls	r6, r2
 8011b38:	4330      	orrs	r0, r6
 8011b3a:	f84a 0b04 	str.w	r0, [sl], #4
 8011b3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8011b42:	459c      	cmp	ip, r3
 8011b44:	fa20 f00e 	lsr.w	r0, r0, lr
 8011b48:	d814      	bhi.n	8011b74 <__lshift+0x94>
 8011b4a:	6048      	str	r0, [r1, #4]
 8011b4c:	b108      	cbz	r0, 8011b52 <__lshift+0x72>
 8011b4e:	f109 0502 	add.w	r5, r9, #2
 8011b52:	3d01      	subs	r5, #1
 8011b54:	4638      	mov	r0, r7
 8011b56:	f8c8 5010 	str.w	r5, [r8, #16]
 8011b5a:	4621      	mov	r1, r4
 8011b5c:	f7ff fdf4 	bl	8011748 <_Bfree>
 8011b60:	4640      	mov	r0, r8
 8011b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b66:	3101      	adds	r1, #1
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	e7c7      	b.n	8011afc <__lshift+0x1c>
 8011b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011b70:	3301      	adds	r3, #1
 8011b72:	e7cd      	b.n	8011b10 <__lshift+0x30>
 8011b74:	4651      	mov	r1, sl
 8011b76:	e7dc      	b.n	8011b32 <__lshift+0x52>
 8011b78:	3904      	subs	r1, #4
 8011b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b82:	459c      	cmp	ip, r3
 8011b84:	d8f9      	bhi.n	8011b7a <__lshift+0x9a>
 8011b86:	e7e4      	b.n	8011b52 <__lshift+0x72>

08011b88 <__mcmp>:
 8011b88:	6903      	ldr	r3, [r0, #16]
 8011b8a:	690a      	ldr	r2, [r1, #16]
 8011b8c:	1a9b      	subs	r3, r3, r2
 8011b8e:	b530      	push	{r4, r5, lr}
 8011b90:	d10c      	bne.n	8011bac <__mcmp+0x24>
 8011b92:	0092      	lsls	r2, r2, #2
 8011b94:	3014      	adds	r0, #20
 8011b96:	3114      	adds	r1, #20
 8011b98:	1884      	adds	r4, r0, r2
 8011b9a:	4411      	add	r1, r2
 8011b9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011ba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011ba4:	4295      	cmp	r5, r2
 8011ba6:	d003      	beq.n	8011bb0 <__mcmp+0x28>
 8011ba8:	d305      	bcc.n	8011bb6 <__mcmp+0x2e>
 8011baa:	2301      	movs	r3, #1
 8011bac:	4618      	mov	r0, r3
 8011bae:	bd30      	pop	{r4, r5, pc}
 8011bb0:	42a0      	cmp	r0, r4
 8011bb2:	d3f3      	bcc.n	8011b9c <__mcmp+0x14>
 8011bb4:	e7fa      	b.n	8011bac <__mcmp+0x24>
 8011bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bba:	e7f7      	b.n	8011bac <__mcmp+0x24>

08011bbc <__mdiff>:
 8011bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bc0:	460d      	mov	r5, r1
 8011bc2:	4607      	mov	r7, r0
 8011bc4:	4611      	mov	r1, r2
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	4614      	mov	r4, r2
 8011bca:	f7ff ffdd 	bl	8011b88 <__mcmp>
 8011bce:	1e06      	subs	r6, r0, #0
 8011bd0:	d108      	bne.n	8011be4 <__mdiff+0x28>
 8011bd2:	4631      	mov	r1, r6
 8011bd4:	4638      	mov	r0, r7
 8011bd6:	f7ff fd83 	bl	80116e0 <_Balloc>
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011be4:	bfa4      	itt	ge
 8011be6:	4623      	movge	r3, r4
 8011be8:	462c      	movge	r4, r5
 8011bea:	4638      	mov	r0, r7
 8011bec:	6861      	ldr	r1, [r4, #4]
 8011bee:	bfa6      	itte	ge
 8011bf0:	461d      	movge	r5, r3
 8011bf2:	2600      	movge	r6, #0
 8011bf4:	2601      	movlt	r6, #1
 8011bf6:	f7ff fd73 	bl	80116e0 <_Balloc>
 8011bfa:	692b      	ldr	r3, [r5, #16]
 8011bfc:	60c6      	str	r6, [r0, #12]
 8011bfe:	6926      	ldr	r6, [r4, #16]
 8011c00:	f105 0914 	add.w	r9, r5, #20
 8011c04:	f104 0214 	add.w	r2, r4, #20
 8011c08:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011c0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011c10:	f100 0514 	add.w	r5, r0, #20
 8011c14:	f04f 0e00 	mov.w	lr, #0
 8011c18:	f852 ab04 	ldr.w	sl, [r2], #4
 8011c1c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011c20:	fa1e f18a 	uxtah	r1, lr, sl
 8011c24:	b2a3      	uxth	r3, r4
 8011c26:	1ac9      	subs	r1, r1, r3
 8011c28:	0c23      	lsrs	r3, r4, #16
 8011c2a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011c2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011c32:	b289      	uxth	r1, r1
 8011c34:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011c38:	45c8      	cmp	r8, r9
 8011c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011c3e:	4694      	mov	ip, r2
 8011c40:	f845 3b04 	str.w	r3, [r5], #4
 8011c44:	d8e8      	bhi.n	8011c18 <__mdiff+0x5c>
 8011c46:	45bc      	cmp	ip, r7
 8011c48:	d304      	bcc.n	8011c54 <__mdiff+0x98>
 8011c4a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011c4e:	b183      	cbz	r3, 8011c72 <__mdiff+0xb6>
 8011c50:	6106      	str	r6, [r0, #16]
 8011c52:	e7c5      	b.n	8011be0 <__mdiff+0x24>
 8011c54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011c58:	fa1e f381 	uxtah	r3, lr, r1
 8011c5c:	141a      	asrs	r2, r3, #16
 8011c5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011c62:	b29b      	uxth	r3, r3
 8011c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011c68:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011c6c:	f845 3b04 	str.w	r3, [r5], #4
 8011c70:	e7e9      	b.n	8011c46 <__mdiff+0x8a>
 8011c72:	3e01      	subs	r6, #1
 8011c74:	e7e9      	b.n	8011c4a <__mdiff+0x8e>
	...

08011c78 <__ulp>:
 8011c78:	4b12      	ldr	r3, [pc, #72]	; (8011cc4 <__ulp+0x4c>)
 8011c7a:	ee10 2a90 	vmov	r2, s1
 8011c7e:	401a      	ands	r2, r3
 8011c80:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	dd04      	ble.n	8011c92 <__ulp+0x1a>
 8011c88:	2000      	movs	r0, #0
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	ec41 0b10 	vmov	d0, r0, r1
 8011c90:	4770      	bx	lr
 8011c92:	425b      	negs	r3, r3
 8011c94:	151b      	asrs	r3, r3, #20
 8011c96:	2b13      	cmp	r3, #19
 8011c98:	f04f 0000 	mov.w	r0, #0
 8011c9c:	f04f 0100 	mov.w	r1, #0
 8011ca0:	dc04      	bgt.n	8011cac <__ulp+0x34>
 8011ca2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011ca6:	fa42 f103 	asr.w	r1, r2, r3
 8011caa:	e7ef      	b.n	8011c8c <__ulp+0x14>
 8011cac:	3b14      	subs	r3, #20
 8011cae:	2b1e      	cmp	r3, #30
 8011cb0:	f04f 0201 	mov.w	r2, #1
 8011cb4:	bfda      	itte	le
 8011cb6:	f1c3 031f 	rsble	r3, r3, #31
 8011cba:	fa02 f303 	lslle.w	r3, r2, r3
 8011cbe:	4613      	movgt	r3, r2
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	e7e3      	b.n	8011c8c <__ulp+0x14>
 8011cc4:	7ff00000 	.word	0x7ff00000

08011cc8 <__b2d>:
 8011cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cca:	6905      	ldr	r5, [r0, #16]
 8011ccc:	f100 0714 	add.w	r7, r0, #20
 8011cd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011cd4:	1f2e      	subs	r6, r5, #4
 8011cd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011cda:	4620      	mov	r0, r4
 8011cdc:	f7ff fdc4 	bl	8011868 <__hi0bits>
 8011ce0:	f1c0 0320 	rsb	r3, r0, #32
 8011ce4:	280a      	cmp	r0, #10
 8011ce6:	600b      	str	r3, [r1, #0]
 8011ce8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011d60 <__b2d+0x98>
 8011cec:	dc14      	bgt.n	8011d18 <__b2d+0x50>
 8011cee:	f1c0 0e0b 	rsb	lr, r0, #11
 8011cf2:	fa24 f10e 	lsr.w	r1, r4, lr
 8011cf6:	42b7      	cmp	r7, r6
 8011cf8:	ea41 030c 	orr.w	r3, r1, ip
 8011cfc:	bf34      	ite	cc
 8011cfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011d02:	2100      	movcs	r1, #0
 8011d04:	3015      	adds	r0, #21
 8011d06:	fa04 f000 	lsl.w	r0, r4, r0
 8011d0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8011d0e:	ea40 0201 	orr.w	r2, r0, r1
 8011d12:	ec43 2b10 	vmov	d0, r2, r3
 8011d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d18:	42b7      	cmp	r7, r6
 8011d1a:	bf3a      	itte	cc
 8011d1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011d20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011d24:	2100      	movcs	r1, #0
 8011d26:	380b      	subs	r0, #11
 8011d28:	d015      	beq.n	8011d56 <__b2d+0x8e>
 8011d2a:	4084      	lsls	r4, r0
 8011d2c:	f1c0 0520 	rsb	r5, r0, #32
 8011d30:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011d34:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8011d38:	42be      	cmp	r6, r7
 8011d3a:	fa21 fc05 	lsr.w	ip, r1, r5
 8011d3e:	ea44 030c 	orr.w	r3, r4, ip
 8011d42:	bf8c      	ite	hi
 8011d44:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011d48:	2400      	movls	r4, #0
 8011d4a:	fa01 f000 	lsl.w	r0, r1, r0
 8011d4e:	40ec      	lsrs	r4, r5
 8011d50:	ea40 0204 	orr.w	r2, r0, r4
 8011d54:	e7dd      	b.n	8011d12 <__b2d+0x4a>
 8011d56:	ea44 030c 	orr.w	r3, r4, ip
 8011d5a:	460a      	mov	r2, r1
 8011d5c:	e7d9      	b.n	8011d12 <__b2d+0x4a>
 8011d5e:	bf00      	nop
 8011d60:	3ff00000 	.word	0x3ff00000

08011d64 <__d2b>:
 8011d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d68:	460e      	mov	r6, r1
 8011d6a:	2101      	movs	r1, #1
 8011d6c:	ec59 8b10 	vmov	r8, r9, d0
 8011d70:	4615      	mov	r5, r2
 8011d72:	f7ff fcb5 	bl	80116e0 <_Balloc>
 8011d76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011d7a:	4607      	mov	r7, r0
 8011d7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d80:	bb34      	cbnz	r4, 8011dd0 <__d2b+0x6c>
 8011d82:	9301      	str	r3, [sp, #4]
 8011d84:	f1b8 0300 	subs.w	r3, r8, #0
 8011d88:	d027      	beq.n	8011dda <__d2b+0x76>
 8011d8a:	a802      	add	r0, sp, #8
 8011d8c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011d90:	f7ff fd89 	bl	80118a6 <__lo0bits>
 8011d94:	9900      	ldr	r1, [sp, #0]
 8011d96:	b1f0      	cbz	r0, 8011dd6 <__d2b+0x72>
 8011d98:	9a01      	ldr	r2, [sp, #4]
 8011d9a:	f1c0 0320 	rsb	r3, r0, #32
 8011d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8011da2:	430b      	orrs	r3, r1
 8011da4:	40c2      	lsrs	r2, r0
 8011da6:	617b      	str	r3, [r7, #20]
 8011da8:	9201      	str	r2, [sp, #4]
 8011daa:	9b01      	ldr	r3, [sp, #4]
 8011dac:	61bb      	str	r3, [r7, #24]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	bf14      	ite	ne
 8011db2:	2102      	movne	r1, #2
 8011db4:	2101      	moveq	r1, #1
 8011db6:	6139      	str	r1, [r7, #16]
 8011db8:	b1c4      	cbz	r4, 8011dec <__d2b+0x88>
 8011dba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011dbe:	4404      	add	r4, r0
 8011dc0:	6034      	str	r4, [r6, #0]
 8011dc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011dc6:	6028      	str	r0, [r5, #0]
 8011dc8:	4638      	mov	r0, r7
 8011dca:	b003      	add	sp, #12
 8011dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011dd4:	e7d5      	b.n	8011d82 <__d2b+0x1e>
 8011dd6:	6179      	str	r1, [r7, #20]
 8011dd8:	e7e7      	b.n	8011daa <__d2b+0x46>
 8011dda:	a801      	add	r0, sp, #4
 8011ddc:	f7ff fd63 	bl	80118a6 <__lo0bits>
 8011de0:	9b01      	ldr	r3, [sp, #4]
 8011de2:	617b      	str	r3, [r7, #20]
 8011de4:	2101      	movs	r1, #1
 8011de6:	6139      	str	r1, [r7, #16]
 8011de8:	3020      	adds	r0, #32
 8011dea:	e7e5      	b.n	8011db8 <__d2b+0x54>
 8011dec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011df0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011df4:	6030      	str	r0, [r6, #0]
 8011df6:	6918      	ldr	r0, [r3, #16]
 8011df8:	f7ff fd36 	bl	8011868 <__hi0bits>
 8011dfc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011e00:	e7e1      	b.n	8011dc6 <__d2b+0x62>

08011e02 <__ratio>:
 8011e02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e06:	4688      	mov	r8, r1
 8011e08:	4669      	mov	r1, sp
 8011e0a:	4681      	mov	r9, r0
 8011e0c:	f7ff ff5c 	bl	8011cc8 <__b2d>
 8011e10:	a901      	add	r1, sp, #4
 8011e12:	4640      	mov	r0, r8
 8011e14:	ec57 6b10 	vmov	r6, r7, d0
 8011e18:	ee10 4a10 	vmov	r4, s0
 8011e1c:	f7ff ff54 	bl	8011cc8 <__b2d>
 8011e20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011e28:	eba3 0c02 	sub.w	ip, r3, r2
 8011e2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011e30:	1a9b      	subs	r3, r3, r2
 8011e32:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011e36:	ec51 0b10 	vmov	r0, r1, d0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	ee10 aa10 	vmov	sl, s0
 8011e40:	bfce      	itee	gt
 8011e42:	463a      	movgt	r2, r7
 8011e44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011e48:	460a      	movle	r2, r1
 8011e4a:	463d      	mov	r5, r7
 8011e4c:	468b      	mov	fp, r1
 8011e4e:	bfcc      	ite	gt
 8011e50:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011e54:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011e58:	ec45 4b17 	vmov	d7, r4, r5
 8011e5c:	ec4b ab16 	vmov	d6, sl, fp
 8011e60:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8011e64:	b003      	add	sp, #12
 8011e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e6a <__copybits>:
 8011e6a:	3901      	subs	r1, #1
 8011e6c:	b510      	push	{r4, lr}
 8011e6e:	1149      	asrs	r1, r1, #5
 8011e70:	6914      	ldr	r4, [r2, #16]
 8011e72:	3101      	adds	r1, #1
 8011e74:	f102 0314 	add.w	r3, r2, #20
 8011e78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011e7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011e80:	42a3      	cmp	r3, r4
 8011e82:	4602      	mov	r2, r0
 8011e84:	d303      	bcc.n	8011e8e <__copybits+0x24>
 8011e86:	2300      	movs	r3, #0
 8011e88:	428a      	cmp	r2, r1
 8011e8a:	d305      	bcc.n	8011e98 <__copybits+0x2e>
 8011e8c:	bd10      	pop	{r4, pc}
 8011e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e92:	f840 2b04 	str.w	r2, [r0], #4
 8011e96:	e7f3      	b.n	8011e80 <__copybits+0x16>
 8011e98:	f842 3b04 	str.w	r3, [r2], #4
 8011e9c:	e7f4      	b.n	8011e88 <__copybits+0x1e>

08011e9e <__any_on>:
 8011e9e:	f100 0214 	add.w	r2, r0, #20
 8011ea2:	6900      	ldr	r0, [r0, #16]
 8011ea4:	114b      	asrs	r3, r1, #5
 8011ea6:	4298      	cmp	r0, r3
 8011ea8:	b510      	push	{r4, lr}
 8011eaa:	db11      	blt.n	8011ed0 <__any_on+0x32>
 8011eac:	dd0a      	ble.n	8011ec4 <__any_on+0x26>
 8011eae:	f011 011f 	ands.w	r1, r1, #31
 8011eb2:	d007      	beq.n	8011ec4 <__any_on+0x26>
 8011eb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011eb8:	fa24 f001 	lsr.w	r0, r4, r1
 8011ebc:	fa00 f101 	lsl.w	r1, r0, r1
 8011ec0:	428c      	cmp	r4, r1
 8011ec2:	d10b      	bne.n	8011edc <__any_on+0x3e>
 8011ec4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d803      	bhi.n	8011ed4 <__any_on+0x36>
 8011ecc:	2000      	movs	r0, #0
 8011ece:	bd10      	pop	{r4, pc}
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	e7f7      	b.n	8011ec4 <__any_on+0x26>
 8011ed4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ed8:	2900      	cmp	r1, #0
 8011eda:	d0f5      	beq.n	8011ec8 <__any_on+0x2a>
 8011edc:	2001      	movs	r0, #1
 8011ede:	e7f6      	b.n	8011ece <__any_on+0x30>

08011ee0 <__ssputs_r>:
 8011ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ee4:	688e      	ldr	r6, [r1, #8]
 8011ee6:	429e      	cmp	r6, r3
 8011ee8:	4682      	mov	sl, r0
 8011eea:	460c      	mov	r4, r1
 8011eec:	4690      	mov	r8, r2
 8011eee:	4699      	mov	r9, r3
 8011ef0:	d837      	bhi.n	8011f62 <__ssputs_r+0x82>
 8011ef2:	898a      	ldrh	r2, [r1, #12]
 8011ef4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ef8:	d031      	beq.n	8011f5e <__ssputs_r+0x7e>
 8011efa:	6825      	ldr	r5, [r4, #0]
 8011efc:	6909      	ldr	r1, [r1, #16]
 8011efe:	1a6f      	subs	r7, r5, r1
 8011f00:	6965      	ldr	r5, [r4, #20]
 8011f02:	2302      	movs	r3, #2
 8011f04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f08:	fb95 f5f3 	sdiv	r5, r5, r3
 8011f0c:	f109 0301 	add.w	r3, r9, #1
 8011f10:	443b      	add	r3, r7
 8011f12:	429d      	cmp	r5, r3
 8011f14:	bf38      	it	cc
 8011f16:	461d      	movcc	r5, r3
 8011f18:	0553      	lsls	r3, r2, #21
 8011f1a:	d530      	bpl.n	8011f7e <__ssputs_r+0x9e>
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	f7fc f985 	bl	800e22c <_malloc_r>
 8011f22:	4606      	mov	r6, r0
 8011f24:	b950      	cbnz	r0, 8011f3c <__ssputs_r+0x5c>
 8011f26:	230c      	movs	r3, #12
 8011f28:	f8ca 3000 	str.w	r3, [sl]
 8011f2c:	89a3      	ldrh	r3, [r4, #12]
 8011f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f32:	81a3      	strh	r3, [r4, #12]
 8011f34:	f04f 30ff 	mov.w	r0, #4294967295
 8011f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f3c:	463a      	mov	r2, r7
 8011f3e:	6921      	ldr	r1, [r4, #16]
 8011f40:	f7fc f904 	bl	800e14c <memcpy>
 8011f44:	89a3      	ldrh	r3, [r4, #12]
 8011f46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f4e:	81a3      	strh	r3, [r4, #12]
 8011f50:	6126      	str	r6, [r4, #16]
 8011f52:	6165      	str	r5, [r4, #20]
 8011f54:	443e      	add	r6, r7
 8011f56:	1bed      	subs	r5, r5, r7
 8011f58:	6026      	str	r6, [r4, #0]
 8011f5a:	60a5      	str	r5, [r4, #8]
 8011f5c:	464e      	mov	r6, r9
 8011f5e:	454e      	cmp	r6, r9
 8011f60:	d900      	bls.n	8011f64 <__ssputs_r+0x84>
 8011f62:	464e      	mov	r6, r9
 8011f64:	4632      	mov	r2, r6
 8011f66:	4641      	mov	r1, r8
 8011f68:	6820      	ldr	r0, [r4, #0]
 8011f6a:	f000 fe99 	bl	8012ca0 <memmove>
 8011f6e:	68a3      	ldr	r3, [r4, #8]
 8011f70:	1b9b      	subs	r3, r3, r6
 8011f72:	60a3      	str	r3, [r4, #8]
 8011f74:	6823      	ldr	r3, [r4, #0]
 8011f76:	441e      	add	r6, r3
 8011f78:	6026      	str	r6, [r4, #0]
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e7dc      	b.n	8011f38 <__ssputs_r+0x58>
 8011f7e:	462a      	mov	r2, r5
 8011f80:	f000 fea7 	bl	8012cd2 <_realloc_r>
 8011f84:	4606      	mov	r6, r0
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d1e2      	bne.n	8011f50 <__ssputs_r+0x70>
 8011f8a:	6921      	ldr	r1, [r4, #16]
 8011f8c:	4650      	mov	r0, sl
 8011f8e:	f7fc f8ff 	bl	800e190 <_free_r>
 8011f92:	e7c8      	b.n	8011f26 <__ssputs_r+0x46>

08011f94 <_svfiprintf_r>:
 8011f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f98:	461d      	mov	r5, r3
 8011f9a:	898b      	ldrh	r3, [r1, #12]
 8011f9c:	061f      	lsls	r7, r3, #24
 8011f9e:	b09d      	sub	sp, #116	; 0x74
 8011fa0:	4680      	mov	r8, r0
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	4616      	mov	r6, r2
 8011fa6:	d50f      	bpl.n	8011fc8 <_svfiprintf_r+0x34>
 8011fa8:	690b      	ldr	r3, [r1, #16]
 8011faa:	b96b      	cbnz	r3, 8011fc8 <_svfiprintf_r+0x34>
 8011fac:	2140      	movs	r1, #64	; 0x40
 8011fae:	f7fc f93d 	bl	800e22c <_malloc_r>
 8011fb2:	6020      	str	r0, [r4, #0]
 8011fb4:	6120      	str	r0, [r4, #16]
 8011fb6:	b928      	cbnz	r0, 8011fc4 <_svfiprintf_r+0x30>
 8011fb8:	230c      	movs	r3, #12
 8011fba:	f8c8 3000 	str.w	r3, [r8]
 8011fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc2:	e0c8      	b.n	8012156 <_svfiprintf_r+0x1c2>
 8011fc4:	2340      	movs	r3, #64	; 0x40
 8011fc6:	6163      	str	r3, [r4, #20]
 8011fc8:	2300      	movs	r3, #0
 8011fca:	9309      	str	r3, [sp, #36]	; 0x24
 8011fcc:	2320      	movs	r3, #32
 8011fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fd2:	2330      	movs	r3, #48	; 0x30
 8011fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fd8:	9503      	str	r5, [sp, #12]
 8011fda:	f04f 0b01 	mov.w	fp, #1
 8011fde:	4637      	mov	r7, r6
 8011fe0:	463d      	mov	r5, r7
 8011fe2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011fe6:	b10b      	cbz	r3, 8011fec <_svfiprintf_r+0x58>
 8011fe8:	2b25      	cmp	r3, #37	; 0x25
 8011fea:	d13e      	bne.n	801206a <_svfiprintf_r+0xd6>
 8011fec:	ebb7 0a06 	subs.w	sl, r7, r6
 8011ff0:	d00b      	beq.n	801200a <_svfiprintf_r+0x76>
 8011ff2:	4653      	mov	r3, sl
 8011ff4:	4632      	mov	r2, r6
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	4640      	mov	r0, r8
 8011ffa:	f7ff ff71 	bl	8011ee0 <__ssputs_r>
 8011ffe:	3001      	adds	r0, #1
 8012000:	f000 80a4 	beq.w	801214c <_svfiprintf_r+0x1b8>
 8012004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012006:	4453      	add	r3, sl
 8012008:	9309      	str	r3, [sp, #36]	; 0x24
 801200a:	783b      	ldrb	r3, [r7, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	f000 809d 	beq.w	801214c <_svfiprintf_r+0x1b8>
 8012012:	2300      	movs	r3, #0
 8012014:	f04f 32ff 	mov.w	r2, #4294967295
 8012018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801201c:	9304      	str	r3, [sp, #16]
 801201e:	9307      	str	r3, [sp, #28]
 8012020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012024:	931a      	str	r3, [sp, #104]	; 0x68
 8012026:	462f      	mov	r7, r5
 8012028:	2205      	movs	r2, #5
 801202a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801202e:	4850      	ldr	r0, [pc, #320]	; (8012170 <_svfiprintf_r+0x1dc>)
 8012030:	f7ee f90e 	bl	8000250 <memchr>
 8012034:	9b04      	ldr	r3, [sp, #16]
 8012036:	b9d0      	cbnz	r0, 801206e <_svfiprintf_r+0xda>
 8012038:	06d9      	lsls	r1, r3, #27
 801203a:	bf44      	itt	mi
 801203c:	2220      	movmi	r2, #32
 801203e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012042:	071a      	lsls	r2, r3, #28
 8012044:	bf44      	itt	mi
 8012046:	222b      	movmi	r2, #43	; 0x2b
 8012048:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801204c:	782a      	ldrb	r2, [r5, #0]
 801204e:	2a2a      	cmp	r2, #42	; 0x2a
 8012050:	d015      	beq.n	801207e <_svfiprintf_r+0xea>
 8012052:	9a07      	ldr	r2, [sp, #28]
 8012054:	462f      	mov	r7, r5
 8012056:	2000      	movs	r0, #0
 8012058:	250a      	movs	r5, #10
 801205a:	4639      	mov	r1, r7
 801205c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012060:	3b30      	subs	r3, #48	; 0x30
 8012062:	2b09      	cmp	r3, #9
 8012064:	d94d      	bls.n	8012102 <_svfiprintf_r+0x16e>
 8012066:	b1b8      	cbz	r0, 8012098 <_svfiprintf_r+0x104>
 8012068:	e00f      	b.n	801208a <_svfiprintf_r+0xf6>
 801206a:	462f      	mov	r7, r5
 801206c:	e7b8      	b.n	8011fe0 <_svfiprintf_r+0x4c>
 801206e:	4a40      	ldr	r2, [pc, #256]	; (8012170 <_svfiprintf_r+0x1dc>)
 8012070:	1a80      	subs	r0, r0, r2
 8012072:	fa0b f000 	lsl.w	r0, fp, r0
 8012076:	4318      	orrs	r0, r3
 8012078:	9004      	str	r0, [sp, #16]
 801207a:	463d      	mov	r5, r7
 801207c:	e7d3      	b.n	8012026 <_svfiprintf_r+0x92>
 801207e:	9a03      	ldr	r2, [sp, #12]
 8012080:	1d11      	adds	r1, r2, #4
 8012082:	6812      	ldr	r2, [r2, #0]
 8012084:	9103      	str	r1, [sp, #12]
 8012086:	2a00      	cmp	r2, #0
 8012088:	db01      	blt.n	801208e <_svfiprintf_r+0xfa>
 801208a:	9207      	str	r2, [sp, #28]
 801208c:	e004      	b.n	8012098 <_svfiprintf_r+0x104>
 801208e:	4252      	negs	r2, r2
 8012090:	f043 0302 	orr.w	r3, r3, #2
 8012094:	9207      	str	r2, [sp, #28]
 8012096:	9304      	str	r3, [sp, #16]
 8012098:	783b      	ldrb	r3, [r7, #0]
 801209a:	2b2e      	cmp	r3, #46	; 0x2e
 801209c:	d10c      	bne.n	80120b8 <_svfiprintf_r+0x124>
 801209e:	787b      	ldrb	r3, [r7, #1]
 80120a0:	2b2a      	cmp	r3, #42	; 0x2a
 80120a2:	d133      	bne.n	801210c <_svfiprintf_r+0x178>
 80120a4:	9b03      	ldr	r3, [sp, #12]
 80120a6:	1d1a      	adds	r2, r3, #4
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	9203      	str	r2, [sp, #12]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	bfb8      	it	lt
 80120b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80120b4:	3702      	adds	r7, #2
 80120b6:	9305      	str	r3, [sp, #20]
 80120b8:	4d2e      	ldr	r5, [pc, #184]	; (8012174 <_svfiprintf_r+0x1e0>)
 80120ba:	7839      	ldrb	r1, [r7, #0]
 80120bc:	2203      	movs	r2, #3
 80120be:	4628      	mov	r0, r5
 80120c0:	f7ee f8c6 	bl	8000250 <memchr>
 80120c4:	b138      	cbz	r0, 80120d6 <_svfiprintf_r+0x142>
 80120c6:	2340      	movs	r3, #64	; 0x40
 80120c8:	1b40      	subs	r0, r0, r5
 80120ca:	fa03 f000 	lsl.w	r0, r3, r0
 80120ce:	9b04      	ldr	r3, [sp, #16]
 80120d0:	4303      	orrs	r3, r0
 80120d2:	3701      	adds	r7, #1
 80120d4:	9304      	str	r3, [sp, #16]
 80120d6:	7839      	ldrb	r1, [r7, #0]
 80120d8:	4827      	ldr	r0, [pc, #156]	; (8012178 <_svfiprintf_r+0x1e4>)
 80120da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120de:	2206      	movs	r2, #6
 80120e0:	1c7e      	adds	r6, r7, #1
 80120e2:	f7ee f8b5 	bl	8000250 <memchr>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d038      	beq.n	801215c <_svfiprintf_r+0x1c8>
 80120ea:	4b24      	ldr	r3, [pc, #144]	; (801217c <_svfiprintf_r+0x1e8>)
 80120ec:	bb13      	cbnz	r3, 8012134 <_svfiprintf_r+0x1a0>
 80120ee:	9b03      	ldr	r3, [sp, #12]
 80120f0:	3307      	adds	r3, #7
 80120f2:	f023 0307 	bic.w	r3, r3, #7
 80120f6:	3308      	adds	r3, #8
 80120f8:	9303      	str	r3, [sp, #12]
 80120fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120fc:	444b      	add	r3, r9
 80120fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012100:	e76d      	b.n	8011fde <_svfiprintf_r+0x4a>
 8012102:	fb05 3202 	mla	r2, r5, r2, r3
 8012106:	2001      	movs	r0, #1
 8012108:	460f      	mov	r7, r1
 801210a:	e7a6      	b.n	801205a <_svfiprintf_r+0xc6>
 801210c:	2300      	movs	r3, #0
 801210e:	3701      	adds	r7, #1
 8012110:	9305      	str	r3, [sp, #20]
 8012112:	4619      	mov	r1, r3
 8012114:	250a      	movs	r5, #10
 8012116:	4638      	mov	r0, r7
 8012118:	f810 2b01 	ldrb.w	r2, [r0], #1
 801211c:	3a30      	subs	r2, #48	; 0x30
 801211e:	2a09      	cmp	r2, #9
 8012120:	d903      	bls.n	801212a <_svfiprintf_r+0x196>
 8012122:	2b00      	cmp	r3, #0
 8012124:	d0c8      	beq.n	80120b8 <_svfiprintf_r+0x124>
 8012126:	9105      	str	r1, [sp, #20]
 8012128:	e7c6      	b.n	80120b8 <_svfiprintf_r+0x124>
 801212a:	fb05 2101 	mla	r1, r5, r1, r2
 801212e:	2301      	movs	r3, #1
 8012130:	4607      	mov	r7, r0
 8012132:	e7f0      	b.n	8012116 <_svfiprintf_r+0x182>
 8012134:	ab03      	add	r3, sp, #12
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	4622      	mov	r2, r4
 801213a:	4b11      	ldr	r3, [pc, #68]	; (8012180 <_svfiprintf_r+0x1ec>)
 801213c:	a904      	add	r1, sp, #16
 801213e:	4640      	mov	r0, r8
 8012140:	f7fc f956 	bl	800e3f0 <_printf_float>
 8012144:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012148:	4681      	mov	r9, r0
 801214a:	d1d6      	bne.n	80120fa <_svfiprintf_r+0x166>
 801214c:	89a3      	ldrh	r3, [r4, #12]
 801214e:	065b      	lsls	r3, r3, #25
 8012150:	f53f af35 	bmi.w	8011fbe <_svfiprintf_r+0x2a>
 8012154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012156:	b01d      	add	sp, #116	; 0x74
 8012158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801215c:	ab03      	add	r3, sp, #12
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	4622      	mov	r2, r4
 8012162:	4b07      	ldr	r3, [pc, #28]	; (8012180 <_svfiprintf_r+0x1ec>)
 8012164:	a904      	add	r1, sp, #16
 8012166:	4640      	mov	r0, r8
 8012168:	f7fc fbe4 	bl	800e934 <_printf_i>
 801216c:	e7ea      	b.n	8012144 <_svfiprintf_r+0x1b0>
 801216e:	bf00      	nop
 8012170:	080131ac 	.word	0x080131ac
 8012174:	080131b2 	.word	0x080131b2
 8012178:	080131b6 	.word	0x080131b6
 801217c:	0800e3f1 	.word	0x0800e3f1
 8012180:	08011ee1 	.word	0x08011ee1

08012184 <_sungetc_r>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	1c4b      	adds	r3, r1, #1
 8012188:	4614      	mov	r4, r2
 801218a:	d103      	bne.n	8012194 <_sungetc_r+0x10>
 801218c:	f04f 35ff 	mov.w	r5, #4294967295
 8012190:	4628      	mov	r0, r5
 8012192:	bd38      	pop	{r3, r4, r5, pc}
 8012194:	8993      	ldrh	r3, [r2, #12]
 8012196:	f023 0320 	bic.w	r3, r3, #32
 801219a:	8193      	strh	r3, [r2, #12]
 801219c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801219e:	6852      	ldr	r2, [r2, #4]
 80121a0:	b2cd      	uxtb	r5, r1
 80121a2:	b18b      	cbz	r3, 80121c8 <_sungetc_r+0x44>
 80121a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80121a6:	4293      	cmp	r3, r2
 80121a8:	dd08      	ble.n	80121bc <_sungetc_r+0x38>
 80121aa:	6823      	ldr	r3, [r4, #0]
 80121ac:	1e5a      	subs	r2, r3, #1
 80121ae:	6022      	str	r2, [r4, #0]
 80121b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80121b4:	6863      	ldr	r3, [r4, #4]
 80121b6:	3301      	adds	r3, #1
 80121b8:	6063      	str	r3, [r4, #4]
 80121ba:	e7e9      	b.n	8012190 <_sungetc_r+0xc>
 80121bc:	4621      	mov	r1, r4
 80121be:	f000 fd05 	bl	8012bcc <__submore>
 80121c2:	2800      	cmp	r0, #0
 80121c4:	d0f1      	beq.n	80121aa <_sungetc_r+0x26>
 80121c6:	e7e1      	b.n	801218c <_sungetc_r+0x8>
 80121c8:	6921      	ldr	r1, [r4, #16]
 80121ca:	6823      	ldr	r3, [r4, #0]
 80121cc:	b151      	cbz	r1, 80121e4 <_sungetc_r+0x60>
 80121ce:	4299      	cmp	r1, r3
 80121d0:	d208      	bcs.n	80121e4 <_sungetc_r+0x60>
 80121d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80121d6:	42a9      	cmp	r1, r5
 80121d8:	d104      	bne.n	80121e4 <_sungetc_r+0x60>
 80121da:	3b01      	subs	r3, #1
 80121dc:	3201      	adds	r2, #1
 80121de:	6023      	str	r3, [r4, #0]
 80121e0:	6062      	str	r2, [r4, #4]
 80121e2:	e7d5      	b.n	8012190 <_sungetc_r+0xc>
 80121e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80121e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121ec:	6363      	str	r3, [r4, #52]	; 0x34
 80121ee:	2303      	movs	r3, #3
 80121f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80121f2:	4623      	mov	r3, r4
 80121f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80121f8:	6023      	str	r3, [r4, #0]
 80121fa:	2301      	movs	r3, #1
 80121fc:	e7dc      	b.n	80121b8 <_sungetc_r+0x34>

080121fe <__ssrefill_r>:
 80121fe:	b510      	push	{r4, lr}
 8012200:	460c      	mov	r4, r1
 8012202:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012204:	b169      	cbz	r1, 8012222 <__ssrefill_r+0x24>
 8012206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801220a:	4299      	cmp	r1, r3
 801220c:	d001      	beq.n	8012212 <__ssrefill_r+0x14>
 801220e:	f7fb ffbf 	bl	800e190 <_free_r>
 8012212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012214:	6063      	str	r3, [r4, #4]
 8012216:	2000      	movs	r0, #0
 8012218:	6360      	str	r0, [r4, #52]	; 0x34
 801221a:	b113      	cbz	r3, 8012222 <__ssrefill_r+0x24>
 801221c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801221e:	6023      	str	r3, [r4, #0]
 8012220:	bd10      	pop	{r4, pc}
 8012222:	6923      	ldr	r3, [r4, #16]
 8012224:	6023      	str	r3, [r4, #0]
 8012226:	2300      	movs	r3, #0
 8012228:	6063      	str	r3, [r4, #4]
 801222a:	89a3      	ldrh	r3, [r4, #12]
 801222c:	f043 0320 	orr.w	r3, r3, #32
 8012230:	81a3      	strh	r3, [r4, #12]
 8012232:	f04f 30ff 	mov.w	r0, #4294967295
 8012236:	e7f3      	b.n	8012220 <__ssrefill_r+0x22>

08012238 <__ssvfiscanf_r>:
 8012238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012240:	460c      	mov	r4, r1
 8012242:	2100      	movs	r1, #0
 8012244:	9144      	str	r1, [sp, #272]	; 0x110
 8012246:	9145      	str	r1, [sp, #276]	; 0x114
 8012248:	499f      	ldr	r1, [pc, #636]	; (80124c8 <__ssvfiscanf_r+0x290>)
 801224a:	91a0      	str	r1, [sp, #640]	; 0x280
 801224c:	f10d 0804 	add.w	r8, sp, #4
 8012250:	499e      	ldr	r1, [pc, #632]	; (80124cc <__ssvfiscanf_r+0x294>)
 8012252:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80124d0 <__ssvfiscanf_r+0x298>
 8012256:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801225a:	4606      	mov	r6, r0
 801225c:	4692      	mov	sl, r2
 801225e:	91a1      	str	r1, [sp, #644]	; 0x284
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	270a      	movs	r7, #10
 8012264:	f89a 3000 	ldrb.w	r3, [sl]
 8012268:	2b00      	cmp	r3, #0
 801226a:	f000 812a 	beq.w	80124c2 <__ssvfiscanf_r+0x28a>
 801226e:	4655      	mov	r5, sl
 8012270:	f7ff f98e 	bl	8011590 <__locale_ctype_ptr>
 8012274:	f815 bb01 	ldrb.w	fp, [r5], #1
 8012278:	4458      	add	r0, fp
 801227a:	7843      	ldrb	r3, [r0, #1]
 801227c:	f013 0308 	ands.w	r3, r3, #8
 8012280:	d01c      	beq.n	80122bc <__ssvfiscanf_r+0x84>
 8012282:	6863      	ldr	r3, [r4, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	dd12      	ble.n	80122ae <__ssvfiscanf_r+0x76>
 8012288:	f7ff f982 	bl	8011590 <__locale_ctype_ptr>
 801228c:	6823      	ldr	r3, [r4, #0]
 801228e:	781a      	ldrb	r2, [r3, #0]
 8012290:	4410      	add	r0, r2
 8012292:	7842      	ldrb	r2, [r0, #1]
 8012294:	0712      	lsls	r2, r2, #28
 8012296:	d401      	bmi.n	801229c <__ssvfiscanf_r+0x64>
 8012298:	46aa      	mov	sl, r5
 801229a:	e7e3      	b.n	8012264 <__ssvfiscanf_r+0x2c>
 801229c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801229e:	3201      	adds	r2, #1
 80122a0:	9245      	str	r2, [sp, #276]	; 0x114
 80122a2:	6862      	ldr	r2, [r4, #4]
 80122a4:	3301      	adds	r3, #1
 80122a6:	3a01      	subs	r2, #1
 80122a8:	6062      	str	r2, [r4, #4]
 80122aa:	6023      	str	r3, [r4, #0]
 80122ac:	e7e9      	b.n	8012282 <__ssvfiscanf_r+0x4a>
 80122ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80122b0:	4621      	mov	r1, r4
 80122b2:	4630      	mov	r0, r6
 80122b4:	4798      	blx	r3
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d0e6      	beq.n	8012288 <__ssvfiscanf_r+0x50>
 80122ba:	e7ed      	b.n	8012298 <__ssvfiscanf_r+0x60>
 80122bc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80122c0:	f040 8082 	bne.w	80123c8 <__ssvfiscanf_r+0x190>
 80122c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80122c6:	9341      	str	r3, [sp, #260]	; 0x104
 80122c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80122cc:	2b2a      	cmp	r3, #42	; 0x2a
 80122ce:	d103      	bne.n	80122d8 <__ssvfiscanf_r+0xa0>
 80122d0:	2310      	movs	r3, #16
 80122d2:	9341      	str	r3, [sp, #260]	; 0x104
 80122d4:	f10a 0502 	add.w	r5, sl, #2
 80122d8:	46aa      	mov	sl, r5
 80122da:	f815 1b01 	ldrb.w	r1, [r5], #1
 80122de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80122e2:	2a09      	cmp	r2, #9
 80122e4:	d922      	bls.n	801232c <__ssvfiscanf_r+0xf4>
 80122e6:	2203      	movs	r2, #3
 80122e8:	4879      	ldr	r0, [pc, #484]	; (80124d0 <__ssvfiscanf_r+0x298>)
 80122ea:	f7ed ffb1 	bl	8000250 <memchr>
 80122ee:	b138      	cbz	r0, 8012300 <__ssvfiscanf_r+0xc8>
 80122f0:	eba0 0309 	sub.w	r3, r0, r9
 80122f4:	2001      	movs	r0, #1
 80122f6:	4098      	lsls	r0, r3
 80122f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80122fa:	4318      	orrs	r0, r3
 80122fc:	9041      	str	r0, [sp, #260]	; 0x104
 80122fe:	46aa      	mov	sl, r5
 8012300:	f89a 3000 	ldrb.w	r3, [sl]
 8012304:	2b67      	cmp	r3, #103	; 0x67
 8012306:	f10a 0501 	add.w	r5, sl, #1
 801230a:	d82b      	bhi.n	8012364 <__ssvfiscanf_r+0x12c>
 801230c:	2b65      	cmp	r3, #101	; 0x65
 801230e:	f080 809f 	bcs.w	8012450 <__ssvfiscanf_r+0x218>
 8012312:	2b47      	cmp	r3, #71	; 0x47
 8012314:	d810      	bhi.n	8012338 <__ssvfiscanf_r+0x100>
 8012316:	2b45      	cmp	r3, #69	; 0x45
 8012318:	f080 809a 	bcs.w	8012450 <__ssvfiscanf_r+0x218>
 801231c:	2b00      	cmp	r3, #0
 801231e:	d06c      	beq.n	80123fa <__ssvfiscanf_r+0x1c2>
 8012320:	2b25      	cmp	r3, #37	; 0x25
 8012322:	d051      	beq.n	80123c8 <__ssvfiscanf_r+0x190>
 8012324:	2303      	movs	r3, #3
 8012326:	9347      	str	r3, [sp, #284]	; 0x11c
 8012328:	9742      	str	r7, [sp, #264]	; 0x108
 801232a:	e027      	b.n	801237c <__ssvfiscanf_r+0x144>
 801232c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801232e:	fb07 1303 	mla	r3, r7, r3, r1
 8012332:	3b30      	subs	r3, #48	; 0x30
 8012334:	9343      	str	r3, [sp, #268]	; 0x10c
 8012336:	e7cf      	b.n	80122d8 <__ssvfiscanf_r+0xa0>
 8012338:	2b5b      	cmp	r3, #91	; 0x5b
 801233a:	d06a      	beq.n	8012412 <__ssvfiscanf_r+0x1da>
 801233c:	d80c      	bhi.n	8012358 <__ssvfiscanf_r+0x120>
 801233e:	2b58      	cmp	r3, #88	; 0x58
 8012340:	d1f0      	bne.n	8012324 <__ssvfiscanf_r+0xec>
 8012342:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012348:	9241      	str	r2, [sp, #260]	; 0x104
 801234a:	2210      	movs	r2, #16
 801234c:	9242      	str	r2, [sp, #264]	; 0x108
 801234e:	2b6e      	cmp	r3, #110	; 0x6e
 8012350:	bf8c      	ite	hi
 8012352:	2304      	movhi	r3, #4
 8012354:	2303      	movls	r3, #3
 8012356:	e010      	b.n	801237a <__ssvfiscanf_r+0x142>
 8012358:	2b63      	cmp	r3, #99	; 0x63
 801235a:	d065      	beq.n	8012428 <__ssvfiscanf_r+0x1f0>
 801235c:	2b64      	cmp	r3, #100	; 0x64
 801235e:	d1e1      	bne.n	8012324 <__ssvfiscanf_r+0xec>
 8012360:	9742      	str	r7, [sp, #264]	; 0x108
 8012362:	e7f4      	b.n	801234e <__ssvfiscanf_r+0x116>
 8012364:	2b70      	cmp	r3, #112	; 0x70
 8012366:	d04b      	beq.n	8012400 <__ssvfiscanf_r+0x1c8>
 8012368:	d826      	bhi.n	80123b8 <__ssvfiscanf_r+0x180>
 801236a:	2b6e      	cmp	r3, #110	; 0x6e
 801236c:	d062      	beq.n	8012434 <__ssvfiscanf_r+0x1fc>
 801236e:	d84c      	bhi.n	801240a <__ssvfiscanf_r+0x1d2>
 8012370:	2b69      	cmp	r3, #105	; 0x69
 8012372:	d1d7      	bne.n	8012324 <__ssvfiscanf_r+0xec>
 8012374:	2300      	movs	r3, #0
 8012376:	9342      	str	r3, [sp, #264]	; 0x108
 8012378:	2303      	movs	r3, #3
 801237a:	9347      	str	r3, [sp, #284]	; 0x11c
 801237c:	6863      	ldr	r3, [r4, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	dd68      	ble.n	8012454 <__ssvfiscanf_r+0x21c>
 8012382:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012384:	0659      	lsls	r1, r3, #25
 8012386:	d407      	bmi.n	8012398 <__ssvfiscanf_r+0x160>
 8012388:	f7ff f902 	bl	8011590 <__locale_ctype_ptr>
 801238c:	6823      	ldr	r3, [r4, #0]
 801238e:	781a      	ldrb	r2, [r3, #0]
 8012390:	4410      	add	r0, r2
 8012392:	7842      	ldrb	r2, [r0, #1]
 8012394:	0712      	lsls	r2, r2, #28
 8012396:	d464      	bmi.n	8012462 <__ssvfiscanf_r+0x22a>
 8012398:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801239a:	2b02      	cmp	r3, #2
 801239c:	dc73      	bgt.n	8012486 <__ssvfiscanf_r+0x24e>
 801239e:	466b      	mov	r3, sp
 80123a0:	4622      	mov	r2, r4
 80123a2:	a941      	add	r1, sp, #260	; 0x104
 80123a4:	4630      	mov	r0, r6
 80123a6:	f000 f9d7 	bl	8012758 <_scanf_chars>
 80123aa:	2801      	cmp	r0, #1
 80123ac:	f000 8089 	beq.w	80124c2 <__ssvfiscanf_r+0x28a>
 80123b0:	2802      	cmp	r0, #2
 80123b2:	f47f af71 	bne.w	8012298 <__ssvfiscanf_r+0x60>
 80123b6:	e01d      	b.n	80123f4 <__ssvfiscanf_r+0x1bc>
 80123b8:	2b75      	cmp	r3, #117	; 0x75
 80123ba:	d0d1      	beq.n	8012360 <__ssvfiscanf_r+0x128>
 80123bc:	2b78      	cmp	r3, #120	; 0x78
 80123be:	d0c0      	beq.n	8012342 <__ssvfiscanf_r+0x10a>
 80123c0:	2b73      	cmp	r3, #115	; 0x73
 80123c2:	d1af      	bne.n	8012324 <__ssvfiscanf_r+0xec>
 80123c4:	2302      	movs	r3, #2
 80123c6:	e7d8      	b.n	801237a <__ssvfiscanf_r+0x142>
 80123c8:	6863      	ldr	r3, [r4, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	dd0c      	ble.n	80123e8 <__ssvfiscanf_r+0x1b0>
 80123ce:	6823      	ldr	r3, [r4, #0]
 80123d0:	781a      	ldrb	r2, [r3, #0]
 80123d2:	455a      	cmp	r2, fp
 80123d4:	d175      	bne.n	80124c2 <__ssvfiscanf_r+0x28a>
 80123d6:	3301      	adds	r3, #1
 80123d8:	6862      	ldr	r2, [r4, #4]
 80123da:	6023      	str	r3, [r4, #0]
 80123dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80123de:	3a01      	subs	r2, #1
 80123e0:	3301      	adds	r3, #1
 80123e2:	6062      	str	r2, [r4, #4]
 80123e4:	9345      	str	r3, [sp, #276]	; 0x114
 80123e6:	e757      	b.n	8012298 <__ssvfiscanf_r+0x60>
 80123e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80123ea:	4621      	mov	r1, r4
 80123ec:	4630      	mov	r0, r6
 80123ee:	4798      	blx	r3
 80123f0:	2800      	cmp	r0, #0
 80123f2:	d0ec      	beq.n	80123ce <__ssvfiscanf_r+0x196>
 80123f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d159      	bne.n	80124ae <__ssvfiscanf_r+0x276>
 80123fa:	f04f 30ff 	mov.w	r0, #4294967295
 80123fe:	e05c      	b.n	80124ba <__ssvfiscanf_r+0x282>
 8012400:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012402:	f042 0220 	orr.w	r2, r2, #32
 8012406:	9241      	str	r2, [sp, #260]	; 0x104
 8012408:	e79b      	b.n	8012342 <__ssvfiscanf_r+0x10a>
 801240a:	2308      	movs	r3, #8
 801240c:	9342      	str	r3, [sp, #264]	; 0x108
 801240e:	2304      	movs	r3, #4
 8012410:	e7b3      	b.n	801237a <__ssvfiscanf_r+0x142>
 8012412:	4629      	mov	r1, r5
 8012414:	4640      	mov	r0, r8
 8012416:	f000 fb09 	bl	8012a2c <__sccl>
 801241a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801241c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012420:	9341      	str	r3, [sp, #260]	; 0x104
 8012422:	4605      	mov	r5, r0
 8012424:	2301      	movs	r3, #1
 8012426:	e7a8      	b.n	801237a <__ssvfiscanf_r+0x142>
 8012428:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801242a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801242e:	9341      	str	r3, [sp, #260]	; 0x104
 8012430:	2300      	movs	r3, #0
 8012432:	e7a2      	b.n	801237a <__ssvfiscanf_r+0x142>
 8012434:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012436:	06c3      	lsls	r3, r0, #27
 8012438:	f53f af2e 	bmi.w	8012298 <__ssvfiscanf_r+0x60>
 801243c:	9b00      	ldr	r3, [sp, #0]
 801243e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012440:	1d19      	adds	r1, r3, #4
 8012442:	9100      	str	r1, [sp, #0]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	07c0      	lsls	r0, r0, #31
 8012448:	bf4c      	ite	mi
 801244a:	801a      	strhmi	r2, [r3, #0]
 801244c:	601a      	strpl	r2, [r3, #0]
 801244e:	e723      	b.n	8012298 <__ssvfiscanf_r+0x60>
 8012450:	2305      	movs	r3, #5
 8012452:	e792      	b.n	801237a <__ssvfiscanf_r+0x142>
 8012454:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012456:	4621      	mov	r1, r4
 8012458:	4630      	mov	r0, r6
 801245a:	4798      	blx	r3
 801245c:	2800      	cmp	r0, #0
 801245e:	d090      	beq.n	8012382 <__ssvfiscanf_r+0x14a>
 8012460:	e7c8      	b.n	80123f4 <__ssvfiscanf_r+0x1bc>
 8012462:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012464:	3201      	adds	r2, #1
 8012466:	9245      	str	r2, [sp, #276]	; 0x114
 8012468:	6862      	ldr	r2, [r4, #4]
 801246a:	3a01      	subs	r2, #1
 801246c:	2a00      	cmp	r2, #0
 801246e:	6062      	str	r2, [r4, #4]
 8012470:	dd02      	ble.n	8012478 <__ssvfiscanf_r+0x240>
 8012472:	3301      	adds	r3, #1
 8012474:	6023      	str	r3, [r4, #0]
 8012476:	e787      	b.n	8012388 <__ssvfiscanf_r+0x150>
 8012478:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801247a:	4621      	mov	r1, r4
 801247c:	4630      	mov	r0, r6
 801247e:	4798      	blx	r3
 8012480:	2800      	cmp	r0, #0
 8012482:	d081      	beq.n	8012388 <__ssvfiscanf_r+0x150>
 8012484:	e7b6      	b.n	80123f4 <__ssvfiscanf_r+0x1bc>
 8012486:	2b04      	cmp	r3, #4
 8012488:	dc06      	bgt.n	8012498 <__ssvfiscanf_r+0x260>
 801248a:	466b      	mov	r3, sp
 801248c:	4622      	mov	r2, r4
 801248e:	a941      	add	r1, sp, #260	; 0x104
 8012490:	4630      	mov	r0, r6
 8012492:	f000 f9c5 	bl	8012820 <_scanf_i>
 8012496:	e788      	b.n	80123aa <__ssvfiscanf_r+0x172>
 8012498:	4b0e      	ldr	r3, [pc, #56]	; (80124d4 <__ssvfiscanf_r+0x29c>)
 801249a:	2b00      	cmp	r3, #0
 801249c:	f43f aefc 	beq.w	8012298 <__ssvfiscanf_r+0x60>
 80124a0:	466b      	mov	r3, sp
 80124a2:	4622      	mov	r2, r4
 80124a4:	a941      	add	r1, sp, #260	; 0x104
 80124a6:	4630      	mov	r0, r6
 80124a8:	f7fc fb56 	bl	800eb58 <_scanf_float>
 80124ac:	e77d      	b.n	80123aa <__ssvfiscanf_r+0x172>
 80124ae:	89a3      	ldrh	r3, [r4, #12]
 80124b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80124b4:	bf18      	it	ne
 80124b6:	f04f 30ff 	movne.w	r0, #4294967295
 80124ba:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80124be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80124c4:	e7f9      	b.n	80124ba <__ssvfiscanf_r+0x282>
 80124c6:	bf00      	nop
 80124c8:	08012185 	.word	0x08012185
 80124cc:	080121ff 	.word	0x080121ff
 80124d0:	080131b2 	.word	0x080131b2
 80124d4:	0800eb59 	.word	0x0800eb59

080124d8 <__sfputc_r>:
 80124d8:	6893      	ldr	r3, [r2, #8]
 80124da:	3b01      	subs	r3, #1
 80124dc:	2b00      	cmp	r3, #0
 80124de:	b410      	push	{r4}
 80124e0:	6093      	str	r3, [r2, #8]
 80124e2:	da08      	bge.n	80124f6 <__sfputc_r+0x1e>
 80124e4:	6994      	ldr	r4, [r2, #24]
 80124e6:	42a3      	cmp	r3, r4
 80124e8:	db01      	blt.n	80124ee <__sfputc_r+0x16>
 80124ea:	290a      	cmp	r1, #10
 80124ec:	d103      	bne.n	80124f6 <__sfputc_r+0x1e>
 80124ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124f2:	f7fd bcef 	b.w	800fed4 <__swbuf_r>
 80124f6:	6813      	ldr	r3, [r2, #0]
 80124f8:	1c58      	adds	r0, r3, #1
 80124fa:	6010      	str	r0, [r2, #0]
 80124fc:	7019      	strb	r1, [r3, #0]
 80124fe:	4608      	mov	r0, r1
 8012500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012504:	4770      	bx	lr

08012506 <__sfputs_r>:
 8012506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012508:	4606      	mov	r6, r0
 801250a:	460f      	mov	r7, r1
 801250c:	4614      	mov	r4, r2
 801250e:	18d5      	adds	r5, r2, r3
 8012510:	42ac      	cmp	r4, r5
 8012512:	d101      	bne.n	8012518 <__sfputs_r+0x12>
 8012514:	2000      	movs	r0, #0
 8012516:	e007      	b.n	8012528 <__sfputs_r+0x22>
 8012518:	463a      	mov	r2, r7
 801251a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801251e:	4630      	mov	r0, r6
 8012520:	f7ff ffda 	bl	80124d8 <__sfputc_r>
 8012524:	1c43      	adds	r3, r0, #1
 8012526:	d1f3      	bne.n	8012510 <__sfputs_r+0xa>
 8012528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801252c <_vfiprintf_r>:
 801252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012530:	460c      	mov	r4, r1
 8012532:	b09d      	sub	sp, #116	; 0x74
 8012534:	4617      	mov	r7, r2
 8012536:	461d      	mov	r5, r3
 8012538:	4606      	mov	r6, r0
 801253a:	b118      	cbz	r0, 8012544 <_vfiprintf_r+0x18>
 801253c:	6983      	ldr	r3, [r0, #24]
 801253e:	b90b      	cbnz	r3, 8012544 <_vfiprintf_r+0x18>
 8012540:	f7fe fc72 	bl	8010e28 <__sinit>
 8012544:	4b7c      	ldr	r3, [pc, #496]	; (8012738 <_vfiprintf_r+0x20c>)
 8012546:	429c      	cmp	r4, r3
 8012548:	d158      	bne.n	80125fc <_vfiprintf_r+0xd0>
 801254a:	6874      	ldr	r4, [r6, #4]
 801254c:	89a3      	ldrh	r3, [r4, #12]
 801254e:	0718      	lsls	r0, r3, #28
 8012550:	d55e      	bpl.n	8012610 <_vfiprintf_r+0xe4>
 8012552:	6923      	ldr	r3, [r4, #16]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d05b      	beq.n	8012610 <_vfiprintf_r+0xe4>
 8012558:	2300      	movs	r3, #0
 801255a:	9309      	str	r3, [sp, #36]	; 0x24
 801255c:	2320      	movs	r3, #32
 801255e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012562:	2330      	movs	r3, #48	; 0x30
 8012564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012568:	9503      	str	r5, [sp, #12]
 801256a:	f04f 0b01 	mov.w	fp, #1
 801256e:	46b8      	mov	r8, r7
 8012570:	4645      	mov	r5, r8
 8012572:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012576:	b10b      	cbz	r3, 801257c <_vfiprintf_r+0x50>
 8012578:	2b25      	cmp	r3, #37	; 0x25
 801257a:	d154      	bne.n	8012626 <_vfiprintf_r+0xfa>
 801257c:	ebb8 0a07 	subs.w	sl, r8, r7
 8012580:	d00b      	beq.n	801259a <_vfiprintf_r+0x6e>
 8012582:	4653      	mov	r3, sl
 8012584:	463a      	mov	r2, r7
 8012586:	4621      	mov	r1, r4
 8012588:	4630      	mov	r0, r6
 801258a:	f7ff ffbc 	bl	8012506 <__sfputs_r>
 801258e:	3001      	adds	r0, #1
 8012590:	f000 80c2 	beq.w	8012718 <_vfiprintf_r+0x1ec>
 8012594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012596:	4453      	add	r3, sl
 8012598:	9309      	str	r3, [sp, #36]	; 0x24
 801259a:	f898 3000 	ldrb.w	r3, [r8]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	f000 80ba 	beq.w	8012718 <_vfiprintf_r+0x1ec>
 80125a4:	2300      	movs	r3, #0
 80125a6:	f04f 32ff 	mov.w	r2, #4294967295
 80125aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125ae:	9304      	str	r3, [sp, #16]
 80125b0:	9307      	str	r3, [sp, #28]
 80125b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125b6:	931a      	str	r3, [sp, #104]	; 0x68
 80125b8:	46a8      	mov	r8, r5
 80125ba:	2205      	movs	r2, #5
 80125bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80125c0:	485e      	ldr	r0, [pc, #376]	; (801273c <_vfiprintf_r+0x210>)
 80125c2:	f7ed fe45 	bl	8000250 <memchr>
 80125c6:	9b04      	ldr	r3, [sp, #16]
 80125c8:	bb78      	cbnz	r0, 801262a <_vfiprintf_r+0xfe>
 80125ca:	06d9      	lsls	r1, r3, #27
 80125cc:	bf44      	itt	mi
 80125ce:	2220      	movmi	r2, #32
 80125d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80125d4:	071a      	lsls	r2, r3, #28
 80125d6:	bf44      	itt	mi
 80125d8:	222b      	movmi	r2, #43	; 0x2b
 80125da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80125de:	782a      	ldrb	r2, [r5, #0]
 80125e0:	2a2a      	cmp	r2, #42	; 0x2a
 80125e2:	d02a      	beq.n	801263a <_vfiprintf_r+0x10e>
 80125e4:	9a07      	ldr	r2, [sp, #28]
 80125e6:	46a8      	mov	r8, r5
 80125e8:	2000      	movs	r0, #0
 80125ea:	250a      	movs	r5, #10
 80125ec:	4641      	mov	r1, r8
 80125ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125f2:	3b30      	subs	r3, #48	; 0x30
 80125f4:	2b09      	cmp	r3, #9
 80125f6:	d969      	bls.n	80126cc <_vfiprintf_r+0x1a0>
 80125f8:	b360      	cbz	r0, 8012654 <_vfiprintf_r+0x128>
 80125fa:	e024      	b.n	8012646 <_vfiprintf_r+0x11a>
 80125fc:	4b50      	ldr	r3, [pc, #320]	; (8012740 <_vfiprintf_r+0x214>)
 80125fe:	429c      	cmp	r4, r3
 8012600:	d101      	bne.n	8012606 <_vfiprintf_r+0xda>
 8012602:	68b4      	ldr	r4, [r6, #8]
 8012604:	e7a2      	b.n	801254c <_vfiprintf_r+0x20>
 8012606:	4b4f      	ldr	r3, [pc, #316]	; (8012744 <_vfiprintf_r+0x218>)
 8012608:	429c      	cmp	r4, r3
 801260a:	bf08      	it	eq
 801260c:	68f4      	ldreq	r4, [r6, #12]
 801260e:	e79d      	b.n	801254c <_vfiprintf_r+0x20>
 8012610:	4621      	mov	r1, r4
 8012612:	4630      	mov	r0, r6
 8012614:	f7fd fcc2 	bl	800ff9c <__swsetup_r>
 8012618:	2800      	cmp	r0, #0
 801261a:	d09d      	beq.n	8012558 <_vfiprintf_r+0x2c>
 801261c:	f04f 30ff 	mov.w	r0, #4294967295
 8012620:	b01d      	add	sp, #116	; 0x74
 8012622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012626:	46a8      	mov	r8, r5
 8012628:	e7a2      	b.n	8012570 <_vfiprintf_r+0x44>
 801262a:	4a44      	ldr	r2, [pc, #272]	; (801273c <_vfiprintf_r+0x210>)
 801262c:	1a80      	subs	r0, r0, r2
 801262e:	fa0b f000 	lsl.w	r0, fp, r0
 8012632:	4318      	orrs	r0, r3
 8012634:	9004      	str	r0, [sp, #16]
 8012636:	4645      	mov	r5, r8
 8012638:	e7be      	b.n	80125b8 <_vfiprintf_r+0x8c>
 801263a:	9a03      	ldr	r2, [sp, #12]
 801263c:	1d11      	adds	r1, r2, #4
 801263e:	6812      	ldr	r2, [r2, #0]
 8012640:	9103      	str	r1, [sp, #12]
 8012642:	2a00      	cmp	r2, #0
 8012644:	db01      	blt.n	801264a <_vfiprintf_r+0x11e>
 8012646:	9207      	str	r2, [sp, #28]
 8012648:	e004      	b.n	8012654 <_vfiprintf_r+0x128>
 801264a:	4252      	negs	r2, r2
 801264c:	f043 0302 	orr.w	r3, r3, #2
 8012650:	9207      	str	r2, [sp, #28]
 8012652:	9304      	str	r3, [sp, #16]
 8012654:	f898 3000 	ldrb.w	r3, [r8]
 8012658:	2b2e      	cmp	r3, #46	; 0x2e
 801265a:	d10e      	bne.n	801267a <_vfiprintf_r+0x14e>
 801265c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012660:	2b2a      	cmp	r3, #42	; 0x2a
 8012662:	d138      	bne.n	80126d6 <_vfiprintf_r+0x1aa>
 8012664:	9b03      	ldr	r3, [sp, #12]
 8012666:	1d1a      	adds	r2, r3, #4
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	9203      	str	r2, [sp, #12]
 801266c:	2b00      	cmp	r3, #0
 801266e:	bfb8      	it	lt
 8012670:	f04f 33ff 	movlt.w	r3, #4294967295
 8012674:	f108 0802 	add.w	r8, r8, #2
 8012678:	9305      	str	r3, [sp, #20]
 801267a:	4d33      	ldr	r5, [pc, #204]	; (8012748 <_vfiprintf_r+0x21c>)
 801267c:	f898 1000 	ldrb.w	r1, [r8]
 8012680:	2203      	movs	r2, #3
 8012682:	4628      	mov	r0, r5
 8012684:	f7ed fde4 	bl	8000250 <memchr>
 8012688:	b140      	cbz	r0, 801269c <_vfiprintf_r+0x170>
 801268a:	2340      	movs	r3, #64	; 0x40
 801268c:	1b40      	subs	r0, r0, r5
 801268e:	fa03 f000 	lsl.w	r0, r3, r0
 8012692:	9b04      	ldr	r3, [sp, #16]
 8012694:	4303      	orrs	r3, r0
 8012696:	f108 0801 	add.w	r8, r8, #1
 801269a:	9304      	str	r3, [sp, #16]
 801269c:	f898 1000 	ldrb.w	r1, [r8]
 80126a0:	482a      	ldr	r0, [pc, #168]	; (801274c <_vfiprintf_r+0x220>)
 80126a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126a6:	2206      	movs	r2, #6
 80126a8:	f108 0701 	add.w	r7, r8, #1
 80126ac:	f7ed fdd0 	bl	8000250 <memchr>
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d037      	beq.n	8012724 <_vfiprintf_r+0x1f8>
 80126b4:	4b26      	ldr	r3, [pc, #152]	; (8012750 <_vfiprintf_r+0x224>)
 80126b6:	bb1b      	cbnz	r3, 8012700 <_vfiprintf_r+0x1d4>
 80126b8:	9b03      	ldr	r3, [sp, #12]
 80126ba:	3307      	adds	r3, #7
 80126bc:	f023 0307 	bic.w	r3, r3, #7
 80126c0:	3308      	adds	r3, #8
 80126c2:	9303      	str	r3, [sp, #12]
 80126c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126c6:	444b      	add	r3, r9
 80126c8:	9309      	str	r3, [sp, #36]	; 0x24
 80126ca:	e750      	b.n	801256e <_vfiprintf_r+0x42>
 80126cc:	fb05 3202 	mla	r2, r5, r2, r3
 80126d0:	2001      	movs	r0, #1
 80126d2:	4688      	mov	r8, r1
 80126d4:	e78a      	b.n	80125ec <_vfiprintf_r+0xc0>
 80126d6:	2300      	movs	r3, #0
 80126d8:	f108 0801 	add.w	r8, r8, #1
 80126dc:	9305      	str	r3, [sp, #20]
 80126de:	4619      	mov	r1, r3
 80126e0:	250a      	movs	r5, #10
 80126e2:	4640      	mov	r0, r8
 80126e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126e8:	3a30      	subs	r2, #48	; 0x30
 80126ea:	2a09      	cmp	r2, #9
 80126ec:	d903      	bls.n	80126f6 <_vfiprintf_r+0x1ca>
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d0c3      	beq.n	801267a <_vfiprintf_r+0x14e>
 80126f2:	9105      	str	r1, [sp, #20]
 80126f4:	e7c1      	b.n	801267a <_vfiprintf_r+0x14e>
 80126f6:	fb05 2101 	mla	r1, r5, r1, r2
 80126fa:	2301      	movs	r3, #1
 80126fc:	4680      	mov	r8, r0
 80126fe:	e7f0      	b.n	80126e2 <_vfiprintf_r+0x1b6>
 8012700:	ab03      	add	r3, sp, #12
 8012702:	9300      	str	r3, [sp, #0]
 8012704:	4622      	mov	r2, r4
 8012706:	4b13      	ldr	r3, [pc, #76]	; (8012754 <_vfiprintf_r+0x228>)
 8012708:	a904      	add	r1, sp, #16
 801270a:	4630      	mov	r0, r6
 801270c:	f7fb fe70 	bl	800e3f0 <_printf_float>
 8012710:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012714:	4681      	mov	r9, r0
 8012716:	d1d5      	bne.n	80126c4 <_vfiprintf_r+0x198>
 8012718:	89a3      	ldrh	r3, [r4, #12]
 801271a:	065b      	lsls	r3, r3, #25
 801271c:	f53f af7e 	bmi.w	801261c <_vfiprintf_r+0xf0>
 8012720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012722:	e77d      	b.n	8012620 <_vfiprintf_r+0xf4>
 8012724:	ab03      	add	r3, sp, #12
 8012726:	9300      	str	r3, [sp, #0]
 8012728:	4622      	mov	r2, r4
 801272a:	4b0a      	ldr	r3, [pc, #40]	; (8012754 <_vfiprintf_r+0x228>)
 801272c:	a904      	add	r1, sp, #16
 801272e:	4630      	mov	r0, r6
 8012730:	f7fc f900 	bl	800e934 <_printf_i>
 8012734:	e7ec      	b.n	8012710 <_vfiprintf_r+0x1e4>
 8012736:	bf00      	nop
 8012738:	08013060 	.word	0x08013060
 801273c:	080131ac 	.word	0x080131ac
 8012740:	08013080 	.word	0x08013080
 8012744:	08013040 	.word	0x08013040
 8012748:	080131b2 	.word	0x080131b2
 801274c:	080131b6 	.word	0x080131b6
 8012750:	0800e3f1 	.word	0x0800e3f1
 8012754:	08012507 	.word	0x08012507

08012758 <_scanf_chars>:
 8012758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801275c:	4615      	mov	r5, r2
 801275e:	688a      	ldr	r2, [r1, #8]
 8012760:	4680      	mov	r8, r0
 8012762:	460c      	mov	r4, r1
 8012764:	b932      	cbnz	r2, 8012774 <_scanf_chars+0x1c>
 8012766:	698a      	ldr	r2, [r1, #24]
 8012768:	2a00      	cmp	r2, #0
 801276a:	bf14      	ite	ne
 801276c:	f04f 32ff 	movne.w	r2, #4294967295
 8012770:	2201      	moveq	r2, #1
 8012772:	608a      	str	r2, [r1, #8]
 8012774:	6822      	ldr	r2, [r4, #0]
 8012776:	06d1      	lsls	r1, r2, #27
 8012778:	bf5f      	itttt	pl
 801277a:	681a      	ldrpl	r2, [r3, #0]
 801277c:	1d11      	addpl	r1, r2, #4
 801277e:	6019      	strpl	r1, [r3, #0]
 8012780:	6817      	ldrpl	r7, [r2, #0]
 8012782:	2600      	movs	r6, #0
 8012784:	69a3      	ldr	r3, [r4, #24]
 8012786:	b1db      	cbz	r3, 80127c0 <_scanf_chars+0x68>
 8012788:	2b01      	cmp	r3, #1
 801278a:	d107      	bne.n	801279c <_scanf_chars+0x44>
 801278c:	682b      	ldr	r3, [r5, #0]
 801278e:	6962      	ldr	r2, [r4, #20]
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	5cd3      	ldrb	r3, [r2, r3]
 8012794:	b9a3      	cbnz	r3, 80127c0 <_scanf_chars+0x68>
 8012796:	2e00      	cmp	r6, #0
 8012798:	d132      	bne.n	8012800 <_scanf_chars+0xa8>
 801279a:	e006      	b.n	80127aa <_scanf_chars+0x52>
 801279c:	2b02      	cmp	r3, #2
 801279e:	d007      	beq.n	80127b0 <_scanf_chars+0x58>
 80127a0:	2e00      	cmp	r6, #0
 80127a2:	d12d      	bne.n	8012800 <_scanf_chars+0xa8>
 80127a4:	69a3      	ldr	r3, [r4, #24]
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d12a      	bne.n	8012800 <_scanf_chars+0xa8>
 80127aa:	2001      	movs	r0, #1
 80127ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b0:	f7fe feee 	bl	8011590 <__locale_ctype_ptr>
 80127b4:	682b      	ldr	r3, [r5, #0]
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	4418      	add	r0, r3
 80127ba:	7843      	ldrb	r3, [r0, #1]
 80127bc:	071b      	lsls	r3, r3, #28
 80127be:	d4ef      	bmi.n	80127a0 <_scanf_chars+0x48>
 80127c0:	6823      	ldr	r3, [r4, #0]
 80127c2:	06da      	lsls	r2, r3, #27
 80127c4:	bf5e      	ittt	pl
 80127c6:	682b      	ldrpl	r3, [r5, #0]
 80127c8:	781b      	ldrbpl	r3, [r3, #0]
 80127ca:	703b      	strbpl	r3, [r7, #0]
 80127cc:	682a      	ldr	r2, [r5, #0]
 80127ce:	686b      	ldr	r3, [r5, #4]
 80127d0:	f102 0201 	add.w	r2, r2, #1
 80127d4:	602a      	str	r2, [r5, #0]
 80127d6:	68a2      	ldr	r2, [r4, #8]
 80127d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80127dc:	f102 32ff 	add.w	r2, r2, #4294967295
 80127e0:	606b      	str	r3, [r5, #4]
 80127e2:	f106 0601 	add.w	r6, r6, #1
 80127e6:	bf58      	it	pl
 80127e8:	3701      	addpl	r7, #1
 80127ea:	60a2      	str	r2, [r4, #8]
 80127ec:	b142      	cbz	r2, 8012800 <_scanf_chars+0xa8>
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	dcc8      	bgt.n	8012784 <_scanf_chars+0x2c>
 80127f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80127f6:	4629      	mov	r1, r5
 80127f8:	4640      	mov	r0, r8
 80127fa:	4798      	blx	r3
 80127fc:	2800      	cmp	r0, #0
 80127fe:	d0c1      	beq.n	8012784 <_scanf_chars+0x2c>
 8012800:	6823      	ldr	r3, [r4, #0]
 8012802:	f013 0310 	ands.w	r3, r3, #16
 8012806:	d105      	bne.n	8012814 <_scanf_chars+0xbc>
 8012808:	68e2      	ldr	r2, [r4, #12]
 801280a:	3201      	adds	r2, #1
 801280c:	60e2      	str	r2, [r4, #12]
 801280e:	69a2      	ldr	r2, [r4, #24]
 8012810:	b102      	cbz	r2, 8012814 <_scanf_chars+0xbc>
 8012812:	703b      	strb	r3, [r7, #0]
 8012814:	6923      	ldr	r3, [r4, #16]
 8012816:	441e      	add	r6, r3
 8012818:	6126      	str	r6, [r4, #16]
 801281a:	2000      	movs	r0, #0
 801281c:	e7c6      	b.n	80127ac <_scanf_chars+0x54>
	...

08012820 <_scanf_i>:
 8012820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012824:	469a      	mov	sl, r3
 8012826:	4b74      	ldr	r3, [pc, #464]	; (80129f8 <_scanf_i+0x1d8>)
 8012828:	460c      	mov	r4, r1
 801282a:	4683      	mov	fp, r0
 801282c:	4616      	mov	r6, r2
 801282e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012832:	b087      	sub	sp, #28
 8012834:	ab03      	add	r3, sp, #12
 8012836:	68a7      	ldr	r7, [r4, #8]
 8012838:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801283c:	4b6f      	ldr	r3, [pc, #444]	; (80129fc <_scanf_i+0x1dc>)
 801283e:	69a1      	ldr	r1, [r4, #24]
 8012840:	4a6f      	ldr	r2, [pc, #444]	; (8012a00 <_scanf_i+0x1e0>)
 8012842:	2903      	cmp	r1, #3
 8012844:	bf08      	it	eq
 8012846:	461a      	moveq	r2, r3
 8012848:	1e7b      	subs	r3, r7, #1
 801284a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801284e:	bf84      	itt	hi
 8012850:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012854:	60a3      	strhi	r3, [r4, #8]
 8012856:	6823      	ldr	r3, [r4, #0]
 8012858:	9200      	str	r2, [sp, #0]
 801285a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801285e:	bf88      	it	hi
 8012860:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012864:	f104 091c 	add.w	r9, r4, #28
 8012868:	6023      	str	r3, [r4, #0]
 801286a:	bf8c      	ite	hi
 801286c:	197f      	addhi	r7, r7, r5
 801286e:	2700      	movls	r7, #0
 8012870:	464b      	mov	r3, r9
 8012872:	f04f 0800 	mov.w	r8, #0
 8012876:	9301      	str	r3, [sp, #4]
 8012878:	6831      	ldr	r1, [r6, #0]
 801287a:	ab03      	add	r3, sp, #12
 801287c:	2202      	movs	r2, #2
 801287e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012882:	7809      	ldrb	r1, [r1, #0]
 8012884:	f7ed fce4 	bl	8000250 <memchr>
 8012888:	9b01      	ldr	r3, [sp, #4]
 801288a:	b330      	cbz	r0, 80128da <_scanf_i+0xba>
 801288c:	f1b8 0f01 	cmp.w	r8, #1
 8012890:	d15a      	bne.n	8012948 <_scanf_i+0x128>
 8012892:	6862      	ldr	r2, [r4, #4]
 8012894:	b92a      	cbnz	r2, 80128a2 <_scanf_i+0x82>
 8012896:	6822      	ldr	r2, [r4, #0]
 8012898:	2108      	movs	r1, #8
 801289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801289e:	6061      	str	r1, [r4, #4]
 80128a0:	6022      	str	r2, [r4, #0]
 80128a2:	6822      	ldr	r2, [r4, #0]
 80128a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80128a8:	6022      	str	r2, [r4, #0]
 80128aa:	68a2      	ldr	r2, [r4, #8]
 80128ac:	1e51      	subs	r1, r2, #1
 80128ae:	60a1      	str	r1, [r4, #8]
 80128b0:	b19a      	cbz	r2, 80128da <_scanf_i+0xba>
 80128b2:	6832      	ldr	r2, [r6, #0]
 80128b4:	1c51      	adds	r1, r2, #1
 80128b6:	6031      	str	r1, [r6, #0]
 80128b8:	7812      	ldrb	r2, [r2, #0]
 80128ba:	701a      	strb	r2, [r3, #0]
 80128bc:	1c5d      	adds	r5, r3, #1
 80128be:	6873      	ldr	r3, [r6, #4]
 80128c0:	3b01      	subs	r3, #1
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	6073      	str	r3, [r6, #4]
 80128c6:	dc07      	bgt.n	80128d8 <_scanf_i+0xb8>
 80128c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80128cc:	4631      	mov	r1, r6
 80128ce:	4658      	mov	r0, fp
 80128d0:	4798      	blx	r3
 80128d2:	2800      	cmp	r0, #0
 80128d4:	f040 8086 	bne.w	80129e4 <_scanf_i+0x1c4>
 80128d8:	462b      	mov	r3, r5
 80128da:	f108 0801 	add.w	r8, r8, #1
 80128de:	f1b8 0f03 	cmp.w	r8, #3
 80128e2:	d1c8      	bne.n	8012876 <_scanf_i+0x56>
 80128e4:	6862      	ldr	r2, [r4, #4]
 80128e6:	b90a      	cbnz	r2, 80128ec <_scanf_i+0xcc>
 80128e8:	220a      	movs	r2, #10
 80128ea:	6062      	str	r2, [r4, #4]
 80128ec:	6862      	ldr	r2, [r4, #4]
 80128ee:	4945      	ldr	r1, [pc, #276]	; (8012a04 <_scanf_i+0x1e4>)
 80128f0:	6960      	ldr	r0, [r4, #20]
 80128f2:	9301      	str	r3, [sp, #4]
 80128f4:	1a89      	subs	r1, r1, r2
 80128f6:	f000 f899 	bl	8012a2c <__sccl>
 80128fa:	9b01      	ldr	r3, [sp, #4]
 80128fc:	f04f 0800 	mov.w	r8, #0
 8012900:	461d      	mov	r5, r3
 8012902:	68a3      	ldr	r3, [r4, #8]
 8012904:	6822      	ldr	r2, [r4, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d03a      	beq.n	8012980 <_scanf_i+0x160>
 801290a:	6831      	ldr	r1, [r6, #0]
 801290c:	6960      	ldr	r0, [r4, #20]
 801290e:	f891 c000 	ldrb.w	ip, [r1]
 8012912:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012916:	2800      	cmp	r0, #0
 8012918:	d032      	beq.n	8012980 <_scanf_i+0x160>
 801291a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801291e:	d121      	bne.n	8012964 <_scanf_i+0x144>
 8012920:	0510      	lsls	r0, r2, #20
 8012922:	d51f      	bpl.n	8012964 <_scanf_i+0x144>
 8012924:	f108 0801 	add.w	r8, r8, #1
 8012928:	b117      	cbz	r7, 8012930 <_scanf_i+0x110>
 801292a:	3301      	adds	r3, #1
 801292c:	3f01      	subs	r7, #1
 801292e:	60a3      	str	r3, [r4, #8]
 8012930:	6873      	ldr	r3, [r6, #4]
 8012932:	3b01      	subs	r3, #1
 8012934:	2b00      	cmp	r3, #0
 8012936:	6073      	str	r3, [r6, #4]
 8012938:	dd1b      	ble.n	8012972 <_scanf_i+0x152>
 801293a:	6833      	ldr	r3, [r6, #0]
 801293c:	3301      	adds	r3, #1
 801293e:	6033      	str	r3, [r6, #0]
 8012940:	68a3      	ldr	r3, [r4, #8]
 8012942:	3b01      	subs	r3, #1
 8012944:	60a3      	str	r3, [r4, #8]
 8012946:	e7dc      	b.n	8012902 <_scanf_i+0xe2>
 8012948:	f1b8 0f02 	cmp.w	r8, #2
 801294c:	d1ad      	bne.n	80128aa <_scanf_i+0x8a>
 801294e:	6822      	ldr	r2, [r4, #0]
 8012950:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012954:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012958:	d1bf      	bne.n	80128da <_scanf_i+0xba>
 801295a:	2110      	movs	r1, #16
 801295c:	6061      	str	r1, [r4, #4]
 801295e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012962:	e7a1      	b.n	80128a8 <_scanf_i+0x88>
 8012964:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012968:	6022      	str	r2, [r4, #0]
 801296a:	780b      	ldrb	r3, [r1, #0]
 801296c:	702b      	strb	r3, [r5, #0]
 801296e:	3501      	adds	r5, #1
 8012970:	e7de      	b.n	8012930 <_scanf_i+0x110>
 8012972:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012976:	4631      	mov	r1, r6
 8012978:	4658      	mov	r0, fp
 801297a:	4798      	blx	r3
 801297c:	2800      	cmp	r0, #0
 801297e:	d0df      	beq.n	8012940 <_scanf_i+0x120>
 8012980:	6823      	ldr	r3, [r4, #0]
 8012982:	05d9      	lsls	r1, r3, #23
 8012984:	d50c      	bpl.n	80129a0 <_scanf_i+0x180>
 8012986:	454d      	cmp	r5, r9
 8012988:	d908      	bls.n	801299c <_scanf_i+0x17c>
 801298a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801298e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012992:	4632      	mov	r2, r6
 8012994:	4658      	mov	r0, fp
 8012996:	4798      	blx	r3
 8012998:	1e6f      	subs	r7, r5, #1
 801299a:	463d      	mov	r5, r7
 801299c:	454d      	cmp	r5, r9
 801299e:	d029      	beq.n	80129f4 <_scanf_i+0x1d4>
 80129a0:	6822      	ldr	r2, [r4, #0]
 80129a2:	f012 0210 	ands.w	r2, r2, #16
 80129a6:	d113      	bne.n	80129d0 <_scanf_i+0x1b0>
 80129a8:	702a      	strb	r2, [r5, #0]
 80129aa:	6863      	ldr	r3, [r4, #4]
 80129ac:	9e00      	ldr	r6, [sp, #0]
 80129ae:	4649      	mov	r1, r9
 80129b0:	4658      	mov	r0, fp
 80129b2:	47b0      	blx	r6
 80129b4:	f8da 3000 	ldr.w	r3, [sl]
 80129b8:	6821      	ldr	r1, [r4, #0]
 80129ba:	1d1a      	adds	r2, r3, #4
 80129bc:	f8ca 2000 	str.w	r2, [sl]
 80129c0:	f011 0f20 	tst.w	r1, #32
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	d010      	beq.n	80129ea <_scanf_i+0x1ca>
 80129c8:	6018      	str	r0, [r3, #0]
 80129ca:	68e3      	ldr	r3, [r4, #12]
 80129cc:	3301      	adds	r3, #1
 80129ce:	60e3      	str	r3, [r4, #12]
 80129d0:	eba5 0509 	sub.w	r5, r5, r9
 80129d4:	44a8      	add	r8, r5
 80129d6:	6925      	ldr	r5, [r4, #16]
 80129d8:	4445      	add	r5, r8
 80129da:	6125      	str	r5, [r4, #16]
 80129dc:	2000      	movs	r0, #0
 80129de:	b007      	add	sp, #28
 80129e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e4:	f04f 0800 	mov.w	r8, #0
 80129e8:	e7ca      	b.n	8012980 <_scanf_i+0x160>
 80129ea:	07ca      	lsls	r2, r1, #31
 80129ec:	bf4c      	ite	mi
 80129ee:	8018      	strhmi	r0, [r3, #0]
 80129f0:	6018      	strpl	r0, [r3, #0]
 80129f2:	e7ea      	b.n	80129ca <_scanf_i+0x1aa>
 80129f4:	2001      	movs	r0, #1
 80129f6:	e7f2      	b.n	80129de <_scanf_i+0x1be>
 80129f8:	08012f70 	.word	0x08012f70
 80129fc:	0800feb1 	.word	0x0800feb1
 8012a00:	08012ba9 	.word	0x08012ba9
 8012a04:	080131cd 	.word	0x080131cd

08012a08 <_read_r>:
 8012a08:	b538      	push	{r3, r4, r5, lr}
 8012a0a:	4c07      	ldr	r4, [pc, #28]	; (8012a28 <_read_r+0x20>)
 8012a0c:	4605      	mov	r5, r0
 8012a0e:	4608      	mov	r0, r1
 8012a10:	4611      	mov	r1, r2
 8012a12:	2200      	movs	r2, #0
 8012a14:	6022      	str	r2, [r4, #0]
 8012a16:	461a      	mov	r2, r3
 8012a18:	f000 f9ba 	bl	8012d90 <_read>
 8012a1c:	1c43      	adds	r3, r0, #1
 8012a1e:	d102      	bne.n	8012a26 <_read_r+0x1e>
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	b103      	cbz	r3, 8012a26 <_read_r+0x1e>
 8012a24:	602b      	str	r3, [r5, #0]
 8012a26:	bd38      	pop	{r3, r4, r5, pc}
 8012a28:	2000e484 	.word	0x2000e484

08012a2c <__sccl>:
 8012a2c:	b570      	push	{r4, r5, r6, lr}
 8012a2e:	780b      	ldrb	r3, [r1, #0]
 8012a30:	2b5e      	cmp	r3, #94	; 0x5e
 8012a32:	bf13      	iteet	ne
 8012a34:	1c4a      	addne	r2, r1, #1
 8012a36:	1c8a      	addeq	r2, r1, #2
 8012a38:	784b      	ldrbeq	r3, [r1, #1]
 8012a3a:	2100      	movne	r1, #0
 8012a3c:	bf08      	it	eq
 8012a3e:	2101      	moveq	r1, #1
 8012a40:	1e44      	subs	r4, r0, #1
 8012a42:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8012a46:	f804 1f01 	strb.w	r1, [r4, #1]!
 8012a4a:	42ac      	cmp	r4, r5
 8012a4c:	d1fb      	bne.n	8012a46 <__sccl+0x1a>
 8012a4e:	b913      	cbnz	r3, 8012a56 <__sccl+0x2a>
 8012a50:	3a01      	subs	r2, #1
 8012a52:	4610      	mov	r0, r2
 8012a54:	bd70      	pop	{r4, r5, r6, pc}
 8012a56:	f081 0401 	eor.w	r4, r1, #1
 8012a5a:	54c4      	strb	r4, [r0, r3]
 8012a5c:	1c51      	adds	r1, r2, #1
 8012a5e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8012a62:	2d2d      	cmp	r5, #45	; 0x2d
 8012a64:	f101 36ff 	add.w	r6, r1, #4294967295
 8012a68:	460a      	mov	r2, r1
 8012a6a:	d006      	beq.n	8012a7a <__sccl+0x4e>
 8012a6c:	2d5d      	cmp	r5, #93	; 0x5d
 8012a6e:	d0f0      	beq.n	8012a52 <__sccl+0x26>
 8012a70:	b90d      	cbnz	r5, 8012a76 <__sccl+0x4a>
 8012a72:	4632      	mov	r2, r6
 8012a74:	e7ed      	b.n	8012a52 <__sccl+0x26>
 8012a76:	462b      	mov	r3, r5
 8012a78:	e7ef      	b.n	8012a5a <__sccl+0x2e>
 8012a7a:	780e      	ldrb	r6, [r1, #0]
 8012a7c:	2e5d      	cmp	r6, #93	; 0x5d
 8012a7e:	d0fa      	beq.n	8012a76 <__sccl+0x4a>
 8012a80:	42b3      	cmp	r3, r6
 8012a82:	dcf8      	bgt.n	8012a76 <__sccl+0x4a>
 8012a84:	3301      	adds	r3, #1
 8012a86:	429e      	cmp	r6, r3
 8012a88:	54c4      	strb	r4, [r0, r3]
 8012a8a:	dcfb      	bgt.n	8012a84 <__sccl+0x58>
 8012a8c:	3102      	adds	r1, #2
 8012a8e:	e7e6      	b.n	8012a5e <__sccl+0x32>

08012a90 <strncmp>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	b16a      	cbz	r2, 8012ab0 <strncmp+0x20>
 8012a94:	3901      	subs	r1, #1
 8012a96:	1884      	adds	r4, r0, r2
 8012a98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012a9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d103      	bne.n	8012aac <strncmp+0x1c>
 8012aa4:	42a0      	cmp	r0, r4
 8012aa6:	d001      	beq.n	8012aac <strncmp+0x1c>
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d1f5      	bne.n	8012a98 <strncmp+0x8>
 8012aac:	1a98      	subs	r0, r3, r2
 8012aae:	bd10      	pop	{r4, pc}
 8012ab0:	4610      	mov	r0, r2
 8012ab2:	e7fc      	b.n	8012aae <strncmp+0x1e>

08012ab4 <_strtoul_l.isra.0>:
 8012ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ab8:	4680      	mov	r8, r0
 8012aba:	4689      	mov	r9, r1
 8012abc:	4692      	mov	sl, r2
 8012abe:	461e      	mov	r6, r3
 8012ac0:	460f      	mov	r7, r1
 8012ac2:	463d      	mov	r5, r7
 8012ac4:	9808      	ldr	r0, [sp, #32]
 8012ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012aca:	f7fe fd5d 	bl	8011588 <__locale_ctype_ptr_l>
 8012ace:	4420      	add	r0, r4
 8012ad0:	7843      	ldrb	r3, [r0, #1]
 8012ad2:	f013 0308 	ands.w	r3, r3, #8
 8012ad6:	d130      	bne.n	8012b3a <_strtoul_l.isra.0+0x86>
 8012ad8:	2c2d      	cmp	r4, #45	; 0x2d
 8012ada:	d130      	bne.n	8012b3e <_strtoul_l.isra.0+0x8a>
 8012adc:	787c      	ldrb	r4, [r7, #1]
 8012ade:	1cbd      	adds	r5, r7, #2
 8012ae0:	2101      	movs	r1, #1
 8012ae2:	2e00      	cmp	r6, #0
 8012ae4:	d05c      	beq.n	8012ba0 <_strtoul_l.isra.0+0xec>
 8012ae6:	2e10      	cmp	r6, #16
 8012ae8:	d109      	bne.n	8012afe <_strtoul_l.isra.0+0x4a>
 8012aea:	2c30      	cmp	r4, #48	; 0x30
 8012aec:	d107      	bne.n	8012afe <_strtoul_l.isra.0+0x4a>
 8012aee:	782b      	ldrb	r3, [r5, #0]
 8012af0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012af4:	2b58      	cmp	r3, #88	; 0x58
 8012af6:	d14e      	bne.n	8012b96 <_strtoul_l.isra.0+0xe2>
 8012af8:	786c      	ldrb	r4, [r5, #1]
 8012afa:	2610      	movs	r6, #16
 8012afc:	3502      	adds	r5, #2
 8012afe:	f04f 32ff 	mov.w	r2, #4294967295
 8012b02:	2300      	movs	r3, #0
 8012b04:	fbb2 f2f6 	udiv	r2, r2, r6
 8012b08:	fb06 fc02 	mul.w	ip, r6, r2
 8012b0c:	ea6f 0c0c 	mvn.w	ip, ip
 8012b10:	4618      	mov	r0, r3
 8012b12:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012b16:	2f09      	cmp	r7, #9
 8012b18:	d817      	bhi.n	8012b4a <_strtoul_l.isra.0+0x96>
 8012b1a:	463c      	mov	r4, r7
 8012b1c:	42a6      	cmp	r6, r4
 8012b1e:	dd23      	ble.n	8012b68 <_strtoul_l.isra.0+0xb4>
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	db1e      	blt.n	8012b62 <_strtoul_l.isra.0+0xae>
 8012b24:	4282      	cmp	r2, r0
 8012b26:	d31c      	bcc.n	8012b62 <_strtoul_l.isra.0+0xae>
 8012b28:	d101      	bne.n	8012b2e <_strtoul_l.isra.0+0x7a>
 8012b2a:	45a4      	cmp	ip, r4
 8012b2c:	db19      	blt.n	8012b62 <_strtoul_l.isra.0+0xae>
 8012b2e:	fb00 4006 	mla	r0, r0, r6, r4
 8012b32:	2301      	movs	r3, #1
 8012b34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b38:	e7eb      	b.n	8012b12 <_strtoul_l.isra.0+0x5e>
 8012b3a:	462f      	mov	r7, r5
 8012b3c:	e7c1      	b.n	8012ac2 <_strtoul_l.isra.0+0xe>
 8012b3e:	2c2b      	cmp	r4, #43	; 0x2b
 8012b40:	bf04      	itt	eq
 8012b42:	1cbd      	addeq	r5, r7, #2
 8012b44:	787c      	ldrbeq	r4, [r7, #1]
 8012b46:	4619      	mov	r1, r3
 8012b48:	e7cb      	b.n	8012ae2 <_strtoul_l.isra.0+0x2e>
 8012b4a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012b4e:	2f19      	cmp	r7, #25
 8012b50:	d801      	bhi.n	8012b56 <_strtoul_l.isra.0+0xa2>
 8012b52:	3c37      	subs	r4, #55	; 0x37
 8012b54:	e7e2      	b.n	8012b1c <_strtoul_l.isra.0+0x68>
 8012b56:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012b5a:	2f19      	cmp	r7, #25
 8012b5c:	d804      	bhi.n	8012b68 <_strtoul_l.isra.0+0xb4>
 8012b5e:	3c57      	subs	r4, #87	; 0x57
 8012b60:	e7dc      	b.n	8012b1c <_strtoul_l.isra.0+0x68>
 8012b62:	f04f 33ff 	mov.w	r3, #4294967295
 8012b66:	e7e5      	b.n	8012b34 <_strtoul_l.isra.0+0x80>
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	da09      	bge.n	8012b80 <_strtoul_l.isra.0+0xcc>
 8012b6c:	2322      	movs	r3, #34	; 0x22
 8012b6e:	f8c8 3000 	str.w	r3, [r8]
 8012b72:	f04f 30ff 	mov.w	r0, #4294967295
 8012b76:	f1ba 0f00 	cmp.w	sl, #0
 8012b7a:	d107      	bne.n	8012b8c <_strtoul_l.isra.0+0xd8>
 8012b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b80:	b101      	cbz	r1, 8012b84 <_strtoul_l.isra.0+0xd0>
 8012b82:	4240      	negs	r0, r0
 8012b84:	f1ba 0f00 	cmp.w	sl, #0
 8012b88:	d0f8      	beq.n	8012b7c <_strtoul_l.isra.0+0xc8>
 8012b8a:	b10b      	cbz	r3, 8012b90 <_strtoul_l.isra.0+0xdc>
 8012b8c:	f105 39ff 	add.w	r9, r5, #4294967295
 8012b90:	f8ca 9000 	str.w	r9, [sl]
 8012b94:	e7f2      	b.n	8012b7c <_strtoul_l.isra.0+0xc8>
 8012b96:	2430      	movs	r4, #48	; 0x30
 8012b98:	2e00      	cmp	r6, #0
 8012b9a:	d1b0      	bne.n	8012afe <_strtoul_l.isra.0+0x4a>
 8012b9c:	2608      	movs	r6, #8
 8012b9e:	e7ae      	b.n	8012afe <_strtoul_l.isra.0+0x4a>
 8012ba0:	2c30      	cmp	r4, #48	; 0x30
 8012ba2:	d0a4      	beq.n	8012aee <_strtoul_l.isra.0+0x3a>
 8012ba4:	260a      	movs	r6, #10
 8012ba6:	e7aa      	b.n	8012afe <_strtoul_l.isra.0+0x4a>

08012ba8 <_strtoul_r>:
 8012ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012baa:	4c06      	ldr	r4, [pc, #24]	; (8012bc4 <_strtoul_r+0x1c>)
 8012bac:	4d06      	ldr	r5, [pc, #24]	; (8012bc8 <_strtoul_r+0x20>)
 8012bae:	6824      	ldr	r4, [r4, #0]
 8012bb0:	6a24      	ldr	r4, [r4, #32]
 8012bb2:	2c00      	cmp	r4, #0
 8012bb4:	bf08      	it	eq
 8012bb6:	462c      	moveq	r4, r5
 8012bb8:	9400      	str	r4, [sp, #0]
 8012bba:	f7ff ff7b 	bl	8012ab4 <_strtoul_l.isra.0>
 8012bbe:	b003      	add	sp, #12
 8012bc0:	bd30      	pop	{r4, r5, pc}
 8012bc2:	bf00      	nop
 8012bc4:	20000344 	.word	0x20000344
 8012bc8:	200003a8 	.word	0x200003a8

08012bcc <__submore>:
 8012bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd0:	460c      	mov	r4, r1
 8012bd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bd8:	4299      	cmp	r1, r3
 8012bda:	d11d      	bne.n	8012c18 <__submore+0x4c>
 8012bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012be0:	f7fb fb24 	bl	800e22c <_malloc_r>
 8012be4:	b918      	cbnz	r0, 8012bee <__submore+0x22>
 8012be6:	f04f 30ff 	mov.w	r0, #4294967295
 8012bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bf2:	63a3      	str	r3, [r4, #56]	; 0x38
 8012bf4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8012bfa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8012bfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012c02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012c06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012c0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8012c0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8012c12:	6020      	str	r0, [r4, #0]
 8012c14:	2000      	movs	r0, #0
 8012c16:	e7e8      	b.n	8012bea <__submore+0x1e>
 8012c18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012c1a:	0077      	lsls	r7, r6, #1
 8012c1c:	463a      	mov	r2, r7
 8012c1e:	f000 f858 	bl	8012cd2 <_realloc_r>
 8012c22:	4605      	mov	r5, r0
 8012c24:	2800      	cmp	r0, #0
 8012c26:	d0de      	beq.n	8012be6 <__submore+0x1a>
 8012c28:	eb00 0806 	add.w	r8, r0, r6
 8012c2c:	4601      	mov	r1, r0
 8012c2e:	4632      	mov	r2, r6
 8012c30:	4640      	mov	r0, r8
 8012c32:	f7fb fa8b 	bl	800e14c <memcpy>
 8012c36:	f8c4 8000 	str.w	r8, [r4]
 8012c3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012c3e:	e7e9      	b.n	8012c14 <__submore+0x48>

08012c40 <__ascii_wctomb>:
 8012c40:	b149      	cbz	r1, 8012c56 <__ascii_wctomb+0x16>
 8012c42:	2aff      	cmp	r2, #255	; 0xff
 8012c44:	bf85      	ittet	hi
 8012c46:	238a      	movhi	r3, #138	; 0x8a
 8012c48:	6003      	strhi	r3, [r0, #0]
 8012c4a:	700a      	strbls	r2, [r1, #0]
 8012c4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012c50:	bf98      	it	ls
 8012c52:	2001      	movls	r0, #1
 8012c54:	4770      	bx	lr
 8012c56:	4608      	mov	r0, r1
 8012c58:	4770      	bx	lr
	...

08012c5c <_fstat_r>:
 8012c5c:	b538      	push	{r3, r4, r5, lr}
 8012c5e:	4c07      	ldr	r4, [pc, #28]	; (8012c7c <_fstat_r+0x20>)
 8012c60:	2300      	movs	r3, #0
 8012c62:	4605      	mov	r5, r0
 8012c64:	4608      	mov	r0, r1
 8012c66:	4611      	mov	r1, r2
 8012c68:	6023      	str	r3, [r4, #0]
 8012c6a:	f000 f869 	bl	8012d40 <_fstat>
 8012c6e:	1c43      	adds	r3, r0, #1
 8012c70:	d102      	bne.n	8012c78 <_fstat_r+0x1c>
 8012c72:	6823      	ldr	r3, [r4, #0]
 8012c74:	b103      	cbz	r3, 8012c78 <_fstat_r+0x1c>
 8012c76:	602b      	str	r3, [r5, #0]
 8012c78:	bd38      	pop	{r3, r4, r5, pc}
 8012c7a:	bf00      	nop
 8012c7c:	2000e484 	.word	0x2000e484

08012c80 <_isatty_r>:
 8012c80:	b538      	push	{r3, r4, r5, lr}
 8012c82:	4c06      	ldr	r4, [pc, #24]	; (8012c9c <_isatty_r+0x1c>)
 8012c84:	2300      	movs	r3, #0
 8012c86:	4605      	mov	r5, r0
 8012c88:	4608      	mov	r0, r1
 8012c8a:	6023      	str	r3, [r4, #0]
 8012c8c:	f000 f868 	bl	8012d60 <_isatty>
 8012c90:	1c43      	adds	r3, r0, #1
 8012c92:	d102      	bne.n	8012c9a <_isatty_r+0x1a>
 8012c94:	6823      	ldr	r3, [r4, #0]
 8012c96:	b103      	cbz	r3, 8012c9a <_isatty_r+0x1a>
 8012c98:	602b      	str	r3, [r5, #0]
 8012c9a:	bd38      	pop	{r3, r4, r5, pc}
 8012c9c:	2000e484 	.word	0x2000e484

08012ca0 <memmove>:
 8012ca0:	4288      	cmp	r0, r1
 8012ca2:	b510      	push	{r4, lr}
 8012ca4:	eb01 0302 	add.w	r3, r1, r2
 8012ca8:	d807      	bhi.n	8012cba <memmove+0x1a>
 8012caa:	1e42      	subs	r2, r0, #1
 8012cac:	4299      	cmp	r1, r3
 8012cae:	d00a      	beq.n	8012cc6 <memmove+0x26>
 8012cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012cb4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012cb8:	e7f8      	b.n	8012cac <memmove+0xc>
 8012cba:	4283      	cmp	r3, r0
 8012cbc:	d9f5      	bls.n	8012caa <memmove+0xa>
 8012cbe:	1881      	adds	r1, r0, r2
 8012cc0:	1ad2      	subs	r2, r2, r3
 8012cc2:	42d3      	cmn	r3, r2
 8012cc4:	d100      	bne.n	8012cc8 <memmove+0x28>
 8012cc6:	bd10      	pop	{r4, pc}
 8012cc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ccc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012cd0:	e7f7      	b.n	8012cc2 <memmove+0x22>

08012cd2 <_realloc_r>:
 8012cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd4:	4607      	mov	r7, r0
 8012cd6:	4614      	mov	r4, r2
 8012cd8:	460e      	mov	r6, r1
 8012cda:	b921      	cbnz	r1, 8012ce6 <_realloc_r+0x14>
 8012cdc:	4611      	mov	r1, r2
 8012cde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012ce2:	f7fb baa3 	b.w	800e22c <_malloc_r>
 8012ce6:	b922      	cbnz	r2, 8012cf2 <_realloc_r+0x20>
 8012ce8:	f7fb fa52 	bl	800e190 <_free_r>
 8012cec:	4625      	mov	r5, r4
 8012cee:	4628      	mov	r0, r5
 8012cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf2:	f000 f814 	bl	8012d1e <_malloc_usable_size_r>
 8012cf6:	42a0      	cmp	r0, r4
 8012cf8:	d20f      	bcs.n	8012d1a <_realloc_r+0x48>
 8012cfa:	4621      	mov	r1, r4
 8012cfc:	4638      	mov	r0, r7
 8012cfe:	f7fb fa95 	bl	800e22c <_malloc_r>
 8012d02:	4605      	mov	r5, r0
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d0f2      	beq.n	8012cee <_realloc_r+0x1c>
 8012d08:	4631      	mov	r1, r6
 8012d0a:	4622      	mov	r2, r4
 8012d0c:	f7fb fa1e 	bl	800e14c <memcpy>
 8012d10:	4631      	mov	r1, r6
 8012d12:	4638      	mov	r0, r7
 8012d14:	f7fb fa3c 	bl	800e190 <_free_r>
 8012d18:	e7e9      	b.n	8012cee <_realloc_r+0x1c>
 8012d1a:	4635      	mov	r5, r6
 8012d1c:	e7e7      	b.n	8012cee <_realloc_r+0x1c>

08012d1e <_malloc_usable_size_r>:
 8012d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d22:	1f18      	subs	r0, r3, #4
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	bfbc      	itt	lt
 8012d28:	580b      	ldrlt	r3, [r1, r0]
 8012d2a:	18c0      	addlt	r0, r0, r3
 8012d2c:	4770      	bx	lr
	...

08012d30 <_close>:
 8012d30:	4b02      	ldr	r3, [pc, #8]	; (8012d3c <_close+0xc>)
 8012d32:	2258      	movs	r2, #88	; 0x58
 8012d34:	601a      	str	r2, [r3, #0]
 8012d36:	f04f 30ff 	mov.w	r0, #4294967295
 8012d3a:	4770      	bx	lr
 8012d3c:	2000e484 	.word	0x2000e484

08012d40 <_fstat>:
 8012d40:	4b02      	ldr	r3, [pc, #8]	; (8012d4c <_fstat+0xc>)
 8012d42:	2258      	movs	r2, #88	; 0x58
 8012d44:	601a      	str	r2, [r3, #0]
 8012d46:	f04f 30ff 	mov.w	r0, #4294967295
 8012d4a:	4770      	bx	lr
 8012d4c:	2000e484 	.word	0x2000e484

08012d50 <_getpid>:
 8012d50:	4b02      	ldr	r3, [pc, #8]	; (8012d5c <_getpid+0xc>)
 8012d52:	2258      	movs	r2, #88	; 0x58
 8012d54:	601a      	str	r2, [r3, #0]
 8012d56:	f04f 30ff 	mov.w	r0, #4294967295
 8012d5a:	4770      	bx	lr
 8012d5c:	2000e484 	.word	0x2000e484

08012d60 <_isatty>:
 8012d60:	4b02      	ldr	r3, [pc, #8]	; (8012d6c <_isatty+0xc>)
 8012d62:	2258      	movs	r2, #88	; 0x58
 8012d64:	601a      	str	r2, [r3, #0]
 8012d66:	2000      	movs	r0, #0
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	2000e484 	.word	0x2000e484

08012d70 <_kill>:
 8012d70:	4b02      	ldr	r3, [pc, #8]	; (8012d7c <_kill+0xc>)
 8012d72:	2258      	movs	r2, #88	; 0x58
 8012d74:	601a      	str	r2, [r3, #0]
 8012d76:	f04f 30ff 	mov.w	r0, #4294967295
 8012d7a:	4770      	bx	lr
 8012d7c:	2000e484 	.word	0x2000e484

08012d80 <_lseek>:
 8012d80:	4b02      	ldr	r3, [pc, #8]	; (8012d8c <_lseek+0xc>)
 8012d82:	2258      	movs	r2, #88	; 0x58
 8012d84:	601a      	str	r2, [r3, #0]
 8012d86:	f04f 30ff 	mov.w	r0, #4294967295
 8012d8a:	4770      	bx	lr
 8012d8c:	2000e484 	.word	0x2000e484

08012d90 <_read>:
 8012d90:	4b02      	ldr	r3, [pc, #8]	; (8012d9c <_read+0xc>)
 8012d92:	2258      	movs	r2, #88	; 0x58
 8012d94:	601a      	str	r2, [r3, #0]
 8012d96:	f04f 30ff 	mov.w	r0, #4294967295
 8012d9a:	4770      	bx	lr
 8012d9c:	2000e484 	.word	0x2000e484

08012da0 <_sbrk>:
 8012da0:	4b04      	ldr	r3, [pc, #16]	; (8012db4 <_sbrk+0x14>)
 8012da2:	6819      	ldr	r1, [r3, #0]
 8012da4:	4602      	mov	r2, r0
 8012da6:	b909      	cbnz	r1, 8012dac <_sbrk+0xc>
 8012da8:	4903      	ldr	r1, [pc, #12]	; (8012db8 <_sbrk+0x18>)
 8012daa:	6019      	str	r1, [r3, #0]
 8012dac:	6818      	ldr	r0, [r3, #0]
 8012dae:	4402      	add	r2, r0
 8012db0:	601a      	str	r2, [r3, #0]
 8012db2:	4770      	bx	lr
 8012db4:	200010c8 	.word	0x200010c8
 8012db8:	2000e488 	.word	0x2000e488

08012dbc <_exit>:
 8012dbc:	e7fe      	b.n	8012dbc <_exit>
	...

08012dc0 <_init>:
 8012dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dc2:	bf00      	nop
 8012dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dc6:	bc08      	pop	{r3}
 8012dc8:	469e      	mov	lr, r3
 8012dca:	4770      	bx	lr

08012dcc <_fini>:
 8012dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dce:	bf00      	nop
 8012dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dd2:	bc08      	pop	{r3}
 8012dd4:	469e      	mov	lr, r3
 8012dd6:	4770      	bx	lr
